
STM32_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d0c  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e0c  08017efc  08017efc  00018efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ad08  0801ad08  0001c078  2**0
                  CONTENTS
  4 .ARM          00000008  0801ad08  0801ad08  0001bd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ad10  0801ad10  0001c078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ad10  0801ad10  0001bd10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ad14  0801ad14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0801ad18  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009ab0  20000078  0801ad90  0001c078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009b28  0801ad90  0001cb28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001c078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000326ac  00000000  00000000  0001c0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008587  00000000  00000000  0004e74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002380  00000000  00000000  00056cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c03  00000000  00000000  00059058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000322f9  00000000  00000000  0005ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c927  00000000  00000000  0008cf54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2f7  00000000  00000000  000c987b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a8b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009740  00000000  00000000  001a8bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b22f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000078 	.word	0x20000078
 800020c:	00000000 	.word	0x00000000
 8000210:	08017ee4 	.word	0x08017ee4

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000007c 	.word	0x2000007c
 800022c:	08017ee4 	.word	0x08017ee4

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_uldivmod>:
 8000254:	b953      	cbnz	r3, 800026c <__aeabi_uldivmod+0x18>
 8000256:	b94a      	cbnz	r2, 800026c <__aeabi_uldivmod+0x18>
 8000258:	2900      	cmp	r1, #0
 800025a:	bf08      	it	eq
 800025c:	2800      	cmpeq	r0, #0
 800025e:	bf1c      	itt	ne
 8000260:	f04f 31ff 	movne.w	r1, #4294967295
 8000264:	f04f 30ff 	movne.w	r0, #4294967295
 8000268:	f000 b968 	b.w	800053c <__aeabi_idiv0>
 800026c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	f8dd e004 	ldr.w	lr, [sp, #4]
 800027c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000280:	b004      	add	sp, #16
 8000282:	4770      	bx	lr

08000284 <__udivmoddi4>:
 8000284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000288:	9d08      	ldr	r5, [sp, #32]
 800028a:	460c      	mov	r4, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14e      	bne.n	800032e <__udivmoddi4+0xaa>
 8000290:	4694      	mov	ip, r2
 8000292:	458c      	cmp	ip, r1
 8000294:	4686      	mov	lr, r0
 8000296:	fab2 f282 	clz	r2, r2
 800029a:	d962      	bls.n	8000362 <__udivmoddi4+0xde>
 800029c:	b14a      	cbz	r2, 80002b2 <__udivmoddi4+0x2e>
 800029e:	f1c2 0320 	rsb	r3, r2, #32
 80002a2:	4091      	lsls	r1, r2
 80002a4:	fa20 f303 	lsr.w	r3, r0, r3
 80002a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ac:	4319      	orrs	r1, r3
 80002ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80002b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ba:	fb07 1114 	mls	r1, r7, r4, r1
 80002be:	fa1f f68c 	uxth.w	r6, ip
 80002c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ca:	fb04 f106 	mul.w	r1, r4, r6
 80002ce:	4299      	cmp	r1, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x64>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002da:	f080 8110 	bcs.w	80004fe <__udivmoddi4+0x27a>
 80002de:	4299      	cmp	r1, r3
 80002e0:	f240 810d 	bls.w	80004fe <__udivmoddi4+0x27a>
 80002e4:	3c02      	subs	r4, #2
 80002e6:	4463      	add	r3, ip
 80002e8:	1a59      	subs	r1, r3, r1
 80002ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ee:	fb07 1110 	mls	r1, r7, r0, r1
 80002f2:	fb00 f606 	mul.w	r6, r0, r6
 80002f6:	fa1f f38e 	uxth.w	r3, lr
 80002fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fe:	429e      	cmp	r6, r3
 8000300:	d90a      	bls.n	8000318 <__udivmoddi4+0x94>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f100 31ff 	add.w	r1, r0, #4294967295
 800030a:	f080 80fa 	bcs.w	8000502 <__udivmoddi4+0x27e>
 800030e:	429e      	cmp	r6, r3
 8000310:	f240 80f7 	bls.w	8000502 <__udivmoddi4+0x27e>
 8000314:	4463      	add	r3, ip
 8000316:	3802      	subs	r0, #2
 8000318:	2100      	movs	r1, #0
 800031a:	1b9b      	subs	r3, r3, r6
 800031c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000320:	b11d      	cbz	r5, 800032a <__udivmoddi4+0xa6>
 8000322:	40d3      	lsrs	r3, r2
 8000324:	2200      	movs	r2, #0
 8000326:	e9c5 3200 	strd	r3, r2, [r5]
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	428b      	cmp	r3, r1
 8000330:	d905      	bls.n	800033e <__udivmoddi4+0xba>
 8000332:	b10d      	cbz	r5, 8000338 <__udivmoddi4+0xb4>
 8000334:	e9c5 0100 	strd	r0, r1, [r5]
 8000338:	2100      	movs	r1, #0
 800033a:	4608      	mov	r0, r1
 800033c:	e7f5      	b.n	800032a <__udivmoddi4+0xa6>
 800033e:	fab3 f183 	clz	r1, r3
 8000342:	2900      	cmp	r1, #0
 8000344:	d146      	bne.n	80003d4 <__udivmoddi4+0x150>
 8000346:	42a3      	cmp	r3, r4
 8000348:	d302      	bcc.n	8000350 <__udivmoddi4+0xcc>
 800034a:	4290      	cmp	r0, r2
 800034c:	f0c0 80ee 	bcc.w	800052c <__udivmoddi4+0x2a8>
 8000350:	1a86      	subs	r6, r0, r2
 8000352:	eb64 0303 	sbc.w	r3, r4, r3
 8000356:	2001      	movs	r0, #1
 8000358:	2d00      	cmp	r5, #0
 800035a:	d0e6      	beq.n	800032a <__udivmoddi4+0xa6>
 800035c:	e9c5 6300 	strd	r6, r3, [r5]
 8000360:	e7e3      	b.n	800032a <__udivmoddi4+0xa6>
 8000362:	2a00      	cmp	r2, #0
 8000364:	f040 808f 	bne.w	8000486 <__udivmoddi4+0x202>
 8000368:	eba1 040c 	sub.w	r4, r1, ip
 800036c:	2101      	movs	r1, #1
 800036e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000372:	fa1f f78c 	uxth.w	r7, ip
 8000376:	fbb4 f6f8 	udiv	r6, r4, r8
 800037a:	fb08 4416 	mls	r4, r8, r6, r4
 800037e:	fb07 f006 	mul.w	r0, r7, r6
 8000382:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038a:	4298      	cmp	r0, r3
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x11c>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 34ff 	add.w	r4, r6, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x11a>
 8000398:	4298      	cmp	r0, r3
 800039a:	f200 80cb 	bhi.w	8000534 <__udivmoddi4+0x2b0>
 800039e:	4626      	mov	r6, r4
 80003a0:	1a1c      	subs	r4, r3, r0
 80003a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003a6:	fb08 4410 	mls	r4, r8, r0, r4
 80003aa:	fb00 f707 	mul.w	r7, r0, r7
 80003ae:	fa1f f38e 	uxth.w	r3, lr
 80003b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b6:	429f      	cmp	r7, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x148>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 34ff 	add.w	r4, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x146>
 80003c4:	429f      	cmp	r7, r3
 80003c6:	f200 80ae 	bhi.w	8000526 <__udivmoddi4+0x2a2>
 80003ca:	4620      	mov	r0, r4
 80003cc:	1bdb      	subs	r3, r3, r7
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	e7a5      	b.n	8000320 <__udivmoddi4+0x9c>
 80003d4:	f1c1 0720 	rsb	r7, r1, #32
 80003d8:	408b      	lsls	r3, r1
 80003da:	fa22 fc07 	lsr.w	ip, r2, r7
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa24 f607 	lsr.w	r6, r4, r7
 80003e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ea:	fbb6 f8f9 	udiv	r8, r6, r9
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	fb09 6618 	mls	r6, r9, r8, r6
 80003f6:	fa20 f307 	lsr.w	r3, r0, r7
 80003fa:	408c      	lsls	r4, r1
 80003fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000400:	fb08 f00e 	mul.w	r0, r8, lr
 8000404:	431c      	orrs	r4, r3
 8000406:	0c23      	lsrs	r3, r4, #16
 8000408:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800040c:	4298      	cmp	r0, r3
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	d90a      	bls.n	800042a <__udivmoddi4+0x1a6>
 8000414:	eb1c 0303 	adds.w	r3, ip, r3
 8000418:	f108 36ff 	add.w	r6, r8, #4294967295
 800041c:	f080 8081 	bcs.w	8000522 <__udivmoddi4+0x29e>
 8000420:	4298      	cmp	r0, r3
 8000422:	d97e      	bls.n	8000522 <__udivmoddi4+0x29e>
 8000424:	f1a8 0802 	sub.w	r8, r8, #2
 8000428:	4463      	add	r3, ip
 800042a:	1a1e      	subs	r6, r3, r0
 800042c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000430:	fb09 6613 	mls	r6, r9, r3, r6
 8000434:	fb03 fe0e 	mul.w	lr, r3, lr
 8000438:	b2a4      	uxth	r4, r4
 800043a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800043e:	45a6      	cmp	lr, r4
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x1d0>
 8000442:	eb1c 0404 	adds.w	r4, ip, r4
 8000446:	f103 30ff 	add.w	r0, r3, #4294967295
 800044a:	d266      	bcs.n	800051a <__udivmoddi4+0x296>
 800044c:	45a6      	cmp	lr, r4
 800044e:	d964      	bls.n	800051a <__udivmoddi4+0x296>
 8000450:	3b02      	subs	r3, #2
 8000452:	4464      	add	r4, ip
 8000454:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000458:	fba0 8302 	umull	r8, r3, r0, r2
 800045c:	eba4 040e 	sub.w	r4, r4, lr
 8000460:	429c      	cmp	r4, r3
 8000462:	46c6      	mov	lr, r8
 8000464:	461e      	mov	r6, r3
 8000466:	d350      	bcc.n	800050a <__udivmoddi4+0x286>
 8000468:	d04d      	beq.n	8000506 <__udivmoddi4+0x282>
 800046a:	b155      	cbz	r5, 8000482 <__udivmoddi4+0x1fe>
 800046c:	ebba 030e 	subs.w	r3, sl, lr
 8000470:	eb64 0406 	sbc.w	r4, r4, r6
 8000474:	fa04 f707 	lsl.w	r7, r4, r7
 8000478:	40cb      	lsrs	r3, r1
 800047a:	431f      	orrs	r7, r3
 800047c:	40cc      	lsrs	r4, r1
 800047e:	e9c5 7400 	strd	r7, r4, [r5]
 8000482:	2100      	movs	r1, #0
 8000484:	e751      	b.n	800032a <__udivmoddi4+0xa6>
 8000486:	fa0c fc02 	lsl.w	ip, ip, r2
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d9      	lsrs	r1, r3
 8000490:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000494:	fa20 f303 	lsr.w	r3, r0, r3
 8000498:	fa00 fe02 	lsl.w	lr, r0, r2
 800049c:	fbb1 f0f8 	udiv	r0, r1, r8
 80004a0:	fb08 1110 	mls	r1, r8, r0, r1
 80004a4:	4094      	lsls	r4, r2
 80004a6:	431c      	orrs	r4, r3
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	0c23      	lsrs	r3, r4, #16
 80004ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004b2:	fb00 f107 	mul.w	r1, r0, r7
 80004b6:	4299      	cmp	r1, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x248>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f100 36ff 	add.w	r6, r0, #4294967295
 80004c2:	d22c      	bcs.n	800051e <__udivmoddi4+0x29a>
 80004c4:	4299      	cmp	r1, r3
 80004c6:	d92a      	bls.n	800051e <__udivmoddi4+0x29a>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4463      	add	r3, ip
 80004cc:	1a5b      	subs	r3, r3, r1
 80004ce:	fbb3 f1f8 	udiv	r1, r3, r8
 80004d2:	fb08 3311 	mls	r3, r8, r1, r3
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004dc:	fb01 f307 	mul.w	r3, r1, r7
 80004e0:	42a3      	cmp	r3, r4
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x272>
 80004e4:	eb1c 0404 	adds.w	r4, ip, r4
 80004e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ec:	d213      	bcs.n	8000516 <__udivmoddi4+0x292>
 80004ee:	42a3      	cmp	r3, r4
 80004f0:	d911      	bls.n	8000516 <__udivmoddi4+0x292>
 80004f2:	3902      	subs	r1, #2
 80004f4:	4464      	add	r4, ip
 80004f6:	1ae4      	subs	r4, r4, r3
 80004f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xf2>
 80004fe:	4604      	mov	r4, r0
 8000500:	e6f2      	b.n	80002e8 <__udivmoddi4+0x64>
 8000502:	4608      	mov	r0, r1
 8000504:	e708      	b.n	8000318 <__udivmoddi4+0x94>
 8000506:	45c2      	cmp	sl, r8
 8000508:	d2af      	bcs.n	800046a <__udivmoddi4+0x1e6>
 800050a:	ebb8 0e02 	subs.w	lr, r8, r2
 800050e:	eb63 060c 	sbc.w	r6, r3, ip
 8000512:	3801      	subs	r0, #1
 8000514:	e7a9      	b.n	800046a <__udivmoddi4+0x1e6>
 8000516:	4631      	mov	r1, r6
 8000518:	e7ed      	b.n	80004f6 <__udivmoddi4+0x272>
 800051a:	4603      	mov	r3, r0
 800051c:	e79a      	b.n	8000454 <__udivmoddi4+0x1d0>
 800051e:	4630      	mov	r0, r6
 8000520:	e7d4      	b.n	80004cc <__udivmoddi4+0x248>
 8000522:	46b0      	mov	r8, r6
 8000524:	e781      	b.n	800042a <__udivmoddi4+0x1a6>
 8000526:	4463      	add	r3, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e74f      	b.n	80003cc <__udivmoddi4+0x148>
 800052c:	4606      	mov	r6, r0
 800052e:	4623      	mov	r3, r4
 8000530:	4608      	mov	r0, r1
 8000532:	e711      	b.n	8000358 <__udivmoddi4+0xd4>
 8000534:	3e02      	subs	r6, #2
 8000536:	4463      	add	r3, ip
 8000538:	e732      	b.n	80003a0 <__udivmoddi4+0x11c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr

08000554 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4a07      	ldr	r2, [pc, #28]	@ (8000580 <vApplicationGetIdleTaskMemory+0x2c>)
 8000564:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	4a06      	ldr	r2, [pc, #24]	@ (8000584 <vApplicationGetIdleTaskMemory+0x30>)
 800056a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000572:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20000094 	.word	0x20000094
 8000584:	20000134 	.word	0x20000134

08000588 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000590:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000594:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005a4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005a8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d00b      	beq.n	80005c8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	e000      	b.n	80005b4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005b2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f9      	beq.n	80005b2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005be:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	b2d2      	uxtb	r2, r2
 80005c6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c8:	687b      	ldr	r3, [r7, #4]
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e009      	b.n	80005fa <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffca 	bl	8000588 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697a      	ldr	r2, [r7, #20]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	429a      	cmp	r2, r3
 8000600:	dbf1      	blt.n	80005e6 <_write+0x12>
  }
  return len;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b5b0      	push	{r4, r5, r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc7b 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f81d 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8b1 	bl	8000780 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f885 	bl	800072c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <main+0x40>)
 8000624:	1d3c      	adds	r4, r7, #4
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f004 fca9 	bl	8004f90 <osThreadCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a03      	ldr	r2, [pc, #12]	@ (8000650 <main+0x44>)
 8000642:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000644:	f004 fc8d 	bl	8004f62 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <main+0x3c>
 800064c:	08017f08 	.word	0x08017f08
 8000650:	200015fc 	.word	0x200015fc

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2238      	movs	r2, #56	@ 0x38
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f016 feee 	bl	8017444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000680:	2304      	movs	r3, #4
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000688:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800068c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000698:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006a8:	2340      	movs	r3, #64	@ 0x40
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0318 	add.w	r3, r7, #24
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 f9a7 	bl	8002a04 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006bc:	f000 fa1e 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2102      	movs	r1, #2
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fca8 	bl	8003030 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006e6:	f000 fa09 	bl	8000afc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 80006f0:	2000      	movs	r0, #0
 80006f2:	f002 fd87 	bl	8003204 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <SystemClock_Config+0xd0>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80006fe:	4a09      	ldr	r2, [pc, #36]	@ (8000724 <SystemClock_Config+0xd0>)
 8000700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000704:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8000706:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <SystemClock_Config+0xd0>)
 8000708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800070e:	4a05      	ldr	r2, [pc, #20]	@ (8000724 <SystemClock_Config+0xd0>)
 8000710:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000714:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000716:	4b04      	ldr	r3, [pc, #16]	@ (8000728 <SystemClock_Config+0xd4>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	@ 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	42420070 	.word	0x42420070

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART1_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART1_UART_Init+0x4c>)
 8000764:	f003 f91e 	bl	80039a4 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f9c5 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200015b4 	.word	0x200015b4
 800077c:	40013800 	.word	0x40013800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0310 	add.w	r3, r7, #16
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b2a      	ldr	r3, [pc, #168]	@ (8000840 <MX_GPIO_Init+0xc0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a29      	ldr	r2, [pc, #164]	@ (8000840 <MX_GPIO_Init+0xc0>)
 800079a:	f043 0310 	orr.w	r3, r3, #16
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b27      	ldr	r3, [pc, #156]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0310 	and.w	r3, r3, #16
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007ca:	f043 0308 	orr.w	r3, r3, #8
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0308 	and.w	r3, r3, #8
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_GPIO_Init+0xc0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0320 	and.w	r3, r3, #32
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fa:	4812      	ldr	r0, [pc, #72]	@ (8000844 <MX_GPIO_Init+0xc4>)
 80007fc:	f002 f8d0 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	480a      	ldr	r0, [pc, #40]	@ (8000844 <MX_GPIO_Init+0xc4>)
 800081a:	f001 ff3d 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800081e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	4619      	mov	r1, r3
 8000832:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_GPIO_Init+0xc8>)
 8000834:	f001 ff30 	bl	8002698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	40011000 	.word	0x40011000
 8000848:	40010800 	.word	0x40010800

0800084c <MqttClientSubTask>:

/* USER CODE BEGIN 4 */
void MqttClientSubTask(void const *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//waiting for valid ip address
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MqttClientSubTask+0x64>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d007      	beq.n	800086c <MqttClientSubTask+0x20>
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MqttClientSubTask+0x64>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <MqttClientSubTask+0x20>
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MqttClientSubTask+0x64>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d104      	bne.n	8000876 <MqttClientSubTask+0x2a>
		{
			osDelay(1000);
 800086c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000870:	f004 fbda 	bl	8005028 <osDelay>
			continue;
 8000874:	e003      	b.n	800087e <MqttClientSubTask+0x32>
		}
		else
		{
			printf("DHCP/Static IP O.K.\n");
 8000876:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <MqttClientSubTask+0x68>)
 8000878:	f016 fcf4 	bl	8017264 <puts>
			break;
 800087c:	e000      	b.n	8000880 <MqttClientSubTask+0x34>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 800087e:	e7e9      	b.n	8000854 <MqttClientSubTask+0x8>
		}
	}

	while(1)
	{
		if(!mqttClient.isconnected)
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <MqttClientSubTask+0x6c>)
 8000882:	6a1b      	ldr	r3, [r3, #32]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d109      	bne.n	800089c <MqttClientSubTask+0x50>
		{
			//try to connect to the broker
			MQTTDisconnect(&mqttClient);
 8000888:	480b      	ldr	r0, [pc, #44]	@ (80008b8 <MqttClientSubTask+0x6c>)
 800088a:	f015 fb14 	bl	8015eb6 <MQTTDisconnect>
			MqttConnectBroker();
 800088e:	f000 f839 	bl	8000904 <MqttConnectBroker>
			osDelay(1000);
 8000892:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000896:	f004 fbc7 	bl	8005028 <osDelay>
 800089a:	e7f1      	b.n	8000880 <MqttClientSubTask+0x34>
		}
		else
		{
			MQTTYield(&mqttClient, 1000); //handle timer
 800089c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008a0:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MqttClientSubTask+0x6c>)
 80008a2:	f015 f841 	bl	8015928 <MQTTYield>
			osDelay(100);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f004 fbbe 	bl	8005028 <osDelay>
		if(!mqttClient.isconnected)
 80008ac:	e7e8      	b.n	8000880 <MqttClientSubTask+0x34>
 80008ae:	bf00      	nop
 80008b0:	2000165c 	.word	0x2000165c
 80008b4:	08017f24 	.word	0x08017f24
 80008b8:	2000094c 	.word	0x2000094c

080008bc <MqttClientPubTask>:
		}
	}
}

void MqttClientPubTask(void const *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b088      	sub	sp, #32
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	const char* str = "MQTT message from STM32";
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MqttClientPubTask+0x3c>)
 80008c6:	61fb      	str	r3, [r7, #28]
	MQTTMessage message;

	while(1)
	{
		if(mqttClient.isconnected)
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MqttClientPubTask+0x40>)
 80008ca:	6a1b      	ldr	r3, [r3, #32]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00d      	beq.n	80008ec <MqttClientPubTask+0x30>
		{
			message.payload = (void*)str;
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	617b      	str	r3, [r7, #20]
			message.payloadlen = strlen(str);
 80008d4:	69f8      	ldr	r0, [r7, #28]
 80008d6:	f7ff fcb5 	bl	8000244 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	61bb      	str	r3, [r7, #24]

			MQTTPublish(&mqttClient, "test", &message); //publish a message
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	461a      	mov	r2, r3
 80008e4:	4906      	ldr	r1, [pc, #24]	@ (8000900 <MqttClientPubTask+0x44>)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MqttClientPubTask+0x40>)
 80008e8:	f015 fa1f 	bl	8015d2a <MQTTPublish>
		}

		osDelay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f0:	f004 fb9a 	bl	8005028 <osDelay>
		if(mqttClient.isconnected)
 80008f4:	e7e8      	b.n	80008c8 <MqttClientPubTask+0xc>
 80008f6:	bf00      	nop
 80008f8:	08017f38 	.word	0x08017f38
 80008fc:	2000094c 	.word	0x2000094c
 8000900:	08017f50 	.word	0x08017f50

08000904 <MqttConnectBroker>:
	}
}
int MqttConnectBroker()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	@ 0x70
 8000908:	af04      	add	r7, sp, #16
	int ret;

	NewNetwork(&net);
 800090a:	482e      	ldr	r0, [pc, #184]	@ (80009c4 <MqttConnectBroker+0xc0>)
 800090c:	f015 fb62 	bl	8015fd4 <NewNetwork>
	ret = ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 8000910:	f240 725b 	movw	r2, #1883	@ 0x75b
 8000914:	492c      	ldr	r1, [pc, #176]	@ (80009c8 <MqttConnectBroker+0xc4>)
 8000916:	482b      	ldr	r0, [pc, #172]	@ (80009c4 <MqttConnectBroker+0xc0>)
 8000918:	f015 fb78 	bl	801600c <ConnectNetwork>
 800091c:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if(ret != MQTT_SUCCESS)
 800091e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000920:	2b00      	cmp	r3, #0
 8000922:	d005      	beq.n	8000930 <MqttConnectBroker+0x2c>
	{
		printf("ConnectNetwork failed.\n");
 8000924:	4829      	ldr	r0, [pc, #164]	@ (80009cc <MqttConnectBroker+0xc8>)
 8000926:	f016 fc9d 	bl	8017264 <puts>
		return -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	e044      	b.n	80009ba <MqttConnectBroker+0xb6>
	}

	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8000930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000934:	9302      	str	r3, [sp, #8]
 8000936:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <MqttConnectBroker+0xcc>)
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MqttConnectBroker+0xd0>)
 8000942:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000946:	491f      	ldr	r1, [pc, #124]	@ (80009c4 <MqttConnectBroker+0xc0>)
 8000948:	4823      	ldr	r0, [pc, #140]	@ (80009d8 <MqttConnectBroker+0xd4>)
 800094a:	f014 fc8f 	bl	801526c <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800094e:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <MqttConnectBroker+0xd8>)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	4611      	mov	r1, r2
 8000954:	2258      	movs	r2, #88	@ 0x58
 8000956:	4618      	mov	r0, r3
 8000958:	f016 fe61 	bl	801761e <memcpy>
	data.willFlag = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
	data.MQTTVersion = 3;
 8000960:	2303      	movs	r3, #3
 8000962:	733b      	strb	r3, [r7, #12]
	data.clientID.cstring = "STM32F4";
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MqttConnectBroker+0xdc>)
 8000966:	613b      	str	r3, [r7, #16]
	data.username.cstring = "STM32F4";
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MqttConnectBroker+0xdc>)
 800096a:	647b      	str	r3, [r7, #68]	@ 0x44
	data.password.cstring = "";
 800096c:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <MqttConnectBroker+0xe0>)
 800096e:	653b      	str	r3, [r7, #80]	@ 0x50
	data.keepAliveInterval = 60;
 8000970:	233c      	movs	r3, #60	@ 0x3c
 8000972:	83bb      	strh	r3, [r7, #28]
	data.cleansession = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	77bb      	strb	r3, [r7, #30]

	ret = MQTTConnect(&mqttClient, &data);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <MqttConnectBroker+0xd4>)
 800097e:	f015 f8b5 	bl	8015aec <MQTTConnect>
 8000982:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if(ret != MQTT_SUCCESS)
 8000984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <MqttConnectBroker+0x90>
	{
		printf("MQTTConnect failed.\n");
 800098a:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <MqttConnectBroker+0xe4>)
 800098c:	f016 fc6a 	bl	8017264 <puts>
		return ret;
 8000990:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000992:	e012      	b.n	80009ba <MqttConnectBroker+0xb6>
	}

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MqttMessageArrived);
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MqttConnectBroker+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	4915      	ldr	r1, [pc, #84]	@ (80009f0 <MqttConnectBroker+0xec>)
 800099a:	480f      	ldr	r0, [pc, #60]	@ (80009d8 <MqttConnectBroker+0xd4>)
 800099c:	f015 f9af 	bl	8015cfe <MQTTSubscribe>
 80009a0:	65f8      	str	r0, [r7, #92]	@ 0x5c
	if(ret != MQTT_SUCCESS)
 80009a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d004      	beq.n	80009b2 <MqttConnectBroker+0xae>
	{
		printf("MQTTSubscribe failed.\n");
 80009a8:	4812      	ldr	r0, [pc, #72]	@ (80009f4 <MqttConnectBroker+0xf0>)
 80009aa:	f016 fc5b 	bl	8017264 <puts>
		return ret;
 80009ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009b0:	e003      	b.n	80009ba <MqttConnectBroker+0xb6>
	}

	printf("MQTT_ConnectBroker O.K.\n");
 80009b2:	4811      	ldr	r0, [pc, #68]	@ (80009f8 <MqttConnectBroker+0xf4>)
 80009b4:	f016 fc56 	bl	8017264 <puts>
	return MQTT_SUCCESS;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3760      	adds	r7, #96	@ 0x60
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000093c 	.word	0x2000093c
 80009c8:	08017f58 	.word	0x08017f58
 80009cc:	08017f68 	.word	0x08017f68
 80009d0:	20000db4 	.word	0x20000db4
 80009d4:	200009b4 	.word	0x200009b4
 80009d8:	2000094c 	.word	0x2000094c
 80009dc:	08017fd0 	.word	0x08017fd0
 80009e0:	08017f80 	.word	0x08017f80
 80009e4:	08017f88 	.word	0x08017f88
 80009e8:	08017f8c 	.word	0x08017f8c
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08017f50 	.word	0x08017f50
 80009f4:	08017fa0 	.word	0x08017fa0
 80009f8:	08017fb8 	.word	0x08017fb8

080009fc <MqttMessageArrived>:

void MqttMessageArrived(MessageData* msg)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); //toggle pin when new message arrived
 8000a04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a08:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MqttMessageArrived+0x4c>)
 8000a0a:	f001 ffe1 	bl	80029d0 <HAL_GPIO_TogglePin>

	MQTTMessage* message = msg->message;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]
	memset(msgBuffer, 0, sizeof(msgBuffer));
 8000a14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a18:	2100      	movs	r1, #0
 8000a1a:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <MqttMessageArrived+0x50>)
 8000a1c:	f016 fd12 	bl	8017444 <memset>
	memcpy(msgBuffer, message->payload,message->payloadlen);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	6899      	ldr	r1, [r3, #8]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <MqttMessageArrived+0x50>)
 8000a2c:	f016 fdf7 	bl	801761e <memcpy>

	printf("MQTT MSG[%d]:%s\n", (int)message->payloadlen, msgBuffer);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <MqttMessageArrived+0x50>)
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MqttMessageArrived+0x54>)
 8000a3a:	f016 fbab 	bl	8017194 <iprintf>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	200011b4 	.word	0x200011b4
 8000a50:	08018028 	.word	0x08018028

08000a54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b090      	sub	sp, #64	@ 0x40
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a5c:	f003 fcd4 	bl	8004408 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
	osThreadDef(mqttClientSubTask, MqttClientSubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //subscribe task
 8000a60:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <StartDefaultTask+0x70>)
 8000a62:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadDef(mqttClientPubTask, MqttClientPubTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE); //publish task
 8000a74:	4b14      	ldr	r3, [pc, #80]	@ (8000ac8 <StartDefaultTask+0x74>)
 8000a76:	f107 0408 	add.w	r4, r7, #8
 8000a7a:	461d      	mov	r5, r3
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mqttClientSubTaskHandle = osThreadCreate(osThread(mqttClientSubTask), NULL);
 8000a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fa7e 	bl	8004f90 <osThreadCreate>
 8000a94:	4603      	mov	r3, r0
 8000a96:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <StartDefaultTask+0x78>)
 8000a98:	6013      	str	r3, [r2, #0]
	mqttClientPubTaskHandle = osThreadCreate(osThread(mqttClientPubTask), NULL);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fa75 	bl	8004f90 <osThreadCreate>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4a09      	ldr	r2, [pc, #36]	@ (8000ad0 <StartDefaultTask+0x7c>)
 8000aaa:	6013      	str	r3, [r2, #0]

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); //toggle running led
 8000aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab0:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <StartDefaultTask+0x80>)
 8000ab2:	f001 ff8d 	bl	80029d0 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000ab6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000aba:	f004 fab5 	bl	8005028 <osDelay>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin); //toggle running led
 8000abe:	bf00      	nop
 8000ac0:	e7f4      	b.n	8000aac <StartDefaultTask+0x58>
 8000ac2:	bf00      	nop
 8000ac4:	08018050 	.word	0x08018050
 8000ac8:	08018080 	.word	0x08018080
 8000acc:	20000934 	.word	0x20000934
 8000ad0:	20000938 	.word	0x20000938
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fa25 	bl	8000f38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40000400 	.word	0x40000400

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 faec 	bl	8001122 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_MspInit+0x6c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_MspInit+0x6c>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000

08000b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <HAL_UART_MspInit+0xb4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d145      	bne.n	8000c24 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a24      	ldr	r2, [pc, #144]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bb6:	f043 0308 	orr.w	r3, r3, #8
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_UART_MspInit+0xb8>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bc8:	2340      	movs	r3, #64	@ 0x40
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4816      	ldr	r0, [pc, #88]	@ (8000c34 <HAL_UART_MspInit+0xbc>)
 8000bdc:	f001 fd5c 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000be0:	2380      	movs	r3, #128	@ 0x80
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4810      	ldr	r0, [pc, #64]	@ (8000c34 <HAL_UART_MspInit+0xbc>)
 8000bf4:	f001 fd50 	bl	8002698 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_UART_MspInit+0xc0>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_UART_MspInit+0xc0>)
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	2025      	movs	r0, #37	@ 0x25
 8000c1a:	f000 fa82 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c1e:	2025      	movs	r0, #37	@ 0x25
 8000c20:	f000 fa9b 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	@ 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010c00 	.word	0x40010c00
 8000c38:	40010000 	.word	0x40010000

08000c3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000c52:	4b34      	ldr	r3, [pc, #208]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a33      	ldr	r2, [pc, #204]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c58:	f043 0302 	orr.w	r3, r3, #2
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <HAL_InitTick+0xe8>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6a:	f107 0210 	add.w	r2, r7, #16
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 fbeb 	bl	8003450 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c7a:	6a3b      	ldr	r3, [r7, #32]
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d103      	bne.n	8000c8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c84:	f002 fbbc 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8000c88:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c8a:	e004      	b.n	8000c96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8c:	f002 fbb8 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8000c90:	4603      	mov	r3, r0
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c98:	4a23      	ldr	r2, [pc, #140]	@ (8000d28 <HAL_InitTick+0xec>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ca6:	4a22      	ldr	r2, [pc, #136]	@ (8000d30 <HAL_InitTick+0xf4>)
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000cca:	4818      	ldr	r0, [pc, #96]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ccc:	f002 fc0e 	bl	80034ec <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11b      	bne.n	8000d16 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000cde:	4813      	ldr	r0, [pc, #76]	@ (8000d2c <HAL_InitTick+0xf0>)
 8000ce0:	f002 fc5c 	bl	800359c <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000cea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf2:	201d      	movs	r0, #29
 8000cf4:	f000 fa31 	bl	800115a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d808      	bhi.n	8000d10 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	201d      	movs	r0, #29
 8000d04:	f000 fa0d 	bl	8001122 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_InitTick+0xf8>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e002      	b.n	8000d16 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3738      	adds	r7, #56	@ 0x38
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	20001600 	.word	0x20001600
 8000d30:	40000400 	.word	0x40000400
 8000d34:	20000004 	.word	0x20000004

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d70:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <TIM3_IRQHandler+0x10>)
 8000d72:	f002 fc6d 	bl	8003650 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20001600 	.word	0x20001600

08000d80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <USART1_IRQHandler+0x10>)
 8000d86:	f002 fe5d 	bl	8003a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200015b4 	.word	0x200015b4

08000d94 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <ETH_IRQHandler+0x10>)
 8000d9a:	f000 fedc 	bl	8001b56 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20005edc 	.word	0x20005edc

08000da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
 8000db8:	e00a      	b.n	8000dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dba:	f3af 8000 	nop.w
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	b2ca      	uxtb	r2, r1
 8000dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dbf0      	blt.n	8000dba <_read+0x12>
  }

  return len;
 8000dd8:	687b      	ldr	r3, [r7, #4]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e08:	605a      	str	r2, [r3, #4]
  return 0;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr

08000e16 <_isatty>:

int _isatty(int file)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr

08000e2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
	...

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	@ (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	@ (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d205      	bcs.n	8000e80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e74:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb0 <_sbrk+0x6c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	371c      	adds	r7, #28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20010000 	.word	0x20010000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20001648 	.word	0x20001648
 8000eac:	20009b28 	.word	0x20009b28
 8000eb0:	20009b20 	.word	0x20009b20

08000eb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff fff8 	bl	8000eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480b      	ldr	r0, [pc, #44]	@ (8000ef4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ec6:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ec8:	4a0c      	ldr	r2, [pc, #48]	@ (8000efc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a09      	ldr	r2, [pc, #36]	@ (8000f00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000edc:	4c09      	ldr	r4, [pc, #36]	@ (8000f04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000eea:	f016 fb71 	bl	80175d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eee:	f7ff fb8d 	bl	800060c <main>
  bx lr
 8000ef2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000efc:	0801ad18 	.word	0x0801ad18
  ldr r2, =_sbss
 8000f00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f04:	20009b28 	.word	0x20009b28

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <HAL_Init+0x28>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	@ (8000f34 <HAL_Init+0x28>)
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f8f5 	bl	800110c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f7ff fe8a 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fdee 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40022000 	.word	0x40022000

08000f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_IncTick+0x1c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a03      	ldr	r2, [pc, #12]	@ (8000f58 <HAL_IncTick+0x20>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	20000008 	.word	0x20000008
 8000f58:	2000164c 	.word	0x2000164c

08000f5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b02      	ldr	r3, [pc, #8]	@ (8000f6c <HAL_GetTick+0x10>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	2000164c 	.word	0x2000164c

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff fff0 	bl	8000f5c <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d005      	beq.n	8000f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_Delay+0x44>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4413      	add	r3, r2
 8000f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f96:	bf00      	nop
 8000f98:	f7ff ffe0 	bl	8000f5c <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d8f7      	bhi.n	8000f98 <HAL_Delay+0x28>
  {
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	@ (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	@ (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4906      	ldr	r1, [pc, #24]	@ (8001050 <__NVIC_EnableIRQ+0x34>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff4f 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001134:	f7ff ff64 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ffb2 	bl	80010a8 <NVIC_EncodePriority>
 8001144:	4602      	mov	r2, r0
 8001146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff81 	bl	8001054 <__NVIC_SetPriority>
}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff57 	bl	800101c <__NVIC_EnableIRQ>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d008      	beq.n	80011a0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2204      	movs	r2, #4
 8001192:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e020      	b.n	80011e2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 020e 	bic.w	r2, r2, #14
 80011ae:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0201 	bic.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f202 	lsl.w	r2, r1, r2
 80011ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d005      	beq.n	8001210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2204      	movs	r2, #4
 8001208:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e0d6      	b.n	80013be <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 020e 	bic.w	r2, r2, #14
 800121e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b64      	ldr	r3, [pc, #400]	@ (80013c8 <HAL_DMA_Abort_IT+0x1dc>)
 8001238:	429a      	cmp	r2, r3
 800123a:	d958      	bls.n	80012ee <HAL_DMA_Abort_IT+0x102>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a62      	ldr	r2, [pc, #392]	@ (80013cc <HAL_DMA_Abort_IT+0x1e0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d04f      	beq.n	80012e6 <HAL_DMA_Abort_IT+0xfa>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a61      	ldr	r2, [pc, #388]	@ (80013d0 <HAL_DMA_Abort_IT+0x1e4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d048      	beq.n	80012e2 <HAL_DMA_Abort_IT+0xf6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a5f      	ldr	r2, [pc, #380]	@ (80013d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d040      	beq.n	80012dc <HAL_DMA_Abort_IT+0xf0>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a5e      	ldr	r2, [pc, #376]	@ (80013d8 <HAL_DMA_Abort_IT+0x1ec>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d038      	beq.n	80012d6 <HAL_DMA_Abort_IT+0xea>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a5c      	ldr	r2, [pc, #368]	@ (80013dc <HAL_DMA_Abort_IT+0x1f0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d030      	beq.n	80012d0 <HAL_DMA_Abort_IT+0xe4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a5b      	ldr	r2, [pc, #364]	@ (80013e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d028      	beq.n	80012ca <HAL_DMA_Abort_IT+0xde>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a52      	ldr	r2, [pc, #328]	@ (80013c8 <HAL_DMA_Abort_IT+0x1dc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d020      	beq.n	80012c4 <HAL_DMA_Abort_IT+0xd8>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a57      	ldr	r2, [pc, #348]	@ (80013e4 <HAL_DMA_Abort_IT+0x1f8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d019      	beq.n	80012c0 <HAL_DMA_Abort_IT+0xd4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a55      	ldr	r2, [pc, #340]	@ (80013e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d012      	beq.n	80012bc <HAL_DMA_Abort_IT+0xd0>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a54      	ldr	r2, [pc, #336]	@ (80013ec <HAL_DMA_Abort_IT+0x200>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d00a      	beq.n	80012b6 <HAL_DMA_Abort_IT+0xca>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <HAL_DMA_Abort_IT+0x204>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d102      	bne.n	80012b0 <HAL_DMA_Abort_IT+0xc4>
 80012aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ae:	e01b      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012b4:	e018      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012ba:	e015      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012bc:	2310      	movs	r3, #16
 80012be:	e013      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e011      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012ca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012ce:	e00b      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012d4:	e008      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012da:	e005      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012e0:	e002      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012e2:	2310      	movs	r3, #16
 80012e4:	e000      	b.n	80012e8 <HAL_DMA_Abort_IT+0xfc>
 80012e6:	2301      	movs	r3, #1
 80012e8:	4a42      	ldr	r2, [pc, #264]	@ (80013f4 <HAL_DMA_Abort_IT+0x208>)
 80012ea:	6053      	str	r3, [r2, #4]
 80012ec:	e057      	b.n	800139e <HAL_DMA_Abort_IT+0x1b2>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a36      	ldr	r2, [pc, #216]	@ (80013cc <HAL_DMA_Abort_IT+0x1e0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d04f      	beq.n	8001398 <HAL_DMA_Abort_IT+0x1ac>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a34      	ldr	r2, [pc, #208]	@ (80013d0 <HAL_DMA_Abort_IT+0x1e4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d048      	beq.n	8001394 <HAL_DMA_Abort_IT+0x1a8>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a33      	ldr	r2, [pc, #204]	@ (80013d4 <HAL_DMA_Abort_IT+0x1e8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d040      	beq.n	800138e <HAL_DMA_Abort_IT+0x1a2>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a31      	ldr	r2, [pc, #196]	@ (80013d8 <HAL_DMA_Abort_IT+0x1ec>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d038      	beq.n	8001388 <HAL_DMA_Abort_IT+0x19c>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a30      	ldr	r2, [pc, #192]	@ (80013dc <HAL_DMA_Abort_IT+0x1f0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d030      	beq.n	8001382 <HAL_DMA_Abort_IT+0x196>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2e      	ldr	r2, [pc, #184]	@ (80013e0 <HAL_DMA_Abort_IT+0x1f4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d028      	beq.n	800137c <HAL_DMA_Abort_IT+0x190>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a26      	ldr	r2, [pc, #152]	@ (80013c8 <HAL_DMA_Abort_IT+0x1dc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d020      	beq.n	8001376 <HAL_DMA_Abort_IT+0x18a>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2a      	ldr	r2, [pc, #168]	@ (80013e4 <HAL_DMA_Abort_IT+0x1f8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_DMA_Abort_IT+0x186>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <HAL_DMA_Abort_IT+0x1fc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d012      	beq.n	800136e <HAL_DMA_Abort_IT+0x182>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a27      	ldr	r2, [pc, #156]	@ (80013ec <HAL_DMA_Abort_IT+0x200>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00a      	beq.n	8001368 <HAL_DMA_Abort_IT+0x17c>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a26      	ldr	r2, [pc, #152]	@ (80013f0 <HAL_DMA_Abort_IT+0x204>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d102      	bne.n	8001362 <HAL_DMA_Abort_IT+0x176>
 800135c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001360:	e01b      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001362:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001366:	e018      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136c:	e015      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 800136e:	2310      	movs	r3, #16
 8001370:	e013      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001372:	2301      	movs	r3, #1
 8001374:	e011      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001376:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800137a:	e00e      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 800137c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001380:	e00b      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001382:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001386:	e008      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	e005      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 800138e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001392:	e002      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001394:	2310      	movs	r3, #16
 8001396:	e000      	b.n	800139a <HAL_DMA_Abort_IT+0x1ae>
 8001398:	2301      	movs	r3, #1
 800139a:	4a17      	ldr	r2, [pc, #92]	@ (80013f8 <HAL_DMA_Abort_IT+0x20c>)
 800139c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	4798      	blx	r3
    } 
  }
  return status;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40020080 	.word	0x40020080
 80013cc:	40020008 	.word	0x40020008
 80013d0:	4002001c 	.word	0x4002001c
 80013d4:	40020030 	.word	0x40020030
 80013d8:	40020044 	.word	0x40020044
 80013dc:	40020058 	.word	0x40020058
 80013e0:	4002006c 	.word	0x4002006c
 80013e4:	40020408 	.word	0x40020408
 80013e8:	4002041c 	.word	0x4002041c
 80013ec:	40020430 	.word	0x40020430
 80013f0:	40020444 	.word	0x40020444
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800140c:	4ba4      	ldr	r3, [pc, #656]	@ (80016a0 <HAL_ETH_Init+0x2a4>)
 800140e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001414:	2300      	movs	r3, #0
 8001416:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e153      	b.n	80016ca <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f003 f936 	bl	80046a8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 800143c:	4b99      	ldr	r3, [pc, #612]	@ (80016a4 <HAL_ETH_Init+0x2a8>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	4a98      	ldr	r2, [pc, #608]	@ (80016a4 <HAL_ETH_Init+0x2a8>)
 8001442:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001446:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8001448:	4b96      	ldr	r3, [pc, #600]	@ (80016a4 <HAL_ETH_Init+0x2a8>)
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4994      	ldr	r1, [pc, #592]	@ (80016a4 <HAL_ETH_Init+0x2a8>)
 8001452:	4313      	orrs	r3, r2
 8001454:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800146c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146e:	f7ff fd75 	bl	8000f5c <HAL_GetTick>
 8001472:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001474:	e011      	b.n	800149a <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001476:	f7ff fd71 	bl	8000f5c <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001484:	d909      	bls.n	800149a <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e117      	b.n	80016ca <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e4      	bne.n	8001476 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f023 031c 	bic.w	r3, r3, #28
 80014ba:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014bc:	f001 ff96 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 80014c0:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4a78      	ldr	r2, [pc, #480]	@ (80016a8 <HAL_ETH_Init+0x2ac>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d908      	bls.n	80014dc <HAL_ETH_Init+0xe0>
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4a77      	ldr	r2, [pc, #476]	@ (80016ac <HAL_ETH_Init+0x2b0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d804      	bhi.n	80014dc <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e00b      	b.n	80014f4 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	4a73      	ldr	r2, [pc, #460]	@ (80016ac <HAL_ETH_Init+0x2b0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d907      	bls.n	80014f4 <HAL_ETH_Init+0xf8>
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4a6e      	ldr	r2, [pc, #440]	@ (80016a0 <HAL_ETH_Init+0x2a4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d203      	bcs.n	80014f4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f043 030c 	orr.w	r3, r3, #12
 80014f2:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001500:	2100      	movs	r1, #0
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fc05 	bl	8001d12 <HAL_ETH_WritePHYRegister>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fdbb 	bl	8002090 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2201      	movs	r2, #1
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0d1      	b.n	80016ca <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001526:	20ff      	movs	r0, #255	@ 0xff
 8001528:	f7ff fd22 	bl	8000f70 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8096 	beq.w	8001662 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001536:	f7ff fd11 	bl	8000f5c <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800153c:	f107 030c 	add.w	r3, r7, #12
 8001540:	461a      	mov	r2, r3
 8001542:	2101      	movs	r1, #1
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb7c 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 800154a:	f7ff fd07 	bl	8000f5c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d90f      	bls.n	800157c <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 fd94 	bl	8002090 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0a6      	b.n	80016ca <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0da      	beq.n	800153c <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001586:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800158a:	2100      	movs	r1, #0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 fbc0 	bl	8001d12 <HAL_ETH_WritePHYRegister>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fd76 	bl	8002090 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e08c      	b.n	80016ca <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80015b0:	f7ff fcd4 	bl	8000f5c <HAL_GetTick>
 80015b4:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015b6:	f107 030c 	add.w	r3, r7, #12
 80015ba:	461a      	mov	r2, r3
 80015bc:	2101      	movs	r1, #1
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fb3f 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015c4:	f7ff fcca 	bl	8000f5c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d90f      	bls.n	80015f6 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80015da:	6939      	ldr	r1, [r7, #16]
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fd57 	bl	8002090 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e069      	b.n	80016ca <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0da      	beq.n	80015b6 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	461a      	mov	r2, r3
 8001606:	2110      	movs	r1, #16
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fb1a 	bl	8001c42 <HAL_ETH_ReadPHYRegister>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00b      	beq.n	800162c <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fd38 	bl	8002090 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e04e      	b.n	80016ca <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	2b00      	cmp	r3, #0
 8001634:	d004      	beq.n	8001640 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	e002      	b.n	8001646 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	e02f      	b.n	80016b8 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	e02a      	b.n	80016b8 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	085b      	lsrs	r3, r3, #1
 8001670:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001672:	4313      	orrs	r3, r2
 8001674:	b29b      	uxth	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	2100      	movs	r1, #0
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fb49 	bl	8001d12 <HAL_ETH_WritePHYRegister>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d014      	beq.n	80016b0 <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800168a:	6939      	ldr	r1, [r7, #16]
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fcff 	bl	8002090 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e015      	b.n	80016ca <HAL_ETH_Init+0x2ce>
 800169e:	bf00      	nop
 80016a0:	03938700 	.word	0x03938700
 80016a4:	40010000 	.word	0x40010000
 80016a8:	01312cff 	.word	0x01312cff
 80016ac:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016b0:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80016b4:	f7ff fc5c 	bl	8000f70 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fce8 	bl	8002090 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b087      	sub	sp, #28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_ETH_DMATxDescListInit+0x20>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e051      	b.n	8001798 <HAL_ETH_DMATxDescListInit+0xc4>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2202      	movs	r2, #2
 8001700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e030      	b.n	8001772 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001720:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d208      	bcs.n	8001766 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	4413      	add	r3, r2
 800175e:	461a      	mov	r2, r3
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	e002      	b.n	800176c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d3ca      	bcc.n	8001710 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001784:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	371c      	adds	r7, #28
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b087      	sub	sp, #28
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ETH_DMARxDescListInit+0x20>
 80017be:	2302      	movs	r3, #2
 80017c0:	e055      	b.n	800186e <HAL_ETH_DMARxDescListInit+0xcc>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2202      	movs	r2, #2
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	e034      	b.n	8001848 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017ee:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80017f6:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	461a      	mov	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d105      	bne.n	8001820 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	429a      	cmp	r2, r3
 8001828:	d208      	bcs.n	800183c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	4413      	add	r3, r2
 8001834:	461a      	mov	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	e002      	b.n	8001842 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3c6      	bcc.n	80017de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800185a:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ETH_TransmitFrame+0x24>
 8001898:	2302      	movs	r3, #2
 800189a:	e0cc      	b.n	8001a36 <HAL_ETH_TransmitFrame+0x1be>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d109      	bne.n	80018c6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e0b7      	b.n	8001a36 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	da09      	bge.n	80018e4 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2212      	movs	r2, #18
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0a8      	b.n	8001a36 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d915      	bls.n	800191a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	4a53      	ldr	r2, [pc, #332]	@ (8001a40 <HAL_ETH_TransmitFrame+0x1c8>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0a9b      	lsrs	r3, r3, #10
 80018f8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	4b50      	ldr	r3, [pc, #320]	@ (8001a40 <HAL_ETH_TransmitFrame+0x1c8>)
 80018fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001902:	0a9b      	lsrs	r3, r3, #10
 8001904:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e001      	b.n	800191e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800191a:	2301      	movs	r3, #1
 800191c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d11c      	bne.n	800195e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8001932:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800193e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800194e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	461a      	mov	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800195c:	e04b      	b.n	80019f6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e044      	b.n	80019ee <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001972:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d107      	bne.n	800198a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001984:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001988:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001992:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3b01      	subs	r3, #1
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	429a      	cmp	r2, r3
 800199c:	d116      	bne.n	80019cc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a8:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80019ac:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <HAL_ETH_TransmitFrame+0x1cc>)
 80019b2:	fb03 f202 	mul.w	r2, r3, r2
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80019be:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019ca:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80019da:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	461a      	mov	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	3301      	adds	r3, #1
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3b6      	bcc.n	8001964 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a10:	461a      	mov	r2, r3
 8001a12:	2304      	movs	r3, #4
 8001a14:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2300      	movs	r3, #0
 8001a22:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	ac02b00b 	.word	0xac02b00b
 8001a44:	fffffa0c 	.word	0xfffffa0c

08001a48 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e074      	b.n	8001b4c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a72:	e05a      	b.n	8001b2a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a88:	d10d      	bne.n	8001aa6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	631a      	str	r2, [r3, #48]	@ 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aa4:	e041      	b.n	8001b2a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d10b      	bne.n	8001acc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001aca:	e02e      	b.n	8001b2a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d103      	bne.n	8001aee <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001afa:	1f1a      	subs	r2, r3, #4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	e010      	b.n	8001b4c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db02      	blt.n	8001b3a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b07      	cmp	r3, #7
 8001b38:	d99c      	bls.n	8001a74 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr

08001b56 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b6c:	2b40      	cmp	r3, #64	@ 0x40
 8001b6e:	d112      	bne.n	8001b96 <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f002 fe65 	bl	8004840 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2340      	movs	r3, #64	@ 0x40
 8001b82:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001b94:	e01a      	b.n	8001bcc <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d111      	bne.n	8001bcc <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f838 	bl	8001c1e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2301      	movs	r3, #1
 8001bba:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bda:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bee:	d112      	bne.n	8001c16 <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f81d 	bl	8001c30 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c04:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b82      	cmp	r3, #130	@ 0x82
 8001c62:	d101      	bne.n	8001c68 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c64:	2302      	movs	r3, #2
 8001c66:	e050      	b.n	8001d0a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2282      	movs	r2, #130	@ 0x82
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 031c 	and.w	r3, r3, #28
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8a1b      	ldrh	r3, [r3, #16]
 8001c84:	02db      	lsls	r3, r3, #11
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cb4:	f7ff f952 	bl	8000f5c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cba:	e015      	b.n	8001ce8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cbc:	f7ff f94e 	bl	8000f5c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cca:	d309      	bcc.n	8001ce0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e014      	b.n	8001d0a <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1e4      	bne.n	8001cbc <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b42      	cmp	r3, #66	@ 0x42
 8001d32:	d101      	bne.n	8001d38 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d34:	2302      	movs	r3, #2
 8001d36:	e04e      	b.n	8001dd6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2242      	movs	r2, #66	@ 0x42
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 031c 	and.w	r3, r3, #28
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8a1b      	ldrh	r3, [r3, #16]
 8001d54:	02db      	lsls	r3, r3, #11
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d5e:	897b      	ldrh	r3, [r7, #10]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8e:	f7ff f8e5 	bl	8000f5c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d94:	e015      	b.n	8001dc2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d96:	f7ff f8e1 	bl	8000f5c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001da4:	d309      	bcc.n	8001dba <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e00d      	b.n	8001dd6 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e4      	bne.n	8001d96 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_ETH_Start+0x16>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e01f      	b.n	8001e34 <HAL_ETH_Start+0x56>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fb3b 	bl	8002480 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fb72 	bl	80024f4 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fbfd 	bl	8002610 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 fba6 	bl	8002568 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 fbcd 	bl	80025bc <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ETH_Stop+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e01f      	b.n	8001e92 <HAL_ETH_Stop+0x56>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fb95 	bl	8002592 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fbbc 	bl	80025e6 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb5d 	bl	800252e <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fbcb 	bl	8002610 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 fb1d 	bl	80024ba <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ETH_ConfigMAC+0x1c>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e0e4      	b.n	8002082 <HAL_ETH_ConfigMAC+0x1e6>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 80b1 	beq.w	8002032 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4b6c      	ldr	r3, [pc, #432]	@ (800208c <HAL_ETH_ConfigMAC+0x1f0>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001ee8:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001eee:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001ef4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001efa:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001f00:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001f06:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001f0c:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001f12:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001f18:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001f1e:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8001f24:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8001f2a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff f814 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f58:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001f5e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001f64:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8001f6a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001f70:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001f76:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f82:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001f84:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7fe ffee 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001fa4:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fae:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fcc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001fd2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001fd8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8001fde:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001fe4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe ffb7 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002022:	2001      	movs	r0, #1
 8002024:	f7fe ffa4 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	61da      	str	r2, [r3, #28]
 8002030:	e01e      	b.n	8002070 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002040:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002062:	2001      	movs	r0, #1
 8002064:	f7fe ff84 	bl	8000f70 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	ff20810f 	.word	0xff20810f

08002090 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0b0      	sub	sp, #192	@ 0xc0
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ac:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020b4:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80020be:	2300      	movs	r3, #0
 80020c0:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d103      	bne.n	80020de <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020da:	663b      	str	r3, [r7, #96]	@ 0x60
 80020dc:	e001      	b.n	80020e2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e6:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020ec:	2300      	movs	r3, #0
 80020ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020fc:	2340      	movs	r3, #64	@ 0x40
 80020fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002164:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002168:	4ba8      	ldr	r3, [pc, #672]	@ (800240c <ETH_MACDMAConfig+0x37c>)
 800216a:	4013      	ands	r3, r2
 800216c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8002172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002174:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8002178:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 800217c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002182:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8002186:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 800218a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002190:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8002194:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8002198:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 800219a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 800219c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 800219e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 80021a0:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80021a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 80021a4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80021a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80021b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7fe fed3 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80021d2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80021d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 80021d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80021d8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 80021dc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 80021de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 80021e2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 80021e8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 80021ee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 80021f4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002200:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002202:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800220e:	2001      	movs	r0, #1
 8002210:	f7fe feae 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800221c:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002226:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002230:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800223c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002240:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002244:	4013      	ands	r3, r2
 8002246:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800224a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800224e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002254:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 800225a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 800225c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002260:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8002266:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 800226c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 800226e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002280:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800228c:	2001      	movs	r0, #1
 800228e:	f7fe fe6f 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800229a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 800229c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 80022a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7fe fe5a 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80022c4:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022ce:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 80022d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80022d8:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022ea:	2304      	movs	r3, #4
 80022ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80022f8:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002304:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002306:	2300      	movs	r3, #0
 8002308:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800230a:	2300      	movs	r3, #0
 800230c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800231c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002320:	4b3b      	ldr	r3, [pc, #236]	@ (8002410 <ETH_MACDMAConfig+0x380>)
 8002322:	4013      	ands	r3, r2
 8002324:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002328:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 800232a:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800232c:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 800232e:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002330:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002332:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002334:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002336:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8002338:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800233a:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 800233c:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 800233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardErrorFrames |
 8002340:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002344:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        dmainit.ReceiveThresholdControl |
 8002348:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800234a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800235c:	461a      	mov	r2, r3
 800235e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002362:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002372:	2001      	movs	r0, #1
 8002374:	f7fe fdfc 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002380:	461a      	mov	r2, r3
 8002382:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002386:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
                                        dmainit.FixedBurst |
 800238a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 800238c:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.FixedBurst |
 8002390:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002394:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002398:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 800239a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800239c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800239e:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023ac:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe fdd7 	bl	8000f70 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ca:	461a      	mov	r2, r3
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d10d      	bne.n	80023f6 <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023f4:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	461a      	mov	r2, r3
 80023fc:	2100      	movs	r1, #0
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f808 	bl	8002414 <ETH_MACAddressConfig>
}
 8002404:	bf00      	nop
 8002406:	37c0      	adds	r7, #192	@ 0xc0
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ff20810f 	.word	0xff20810f
 8002410:	f8de3f23 	.word	0xf8de3f23

08002414 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3305      	adds	r3, #5
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	3204      	adds	r2, #4
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <ETH_MACAddressConfig+0x64>)
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3303      	adds	r3, #3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	061a      	lsls	r2, r3, #24
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3302      	adds	r3, #2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3301      	adds	r3, #1
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	021b      	lsls	r3, r3, #8
 8002458:	4313      	orrs	r3, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	4b05      	ldr	r3, [pc, #20]	@ (800247c <ETH_MACAddressConfig+0x68>)
 8002466:	4413      	add	r3, r2
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6013      	str	r3, [r2, #0]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40028040 	.word	0x40028040
 800247c:	40028044 	.word	0x40028044

08002480 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0208 	orr.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f000 f8d9 	bl	800265c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0208 	bic.w	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024de:	2001      	movs	r0, #1
 80024e0:	f000 f8bc 	bl	800265c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0204 	orr.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002518:	2001      	movs	r0, #1
 800251a:	f000 f89f 	bl	800265c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0204 	bic.w	r2, r2, #4
 8002548:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 f882 	bl	800265c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	601a      	str	r2, [r3, #0]
}
 8002560:	bf00      	nop
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002586:	6193      	str	r3, [r2, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025b0:	6193      	str	r3, [r2, #24]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025da:	6193      	str	r3, [r2, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	f023 0302 	bic.w	r3, r3, #2
 8002600:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002604:	6193      	str	r3, [r2, #24]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800262e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002632:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002640:	2001      	movs	r0, #1
 8002642:	f000 f80b 	bl	800265c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002650:	6193      	str	r3, [r2, #24]
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <ETH_Delay+0x34>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <ETH_Delay+0x38>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0a5b      	lsrs	r3, r3, #9
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002678:	bf00      	nop
  }
  while (Delay --);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1e5a      	subs	r2, r3, #1
 800267e:	60fa      	str	r2, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f9      	bne.n	8002678 <ETH_Delay+0x1c>
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	bc80      	pop	{r7}
 800268e:	4770      	bx	lr
 8002690:	20000000 	.word	0x20000000
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b08b      	sub	sp, #44	@ 0x2c
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026aa:	e169      	b.n	8002980 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026ac:	2201      	movs	r2, #1
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f040 8158 	bne.w	800297a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002938 <HAL_GPIO_Init+0x2a0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026d4:	4a98      	ldr	r2, [pc, #608]	@ (8002938 <HAL_GPIO_Init+0x2a0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d875      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026da:	4a98      	ldr	r2, [pc, #608]	@ (800293c <HAL_GPIO_Init+0x2a4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d058      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026e0:	4a96      	ldr	r2, [pc, #600]	@ (800293c <HAL_GPIO_Init+0x2a4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d86f      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026e6:	4a96      	ldr	r2, [pc, #600]	@ (8002940 <HAL_GPIO_Init+0x2a8>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d052      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026ec:	4a94      	ldr	r2, [pc, #592]	@ (8002940 <HAL_GPIO_Init+0x2a8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d869      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026f2:	4a94      	ldr	r2, [pc, #592]	@ (8002944 <HAL_GPIO_Init+0x2ac>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04c      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 80026f8:	4a92      	ldr	r2, [pc, #584]	@ (8002944 <HAL_GPIO_Init+0x2ac>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d863      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 80026fe:	4a92      	ldr	r2, [pc, #584]	@ (8002948 <HAL_GPIO_Init+0x2b0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d046      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
 8002704:	4a90      	ldr	r2, [pc, #576]	@ (8002948 <HAL_GPIO_Init+0x2b0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d85d      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 800270a:	2b12      	cmp	r3, #18
 800270c:	d82a      	bhi.n	8002764 <HAL_GPIO_Init+0xcc>
 800270e:	2b12      	cmp	r3, #18
 8002710:	d859      	bhi.n	80027c6 <HAL_GPIO_Init+0x12e>
 8002712:	a201      	add	r2, pc, #4	@ (adr r2, 8002718 <HAL_GPIO_Init+0x80>)
 8002714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002718:	08002793 	.word	0x08002793
 800271c:	0800276d 	.word	0x0800276d
 8002720:	0800277f 	.word	0x0800277f
 8002724:	080027c1 	.word	0x080027c1
 8002728:	080027c7 	.word	0x080027c7
 800272c:	080027c7 	.word	0x080027c7
 8002730:	080027c7 	.word	0x080027c7
 8002734:	080027c7 	.word	0x080027c7
 8002738:	080027c7 	.word	0x080027c7
 800273c:	080027c7 	.word	0x080027c7
 8002740:	080027c7 	.word	0x080027c7
 8002744:	080027c7 	.word	0x080027c7
 8002748:	080027c7 	.word	0x080027c7
 800274c:	080027c7 	.word	0x080027c7
 8002750:	080027c7 	.word	0x080027c7
 8002754:	080027c7 	.word	0x080027c7
 8002758:	080027c7 	.word	0x080027c7
 800275c:	08002775 	.word	0x08002775
 8002760:	08002789 	.word	0x08002789
 8002764:	4a79      	ldr	r2, [pc, #484]	@ (800294c <HAL_GPIO_Init+0x2b4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800276a:	e02c      	b.n	80027c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	623b      	str	r3, [r7, #32]
          break;
 8002772:	e029      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	3304      	adds	r3, #4
 800277a:	623b      	str	r3, [r7, #32]
          break;
 800277c:	e024      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	3308      	adds	r3, #8
 8002784:	623b      	str	r3, [r7, #32]
          break;
 8002786:	e01f      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	330c      	adds	r3, #12
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e01a      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800279a:	2304      	movs	r3, #4
 800279c:	623b      	str	r3, [r7, #32]
          break;
 800279e:	e013      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	611a      	str	r2, [r3, #16]
          break;
 80027b2:	e009      	b.n	80027c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027b4:	2308      	movs	r3, #8
 80027b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	615a      	str	r2, [r3, #20]
          break;
 80027be:	e003      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027c0:	2300      	movs	r3, #0
 80027c2:	623b      	str	r3, [r7, #32]
          break;
 80027c4:	e000      	b.n	80027c8 <HAL_GPIO_Init+0x130>
          break;
 80027c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2bff      	cmp	r3, #255	@ 0xff
 80027cc:	d801      	bhi.n	80027d2 <HAL_GPIO_Init+0x13a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_Init+0x13e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2bff      	cmp	r3, #255	@ 0xff
 80027dc:	d802      	bhi.n	80027e4 <HAL_GPIO_Init+0x14c>
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	e002      	b.n	80027ea <HAL_GPIO_Init+0x152>
 80027e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e6:	3b08      	subs	r3, #8
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	210f      	movs	r1, #15
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	401a      	ands	r2, r3
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	fa01 f303 	lsl.w	r3, r1, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80b1 	beq.w	800297a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002818:	4b4d      	ldr	r3, [pc, #308]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a4c      	ldr	r2, [pc, #304]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b4a      	ldr	r3, [pc, #296]	@ (8002950 <HAL_GPIO_Init+0x2b8>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002830:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <HAL_GPIO_Init+0x2bc>)
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a40      	ldr	r2, [pc, #256]	@ (8002958 <HAL_GPIO_Init+0x2c0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d013      	beq.n	8002884 <HAL_GPIO_Init+0x1ec>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3f      	ldr	r2, [pc, #252]	@ (800295c <HAL_GPIO_Init+0x2c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00d      	beq.n	8002880 <HAL_GPIO_Init+0x1e8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3e      	ldr	r2, [pc, #248]	@ (8002960 <HAL_GPIO_Init+0x2c8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d007      	beq.n	800287c <HAL_GPIO_Init+0x1e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3d      	ldr	r2, [pc, #244]	@ (8002964 <HAL_GPIO_Init+0x2cc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d101      	bne.n	8002878 <HAL_GPIO_Init+0x1e0>
 8002874:	2303      	movs	r3, #3
 8002876:	e006      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002878:	2304      	movs	r3, #4
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 800287c:	2302      	movs	r3, #2
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x1ee>
 8002884:	2300      	movs	r3, #0
 8002886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002896:	492f      	ldr	r1, [pc, #188]	@ (8002954 <HAL_GPIO_Init+0x2bc>)
 8002898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	492c      	ldr	r1, [pc, #176]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028be:	4b2a      	ldr	r3, [pc, #168]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	4928      	ldr	r1, [pc, #160]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d8:	4b23      	ldr	r3, [pc, #140]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	4922      	ldr	r1, [pc, #136]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60cb      	str	r3, [r1, #12]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e6:	4b20      	ldr	r3, [pc, #128]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	491e      	ldr	r1, [pc, #120]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4918      	ldr	r1, [pc, #96]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	4914      	ldr	r1, [pc, #80]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d021      	beq.n	800296c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002928:	4b0f      	ldr	r3, [pc, #60]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	490e      	ldr	r1, [pc, #56]	@ (8002968 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e021      	b.n	800297a <HAL_GPIO_Init+0x2e2>
 8002936:	bf00      	nop
 8002938:	10320000 	.word	0x10320000
 800293c:	10310000 	.word	0x10310000
 8002940:	10220000 	.word	0x10220000
 8002944:	10210000 	.word	0x10210000
 8002948:	10120000 	.word	0x10120000
 800294c:	10110000 	.word	0x10110000
 8002950:	40021000 	.word	0x40021000
 8002954:	40010000 	.word	0x40010000
 8002958:	40010800 	.word	0x40010800
 800295c:	40010c00 	.word	0x40010c00
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_GPIO_Init+0x304>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	43db      	mvns	r3, r3
 8002974:	4909      	ldr	r1, [pc, #36]	@ (800299c <HAL_GPIO_Init+0x304>)
 8002976:	4013      	ands	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	3301      	adds	r3, #1
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	fa22 f303 	lsr.w	r3, r2, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	f47f ae8e 	bne.w	80026ac <HAL_GPIO_Init+0x14>
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	372c      	adds	r7, #44	@ 0x2c
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	43d9      	mvns	r1, r3
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	400b      	ands	r3, r1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	611a      	str	r2, [r3, #16]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e304      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8087 	beq.w	8002b32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a24:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a30:	4b8f      	ldr	r3, [pc, #572]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d112      	bne.n	8002a62 <HAL_RCC_OscConfig+0x5e>
 8002a3c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a48:	d10b      	bne.n	8002a62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4a:	4b89      	ldr	r3, [pc, #548]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d06c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x12c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d168      	bne.n	8002b30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e2de      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6a:	d106      	bne.n	8002a7a <HAL_RCC_OscConfig+0x76>
 8002a6c:	4b80      	ldr	r3, [pc, #512]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a7f      	ldr	r2, [pc, #508]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e02e      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x98>
 8002a82:	4b7b      	ldr	r3, [pc, #492]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7a      	ldr	r2, [pc, #488]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b78      	ldr	r3, [pc, #480]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a77      	ldr	r2, [pc, #476]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0xbc>
 8002aa6:	4b72      	ldr	r3, [pc, #456]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a71      	ldr	r2, [pc, #452]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xd4>
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b68      	ldr	r3, [pc, #416]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a67      	ldr	r2, [pc, #412]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fa3c 	bl	8000f5c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fa38 	bl	8000f5c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e292      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xe4>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa28 	bl	8000f5c <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa24 	bl	8000f5c <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e27e      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x10c>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4a:	4b49      	ldr	r3, [pc, #292]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x18c>
 8002b56:	4b46      	ldr	r3, [pc, #280]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b43      	ldr	r3, [pc, #268]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x176>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e252      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4939      	ldr	r1, [pc, #228]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9e:	f7fe f9dd 	bl	8000f5c <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe f9d9 	bl	8000f5c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e233      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4927      	ldr	r1, [pc, #156]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b26      	ldr	r3, [pc, #152]	@ (8002c74 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe f9bc 	bl	8000f5c <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe f9b8 	bl	8000f5c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e212      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03a      	beq.n	8002c88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d019      	beq.n	8002c4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b17      	ldr	r3, [pc, #92]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7fe f99c 	bl	8000f5c <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe f998 	bl	8000f5c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1f2      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f000 fc32 	bl	80034b0 <RCC_Delay>
 8002c4c:	e01c      	b.n	8002c88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_RCC_OscConfig+0x274>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fe f982 	bl	8000f5c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5a:	e00f      	b.n	8002c7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5c:	f7fe f97e 	bl	8000f5c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d908      	bls.n	8002c7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e1d8      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	42420000 	.word	0x42420000
 8002c78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	4b9b      	ldr	r3, [pc, #620]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e9      	bne.n	8002c5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 80a6 	beq.w	8002de2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9a:	4b94      	ldr	r3, [pc, #592]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca6:	4b91      	ldr	r3, [pc, #580]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4a90      	ldr	r2, [pc, #576]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb0:	61d3      	str	r3, [r2, #28]
 8002cb2:	4b8e      	ldr	r3, [pc, #568]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b88      	ldr	r3, [pc, #544]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a87      	ldr	r2, [pc, #540]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe f93f 	bl	8000f5c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fe f93b 	bl	8000f5c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	@ 0x64
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e195      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ef0 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x312>
 8002d08:	4b78      	ldr	r3, [pc, #480]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a77      	ldr	r2, [pc, #476]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e02d      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x334>
 8002d1e:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a72      	ldr	r2, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	e01c      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d10c      	bne.n	8002d5a <HAL_RCC_OscConfig+0x356>
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a69      	ldr	r2, [pc, #420]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	4b67      	ldr	r3, [pc, #412]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a66      	ldr	r2, [pc, #408]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x36e>
 8002d5a:	4b64      	ldr	r3, [pc, #400]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a63      	ldr	r2, [pc, #396]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6213      	str	r3, [r2, #32]
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a60      	ldr	r2, [pc, #384]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d015      	beq.n	8002da6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe f8ef 	bl	8000f5c <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe f8eb 	bl	8000f5c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e143      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d98:	4b54      	ldr	r3, [pc, #336]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0ee      	beq.n	8002d82 <HAL_RCC_OscConfig+0x37e>
 8002da4:	e014      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe f8d9 	bl	8000f5c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe f8d5 	bl	8000f5c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e12d      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc4:	4b49      	ldr	r3, [pc, #292]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ee      	bne.n	8002dae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d105      	bne.n	8002de2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd6:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	4a44      	ldr	r2, [pc, #272]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ddc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 808c 	beq.w	8002f04 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002dec:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d10e      	bne.n	8002e18 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e103      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d14e      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e20:	4b32      	ldr	r3, [pc, #200]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0ef      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002e40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef4 <HAL_RCC_OscConfig+0x4f0>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe f889 	bl	8000f5c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e4e:	f7fe f885 	bl	8000f5c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	@ 0x64
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0df      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002e60:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e78:	491c      	ldr	r1, [pc, #112]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4918      	ldr	r1, [pc, #96]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002e90:	4b18      	ldr	r3, [pc, #96]	@ (8002ef4 <HAL_RCC_OscConfig+0x4f0>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe f861 	bl	8000f5c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e9e:	f7fe f85d 	bl	8000f5c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b64      	cmp	r3, #100	@ 0x64
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0b7      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x49a>
 8002ebc:	e022      	b.n	8002f04 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8002eec <HAL_RCC_OscConfig+0x4e8>)
 8002ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002eca:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef4 <HAL_RCC_OscConfig+0x4f0>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f844 	bl	8000f5c <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002ed6:	e00f      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002ed8:	f7fe f840 	bl	8000f5c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	@ 0x64
 8002ee4:	d908      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e09a      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e9      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8088 	beq.w	800301e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d068      	beq.n	8002fec <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d14d      	bne.n	8002fbe <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b42      	ldr	r3, [pc, #264]	@ (800302c <HAL_RCC_OscConfig+0x628>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe f818 	bl	8000f5c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fe f814 	bl	8000f5c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e06e      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f42:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f56:	d10f      	bne.n	8002f78 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002f58:	4b33      	ldr	r3, [pc, #204]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4931      	ldr	r1, [pc, #196]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f66:	4b30      	ldr	r3, [pc, #192]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	f023 020f 	bic.w	r2, r3, #15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	492d      	ldr	r1, [pc, #180]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	4927      	ldr	r1, [pc, #156]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f90:	4b26      	ldr	r3, [pc, #152]	@ (800302c <HAL_RCC_OscConfig+0x628>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fd ffe1 	bl	8000f5c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fd ffdd 	bl	8000f5c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e037      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x59a>
 8002fbc:	e02f      	b.n	800301e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x628>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ffca 	bl	8000f5c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd ffc6 	bl	8000f5c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e020      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5c8>
 8002fea:	e018      	b.n	800301e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e013      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <HAL_RCC_OscConfig+0x624>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	429a      	cmp	r2, r3
 800300a:	d106      	bne.n	800301a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	42420060 	.word	0x42420060

08003030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0d0      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b6a      	ldr	r3, [pc, #424]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b67      	ldr	r3, [pc, #412]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 0207 	bic.w	r2, r3, #7
 800305a:	4965      	ldr	r1, [pc, #404]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b63      	ldr	r3, [pc, #396]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0b8      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800308c:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a58      	ldr	r2, [pc, #352]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a4:	4b53      	ldr	r3, [pc, #332]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a52      	ldr	r2, [pc, #328]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80030ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b0:	4b50      	ldr	r3, [pc, #320]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	494d      	ldr	r1, [pc, #308]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d040      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d107      	bne.n	80030e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b47      	ldr	r3, [pc, #284]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d115      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e07f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b41      	ldr	r3, [pc, #260]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e073      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06b      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4936      	ldr	r1, [pc, #216]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	4313      	orrs	r3, r2
 800311e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7fd ff1c 	bl	8000f5c <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7fd ff18 	bl	8000f5c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e053      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b27      	ldr	r3, [pc, #156]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d210      	bcs.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b24      	ldr	r3, [pc, #144]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 0207 	bic.w	r2, r3, #7
 8003166:	4922      	ldr	r1, [pc, #136]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e032      	b.n	80031e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800318c:	4b19      	ldr	r3, [pc, #100]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4916      	ldr	r1, [pc, #88]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	4313      	orrs	r3, r2
 800319c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d009      	beq.n	80031be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031aa:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	490e      	ldr	r1, [pc, #56]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031be:	f000 f859 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	490a      	ldr	r1, [pc, #40]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	5ccb      	ldrb	r3, [r1, r3]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	@ (80031fc <HAL_RCC_ClockConfig+0x1cc>)
 80031d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031da:	4b09      	ldr	r3, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1d0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd fd2c 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40022000 	.word	0x40022000
 80031f4:	40021000 	.word	0x40021000
 80031f8:	0801ab2c 	.word	0x0801ab2c
 80031fc:	20000000 	.word	0x20000000
 8003200:	20000004 	.word	0x20000004

08003204 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	@ 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003210:	f107 0318 	add.w	r3, r7, #24
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800322a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800322e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003230:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <HAL_RCC_MCOConfig+0x68>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <HAL_RCC_MCOConfig+0x68>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_MCOConfig+0x68>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003248:	f107 0318 	add.w	r3, r7, #24
 800324c:	4619      	mov	r1, r3
 800324e:	4808      	ldr	r0, [pc, #32]	@ (8003270 <HAL_RCC_MCOConfig+0x6c>)
 8003250:	f7ff fa22 	bl	8002698 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_RCC_MCOConfig+0x68>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_MCOConfig+0x68>)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	@ 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40021000 	.word	0x40021000
 8003270:	40010800 	.word	0x40010800

08003274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003278:	b08e      	sub	sp, #56	@ 0x38
 800327a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003284:	2300      	movs	r3, #0
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003298:	4b4e      	ldr	r3, [pc, #312]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x160>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d002      	beq.n	80032ae <HAL_RCC_GetSysClockFreq+0x3a>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d003      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x40>
 80032ac:	e089      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032ae:	4b4a      	ldr	r3, [pc, #296]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x164>)
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80032b2:	e089      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b6:	0c9b      	lsrs	r3, r3, #18
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x168>)
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d072      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80032cc:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	4b42      	ldr	r3, [pc, #264]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80032da:	4b3e      	ldr	r3, [pc, #248]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d053      	beq.n	800338e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	3301      	adds	r3, #1
 80032f2:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80032f4:	4b37      	ldr	r3, [pc, #220]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	3302      	adds	r3, #2
 8003300:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2200      	movs	r2, #0
 8003306:	469a      	mov	sl, r3
 8003308:	4693      	mov	fp, r2
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	2200      	movs	r2, #0
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	617a      	str	r2, [r7, #20]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	fb03 f20b 	mul.w	r2, r3, fp
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	fb0a f303 	mul.w	r3, sl, r3
 800331e:	4413      	add	r3, r2
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	fbaa 0102 	umull	r0, r1, sl, r2
 8003326:	440b      	add	r3, r1
 8003328:	4619      	mov	r1, r3
 800332a:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x164>)
 800332c:	fb03 f201 	mul.w	r2, r3, r1
 8003330:	2300      	movs	r3, #0
 8003332:	fb00 f303 	mul.w	r3, r0, r3
 8003336:	4413      	add	r3, r2
 8003338:	4a27      	ldr	r2, [pc, #156]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x164>)
 800333a:	fba0 4502 	umull	r4, r5, r0, r2
 800333e:	442b      	add	r3, r5
 8003340:	461d      	mov	r5, r3
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	2200      	movs	r2, #0
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	60fa      	str	r2, [r7, #12]
 800334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334c:	2200      	movs	r2, #0
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003356:	460b      	mov	r3, r1
 8003358:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800335c:	4652      	mov	r2, sl
 800335e:	fb02 f203 	mul.w	r2, r2, r3
 8003362:	465b      	mov	r3, fp
 8003364:	4684      	mov	ip, r0
 8003366:	fb0c f303 	mul.w	r3, ip, r3
 800336a:	4413      	add	r3, r2
 800336c:	4602      	mov	r2, r0
 800336e:	4651      	mov	r1, sl
 8003370:	fba2 8901 	umull	r8, r9, r2, r1
 8003374:	444b      	add	r3, r9
 8003376:	4699      	mov	r9, r3
 8003378:	4642      	mov	r2, r8
 800337a:	464b      	mov	r3, r9
 800337c:	4620      	mov	r0, r4
 800337e:	4629      	mov	r1, r5
 8003380:	f7fc ff68 	bl	8000254 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
 800338c:	e007      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003392:	fb03 f202 	mul.w	r2, r3, r2
 8003396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800339e:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x168>)
 80033a0:	7b5b      	ldrb	r3, [r3, #13]
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b0:	e004      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x170>)
 80033b6:	fb02 f303 	mul.w	r3, r2, r3
 80033ba:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 80033bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033c0:	e002      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c2:	4b09      	ldr	r3, [pc, #36]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0x174>)
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80033c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3738      	adds	r7, #56	@ 0x38
 80033ce:	46bd      	mov	sp, r7
 80033d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	017d7840 	.word	0x017d7840
 80033dc:	0801ab44 	.word	0x0801ab44
 80033e0:	0801ab54 	.word	0x0801ab54
 80033e4:	003d0900 	.word	0x003d0900
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b02      	ldr	r3, [pc, #8]	@ (80033fc <HAL_RCC_GetHCLKFreq+0x10>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff2 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0a1b      	lsrs	r3, r3, #8
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	0801ab3c 	.word	0x0801ab3c

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffde 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	@ (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0adb      	lsrs	r3, r3, #11
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000
 800344c:	0801ab3c 	.word	0x0801ab3c

08003450 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	220f      	movs	r2, #15
 800345e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003460:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <HAL_RCC_GetClockConfig+0x58>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800346c:	4b0e      	ldr	r3, [pc, #56]	@ (80034a8 <HAL_RCC_GetClockConfig+0x58>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003478:	4b0b      	ldr	r3, [pc, #44]	@ (80034a8 <HAL_RCC_GetClockConfig+0x58>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003484:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_RCC_GetClockConfig+0x58>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	08db      	lsrs	r3, r3, #3
 800348a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_RCC_GetClockConfig+0x5c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0207 	and.w	r2, r3, #7
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40022000 	.word	0x40022000

080034b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034b8:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <RCC_Delay+0x34>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <RCC_Delay+0x38>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0a5b      	lsrs	r3, r3, #9
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034cc:	bf00      	nop
  }
  while (Delay --);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	60fa      	str	r2, [r7, #12]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <RCC_Delay+0x1c>
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000000 	.word	0x20000000
 80034e8:	10624dd3 	.word	0x10624dd3

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f839 	bl	800358a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 f9bc 	bl	80038a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr

0800359c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e03f      	b.n	8003634 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003640 <HAL_TIM_Base_Start_IT+0xa4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d013      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035de:	d00e      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x62>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a17      	ldr	r2, [pc, #92]	@ (8003644 <HAL_TIM_Base_Start_IT+0xa8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d009      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <HAL_TIM_Base_Start_IT+0xac>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d004      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0x62>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <HAL_TIM_Base_Start_IT+0xb0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d111      	bne.n	8003622 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b06      	cmp	r3, #6
 800360e:	d010      	beq.n	8003632 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003620:	e007      	b.n	8003632 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40000c00 	.word	0x40000c00

08003650 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d122      	bne.n	80036ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d11b      	bne.n	80036ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0202 	mvn.w	r2, #2
 800367c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8ed 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8e0 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f8ef 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d122      	bne.n	8003700 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d11b      	bne.n	8003700 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0204 	mvn.w	r2, #4
 80036d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2202      	movs	r2, #2
 80036d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8c3 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 80036ec:	e005      	b.n	80036fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8b6 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f8c5 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d122      	bne.n	8003754 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b08      	cmp	r3, #8
 800371a:	d11b      	bne.n	8003754 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0208 	mvn.w	r2, #8
 8003724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2204      	movs	r2, #4
 800372a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f899 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003740:	e005      	b.n	800374e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f88c 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f89b 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d122      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b10      	cmp	r3, #16
 800376e:	d11b      	bne.n	80037a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f06f 0210 	mvn.w	r2, #16
 8003778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2208      	movs	r2, #8
 800377e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f86f 	bl	8003872 <HAL_TIM_IC_CaptureCallback>
 8003794:	e005      	b.n	80037a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f862 	bl	8003860 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f871 	bl	8003884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10e      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0201 	mvn.w	r2, #1
 80037cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd f982 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b80      	cmp	r3, #128	@ 0x80
 80037e0:	d10e      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	d107      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f8c9 	bl	8003992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380a:	2b40      	cmp	r3, #64	@ 0x40
 800380c:	d10e      	bne.n	800382c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d107      	bne.n	800382c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f835 	bl	8003896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b20      	cmp	r3, #32
 8003846:	d107      	bne.n	8003858 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0220 	mvn.w	r2, #32
 8003850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f894 	bl	8003980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <TIM_Base_SetConfig+0xc8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00f      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d00b      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003974 <TIM_Base_SetConfig+0xcc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d007      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <TIM_Base_SetConfig+0xd0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d003      	beq.n	80038e0 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a28      	ldr	r2, [pc, #160]	@ (800397c <TIM_Base_SetConfig+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <TIM_Base_SetConfig+0xc8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <TIM_Base_SetConfig+0xcc>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a1a      	ldr	r2, [pc, #104]	@ (8003978 <TIM_Base_SetConfig+0xd0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x72>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a19      	ldr	r2, [pc, #100]	@ (800397c <TIM_Base_SetConfig+0xd4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a07      	ldr	r2, [pc, #28]	@ (8003970 <TIM_Base_SetConfig+0xc8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00

08003980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	bc80      	pop	{r7}
 8003990:	4770      	bx	lr

08003992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e042      	b.n	8003a3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd f8d4 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2224      	movs	r2, #36	@ 0x24
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fc7f 	bl	80042ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b0ba      	sub	sp, #232	@ 0xe8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fb63 	bl	800416e <UART_Receive_IT>
      return;
 8003aa8:	e25b      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80de 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
 8003ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
 8003ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	f043 0202 	orr.w	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
 8003b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f043 0204 	orr.w	r2, r3, #4
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d011      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
 8003b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d105      	bne.n	8003b5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b62:	f043 0208 	orr.w	r2, r3, #8
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 81f2 	beq.w	8003f58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
 8003b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 faee 	bl	800416e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_UART_IRQHandler+0x17a>
 8003bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d04f      	beq.n	8003c5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f9f8 	bl	8003fb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d041      	beq.n	8003c56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3314      	adds	r3, #20
 8003bd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003bfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1d9      	bne.n	8003bd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e24 <HAL_UART_IRQHandler+0x3e0>)
 8003c2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fada 	bl	80011ec <HAL_DMA_Abort_IT>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d016      	beq.n	8003c6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4c:	e00e      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f99c 	bl	8003f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	e00a      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f998 	bl	8003f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c5c:	e006      	b.n	8003c6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f994 	bl	8003f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c6a:	e175      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	bf00      	nop
    return;
 8003c6e:	e173      	b.n	8003f58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	f040 814f 	bne.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8148 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8141 	beq.w	8003f18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60bb      	str	r3, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 80b6 	beq.w	8003e28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8145 	beq.w	8003f5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	f080 813e 	bcs.w	8003f5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ce6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	f000 8088 	beq.w	8003e04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1d9      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3314      	adds	r3, #20
 8003d46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e1      	bne.n	8003d40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d86:	e853 3f00 	ldrex	r3, [r3]
 8003d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003d8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003da0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003da2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003da6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e3      	bne.n	8003d7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dd4:	f023 0310 	bic.w	r3, r3, #16
 8003dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003de6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003de8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003dee:	e841 2300 	strex	r3, r2, [r1]
 8003df2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1e3      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f9b9 	bl	8001176 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f8bf 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e20:	e09c      	b.n	8003f5c <HAL_UART_IRQHandler+0x518>
 8003e22:	bf00      	nop
 8003e24:	08004079 	.word	0x08004079
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 808e 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8089 	beq.w	8003f60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e3      	bne.n	8003e4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	623b      	str	r3, [r7, #32]
   return(result);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3314      	adds	r3, #20
 8003ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb2:	e841 2300 	strex	r3, r2, [r1]
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1e3      	bne.n	8003e86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ef0:	61fa      	str	r2, [r7, #28]
 8003ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	69b9      	ldr	r1, [r7, #24]
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	617b      	str	r3, [r7, #20]
   return(result);
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e3      	bne.n	8003ecc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f0e:	4619      	mov	r1, r3
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f844 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f16:	e023      	b.n	8003f60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
 8003f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8b5 	bl	80040a0 <UART_Transmit_IT>
    return;
 8003f36:	e014      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00e      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 f8f4 	bl	800413e <UART_EndTransmit_IT>
    return;
 8003f56:	e004      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f60:	bf00      	nop
  }
}
 8003f62:	37e8      	adds	r7, #232	@ 0xe8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b095      	sub	sp, #84	@ 0x54
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc6:	e853 3f00 	ldrex	r3, [r3]
 8003fca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	330c      	adds	r3, #12
 8003fda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fdc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fe4:	e841 2300 	strex	r3, r2, [r1]
 8003fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e5      	bne.n	8003fbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3314      	adds	r3, #20
 8003ff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f023 0301 	bic.w	r3, r3, #1
 8004006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004010:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	d119      	bne.n	8004060 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	330c      	adds	r3, #12
 8004032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	60bb      	str	r3, [r7, #8]
   return(result);
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	f023 0310 	bic.w	r3, r3, #16
 8004042:	647b      	str	r3, [r7, #68]	@ 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800404c:	61ba      	str	r2, [r7, #24]
 800404e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6979      	ldr	r1, [r7, #20]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	613b      	str	r3, [r7, #16]
   return(result);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800406e:	bf00      	nop
 8004070:	3754      	adds	r7, #84	@ 0x54
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff ff7a 	bl	8003f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b21      	cmp	r3, #33	@ 0x21
 80040b2:	d13e      	bne.n	8004132 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040bc:	d114      	bne.n	80040e8 <UART_Transmit_IT+0x48>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d110      	bne.n	80040e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	461a      	mov	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	621a      	str	r2, [r3, #32]
 80040e6:	e008      	b.n	80040fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	1c59      	adds	r1, r3, #1
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6211      	str	r1, [r2, #32]
 80040f2:	781a      	ldrb	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4619      	mov	r1, r3
 8004108:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800411c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800412c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004132:	2302      	movs	r3, #2
  }
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004154:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ff02 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08c      	sub	sp, #48	@ 0x30
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b22      	cmp	r3, #34	@ 0x22
 8004180:	f040 80ae 	bne.w	80042e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418c:	d117      	bne.n	80041be <UART_Receive_IT+0x50>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d113      	bne.n	80041be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800419e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	1c9a      	adds	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80041bc:	e026      	b.n	800420c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d0:	d007      	beq.n	80041e2 <UART_Receive_IT+0x74>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <UART_Receive_IT+0x82>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e008      	b.n	8004202 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29b      	uxth	r3, r3
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4619      	mov	r1, r3
 800421a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800421c:	2b00      	cmp	r3, #0
 800421e:	d15d      	bne.n	80042dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0220 	bic.w	r2, r2, #32
 800422e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800423e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0201 	bic.w	r2, r2, #1
 800424e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	2b01      	cmp	r3, #1
 8004264:	d135      	bne.n	80042d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	330c      	adds	r3, #12
 8004272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	613b      	str	r3, [r7, #16]
   return(result);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f023 0310 	bic.w	r3, r3, #16
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	623a      	str	r2, [r7, #32]
 800428e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	61bb      	str	r3, [r7, #24]
   return(result);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e5      	bne.n	800426c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d10a      	bne.n	80042c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fe67 	bl	8003f9e <HAL_UARTEx_RxEventCallback>
 80042d0:	e002      	b.n	80042d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff fe51 	bl	8003f7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e002      	b.n	80042e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3730      	adds	r7, #48	@ 0x30
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
	...

080042ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004326:	f023 030c 	bic.w	r3, r3, #12
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	430b      	orrs	r3, r1
 8004332:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a2c      	ldr	r2, [pc, #176]	@ (8004400 <UART_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d103      	bne.n	800435c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7ff f868 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	e002      	b.n	8004362 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7ff f850 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8004360:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009a      	lsls	r2, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fbb2 f3f3 	udiv	r3, r2, r3
 8004378:	4a22      	ldr	r2, [pc, #136]	@ (8004404 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	0119      	lsls	r1, r3, #4
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fbb2 f2f3 	udiv	r2, r2, r3
 8004398:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <UART_SetConfig+0x118>)
 800439a:	fba3 0302 	umull	r0, r3, r3, r2
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	2064      	movs	r0, #100	@ 0x64
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	3332      	adds	r3, #50	@ 0x32
 80043ac:	4a15      	ldr	r2, [pc, #84]	@ (8004404 <UART_SetConfig+0x118>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043b8:	4419      	add	r1, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009a      	lsls	r2, r3, #2
 80043c4:	441a      	add	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <UART_SetConfig+0x118>)
 80043d2:	fba3 0302 	umull	r0, r3, r3, r2
 80043d6:	095b      	lsrs	r3, r3, #5
 80043d8:	2064      	movs	r0, #100	@ 0x64
 80043da:	fb00 f303 	mul.w	r3, r0, r3
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	3332      	adds	r3, #50	@ 0x32
 80043e4:	4a07      	ldr	r2, [pc, #28]	@ (8004404 <UART_SetConfig+0x118>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	440a      	add	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40013800 	.word	0x40013800
 8004404:	51eb851f 	.word	0x51eb851f

08004408 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004408:	b5b0      	push	{r4, r5, r7, lr}
 800440a:	b08e      	sub	sp, #56	@ 0x38
 800440c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800440e:	4b99      	ldr	r3, [pc, #612]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004410:	22c0      	movs	r2, #192	@ 0xc0
 8004412:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004414:	4b97      	ldr	r3, [pc, #604]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004416:	22a8      	movs	r2, #168	@ 0xa8
 8004418:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 31;
 800441a:	4b96      	ldr	r3, [pc, #600]	@ (8004674 <MX_LWIP_Init+0x26c>)
 800441c:	221f      	movs	r2, #31
 800441e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8004420:	4b94      	ldr	r3, [pc, #592]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004422:	22c9      	movs	r2, #201	@ 0xc9
 8004424:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004426:	4b94      	ldr	r3, [pc, #592]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004428:	22ff      	movs	r2, #255	@ 0xff
 800442a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800442c:	4b92      	ldr	r3, [pc, #584]	@ (8004678 <MX_LWIP_Init+0x270>)
 800442e:	22ff      	movs	r2, #255	@ 0xff
 8004430:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004432:	4b91      	ldr	r3, [pc, #580]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004434:	22ff      	movs	r2, #255	@ 0xff
 8004436:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004438:	4b8f      	ldr	r3, [pc, #572]	@ (8004678 <MX_LWIP_Init+0x270>)
 800443a:	2200      	movs	r2, #0
 800443c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800443e:	4b8f      	ldr	r3, [pc, #572]	@ (800467c <MX_LWIP_Init+0x274>)
 8004440:	22c0      	movs	r2, #192	@ 0xc0
 8004442:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004444:	4b8d      	ldr	r3, [pc, #564]	@ (800467c <MX_LWIP_Init+0x274>)
 8004446:	22a8      	movs	r2, #168	@ 0xa8
 8004448:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 31;
 800444a:	4b8c      	ldr	r3, [pc, #560]	@ (800467c <MX_LWIP_Init+0x274>)
 800444c:	221f      	movs	r2, #31
 800444e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004450:	4b8a      	ldr	r3, [pc, #552]	@ (800467c <MX_LWIP_Init+0x274>)
 8004452:	2201      	movs	r2, #1
 8004454:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004456:	2100      	movs	r1, #0
 8004458:	2000      	movs	r0, #0
 800445a:	f006 fd8b 	bl	800af74 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800445e:	4b85      	ldr	r3, [pc, #532]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	061a      	lsls	r2, r3, #24
 8004464:	4b83      	ldr	r3, [pc, #524]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	4b81      	ldr	r3, [pc, #516]	@ (8004674 <MX_LWIP_Init+0x26c>)
 800446e:	789b      	ldrb	r3, [r3, #2]
 8004470:	021b      	lsls	r3, r3, #8
 8004472:	4313      	orrs	r3, r2
 8004474:	4a7f      	ldr	r2, [pc, #508]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004476:	78d2      	ldrb	r2, [r2, #3]
 8004478:	4313      	orrs	r3, r2
 800447a:	061a      	lsls	r2, r3, #24
 800447c:	4b7d      	ldr	r3, [pc, #500]	@ (8004674 <MX_LWIP_Init+0x26c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	0619      	lsls	r1, r3, #24
 8004482:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	4319      	orrs	r1, r3
 800448a:	4b7a      	ldr	r3, [pc, #488]	@ (8004674 <MX_LWIP_Init+0x26c>)
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	430b      	orrs	r3, r1
 8004492:	4978      	ldr	r1, [pc, #480]	@ (8004674 <MX_LWIP_Init+0x26c>)
 8004494:	78c9      	ldrb	r1, [r1, #3]
 8004496:	430b      	orrs	r3, r1
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800449e:	431a      	orrs	r2, r3
 80044a0:	4b74      	ldr	r3, [pc, #464]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	0619      	lsls	r1, r3, #24
 80044a6:	4b73      	ldr	r3, [pc, #460]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	4319      	orrs	r1, r3
 80044ae:	4b71      	ldr	r3, [pc, #452]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044b0:	789b      	ldrb	r3, [r3, #2]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	430b      	orrs	r3, r1
 80044b6:	496f      	ldr	r1, [pc, #444]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044b8:	78c9      	ldrb	r1, [r1, #3]
 80044ba:	430b      	orrs	r3, r1
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80044c2:	431a      	orrs	r2, r3
 80044c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	0619      	lsls	r1, r3, #24
 80044ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044cc:	785b      	ldrb	r3, [r3, #1]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	4319      	orrs	r1, r3
 80044d2:	4b68      	ldr	r3, [pc, #416]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044d4:	789b      	ldrb	r3, [r3, #2]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	430b      	orrs	r3, r1
 80044da:	4966      	ldr	r1, [pc, #408]	@ (8004674 <MX_LWIP_Init+0x26c>)
 80044dc:	78c9      	ldrb	r1, [r1, #3]
 80044de:	430b      	orrs	r3, r1
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	4313      	orrs	r3, r2
 80044e4:	4a66      	ldr	r2, [pc, #408]	@ (8004680 <MX_LWIP_Init+0x278>)
 80044e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80044e8:	4b63      	ldr	r3, [pc, #396]	@ (8004678 <MX_LWIP_Init+0x270>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	061a      	lsls	r2, r3, #24
 80044ee:	4b62      	ldr	r3, [pc, #392]	@ (8004678 <MX_LWIP_Init+0x270>)
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	431a      	orrs	r2, r3
 80044f6:	4b60      	ldr	r3, [pc, #384]	@ (8004678 <MX_LWIP_Init+0x270>)
 80044f8:	789b      	ldrb	r3, [r3, #2]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	4313      	orrs	r3, r2
 80044fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004500:	78d2      	ldrb	r2, [r2, #3]
 8004502:	4313      	orrs	r3, r2
 8004504:	061a      	lsls	r2, r3, #24
 8004506:	4b5c      	ldr	r3, [pc, #368]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	0619      	lsls	r1, r3, #24
 800450c:	4b5a      	ldr	r3, [pc, #360]	@ (8004678 <MX_LWIP_Init+0x270>)
 800450e:	785b      	ldrb	r3, [r3, #1]
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	4319      	orrs	r1, r3
 8004514:	4b58      	ldr	r3, [pc, #352]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004516:	789b      	ldrb	r3, [r3, #2]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	430b      	orrs	r3, r1
 800451c:	4956      	ldr	r1, [pc, #344]	@ (8004678 <MX_LWIP_Init+0x270>)
 800451e:	78c9      	ldrb	r1, [r1, #3]
 8004520:	430b      	orrs	r3, r1
 8004522:	021b      	lsls	r3, r3, #8
 8004524:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004528:	431a      	orrs	r2, r3
 800452a:	4b53      	ldr	r3, [pc, #332]	@ (8004678 <MX_LWIP_Init+0x270>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	0619      	lsls	r1, r3, #24
 8004530:	4b51      	ldr	r3, [pc, #324]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004532:	785b      	ldrb	r3, [r3, #1]
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	4319      	orrs	r1, r3
 8004538:	4b4f      	ldr	r3, [pc, #316]	@ (8004678 <MX_LWIP_Init+0x270>)
 800453a:	789b      	ldrb	r3, [r3, #2]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	430b      	orrs	r3, r1
 8004540:	494d      	ldr	r1, [pc, #308]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004542:	78c9      	ldrb	r1, [r1, #3]
 8004544:	430b      	orrs	r3, r1
 8004546:	0a1b      	lsrs	r3, r3, #8
 8004548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800454c:	431a      	orrs	r2, r3
 800454e:	4b4a      	ldr	r3, [pc, #296]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	0619      	lsls	r1, r3, #24
 8004554:	4b48      	ldr	r3, [pc, #288]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	4319      	orrs	r1, r3
 800455c:	4b46      	ldr	r3, [pc, #280]	@ (8004678 <MX_LWIP_Init+0x270>)
 800455e:	789b      	ldrb	r3, [r3, #2]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	430b      	orrs	r3, r1
 8004564:	4944      	ldr	r1, [pc, #272]	@ (8004678 <MX_LWIP_Init+0x270>)
 8004566:	78c9      	ldrb	r1, [r1, #3]
 8004568:	430b      	orrs	r3, r1
 800456a:	0e1b      	lsrs	r3, r3, #24
 800456c:	4313      	orrs	r3, r2
 800456e:	4a45      	ldr	r2, [pc, #276]	@ (8004684 <MX_LWIP_Init+0x27c>)
 8004570:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004572:	4b42      	ldr	r3, [pc, #264]	@ (800467c <MX_LWIP_Init+0x274>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	061a      	lsls	r2, r3, #24
 8004578:	4b40      	ldr	r3, [pc, #256]	@ (800467c <MX_LWIP_Init+0x274>)
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	4b3e      	ldr	r3, [pc, #248]	@ (800467c <MX_LWIP_Init+0x274>)
 8004582:	789b      	ldrb	r3, [r3, #2]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	4313      	orrs	r3, r2
 8004588:	4a3c      	ldr	r2, [pc, #240]	@ (800467c <MX_LWIP_Init+0x274>)
 800458a:	78d2      	ldrb	r2, [r2, #3]
 800458c:	4313      	orrs	r3, r2
 800458e:	061a      	lsls	r2, r3, #24
 8004590:	4b3a      	ldr	r3, [pc, #232]	@ (800467c <MX_LWIP_Init+0x274>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	0619      	lsls	r1, r3, #24
 8004596:	4b39      	ldr	r3, [pc, #228]	@ (800467c <MX_LWIP_Init+0x274>)
 8004598:	785b      	ldrb	r3, [r3, #1]
 800459a:	041b      	lsls	r3, r3, #16
 800459c:	4319      	orrs	r1, r3
 800459e:	4b37      	ldr	r3, [pc, #220]	@ (800467c <MX_LWIP_Init+0x274>)
 80045a0:	789b      	ldrb	r3, [r3, #2]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	430b      	orrs	r3, r1
 80045a6:	4935      	ldr	r1, [pc, #212]	@ (800467c <MX_LWIP_Init+0x274>)
 80045a8:	78c9      	ldrb	r1, [r1, #3]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	021b      	lsls	r3, r3, #8
 80045ae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80045b2:	431a      	orrs	r2, r3
 80045b4:	4b31      	ldr	r3, [pc, #196]	@ (800467c <MX_LWIP_Init+0x274>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	0619      	lsls	r1, r3, #24
 80045ba:	4b30      	ldr	r3, [pc, #192]	@ (800467c <MX_LWIP_Init+0x274>)
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	4319      	orrs	r1, r3
 80045c2:	4b2e      	ldr	r3, [pc, #184]	@ (800467c <MX_LWIP_Init+0x274>)
 80045c4:	789b      	ldrb	r3, [r3, #2]
 80045c6:	021b      	lsls	r3, r3, #8
 80045c8:	430b      	orrs	r3, r1
 80045ca:	492c      	ldr	r1, [pc, #176]	@ (800467c <MX_LWIP_Init+0x274>)
 80045cc:	78c9      	ldrb	r1, [r1, #3]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	0a1b      	lsrs	r3, r3, #8
 80045d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80045d6:	431a      	orrs	r2, r3
 80045d8:	4b28      	ldr	r3, [pc, #160]	@ (800467c <MX_LWIP_Init+0x274>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	0619      	lsls	r1, r3, #24
 80045de:	4b27      	ldr	r3, [pc, #156]	@ (800467c <MX_LWIP_Init+0x274>)
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	4319      	orrs	r1, r3
 80045e6:	4b25      	ldr	r3, [pc, #148]	@ (800467c <MX_LWIP_Init+0x274>)
 80045e8:	789b      	ldrb	r3, [r3, #2]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	430b      	orrs	r3, r1
 80045ee:	4923      	ldr	r1, [pc, #140]	@ (800467c <MX_LWIP_Init+0x274>)
 80045f0:	78c9      	ldrb	r1, [r1, #3]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	4313      	orrs	r3, r2
 80045f8:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <MX_LWIP_Init+0x280>)
 80045fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80045fc:	4b23      	ldr	r3, [pc, #140]	@ (800468c <MX_LWIP_Init+0x284>)
 80045fe:	9302      	str	r3, [sp, #8]
 8004600:	4b23      	ldr	r3, [pc, #140]	@ (8004690 <MX_LWIP_Init+0x288>)
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	2300      	movs	r3, #0
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <MX_LWIP_Init+0x280>)
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <MX_LWIP_Init+0x27c>)
 800460c:	491c      	ldr	r1, [pc, #112]	@ (8004680 <MX_LWIP_Init+0x278>)
 800460e:	4821      	ldr	r0, [pc, #132]	@ (8004694 <MX_LWIP_Init+0x28c>)
 8004610:	f007 f968 	bl	800b8e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004614:	481f      	ldr	r0, [pc, #124]	@ (8004694 <MX_LWIP_Init+0x28c>)
 8004616:	f007 fa47 	bl	800baa8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800461a:	481e      	ldr	r0, [pc, #120]	@ (8004694 <MX_LWIP_Init+0x28c>)
 800461c:	f007 fa52 	bl	800bac4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004620:	491d      	ldr	r1, [pc, #116]	@ (8004698 <MX_LWIP_Init+0x290>)
 8004622:	481c      	ldr	r0, [pc, #112]	@ (8004694 <MX_LWIP_Init+0x28c>)
 8004624:	f007 fadd 	bl	800bbe2 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004628:	2300      	movs	r3, #0
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	2300      	movs	r3, #0
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004630:	f107 0320 	add.w	r3, r7, #32
 8004634:	2101      	movs	r1, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fda6 	bl	8005188 <osSemaphoreCreate>
 800463c:	4603      	mov	r3, r0
 800463e:	4a17      	ldr	r2, [pc, #92]	@ (800469c <MX_LWIP_Init+0x294>)
 8004640:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004642:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <MX_LWIP_Init+0x298>)
 8004644:	4a13      	ldr	r2, [pc, #76]	@ (8004694 <MX_LWIP_Init+0x28c>)
 8004646:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004648:	4b14      	ldr	r3, [pc, #80]	@ (800469c <MX_LWIP_Init+0x294>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a14      	ldr	r2, [pc, #80]	@ (80046a0 <MX_LWIP_Init+0x298>)
 800464e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004650:	4b14      	ldr	r3, [pc, #80]	@ (80046a4 <MX_LWIP_Init+0x29c>)
 8004652:	1d3c      	adds	r4, r7, #4
 8004654:	461d      	mov	r5, r3
 8004656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800465a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800465e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	490e      	ldr	r1, [pc, #56]	@ (80046a0 <MX_LWIP_Init+0x298>)
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fc92 	bl	8004f90 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800466c:	bf00      	nop
 800466e:	3728      	adds	r7, #40	@ 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bdb0      	pop	{r4, r5, r7, pc}
 8004674:	2000169c 	.word	0x2000169c
 8004678:	200016a0 	.word	0x200016a0
 800467c:	200016a4 	.word	0x200016a4
 8004680:	20001690 	.word	0x20001690
 8004684:	20001694 	.word	0x20001694
 8004688:	20001698 	.word	0x20001698
 800468c:	0800ae71 	.word	0x0800ae71
 8004690:	08004d25 	.word	0x08004d25
 8004694:	2000165c 	.word	0x2000165c
 8004698:	08004e09 	.word	0x08004e09
 800469c:	20001650 	.word	0x20001650
 80046a0:	20001654 	.word	0x20001654
 80046a4:	080180a4 	.word	0x080180a4

080046a8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	@ 0x38
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a58      	ldr	r2, [pc, #352]	@ (8004824 <HAL_ETH_MspInit+0x17c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	f040 80a8 	bne.w	800481a <HAL_ETH_MspInit+0x172>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046ca:	4b57      	ldr	r3, [pc, #348]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	4a56      	ldr	r2, [pc, #344]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046d4:	6153      	str	r3, [r2, #20]
 80046d6:	4b54      	ldr	r3, [pc, #336]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	4b51      	ldr	r3, [pc, #324]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4a50      	ldr	r2, [pc, #320]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ec:	6153      	str	r3, [r2, #20]
 80046ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004704:	6153      	str	r3, [r2, #20]
 8004706:	4b48      	ldr	r3, [pc, #288]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004712:	4b45      	ldr	r3, [pc, #276]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	4a44      	ldr	r2, [pc, #272]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004718:	f043 0310 	orr.w	r3, r3, #16
 800471c:	6193      	str	r3, [r2, #24]
 800471e:	4b42      	ldr	r3, [pc, #264]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800472a:	4b3f      	ldr	r3, [pc, #252]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	4a3e      	ldr	r2, [pc, #248]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	6193      	str	r3, [r2, #24]
 8004736:	4b3c      	ldr	r3, [pc, #240]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004742:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	4a38      	ldr	r2, [pc, #224]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004748:	f043 0308 	orr.w	r3, r3, #8
 800474c:	6193      	str	r3, [r2, #24]
 800474e:	4b36      	ldr	r3, [pc, #216]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800475a:	4b33      	ldr	r3, [pc, #204]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	4a32      	ldr	r2, [pc, #200]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004760:	f043 0320 	orr.w	r3, r3, #32
 8004764:	6193      	str	r3, [r2, #24]
 8004766:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <HAL_ETH_MspInit+0x180>)
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f003 0320 	and.w	r3, r3, #32
 800476e:	60bb      	str	r3, [r7, #8]
 8004770:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004772:	2302      	movs	r3, #2
 8004774:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004776:	2302      	movs	r3, #2
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800477e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004782:	4619      	mov	r1, r3
 8004784:	4829      	ldr	r0, [pc, #164]	@ (800482c <HAL_ETH_MspInit+0x184>)
 8004786:	f7fd ff87 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800478a:	2302      	movs	r3, #2
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800478e:	2300      	movs	r3, #0
 8004790:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004792:	2300      	movs	r3, #0
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800479a:	4619      	mov	r1, r3
 800479c:	4824      	ldr	r0, [pc, #144]	@ (8004830 <HAL_ETH_MspInit+0x188>)
 800479e:	f7fd ff7b 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047a2:	2304      	movs	r3, #4
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a6:	2302      	movs	r3, #2
 80047a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047aa:	2303      	movs	r3, #3
 80047ac:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047b2:	4619      	mov	r1, r3
 80047b4:	481e      	ldr	r0, [pc, #120]	@ (8004830 <HAL_ETH_MspInit+0x188>)
 80047b6:	f7fd ff6f 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80047ba:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c0:	2302      	movs	r3, #2
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047c4:	2303      	movs	r3, #3
 80047c6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047cc:	4619      	mov	r1, r3
 80047ce:	4819      	ldr	r0, [pc, #100]	@ (8004834 <HAL_ETH_MspInit+0x18c>)
 80047d0:	f7fd ff62 	bl	8002698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80047d4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047da:	2300      	movs	r3, #0
 80047dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047e6:	4619      	mov	r1, r3
 80047e8:	4813      	ldr	r0, [pc, #76]	@ (8004838 <HAL_ETH_MspInit+0x190>)
 80047ea:	f7fd ff55 	bl	8002698 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 80047ee:	4b13      	ldr	r3, [pc, #76]	@ (800483c <HAL_ETH_MspInit+0x194>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80047fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80047fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	4a0d      	ldr	r2, [pc, #52]	@ (800483c <HAL_ETH_MspInit+0x194>)
 8004806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004808:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800480a:	2200      	movs	r2, #0
 800480c:	2105      	movs	r1, #5
 800480e:	203d      	movs	r0, #61	@ 0x3d
 8004810:	f7fc fc87 	bl	8001122 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004814:	203d      	movs	r0, #61	@ 0x3d
 8004816:	f7fc fca0 	bl	800115a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800481a:	bf00      	nop
 800481c:	3738      	adds	r7, #56	@ 0x38
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40028000 	.word	0x40028000
 8004828:	40021000 	.word	0x40021000
 800482c:	40011000 	.word	0x40011000
 8004830:	40010800 	.word	0x40010800
 8004834:	40010c00 	.word	0x40010c00
 8004838:	40011400 	.word	0x40011400
 800483c:	40010000 	.word	0x40010000

08004840 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <HAL_ETH_RxCpltCallback+0x1c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fd1b 	bl	8005288 <osSemaphoreRelease>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20005ed8 	.word	0x20005ed8

08004860 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004860:	b5b0      	push	{r4, r5, r7, lr}
 8004862:	b090      	sub	sp, #64	@ 0x40
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800486c:	4b65      	ldr	r3, [pc, #404]	@ (8004a04 <low_level_init+0x1a4>)
 800486e:	4a66      	ldr	r2, [pc, #408]	@ (8004a08 <low_level_init+0x1a8>)
 8004870:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004872:	4b64      	ldr	r3, [pc, #400]	@ (8004a04 <low_level_init+0x1a4>)
 8004874:	2201      	movs	r2, #1
 8004876:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004878:	4b62      	ldr	r3, [pc, #392]	@ (8004a04 <low_level_init+0x1a4>)
 800487a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800487e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004880:	4b60      	ldr	r3, [pc, #384]	@ (8004a04 <low_level_init+0x1a4>)
 8004882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004886:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8004888:	4b5e      	ldr	r3, [pc, #376]	@ (8004a04 <low_level_init+0x1a4>)
 800488a:	2201      	movs	r2, #1
 800488c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  MACAddr[1] = 0x80;
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  MACAddr[2] = 0xE1;
 800489a:	23e1      	movs	r3, #225	@ 0xe1
 800489c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  MACAddr[3] = 0x00;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  MACAddr[4] = 0x00;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[5] = 0x00;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80048b2:	4a54      	ldr	r2, [pc, #336]	@ (8004a04 <low_level_init+0x1a4>)
 80048b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80048b8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80048ba:	4b52      	ldr	r3, [pc, #328]	@ (8004a04 <low_level_init+0x1a4>)
 80048bc:	2201      	movs	r2, #1
 80048be:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80048c0:	4b50      	ldr	r3, [pc, #320]	@ (8004a04 <low_level_init+0x1a4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80048c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a04 <low_level_init+0x1a4>)
 80048c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048cc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048ce:	484d      	ldr	r0, [pc, #308]	@ (8004a04 <low_level_init+0x1a4>)
 80048d0:	f7fc fd94 	bl	80013fc <HAL_ETH_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (hal_eth_init_status == HAL_OK)
 80048da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80048e8:	f043 0304 	orr.w	r3, r3, #4
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80048f4:	2304      	movs	r3, #4
 80048f6:	4a45      	ldr	r2, [pc, #276]	@ (8004a0c <low_level_init+0x1ac>)
 80048f8:	4945      	ldr	r1, [pc, #276]	@ (8004a10 <low_level_init+0x1b0>)
 80048fa:	4842      	ldr	r0, [pc, #264]	@ (8004a04 <low_level_init+0x1a4>)
 80048fc:	f7fc feea 	bl	80016d4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004900:	2308      	movs	r3, #8
 8004902:	4a44      	ldr	r2, [pc, #272]	@ (8004a14 <low_level_init+0x1b4>)
 8004904:	4944      	ldr	r1, [pc, #272]	@ (8004a18 <low_level_init+0x1b8>)
 8004906:	483f      	ldr	r0, [pc, #252]	@ (8004a04 <low_level_init+0x1a4>)
 8004908:	f7fc ff4b 	bl	80017a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2206      	movs	r2, #6
 8004910:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004914:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <low_level_init+0x1a4>)
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	781a      	ldrb	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004920:	4b38      	ldr	r3, [pc, #224]	@ (8004a04 <low_level_init+0x1a4>)
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	785a      	ldrb	r2, [r3, #1]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800492c:	4b35      	ldr	r3, [pc, #212]	@ (8004a04 <low_level_init+0x1a4>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	789a      	ldrb	r2, [r3, #2]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004938:	4b32      	ldr	r3, [pc, #200]	@ (8004a04 <low_level_init+0x1a4>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	78da      	ldrb	r2, [r3, #3]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004944:	4b2f      	ldr	r3, [pc, #188]	@ (8004a04 <low_level_init+0x1a4>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	791a      	ldrb	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004950:	4b2c      	ldr	r3, [pc, #176]	@ (8004a04 <low_level_init+0x1a4>)
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	795a      	ldrb	r2, [r3, #5]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004962:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800496a:	f043 030a 	orr.w	r3, r3, #10
 800496e:	b2da      	uxtb	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004976:	2300      	movs	r3, #0
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800497a:	2300      	movs	r3, #0
 800497c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800497e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004982:	2101      	movs	r1, #1
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fbff 	bl	8005188 <osSemaphoreCreate>
 800498a:	4603      	mov	r3, r0
 800498c:	4a23      	ldr	r2, [pc, #140]	@ (8004a1c <low_level_init+0x1bc>)
 800498e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004990:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <low_level_init+0x1c0>)
 8004992:	f107 040c 	add.w	r4, r7, #12
 8004996:	461d      	mov	r5, r3
 8004998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800499a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800499c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80049a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80049a4:	f107 030c 	add.w	r3, r7, #12
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 faf0 	bl	8004f90 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80049b0:	4814      	ldr	r0, [pc, #80]	@ (8004a04 <low_level_init+0x1a4>)
 80049b2:	f7fd fa14 	bl	8001dde <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 80049b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80049ba:	461a      	mov	r2, r3
 80049bc:	2111      	movs	r1, #17
 80049be:	4811      	ldr	r0, [pc, #68]	@ (8004a04 <low_level_init+0x1a4>)
 80049c0:	f7fd f93f 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 80049c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c6:	f043 0303 	orr.w	r3, r3, #3
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 80049cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ce:	461a      	mov	r2, r3
 80049d0:	2111      	movs	r1, #17
 80049d2:	480c      	ldr	r0, [pc, #48]	@ (8004a04 <low_level_init+0x1a4>)
 80049d4:	f7fd f99d 	bl	8001d12 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 80049d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80049dc:	461a      	mov	r2, r3
 80049de:	2112      	movs	r1, #18
 80049e0:	4808      	ldr	r0, [pc, #32]	@ (8004a04 <low_level_init+0x1a4>)
 80049e2:	f7fd f92e 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 80049e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e8:	f043 0320 	orr.w	r3, r3, #32
 80049ec:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f0:	461a      	mov	r2, r3
 80049f2:	2112      	movs	r1, #18
 80049f4:	4803      	ldr	r0, [pc, #12]	@ (8004a04 <low_level_init+0x1a4>)
 80049f6:	f7fd f98c 	bl	8001d12 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80049fa:	bf00      	nop
 80049fc:	3740      	adds	r7, #64	@ 0x40
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bdb0      	pop	{r4, r5, r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20005edc 	.word	0x20005edc
 8004a08:	40028000 	.word	0x40028000
 8004a0c:	20004708 	.word	0x20004708
 8004a10:	20001728 	.word	0x20001728
 8004a14:	20001768 	.word	0x20001768
 8004a18:	200016a8 	.word	0x200016a8
 8004a1c:	20005ed8 	.word	0x20005ed8
 8004a20:	080180c8 	.word	0x080180c8

08004a24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b5c <low_level_output+0x138>)
 8004a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004a46:	4b45      	ldr	r3, [pc, #276]	@ (8004b5c <low_level_output+0x138>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	e05a      	b.n	8004b0c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da03      	bge.n	8004a66 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004a5e:	23f8      	movs	r3, #248	@ 0xf8
 8004a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8004a64:	e05c      	b.n	8004b20 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	895b      	ldrh	r3, [r3, #10]
 8004a6a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a70:	e02f      	b.n	8004ad2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	18d0      	adds	r0, r2, r3
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	18d1      	adds	r1, r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8004a86:	3304      	adds	r3, #4
 8004a88:	461a      	mov	r2, r3
 8004a8a:	f012 fdc8 	bl	801761e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	da03      	bge.n	8004aa4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a9c:	23f8      	movs	r3, #248	@ 0xf8
 8004a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8004aa2:	e03d      	b.n	8004b20 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8004ab4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8004ac0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8004acc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d8c8      	bhi.n	8004a72 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	18d0      	adds	r0, r2, r3
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4413      	add	r3, r2
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4619      	mov	r1, r3
 8004af2:	f012 fd94 	bl	801761e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1a1      	bne.n	8004a56 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004b12:	6979      	ldr	r1, [r7, #20]
 8004b14:	4811      	ldr	r0, [pc, #68]	@ (8004b5c <low_level_output+0x138>)
 8004b16:	f7fc feaf 	bl	8001878 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004b20:	4b0e      	ldr	r3, [pc, #56]	@ (8004b5c <low_level_output+0x138>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f003 0320 	and.w	r3, r3, #32
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004b32:	4b0a      	ldr	r3, [pc, #40]	@ (8004b5c <low_level_output+0x138>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004b40:	4b06      	ldr	r3, [pc, #24]	@ (8004b5c <low_level_output+0x138>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8004b4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3728      	adds	r7, #40	@ 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20005edc 	.word	0x20005edc

08004b60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08c      	sub	sp, #48	@ 0x30
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8004b70:	2300      	movs	r3, #0
 8004b72:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004b84:	484e      	ldr	r0, [pc, #312]	@ (8004cc0 <low_level_input+0x160>)
 8004b86:	f7fc ff5f 	bl	8001a48 <HAL_ETH_GetReceivedFrame_IT>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <low_level_input+0x34>

    return NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	e090      	b.n	8004cb6 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004b94:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc0 <low_level_input+0x160>)
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b9a:	4b49      	ldr	r3, [pc, #292]	@ (8004cc0 <low_level_input+0x160>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d006      	beq.n	8004bb4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	4619      	mov	r1, r3
 8004bac:	2004      	movs	r0, #4
 8004bae:	f007 f889 	bl	800bcc4 <pbuf_alloc>
 8004bb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d04b      	beq.n	8004c52 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bba:	4b41      	ldr	r3, [pc, #260]	@ (8004cc0 <low_level_input+0x160>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc8:	e040      	b.n	8004c4c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	895b      	ldrh	r3, [r3, #10]
 8004bce:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004bd4:	e021      	b.n	8004c1a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	18d0      	adds	r0, r2, r3
 8004bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	18d1      	adds	r1, r2, r3
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8004bea:	3304      	adds	r3, #4
 8004bec:	461a      	mov	r2, r3
 8004bee:	f012 fd16 	bl	801761e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	4413      	add	r3, r2
 8004c04:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8004c08:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8004c14:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d8d6      	bhi.n	8004bd6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	18d0      	adds	r0, r2, r3
 8004c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f012 fcf0 	bl	801761e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1bb      	bne.n	8004bca <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004c52:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc0 <low_level_input+0x160>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	e00b      	b.n	8004c76 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3301      	adds	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <low_level_input+0x160>)
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d3ee      	bcc.n	8004c5e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004c80:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <low_level_input+0x160>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004c86:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <low_level_input+0x160>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <low_level_input+0x160>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2380      	movs	r3, #128	@ 0x80
 8004ca4:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004ca6:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <low_level_input+0x160>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3730      	adds	r7, #48	@ 0x30
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20005edc 	.word	0x20005edc

08004cc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004cd0:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <ethernetif_input+0x58>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 fa87 	bl	80051ec <osSemaphoreWait>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f5      	bne.n	8004cd0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004ce4:	480e      	ldr	r0, [pc, #56]	@ (8004d20 <ethernetif_input+0x5c>)
 8004ce6:	f010 f9ef 	bl	80150c8 <sys_mutex_lock>
        p = low_level_input( netif );
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f7ff ff38 	bl	8004b60 <low_level_input>
 8004cf0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	68f9      	ldr	r1, [r7, #12]
 8004cfe:	68b8      	ldr	r0, [r7, #8]
 8004d00:	4798      	blx	r3
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004d08:	68b8      	ldr	r0, [r7, #8]
 8004d0a:	f007 fb53 	bl	800c3b4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004d0e:	4804      	ldr	r0, [pc, #16]	@ (8004d20 <ethernetif_input+0x5c>)
 8004d10:	f010 f9e9 	bl	80150e6 <sys_mutex_unlock>
      } while(p!=NULL);
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e4      	bne.n	8004ce4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004d1a:	e7d9      	b.n	8004cd0 <ethernetif_input+0xc>
 8004d1c:	20005ed8 	.word	0x20005ed8
 8004d20:	20006100 	.word	0x20006100

08004d24 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <ethernetif_init+0x1c>
 8004d32:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <ethernetif_init+0x48>)
 8004d34:	f240 223f 	movw	r2, #575	@ 0x23f
 8004d38:	490d      	ldr	r1, [pc, #52]	@ (8004d70 <ethernetif_init+0x4c>)
 8004d3a:	480e      	ldr	r0, [pc, #56]	@ (8004d74 <ethernetif_init+0x50>)
 8004d3c:	f012 fa2a 	bl	8017194 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2273      	movs	r2, #115	@ 0x73
 8004d44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2274      	movs	r2, #116	@ 0x74
 8004d4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <ethernetif_init+0x54>)
 8004d54:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a08      	ldr	r2, [pc, #32]	@ (8004d7c <ethernetif_init+0x58>)
 8004d5a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fd7f 	bl	8004860 <low_level_init>

  return ERR_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	080180e4 	.word	0x080180e4
 8004d70:	08018100 	.word	0x08018100
 8004d74:	08018110 	.word	0x08018110
 8004d78:	08012f25 	.word	0x08012f25
 8004d7c:	08004a25 	.word	0x08004a25

08004d80 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004d84:	f7fc f8ea 	bl	8000f5c <HAL_GetTick>
 8004d88:	4603      	mov	r3, r0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004da0:	f107 0308 	add.w	r3, r7, #8
 8004da4:	461a      	mov	r2, r3
 8004da6:	2101      	movs	r1, #1
 8004da8:	4816      	ldr	r0, [pc, #88]	@ (8004e04 <ethernetif_set_link+0x74>)
 8004daa:	f7fc ff4a 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d108      	bne.n	8004dd8 <ethernetif_set_link+0x48>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f006 febb 	bl	800bb4c <netif_set_link_up>
 8004dd6:	e011      	b.n	8004dfc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d007      	beq.n	8004dfc <ethernetif_set_link+0x6c>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d104      	bne.n	8004dfc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f006 fed3 	bl	800bba2 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004dfc:	20c8      	movs	r0, #200	@ 0xc8
 8004dfe:	f000 f913 	bl	8005028 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004e02:	e7cd      	b.n	8004da0 <ethernetif_set_link+0x10>
 8004e04:	20005edc 	.word	0x20005edc

08004e08 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d05d      	beq.n	8004ee6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004e2a:	4b34      	ldr	r3, [pc, #208]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d03f      	beq.n	8004eb2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004e32:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e36:	2100      	movs	r1, #0
 8004e38:	4830      	ldr	r0, [pc, #192]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e3a:	f7fc ff6a 	bl	8001d12 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fc f88d 	bl	8000f5c <HAL_GetTick>
 8004e42:	4603      	mov	r3, r0
 8004e44:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004e46:	f107 0308 	add.w	r3, r7, #8
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	482b      	ldr	r0, [pc, #172]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e50:	f7fc fef7 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004e54:	f7fc f882 	bl	8000f5c <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e62:	d828      	bhi.n	8004eb6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0eb      	beq.n	8004e46 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004e6e:	f107 0308 	add.w	r3, r7, #8
 8004e72:	461a      	mov	r2, r3
 8004e74:	2110      	movs	r1, #16
 8004e76:	4821      	ldr	r0, [pc, #132]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e78:	f7fc fee3 	bl	8001c42 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d004      	beq.n	8004e90 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004e86:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e8c:	60da      	str	r2, [r3, #12]
 8004e8e:	e002      	b.n	8004e96 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004e90:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004ea0:	4b16      	ldr	r3, [pc, #88]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]
 8004ea6:	e016      	b.n	8004ed6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004ea8:	4b14      	ldr	r3, [pc, #80]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004eaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	e011      	b.n	8004ed6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004eb2:	bf00      	nop
 8004eb4:	e000      	b.n	8004eb8 <ethernetif_update_config+0xb0>
          goto error;
 8004eb6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004eb8:	4b10      	ldr	r3, [pc, #64]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2100      	movs	r1, #0
 8004ed0:	480a      	ldr	r0, [pc, #40]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004ed2:	f7fc ff1e 	bl	8001d12 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	4808      	ldr	r0, [pc, #32]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004eda:	f7fc ffdf 	bl	8001e9c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004ede:	4807      	ldr	r0, [pc, #28]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004ee0:	f7fc ff7d 	bl	8001dde <HAL_ETH_Start>
 8004ee4:	e002      	b.n	8004eec <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004ee6:	4805      	ldr	r0, [pc, #20]	@ (8004efc <ethernetif_update_config+0xf4>)
 8004ee8:	f7fc ffa8 	bl	8001e3c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f807 	bl	8004f00 <ethernetif_notify_conn_changed>
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20005edc 	.word	0x20005edc

08004f00 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr

08004f12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	4603      	mov	r3, r0
 8004f1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004f20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f24:	2b84      	cmp	r3, #132	@ 0x84
 8004f26:	d005      	beq.n	8004f34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004f28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3303      	adds	r3, #3
 8004f32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f46:	f3ef 8305 	mrs	r3, IPSR
 8004f4a:	607b      	str	r3, [r7, #4]
  return(result);
 8004f4c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004f66:	f001 fd55 	bl	8006a14 <vTaskStartScheduler>
  
  return osOK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004f74:	f7ff ffe4 	bl	8004f40 <inHandlerMode>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004f7e:	f001 fe6d 	bl	8006c5c <xTaskGetTickCountFromISR>
 8004f82:	4603      	mov	r3, r0
 8004f84:	e002      	b.n	8004f8c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004f86:	f001 fe5b 	bl	8006c40 <xTaskGetTickCount>
 8004f8a:	4603      	mov	r3, r0
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f92:	b089      	sub	sp, #36	@ 0x24
 8004f94:	af04      	add	r7, sp, #16
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d020      	beq.n	8004fe4 <osThreadCreate+0x54>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01c      	beq.n	8004fe4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685c      	ldr	r4, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691e      	ldr	r6, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ffa8 	bl	8004f12 <makeFreeRtosPriority>
 8004fc2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fcc:	9202      	str	r2, [sp, #8]
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	9100      	str	r1, [sp, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	4620      	mov	r0, r4
 8004fda:	f001 fb37 	bl	800664c <xTaskCreateStatic>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e01c      	b.n	800501e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685c      	ldr	r4, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff ff8a 	bl	8004f12 <makeFreeRtosPriority>
 8004ffe:	4602      	mov	r2, r0
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	9200      	str	r2, [sp, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4632      	mov	r2, r6
 800500c:	4629      	mov	r1, r5
 800500e:	4620      	mov	r0, r4
 8005010:	f001 fb7b 	bl	800670a <xTaskCreate>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800501e:	68fb      	ldr	r3, [r7, #12]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005028 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <osDelay+0x16>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	e000      	b.n	8005040 <osDelay+0x18>
 800503e:	2301      	movs	r3, #1
 8005040:	4618      	mov	r0, r3
 8005042:	f001 fcb1 	bl	80069a8 <vTaskDelay>
  
  return osOK;
 8005046:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4619      	mov	r1, r3
 8005066:	2001      	movs	r0, #1
 8005068:	f000 fc82 	bl	8005970 <xQueueCreateMutexStatic>
 800506c:	4603      	mov	r3, r0
 800506e:	e003      	b.n	8005078 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005070:	2001      	movs	r0, #1
 8005072:	f000 fc65 	bl	8005940 <xQueueCreateMutex>
 8005076:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <osMutexWait+0x18>
    return osErrorParameter;
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	e03a      	b.n	800510e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d103      	bne.n	80050ac <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	60fb      	str	r3, [r7, #12]
 80050aa:	e009      	b.n	80050c0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <osMutexWait+0x40>
      ticks = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80050c0:	f7ff ff3e 	bl	8004f40 <inHandlerMode>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d017      	beq.n	80050fa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	461a      	mov	r2, r3
 80050d0:	2100      	movs	r1, #0
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 f888 	bl	80061e8 <xQueueReceiveFromISR>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d001      	beq.n	80050e2 <osMutexWait+0x62>
      return osErrorOS;
 80050de:	23ff      	movs	r3, #255	@ 0xff
 80050e0:	e015      	b.n	800510e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d011      	beq.n	800510c <osMutexWait+0x8c>
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <osMutexWait+0x98>)
 80050ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	e008      	b.n	800510c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 ff63 	bl	8005fc8 <xQueueSemaphoreTake>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <osMutexWait+0x8c>
    return osErrorOS;
 8005108:	23ff      	movs	r3, #255	@ 0xff
 800510a:	e000      	b.n	800510e <osMutexWait+0x8e>
  }
  
  return osOK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005128:	2300      	movs	r3, #0
 800512a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800512c:	f7ff ff08 	bl	8004f40 <inHandlerMode>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fdd0 	bl	8005ce2 <xQueueGiveFromISR>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <osMutexRelease+0x30>
      return osErrorOS;
 8005148:	23ff      	movs	r3, #255	@ 0xff
 800514a:	e017      	b.n	800517c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d013      	beq.n	800517a <osMutexRelease+0x5e>
 8005152:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <osMutexRelease+0x68>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	e00a      	b.n	800517a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005164:	2300      	movs	r3, #0
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 fc1c 	bl	80059a8 <xQueueGenericSend>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005176:	23ff      	movs	r3, #255	@ 0xff
 8005178:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800517a:	68fb      	ldr	r3, [r7, #12]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00f      	beq.n	80051ba <osSemaphoreCreate+0x32>
    if (count == 1) {
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d10a      	bne.n	80051b6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2203      	movs	r2, #3
 80051a6:	9200      	str	r2, [sp, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	2100      	movs	r1, #0
 80051ac:	2001      	movs	r0, #1
 80051ae:	f000 fad3 	bl	8005758 <xQueueGenericCreateStatic>
 80051b2:	4603      	mov	r3, r0
 80051b4:	e016      	b.n	80051e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	e014      	b.n	80051e4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d110      	bne.n	80051e2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80051c0:	2203      	movs	r2, #3
 80051c2:	2100      	movs	r1, #0
 80051c4:	2001      	movs	r0, #1
 80051c6:	f000 fb43 	bl	8005850 <xQueueGenericCreate>
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d005      	beq.n	80051de <osSemaphoreCreate+0x56>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2200      	movs	r2, #0
 80051d6:	2100      	movs	r1, #0
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fbe5 	bl	80059a8 <xQueueGenericSend>
      return sema;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	e000      	b.n	80051e4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80051e2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	e03a      	b.n	800527a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d103      	bne.n	8005218 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005210:	f04f 33ff 	mov.w	r3, #4294967295
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e009      	b.n	800522c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <osSemaphoreWait+0x40>
      ticks = 1;
 8005228:	2301      	movs	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800522c:	f7ff fe88 	bl	8004f40 <inHandlerMode>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d017      	beq.n	8005266 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005236:	f107 0308 	add.w	r3, r7, #8
 800523a:	461a      	mov	r2, r3
 800523c:	2100      	movs	r1, #0
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 ffd2 	bl	80061e8 <xQueueReceiveFromISR>
 8005244:	4603      	mov	r3, r0
 8005246:	2b01      	cmp	r3, #1
 8005248:	d001      	beq.n	800524e <osSemaphoreWait+0x62>
      return osErrorOS;
 800524a:	23ff      	movs	r3, #255	@ 0xff
 800524c:	e015      	b.n	800527a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <osSemaphoreWait+0x8c>
 8005254:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <osSemaphoreWait+0x98>)
 8005256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	e008      	b.n	8005278 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fead 	bl	8005fc8 <xQueueSemaphoreTake>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005274:	23ff      	movs	r3, #255	@ 0xff
 8005276:	e000      	b.n	800527a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005298:	f7ff fe52 	bl	8004f40 <inHandlerMode>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fd1a 	bl	8005ce2 <xQueueGiveFromISR>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80052b4:	23ff      	movs	r3, #255	@ 0xff
 80052b6:	e017      	b.n	80052e8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d013      	beq.n	80052e6 <osSemaphoreRelease+0x5e>
 80052be:	4b0c      	ldr	r3, [pc, #48]	@ (80052f0 <osSemaphoreRelease+0x68>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	e00a      	b.n	80052e6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80052d0:	2300      	movs	r3, #0
 80052d2:	2200      	movs	r2, #0
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb66 	bl	80059a8 <xQueueGenericSend>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d001      	beq.n	80052e6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80052e2:	23ff      	movs	r3, #255	@ 0xff
 80052e4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80052e6:	68fb      	ldr	r3, [r7, #12]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80052fc:	f7ff fe20 	bl	8004f40 <inHandlerMode>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005306:	2382      	movs	r3, #130	@ 0x82
 8005308:	e003      	b.n	8005312 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f001 f829 	bl	8006362 <vQueueDelete>

  return osOK; 
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800531a:	b590      	push	{r4, r7, lr}
 800531c:	b085      	sub	sp, #20
 800531e:	af02      	add	r7, sp, #8
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d011      	beq.n	8005350 <osMessageCreate+0x36>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6859      	ldr	r1, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	2400      	movs	r4, #0
 8005346:	9400      	str	r4, [sp, #0]
 8005348:	f000 fa06 	bl	8005758 <xQueueGenericCreateStatic>
 800534c:	4603      	mov	r3, r0
 800534e:	e008      	b.n	8005362 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	4619      	mov	r1, r3
 800535c:	f000 fa78 	bl	8005850 <xQueueGenericCreate>
 8005360:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bd90      	pop	{r4, r7, pc}
	...

0800536c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005378:	2300      	movs	r3, #0
 800537a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <osMessagePut+0x1e>
    ticks = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800538a:	f7ff fdd9 	bl	8004f40 <inHandlerMode>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d018      	beq.n	80053c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005394:	f107 0210 	add.w	r2, r7, #16
 8005398:	f107 0108 	add.w	r1, r7, #8
 800539c:	2300      	movs	r3, #0
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fc04 	bl	8005bac <xQueueGenericSendFromISR>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d001      	beq.n	80053ae <osMessagePut+0x42>
      return osErrorOS;
 80053aa:	23ff      	movs	r3, #255	@ 0xff
 80053ac:	e018      	b.n	80053e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d014      	beq.n	80053de <osMessagePut+0x72>
 80053b4:	4b0c      	ldr	r3, [pc, #48]	@ (80053e8 <osMessagePut+0x7c>)
 80053b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	e00b      	b.n	80053de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80053c6:	f107 0108 	add.w	r1, r7, #8
 80053ca:	2300      	movs	r3, #0
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f000 faea 	bl	80059a8 <xQueueGenericSend>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d001      	beq.n	80053de <osMessagePut+0x72>
      return osErrorOS;
 80053da:	23ff      	movs	r3, #255	@ 0xff
 80053dc:	e000      	b.n	80053e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b08b      	sub	sp, #44	@ 0x2c
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10a      	bne.n	800541c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	617b      	str	r3, [r7, #20]
    return event;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	461c      	mov	r4, r3
 800540e:	f107 0314 	add.w	r3, r7, #20
 8005412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800541a:	e054      	b.n	80054c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800541c:	2300      	movs	r3, #0
 800541e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
 8005432:	e009      	b.n	8005448 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d006      	beq.n	8005448 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <osMessageGet+0x5c>
      ticks = 1;
 8005444:	2301      	movs	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005448:	f7ff fd7a 	bl	8004f40 <inHandlerMode>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01c      	beq.n	800548c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005452:	f107 0220 	add.w	r2, r7, #32
 8005456:	f107 0314 	add.w	r3, r7, #20
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	68b8      	ldr	r0, [r7, #8]
 8005460:	f000 fec2 	bl	80061e8 <xQueueReceiveFromISR>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d102      	bne.n	8005470 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800546a:	2310      	movs	r3, #16
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e001      	b.n	8005474 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005474:	6a3b      	ldr	r3, [r7, #32]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01d      	beq.n	80054b6 <osMessageGet+0xca>
 800547a:	4b15      	ldr	r3, [pc, #84]	@ (80054d0 <osMessageGet+0xe4>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	e014      	b.n	80054b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800548c:	f107 0314 	add.w	r3, r7, #20
 8005490:	3304      	adds	r3, #4
 8005492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005494:	4619      	mov	r1, r3
 8005496:	68b8      	ldr	r0, [r7, #8]
 8005498:	f000 fcb4 	bl	8005e04 <xQueueReceive>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d102      	bne.n	80054a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80054a2:	2310      	movs	r3, #16
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e006      	b.n	80054b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <osMessageGet+0xc6>
 80054ae:	2300      	movs	r3, #0
 80054b0:	e000      	b.n	80054b4 <osMessageGet+0xc8>
 80054b2:	2340      	movs	r3, #64	@ 0x40
 80054b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	461c      	mov	r4, r3
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	372c      	adds	r7, #44	@ 0x2c
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd90      	pop	{r4, r7, pc}
 80054ce:	bf00      	nop
 80054d0:	e000ed04 	.word	0xe000ed04

080054d4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80054dc:	f7ff fd30 	bl	8004f40 <inHandlerMode>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 ff1f 	bl	800632a <uxQueueMessagesWaitingFromISR>
 80054ec:	4603      	mov	r3, r0
 80054ee:	e003      	b.n	80054f8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fefb 	bl	80062ec <uxQueueMessagesWaiting>
 80054f6:	4603      	mov	r3, r0
  }
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3708      	adds	r7, #8
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005508:	f7ff fd1a 	bl	8004f40 <inHandlerMode>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <osMessageDelete+0x16>
    return osErrorISR;
 8005512:	2382      	movs	r3, #130	@ 0x82
 8005514:	e003      	b.n	800551e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 ff23 	bl	8006362 <vQueueDelete>

  return osOK; 
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f103 0208 	add.w	r2, r3, #8
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f103 0208 	add.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 0208 	add.w	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr

080055c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055c2:	b480      	push	{r7}
 80055c4:	b085      	sub	sp, #20
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d103      	bne.n	80055e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	e00c      	b.n	80055fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3308      	adds	r3, #8
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	e002      	b.n	80055f0 <vListInsert+0x2e>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d2f6      	bcs.n	80055ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	601a      	str	r2, [r3, #0]
}
 8005628:	bf00      	nop
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6892      	ldr	r2, [r2, #8]
 8005648:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6852      	ldr	r2, [r2, #4]
 8005652:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	429a      	cmp	r2, r3
 800565c:	d103      	bne.n	8005666 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	1e5a      	subs	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10b      	bne.n	80056b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	e7fd      	b.n	80056ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80056b0:	f002 f954 	bl	800795c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e0:	3b01      	subs	r3, #1
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	441a      	add	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	22ff      	movs	r2, #255	@ 0xff
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	22ff      	movs	r2, #255	@ 0xff
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d114      	bne.n	8005730 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01a      	beq.n	8005744 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3310      	adds	r3, #16
 8005712:	4618      	mov	r0, r3
 8005714:	f001 fc20 	bl	8006f58 <xTaskRemoveFromEventList>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800571e:	4b0d      	ldr	r3, [pc, #52]	@ (8005754 <xQueueGenericReset+0xd0>)
 8005720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	e009      	b.n	8005744 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3310      	adds	r3, #16
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fef6 	bl	8005526 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3324      	adds	r3, #36	@ 0x24
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fef1 	bl	8005526 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005744:	f002 f93a 	bl	80079bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005748:	2301      	movs	r3, #1
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	e000ed04 	.word	0xe000ed04

08005758 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08e      	sub	sp, #56	@ 0x38
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800577e:	bf00      	nop
 8005780:	bf00      	nop
 8005782:	e7fd      	b.n	8005780 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10b      	bne.n	80057a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	e7fd      	b.n	800579e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <xQueueGenericCreateStatic+0x56>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <xQueueGenericCreateStatic+0x5a>
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <xQueueGenericCreateStatic+0x5c>
 80057b2:	2300      	movs	r3, #0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	623b      	str	r3, [r7, #32]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d102      	bne.n	80057dc <xQueueGenericCreateStatic+0x84>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <xQueueGenericCreateStatic+0x88>
 80057dc:	2301      	movs	r3, #1
 80057de:	e000      	b.n	80057e2 <xQueueGenericCreateStatic+0x8a>
 80057e0:	2300      	movs	r3, #0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	61fb      	str	r3, [r7, #28]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057fe:	2348      	movs	r3, #72	@ 0x48
 8005800:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b48      	cmp	r3, #72	@ 0x48
 8005806:	d00b      	beq.n	8005820 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61bb      	str	r3, [r7, #24]
}
 800581a:	bf00      	nop
 800581c:	bf00      	nop
 800581e:	e7fd      	b.n	800581c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00d      	beq.n	8005846 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800582a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005832:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f844 	bl	80058ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005848:	4618      	mov	r0, r3
 800584a:	3730      	adds	r7, #48	@ 0x30
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericCreate+0x2c>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e004      	b.n	8005892 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3348      	adds	r3, #72	@ 0x48
 8005896:	4618      	mov	r0, r3
 8005898:	f002 f962 	bl	8007b60 <pvPortMalloc>
 800589c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	3348      	adds	r3, #72	@ 0x48
 80058a8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f805 	bl	80058ce <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058c4:	69bb      	ldr	r3, [r7, #24]
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058fc:	2101      	movs	r1, #1
 80058fe:	69b8      	ldr	r0, [r7, #24]
 8005900:	f7ff fec0 	bl	8005684 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800592c:	2300      	movs	r3, #0
 800592e:	2200      	movs	r2, #0
 8005930:	2100      	movs	r1, #0
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f838 	bl	80059a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005938:	bf00      	nop
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800594a:	2301      	movs	r3, #1
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	461a      	mov	r2, r3
 8005956:	6939      	ldr	r1, [r7, #16]
 8005958:	6978      	ldr	r0, [r7, #20]
 800595a:	f7ff ff79 	bl	8005850 <xQueueGenericCreate>
 800595e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff ffd3 	bl	800590c <prvInitialiseMutex>

		return pxNewQueue;
 8005966:	68fb      	ldr	r3, [r7, #12]
	}
 8005968:	4618      	mov	r0, r3
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af02      	add	r7, sp, #8
 8005976:	4603      	mov	r3, r0
 8005978:	6039      	str	r1, [r7, #0]
 800597a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800597c:	2301      	movs	r3, #1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2200      	movs	r2, #0
 800598c:	6939      	ldr	r1, [r7, #16]
 800598e:	6978      	ldr	r0, [r7, #20]
 8005990:	f7ff fee2 	bl	8005758 <xQueueGenericCreateStatic>
 8005994:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff ffb8 	bl	800590c <prvInitialiseMutex>

		return pxNewQueue;
 800599c:	68fb      	ldr	r3, [r7, #12]
	}
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	@ 0x38
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
 80059b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059b6:	2300      	movs	r3, #0
 80059b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10b      	bne.n	80059dc <xQueueGenericSend+0x34>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059d6:	bf00      	nop
 80059d8:	bf00      	nop
 80059da:	e7fd      	b.n	80059d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x42>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <xQueueGenericSend+0x46>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xQueueGenericSend+0x48>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10b      	bne.n	8005a0c <xQueueGenericSend+0x64>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	d103      	bne.n	8005a1a <xQueueGenericSend+0x72>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <xQueueGenericSend+0x76>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueGenericSend+0x78>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <xQueueGenericSend+0x94>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a3c:	f001 fc56 	bl	80072ec <xTaskGetSchedulerState>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <xQueueGenericSend+0xa4>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <xQueueGenericSend+0xa8>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <xQueueGenericSend+0xaa>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <xQueueGenericSend+0xc6>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	61fb      	str	r3, [r7, #28]
}
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
 8005a6c:	e7fd      	b.n	8005a6a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a6e:	f001 ff75 	bl	800795c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d302      	bcc.n	8005a84 <xQueueGenericSend+0xdc>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d129      	bne.n	8005ad8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a8a:	f000 fca5 	bl	80063d8 <prvCopyDataToQueue>
 8005a8e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d010      	beq.n	8005aba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	3324      	adds	r3, #36	@ 0x24
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fa5b 	bl	8006f58 <xTaskRemoveFromEventList>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ba8 <xQueueGenericSend+0x200>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	e00a      	b.n	8005ad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ac0:	4b39      	ldr	r3, [pc, #228]	@ (8005ba8 <xQueueGenericSend+0x200>)
 8005ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ad0:	f001 ff74 	bl	80079bc <vPortExitCritical>
				return pdPASS;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e063      	b.n	8005ba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ade:	f001 ff6d 	bl	80079bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e05c      	b.n	8005ba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aec:	f107 0314 	add.w	r3, r7, #20
 8005af0:	4618      	mov	r0, r3
 8005af2:	f001 fa95 	bl	8007020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afa:	f001 ff5f 	bl	80079bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005afe:	f000 fff3 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b02:	f001 ff2b 	bl	800795c <vPortEnterCritical>
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b0c:	b25b      	sxtb	r3, r3
 8005b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b12:	d103      	bne.n	8005b1c <xQueueGenericSend+0x174>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSend+0x18a>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b32:	f001 ff43 	bl	80079bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b36:	1d3a      	adds	r2, r7, #4
 8005b38:	f107 0314 	add.w	r3, r7, #20
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f001 fa84 	bl	800704c <xTaskCheckForTimeOut>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d124      	bne.n	8005b94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4c:	f000 fd3c 	bl	80065c8 <prvIsQueueFull>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d018      	beq.n	8005b88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	3310      	adds	r3, #16
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f9d4 	bl	8006f0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b66:	f000 fcc7 	bl	80064f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b6a:	f000 ffcb 	bl	8006b04 <xTaskResumeAll>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f af7c 	bne.w	8005a6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba8 <xQueueGenericSend+0x200>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	e772      	b.n	8005a6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b8a:	f000 fcb5 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b8e:	f000 ffb9 	bl	8006b04 <xTaskResumeAll>
 8005b92:	e76c      	b.n	8005a6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b96:	f000 fcaf 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9a:	f000 ffb3 	bl	8006b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b9e:	2300      	movs	r3, #0
		}
	}
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3738      	adds	r7, #56	@ 0x38
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08e      	sub	sp, #56	@ 0x38
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bd6:	bf00      	nop
 8005bd8:	bf00      	nop
 8005bda:	e7fd      	b.n	8005bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <xQueueGenericSendFromISR+0x3e>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <xQueueGenericSendFromISR+0x42>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericSendFromISR+0x44>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10b      	bne.n	8005c0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	623b      	str	r3, [r7, #32]
}
 8005c06:	bf00      	nop
 8005c08:	bf00      	nop
 8005c0a:	e7fd      	b.n	8005c08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d103      	bne.n	8005c1a <xQueueGenericSendFromISR+0x6e>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <xQueueGenericSendFromISR+0x72>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <xQueueGenericSendFromISR+0x74>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	61fb      	str	r3, [r7, #28]
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c3c:	f001 ff50 	bl	8007ae0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c40:	f3ef 8211 	mrs	r2, BASEPRI
 8005c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	61ba      	str	r2, [r7, #24]
 8005c56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <xQueueGenericSendFromISR+0xc2>
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d12c      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c7e:	f000 fbab 	bl	80063d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c82:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8a:	d112      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c96:	3324      	adds	r3, #36	@ 0x24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 f95d 	bl	8006f58 <xTaskRemoveFromEventList>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e007      	b.n	8005cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	b25a      	sxtb	r2, r3
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005cc6:	e001      	b.n	8005ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3738      	adds	r7, #56	@ 0x38
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08e      	sub	sp, #56	@ 0x38
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfa:	f383 8811 	msr	BASEPRI, r3
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	623b      	str	r3, [r7, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61fb      	str	r3, [r7, #28]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <xQueueGiveFromISR+0x5c>
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueGiveFromISR+0x60>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueGiveFromISR+0x62>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61bb      	str	r3, [r7, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d60:	f001 febe 	bl	8007ae0 <vPortValidateInterruptPriority>
	__asm volatile
 8005d64:	f3ef 8211 	mrs	r2, BASEPRI
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	617a      	str	r2, [r7, #20]
 8005d7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005d7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d22b      	bcs.n	8005de8 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005da2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d112      	bne.n	8005dd2 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	3324      	adds	r3, #36	@ 0x24
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 f8cd 	bl	8006f58 <xTaskRemoveFromEventList>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e007      	b.n	8005de2 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	b25a      	sxtb	r2, r3
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005de2:	2301      	movs	r3, #1
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de6:	e001      	b.n	8005dec <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f383 8811 	msr	BASEPRI, r3
}
 8005df6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3738      	adds	r7, #56	@ 0x38
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	@ 0x30
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <xQueueReceive+0x32>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	623b      	str	r3, [r7, #32]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d103      	bne.n	8005e44 <xQueueReceive+0x40>
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <xQueueReceive+0x44>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e000      	b.n	8005e4a <xQueueReceive+0x46>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <xQueueReceive+0x62>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	61fb      	str	r3, [r7, #28]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e66:	f001 fa41 	bl	80072ec <xTaskGetSchedulerState>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d102      	bne.n	8005e76 <xQueueReceive+0x72>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <xQueueReceive+0x76>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueReceive+0x78>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <xQueueReceive+0x94>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	61bb      	str	r3, [r7, #24]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e98:	f001 fd60 	bl	800795c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01f      	beq.n	8005ee8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eac:	f000 fafe 	bl	80064ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	1e5a      	subs	r2, r3, #1
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	3310      	adds	r3, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f001 f847 	bl	8006f58 <xTaskRemoveFromEventList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8005fc4 <xQueueReceive+0x1c0>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee0:	f001 fd6c 	bl	80079bc <vPortExitCritical>
				return pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e069      	b.n	8005fbc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d103      	bne.n	8005ef6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eee:	f001 fd65 	bl	80079bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e062      	b.n	8005fbc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	f001 f88d 	bl	8007020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f0a:	f001 fd57 	bl	80079bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f0e:	f000 fdeb 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f12:	f001 fd23 	bl	800795c <vPortEnterCritical>
 8005f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f1c:	b25b      	sxtb	r3, r3
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d103      	bne.n	8005f2c <xQueueReceive+0x128>
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f32:	b25b      	sxtb	r3, r3
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d103      	bne.n	8005f42 <xQueueReceive+0x13e>
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f42:	f001 fd3b 	bl	80079bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f46:	1d3a      	adds	r2, r7, #4
 8005f48:	f107 0310 	add.w	r3, r7, #16
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f87c 	bl	800704c <xTaskCheckForTimeOut>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d123      	bne.n	8005fa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5c:	f000 fb1e 	bl	800659c <prvIsQueueEmpty>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d017      	beq.n	8005f96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	3324      	adds	r3, #36	@ 0x24
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 ffcc 	bl	8006f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f76:	f000 fabf 	bl	80064f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f7a:	f000 fdc3 	bl	8006b04 <xTaskResumeAll>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d189      	bne.n	8005e98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005f84:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc4 <xQueueReceive+0x1c0>)
 8005f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	e780      	b.n	8005e98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f98:	f000 faae 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f9c:	f000 fdb2 	bl	8006b04 <xTaskResumeAll>
 8005fa0:	e77a      	b.n	8005e98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fa4:	f000 faa8 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fa8:	f000 fdac 	bl	8006b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fae:	f000 faf5 	bl	800659c <prvIsQueueEmpty>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f43f af6f 	beq.w	8005e98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3730      	adds	r7, #48	@ 0x30
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08e      	sub	sp, #56	@ 0x38
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	623b      	str	r3, [r7, #32]
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	61fb      	str	r3, [r7, #28]
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	e7fd      	b.n	8006018 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800601c:	f001 f966 	bl	80072ec <xTaskGetSchedulerState>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d102      	bne.n	800602c <xQueueSemaphoreTake+0x64>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <xQueueSemaphoreTake+0x68>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <xQueueSemaphoreTake+0x6a>
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	61bb      	str	r3, [r7, #24]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800604e:	f001 fc85 	bl	800795c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006056:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d024      	beq.n	80060a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	1e5a      	subs	r2, r3, #1
 8006062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d104      	bne.n	8006078 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800606e:	f001 fb0b 	bl	8007688 <pvTaskIncrementMutexHeldCount>
 8006072:	4602      	mov	r2, r0
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006082:	3310      	adds	r3, #16
 8006084:	4618      	mov	r0, r3
 8006086:	f000 ff67 	bl	8006f58 <xTaskRemoveFromEventList>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d007      	beq.n	80060a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006090:	4b54      	ldr	r3, [pc, #336]	@ (80061e4 <xQueueSemaphoreTake+0x21c>)
 8006092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060a0:	f001 fc8c 	bl	80079bc <vPortExitCritical>
				return pdPASS;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e098      	b.n	80061da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d112      	bne.n	80060d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	617b      	str	r3, [r7, #20]
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80060cc:	f001 fc76 	bl	80079bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e082      	b.n	80061da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ff9e 	bl	8007020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060e8:	f001 fc68 	bl	80079bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060ec:	f000 fcfc 	bl	8006ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f0:	f001 fc34 	bl	800795c <vPortEnterCritical>
 80060f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006100:	d103      	bne.n	800610a <xQueueSemaphoreTake+0x142>
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006110:	b25b      	sxtb	r3, r3
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d103      	bne.n	8006120 <xQueueSemaphoreTake+0x158>
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	2200      	movs	r2, #0
 800611c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006120:	f001 fc4c 	bl	80079bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006124:	463a      	mov	r2, r7
 8006126:	f107 030c 	add.w	r3, r7, #12
 800612a:	4611      	mov	r1, r2
 800612c:	4618      	mov	r0, r3
 800612e:	f000 ff8d 	bl	800704c <xTaskCheckForTimeOut>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d132      	bne.n	800619e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006138:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800613a:	f000 fa2f 	bl	800659c <prvIsQueueEmpty>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d026      	beq.n	8006192 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800614c:	f001 fc06 	bl	800795c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	f001 f8e7 	bl	8007328 <xTaskPriorityInherit>
 800615a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800615c:	f001 fc2e 	bl	80079bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	3324      	adds	r3, #36	@ 0x24
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	4611      	mov	r1, r2
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fecf 	bl	8006f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800616e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006170:	f000 f9c2 	bl	80064f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006174:	f000 fcc6 	bl	8006b04 <xTaskResumeAll>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	f47f af67 	bne.w	800604e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006180:	4b18      	ldr	r3, [pc, #96]	@ (80061e4 <xQueueSemaphoreTake+0x21c>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	e75d      	b.n	800604e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006192:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006194:	f000 f9b0 	bl	80064f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006198:	f000 fcb4 	bl	8006b04 <xTaskResumeAll>
 800619c:	e757      	b.n	800604e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800619e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061a0:	f000 f9aa 	bl	80064f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061a4:	f000 fcae 	bl	8006b04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061aa:	f000 f9f7 	bl	800659c <prvIsQueueEmpty>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f43f af4c 	beq.w	800604e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80061bc:	f001 fbce 	bl	800795c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80061c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80061c2:	f000 f8f2 	bl	80063aa <prvGetDisinheritPriorityAfterTimeout>
 80061c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80061c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 f9b8 	bl	8007544 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80061d4:	f001 fbf2 	bl	80079bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80061d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3738      	adds	r7, #56	@ 0x38
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08e      	sub	sp, #56	@ 0x38
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	623b      	str	r3, [r7, #32]
}
 8006210:	bf00      	nop
 8006212:	bf00      	nop
 8006214:	e7fd      	b.n	8006212 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <xQueueReceiveFromISR+0x3c>
 800621c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <xQueueReceiveFromISR+0x40>
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <xQueueReceiveFromISR+0x42>
 8006228:	2300      	movs	r3, #0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	61fb      	str	r3, [r7, #28]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006246:	f001 fc4b 	bl	8007ae0 <vPortValidateInterruptPriority>
	__asm volatile
 800624a:	f3ef 8211 	mrs	r2, BASEPRI
 800624e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	61ba      	str	r2, [r7, #24]
 8006260:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006262:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	2b00      	cmp	r3, #0
 8006270:	d02f      	beq.n	80062d2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800627c:	68b9      	ldr	r1, [r7, #8]
 800627e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006280:	f000 f914 	bl	80064ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006286:	1e5a      	subs	r2, r3, #1
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800628c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d112      	bne.n	80062bc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	3310      	adds	r3, #16
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fe58 	bl	8006f58 <xTaskRemoveFromEventList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e007      	b.n	80062cc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80062bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062c0:	3301      	adds	r3, #1
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	b25a      	sxtb	r2, r3
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80062cc:	2301      	movs	r3, #1
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	e001      	b.n	80062d6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f383 8811 	msr	BASEPRI, r3
}
 80062e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3738      	adds	r7, #56	@ 0x38
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10b      	bne.n	8006312 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80062fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062fe:	f383 8811 	msr	BASEPRI, r3
 8006302:	f3bf 8f6f 	isb	sy
 8006306:	f3bf 8f4f 	dsb	sy
 800630a:	60bb      	str	r3, [r7, #8]
}
 800630c:	bf00      	nop
 800630e:	bf00      	nop
 8006310:	e7fd      	b.n	800630e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006312:	f001 fb23 	bl	800795c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800631c:	f001 fb4e 	bl	80079bc <vPortExitCritical>

	return uxReturn;
 8006320:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <uxQueueMessagesWaitingFromISR+0x26>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	60bb      	str	r3, [r7, #8]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006356:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10b      	bne.n	800638c <vQueueDelete+0x2a>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	60bb      	str	r3, [r7, #8]
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	e7fd      	b.n	8006388 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f933 	bl	80065f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006398:	2b00      	cmp	r3, #0
 800639a:	d102      	bne.n	80063a2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f001 fbf1 	bl	8007b84 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f1c3 0307 	rsb	r3, r3, #7
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e001      	b.n	80063cc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80063cc:	68fb      	ldr	r3, [r7, #12]
	}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d14d      	bne.n	800649a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4618      	mov	r0, r3
 8006404:	f001 f816 	bl	8007434 <xTaskPriorityDisinherit>
 8006408:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	605a      	str	r2, [r3, #4]
 8006410:	e043      	b.n	800649a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d119      	bne.n	800644c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6898      	ldr	r0, [r3, #8]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	461a      	mov	r2, r3
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	f011 f8fb 	bl	801761e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	429a      	cmp	r2, r3
 8006440:	d32b      	bcc.n	800649a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	e026      	b.n	800649a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	68d8      	ldr	r0, [r3, #12]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	461a      	mov	r2, r3
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	f011 f8e1 	bl	801761e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68da      	ldr	r2, [r3, #12]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	425b      	negs	r3, r3
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68da      	ldr	r2, [r3, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d207      	bcs.n	8006488 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006480:	425b      	negs	r3, r3
 8006482:	441a      	add	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d105      	bne.n	800649a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	3b01      	subs	r3, #1
 8006498:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80064a2:	697b      	ldr	r3, [r7, #20]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d018      	beq.n	80064f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	441a      	add	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d303      	bcc.n	80064e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68d9      	ldr	r1, [r3, #12]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	461a      	mov	r2, r3
 80064ea:	6838      	ldr	r0, [r7, #0]
 80064ec:	f011 f897 	bl	801761e <memcpy>
	}
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006500:	f001 fa2c 	bl	800795c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800650a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800650c:	e011      	b.n	8006532 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d012      	beq.n	800653c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3324      	adds	r3, #36	@ 0x24
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fd1c 	bl	8006f58 <xTaskRemoveFromEventList>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006526:	f000 fdf5 	bl	8007114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	3b01      	subs	r3, #1
 800652e:	b2db      	uxtb	r3, r3
 8006530:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006536:	2b00      	cmp	r3, #0
 8006538:	dce9      	bgt.n	800650e <prvUnlockQueue+0x16>
 800653a:	e000      	b.n	800653e <prvUnlockQueue+0x46>
					break;
 800653c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	22ff      	movs	r2, #255	@ 0xff
 8006542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006546:	f001 fa39 	bl	80079bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800654a:	f001 fa07 	bl	800795c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006554:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006556:	e011      	b.n	800657c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d012      	beq.n	8006586 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3310      	adds	r3, #16
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fcf7 	bl	8006f58 <xTaskRemoveFromEventList>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006570:	f000 fdd0 	bl	8007114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	3b01      	subs	r3, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800657c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006580:	2b00      	cmp	r3, #0
 8006582:	dce9      	bgt.n	8006558 <prvUnlockQueue+0x60>
 8006584:	e000      	b.n	8006588 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006586:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	22ff      	movs	r2, #255	@ 0xff
 800658c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006590:	f001 fa14 	bl	80079bc <vPortExitCritical>
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065a4:	f001 f9da 	bl	800795c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	e001      	b.n	80065ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065b6:	2300      	movs	r3, #0
 80065b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ba:	f001 f9ff 	bl	80079bc <vPortExitCritical>

	return xReturn;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065d0:	f001 f9c4 	bl	800795c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	429a      	cmp	r2, r3
 80065de:	d102      	bne.n	80065e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80065e0:	2301      	movs	r3, #1
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	e001      	b.n	80065ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065ea:	f001 f9e7 	bl	80079bc <vPortExitCritical>

	return xReturn;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e016      	b.n	8006634 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006606:	4a10      	ldr	r2, [pc, #64]	@ (8006648 <vQueueUnregisterQueue+0x50>)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d10b      	bne.n	800662e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006616:	4a0c      	ldr	r2, [pc, #48]	@ (8006648 <vQueueUnregisterQueue+0x50>)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2100      	movs	r1, #0
 800661c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006620:	4a09      	ldr	r2, [pc, #36]	@ (8006648 <vQueueUnregisterQueue+0x50>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	2200      	movs	r2, #0
 800662a:	605a      	str	r2, [r3, #4]
				break;
 800662c:	e006      	b.n	800663c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2b07      	cmp	r3, #7
 8006638:	d9e5      	bls.n	8006606 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20005f24 	.word	0x20005f24

0800664c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08e      	sub	sp, #56	@ 0x38
 8006650:	af04      	add	r7, sp, #16
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10b      	bne.n	8006678 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	623b      	str	r3, [r7, #32]
}
 8006672:	bf00      	nop
 8006674:	bf00      	nop
 8006676:	e7fd      	b.n	8006674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10b      	bne.n	8006696 <xTaskCreateStatic+0x4a>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	61fb      	str	r3, [r7, #28]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006696:	23a0      	movs	r3, #160	@ 0xa0
 8006698:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2ba0      	cmp	r3, #160	@ 0xa0
 800669e:	d00b      	beq.n	80066b8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	61bb      	str	r3, [r7, #24]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d01e      	beq.n	80066fc <xTaskCreateStatic+0xb0>
 80066be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d0:	2202      	movs	r2, #2
 80066d2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066d6:	2300      	movs	r3, #0
 80066d8:	9303      	str	r3, [sp, #12]
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	9302      	str	r3, [sp, #8]
 80066de:	f107 0314 	add.w	r3, r7, #20
 80066e2:	9301      	str	r3, [sp, #4]
 80066e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68b9      	ldr	r1, [r7, #8]
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f850 	bl	8006794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066f6:	f000 f8ed 	bl	80068d4 <prvAddNewTaskToReadyList>
 80066fa:	e001      	b.n	8006700 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006700:	697b      	ldr	r3, [r7, #20]
	}
 8006702:	4618      	mov	r0, r3
 8006704:	3728      	adds	r7, #40	@ 0x28
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800670a:	b580      	push	{r7, lr}
 800670c:	b08c      	sub	sp, #48	@ 0x30
 800670e:	af04      	add	r7, sp, #16
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671a:	88fb      	ldrh	r3, [r7, #6]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fa1e 	bl	8007b60 <pvPortMalloc>
 8006724:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00e      	beq.n	800674a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800672c:	20a0      	movs	r0, #160	@ 0xa0
 800672e:	f001 fa17 	bl	8007b60 <pvPortMalloc>
 8006732:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006740:	e005      	b.n	800674e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f001 fa1e 	bl	8007b84 <vPortFree>
 8006748:	e001      	b.n	800674e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d017      	beq.n	8006784 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	2300      	movs	r3, #0
 8006760:	9303      	str	r3, [sp, #12]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	9302      	str	r3, [sp, #8]
 8006766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f80e 	bl	8006794 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006778:	69f8      	ldr	r0, [r7, #28]
 800677a:	f000 f8ab 	bl	80068d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800677e:	2301      	movs	r3, #1
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	e002      	b.n	800678a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800678a:	69bb      	ldr	r3, [r7, #24]
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	461a      	mov	r2, r3
 80067ac:	21a5      	movs	r1, #165	@ 0xa5
 80067ae:	f010 fe49 	bl	8017444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067bc:	3b01      	subs	r3, #1
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f023 0307 	bic.w	r3, r3, #7
 80067ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00b      	beq.n	80067ee <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	617b      	str	r3, [r7, #20]
}
 80067e8:	bf00      	nop
 80067ea:	bf00      	nop
 80067ec:	e7fd      	b.n	80067ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067ee:	2300      	movs	r3, #0
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	e012      	b.n	800681a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	4413      	add	r3, r2
 80067fa:	7819      	ldrb	r1, [r3, #0]
 80067fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	3334      	adds	r3, #52	@ 0x34
 8006804:	460a      	mov	r2, r1
 8006806:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	3301      	adds	r3, #1
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	2b0f      	cmp	r3, #15
 800681e:	d9e9      	bls.n	80067f4 <prvInitialiseNewTask+0x60>
 8006820:	e000      	b.n	8006824 <prvInitialiseNewTask+0x90>
		{
			break;
 8006822:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800682c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682e:	2b06      	cmp	r3, #6
 8006830:	d901      	bls.n	8006836 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006832:	2306      	movs	r3, #6
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006840:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	2200      	movs	r2, #0
 8006846:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fe89 	bl	8005564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006854:	3318      	adds	r3, #24
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fe84 	bl	8005564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006860:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	f1c3 0207 	rsb	r2, r3, #7
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006870:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	2200      	movs	r2, #0
 8006876:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	2200      	movs	r2, #0
 800687e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	334c      	adds	r3, #76	@ 0x4c
 8006886:	224c      	movs	r2, #76	@ 0x4c
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f010 fdda 	bl	8017444 <memset>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	4a0d      	ldr	r2, [pc, #52]	@ (80068c8 <prvInitialiseNewTask+0x134>)
 8006894:	651a      	str	r2, [r3, #80]	@ 0x50
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <prvInitialiseNewTask+0x138>)
 800689a:	655a      	str	r2, [r3, #84]	@ 0x54
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	4a0c      	ldr	r2, [pc, #48]	@ (80068d0 <prvInitialiseNewTask+0x13c>)
 80068a0:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	68f9      	ldr	r1, [r7, #12]
 80068a6:	69b8      	ldr	r0, [r7, #24]
 80068a8:	f000 ff68 	bl	800777c <pxPortInitialiseStack>
 80068ac:	4602      	mov	r2, r0
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80068b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068be:	bf00      	nop
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200099e4 	.word	0x200099e4
 80068cc:	20009a4c 	.word	0x20009a4c
 80068d0:	20009ab4 	.word	0x20009ab4

080068d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068dc:	f001 f83e 	bl	800795c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068e0:	4b2a      	ldr	r3, [pc, #168]	@ (800698c <prvAddNewTaskToReadyList+0xb8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3301      	adds	r3, #1
 80068e6:	4a29      	ldr	r2, [pc, #164]	@ (800698c <prvAddNewTaskToReadyList+0xb8>)
 80068e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068ea:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <prvAddNewTaskToReadyList+0xbc>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d109      	bne.n	8006906 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068f2:	4a27      	ldr	r2, [pc, #156]	@ (8006990 <prvAddNewTaskToReadyList+0xbc>)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f8:	4b24      	ldr	r3, [pc, #144]	@ (800698c <prvAddNewTaskToReadyList+0xb8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d110      	bne.n	8006922 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006900:	f000 fc2c 	bl	800715c <prvInitialiseTaskLists>
 8006904:	e00d      	b.n	8006922 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006906:	4b23      	ldr	r3, [pc, #140]	@ (8006994 <prvAddNewTaskToReadyList+0xc0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <prvAddNewTaskToReadyList+0xbc>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	429a      	cmp	r2, r3
 800691a:	d802      	bhi.n	8006922 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800691c:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <prvAddNewTaskToReadyList+0xbc>)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006922:	4b1d      	ldr	r3, [pc, #116]	@ (8006998 <prvAddNewTaskToReadyList+0xc4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3301      	adds	r3, #1
 8006928:	4a1b      	ldr	r2, [pc, #108]	@ (8006998 <prvAddNewTaskToReadyList+0xc4>)
 800692a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	2201      	movs	r2, #1
 8006932:	409a      	lsls	r2, r3
 8006934:	4b19      	ldr	r3, [pc, #100]	@ (800699c <prvAddNewTaskToReadyList+0xc8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4313      	orrs	r3, r2
 800693a:	4a18      	ldr	r2, [pc, #96]	@ (800699c <prvAddNewTaskToReadyList+0xc8>)
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4a15      	ldr	r2, [pc, #84]	@ (80069a0 <prvAddNewTaskToReadyList+0xcc>)
 800694c:	441a      	add	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fe fe11 	bl	800557c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800695a:	f001 f82f 	bl	80079bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <prvAddNewTaskToReadyList+0xc0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00e      	beq.n	8006984 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006966:	4b0a      	ldr	r3, [pc, #40]	@ (8006990 <prvAddNewTaskToReadyList+0xbc>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	429a      	cmp	r2, r3
 8006972:	d207      	bcs.n	8006984 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006974:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <prvAddNewTaskToReadyList+0xd0>)
 8006976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20006064 	.word	0x20006064
 8006990:	20005f64 	.word	0x20005f64
 8006994:	20006070 	.word	0x20006070
 8006998:	20006080 	.word	0x20006080
 800699c:	2000606c 	.word	0x2000606c
 80069a0:	20005f68 	.word	0x20005f68
 80069a4:	e000ed04 	.word	0xe000ed04

080069a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d018      	beq.n	80069ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069ba:	4b14      	ldr	r3, [pc, #80]	@ (8006a0c <vTaskDelay+0x64>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <vTaskDelay+0x32>
	__asm volatile
 80069c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	60bb      	str	r3, [r7, #8]
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop
 80069d8:	e7fd      	b.n	80069d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069da:	f000 f885 	bl	8006ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069de:	2100      	movs	r1, #0
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fe65 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069e6:	f000 f88d 	bl	8006b04 <xTaskResumeAll>
 80069ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d107      	bne.n	8006a02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069f2:	4b07      	ldr	r3, [pc, #28]	@ (8006a10 <vTaskDelay+0x68>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a02:	bf00      	nop
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000608c 	.word	0x2000608c
 8006a10:	e000ed04 	.word	0xe000ed04

08006a14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	@ 0x28
 8006a18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a22:	463a      	mov	r2, r7
 8006a24:	1d39      	adds	r1, r7, #4
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7f9 fd92 	bl	8000554 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	9202      	str	r2, [sp, #8]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2300      	movs	r3, #0
 8006a40:	460a      	mov	r2, r1
 8006a42:	4921      	ldr	r1, [pc, #132]	@ (8006ac8 <vTaskStartScheduler+0xb4>)
 8006a44:	4821      	ldr	r0, [pc, #132]	@ (8006acc <vTaskStartScheduler+0xb8>)
 8006a46:	f7ff fe01 	bl	800664c <xTaskCreateStatic>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	4a20      	ldr	r2, [pc, #128]	@ (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ad0 <vTaskStartScheduler+0xbc>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e001      	b.n	8006a62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d11b      	bne.n	8006aa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a7c:	4b15      	ldr	r3, [pc, #84]	@ (8006ad4 <vTaskStartScheduler+0xc0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	334c      	adds	r3, #76	@ 0x4c
 8006a82:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <vTaskStartScheduler+0xc4>)
 8006a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a86:	4b15      	ldr	r3, [pc, #84]	@ (8006adc <vTaskStartScheduler+0xc8>)
 8006a88:	f04f 32ff 	mov.w	r2, #4294967295
 8006a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a8e:	4b14      	ldr	r3, [pc, #80]	@ (8006ae0 <vTaskStartScheduler+0xcc>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a94:	4b13      	ldr	r3, [pc, #76]	@ (8006ae4 <vTaskStartScheduler+0xd0>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a9a:	f000 feed 	bl	8007878 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a9e:	e00f      	b.n	8006ac0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d10b      	bne.n	8006ac0 <vTaskStartScheduler+0xac>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <vTaskStartScheduler+0xa8>
}
 8006ac0:	bf00      	nop
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	08018138 	.word	0x08018138
 8006acc:	0800712d 	.word	0x0800712d
 8006ad0:	20006088 	.word	0x20006088
 8006ad4:	20005f64 	.word	0x20005f64
 8006ad8:	20000028 	.word	0x20000028
 8006adc:	20006084 	.word	0x20006084
 8006ae0:	20006070 	.word	0x20006070
 8006ae4:	20006068 	.word	0x20006068

08006ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006aec:	4b04      	ldr	r3, [pc, #16]	@ (8006b00 <vTaskSuspendAll+0x18>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a03      	ldr	r2, [pc, #12]	@ (8006b00 <vTaskSuspendAll+0x18>)
 8006af4:	6013      	str	r3, [r2, #0]
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	2000608c 	.word	0x2000608c

08006b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b12:	4b42      	ldr	r3, [pc, #264]	@ (8006c1c <xTaskResumeAll+0x118>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10b      	bne.n	8006b32 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	603b      	str	r3, [r7, #0]
}
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b32:	f000 ff13 	bl	800795c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b36:	4b39      	ldr	r3, [pc, #228]	@ (8006c1c <xTaskResumeAll+0x118>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	4a37      	ldr	r2, [pc, #220]	@ (8006c1c <xTaskResumeAll+0x118>)
 8006b3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b40:	4b36      	ldr	r3, [pc, #216]	@ (8006c1c <xTaskResumeAll+0x118>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d161      	bne.n	8006c0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b48:	4b35      	ldr	r3, [pc, #212]	@ (8006c20 <xTaskResumeAll+0x11c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d05d      	beq.n	8006c0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b50:	e02e      	b.n	8006bb0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006b52:	4b34      	ldr	r3, [pc, #208]	@ (8006c24 <xTaskResumeAll+0x120>)
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fd67 	bl	8005632 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3304      	adds	r3, #4
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe fd62 	bl	8005632 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	2201      	movs	r2, #1
 8006b74:	409a      	lsls	r2, r3
 8006b76:	4b2c      	ldr	r3, [pc, #176]	@ (8006c28 <xTaskResumeAll+0x124>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006c28 <xTaskResumeAll+0x124>)
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4a27      	ldr	r2, [pc, #156]	@ (8006c2c <xTaskResumeAll+0x128>)
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f7fe fcf0 	bl	800557c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba0:	4b23      	ldr	r3, [pc, #140]	@ (8006c30 <xTaskResumeAll+0x12c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d302      	bcc.n	8006bb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006baa:	4b22      	ldr	r3, [pc, #136]	@ (8006c34 <xTaskResumeAll+0x130>)
 8006bac:	2201      	movs	r2, #1
 8006bae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c24 <xTaskResumeAll+0x120>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1cc      	bne.n	8006b52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bbe:	f000 fb71 	bl	80072a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <xTaskResumeAll+0x134>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d010      	beq.n	8006bf0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bce:	f000 f857 	bl	8006c80 <xTaskIncrementTick>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006bd8:	4b16      	ldr	r3, [pc, #88]	@ (8006c34 <xTaskResumeAll+0x130>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f1      	bne.n	8006bce <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006bea:	4b13      	ldr	r3, [pc, #76]	@ (8006c38 <xTaskResumeAll+0x134>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bf0:	4b10      	ldr	r3, [pc, #64]	@ (8006c34 <xTaskResumeAll+0x130>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d009      	beq.n	8006c0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8006c3c <xTaskResumeAll+0x138>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c0c:	f000 fed6 	bl	80079bc <vPortExitCritical>

	return xAlreadyYielded;
 8006c10:	68bb      	ldr	r3, [r7, #8]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2000608c 	.word	0x2000608c
 8006c20:	20006064 	.word	0x20006064
 8006c24:	20006024 	.word	0x20006024
 8006c28:	2000606c 	.word	0x2000606c
 8006c2c:	20005f68 	.word	0x20005f68
 8006c30:	20005f64 	.word	0x20005f64
 8006c34:	20006078 	.word	0x20006078
 8006c38:	20006074 	.word	0x20006074
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c46:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <xTaskGetTickCount+0x18>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c4c:	687b      	ldr	r3, [r7, #4]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr
 8006c58:	20006068 	.word	0x20006068

08006c5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c62:	f000 ff3d 	bl	8007ae0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c66:	2300      	movs	r3, #0
 8006c68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c6a:	4b04      	ldr	r3, [pc, #16]	@ (8006c7c <xTaskGetTickCountFromISR+0x20>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c70:	683b      	ldr	r3, [r7, #0]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20006068 	.word	0x20006068

08006c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c8a:	4b51      	ldr	r3, [pc, #324]	@ (8006dd0 <xTaskIncrementTick+0x150>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f040 808e 	bne.w	8006db0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c94:	4b4f      	ldr	r3, [pc, #316]	@ (8006dd4 <xTaskIncrementTick+0x154>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8006dd4 <xTaskIncrementTick+0x154>)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d121      	bne.n	8006cec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8006dd8 <xTaskIncrementTick+0x158>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <xTaskIncrementTick+0x4a>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	603b      	str	r3, [r7, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	e7fd      	b.n	8006cc6 <xTaskIncrementTick+0x46>
 8006cca:	4b43      	ldr	r3, [pc, #268]	@ (8006dd8 <xTaskIncrementTick+0x158>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	4b42      	ldr	r3, [pc, #264]	@ (8006ddc <xTaskIncrementTick+0x15c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a40      	ldr	r2, [pc, #256]	@ (8006dd8 <xTaskIncrementTick+0x158>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	4a40      	ldr	r2, [pc, #256]	@ (8006ddc <xTaskIncrementTick+0x15c>)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	4b40      	ldr	r3, [pc, #256]	@ (8006de0 <xTaskIncrementTick+0x160>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8006de0 <xTaskIncrementTick+0x160>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	f000 fadc 	bl	80072a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cec:	4b3d      	ldr	r3, [pc, #244]	@ (8006de4 <xTaskIncrementTick+0x164>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d34d      	bcc.n	8006d92 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf6:	4b38      	ldr	r3, [pc, #224]	@ (8006dd8 <xTaskIncrementTick+0x158>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <xTaskIncrementTick+0x84>
 8006d00:	2301      	movs	r3, #1
 8006d02:	e000      	b.n	8006d06 <xTaskIncrementTick+0x86>
 8006d04:	2300      	movs	r3, #0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0a:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <xTaskIncrementTick+0x164>)
 8006d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d10:	601a      	str	r2, [r3, #0]
					break;
 8006d12:	e03e      	b.n	8006d92 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d14:	4b30      	ldr	r3, [pc, #192]	@ (8006dd8 <xTaskIncrementTick+0x158>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d203      	bcs.n	8006d34 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8006de4 <xTaskIncrementTick+0x164>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
						break;
 8006d32:	e02e      	b.n	8006d92 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fc7a 	bl	8005632 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	3318      	adds	r3, #24
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fc71 	bl	8005632 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	2201      	movs	r2, #1
 8006d56:	409a      	lsls	r2, r3
 8006d58:	4b23      	ldr	r3, [pc, #140]	@ (8006de8 <xTaskIncrementTick+0x168>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	4a22      	ldr	r2, [pc, #136]	@ (8006de8 <xTaskIncrementTick+0x168>)
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <xTaskIncrementTick+0x16c>)
 8006d70:	441a      	add	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3304      	adds	r3, #4
 8006d76:	4619      	mov	r1, r3
 8006d78:	4610      	mov	r0, r2
 8006d7a:	f7fe fbff 	bl	800557c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	4b1b      	ldr	r3, [pc, #108]	@ (8006df0 <xTaskIncrementTick+0x170>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3b4      	bcc.n	8006cf6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d90:	e7b1      	b.n	8006cf6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d92:	4b17      	ldr	r3, [pc, #92]	@ (8006df0 <xTaskIncrementTick+0x170>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d98:	4914      	ldr	r1, [pc, #80]	@ (8006dec <xTaskIncrementTick+0x16c>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	440b      	add	r3, r1
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d907      	bls.n	8006dba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e004      	b.n	8006dba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006db0:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <xTaskIncrementTick+0x174>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	4a0f      	ldr	r2, [pc, #60]	@ (8006df4 <xTaskIncrementTick+0x174>)
 8006db8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006dba:	4b0f      	ldr	r3, [pc, #60]	@ (8006df8 <xTaskIncrementTick+0x178>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	2000608c 	.word	0x2000608c
 8006dd4:	20006068 	.word	0x20006068
 8006dd8:	2000601c 	.word	0x2000601c
 8006ddc:	20006020 	.word	0x20006020
 8006de0:	2000607c 	.word	0x2000607c
 8006de4:	20006084 	.word	0x20006084
 8006de8:	2000606c 	.word	0x2000606c
 8006dec:	20005f68 	.word	0x20005f68
 8006df0:	20005f64 	.word	0x20005f64
 8006df4:	20006074 	.word	0x20006074
 8006df8:	20006078 	.word	0x20006078

08006dfc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006e02:	4b3c      	ldr	r3, [pc, #240]	@ (8006ef4 <vTaskSwitchContext+0xf8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006e0a:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef8 <vTaskSwitchContext+0xfc>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006e10:	e06c      	b.n	8006eec <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 8006e12:	4b39      	ldr	r3, [pc, #228]	@ (8006ef8 <vTaskSwitchContext+0xfc>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006e18:	4b38      	ldr	r3, [pc, #224]	@ (8006efc <vTaskSwitchContext+0x100>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	61fb      	str	r3, [r7, #28]
 8006e20:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d111      	bne.n	8006e54 <vTaskSwitchContext+0x58>
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	3304      	adds	r3, #4
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d10b      	bne.n	8006e54 <vTaskSwitchContext+0x58>
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d105      	bne.n	8006e54 <vTaskSwitchContext+0x58>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	330c      	adds	r3, #12
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d008      	beq.n	8006e66 <vTaskSwitchContext+0x6a>
 8006e54:	4b29      	ldr	r3, [pc, #164]	@ (8006efc <vTaskSwitchContext+0x100>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b28      	ldr	r3, [pc, #160]	@ (8006efc <vTaskSwitchContext+0x100>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3334      	adds	r3, #52	@ 0x34
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7f9 fb6d 	bl	8000540 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006e66:	4b26      	ldr	r3, [pc, #152]	@ (8006f00 <vTaskSwitchContext+0x104>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	fab3 f383 	clz	r3, r3
 8006e72:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	f1c3 031f 	rsb	r3, r3, #31
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	4921      	ldr	r1, [pc, #132]	@ (8006f04 <vTaskSwitchContext+0x108>)
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <vTaskSwitchContext+0xac>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	607b      	str	r3, [r7, #4]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <vTaskSwitchContext+0xa8>
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4a14      	ldr	r2, [pc, #80]	@ (8006f04 <vTaskSwitchContext+0x108>)
 8006eb4:	4413      	add	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d104      	bne.n	8006ed8 <vTaskSwitchContext+0xdc>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	605a      	str	r2, [r3, #4]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	4a07      	ldr	r2, [pc, #28]	@ (8006efc <vTaskSwitchContext+0x100>)
 8006ee0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <vTaskSwitchContext+0x100>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	334c      	adds	r3, #76	@ 0x4c
 8006ee8:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <vTaskSwitchContext+0x10c>)
 8006eea:	6013      	str	r3, [r2, #0]
}
 8006eec:	bf00      	nop
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	2000608c 	.word	0x2000608c
 8006ef8:	20006078 	.word	0x20006078
 8006efc:	20005f64 	.word	0x20005f64
 8006f00:	2000606c 	.word	0x2000606c
 8006f04:	20005f68 	.word	0x20005f68
 8006f08:	20000028 	.word	0x20000028

08006f0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	60fb      	str	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f34:	4b07      	ldr	r3, [pc, #28]	@ (8006f54 <vTaskPlaceOnEventList+0x48>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3318      	adds	r3, #24
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fe fb40 	bl	80055c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f42:	2101      	movs	r1, #1
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f000 fbb3 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	20005f64 	.word	0x20005f64

08006f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10b      	bne.n	8006f86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f72:	f383 8811 	msr	BASEPRI, r3
 8006f76:	f3bf 8f6f 	isb	sy
 8006f7a:	f3bf 8f4f 	dsb	sy
 8006f7e:	60fb      	str	r3, [r7, #12]
}
 8006f80:	bf00      	nop
 8006f82:	bf00      	nop
 8006f84:	e7fd      	b.n	8006f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	3318      	adds	r3, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fb51 	bl	8005632 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f90:	4b1d      	ldr	r3, [pc, #116]	@ (8007008 <xTaskRemoveFromEventList+0xb0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11c      	bne.n	8006fd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7fe fb48 	bl	8005632 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b18      	ldr	r3, [pc, #96]	@ (800700c <xTaskRemoveFromEventList+0xb4>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	4a16      	ldr	r2, [pc, #88]	@ (800700c <xTaskRemoveFromEventList+0xb4>)
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	4613      	mov	r3, r2
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4a13      	ldr	r2, [pc, #76]	@ (8007010 <xTaskRemoveFromEventList+0xb8>)
 8006fc2:	441a      	add	r2, r3
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f7fe fad6 	bl	800557c <vListInsertEnd>
 8006fd0:	e005      	b.n	8006fde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3318      	adds	r3, #24
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	480e      	ldr	r0, [pc, #56]	@ (8007014 <xTaskRemoveFromEventList+0xbc>)
 8006fda:	f7fe facf 	bl	800557c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <xTaskRemoveFromEventList+0xc0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d905      	bls.n	8006ff8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fec:	2301      	movs	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <xTaskRemoveFromEventList+0xc4>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e001      	b.n	8006ffc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006ffc:	697b      	ldr	r3, [r7, #20]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	2000608c 	.word	0x2000608c
 800700c:	2000606c 	.word	0x2000606c
 8007010:	20005f68 	.word	0x20005f68
 8007014:	20006024 	.word	0x20006024
 8007018:	20005f64 	.word	0x20005f64
 800701c:	20006078 	.word	0x20006078

08007020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007028:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <vTaskInternalSetTimeOutState+0x24>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007030:	4b05      	ldr	r3, [pc, #20]	@ (8007048 <vTaskInternalSetTimeOutState+0x28>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	605a      	str	r2, [r3, #4]
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	2000607c 	.word	0x2000607c
 8007048:	20006068 	.word	0x20006068

0800704c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b088      	sub	sp, #32
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10b      	bne.n	8007074 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	613b      	str	r3, [r7, #16]
}
 800706e:	bf00      	nop
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60fb      	str	r3, [r7, #12]
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007092:	f000 fc63 	bl	800795c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007096:	4b1d      	ldr	r3, [pc, #116]	@ (800710c <xTaskCheckForTimeOut+0xc0>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ae:	d102      	bne.n	80070b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]
 80070b4:	e023      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <xTaskCheckForTimeOut+0xc4>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d007      	beq.n	80070d2 <xTaskCheckForTimeOut+0x86>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
 80070d0:	e015      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d20b      	bcs.n	80070f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff ff99 	bl	8007020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e004      	b.n	80070fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2200      	movs	r2, #0
 80070f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070fe:	f000 fc5d 	bl	80079bc <vPortExitCritical>

	return xReturn;
 8007102:	69fb      	ldr	r3, [r7, #28]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20006068 	.word	0x20006068
 8007110:	2000607c 	.word	0x2000607c

08007114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007118:	4b03      	ldr	r3, [pc, #12]	@ (8007128 <vTaskMissedYield+0x14>)
 800711a:	2201      	movs	r2, #1
 800711c:	601a      	str	r2, [r3, #0]
}
 800711e:	bf00      	nop
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20006078 	.word	0x20006078

0800712c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007134:	f000 f852 	bl	80071dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <prvIdleTask+0x28>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d9f9      	bls.n	8007134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <prvIdleTask+0x2c>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007150:	e7f0      	b.n	8007134 <prvIdleTask+0x8>
 8007152:	bf00      	nop
 8007154:	20005f68 	.word	0x20005f68
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
 8007166:	e00c      	b.n	8007182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <prvInitialiseTaskLists+0x60>)
 8007174:	4413      	add	r3, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe f9d5 	bl	8005526 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3301      	adds	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b06      	cmp	r3, #6
 8007186:	d9ef      	bls.n	8007168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007188:	480d      	ldr	r0, [pc, #52]	@ (80071c0 <prvInitialiseTaskLists+0x64>)
 800718a:	f7fe f9cc 	bl	8005526 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800718e:	480d      	ldr	r0, [pc, #52]	@ (80071c4 <prvInitialiseTaskLists+0x68>)
 8007190:	f7fe f9c9 	bl	8005526 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007194:	480c      	ldr	r0, [pc, #48]	@ (80071c8 <prvInitialiseTaskLists+0x6c>)
 8007196:	f7fe f9c6 	bl	8005526 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800719a:	480c      	ldr	r0, [pc, #48]	@ (80071cc <prvInitialiseTaskLists+0x70>)
 800719c:	f7fe f9c3 	bl	8005526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071a0:	480b      	ldr	r0, [pc, #44]	@ (80071d0 <prvInitialiseTaskLists+0x74>)
 80071a2:	f7fe f9c0 	bl	8005526 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071a6:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <prvInitialiseTaskLists+0x78>)
 80071a8:	4a05      	ldr	r2, [pc, #20]	@ (80071c0 <prvInitialiseTaskLists+0x64>)
 80071aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071ac:	4b0a      	ldr	r3, [pc, #40]	@ (80071d8 <prvInitialiseTaskLists+0x7c>)
 80071ae:	4a05      	ldr	r2, [pc, #20]	@ (80071c4 <prvInitialiseTaskLists+0x68>)
 80071b0:	601a      	str	r2, [r3, #0]
}
 80071b2:	bf00      	nop
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20005f68 	.word	0x20005f68
 80071c0:	20005ff4 	.word	0x20005ff4
 80071c4:	20006008 	.word	0x20006008
 80071c8:	20006024 	.word	0x20006024
 80071cc:	20006038 	.word	0x20006038
 80071d0:	20006050 	.word	0x20006050
 80071d4:	2000601c 	.word	0x2000601c
 80071d8:	20006020 	.word	0x20006020

080071dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071e2:	e019      	b.n	8007218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071e4:	f000 fbba 	bl	800795c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80071e8:	4b10      	ldr	r3, [pc, #64]	@ (800722c <prvCheckTasksWaitingTermination+0x50>)
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7fe fa1c 	bl	8005632 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <prvCheckTasksWaitingTermination+0x54>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a0b      	ldr	r2, [pc, #44]	@ (8007230 <prvCheckTasksWaitingTermination+0x54>)
 8007202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007204:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a0a      	ldr	r2, [pc, #40]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800720c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800720e:	f000 fbd5 	bl	80079bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f810 	bl	8007238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007218:	4b06      	ldr	r3, [pc, #24]	@ (8007234 <prvCheckTasksWaitingTermination+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e1      	bne.n	80071e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20006038 	.word	0x20006038
 8007230:	20006064 	.word	0x20006064
 8007234:	2000604c 	.word	0x2000604c

08007238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	334c      	adds	r3, #76	@ 0x4c
 8007244:	4618      	mov	r0, r3
 8007246:	f010 f927 	bl	8017498 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8007250:	2b00      	cmp	r3, #0
 8007252:	d108      	bne.n	8007266 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fc93 	bl	8007b84 <vPortFree>
				vPortFree( pxTCB );
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc90 	bl	8007b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007264:	e019      	b.n	800729a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800726c:	2b01      	cmp	r3, #1
 800726e:	d103      	bne.n	8007278 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fc87 	bl	8007b84 <vPortFree>
	}
 8007276:	e010      	b.n	800729a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800727e:	2b02      	cmp	r3, #2
 8007280:	d00b      	beq.n	800729a <prvDeleteTCB+0x62>
	__asm volatile
 8007282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007286:	f383 8811 	msr	BASEPRI, r3
 800728a:	f3bf 8f6f 	isb	sy
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	60fb      	str	r3, [r7, #12]
}
 8007294:	bf00      	nop
 8007296:	bf00      	nop
 8007298:	e7fd      	b.n	8007296 <prvDeleteTCB+0x5e>
	}
 800729a:	bf00      	nop
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
	...

080072a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072aa:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <prvResetNextTaskUnblockTime+0x40>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <prvResetNextTaskUnblockTime+0x14>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <prvResetNextTaskUnblockTime+0x16>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072be:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <prvResetNextTaskUnblockTime+0x44>)
 80072c0:	f04f 32ff 	mov.w	r2, #4294967295
 80072c4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072c6:	e008      	b.n	80072da <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80072c8:	4b06      	ldr	r3, [pc, #24]	@ (80072e4 <prvResetNextTaskUnblockTime+0x40>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4a04      	ldr	r2, [pc, #16]	@ (80072e8 <prvResetNextTaskUnblockTime+0x44>)
 80072d8:	6013      	str	r3, [r2, #0]
}
 80072da:	bf00      	nop
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	bc80      	pop	{r7}
 80072e2:	4770      	bx	lr
 80072e4:	2000601c 	.word	0x2000601c
 80072e8:	20006084 	.word	0x20006084

080072ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007320 <xTaskGetSchedulerState+0x34>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072fa:	2301      	movs	r3, #1
 80072fc:	607b      	str	r3, [r7, #4]
 80072fe:	e008      	b.n	8007312 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007300:	4b08      	ldr	r3, [pc, #32]	@ (8007324 <xTaskGetSchedulerState+0x38>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d102      	bne.n	800730e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007308:	2302      	movs	r3, #2
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e001      	b.n	8007312 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007312:	687b      	ldr	r3, [r7, #4]
	}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	20006070 	.word	0x20006070
 8007324:	2000608c 	.word	0x2000608c

08007328 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d06e      	beq.n	800741c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007342:	4b39      	ldr	r3, [pc, #228]	@ (8007428 <xTaskPriorityInherit+0x100>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	429a      	cmp	r2, r3
 800734a:	d25e      	bcs.n	800740a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db06      	blt.n	8007362 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007354:	4b34      	ldr	r3, [pc, #208]	@ (8007428 <xTaskPriorityInherit+0x100>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800735a:	f1c3 0207 	rsb	r2, r3, #7
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6959      	ldr	r1, [r3, #20]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800736a:	4613      	mov	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4a2e      	ldr	r2, [pc, #184]	@ (800742c <xTaskPriorityInherit+0x104>)
 8007374:	4413      	add	r3, r2
 8007376:	4299      	cmp	r1, r3
 8007378:	d101      	bne.n	800737e <xTaskPriorityInherit+0x56>
 800737a:	2301      	movs	r3, #1
 800737c:	e000      	b.n	8007380 <xTaskPriorityInherit+0x58>
 800737e:	2300      	movs	r3, #0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d03a      	beq.n	80073fa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	3304      	adds	r3, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f7fe f952 	bl	8005632 <uxListRemove>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d115      	bne.n	80073c0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007398:	4924      	ldr	r1, [pc, #144]	@ (800742c <xTaskPriorityInherit+0x104>)
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <xTaskPriorityInherit+0x98>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ae:	2201      	movs	r2, #1
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43da      	mvns	r2, r3
 80073b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007430 <xTaskPriorityInherit+0x108>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4013      	ands	r3, r2
 80073bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007430 <xTaskPriorityInherit+0x108>)
 80073be:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073c0:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <xTaskPriorityInherit+0x100>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ce:	2201      	movs	r2, #1
 80073d0:	409a      	lsls	r2, r3
 80073d2:	4b17      	ldr	r3, [pc, #92]	@ (8007430 <xTaskPriorityInherit+0x108>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	4a15      	ldr	r2, [pc, #84]	@ (8007430 <xTaskPriorityInherit+0x108>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4a10      	ldr	r2, [pc, #64]	@ (800742c <xTaskPriorityInherit+0x104>)
 80073ea:	441a      	add	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe f8c2 	bl	800557c <vListInsertEnd>
 80073f8:	e004      	b.n	8007404 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007428 <xTaskPriorityInherit+0x100>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007404:	2301      	movs	r3, #1
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e008      	b.n	800741c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800740e:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <xTaskPriorityInherit+0x100>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	429a      	cmp	r2, r3
 8007416:	d201      	bcs.n	800741c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007418:	2301      	movs	r3, #1
 800741a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800741c:	68fb      	ldr	r3, [r7, #12]
	}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20005f64 	.word	0x20005f64
 800742c:	20005f68 	.word	0x20005f68
 8007430:	2000606c 	.word	0x2000606c

08007434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d070      	beq.n	800752c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800744a:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <xTaskPriorityDisinherit+0x104>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	429a      	cmp	r2, r3
 8007452:	d00b      	beq.n	800746c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	60fb      	str	r3, [r7, #12]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	60bb      	str	r3, [r7, #8]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007490:	1e5a      	subs	r2, r3, #1
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749e:	429a      	cmp	r2, r3
 80074a0:	d044      	beq.n	800752c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d140      	bne.n	800752c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	3304      	adds	r3, #4
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fe f8bf 	bl	8005632 <uxListRemove>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d115      	bne.n	80074e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074be:	491f      	ldr	r1, [pc, #124]	@ (800753c <xTaskPriorityDisinherit+0x108>)
 80074c0:	4613      	mov	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xTaskPriorityDisinherit+0xb2>
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	2201      	movs	r2, #1
 80074d6:	fa02 f303 	lsl.w	r3, r2, r3
 80074da:	43da      	mvns	r2, r3
 80074dc:	4b18      	ldr	r3, [pc, #96]	@ (8007540 <xTaskPriorityDisinherit+0x10c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4013      	ands	r3, r2
 80074e2:	4a17      	ldr	r2, [pc, #92]	@ (8007540 <xTaskPriorityDisinherit+0x10c>)
 80074e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	f1c3 0207 	rsb	r2, r3, #7
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	2201      	movs	r2, #1
 8007500:	409a      	lsls	r2, r3
 8007502:	4b0f      	ldr	r3, [pc, #60]	@ (8007540 <xTaskPriorityDisinherit+0x10c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4313      	orrs	r3, r2
 8007508:	4a0d      	ldr	r2, [pc, #52]	@ (8007540 <xTaskPriorityDisinherit+0x10c>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4a08      	ldr	r2, [pc, #32]	@ (800753c <xTaskPriorityDisinherit+0x108>)
 800751a:	441a      	add	r2, r3
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f7fe f82a 	bl	800557c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800752c:	697b      	ldr	r3, [r7, #20]
	}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20005f64 	.word	0x20005f64
 800753c:	20005f68 	.word	0x20005f68
 8007540:	2000606c 	.word	0x2000606c

08007544 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007552:	2301      	movs	r3, #1
 8007554:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 808a 	beq.w	8007672 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	60fb      	str	r3, [r7, #12]
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	e7fd      	b.n	800757a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	429a      	cmp	r2, r3
 8007586:	d902      	bls.n	800758e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	e002      	b.n	8007594 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007592:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007594:	69bb      	ldr	r3, [r7, #24]
 8007596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	429a      	cmp	r2, r3
 800759c:	d069      	beq.n	8007672 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d164      	bne.n	8007672 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075a8:	4b34      	ldr	r3, [pc, #208]	@ (800767c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69ba      	ldr	r2, [r7, #24]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d10b      	bne.n	80075ca <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	60bb      	str	r3, [r7, #8]
}
 80075c4:	bf00      	nop
 80075c6:	bf00      	nop
 80075c8:	e7fd      	b.n	80075c6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ce:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	db04      	blt.n	80075e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	f1c3 0207 	rsb	r2, r3, #7
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	6959      	ldr	r1, [r3, #20]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	4613      	mov	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4a22      	ldr	r2, [pc, #136]	@ (8007680 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80075f8:	4413      	add	r3, r2
 80075fa:	4299      	cmp	r1, r3
 80075fc:	d101      	bne.n	8007602 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 80075fe:	2301      	movs	r3, #1
 8007600:	e000      	b.n	8007604 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8007602:	2300      	movs	r3, #0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d034      	beq.n	8007672 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	3304      	adds	r3, #4
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe f810 	bl	8005632 <uxListRemove>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d115      	bne.n	8007644 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761c:	4918      	ldr	r1, [pc, #96]	@ (8007680 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	440b      	add	r3, r1
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <vTaskPriorityDisinheritAfterTimeout+0x100>
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007632:	2201      	movs	r2, #1
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43da      	mvns	r2, r3
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4013      	ands	r3, r2
 8007640:	4a10      	ldr	r2, [pc, #64]	@ (8007684 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007642:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	2201      	movs	r2, #1
 800764a:	409a      	lsls	r2, r3
 800764c:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4313      	orrs	r3, r2
 8007652:	4a0c      	ldr	r2, [pc, #48]	@ (8007684 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4a07      	ldr	r2, [pc, #28]	@ (8007680 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007664:	441a      	add	r2, r3
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	3304      	adds	r3, #4
 800766a:	4619      	mov	r1, r3
 800766c:	4610      	mov	r0, r2
 800766e:	f7fd ff85 	bl	800557c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007672:	bf00      	nop
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	20005f64 	.word	0x20005f64
 8007680:	20005f68 	.word	0x20005f68
 8007684:	2000606c 	.word	0x2000606c

08007688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800769a:	3201      	adds	r2, #1
 800769c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800769e:	4b03      	ldr	r3, [pc, #12]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 80076a0:	681b      	ldr	r3, [r3, #0]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20005f64 	.word	0x20005f64

080076b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b29      	ldr	r3, [pc, #164]	@ (8007760 <prvAddCurrentTaskToDelayedList+0xb0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	4b28      	ldr	r3, [pc, #160]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fd ffb3 	bl	8005632 <uxListRemove>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10b      	bne.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80076d2:	4b24      	ldr	r3, [pc, #144]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	2201      	movs	r2, #1
 80076da:	fa02 f303 	lsl.w	r3, r2, r3
 80076de:	43da      	mvns	r2, r3
 80076e0:	4b21      	ldr	r3, [pc, #132]	@ (8007768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4013      	ands	r3, r2
 80076e6:	4a20      	ldr	r2, [pc, #128]	@ (8007768 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f0:	d10a      	bne.n	8007708 <prvAddCurrentTaskToDelayedList+0x58>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d007      	beq.n	8007708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3304      	adds	r3, #4
 80076fe:	4619      	mov	r1, r3
 8007700:	481a      	ldr	r0, [pc, #104]	@ (800776c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007702:	f7fd ff3b 	bl	800557c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007706:	e026      	b.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007710:	4b14      	ldr	r3, [pc, #80]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d209      	bcs.n	8007734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007720:	4b13      	ldr	r3, [pc, #76]	@ (8007770 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4b0f      	ldr	r3, [pc, #60]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3304      	adds	r3, #4
 800772a:	4619      	mov	r1, r3
 800772c:	4610      	mov	r0, r2
 800772e:	f7fd ff48 	bl	80055c2 <vListInsert>
}
 8007732:	e010      	b.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007734:	4b0f      	ldr	r3, [pc, #60]	@ (8007774 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b0a      	ldr	r3, [pc, #40]	@ (8007764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3304      	adds	r3, #4
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7fd ff3e 	bl	80055c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007746:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	429a      	cmp	r2, r3
 800774e:	d202      	bcs.n	8007756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007750:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6013      	str	r3, [r2, #0]
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20006068 	.word	0x20006068
 8007764:	20005f64 	.word	0x20005f64
 8007768:	2000606c 	.word	0x2000606c
 800776c:	20006050 	.word	0x20006050
 8007770:	20006020 	.word	0x20006020
 8007774:	2000601c 	.word	0x2000601c
 8007778:	20006084 	.word	0x20006084

0800777c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3b04      	subs	r3, #4
 800778c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3b04      	subs	r3, #4
 800779a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f023 0201 	bic.w	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077ac:	4a08      	ldr	r2, [pc, #32]	@ (80077d0 <pxPortInitialiseStack+0x54>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b14      	subs	r3, #20
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b20      	subs	r3, #32
 80077c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr
 80077d0:	080077d5 	.word	0x080077d5

080077d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80077da:	2300      	movs	r3, #0
 80077dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077de:	4b12      	ldr	r3, [pc, #72]	@ (8007828 <prvTaskExitError+0x54>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e6:	d00b      	beq.n	8007800 <prvTaskExitError+0x2c>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	60fb      	str	r3, [r7, #12]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <prvTaskExitError+0x28>
	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
}
 8007812:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007814:	bf00      	nop
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d0fc      	beq.n	8007816 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	2000000c 	.word	0x2000000c
 800782c:	00000000 	.word	0x00000000

08007830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007830:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <pxCurrentTCBConst2>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800783a:	f380 8809 	msr	PSP, r0
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8811 	msr	BASEPRI, r0
 800784a:	f04e 0e0d 	orr.w	lr, lr, #13
 800784e:	4770      	bx	lr

08007850 <pxCurrentTCBConst2>:
 8007850:	20005f64 	.word	0x20005f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop

08007858 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007858:	4806      	ldr	r0, [pc, #24]	@ (8007874 <prvPortStartFirstTask+0x1c>)
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f380 8808 	msr	MSP, r0
 8007862:	b662      	cpsie	i
 8007864:	b661      	cpsie	f
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	df00      	svc	0
 8007870:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007872:	bf00      	nop
 8007874:	e000ed08 	.word	0xe000ed08

08007878 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800787e:	4b32      	ldr	r3, [pc, #200]	@ (8007948 <xPortStartScheduler+0xd0>)
 8007880:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	22ff      	movs	r2, #255	@ 0xff
 800788e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4b2a      	ldr	r3, [pc, #168]	@ (800794c <xPortStartScheduler+0xd4>)
 80078a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078a8:	2207      	movs	r2, #7
 80078aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ac:	e009      	b.n	80078c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078ae:	4b28      	ldr	r3, [pc, #160]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4a26      	ldr	r2, [pc, #152]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b80      	cmp	r3, #128	@ 0x80
 80078cc:	d0ef      	beq.n	80078ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078ce:	4b20      	ldr	r3, [pc, #128]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f1c3 0307 	rsb	r3, r3, #7
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d00b      	beq.n	80078f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60bb      	str	r3, [r7, #8]
}
 80078ec:	bf00      	nop
 80078ee:	bf00      	nop
 80078f0:	e7fd      	b.n	80078ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078f2:	4b17      	ldr	r3, [pc, #92]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	021b      	lsls	r3, r3, #8
 80078f8:	4a15      	ldr	r2, [pc, #84]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078fc:	4b14      	ldr	r3, [pc, #80]	@ (8007950 <xPortStartScheduler+0xd8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007904:	4a12      	ldr	r2, [pc, #72]	@ (8007950 <xPortStartScheduler+0xd8>)
 8007906:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007910:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <xPortStartScheduler+0xdc>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a0f      	ldr	r2, [pc, #60]	@ (8007954 <xPortStartScheduler+0xdc>)
 8007916:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800791a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800791c:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <xPortStartScheduler+0xdc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a0c      	ldr	r2, [pc, #48]	@ (8007954 <xPortStartScheduler+0xdc>)
 8007922:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007926:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007928:	f000 f8b8 	bl	8007a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800792c:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <xPortStartScheduler+0xe0>)
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007932:	f7ff ff91 	bl	8007858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007936:	f7ff fa61 	bl	8006dfc <vTaskSwitchContext>
	prvTaskExitError();
 800793a:	f7ff ff4b 	bl	80077d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	e000e400 	.word	0xe000e400
 800794c:	20006090 	.word	0x20006090
 8007950:	20006094 	.word	0x20006094
 8007954:	e000ed20 	.word	0xe000ed20
 8007958:	2000000c 	.word	0x2000000c

0800795c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	607b      	str	r3, [r7, #4]
}
 8007974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007976:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <vPortEnterCritical+0x58>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	4a0d      	ldr	r2, [pc, #52]	@ (80079b4 <vPortEnterCritical+0x58>)
 800797e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007980:	4b0c      	ldr	r3, [pc, #48]	@ (80079b4 <vPortEnterCritical+0x58>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d110      	bne.n	80079aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <vPortEnterCritical+0x5c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00b      	beq.n	80079aa <vPortEnterCritical+0x4e>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	603b      	str	r3, [r7, #0]
}
 80079a4:	bf00      	nop
 80079a6:	bf00      	nop
 80079a8:	e7fd      	b.n	80079a6 <vPortEnterCritical+0x4a>
	}
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	2000000c 	.word	0x2000000c
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079c2:	4b12      	ldr	r3, [pc, #72]	@ (8007a0c <vPortExitCritical+0x50>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10b      	bne.n	80079e2 <vPortExitCritical+0x26>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	607b      	str	r3, [r7, #4]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079e2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a0c <vPortExitCritical+0x50>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	4a08      	ldr	r2, [pc, #32]	@ (8007a0c <vPortExitCritical+0x50>)
 80079ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ec:	4b07      	ldr	r3, [pc, #28]	@ (8007a0c <vPortExitCritical+0x50>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <vPortExitCritical+0x44>
 80079f4:	2300      	movs	r3, #0
 80079f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f383 8811 	msr	BASEPRI, r3
}
 80079fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bc80      	pop	{r7}
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	2000000c 	.word	0x2000000c

08007a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a10:	f3ef 8009 	mrs	r0, PSP
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4b0d      	ldr	r3, [pc, #52]	@ (8007a50 <pxCurrentTCBConst>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a20:	6010      	str	r0, [r2, #0]
 8007a22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a2a:	f380 8811 	msr	BASEPRI, r0
 8007a2e:	f7ff f9e5 	bl	8006dfc <vTaskSwitchContext>
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a46:	f380 8809 	msr	PSP, r0
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	4770      	bx	lr

08007a50 <pxCurrentTCBConst>:
 8007a50:	20005f64 	.word	0x20005f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a72:	f7ff f905 	bl	8006c80 <xTaskIncrementTick>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	@ (8007a98 <SysTick_Handler+0x40>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f383 8811 	msr	BASEPRI, r3
}
 8007a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x30>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aac:	4b09      	ldr	r3, [pc, #36]	@ (8007ad4 <vPortSetupTimerInterrupt+0x38>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a09      	ldr	r2, [pc, #36]	@ (8007ad8 <vPortSetupTimerInterrupt+0x3c>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	4a08      	ldr	r2, [pc, #32]	@ (8007adc <vPortSetupTimerInterrupt+0x40>)
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007abe:	4b03      	ldr	r3, [pc, #12]	@ (8007acc <vPortSetupTimerInterrupt+0x30>)
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr
 8007acc:	e000e010 	.word	0xe000e010
 8007ad0:	e000e018 	.word	0xe000e018
 8007ad4:	20000000 	.word	0x20000000
 8007ad8:	10624dd3 	.word	0x10624dd3
 8007adc:	e000e014 	.word	0xe000e014

08007ae0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ae6:	f3ef 8305 	mrs	r3, IPSR
 8007aea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d915      	bls.n	8007b1e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007af2:	4a17      	ldr	r2, [pc, #92]	@ (8007b50 <vPortValidateInterruptPriority+0x70>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007afc:	4b15      	ldr	r3, [pc, #84]	@ (8007b54 <vPortValidateInterruptPriority+0x74>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	7afa      	ldrb	r2, [r7, #11]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d20b      	bcs.n	8007b1e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <vPortValidateInterruptPriority+0x78>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b26:	4b0d      	ldr	r3, [pc, #52]	@ (8007b5c <vPortValidateInterruptPriority+0x7c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d90b      	bls.n	8007b46 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b32:	f383 8811 	msr	BASEPRI, r3
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	f3bf 8f4f 	dsb	sy
 8007b3e:	603b      	str	r3, [r7, #0]
}
 8007b40:	bf00      	nop
 8007b42:	bf00      	nop
 8007b44:	e7fd      	b.n	8007b42 <vPortValidateInterruptPriority+0x62>
	}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr
 8007b50:	e000e3f0 	.word	0xe000e3f0
 8007b54:	20006090 	.word	0x20006090
 8007b58:	e000ed0c 	.word	0xe000ed0c
 8007b5c:	20006094 	.word	0x20006094

08007b60 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8007b68:	f7fe ffbe 	bl	8006ae8 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f00f f991 	bl	8016e94 <malloc>
 8007b72:	4603      	mov	r3, r0
 8007b74:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b76:	f7fe ffc5 	bl	8006b04 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
	if( pv )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d006      	beq.n	8007ba0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 8007b92:	f7fe ffa9 	bl	8006ae8 <vTaskSuspendAll>
		{
			free( pv );
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f00f f984 	bl	8016ea4 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8007b9c:	f7fe ffb2 	bl	8006b04 <xTaskResumeAll>
	}
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	330c      	adds	r3, #12
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f003 f9c3 	bl	800af48 <tcpip_send_msg_wait_sem>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <netconn_apimsg+0x2e>
    return apimsg->err;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007bd4:	e001      	b.n	8007bda <netconn_apimsg+0x32>
  }
  return err;
 8007bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	@ 0x28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	603a      	str	r2, [r7, #0]
 8007bee:	71fb      	strb	r3, [r7, #7]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 ff35 	bl	8008a68 <netconn_alloc>
 8007bfe:	6278      	str	r0, [r7, #36]	@ 0x24
  if (conn != NULL) {
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d054      	beq.n	8007cb0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007c06:	79bb      	ldrb	r3, [r7, #6]
 8007c08:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	4619      	mov	r1, r3
 8007c14:	4829      	ldr	r0, [pc, #164]	@ (8007cbc <netconn_new_with_proto_and_callback+0xd8>)
 8007c16:	f7ff ffc7 	bl	8007ba8 <netconn_apimsg>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (err != ERR_OK) {
 8007c20:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d043      	beq.n	8007cb0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <netconn_new_with_proto_and_callback+0x58>
 8007c30:	4b23      	ldr	r3, [pc, #140]	@ (8007cc0 <netconn_new_with_proto_and_callback+0xdc>)
 8007c32:	2289      	movs	r2, #137	@ 0x89
 8007c34:	4923      	ldr	r1, [pc, #140]	@ (8007cc4 <netconn_new_with_proto_and_callback+0xe0>)
 8007c36:	4824      	ldr	r0, [pc, #144]	@ (8007cc8 <netconn_new_with_proto_and_callback+0xe4>)
 8007c38:	f00f faac 	bl	8017194 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	3310      	adds	r3, #16
 8007c40:	4618      	mov	r0, r3
 8007c42:	f00d f96c 	bl	8014f1e <sys_mbox_valid>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d105      	bne.n	8007c58 <netconn_new_with_proto_and_callback+0x74>
 8007c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cc0 <netconn_new_with_proto_and_callback+0xdc>)
 8007c4e:	228a      	movs	r2, #138	@ 0x8a
 8007c50:	491e      	ldr	r1, [pc, #120]	@ (8007ccc <netconn_new_with_proto_and_callback+0xe8>)
 8007c52:	481d      	ldr	r0, [pc, #116]	@ (8007cc8 <netconn_new_with_proto_and_callback+0xe4>)
 8007c54:	f00f fa9e 	bl	8017194 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	3314      	adds	r3, #20
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f00d f95e 	bl	8014f1e <sys_mbox_valid>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <netconn_new_with_proto_and_callback+0x90>
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <netconn_new_with_proto_and_callback+0xdc>)
 8007c6a:	228c      	movs	r2, #140	@ 0x8c
 8007c6c:	4918      	ldr	r1, [pc, #96]	@ (8007cd0 <netconn_new_with_proto_and_callback+0xec>)
 8007c6e:	4816      	ldr	r0, [pc, #88]	@ (8007cc8 <netconn_new_with_proto_and_callback+0xe4>)
 8007c70:	f00f fa90 	bl	8017194 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	330c      	adds	r3, #12
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f00d f9df 	bl	801503c <sys_sem_valid>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d105      	bne.n	8007c90 <netconn_new_with_proto_and_callback+0xac>
 8007c84:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <netconn_new_with_proto_and_callback+0xdc>)
 8007c86:	228f      	movs	r2, #143	@ 0x8f
 8007c88:	4912      	ldr	r1, [pc, #72]	@ (8007cd4 <netconn_new_with_proto_and_callback+0xf0>)
 8007c8a:	480f      	ldr	r0, [pc, #60]	@ (8007cc8 <netconn_new_with_proto_and_callback+0xe4>)
 8007c8c:	f00f fa82 	bl	8017194 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	330c      	adds	r3, #12
 8007c94:	4618      	mov	r0, r3
 8007c96:	f00d f9c4 	bl	8015022 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	3310      	adds	r3, #16
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f00d f8a0 	bl	8014de4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ca6:	2007      	movs	r0, #7
 8007ca8:	f003 fdec 	bl	800b884 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3728      	adds	r7, #40	@ 0x28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	08008a11 	.word	0x08008a11
 8007cc0:	08018140 	.word	0x08018140
 8007cc4:	08018174 	.word	0x08018174
 8007cc8:	08018198 	.word	0x08018198
 8007ccc:	080181c0 	.word	0x080181c0
 8007cd0:	080181d8 	.word	0x080181d8
 8007cd4:	080181fc 	.word	0x080181fc

08007cd8 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <netconn_delete+0x12>
    return ERR_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e016      	b.n	8007d18 <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007cee:	2329      	movs	r3, #41	@ 0x29
 8007cf0:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4809      	ldr	r0, [pc, #36]	@ (8007d20 <netconn_delete+0x48>)
 8007cfa:	f7ff ff55 	bl	8007ba8 <netconn_apimsg>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d002      	beq.n	8007d10 <netconn_delete+0x38>
    return err;
 8007d0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007d0e:	e003      	b.n	8007d18 <netconn_delete+0x40>
  }

  netconn_free(conn);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 ff21 	bl	8008b58 <netconn_free>

  return ERR_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3720      	adds	r7, #32
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	08008fe5 	.word	0x08008fe5

08007d24 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08a      	sub	sp, #40	@ 0x28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d108      	bne.n	8007d4a <netconn_getaddr+0x26>
 8007d38:	4b1c      	ldr	r3, [pc, #112]	@ (8007dac <netconn_getaddr+0x88>)
 8007d3a:	22d9      	movs	r2, #217	@ 0xd9
 8007d3c:	491c      	ldr	r1, [pc, #112]	@ (8007db0 <netconn_getaddr+0x8c>)
 8007d3e:	481d      	ldr	r0, [pc, #116]	@ (8007db4 <netconn_getaddr+0x90>)
 8007d40:	f00f fa28 	bl	8017194 <iprintf>
 8007d44:	f06f 030f 	mvn.w	r3, #15
 8007d48:	e02b      	b.n	8007da2 <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d108      	bne.n	8007d62 <netconn_getaddr+0x3e>
 8007d50:	4b16      	ldr	r3, [pc, #88]	@ (8007dac <netconn_getaddr+0x88>)
 8007d52:	22da      	movs	r2, #218	@ 0xda
 8007d54:	4918      	ldr	r1, [pc, #96]	@ (8007db8 <netconn_getaddr+0x94>)
 8007d56:	4817      	ldr	r0, [pc, #92]	@ (8007db4 <netconn_getaddr+0x90>)
 8007d58:	f00f fa1c 	bl	8017194 <iprintf>
 8007d5c:	f06f 030f 	mvn.w	r3, #15
 8007d60:	e01f      	b.n	8007da2 <netconn_getaddr+0x7e>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <netconn_getaddr+0x56>
 8007d68:	4b10      	ldr	r3, [pc, #64]	@ (8007dac <netconn_getaddr+0x88>)
 8007d6a:	22db      	movs	r2, #219	@ 0xdb
 8007d6c:	4913      	ldr	r1, [pc, #76]	@ (8007dbc <netconn_getaddr+0x98>)
 8007d6e:	4811      	ldr	r0, [pc, #68]	@ (8007db4 <netconn_getaddr+0x90>)
 8007d70:	f00f fa10 	bl	8017194 <iprintf>
 8007d74:	f06f 030f 	mvn.w	r3, #15
 8007d78:	e013      	b.n	8007da2 <netconn_getaddr+0x7e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8007d7e:	78fb      	ldrb	r3, [r7, #3]
 8007d80:	f887 3020 	strb.w	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	61bb      	str	r3, [r7, #24]
  msg.msg.ad.port = port;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	61fb      	str	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	4619      	mov	r1, r3
 8007d92:	480b      	ldr	r0, [pc, #44]	@ (8007dc0 <netconn_getaddr+0x9c>)
 8007d94:	f7ff ff08 	bl	8007ba8 <netconn_apimsg>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8007d9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3728      	adds	r7, #40	@ 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	08018140 	.word	0x08018140
 8007db0:	08018218 	.word	0x08018218
 8007db4:	08018198 	.word	0x08018198
 8007db8:	08018238 	.word	0x08018238
 8007dbc:	08018258 	.word	0x08018258
 8007dc0:	08009b7d 	.word	0x08009b7d

08007dc4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08a      	sub	sp, #40	@ 0x28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <netconn_connect+0x28>
 8007dd8:	4b11      	ldr	r3, [pc, #68]	@ (8007e20 <netconn_connect+0x5c>)
 8007dda:	f240 122b 	movw	r2, #299	@ 0x12b
 8007dde:	4911      	ldr	r1, [pc, #68]	@ (8007e24 <netconn_connect+0x60>)
 8007de0:	4811      	ldr	r0, [pc, #68]	@ (8007e28 <netconn_connect+0x64>)
 8007de2:	f00f f9d7 	bl	8017194 <iprintf>
 8007de6:	f06f 030f 	mvn.w	r3, #15
 8007dea:	e015      	b.n	8007e18 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8007df2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <netconn_connect+0x68>)
 8007df4:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007dfe:	88fb      	ldrh	r3, [r7, #6]
 8007e00:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8007e02:	f107 0310 	add.w	r3, r7, #16
 8007e06:	4619      	mov	r1, r3
 8007e08:	4809      	ldr	r0, [pc, #36]	@ (8007e30 <netconn_connect+0x6c>)
 8007e0a:	f7ff fecd 	bl	8007ba8 <netconn_apimsg>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8007e14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3728      	adds	r7, #40	@ 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	08018140 	.word	0x08018140
 8007e24:	08018294 	.word	0x08018294
 8007e28:	08018198 	.word	0x08018198
 8007e2c:	0801acb8 	.word	0x0801acb8
 8007e30:	08009339 	.word	0x08009339

08007e34 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <netconn_disconnect+0x22>
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <netconn_disconnect+0x44>)
 8007e44:	f240 124b 	movw	r2, #331	@ 0x14b
 8007e48:	490c      	ldr	r1, [pc, #48]	@ (8007e7c <netconn_disconnect+0x48>)
 8007e4a:	480d      	ldr	r0, [pc, #52]	@ (8007e80 <netconn_disconnect+0x4c>)
 8007e4c:	f00f f9a2 	bl	8017194 <iprintf>
 8007e50:	f06f 030f 	mvn.w	r3, #15
 8007e54:	e00b      	b.n	8007e6e <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8007e5a:	f107 0308 	add.w	r3, r7, #8
 8007e5e:	4619      	mov	r1, r3
 8007e60:	4808      	ldr	r0, [pc, #32]	@ (8007e84 <netconn_disconnect+0x50>)
 8007e62:	f7ff fea1 	bl	8007ba8 <netconn_apimsg>
 8007e66:	4603      	mov	r3, r0
 8007e68:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007e6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3720      	adds	r7, #32
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	08018140 	.word	0x08018140
 8007e7c:	080182b4 	.word	0x080182b4
 8007e80:	08018198 	.word	0x08018198
 8007e84:	080094fd 	.word	0x080094fd

08007e88 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	@ 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <netconn_recv_data+0x28>
 8007e9c:	4b62      	ldr	r3, [pc, #392]	@ (8008028 <netconn_recv_data+0x1a0>)
 8007e9e:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8007ea2:	4962      	ldr	r1, [pc, #392]	@ (800802c <netconn_recv_data+0x1a4>)
 8007ea4:	4862      	ldr	r0, [pc, #392]	@ (8008030 <netconn_recv_data+0x1a8>)
 8007ea6:	f00f f975 	bl	8017194 <iprintf>
 8007eaa:	f06f 030f 	mvn.w	r3, #15
 8007eae:	e0b6      	b.n	800801e <netconn_recv_data+0x196>
  *new_buf = NULL;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <netconn_recv_data+0x48>
 8007ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8008028 <netconn_recv_data+0x1a0>)
 8007ebe:	f240 12e9 	movw	r2, #489	@ 0x1e9
 8007ec2:	495c      	ldr	r1, [pc, #368]	@ (8008034 <netconn_recv_data+0x1ac>)
 8007ec4:	485a      	ldr	r0, [pc, #360]	@ (8008030 <netconn_recv_data+0x1a8>)
 8007ec6:	f00f f965 	bl	8017194 <iprintf>
 8007eca:	f06f 030f 	mvn.w	r3, #15
 8007ece:	e0a6      	b.n	800801e <netconn_recv_data+0x196>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d115      	bne.n	8007f08 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3310      	adds	r3, #16
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f00d f81c 	bl	8014f1e <sys_mbox_valid>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10d      	bne.n	8007f08 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3314      	adds	r3, #20
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f00d f814 	bl	8014f1e <sys_mbox_valid>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <netconn_recv_data+0x7a>
 8007efc:	f06f 030a 	mvn.w	r3, #10
 8007f00:	e08d      	b.n	800801e <netconn_recv_data+0x196>
 8007f02:	f06f 030e 	mvn.w	r3, #14
 8007f06:	e08a      	b.n	800801e <netconn_recv_data+0x196>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f00d f806 	bl	8014f1e <sys_mbox_valid>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <netconn_recv_data+0xa4>
 8007f18:	4b43      	ldr	r3, [pc, #268]	@ (8008028 <netconn_recv_data+0x1a0>)
 8007f1a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8007f1e:	4946      	ldr	r1, [pc, #280]	@ (8008038 <netconn_recv_data+0x1b0>)
 8007f20:	4843      	ldr	r0, [pc, #268]	@ (8008030 <netconn_recv_data+0x1a8>)
 8007f22:	f00f f937 	bl	8017194 <iprintf>
 8007f26:	f06f 030a 	mvn.w	r3, #10
 8007f2a:	e078      	b.n	800801e <netconn_recv_data+0x196>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f32:	f113 0f0c 	cmn.w	r3, #12
 8007f36:	da03      	bge.n	8007f40 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007f3e:	e06e      	b.n	800801e <netconn_recv_data+0x196>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3310      	adds	r3, #16
 8007f44:	f107 011c 	add.w	r1, r7, #28
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f00c ff8c 	bl	8014e68 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f58:	2b10      	cmp	r3, #16
 8007f5a:	d138      	bne.n	8007fce <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	60bb      	str	r3, [r7, #8]
    if (buf != NULL) {
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	891b      	ldrh	r3, [r3, #8]
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	e001      	b.n	8007f72 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	613b      	str	r3, [r7, #16]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8007f72:	f107 0308 	add.w	r3, r7, #8
 8007f76:	4619      	mov	r1, r3
 8007f78:	4830      	ldr	r0, [pc, #192]	@ (800803c <netconn_recv_data+0x1b4>)
 8007f7a:	f7ff fe15 	bl	8007ba8 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d120      	bne.n	8007fc6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <netconn_recv_data+0x110>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f90:	2200      	movs	r2, #0
 8007f92:	2101      	movs	r1, #1
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10b      	bne.n	8007fb8 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <netconn_recv_data+0x12a>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007fb0:	e035      	b.n	800801e <netconn_recv_data+0x196>
 8007fb2:	f06f 030d 	mvn.w	r3, #13
 8007fb6:	e032      	b.n	800801e <netconn_recv_data+0x196>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007fb8:	2101      	movs	r1, #1
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f986 	bl	80082cc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007fc0:	f06f 030e 	mvn.w	r3, #14
 8007fc4:	e02b      	b.n	800801e <netconn_recv_data+0x196>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	891b      	ldrh	r3, [r3, #8]
 8007fca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007fcc:	e00d      	b.n	8007fea <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <netconn_recv_data+0x15a>
 8007fd4:	4b14      	ldr	r3, [pc, #80]	@ (8008028 <netconn_recv_data+0x1a0>)
 8007fd6:	f240 223e 	movw	r2, #574	@ 0x23e
 8007fda:	4919      	ldr	r1, [pc, #100]	@ (8008040 <netconn_recv_data+0x1b8>)
 8007fdc:	4814      	ldr	r0, [pc, #80]	@ (8008030 <netconn_recv_data+0x1a8>)
 8007fde:	f00f f8d9 	bl	8017194 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	891b      	ldrh	r3, [r3, #8]
 8007fe8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 8007fea:	f00d f8af 	bl	801514c <sys_arch_protect>
 8007fee:	6238      	str	r0, [r7, #32]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a1a      	ldr	r2, [r3, #32]
 8007ff4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ff6:	1ad2      	subs	r2, r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	621a      	str	r2, [r3, #32]
 8007ffc:	6a38      	ldr	r0, [r7, #32]
 8007ffe:	f00d f8b3 	bl	8015168 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <netconn_recv_data+0x18e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008016:	69fa      	ldr	r2, [r7, #28]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3728      	adds	r7, #40	@ 0x28
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	08018140 	.word	0x08018140
 800802c:	08018338 	.word	0x08018338
 8008030:	08018198 	.word	0x08018198
 8008034:	08018358 	.word	0x08018358
 8008038:	08018374 	.word	0x08018374
 800803c:	08009635 	.word	0x08009635
 8008040:	08018394 	.word	0x08018394

08008044 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d005      	beq.n	8008060 <netconn_recv_tcp_pbuf+0x1c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800805c:	2b10      	cmp	r3, #16
 800805e:	d009      	beq.n	8008074 <netconn_recv_tcp_pbuf+0x30>
 8008060:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <netconn_recv_tcp_pbuf+0x44>)
 8008062:	f240 225d 	movw	r2, #605	@ 0x25d
 8008066:	4909      	ldr	r1, [pc, #36]	@ (800808c <netconn_recv_tcp_pbuf+0x48>)
 8008068:	4809      	ldr	r0, [pc, #36]	@ (8008090 <netconn_recv_tcp_pbuf+0x4c>)
 800806a:	f00f f893 	bl	8017194 <iprintf>
 800806e:	f06f 030f 	mvn.w	r3, #15
 8008072:	e004      	b.n	800807e <netconn_recv_tcp_pbuf+0x3a>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7ff ff06 	bl	8007e88 <netconn_recv_data>
 800807c:	4603      	mov	r3, r0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	08018140 	.word	0x08018140
 800808c:	08018358 	.word	0x08018358
 8008090:	08018198 	.word	0x08018198

08008094 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <netconn_recv+0x28>
 80080a8:	4b31      	ldr	r3, [pc, #196]	@ (8008170 <netconn_recv+0xdc>)
 80080aa:	f44f 721d 	mov.w	r2, #628	@ 0x274
 80080ae:	4931      	ldr	r1, [pc, #196]	@ (8008174 <netconn_recv+0xe0>)
 80080b0:	4831      	ldr	r0, [pc, #196]	@ (8008178 <netconn_recv+0xe4>)
 80080b2:	f00f f86f 	bl	8017194 <iprintf>
 80080b6:	f06f 030f 	mvn.w	r3, #15
 80080ba:	e054      	b.n	8008166 <netconn_recv+0xd2>
  *new_buf = NULL;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <netconn_recv+0x48>
 80080c8:	4b29      	ldr	r3, [pc, #164]	@ (8008170 <netconn_recv+0xdc>)
 80080ca:	f240 2276 	movw	r2, #630	@ 0x276
 80080ce:	492b      	ldr	r1, [pc, #172]	@ (800817c <netconn_recv+0xe8>)
 80080d0:	4829      	ldr	r0, [pc, #164]	@ (8008178 <netconn_recv+0xe4>)
 80080d2:	f00f f85f 	bl	8017194 <iprintf>
 80080d6:	f06f 030f 	mvn.w	r3, #15
 80080da:	e044      	b.n	8008166 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d139      	bne.n	800815c <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80080ec:	2006      	movs	r0, #6
 80080ee:	f003 fb77 	bl	800b7e0 <memp_malloc>
 80080f2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <netconn_recv+0x6c>
      return ERR_MEM;
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295
 80080fe:	e032      	b.n	8008166 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7ff febe 	bl	8007e88 <netconn_recv_data>
 800810c:	4603      	mov	r3, r0
 800810e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008110:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d006      	beq.n	8008126 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8008118:	6979      	ldr	r1, [r7, #20]
 800811a:	2006      	movs	r0, #6
 800811c:	f003 fbb2 	bl	800b884 <memp_free>
      return err;
 8008120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008124:	e01f      	b.n	8008166 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <netconn_recv+0xa6>
 800812c:	4b10      	ldr	r3, [pc, #64]	@ (8008170 <netconn_recv+0xdc>)
 800812e:	f240 228a 	movw	r2, #650	@ 0x28a
 8008132:	4913      	ldr	r1, [pc, #76]	@ (8008180 <netconn_recv+0xec>)
 8008134:	4810      	ldr	r0, [pc, #64]	@ (8008178 <netconn_recv+0xe4>)
 8008136:	f00f f82d 	bl	8017194 <iprintf>

    buf->p = p;
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2200      	movs	r2, #0
 800814a:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2200      	movs	r2, #0
 8008150:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	e004      	b.n	8008166 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff fe92 	bl	8007e88 <netconn_recv_data>
 8008164:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	08018140 	.word	0x08018140
 8008174:	08018338 	.word	0x08018338
 8008178:	08018198 	.word	0x08018198
 800817c:	08018358 	.word	0x08018358
 8008180:	080183a0 	.word	0x080183a0

08008184 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <netconn_send+0x24>
 8008194:	4b0d      	ldr	r3, [pc, #52]	@ (80081cc <netconn_send+0x48>)
 8008196:	f240 22c3 	movw	r2, #707	@ 0x2c3
 800819a:	490d      	ldr	r1, [pc, #52]	@ (80081d0 <netconn_send+0x4c>)
 800819c:	480d      	ldr	r0, [pc, #52]	@ (80081d4 <netconn_send+0x50>)
 800819e:	f00e fff9 	bl	8017194 <iprintf>
 80081a2:	f06f 030f 	mvn.w	r3, #15
 80081a6:	e00d      	b.n	80081c4 <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80081b0:	f107 0308 	add.w	r3, r7, #8
 80081b4:	4619      	mov	r1, r3
 80081b6:	4808      	ldr	r0, [pc, #32]	@ (80081d8 <netconn_send+0x54>)
 80081b8:	f7ff fcf6 	bl	8007ba8 <netconn_apimsg>
 80081bc:	4603      	mov	r3, r0
 80081be:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80081c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3720      	adds	r7, #32
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	08018140 	.word	0x08018140
 80081d0:	080183ac 	.word	0x080183ac
 80081d4:	08018198 	.word	0x08018198
 80081d8:	08009567 	.word	0x08009567

080081dc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	@ 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <netconn_write_partly+0x28>
 80081f0:	4b31      	ldr	r3, [pc, #196]	@ (80082b8 <netconn_write_partly+0xdc>)
 80081f2:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80081f6:	4931      	ldr	r1, [pc, #196]	@ (80082bc <netconn_write_partly+0xe0>)
 80081f8:	4831      	ldr	r0, [pc, #196]	@ (80082c0 <netconn_write_partly+0xe4>)
 80081fa:	f00e ffcb 	bl	8017194 <iprintf>
 80081fe:	f06f 030f 	mvn.w	r3, #15
 8008202:	e055      	b.n	80082b0 <netconn_write_partly+0xd4>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800820c:	2b10      	cmp	r3, #16
 800820e:	d009      	beq.n	8008224 <netconn_write_partly+0x48>
 8008210:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <netconn_write_partly+0xdc>)
 8008212:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8008216:	492b      	ldr	r1, [pc, #172]	@ (80082c4 <netconn_write_partly+0xe8>)
 8008218:	4829      	ldr	r0, [pc, #164]	@ (80082c0 <netconn_write_partly+0xe4>)
 800821a:	f00e ffbb 	bl	8017194 <iprintf>
 800821e:	f06f 0305 	mvn.w	r3, #5
 8008222:	e045      	b.n	80082b0 <netconn_write_partly+0xd4>
  if (size == 0) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <netconn_write_partly+0x52>
    return ERR_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	e040      	b.n	80082b0 <netconn_write_partly+0xd4>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d104      	bne.n	8008246 <netconn_write_partly+0x6a>
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <netconn_write_partly+0x6e>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <netconn_write_partly+0x70>
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008254:	2b00      	cmp	r3, #0
 8008256:	d005      	beq.n	8008264 <netconn_write_partly+0x88>
 8008258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <netconn_write_partly+0x88>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800825e:	f06f 0305 	mvn.w	r3, #5
 8008262:	e025      	b.n	80082b0 <netconn_write_partly+0xd4>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008276:	f107 0310 	add.w	r3, r7, #16
 800827a:	4619      	mov	r1, r3
 800827c:	4812      	ldr	r0, [pc, #72]	@ (80082c8 <netconn_write_partly+0xec>)
 800827e:	f7ff fc93 	bl	8007ba8 <netconn_apimsg>
 8008282:	4603      	mov	r3, r0
 8008284:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008288:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10d      	bne.n	80082ac <netconn_write_partly+0xd0>
 8008290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <netconn_write_partly+0xd0>
    if (dontblock) {
 8008296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <netconn_write_partly+0xca>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	e002      	b.n	80082ac <netconn_write_partly+0xd0>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082ac:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3728      	adds	r7, #40	@ 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	08018140 	.word	0x08018140
 80082bc:	080183c8 	.word	0x080183c8
 80082c0:	08018198 	.word	0x08018198
 80082c4:	080183e4 	.word	0x080183e4
 80082c8:	08009a1d 	.word	0x08009a1d

080082cc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <netconn_close_shutdown+0x26>
 80082de:	4b0f      	ldr	r3, [pc, #60]	@ (800831c <netconn_close_shutdown+0x50>)
 80082e0:	f44f 724a 	mov.w	r2, #808	@ 0x328
 80082e4:	490e      	ldr	r1, [pc, #56]	@ (8008320 <netconn_close_shutdown+0x54>)
 80082e6:	480f      	ldr	r0, [pc, #60]	@ (8008324 <netconn_close_shutdown+0x58>)
 80082e8:	f00e ff54 	bl	8017194 <iprintf>
 80082ec:	f06f 030f 	mvn.w	r3, #15
 80082f0:	e00f      	b.n	8008312 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80082fa:	2329      	movs	r3, #41	@ 0x29
 80082fc:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80082fe:	f107 0308 	add.w	r3, r7, #8
 8008302:	4619      	mov	r1, r3
 8008304:	4808      	ldr	r0, [pc, #32]	@ (8008328 <netconn_close_shutdown+0x5c>)
 8008306:	f7ff fc4f 	bl	8007ba8 <netconn_apimsg>
 800830a:	4603      	mov	r3, r0
 800830c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800830e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3720      	adds	r7, #32
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	08018140 	.word	0x08018140
 8008320:	08018408 	.word	0x08018408
 8008324:	08018198 	.word	0x08018198
 8008328:	08009cb5 	.word	0x08009cb5

0800832c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <recv_udp+0x20>
 8008340:	4b43      	ldr	r3, [pc, #268]	@ (8008450 <recv_udp+0x124>)
 8008342:	22b1      	movs	r2, #177	@ 0xb1
 8008344:	4943      	ldr	r1, [pc, #268]	@ (8008454 <recv_udp+0x128>)
 8008346:	4844      	ldr	r0, [pc, #272]	@ (8008458 <recv_udp+0x12c>)
 8008348:	f00e ff24 	bl	8017194 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d105      	bne.n	800835e <recv_udp+0x32>
 8008352:	4b3f      	ldr	r3, [pc, #252]	@ (8008450 <recv_udp+0x124>)
 8008354:	22b2      	movs	r2, #178	@ 0xb2
 8008356:	4941      	ldr	r1, [pc, #260]	@ (800845c <recv_udp+0x130>)
 8008358:	483f      	ldr	r0, [pc, #252]	@ (8008458 <recv_udp+0x12c>)
 800835a:	f00e ff1b 	bl	8017194 <iprintf>
  conn = (struct netconn *)arg;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	627b      	str	r3, [r7, #36]	@ 0x24

  if (conn == NULL) {
 8008362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <recv_udp+0x44>
    pbuf_free(p);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f004 f823 	bl	800c3b4 <pbuf_free>
    return;
 800836e:	e06b      	b.n	8008448 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d005      	beq.n	8008386 <recv_udp+0x5a>
 800837a:	4b35      	ldr	r3, [pc, #212]	@ (8008450 <recv_udp+0x124>)
 800837c:	22ba      	movs	r2, #186	@ 0xba
 800837e:	4938      	ldr	r1, [pc, #224]	@ (8008460 <recv_udp+0x134>)
 8008380:	4835      	ldr	r0, [pc, #212]	@ (8008458 <recv_udp+0x12c>)
 8008382:	f00e ff07 	bl	8017194 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 8008386:	f00c fee1 	bl	801514c <sys_arch_protect>
 800838a:	6238      	str	r0, [r7, #32]
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	6a38      	ldr	r0, [r7, #32]
 8008394:	f00c fee8 	bl	8015168 <sys_arch_unprotect>
  if (!sys_mbox_valid(&conn->recvmbox) ||
 8008398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839a:	3310      	adds	r3, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f00c fdbe 	bl	8014f1e <sys_mbox_valid>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	891b      	ldrh	r3, [r3, #8]
 80083ac:	461a      	mov	r2, r3
 80083ae:	69fb      	ldr	r3, [r7, #28]
 80083b0:	441a      	add	r2, r3
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	69db      	ldr	r3, [r3, #28]
  if (!sys_mbox_valid(&conn->recvmbox) ||
 80083b6:	429a      	cmp	r2, r3
 80083b8:	dd03      	ble.n	80083c2 <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f003 fffa 	bl	800c3b4 <pbuf_free>
    return;
 80083c0:	e042      	b.n	8008448 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80083c2:	2006      	movs	r0, #6
 80083c4:	f003 fa0c 	bl	800b7e0 <memp_malloc>
 80083c8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d103      	bne.n	80083d8 <recv_udp+0xac>
    pbuf_free(p);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f003 ffef 	bl	800c3b4 <pbuf_free>
    return;
 80083d6:	e037      	b.n	8008448 <recv_udp+0x11c>
  } else {
    buf->p = p;
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d002      	beq.n	80083f0 <recv_udp+0xc4>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	e000      	b.n	80083f2 <recv_udp+0xc6>
 80083f0:	2300      	movs	r3, #0
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80083fa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	891b      	ldrh	r3, [r3, #8]
 8008400:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	3310      	adds	r3, #16
 8008406:	69b9      	ldr	r1, [r7, #24]
 8008408:	4618      	mov	r0, r3
 800840a:	f00c fd13 	bl	8014e34 <sys_mbox_trypost>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <recv_udp+0xf0>
    netbuf_delete(buf);
 8008414:	69b8      	ldr	r0, [r7, #24]
 8008416:	f001 fd13 	bl	8009e40 <netbuf_delete>
    return;
 800841a:	e015      	b.n	8008448 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800841c:	f00c fe96 	bl	801514c <sys_arch_protect>
 8008420:	6138      	str	r0, [r7, #16]
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	6a1a      	ldr	r2, [r3, #32]
 8008426:	8afb      	ldrh	r3, [r7, #22]
 8008428:	441a      	add	r2, r3
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	621a      	str	r2, [r3, #32]
 800842e:	6938      	ldr	r0, [r7, #16]
 8008430:	f00c fe9a 	bl	8015168 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008438:	2b00      	cmp	r3, #0
 800843a:	d005      	beq.n	8008448 <recv_udp+0x11c>
 800843c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008440:	8afa      	ldrh	r2, [r7, #22]
 8008442:	2100      	movs	r1, #0
 8008444:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008446:	4798      	blx	r3
  }
}
 8008448:	3728      	adds	r7, #40	@ 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	08018424 	.word	0x08018424
 8008454:	08018458 	.word	0x08018458
 8008458:	0801847c 	.word	0x0801847c
 800845c:	080184a4 	.word	0x080184a4
 8008460:	080184c4 	.word	0x080184c4

08008464 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d105      	bne.n	8008484 <recv_tcp+0x20>
 8008478:	4b3f      	ldr	r3, [pc, #252]	@ (8008578 <recv_tcp+0x114>)
 800847a:	22f9      	movs	r2, #249	@ 0xf9
 800847c:	493f      	ldr	r1, [pc, #252]	@ (800857c <recv_tcp+0x118>)
 800847e:	4840      	ldr	r0, [pc, #256]	@ (8008580 <recv_tcp+0x11c>)
 8008480:	f00e fe88 	bl	8017194 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d105      	bne.n	8008496 <recv_tcp+0x32>
 800848a:	4b3b      	ldr	r3, [pc, #236]	@ (8008578 <recv_tcp+0x114>)
 800848c:	22fa      	movs	r2, #250	@ 0xfa
 800848e:	493d      	ldr	r1, [pc, #244]	@ (8008584 <recv_tcp+0x120>)
 8008490:	483b      	ldr	r0, [pc, #236]	@ (8008580 <recv_tcp+0x11c>)
 8008492:	f00e fe7f 	bl	8017194 <iprintf>
  conn = (struct netconn *)arg;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d102      	bne.n	80084a6 <recv_tcp+0x42>
    return ERR_VAL;
 80084a0:	f06f 0305 	mvn.w	r3, #5
 80084a4:	e063      	b.n	800856e <recv_tcp+0x10a>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	68ba      	ldr	r2, [r7, #8]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d006      	beq.n	80084be <recv_tcp+0x5a>
 80084b0:	4b31      	ldr	r3, [pc, #196]	@ (8008578 <recv_tcp+0x114>)
 80084b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084b6:	4934      	ldr	r1, [pc, #208]	@ (8008588 <recv_tcp+0x124>)
 80084b8:	4831      	ldr	r0, [pc, #196]	@ (8008580 <recv_tcp+0x11c>)
 80084ba:	f00e fe6b 	bl	8017194 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f00c fd2b 	bl	8014f1e <sys_mbox_valid>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d10d      	bne.n	80084ea <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	891b      	ldrh	r3, [r3, #8]
 80084d8:	4619      	mov	r1, r3
 80084da:	68b8      	ldr	r0, [r7, #8]
 80084dc:	f004 fd1e 	bl	800cf1c <tcp_recved>
      pbuf_free(p);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f003 ff67 	bl	800c3b4 <pbuf_free>
    }
    return ERR_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e041      	b.n	800856e <recv_tcp+0x10a>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80084ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d011      	beq.n	8008516 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00e      	beq.n	8008516 <recv_tcp+0xb2>
 80084f8:	f00c fe28 	bl	801514c <sys_arch_protect>
 80084fc:	6178      	str	r0, [r7, #20]
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008504:	f113 0f0c 	cmn.w	r3, #12
 8008508:	db02      	blt.n	8008510 <recv_tcp+0xac>
 800850a:	69bb      	ldr	r3, [r7, #24]
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	721a      	strb	r2, [r3, #8]
 8008510:	6978      	ldr	r0, [r7, #20]
 8008512:	f00c fe29 	bl	8015168 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <recv_tcp+0xc0>
    len = p->tot_len;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	891b      	ldrh	r3, [r3, #8]
 8008520:	83fb      	strh	r3, [r7, #30]
 8008522:	e001      	b.n	8008528 <recv_tcp+0xc4>
  } else {
    len = 0;
 8008524:	2300      	movs	r3, #0
 8008526:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	3310      	adds	r3, #16
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4618      	mov	r0, r3
 8008530:	f00c fc80 	bl	8014e34 <sys_mbox_trypost>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800853a:	f04f 33ff 	mov.w	r3, #4294967295
 800853e:	e016      	b.n	800856e <recv_tcp+0x10a>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 8008540:	f00c fe04 	bl	801514c <sys_arch_protect>
 8008544:	6138      	str	r0, [r7, #16]
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	6a1a      	ldr	r2, [r3, #32]
 800854a:	8bfb      	ldrh	r3, [r7, #30]
 800854c:	441a      	add	r2, r3
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	621a      	str	r2, [r3, #32]
 8008552:	6938      	ldr	r0, [r7, #16]
 8008554:	f00c fe08 	bl	8015168 <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <recv_tcp+0x108>
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	8bfa      	ldrh	r2, [r7, #30]
 8008566:	2100      	movs	r1, #0
 8008568:	69b8      	ldr	r0, [r7, #24]
 800856a:	4798      	blx	r3
  }

  return ERR_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	08018424 	.word	0x08018424
 800857c:	080184e4 	.word	0x080184e4
 8008580:	0801847c 	.word	0x0801847c
 8008584:	08018508 	.word	0x08018508
 8008588:	08018528 	.word	0x08018528

0800858c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d106      	bne.n	80085ae <poll_tcp+0x22>
 80085a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008650 <poll_tcp+0xc4>)
 80085a2:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80085a6:	492b      	ldr	r1, [pc, #172]	@ (8008654 <poll_tcp+0xc8>)
 80085a8:	482b      	ldr	r0, [pc, #172]	@ (8008658 <poll_tcp+0xcc>)
 80085aa:	f00e fdf3 	bl	8017194 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	785b      	ldrb	r3, [r3, #1]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d104      	bne.n	80085c0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80085b6:	2101      	movs	r1, #1
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f001 f887 	bl	80096cc <lwip_netconn_do_writemore>
 80085be:	e016      	b.n	80085ee <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d112      	bne.n	80085ee <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <poll_tcp+0x5a>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d4:	7a5b      	ldrb	r3, [r3, #9]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d005      	beq.n	80085e6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085de:	7a5a      	ldrb	r2, [r3, #9]
 80085e0:	3a01      	subs	r2, #1
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80085e6:	2101      	movs	r1, #1
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fb7f 	bl	8008cec <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085f4:	f003 0310 	and.w	r3, r3, #16
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d023      	beq.n	8008644 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01f      	beq.n	8008644 <poll_tcp+0xb8>
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800860c:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8008610:	d318      	bcc.n	8008644 <poll_tcp+0xb8>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800861a:	2b04      	cmp	r3, #4
 800861c:	d812      	bhi.n	8008644 <poll_tcp+0xb8>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008624:	f023 0310 	bic.w	r3, r3, #16
 8008628:	b2da      	uxtb	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	d005      	beq.n	8008644 <poll_tcp+0xb8>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800863c:	2200      	movs	r2, #0
 800863e:	2102      	movs	r1, #2
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	08018424 	.word	0x08018424
 8008654:	08018548 	.word	0x08018548
 8008658:	0801847c 	.word	0x0801847c

0800865c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d106      	bne.n	8008682 <sent_tcp+0x26>
 8008674:	4b21      	ldr	r3, [pc, #132]	@ (80086fc <sent_tcp+0xa0>)
 8008676:	f240 1261 	movw	r2, #353	@ 0x161
 800867a:	4921      	ldr	r1, [pc, #132]	@ (8008700 <sent_tcp+0xa4>)
 800867c:	4821      	ldr	r0, [pc, #132]	@ (8008704 <sent_tcp+0xa8>)
 800867e:	f00e fd89 	bl	8017194 <iprintf>

  if (conn) {
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d034      	beq.n	80086f2 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d104      	bne.n	800869a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008690:	2101      	movs	r1, #1
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f001 f81a 	bl	80096cc <lwip_netconn_do_writemore>
 8008698:	e007      	b.n	80086aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	785b      	ldrb	r3, [r3, #1]
 800869e:	2b04      	cmp	r3, #4
 80086a0:	d103      	bne.n	80086aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80086a2:	2101      	movs	r1, #1
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f000 fb21 	bl	8008cec <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d01f      	beq.n	80086f2 <sent_tcp+0x96>
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80086ba:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80086be:	d318      	bcc.n	80086f2 <sent_tcp+0x96>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d812      	bhi.n	80086f2 <sent_tcp+0x96>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086d2:	f023 0310 	bic.w	r3, r3, #16
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <sent_tcp+0x96>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	2102      	movs	r1, #2
 80086ee:	6978      	ldr	r0, [r7, #20]
 80086f0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	08018424 	.word	0x08018424
 8008700:	08018548 	.word	0x08018548
 8008704:	0801847c 	.word	0x0801847c

08008708 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	@ 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	627b      	str	r3, [r7, #36]	@ 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d106      	bne.n	800872c <err_tcp+0x24>
 800871e:	4b6d      	ldr	r3, [pc, #436]	@ (80088d4 <err_tcp+0x1cc>)
 8008720:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8008724:	496c      	ldr	r1, [pc, #432]	@ (80088d8 <err_tcp+0x1d0>)
 8008726:	486d      	ldr	r0, [pc, #436]	@ (80088dc <err_tcp+0x1d4>)
 8008728:	f00e fd34 	bl	8017194 <iprintf>

  conn->pcb.tcp = NULL;
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	2200      	movs	r2, #0
 8008730:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	785b      	ldrb	r3, [r3, #1]
 8008736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  conn->state = NETCONN_NONE;
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	2200      	movs	r2, #0
 800873e:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8008740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008744:	2b04      	cmp	r3, #4
 8008746:	d114      	bne.n	8008772 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	2b00      	cmp	r3, #0
 8008750:	d018      	beq.n	8008784 <err_tcp+0x7c>
 8008752:	f00c fcfb 	bl	801514c <sys_arch_protect>
 8008756:	61b8      	str	r0, [r7, #24]
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800875e:	f113 0f0c 	cmn.w	r3, #12
 8008762:	db02      	blt.n	800876a <err_tcp+0x62>
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	2200      	movs	r2, #0
 8008768:	721a      	strb	r2, [r3, #8]
 800876a:	69b8      	ldr	r0, [r7, #24]
 800876c:	f00c fcfc 	bl	8015168 <sys_arch_unprotect>
 8008770:	e008      	b.n	8008784 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8008772:	f00c fceb 	bl	801514c <sys_arch_protect>
 8008776:	61f8      	str	r0, [r7, #28]
 8008778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	721a      	strb	r2, [r3, #8]
 800877e:	69f8      	ldr	r0, [r7, #28]
 8008780:	f00c fcf2 	bl	8015168 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008788:	2b00      	cmp	r3, #0
 800878a:	d005      	beq.n	8008798 <err_tcp+0x90>
 800878c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	2200      	movs	r2, #0
 8008792:	2104      	movs	r1, #4
 8008794:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008796:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <err_tcp+0xa4>
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	2200      	movs	r2, #0
 80087a6:	2100      	movs	r1, #0
 80087a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087aa:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80087ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <err_tcp+0xb8>
 80087b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b8:	2200      	movs	r2, #0
 80087ba:	2102      	movs	r1, #2
 80087bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80087be:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	3310      	adds	r3, #16
 80087c4:	4618      	mov	r0, r3
 80087c6:	f00c fbaa 	bl	8014f1e <sys_mbox_valid>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80087d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d2:	3310      	adds	r3, #16
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00c fb2c 	bl	8014e34 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	3314      	adds	r3, #20
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00c fb9c 	bl	8014f1e <sys_mbox_valid>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d005      	beq.n	80087f8 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80087ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ee:	3314      	adds	r3, #20
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f00c fb1e 	bl	8014e34 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80087f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d007      	beq.n	8008810 <err_tcp+0x108>
 8008800:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008804:	2b04      	cmp	r3, #4
 8008806:	d003      	beq.n	8008810 <err_tcp+0x108>
 8008808:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800880c:	2b03      	cmp	r3, #3
 800880e:	d150      	bne.n	80088b2 <err_tcp+0x1aa>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008812:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	2b00      	cmp	r3, #0
 800881c:	bf14      	ite	ne
 800881e:	2301      	movne	r3, #1
 8008820:	2300      	moveq	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008828:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800882c:	f023 0304 	bic.w	r3, r3, #4
 8008830:	b2da      	uxtb	r2, r3
 8008832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008834:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (!was_nonblocking_connect) {
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d145      	bne.n	80088ca <err_tcp+0x1c2>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800883e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <err_tcp+0x14c>
 8008846:	4b23      	ldr	r3, [pc, #140]	@ (80088d4 <err_tcp+0x1cc>)
 8008848:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800884c:	4924      	ldr	r1, [pc, #144]	@ (80088e0 <err_tcp+0x1d8>)
 800884e:	4823      	ldr	r0, [pc, #140]	@ (80088dc <err_tcp+0x1d4>)
 8008850:	f00e fca0 	bl	8017194 <iprintf>
      conn->current_msg->err = err;
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	330c      	adds	r3, #12
 8008864:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008866:	6938      	ldr	r0, [r7, #16]
 8008868:	f00c fbe8 	bl	801503c <sys_sem_valid>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <err_tcp+0x178>
 8008872:	4b18      	ldr	r3, [pc, #96]	@ (80088d4 <err_tcp+0x1cc>)
 8008874:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8008878:	491a      	ldr	r1, [pc, #104]	@ (80088e4 <err_tcp+0x1dc>)
 800887a:	4818      	ldr	r0, [pc, #96]	@ (80088dc <err_tcp+0x1d4>)
 800887c:	f00e fc8a 	bl	8017194 <iprintf>
      conn->current_msg = NULL;
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	2200      	movs	r2, #0
 8008884:	62da      	str	r2, [r3, #44]	@ 0x2c
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00e      	beq.n	80088aa <err_tcp+0x1a2>
 800888c:	f00c fc5e 	bl	801514c <sys_arch_protect>
 8008890:	60f8      	str	r0, [r7, #12]
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008898:	f113 0f0c 	cmn.w	r3, #12
 800889c:	db02      	blt.n	80088a4 <err_tcp+0x19c>
 800889e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a0:	78fa      	ldrb	r2, [r7, #3]
 80088a2:	721a      	strb	r2, [r3, #8]
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f00c fc5f 	bl	8015168 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 80088aa:	6938      	ldr	r0, [r7, #16]
 80088ac:	f00c fbac 	bl	8015008 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80088b0:	e00b      	b.n	80088ca <err_tcp+0x1c2>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <err_tcp+0x1c4>
 80088ba:	4b06      	ldr	r3, [pc, #24]	@ (80088d4 <err_tcp+0x1cc>)
 80088bc:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80088c0:	4909      	ldr	r1, [pc, #36]	@ (80088e8 <err_tcp+0x1e0>)
 80088c2:	4806      	ldr	r0, [pc, #24]	@ (80088dc <err_tcp+0x1d4>)
 80088c4:	f00e fc66 	bl	8017194 <iprintf>
  }
}
 80088c8:	e000      	b.n	80088cc <err_tcp+0x1c4>
      (old_state == NETCONN_CONNECT)) {
 80088ca:	bf00      	nop
}
 80088cc:	bf00      	nop
 80088ce:	3728      	adds	r7, #40	@ 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	08018424 	.word	0x08018424
 80088d8:	08018548 	.word	0x08018548
 80088dc:	0801847c 	.word	0x0801847c
 80088e0:	08018558 	.word	0x08018558
 80088e4:	08018574 	.word	0x08018574
 80088e8:	08018590 	.word	0x08018590

080088ec <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80088fa:	6879      	ldr	r1, [r7, #4]
 80088fc:	68f8      	ldr	r0, [r7, #12]
 80088fe:	f005 f9e7 	bl	800dcd0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008902:	490a      	ldr	r1, [pc, #40]	@ (800892c <setup_tcp+0x40>)
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f005 f9f3 	bl	800dcf0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800890a:	4909      	ldr	r1, [pc, #36]	@ (8008930 <setup_tcp+0x44>)
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f005 fa11 	bl	800dd34 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008912:	2202      	movs	r2, #2
 8008914:	4907      	ldr	r1, [pc, #28]	@ (8008934 <setup_tcp+0x48>)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f005 fa64 	bl	800dde4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800891c:	4906      	ldr	r1, [pc, #24]	@ (8008938 <setup_tcp+0x4c>)
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f005 fa28 	bl	800dd74 <tcp_err>
}
 8008924:	bf00      	nop
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	08008465 	.word	0x08008465
 8008930:	0800865d 	.word	0x0800865d
 8008934:	0800858d 	.word	0x0800858d
 8008938:	08008709 	.word	0x08008709

0800893c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800893c:	b590      	push	{r4, r7, lr}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <pcb_new+0x24>
 8008952:	4b2b      	ldr	r3, [pc, #172]	@ (8008a00 <pcb_new+0xc4>)
 8008954:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8008958:	492a      	ldr	r1, [pc, #168]	@ (8008a04 <pcb_new+0xc8>)
 800895a:	482b      	ldr	r0, [pc, #172]	@ (8008a08 <pcb_new+0xcc>)
 800895c:	f00e fc1a 	bl	8017194 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800896a:	2b10      	cmp	r3, #16
 800896c:	d022      	beq.n	80089b4 <pcb_new+0x78>
 800896e:	2b20      	cmp	r3, #32
 8008970:	d133      	bne.n	80089da <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681c      	ldr	r4, [r3, #0]
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f009 feaa 	bl	80126d2 <udp_new_ip_type>
 800897e:	4603      	mov	r3, r0
 8008980:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d02a      	beq.n	80089e2 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b22      	cmp	r3, #34	@ 0x22
 8008994:	d104      	bne.n	80089a0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6858      	ldr	r0, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	4917      	ldr	r1, [pc, #92]	@ (8008a0c <pcb_new+0xd0>)
 80089ae:	f009 fe35 	bl	801261c <udp_recv>
    }
    break;
 80089b2:	e016      	b.n	80089e2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681c      	ldr	r4, [r3, #0]
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f005 f97a 	bl	800dcb4 <tcp_new_ip_type>
 80089c0:	4603      	mov	r3, r0
 80089c2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00b      	beq.n	80089e6 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff ff8a 	bl	80088ec <setup_tcp>
    }
    break;
 80089d8:	e005      	b.n	80089e6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	22fa      	movs	r2, #250	@ 0xfa
 80089de:	711a      	strb	r2, [r3, #4]
    return;
 80089e0:	e00a      	b.n	80089f8 <pcb_new+0xbc>
    break;
 80089e2:	bf00      	nop
 80089e4:	e000      	b.n	80089e8 <pcb_new+0xac>
    break;
 80089e6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d102      	bne.n	80089f8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	22ff      	movs	r2, #255	@ 0xff
 80089f6:	711a      	strb	r2, [r3, #4]
  }
}
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd90      	pop	{r4, r7, pc}
 80089fe:	bf00      	nop
 8008a00:	08018424 	.word	0x08018424
 8008a04:	080185ac 	.word	0x080185ac
 8008a08:	0801847c 	.word	0x0801847c
 8008a0c:	0800832d 	.word	0x0800832d

08008a10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ff85 	bl	800893c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d012      	beq.n	8008a60 <lwip_netconn_do_newconn+0x50>
 8008a3a:	f00c fb87 	bl	801514c <sys_arch_protect>
 8008a3e:	60b8      	str	r0, [r7, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a48:	f113 0f0c 	cmn.w	r3, #12
 8008a4c:	db05      	blt.n	8008a5a <lwip_netconn_do_newconn+0x4a>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a58:	721a      	strb	r2, [r3, #8]
 8008a5a:	68b8      	ldr	r0, [r7, #8]
 8008a5c:	f00c fb84 	bl	8015168 <sys_arch_unprotect>
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008a74:	2007      	movs	r0, #7
 8008a76:	f002 feb3 	bl	800b7e0 <memp_malloc>
 8008a7a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <netconn_alloc+0x1e>
    return NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e05c      	b.n	8008b40 <netconn_alloc+0xd8>
  }

  conn->last_err = ERR_OK;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	79fa      	ldrb	r2, [r7, #7]
 8008a90:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008a9e:	2b10      	cmp	r3, #16
 8008aa0:	d004      	beq.n	8008aac <netconn_alloc+0x44>
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d105      	bne.n	8008ab2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008aa6:	2306      	movs	r3, #6
 8008aa8:	60fb      	str	r3, [r7, #12]
    break;
 8008aaa:	e00a      	b.n	8008ac2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008aac:	2306      	movs	r3, #6
 8008aae:	60fb      	str	r3, [r7, #12]
    break;
 8008ab0:	e007      	b.n	8008ac2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008ab2:	4b25      	ldr	r3, [pc, #148]	@ (8008b48 <netconn_alloc+0xe0>)
 8008ab4:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8008ab8:	4924      	ldr	r1, [pc, #144]	@ (8008b4c <netconn_alloc+0xe4>)
 8008aba:	4825      	ldr	r0, [pc, #148]	@ (8008b50 <netconn_alloc+0xe8>)
 8008abc:	f00e fb6a 	bl	8017194 <iprintf>
    goto free_and_return;
 8008ac0:	e039      	b.n	8008b36 <netconn_alloc+0xce>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	3310      	adds	r3, #16
 8008ac6:	68f9      	ldr	r1, [r7, #12]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f00c f969 	bl	8014da0 <sys_mbox_new>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d12f      	bne.n	8008b34 <netconn_alloc+0xcc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	330c      	adds	r3, #12
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f00c fa3b 	bl	8014f56 <sys_sem_new>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d005      	beq.n	8008af2 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	3310      	adds	r3, #16
 8008aea:	4618      	mov	r0, r3
 8008aec:	f00c f97a 	bl	8014de4 <sys_mbox_free>
    goto free_and_return;
 8008af0:	e021      	b.n	8008b36 <netconn_alloc+0xce>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	3314      	adds	r3, #20
 8008af6:	4618      	mov	r0, r3
 8008af8:	f00c fa21 	bl	8014f3e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2200      	movs	r2, #0
 8008b00:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	631a      	str	r2, [r3, #48]	@ 0x30
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2200      	movs	r2, #0
 8008b14:	62da      	str	r2, [r3, #44]	@ 0x2c
  conn->write_offset = 0;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b54 <netconn_alloc+0xec>)
 8008b20:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2200      	movs	r2, #0
 8008b26:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  return conn;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	e005      	b.n	8008b40 <netconn_alloc+0xd8>
    goto free_and_return;
 8008b34:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008b36:	68b9      	ldr	r1, [r7, #8]
 8008b38:	2007      	movs	r0, #7
 8008b3a:	f002 fea3 	bl	800b884 <memp_free>
  return NULL;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	08018424 	.word	0x08018424
 8008b4c:	080185cc 	.word	0x080185cc
 8008b50:	0801847c 	.word	0x0801847c
 8008b54:	77359400 	.word	0x77359400

08008b58 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d006      	beq.n	8008b76 <netconn_free+0x1e>
 8008b68:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd8 <netconn_free+0x80>)
 8008b6a:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8008b6e:	491b      	ldr	r1, [pc, #108]	@ (8008bdc <netconn_free+0x84>)
 8008b70:	481b      	ldr	r0, [pc, #108]	@ (8008be0 <netconn_free+0x88>)
 8008b72:	f00e fb0f 	bl	8017194 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	3310      	adds	r3, #16
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f00c f9cf 	bl	8014f1e <sys_mbox_valid>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <netconn_free+0x3c>
 8008b86:	4b14      	ldr	r3, [pc, #80]	@ (8008bd8 <netconn_free+0x80>)
 8008b88:	f240 22e1 	movw	r2, #737	@ 0x2e1
 8008b8c:	4915      	ldr	r1, [pc, #84]	@ (8008be4 <netconn_free+0x8c>)
 8008b8e:	4814      	ldr	r0, [pc, #80]	@ (8008be0 <netconn_free+0x88>)
 8008b90:	f00e fb00 	bl	8017194 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	3314      	adds	r3, #20
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f00c f9c0 	bl	8014f1e <sys_mbox_valid>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d006      	beq.n	8008bb2 <netconn_free+0x5a>
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd8 <netconn_free+0x80>)
 8008ba6:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008baa:	490f      	ldr	r1, [pc, #60]	@ (8008be8 <netconn_free+0x90>)
 8008bac:	480c      	ldr	r0, [pc, #48]	@ (8008be0 <netconn_free+0x88>)
 8008bae:	f00e faf1 	bl	8017194 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f00c fa33 	bl	8015022 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	330c      	adds	r3, #12
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f00c fa4b 	bl	801505c <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	2007      	movs	r0, #7
 8008bca:	f002 fe5b 	bl	800b884 <memp_free>
}
 8008bce:	bf00      	nop
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08018424 	.word	0x08018424
 8008bdc:	080185f4 	.word	0x080185f4
 8008be0:	0801847c 	.word	0x0801847c
 8008be4:	08018624 	.word	0x08018624
 8008be8:	08018660 	.word	0x08018660

08008bec <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b086      	sub	sp, #24
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f00c f990 	bl	8014f1e <sys_mbox_valid>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d035      	beq.n	8008c70 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c04:	e01e      	b.n	8008c44 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c0e:	2b10      	cmp	r3, #16
 8008c10:	d114      	bne.n	8008c3c <netconn_drain+0x50>
        if (mem != NULL) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d007      	beq.n	8008c34 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	891b      	ldrh	r3, [r3, #8]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	4610      	mov	r0, r2
 8008c30:	f004 f974 	bl	800cf1c <tcp_recved>
          }
          pbuf_free(p);
 8008c34:	6978      	ldr	r0, [r7, #20]
 8008c36:	f003 fbbd 	bl	800c3b4 <pbuf_free>
 8008c3a:	e003      	b.n	8008c44 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 f8fe 	bl	8009e40 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3310      	adds	r3, #16
 8008c48:	f107 020c 	add.w	r2, r7, #12
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f00c f949 	bl	8014ee6 <sys_arch_mbox_tryfetch>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5a:	d1d4      	bne.n	8008c06 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3310      	adds	r3, #16
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00c f8bf 	bl	8014de4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3310      	adds	r3, #16
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f00c f967 	bl	8014f3e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	3314      	adds	r3, #20
 8008c74:	4618      	mov	r0, r3
 8008c76:	f00c f952 	bl	8014f1e <sys_mbox_valid>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d02e      	beq.n	8008cde <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008c80:	e017      	b.n	8008cb2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a18      	ldr	r2, [pc, #96]	@ (8008ce8 <netconn_drain+0xfc>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d013      	beq.n	8008cb2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8008c8e:	6938      	ldr	r0, [r7, #16]
 8008c90:	f7ff ffac 	bl	8008bec <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d007      	beq.n	8008cac <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f004 f8e1 	bl	800ce68 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8008cac:	6938      	ldr	r0, [r7, #16]
 8008cae:	f7ff ff53 	bl	8008b58 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	f107 020c 	add.w	r2, r7, #12
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f00c f912 	bl	8014ee6 <sys_arch_mbox_tryfetch>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc8:	d1db      	bne.n	8008c82 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3314      	adds	r3, #20
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f00c f888 	bl	8014de4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3314      	adds	r3, #20
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f00c f930 	bl	8014f3e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008cde:	bf00      	nop
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20006098 	.word	0x20006098

08008cec <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <lwip_netconn_do_close_internal+0x24>
 8008d02:	4b90      	ldr	r3, [pc, #576]	@ (8008f44 <lwip_netconn_do_close_internal+0x258>)
 8008d04:	f240 3243 	movw	r2, #835	@ 0x343
 8008d08:	498f      	ldr	r1, [pc, #572]	@ (8008f48 <lwip_netconn_do_close_internal+0x25c>)
 8008d0a:	4890      	ldr	r0, [pc, #576]	@ (8008f4c <lwip_netconn_do_close_internal+0x260>)
 8008d0c:	f00e fa42 	bl	8017194 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d006      	beq.n	8008d2a <lwip_netconn_do_close_internal+0x3e>
 8008d1c:	4b89      	ldr	r3, [pc, #548]	@ (8008f44 <lwip_netconn_do_close_internal+0x258>)
 8008d1e:	f44f 7251 	mov.w	r2, #836	@ 0x344
 8008d22:	498b      	ldr	r1, [pc, #556]	@ (8008f50 <lwip_netconn_do_close_internal+0x264>)
 8008d24:	4889      	ldr	r0, [pc, #548]	@ (8008f4c <lwip_netconn_do_close_internal+0x260>)
 8008d26:	f00e fa35 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	785b      	ldrb	r3, [r3, #1]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d006      	beq.n	8008d40 <lwip_netconn_do_close_internal+0x54>
 8008d32:	4b84      	ldr	r3, [pc, #528]	@ (8008f44 <lwip_netconn_do_close_internal+0x258>)
 8008d34:	f240 3245 	movw	r2, #837	@ 0x345
 8008d38:	4986      	ldr	r1, [pc, #536]	@ (8008f54 <lwip_netconn_do_close_internal+0x268>)
 8008d3a:	4884      	ldr	r0, [pc, #528]	@ (8008f4c <lwip_netconn_do_close_internal+0x260>)
 8008d3c:	f00e fa2a 	bl	8017194 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d106      	bne.n	8008d56 <lwip_netconn_do_close_internal+0x6a>
 8008d48:	4b7e      	ldr	r3, [pc, #504]	@ (8008f44 <lwip_netconn_do_close_internal+0x258>)
 8008d4a:	f240 3246 	movw	r2, #838	@ 0x346
 8008d4e:	4982      	ldr	r1, [pc, #520]	@ (8008f58 <lwip_netconn_do_close_internal+0x26c>)
 8008d50:	487e      	ldr	r0, [pc, #504]	@ (8008f4c <lwip_netconn_do_close_internal+0x260>)
 8008d52:	f00e fa1f 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d106      	bne.n	8008d6c <lwip_netconn_do_close_internal+0x80>
 8008d5e:	4b79      	ldr	r3, [pc, #484]	@ (8008f44 <lwip_netconn_do_close_internal+0x258>)
 8008d60:	f240 3247 	movw	r2, #839	@ 0x347
 8008d64:	497d      	ldr	r1, [pc, #500]	@ (8008f5c <lwip_netconn_do_close_internal+0x270>)
 8008d66:	4879      	ldr	r0, [pc, #484]	@ (8008f4c <lwip_netconn_do_close_internal+0x260>)
 8008d68:	f00e fa14 	bl	8017194 <iprintf>

  tpcb = conn->pcb.tcp;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d76:	7a1b      	ldrb	r3, [r3, #8]
 8008d78:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	f003 0302 	and.w	r3, r3, #2
 8008d88:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008d8a:	7dfb      	ldrb	r3, [r7, #23]
 8008d8c:	2b03      	cmp	r3, #3
 8008d8e:	d102      	bne.n	8008d96 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8008d90:	2301      	movs	r3, #1
 8008d92:	77bb      	strb	r3, [r7, #30]
 8008d94:	e01f      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008d96:	7dbb      	ldrb	r3, [r7, #22]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00e      	beq.n	8008dba <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008da0:	2b05      	cmp	r3, #5
 8008da2:	d007      	beq.n	8008db4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008da8:	2b06      	cmp	r3, #6
 8008daa:	d003      	beq.n	8008db4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008db0:	2b08      	cmp	r3, #8
 8008db2:	d102      	bne.n	8008dba <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8008db4:	2301      	movs	r3, #1
 8008db6:	77bb      	strb	r3, [r7, #30]
 8008db8:	e00d      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008dba:	7d7b      	ldrb	r3, [r7, #21]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d008      	beq.n	8008dd2 <lwip_netconn_do_close_internal+0xe6>
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	7e9b      	ldrb	r3, [r3, #26]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d002      	beq.n	8008dd2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	77bb      	strb	r3, [r7, #30]
 8008dd0:	e001      	b.n	8008dd6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8008dd6:	7fbb      	ldrb	r3, [r7, #30]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008ddc:	2100      	movs	r1, #0
 8008dde:	69b8      	ldr	r0, [r7, #24]
 8008de0:	f004 ff76 	bl	800dcd0 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	7d1b      	ldrb	r3, [r3, #20]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d104      	bne.n	8008df6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008dec:	2100      	movs	r1, #0
 8008dee:	69b8      	ldr	r0, [r7, #24]
 8008df0:	f004 ffe2 	bl	800ddb8 <tcp_accept>
 8008df4:	e01d      	b.n	8008e32 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008df6:	7dbb      	ldrb	r3, [r7, #22]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	69b8      	ldr	r0, [r7, #24]
 8008e00:	f004 ff76 	bl	800dcf0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008e04:	2100      	movs	r1, #0
 8008e06:	69b8      	ldr	r0, [r7, #24]
 8008e08:	f004 ffd6 	bl	800ddb8 <tcp_accept>
    }
    if (shut_tx) {
 8008e0c:	7d7b      	ldrb	r3, [r7, #21]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008e12:	2100      	movs	r1, #0
 8008e14:	69b8      	ldr	r0, [r7, #24]
 8008e16:	f004 ff8d 	bl	800dd34 <tcp_sent>
    }
    if (close) {
 8008e1a:	7fbb      	ldrb	r3, [r7, #30]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d008      	beq.n	8008e32 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008e20:	2200      	movs	r2, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	69b8      	ldr	r0, [r7, #24]
 8008e26:	f004 ffdd 	bl	800dde4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	69b8      	ldr	r0, [r7, #24]
 8008e2e:	f004 ffa1 	bl	800dd74 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8008e32:	7fbb      	ldrb	r3, [r7, #30]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008e38:	69b8      	ldr	r0, [r7, #24]
 8008e3a:	f003 ff03 	bl	800cc44 <tcp_close>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	77fb      	strb	r3, [r7, #31]
 8008e42:	e007      	b.n	8008e54 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008e44:	7dbb      	ldrb	r3, [r7, #22]
 8008e46:	7d7a      	ldrb	r2, [r7, #21]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	69b8      	ldr	r0, [r7, #24]
 8008e4c:	f003 ff12 	bl	800cc74 <tcp_shutdown>
 8008e50:	4603      	mov	r3, r0
 8008e52:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8008e54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d102      	bne.n	8008e62 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	777b      	strb	r3, [r7, #29]
 8008e60:	e016      	b.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d10f      	bne.n	8008e8c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e70:	7a5b      	ldrb	r3, [r3, #9]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10c      	bne.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008e76:	2301      	movs	r3, #1
 8008e78:	777b      	strb	r3, [r7, #29]
        if (close) {
 8008e7a:	7fbb      	ldrb	r3, [r7, #30]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d007      	beq.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008e80:	69b8      	ldr	r0, [r7, #24]
 8008e82:	f003 fff1 	bl	800ce68 <tcp_abort>
          err = ERR_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e001      	b.n	8008e90 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8008e90:	7f7b      	ldrb	r3, [r7, #29]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d064      	beq.n	8008f60 <lwip_netconn_do_close_internal+0x274>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	330c      	adds	r3, #12
 8008e9e:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	7ffa      	ldrb	r2, [r7, #31]
 8008ea6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	62da      	str	r2, [r3, #44]	@ 0x2c
    conn->state = NETCONN_NONE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008eb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d129      	bne.n	8008f10 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8008ebc:	7fbb      	ldrb	r3, [r7, #30]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00c      	beq.n	8008edc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d005      	beq.n	8008edc <lwip_netconn_do_close_internal+0x1f0>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
      }
      if (shut_rx) {
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d009      	beq.n	8008ef6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <lwip_netconn_do_close_internal+0x20a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	4798      	blx	r3
      }
      if (shut_tx) {
 8008ef6:	7d7b      	ldrb	r3, [r7, #21]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d009      	beq.n	8008f10 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d005      	beq.n	8008f10 <lwip_netconn_do_close_internal+0x224>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f08:	2200      	movs	r2, #0
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00e      	beq.n	8008f34 <lwip_netconn_do_close_internal+0x248>
 8008f16:	f00c f919 	bl	801514c <sys_arch_protect>
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008f22:	f113 0f0c 	cmn.w	r3, #12
 8008f26:	db02      	blt.n	8008f2e <lwip_netconn_do_close_internal+0x242>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7ffa      	ldrb	r2, [r7, #31]
 8008f2c:	721a      	strb	r2, [r3, #8]
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f00c f91a 	bl	8015168 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008f3a:	6938      	ldr	r0, [r7, #16]
 8008f3c:	f00c f864 	bl	8015008 <sys_sem_signal>
    }
    return ERR_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	e03c      	b.n	8008fbe <lwip_netconn_do_close_internal+0x2d2>
 8008f44:	08018424 	.word	0x08018424
 8008f48:	0801869c 	.word	0x0801869c
 8008f4c:	0801847c 	.word	0x0801847c
 8008f50:	080186ac 	.word	0x080186ac
 8008f54:	080186cc 	.word	0x080186cc
 8008f58:	080186f0 	.word	0x080186f0
 8008f5c:	08018558 	.word	0x08018558
  }
  if (!close_finished) {
 8008f60:	7f7b      	ldrb	r3, [r7, #29]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d11e      	bne.n	8008fa4 <lwip_netconn_do_close_internal+0x2b8>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	7d1b      	ldrb	r3, [r3, #20]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d106      	bne.n	8008f7c <lwip_netconn_do_close_internal+0x290>
 8008f6e:	4b16      	ldr	r3, [pc, #88]	@ (8008fc8 <lwip_netconn_do_close_internal+0x2dc>)
 8008f70:	f240 32e3 	movw	r2, #995	@ 0x3e3
 8008f74:	4915      	ldr	r1, [pc, #84]	@ (8008fcc <lwip_netconn_do_close_internal+0x2e0>)
 8008f76:	4816      	ldr	r0, [pc, #88]	@ (8008fd0 <lwip_netconn_do_close_internal+0x2e4>)
 8008f78:	f00e f90c 	bl	8017194 <iprintf>
    if (shut_tx) {
 8008f7c:	7d7b      	ldrb	r3, [r7, #21]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <lwip_netconn_do_close_internal+0x29e>
      tcp_sent(tpcb, sent_tcp);
 8008f82:	4914      	ldr	r1, [pc, #80]	@ (8008fd4 <lwip_netconn_do_close_internal+0x2e8>)
 8008f84:	69b8      	ldr	r0, [r7, #24]
 8008f86:	f004 fed5 	bl	800dd34 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	4912      	ldr	r1, [pc, #72]	@ (8008fd8 <lwip_netconn_do_close_internal+0x2ec>)
 8008f8e:	69b8      	ldr	r0, [r7, #24]
 8008f90:	f004 ff28 	bl	800dde4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008f94:	4911      	ldr	r1, [pc, #68]	@ (8008fdc <lwip_netconn_do_close_internal+0x2f0>)
 8008f96:	69b8      	ldr	r0, [r7, #24]
 8008f98:	f004 feec 	bl	800dd74 <tcp_err>
    tcp_arg(tpcb, conn);
 8008f9c:	6879      	ldr	r1, [r7, #4]
 8008f9e:	69b8      	ldr	r0, [r7, #24]
 8008fa0:	f004 fe96 	bl	800dcd0 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008fa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <lwip_netconn_do_close_internal+0x2ce>
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <lwip_netconn_do_close_internal+0x2dc>)
 8008fae:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8008fb2:	490b      	ldr	r1, [pc, #44]	@ (8008fe0 <lwip_netconn_do_close_internal+0x2f4>)
 8008fb4:	4806      	ldr	r0, [pc, #24]	@ (8008fd0 <lwip_netconn_do_close_internal+0x2e4>)
 8008fb6:	f00e f8ed 	bl	8017194 <iprintf>
  return err;
 8008fba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3720      	adds	r7, #32
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	08018424 	.word	0x08018424
 8008fcc:	08018704 	.word	0x08018704
 8008fd0:	0801847c 	.word	0x0801847c
 8008fd4:	0800865d 	.word	0x0800865d
 8008fd8:	0800858d 	.word	0x0800858d
 8008fdc:	08008709 	.word	0x08008709
 8008fe0:	08018728 	.word	0x08018728

08008fe4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008ff8:	7cfb      	ldrb	r3, [r7, #19]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00d      	beq.n	800901a <lwip_netconn_do_delconn+0x36>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009008:	2b10      	cmp	r3, #16
 800900a:	d006      	beq.n	800901a <lwip_netconn_do_delconn+0x36>
 800900c:	4b70      	ldr	r3, [pc, #448]	@ (80091d0 <lwip_netconn_do_delconn+0x1ec>)
 800900e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009012:	4970      	ldr	r1, [pc, #448]	@ (80091d4 <lwip_netconn_do_delconn+0x1f0>)
 8009014:	4870      	ldr	r0, [pc, #448]	@ (80091d8 <lwip_netconn_do_delconn+0x1f4>)
 8009016:	f00e f8bd 	bl	8017194 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800901a:	7cfb      	ldrb	r3, [r7, #19]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d005      	beq.n	800902c <lwip_netconn_do_delconn+0x48>
 8009020:	7cfb      	ldrb	r3, [r7, #19]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d002      	beq.n	800902c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009026:	7cfb      	ldrb	r3, [r7, #19]
 8009028:	2b03      	cmp	r3, #3
 800902a:	d10a      	bne.n	8009042 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800902c:	7cfb      	ldrb	r3, [r7, #19]
 800902e:	2b03      	cmp	r3, #3
 8009030:	d10b      	bne.n	800904a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	22fb      	movs	r2, #251	@ 0xfb
 8009046:	711a      	strb	r2, [r3, #4]
 8009048:	e09d      	b.n	8009186 <lwip_netconn_do_delconn+0x1a2>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800904a:	7cfb      	ldrb	r3, [r7, #19]
 800904c:	2b03      	cmp	r3, #3
 800904e:	d10e      	bne.n	800906e <lwip_netconn_do_delconn+0x8a>
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009058:	f003 0304 	and.w	r3, r3, #4
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <lwip_netconn_do_delconn+0x8a>
 8009060:	4b5b      	ldr	r3, [pc, #364]	@ (80091d0 <lwip_netconn_do_delconn+0x1ec>)
 8009062:	f240 421e 	movw	r2, #1054	@ 0x41e
 8009066:	495d      	ldr	r1, [pc, #372]	@ (80091dc <lwip_netconn_do_delconn+0x1f8>)
 8009068:	485b      	ldr	r0, [pc, #364]	@ (80091d8 <lwip_netconn_do_delconn+0x1f4>)
 800906a:	f00e f893 	bl	8017194 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2200      	movs	r2, #0
 8009072:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f7ff fdb7 	bl	8008bec <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d064      	beq.n	8009152 <lwip_netconn_do_delconn+0x16e>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009092:	2b10      	cmp	r3, #16
 8009094:	d00d      	beq.n	80090b2 <lwip_netconn_do_delconn+0xce>
 8009096:	2b20      	cmp	r3, #32
 8009098:	d156      	bne.n	8009148 <lwip_netconn_do_delconn+0x164>
        raw_remove(msg->conn->pcb.raw);
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        msg->conn->pcb.udp->recv_arg = NULL;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f009 fac8 	bl	8012640 <udp_remove>
        break;
 80090b0:	e04b      	b.n	800914a <lwip_netconn_do_delconn+0x166>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <lwip_netconn_do_delconn+0xe2>
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d006      	beq.n	80090d4 <lwip_netconn_do_delconn+0xf0>
 80090c6:	4b42      	ldr	r3, [pc, #264]	@ (80091d0 <lwip_netconn_do_delconn+0x1ec>)
 80090c8:	f240 4234 	movw	r2, #1076	@ 0x434
 80090cc:	4944      	ldr	r1, [pc, #272]	@ (80091e0 <lwip_netconn_do_delconn+0x1fc>)
 80090ce:	4842      	ldr	r0, [pc, #264]	@ (80091d8 <lwip_netconn_do_delconn+0x1f4>)
 80090d0:	f00e f860 	bl	8017194 <iprintf>
          msg->conn->write_offset == 0);
        msg->conn->state = NETCONN_CLOSE;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2204      	movs	r2, #4
 80090da:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2203      	movs	r2, #3
 80090e0:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	62da      	str	r2, [r3, #44]	@ 0x2c
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7ff fdfb 	bl	8008cec <lwip_netconn_do_close_internal>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d065      	beq.n	80091c8 <lwip_netconn_do_delconn+0x1e4>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	2b04      	cmp	r3, #4
 8009104:	d006      	beq.n	8009114 <lwip_netconn_do_delconn+0x130>
 8009106:	4b32      	ldr	r3, [pc, #200]	@ (80091d0 <lwip_netconn_do_delconn+0x1ec>)
 8009108:	f240 423b 	movw	r2, #1083	@ 0x43b
 800910c:	4935      	ldr	r1, [pc, #212]	@ (80091e4 <lwip_netconn_do_delconn+0x200>)
 800910e:	4832      	ldr	r0, [pc, #200]	@ (80091d8 <lwip_netconn_do_delconn+0x1f4>)
 8009110:	f00e f840 	bl	8017194 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009114:	4834      	ldr	r0, [pc, #208]	@ (80091e8 <lwip_netconn_do_delconn+0x204>)
 8009116:	f00b ffe6 	bl	80150e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	330c      	adds	r3, #12
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f00b ff3f 	bl	8014fa6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009128:	482f      	ldr	r0, [pc, #188]	@ (80091e8 <lwip_netconn_do_delconn+0x204>)
 800912a:	f00b ffcd 	bl	80150c8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d047      	beq.n	80091c8 <lwip_netconn_do_delconn+0x1e4>
 8009138:	4b25      	ldr	r3, [pc, #148]	@ (80091d0 <lwip_netconn_do_delconn+0x1ec>)
 800913a:	f240 423f 	movw	r2, #1087	@ 0x43f
 800913e:	4929      	ldr	r1, [pc, #164]	@ (80091e4 <lwip_netconn_do_delconn+0x200>)
 8009140:	4825      	ldr	r0, [pc, #148]	@ (80091d8 <lwip_netconn_do_delconn+0x1f4>)
 8009142:	f00e f827 	bl	8017194 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
 8009146:	e03f      	b.n	80091c8 <lwip_netconn_do_delconn+0x1e4>
#endif /* LWIP_TCP */
      default:
        break;
 8009148:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2200      	movs	r2, #0
 8009150:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009158:	2b00      	cmp	r3, #0
 800915a:	d007      	beq.n	800916c <lwip_netconn_do_delconn+0x188>
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	6810      	ldr	r0, [r2, #0]
 8009166:	2200      	movs	r2, #0
 8009168:	2100      	movs	r1, #0
 800916a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	2b00      	cmp	r3, #0
 8009174:	d007      	beq.n	8009186 <lwip_netconn_do_delconn+0x1a2>
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	6810      	ldr	r0, [r2, #0]
 8009180:	2200      	movs	r2, #0
 8009182:	2102      	movs	r1, #2
 8009184:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	4618      	mov	r0, r3
 800918e:	f00b ff55 	bl	801503c <sys_sem_valid>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d018      	beq.n	80091ca <lwip_netconn_do_delconn+0x1e6>
    TCPIP_APIMSG_ACK(msg);
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d014      	beq.n	80091ca <lwip_netconn_do_delconn+0x1e6>
 80091a0:	f00b ffd4 	bl	801514c <sys_arch_protect>
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091ae:	f113 0f0c 	cmn.w	r3, #12
 80091b2:	db05      	blt.n	80091c0 <lwip_netconn_do_delconn+0x1dc>
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80091be:	721a      	strb	r2, [r3, #8]
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f00b ffd1 	bl	8015168 <sys_arch_unprotect>
 80091c6:	e000      	b.n	80091ca <lwip_netconn_do_delconn+0x1e6>
        return;
 80091c8:	bf00      	nop
  }
}
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	08018424 	.word	0x08018424
 80091d4:	08018738 	.word	0x08018738
 80091d8:	0801847c 	.word	0x0801847c
 80091dc:	0801874c 	.word	0x0801874c
 80091e0:	0801876c 	.word	0x0801876c
 80091e4:	08018788 	.word	0x08018788
 80091e8:	20006100 	.word	0x20006100

080091ec <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009208:	f06f 0305 	mvn.w	r3, #5
 800920c:	e086      	b.n	800931c <lwip_netconn_do_connected+0x130>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	785b      	ldrb	r3, [r3, #1]
 8009212:	2b03      	cmp	r3, #3
 8009214:	d006      	beq.n	8009224 <lwip_netconn_do_connected+0x38>
 8009216:	4b43      	ldr	r3, [pc, #268]	@ (8009324 <lwip_netconn_do_connected+0x138>)
 8009218:	f44f 6293 	mov.w	r2, #1176	@ 0x498
 800921c:	4942      	ldr	r1, [pc, #264]	@ (8009328 <lwip_netconn_do_connected+0x13c>)
 800921e:	4843      	ldr	r0, [pc, #268]	@ (800932c <lwip_netconn_do_connected+0x140>)
 8009220:	f00d ffb8 	bl	8017194 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10d      	bne.n	8009248 <lwip_netconn_do_connected+0x5c>
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <lwip_netconn_do_connected+0x5c>
 800923a:	4b3a      	ldr	r3, [pc, #232]	@ (8009324 <lwip_netconn_do_connected+0x138>)
 800923c:	f240 4299 	movw	r2, #1177	@ 0x499
 8009240:	493b      	ldr	r1, [pc, #236]	@ (8009330 <lwip_netconn_do_connected+0x144>)
 8009242:	483a      	ldr	r0, [pc, #232]	@ (800932c <lwip_netconn_do_connected+0x140>)
 8009244:	f00d ffa6 	bl	8017194 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800924c:	2b00      	cmp	r3, #0
 800924e:	d008      	beq.n	8009262 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009254:	79fa      	ldrb	r2, [r7, #7]
 8009256:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	330c      	adds	r3, #12
 8009260:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800926a:	2b10      	cmp	r3, #16
 800926c:	d106      	bne.n	800927c <lwip_netconn_do_connected+0x90>
 800926e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d102      	bne.n	800927c <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8009276:	69b8      	ldr	r0, [r7, #24]
 8009278:	f7ff fb38 	bl	80088ec <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009282:	f003 0304 	and.w	r3, r3, #4
 8009286:	2b00      	cmp	r3, #0
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	b2db      	uxtb	r3, r3
 8009290:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009298:	f023 0304 	bic.w	r3, r3, #4
 800929c:	b2da      	uxtb	r2, r3
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  LWIP_ASSERT("blocking connect state error",
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <lwip_netconn_do_connected+0xc4>
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10c      	bne.n	80092ca <lwip_netconn_do_connected+0xde>
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <lwip_netconn_do_connected+0xd0>
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d006      	beq.n	80092ca <lwip_netconn_do_connected+0xde>
 80092bc:	4b19      	ldr	r3, [pc, #100]	@ (8009324 <lwip_netconn_do_connected+0x138>)
 80092be:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 80092c2:	491c      	ldr	r1, [pc, #112]	@ (8009334 <lwip_netconn_do_connected+0x148>)
 80092c4:	4819      	ldr	r0, [pc, #100]	@ (800932c <lwip_netconn_do_connected+0x140>)
 80092c6:	f00d ff65 	bl	8017194 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2200      	movs	r2, #0
 80092ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  conn->state = NETCONN_NONE;
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2200      	movs	r2, #0
 80092d4:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00e      	beq.n	80092fa <lwip_netconn_do_connected+0x10e>
 80092dc:	f00b ff36 	bl	801514c <sys_arch_protect>
 80092e0:	6138      	str	r0, [r7, #16]
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092e8:	f113 0f0c 	cmn.w	r3, #12
 80092ec:	db02      	blt.n	80092f4 <lwip_netconn_do_connected+0x108>
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2200      	movs	r2, #0
 80092f2:	721a      	strb	r2, [r3, #8]
 80092f4:	6938      	ldr	r0, [r7, #16]
 80092f6:	f00b ff37 	bl	8015168 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80092fa:	69bb      	ldr	r3, [r7, #24]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <lwip_netconn_do_connected+0x122>
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009306:	2200      	movs	r2, #0
 8009308:	2102      	movs	r1, #2
 800930a:	69b8      	ldr	r0, [r7, #24]
 800930c:	4798      	blx	r3

  if (was_blocking) {
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d002      	beq.n	800931a <lwip_netconn_do_connected+0x12e>
    sys_sem_signal(op_completed_sem);
 8009314:	69f8      	ldr	r0, [r7, #28]
 8009316:	f00b fe77 	bl	8015008 <sys_sem_signal>
  }
  return ERR_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08018424 	.word	0x08018424
 8009328:	08018790 	.word	0x08018790
 800932c:	0801847c 	.word	0x0801847c
 8009330:	080187b0 	.word	0x080187b0
 8009334:	080187f0 	.word	0x080187f0

08009338 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d103      	bne.n	8009356 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	22f1      	movs	r2, #241	@ 0xf1
 8009352:	711a      	strb	r2, [r3, #4]
 8009354:	e0a9      	b.n	80094aa <lwip_netconn_do_connect+0x172>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009360:	2b10      	cmp	r3, #16
 8009362:	d011      	beq.n	8009388 <lwip_netconn_do_connect+0x50>
 8009364:	2b20      	cmp	r3, #32
 8009366:	f040 8094 	bne.w	8009492 <lwip_netconn_do_connect+0x15a>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6858      	ldr	r0, [r3, #4]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	6899      	ldr	r1, [r3, #8]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	899b      	ldrh	r3, [r3, #12]
 8009378:	461a      	mov	r2, r3
 800937a:	f009 f8e3 	bl	8012544 <udp_connect>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	711a      	strb	r2, [r3, #4]
      break;
 8009386:	e090      	b.n	80094aa <lwip_netconn_do_connect+0x172>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	2b03      	cmp	r3, #3
 8009390:	d103      	bne.n	800939a <lwip_netconn_do_connect+0x62>
        msg->err = ERR_ALREADY;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	22f7      	movs	r2, #247	@ 0xf7
 8009396:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 8009398:	e086      	b.n	80094a8 <lwip_netconn_do_connect+0x170>
      } else if (msg->conn->state != NETCONN_NONE) {
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	785b      	ldrb	r3, [r3, #1]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d003      	beq.n	80093ac <lwip_netconn_do_connect+0x74>
        msg->err = ERR_ISCONN;
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	22f6      	movs	r2, #246	@ 0xf6
 80093a8:	711a      	strb	r2, [r3, #4]
      break;
 80093aa:	e07d      	b.n	80094a8 <lwip_netconn_do_connect+0x170>
        setup_tcp(msg->conn);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7ff fa9b 	bl	80088ec <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6858      	ldr	r0, [r3, #4]
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	6899      	ldr	r1, [r3, #8]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	899a      	ldrh	r2, [r3, #12]
 80093c4:	4b47      	ldr	r3, [pc, #284]	@ (80094e4 <lwip_netconn_do_connect+0x1ac>)
 80093c6:	f003 fe47 	bl	800d058 <tcp_connect>
 80093ca:	4603      	mov	r3, r0
 80093cc:	461a      	mov	r2, r3
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d165      	bne.n	80094a8 <lwip_netconn_do_connect+0x170>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80093e4:	f003 0302 	and.w	r3, r3, #2
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	bf14      	ite	ne
 80093ec:	2301      	movne	r3, #1
 80093ee:	2300      	moveq	r3, #0
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2203      	movs	r2, #3
 80093fa:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80093fc:	7cfb      	ldrb	r3, [r7, #19]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00b      	beq.n	800941a <lwip_netconn_do_connect+0xe2>
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0204 	orr.w	r2, r2, #4
 8009412:	b2d2      	uxtb	r2, r2
 8009414:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009418:	e00a      	b.n	8009430 <lwip_netconn_do_connect+0xf8>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0204 	bic.w	r2, r2, #4
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          if (non_blocking) {
 8009430:	7cfb      	ldrb	r3, [r7, #19]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <lwip_netconn_do_connect+0x106>
            msg->err = ERR_INPROGRESS;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	22fb      	movs	r2, #251	@ 0xfb
 800943a:	711a      	strb	r2, [r3, #4]
      break;
 800943c:	e034      	b.n	80094a8 <lwip_netconn_do_connect+0x170>
            msg->conn->current_msg = msg;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	62da      	str	r2, [r3, #44]	@ 0x2c
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	785b      	ldrb	r3, [r3, #1]
 800944c:	2b03      	cmp	r3, #3
 800944e:	d006      	beq.n	800945e <lwip_netconn_do_connect+0x126>
 8009450:	4b25      	ldr	r3, [pc, #148]	@ (80094e8 <lwip_netconn_do_connect+0x1b0>)
 8009452:	f240 42e5 	movw	r2, #1253	@ 0x4e5
 8009456:	4925      	ldr	r1, [pc, #148]	@ (80094ec <lwip_netconn_do_connect+0x1b4>)
 8009458:	4825      	ldr	r0, [pc, #148]	@ (80094f0 <lwip_netconn_do_connect+0x1b8>)
 800945a:	f00d fe9b 	bl	8017194 <iprintf>
            UNLOCK_TCPIP_CORE();
 800945e:	4825      	ldr	r0, [pc, #148]	@ (80094f4 <lwip_netconn_do_connect+0x1bc>)
 8009460:	f00b fe41 	bl	80150e6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	330c      	adds	r3, #12
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f00b fd9a 	bl	8014fa6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009472:	4820      	ldr	r0, [pc, #128]	@ (80094f4 <lwip_netconn_do_connect+0x1bc>)
 8009474:	f00b fe28 	bl	80150c8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b03      	cmp	r3, #3
 8009480:	d12b      	bne.n	80094da <lwip_netconn_do_connect+0x1a2>
 8009482:	4b19      	ldr	r3, [pc, #100]	@ (80094e8 <lwip_netconn_do_connect+0x1b0>)
 8009484:	f240 42e9 	movw	r2, #1257	@ 0x4e9
 8009488:	4918      	ldr	r1, [pc, #96]	@ (80094ec <lwip_netconn_do_connect+0x1b4>)
 800948a:	4819      	ldr	r0, [pc, #100]	@ (80094f0 <lwip_netconn_do_connect+0x1b8>)
 800948c:	f00d fe82 	bl	8017194 <iprintf>
            return;
 8009490:	e023      	b.n	80094da <lwip_netconn_do_connect+0x1a2>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8009492:	4b15      	ldr	r3, [pc, #84]	@ (80094e8 <lwip_netconn_do_connect+0x1b0>)
 8009494:	f240 42f2 	movw	r2, #1266	@ 0x4f2
 8009498:	4917      	ldr	r1, [pc, #92]	@ (80094f8 <lwip_netconn_do_connect+0x1c0>)
 800949a:	4815      	ldr	r0, [pc, #84]	@ (80094f0 <lwip_netconn_do_connect+0x1b8>)
 800949c:	f00d fe7a 	bl	8017194 <iprintf>
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	22fa      	movs	r2, #250	@ 0xfa
 80094a4:	711a      	strb	r2, [r3, #4]
      break;
 80094a6:	e000      	b.n	80094aa <lwip_netconn_do_connect+0x172>
      break;
 80094a8:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d014      	beq.n	80094dc <lwip_netconn_do_connect+0x1a4>
 80094b2:	f00b fe4b 	bl	801514c <sys_arch_protect>
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80094c0:	f113 0f0c 	cmn.w	r3, #12
 80094c4:	db05      	blt.n	80094d2 <lwip_netconn_do_connect+0x19a>
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80094d0:	721a      	strb	r2, [r3, #8]
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f00b fe48 	bl	8015168 <sys_arch_unprotect>
 80094d8:	e000      	b.n	80094dc <lwip_netconn_do_connect+0x1a4>
            return;
 80094da:	bf00      	nop
}
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	080091ed 	.word	0x080091ed
 80094e8:	08018424 	.word	0x08018424
 80094ec:	08018788 	.word	0x08018788
 80094f0:	0801847c 	.word	0x0801847c
 80094f4:	20006100 	.word	0x20006100
 80094f8:	08018810 	.word	0x08018810

080094fc <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009512:	2b20      	cmp	r3, #32
 8009514:	d109      	bne.n	800952a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	4618      	mov	r0, r3
 800951e:	f009 f867 	bl	80125f0 <udp_disconnect>
    msg->err = ERR_OK;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	711a      	strb	r2, [r3, #4]
 8009528:	e002      	b.n	8009530 <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	22fa      	movs	r2, #250	@ 0xfa
 800952e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d012      	beq.n	800955e <lwip_netconn_do_disconnect+0x62>
 8009538:	f00b fe08 	bl	801514c <sys_arch_protect>
 800953c:	60b8      	str	r0, [r7, #8]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009546:	f113 0f0c 	cmn.w	r3, #12
 800954a:	db05      	blt.n	8009558 <lwip_netconn_do_disconnect+0x5c>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009556:	721a      	strb	r2, [r3, #8]
 8009558:	68b8      	ldr	r0, [r7, #8]
 800955a:	f00b fe05 	bl	8015168 <sys_arch_unprotect>
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800957a:	f113 0f0c 	cmn.w	r3, #12
 800957e:	da06      	bge.n	800958e <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	711a      	strb	r2, [r3, #4]
 800958c:	e037      	b.n	80095fe <lwip_netconn_do_send+0x98>
  } else {
    msg->err = ERR_CONN;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	22f5      	movs	r2, #245	@ 0xf5
 8009592:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02f      	beq.n	80095fe <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095a8:	2b20      	cmp	r3, #32
 80095aa:	d127      	bne.n	80095fc <lwip_netconn_do_send+0x96>
          msg->err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
            &msg->msg.b->addr, msg->msg.b->port,
            msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
        }
#else /* LWIP_CHECKSUM_ON_COPY */
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10e      	bne.n	80095d4 <lwip_netconn_do_send+0x6e>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4619      	mov	r1, r3
 80095c4:	4610      	mov	r0, r2
 80095c6:	f008 fe33 	bl	8012230 <udp_send>
 80095ca:	4603      	mov	r3, r0
 80095cc:	461a      	mov	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	711a      	strb	r2, [r3, #4]
        } else {
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
 80095d2:	e014      	b.n	80095fe <lwip_netconn_do_send+0x98>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6858      	ldr	r0, [r3, #4]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	6819      	ldr	r1, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f103 0208 	add.w	r2, r3, #8
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	f008 fe37 	bl	8012260 <udp_sendto>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461a      	mov	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	711a      	strb	r2, [r3, #4]
        break;
 80095fa:	e000      	b.n	80095fe <lwip_netconn_do_send+0x98>
#endif /* LWIP_UDP */
      default:
        break;
 80095fc:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d012      	beq.n	800962c <lwip_netconn_do_send+0xc6>
 8009606:	f00b fda1 	bl	801514c <sys_arch_protect>
 800960a:	60b8      	str	r0, [r7, #8]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009614:	f113 0f0c 	cmn.w	r3, #12
 8009618:	db05      	blt.n	8009626 <lwip_netconn_do_send+0xc0>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009624:	721a      	strb	r2, [r3, #8]
 8009626:	68b8      	ldr	r0, [r7, #8]
 8009628:	f00b fd9e 	bl	8015168 <sys_arch_unprotect>
}
 800962c:	bf00      	nop
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	2200      	movs	r2, #0
 8009644:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d022      	beq.n	8009696 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800965a:	2b10      	cmp	r3, #16
 800965c:	d11b      	bne.n	8009696 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800966a:	d202      	bcs.n	8009672 <lwip_netconn_do_recv+0x3e>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	b29b      	uxth	r3, r3
 8009670:	e001      	b.n	8009676 <lwip_netconn_do_recv+0x42>
 8009672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009676:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	89fa      	ldrh	r2, [r7, #14]
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f003 fc4a 	bl	800cf1c <tcp_recved>
        remaining -= recved;
 8009688:	89fb      	ldrh	r3, [r7, #14]
 800968a:	697a      	ldr	r2, [r7, #20]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e6      	bne.n	8009664 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d012      	beq.n	80096c4 <lwip_netconn_do_recv+0x90>
 800969e:	f00b fd55 	bl	801514c <sys_arch_protect>
 80096a2:	60b8      	str	r0, [r7, #8]
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80096ac:	f113 0f0c 	cmn.w	r3, #12
 80096b0:	db05      	blt.n	80096be <lwip_netconn_do_recv+0x8a>
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80096bc:	721a      	strb	r2, [r3, #8]
 80096be:	68b8      	ldr	r0, [r7, #8]
 80096c0:	f00b fd52 	bl	8015168 <sys_arch_unprotect>
}
 80096c4:	bf00      	nop
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08a      	sub	sp, #40	@ 0x28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <lwip_netconn_do_writemore+0x26>
 80096e4:	4b9d      	ldr	r3, [pc, #628]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 80096e6:	f240 52e3 	movw	r2, #1507	@ 0x5e3
 80096ea:	499d      	ldr	r1, [pc, #628]	@ (8009960 <lwip_netconn_do_writemore+0x294>)
 80096ec:	489d      	ldr	r0, [pc, #628]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 80096ee:	f00d fd51 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	785b      	ldrb	r3, [r3, #1]
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d006      	beq.n	8009708 <lwip_netconn_do_writemore+0x3c>
 80096fa:	4b98      	ldr	r3, [pc, #608]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 80096fc:	f240 52e4 	movw	r2, #1508	@ 0x5e4
 8009700:	4999      	ldr	r1, [pc, #612]	@ (8009968 <lwip_netconn_do_writemore+0x29c>)
 8009702:	4898      	ldr	r0, [pc, #608]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 8009704:	f00d fd46 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d106      	bne.n	800971e <lwip_netconn_do_writemore+0x52>
 8009710:	4b92      	ldr	r3, [pc, #584]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 8009712:	f240 52e5 	movw	r2, #1509	@ 0x5e5
 8009716:	4995      	ldr	r1, [pc, #596]	@ (800996c <lwip_netconn_do_writemore+0x2a0>)
 8009718:	4892      	ldr	r0, [pc, #584]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 800971a:	f00d fd3b 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <lwip_netconn_do_writemore+0x68>
 8009726:	4b8d      	ldr	r3, [pc, #564]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 8009728:	f240 52e6 	movw	r2, #1510	@ 0x5e6
 800972c:	4990      	ldr	r1, [pc, #576]	@ (8009970 <lwip_netconn_do_writemore+0x2a4>)
 800972e:	488d      	ldr	r0, [pc, #564]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 8009730:	f00d fd30 	bl	8017194 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	429a      	cmp	r2, r3
 8009740:	d306      	bcc.n	8009750 <lwip_netconn_do_writemore+0x84>
 8009742:	4b86      	ldr	r3, [pc, #536]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 8009744:	f240 52e7 	movw	r2, #1511	@ 0x5e7
 8009748:	498a      	ldr	r1, [pc, #552]	@ (8009974 <lwip_netconn_do_writemore+0x2a8>)
 800974a:	4886      	ldr	r0, [pc, #536]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 800974c:	f00d fd22 	bl	8017194 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009754:	7c1b      	ldrb	r3, [r3, #16]
 8009756:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	2b00      	cmp	r3, #0
 8009766:	d105      	bne.n	8009774 <lwip_netconn_do_writemore+0xa8>
 8009768:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <lwip_netconn_do_writemore+0xac>
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <lwip_netconn_do_writemore+0xae>
 8009778:	2300      	movs	r3, #0
 800977a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009782:	689a      	ldr	r2, [r3, #8]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009788:	4413      	add	r3, r2
 800978a:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	68da      	ldr	r2, [r3, #12]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097a0:	d309      	bcc.n	80097b6 <lwip_netconn_do_writemore+0xea>
      len = 0xffff;
 80097a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80097a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80097a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80097ac:	f043 0302 	orr.w	r3, r3, #2
 80097b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80097b4:	e001      	b.n	80097ba <lwip_netconn_do_writemore+0xee>
    } else {
      len = (u16_t)diff;
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097c2:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80097c4:	8afa      	ldrh	r2, [r7, #22]
 80097c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d212      	bcs.n	80097f2 <lwip_netconn_do_writemore+0x126>
      /* don't try to write more than sendbuf */
      len = available;
 80097cc:	8afb      	ldrh	r3, [r7, #22]
 80097ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
      if (dontblock) {
 80097d0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d006      	beq.n	80097e6 <lwip_netconn_do_writemore+0x11a>
        if (!len) {
 80097d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <lwip_netconn_do_writemore+0x126>
          err = ERR_WOULDBLOCK;
 80097de:	23f9      	movs	r3, #249	@ 0xf9
 80097e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto err_mem;
 80097e4:	e02a      	b.n	800983c <lwip_netconn_do_writemore+0x170>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 80097e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80097ea:	f043 0302 	orr.w	r3, r3, #2
 80097ee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80097f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80097f8:	441a      	add	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	429a      	cmp	r2, r3
 8009802:	d906      	bls.n	8009812 <lwip_netconn_do_writemore+0x146>
 8009804:	4b55      	ldr	r3, [pc, #340]	@ (800995c <lwip_netconn_do_writemore+0x290>)
 8009806:	f240 6213 	movw	r2, #1555	@ 0x613
 800980a:	495b      	ldr	r1, [pc, #364]	@ (8009978 <lwip_netconn_do_writemore+0x2ac>)
 800980c:	4855      	ldr	r0, [pc, #340]	@ (8009964 <lwip_netconn_do_writemore+0x298>)
 800980e:	f00d fcc1 	bl	8017194 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6858      	ldr	r0, [r3, #4]
 8009816:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800981a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800981c:	69f9      	ldr	r1, [r7, #28]
 800981e:	f007 f88b 	bl	8010938 <tcp_write>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8009828:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800982c:	2b00      	cmp	r3, #0
 800982e:	d004      	beq.n	800983a <lwip_netconn_do_writemore+0x16e>
 8009830:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009838:	d135      	bne.n	80098a6 <lwip_netconn_do_writemore+0x1da>
err_mem:
 800983a:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800983c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009840:	2b00      	cmp	r3, #0
 8009842:	d019      	beq.n	8009878 <lwip_netconn_do_writemore+0x1ac>
 8009844:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	429a      	cmp	r2, r3
 800984e:	d213      	bcs.n	8009878 <lwip_netconn_do_writemore+0x1ac>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009854:	2b00      	cmp	r3, #0
 8009856:	d005      	beq.n	8009864 <lwip_netconn_do_writemore+0x198>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800985c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800985e:	2103      	movs	r1, #3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800986a:	f043 0310 	orr.w	r3, r3, #16
 800986e:	b2da      	uxtb	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009876:	e016      	b.n	80098a6 <lwip_netconn_do_writemore+0x1da>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009880:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8009884:	d305      	bcc.n	8009892 <lwip_netconn_do_writemore+0x1c6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800988e:	2b04      	cmp	r3, #4
 8009890:	d909      	bls.n	80098a6 <lwip_netconn_do_writemore+0x1da>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009896:	2b00      	cmp	r3, #0
 8009898:	d005      	beq.n	80098a6 <lwip_netconn_do_writemore+0x1da>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800989e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80098a0:	2103      	movs	r1, #3
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80098a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d134      	bne.n	8009918 <lwip_netconn_do_writemore+0x24c>
      err_t out_err;
      conn->write_offset += len;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80098b4:	441a      	add	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	629a      	str	r2, [r3, #40]	@ 0x28
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d003      	beq.n	80098d0 <lwip_netconn_do_writemore+0x204>
 80098c8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d007      	beq.n	80098e0 <lwip_netconn_do_writemore+0x214>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80098d8:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80098da:	2301      	movs	r3, #1
 80098dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f007 fcd9 	bl	801129c <tcp_output>
 80098ea:	4603      	mov	r3, r0
 80098ec:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80098ee:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80098f2:	f113 0f0c 	cmn.w	r3, #12
 80098f6:	db04      	blt.n	8009902 <lwip_netconn_do_writemore+0x236>
 80098f8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80098fc:	f113 0f04 	cmn.w	r3, #4
 8009900:	d152      	bne.n	80099a8 <lwip_netconn_do_writemore+0x2dc>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009902:	7d3b      	ldrb	r3, [r7, #20]
 8009904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	2200      	movs	r2, #0
 8009914:	60da      	str	r2, [r3, #12]
 8009916:	e047      	b.n	80099a8 <lwip_netconn_do_writemore+0x2dc>
      }
    } else if (err == ERR_MEM) {
 8009918:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d13b      	bne.n	800999a <lwip_netconn_do_writemore+0x2ce>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	4618      	mov	r0, r3
 8009928:	f007 fcb8 	bl	801129c <tcp_output>
 800992c:	4603      	mov	r3, r0
 800992e:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8009930:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009934:	f113 0f0c 	cmn.w	r3, #12
 8009938:	db04      	blt.n	8009944 <lwip_netconn_do_writemore+0x278>
 800993a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800993e:	f113 0f04 	cmn.w	r3, #4
 8009942:	d11b      	bne.n	800997c <lwip_netconn_do_writemore+0x2b0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009944:	7d7b      	ldrb	r3, [r7, #21]
 8009946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 800994a:	2301      	movs	r3, #1
 800994c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	2200      	movs	r2, #0
 8009956:	60da      	str	r2, [r3, #12]
 8009958:	e026      	b.n	80099a8 <lwip_netconn_do_writemore+0x2dc>
 800995a:	bf00      	nop
 800995c:	08018424 	.word	0x08018424
 8009960:	08018548 	.word	0x08018548
 8009964:	0801847c 	.word	0x0801847c
 8009968:	08018828 	.word	0x08018828
 800996c:	08018558 	.word	0x08018558
 8009970:	08018848 	.word	0x08018848
 8009974:	08018860 	.word	0x08018860
 8009978:	08018894 	.word	0x08018894
      } else if (dontblock) {
 800997c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009980:	2b00      	cmp	r3, #0
 8009982:	d011      	beq.n	80099a8 <lwip_netconn_do_writemore+0x2dc>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8009984:	23f9      	movs	r3, #249	@ 0xf9
 8009986:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        write_finished = 1;
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        conn->current_msg->msg.w.len = 0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009994:	2200      	movs	r2, #0
 8009996:	60da      	str	r2, [r3, #12]
 8009998:	e006      	b.n	80099a8 <lwip_netconn_do_writemore+0x2dc>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800999a:	2301      	movs	r3, #1
 800999c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      conn->current_msg->msg.w.len = 0;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	2200      	movs	r2, #0
 80099a6:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80099a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d02c      	beq.n	8009a0a <lwip_netconn_do_writemore+0x33e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	330c      	adds	r3, #12
 80099b8:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099c2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    conn->write_offset = 0;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	629a      	str	r2, [r3, #40]	@ 0x28
    conn->state = NETCONN_NONE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00f      	beq.n	80099fc <lwip_netconn_do_writemore+0x330>
 80099dc:	f00b fbb6 	bl	801514c <sys_arch_protect>
 80099e0:	60f8      	str	r0, [r7, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80099e8:	f113 0f0c 	cmn.w	r3, #12
 80099ec:	db03      	blt.n	80099f6 <lwip_netconn_do_writemore+0x32a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099f4:	721a      	strb	r2, [r3, #8]
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f00b fbb6 	bl	8015168 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d006      	beq.n	8009a10 <lwip_netconn_do_writemore+0x344>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009a02:	6938      	ldr	r0, [r7, #16]
 8009a04:	f00b fb00 	bl	8015008 <sys_sem_signal>
 8009a08:	e002      	b.n	8009a10 <lwip_netconn_do_writemore+0x344>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	e000      	b.n	8009a12 <lwip_netconn_do_writemore+0x346>
  }
#endif
  return ERR_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3728      	adds	r7, #40	@ 0x28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop

08009a1c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009a30:	f113 0f0c 	cmn.w	r3, #12
 8009a34:	da06      	bge.n	8009a44 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	711a      	strb	r2, [r3, #4]
 8009a42:	e072      	b.n	8009b2a <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009a4e:	2b10      	cmp	r3, #16
 8009a50:	d168      	bne.n	8009b24 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	785b      	ldrb	r3, [r3, #1]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	22fb      	movs	r2, #251	@ 0xfb
 8009a60:	711a      	strb	r2, [r3, #4]
 8009a62:	e062      	b.n	8009b2a <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d056      	beq.n	8009b1c <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2201      	movs	r2, #1
 8009a74:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d104      	bne.n	8009a8a <lwip_netconn_do_write+0x6e>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d006      	beq.n	8009a98 <lwip_netconn_do_write+0x7c>
 8009a8a:	4b36      	ldr	r3, [pc, #216]	@ (8009b64 <lwip_netconn_do_write+0x148>)
 8009a8c:	f240 6282 	movw	r2, #1666	@ 0x682
 8009a90:	4935      	ldr	r1, [pc, #212]	@ (8009b68 <lwip_netconn_do_write+0x14c>)
 8009a92:	4836      	ldr	r0, [pc, #216]	@ (8009b6c <lwip_netconn_do_write+0x150>)
 8009a94:	f00d fb7e 	bl	8017194 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d106      	bne.n	8009aae <lwip_netconn_do_write+0x92>
 8009aa0:	4b30      	ldr	r3, [pc, #192]	@ (8009b64 <lwip_netconn_do_write+0x148>)
 8009aa2:	f240 6284 	movw	r2, #1668	@ 0x684
 8009aa6:	4932      	ldr	r1, [pc, #200]	@ (8009b70 <lwip_netconn_do_write+0x154>)
 8009aa8:	4830      	ldr	r0, [pc, #192]	@ (8009b6c <lwip_netconn_do_write+0x150>)
 8009aaa:	f00d fb73 	bl	8017194 <iprintf>
        msg->conn->current_msg = msg;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
        msg->conn->write_offset = 0;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	629a      	str	r2, [r3, #40]	@ 0x28
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7ff fe01 	bl	80096cc <lwip_netconn_do_writemore>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d044      	beq.n	8009b5a <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	785b      	ldrb	r3, [r3, #1]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d006      	beq.n	8009ae8 <lwip_netconn_do_write+0xcc>
 8009ada:	4b22      	ldr	r3, [pc, #136]	@ (8009b64 <lwip_netconn_do_write+0x148>)
 8009adc:	f240 6289 	movw	r2, #1673	@ 0x689
 8009ae0:	4924      	ldr	r1, [pc, #144]	@ (8009b74 <lwip_netconn_do_write+0x158>)
 8009ae2:	4822      	ldr	r0, [pc, #136]	@ (8009b6c <lwip_netconn_do_write+0x150>)
 8009ae4:	f00d fb56 	bl	8017194 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009ae8:	4823      	ldr	r0, [pc, #140]	@ (8009b78 <lwip_netconn_do_write+0x15c>)
 8009aea:	f00b fafc 	bl	80150e6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	330c      	adds	r3, #12
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f00b fa55 	bl	8014fa6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009afc:	481e      	ldr	r0, [pc, #120]	@ (8009b78 <lwip_netconn_do_write+0x15c>)
 8009afe:	f00b fae3 	bl	80150c8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	785b      	ldrb	r3, [r3, #1]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d126      	bne.n	8009b5a <lwip_netconn_do_write+0x13e>
 8009b0c:	4b15      	ldr	r3, [pc, #84]	@ (8009b64 <lwip_netconn_do_write+0x148>)
 8009b0e:	f240 628d 	movw	r2, #1677	@ 0x68d
 8009b12:	4918      	ldr	r1, [pc, #96]	@ (8009b74 <lwip_netconn_do_write+0x158>)
 8009b14:	4815      	ldr	r0, [pc, #84]	@ (8009b6c <lwip_netconn_do_write+0x150>)
 8009b16:	f00d fb3d 	bl	8017194 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009b1a:	e01e      	b.n	8009b5a <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	22f5      	movs	r2, #245	@ 0xf5
 8009b20:	711a      	strb	r2, [r3, #4]
 8009b22:	e002      	b.n	8009b2a <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	22fa      	movs	r2, #250	@ 0xfa
 8009b28:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d014      	beq.n	8009b5c <lwip_netconn_do_write+0x140>
 8009b32:	f00b fb0b 	bl	801514c <sys_arch_protect>
 8009b36:	60b8      	str	r0, [r7, #8]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b40:	f113 0f0c 	cmn.w	r3, #12
 8009b44:	db05      	blt.n	8009b52 <lwip_netconn_do_write+0x136>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009b50:	721a      	strb	r2, [r3, #8]
 8009b52:	68b8      	ldr	r0, [r7, #8]
 8009b54:	f00b fb08 	bl	8015168 <sys_arch_unprotect>
 8009b58:	e000      	b.n	8009b5c <lwip_netconn_do_write+0x140>
        return;
 8009b5a:	bf00      	nop
}
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	08018424 	.word	0x08018424
 8009b68:	0801876c 	.word	0x0801876c
 8009b6c:	0801847c 	.word	0x0801847c
 8009b70:	080188c0 	.word	0x080188c0
 8009b74:	08018788 	.word	0x08018788
 8009b78:	20006100 	.word	0x20006100

08009b7c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d06b      	beq.n	8009c6a <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	7c1b      	ldrb	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d007      	beq.n	8009baa <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	e006      	b.n	8009bb8 <lwip_netconn_do_getaddr+0x3c>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	6852      	ldr	r2, [r2, #4]
 8009bb6:	601a      	str	r2, [r3, #0]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009bc8:	2b10      	cmp	r3, #16
 8009bca:	d021      	beq.n	8009c10 <lwip_netconn_do_getaddr+0x94>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	d144      	bne.n	8009c5a <lwip_netconn_do_getaddr+0xde>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	7c1b      	ldrb	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <lwip_netconn_do_getaddr+0x6c>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	685a      	ldr	r2, [r3, #4]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	8a52      	ldrh	r2, [r2, #18]
 8009be4:	801a      	strh	r2, [r3, #0]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
 8009be6:	e043      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	7c1b      	ldrb	r3, [r3, #16]
 8009bf0:	f003 0304 	and.w	r3, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <lwip_netconn_do_getaddr+0x84>
          msg->err = ERR_CONN;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	22f5      	movs	r2, #245	@ 0xf5
 8009bfc:	711a      	strb	r2, [r3, #4]
      break;
 8009bfe:	e037      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	8a92      	ldrh	r2, [r2, #20]
 8009c0c:	801a      	strh	r2, [r3, #0]
      break;
 8009c0e:	e02f      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	7c1b      	ldrb	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10f      	bne.n	8009c38 <lwip_netconn_do_getaddr+0xbc>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	7d1b      	ldrb	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d005      	beq.n	8009c30 <lwip_netconn_do_getaddr+0xb4>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	7d1b      	ldrb	r3, [r3, #20]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d103      	bne.n	8009c38 <lwip_netconn_do_getaddr+0xbc>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	22f5      	movs	r2, #245	@ 0xf5
 8009c34:	711a      	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
 8009c36:	e01b      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	7c1b      	ldrb	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d004      	beq.n	8009c4a <lwip_netconn_do_getaddr+0xce>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	8adb      	ldrh	r3, [r3, #22]
 8009c48:	e003      	b.n	8009c52 <lwip_netconn_do_getaddr+0xd6>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	8b1b      	ldrh	r3, [r3, #24]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	68d2      	ldr	r2, [r2, #12]
 8009c56:	8013      	strh	r3, [r2, #0]
      break;
 8009c58:	e00a      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
 8009c5a:	4b13      	ldr	r3, [pc, #76]	@ (8009ca8 <lwip_netconn_do_getaddr+0x12c>)
 8009c5c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009c60:	4912      	ldr	r1, [pc, #72]	@ (8009cac <lwip_netconn_do_getaddr+0x130>)
 8009c62:	4813      	ldr	r0, [pc, #76]	@ (8009cb0 <lwip_netconn_do_getaddr+0x134>)
 8009c64:	f00d fa96 	bl	8017194 <iprintf>
      break;
 8009c68:	e002      	b.n	8009c70 <lwip_netconn_do_getaddr+0xf4>
    }
  } else {
    msg->err = ERR_CONN;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	22f5      	movs	r2, #245	@ 0xf5
 8009c6e:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d012      	beq.n	8009c9e <lwip_netconn_do_getaddr+0x122>
 8009c78:	f00b fa68 	bl	801514c <sys_arch_protect>
 8009c7c:	60b8      	str	r0, [r7, #8]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009c86:	f113 0f0c 	cmn.w	r3, #12
 8009c8a:	db05      	blt.n	8009c98 <lwip_netconn_do_getaddr+0x11c>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009c96:	721a      	strb	r2, [r3, #8]
 8009c98:	68b8      	ldr	r0, [r7, #8]
 8009c9a:	f00b fa65 	bl	8015168 <sys_arch_unprotect>
}
 8009c9e:	bf00      	nop
 8009ca0:	3710      	adds	r7, #16
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	08018424 	.word	0x08018424
 8009cac:	080188d4 	.word	0x080188d4
 8009cb0:	0801847c 	.word	0x0801847c

08009cb4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	785b      	ldrb	r3, [r3, #1]
 8009cc6:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d06e      	beq.n	8009db0 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009cdc:	2b10      	cmp	r3, #16
 8009cde:	d167      	bne.n	8009db0 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d002      	beq.n	8009cee <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009ce8:	7cfb      	ldrb	r3, [r7, #19]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d060      	beq.n	8009db0 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009cee:	7cfb      	ldrb	r3, [r7, #19]
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d103      	bne.n	8009cfc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	22f5      	movs	r2, #245	@ 0xf5
 8009cf8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009cfa:	e05c      	b.n	8009db6 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8009cfc:	7cfb      	ldrb	r3, [r7, #19]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d103      	bne.n	8009d0a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	22fb      	movs	r2, #251	@ 0xfb
 8009d06:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009d08:	e055      	b.n	8009db6 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	7a1b      	ldrb	r3, [r3, #8]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fe ff66 	bl	8008bec <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d104      	bne.n	8009d34 <lwip_netconn_do_close+0x80>
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <lwip_netconn_do_close+0x8e>
 8009d34:	4b2e      	ldr	r3, [pc, #184]	@ (8009df0 <lwip_netconn_do_close+0x13c>)
 8009d36:	f240 721b 	movw	r2, #1819	@ 0x71b
 8009d3a:	492e      	ldr	r1, [pc, #184]	@ (8009df4 <lwip_netconn_do_close+0x140>)
 8009d3c:	482e      	ldr	r0, [pc, #184]	@ (8009df8 <lwip_netconn_do_close+0x144>)
 8009d3e:	f00d fa29 	bl	8017194 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2204      	movs	r2, #4
 8009d48:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	62da      	str	r2, [r3, #44]	@ 0x2c
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2100      	movs	r1, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fe ffc7 	bl	8008cec <lwip_netconn_do_close_internal>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d040      	beq.n	8009de6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	785b      	ldrb	r3, [r3, #1]
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d006      	beq.n	8009d7c <lwip_netconn_do_close+0xc8>
 8009d6e:	4b20      	ldr	r3, [pc, #128]	@ (8009df0 <lwip_netconn_do_close+0x13c>)
 8009d70:	f240 7221 	movw	r2, #1825	@ 0x721
 8009d74:	4921      	ldr	r1, [pc, #132]	@ (8009dfc <lwip_netconn_do_close+0x148>)
 8009d76:	4820      	ldr	r0, [pc, #128]	@ (8009df8 <lwip_netconn_do_close+0x144>)
 8009d78:	f00d fa0c 	bl	8017194 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009d7c:	4820      	ldr	r0, [pc, #128]	@ (8009e00 <lwip_netconn_do_close+0x14c>)
 8009d7e:	f00b f9b2 	bl	80150e6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	330c      	adds	r3, #12
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f00b f90b 	bl	8014fa6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009d90:	481b      	ldr	r0, [pc, #108]	@ (8009e00 <lwip_netconn_do_close+0x14c>)
 8009d92:	f00b f999 	bl	80150c8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	785b      	ldrb	r3, [r3, #1]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d022      	beq.n	8009de6 <lwip_netconn_do_close+0x132>
 8009da0:	4b13      	ldr	r3, [pc, #76]	@ (8009df0 <lwip_netconn_do_close+0x13c>)
 8009da2:	f240 7225 	movw	r2, #1829	@ 0x725
 8009da6:	4915      	ldr	r1, [pc, #84]	@ (8009dfc <lwip_netconn_do_close+0x148>)
 8009da8:	4813      	ldr	r0, [pc, #76]	@ (8009df8 <lwip_netconn_do_close+0x144>)
 8009daa:	f00d f9f3 	bl	8017194 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009dae:	e01a      	b.n	8009de6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	22f5      	movs	r2, #245	@ 0xf5
 8009db4:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d014      	beq.n	8009de8 <lwip_netconn_do_close+0x134>
 8009dbe:	f00b f9c5 	bl	801514c <sys_arch_protect>
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009dcc:	f113 0f0c 	cmn.w	r3, #12
 8009dd0:	db05      	blt.n	8009dde <lwip_netconn_do_close+0x12a>
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009ddc:	721a      	strb	r2, [r3, #8]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f00b f9c2 	bl	8015168 <sys_arch_unprotect>
 8009de4:	e000      	b.n	8009de8 <lwip_netconn_do_close+0x134>
      return;
 8009de6:	bf00      	nop
}
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	08018424 	.word	0x08018424
 8009df4:	0801876c 	.word	0x0801876c
 8009df8:	0801847c 	.word	0x0801847c
 8009dfc:	08018788 	.word	0x08018788
 8009e00:	20006100 	.word	0x20006100

08009e04 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8009e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc04      	bgt.n	8009e20 <err_to_errno+0x1c>
 8009e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e1a:	f113 0f10 	cmn.w	r3, #16
 8009e1e:	da01      	bge.n	8009e24 <err_to_errno+0x20>
    return EIO;
 8009e20:	2305      	movs	r3, #5
 8009e22:	e005      	b.n	8009e30 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8009e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e28:	425b      	negs	r3, r3
 8009e2a:	4a04      	ldr	r2, [pc, #16]	@ (8009e3c <err_to_errno+0x38>)
 8009e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	0801ab64 	.word	0x0801ab64

08009e40 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d013      	beq.n	8009e76 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00b      	beq.n	8009e6e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 faaa 	bl	800c3b4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	2006      	movs	r0, #6
 8009e72:	f001 fd07 	bl	800b884 <memp_free>
  }
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d106      	bne.n	8009e9c <netbuf_free+0x1c>
 8009e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec4 <netbuf_free+0x44>)
 8009e90:	2281      	movs	r2, #129	@ 0x81
 8009e92:	490d      	ldr	r1, [pc, #52]	@ (8009ec8 <netbuf_free+0x48>)
 8009e94:	480d      	ldr	r0, [pc, #52]	@ (8009ecc <netbuf_free+0x4c>)
 8009e96:	f00d f97d 	bl	8017194 <iprintf>
 8009e9a:	e00f      	b.n	8009ebc <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d004      	beq.n	8009eae <netbuf_free+0x2e>
    pbuf_free(buf->p);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f002 fa83 	bl	800c3b4 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	601a      	str	r2, [r3, #0]
}
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	080188ec 	.word	0x080188ec
 8009ec8:	08018988 	.word	0x08018988
 8009ecc:	0801893c 	.word	0x0801893c

08009ed0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	4613      	mov	r3, r2
 8009edc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d108      	bne.n	8009ef6 <netbuf_ref+0x26>
 8009ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8009f58 <netbuf_ref+0x88>)
 8009ee6:	2295      	movs	r2, #149	@ 0x95
 8009ee8:	491c      	ldr	r1, [pc, #112]	@ (8009f5c <netbuf_ref+0x8c>)
 8009eea:	481d      	ldr	r0, [pc, #116]	@ (8009f60 <netbuf_ref+0x90>)
 8009eec:	f00d f952 	bl	8017194 <iprintf>
 8009ef0:	f06f 030f 	mvn.w	r3, #15
 8009ef4:	e02b      	b.n	8009f4e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f002 fa56 	bl	800c3b4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8009f08:	2202      	movs	r2, #2
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	f001 fed9 	bl	800bcc4 <pbuf_alloc>
 8009f12:	4602      	mov	r2, r0
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d105      	bne.n	8009f2c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	e010      	b.n	8009f4e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	88fa      	ldrh	r2, [r7, #6]
 8009f3a:	811a      	strh	r2, [r3, #8]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	6812      	ldr	r2, [r2, #0]
 8009f40:	891b      	ldrh	r3, [r3, #8]
 8009f42:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	080188ec 	.word	0x080188ec
 8009f5c:	080189a4 	.word	0x080189a4
 8009f60:	0801893c 	.word	0x0801893c

08009f64 <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	db02      	blt.n	8009f78 <get_socket+0x14>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	dd04      	ble.n	8009f82 <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8009f78:	4b0d      	ldr	r3, [pc, #52]	@ (8009fb0 <get_socket+0x4c>)
 8009f7a:	2209      	movs	r2, #9
 8009f7c:	601a      	str	r2, [r3, #0]
    return NULL;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e011      	b.n	8009fa6 <get_socket+0x42>
  }

  sock = &sockets[s];
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4a09      	ldr	r2, [pc, #36]	@ (8009fb4 <get_socket+0x50>)
 8009f8e:	4413      	add	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d104      	bne.n	8009fa4 <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8009f9a:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <get_socket+0x4c>)
 8009f9c:	2209      	movs	r2, #9
 8009f9e:	601a      	str	r2, [r3, #0]
    return NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	e000      	b.n	8009fa6 <get_socket+0x42>
  }

  return sock;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bc80      	pop	{r7}
 8009fae:	4770      	bx	lr
 8009fb0:	20009b20 	.word	0x20009b20
 8009fb4:	2000609c 	.word	0x2000609c

08009fb8 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	e074      	b.n	800a0b2 <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8009fc8:	f00b f8c0 	bl	801514c <sys_arch_protect>
 8009fcc:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 8009fce:	493d      	ldr	r1, [pc, #244]	@ (800a0c4 <alloc_socket+0x10c>)
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	440b      	add	r3, r1
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d161      	bne.n	800a0a6 <alloc_socket+0xee>
 8009fe2:	4938      	ldr	r1, [pc, #224]	@ (800a0c4 <alloc_socket+0x10c>)
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	009b      	lsls	r3, r3, #2
 8009fea:	4413      	add	r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	440b      	add	r3, r1
 8009ff0:	3311      	adds	r3, #17
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d156      	bne.n	800a0a6 <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 8009ff8:	4932      	ldr	r1, [pc, #200]	@ (800a0c4 <alloc_socket+0x10c>)
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800a00a:	68b8      	ldr	r0, [r7, #8]
 800a00c:	f00b f8ac 	bl	8015168 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 800a010:	492c      	ldr	r1, [pc, #176]	@ (800a0c4 <alloc_socket+0x10c>)
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	440b      	add	r3, r1
 800a01e:	3304      	adds	r3, #4
 800a020:	2200      	movs	r2, #0
 800a022:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 800a024:	4927      	ldr	r1, [pc, #156]	@ (800a0c4 <alloc_socket+0x10c>)
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	3308      	adds	r3, #8
 800a034:	2200      	movs	r2, #0
 800a036:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 800a038:	4922      	ldr	r1, [pc, #136]	@ (800a0c4 <alloc_socket+0x10c>)
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4613      	mov	r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	4413      	add	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	330a      	adds	r3, #10
 800a048:	2200      	movs	r2, #0
 800a04a:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a054:	2b10      	cmp	r3, #16
 800a056:	d102      	bne.n	800a05e <alloc_socket+0xa6>
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <alloc_socket+0xaa>
 800a05e:	2301      	movs	r3, #1
 800a060:	e000      	b.n	800a064 <alloc_socket+0xac>
 800a062:	2300      	movs	r3, #0
 800a064:	b298      	uxth	r0, r3
 800a066:	4917      	ldr	r1, [pc, #92]	@ (800a0c4 <alloc_socket+0x10c>)
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	440b      	add	r3, r1
 800a074:	330c      	adds	r3, #12
 800a076:	4602      	mov	r2, r0
 800a078:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800a07a:	4912      	ldr	r1, [pc, #72]	@ (800a0c4 <alloc_socket+0x10c>)
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	4613      	mov	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	440b      	add	r3, r1
 800a088:	330e      	adds	r3, #14
 800a08a:	2200      	movs	r2, #0
 800a08c:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 800a08e:	490d      	ldr	r1, [pc, #52]	@ (800a0c4 <alloc_socket+0x10c>)
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	4613      	mov	r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4413      	add	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	3310      	adds	r3, #16
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	e00a      	b.n	800a0bc <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 800a0a6:	68b8      	ldr	r0, [r7, #8]
 800a0a8:	f00b f85e 	bl	8015168 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	dd87      	ble.n	8009fc8 <alloc_socket+0x10>
  }
  return -1;
 800a0b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	2000609c 	.word	0x2000609c

0800a0c8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  void *lastdata;

  lastdata         = sock->lastdata;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	60fb      	str	r3, [r7, #12]
  sock->lastdata   = NULL;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	605a      	str	r2, [r3, #4]
  sock->lastoffset = 0;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	811a      	strh	r2, [r3, #8]
  sock->err        = 0;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	741a      	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
 800a0ea:	f00b f82f 	bl	801514c <sys_arch_protect>
 800a0ee:	60b8      	str	r0, [r7, #8]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	68b8      	ldr	r0, [r7, #8]
 800a0f8:	f00b f836 	bl	8015168 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d009      	beq.n	800a116 <free_socket+0x4e>
    if (is_tcp) {
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <free_socket+0x48>
      pbuf_free((struct pbuf *)lastdata);
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f002 f953 	bl	800c3b4 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 800a10e:	e002      	b.n	800a116 <free_socket+0x4e>
      netbuf_delete((struct netbuf *)lastdata);
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fe95 	bl	8009e40 <netbuf_delete>
}
 800a116:	bf00      	nop
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ff19 	bl	8009f64 <get_socket>
 800a132:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d102      	bne.n	800a140 <lwip_close+0x20>
    return -1;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	e03d      	b.n	800a1bc <lwip_close+0x9c>
  }

  if (sock->conn != NULL) {
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a152:	2b10      	cmp	r3, #16
 800a154:	bf0c      	ite	eq
 800a156:	2301      	moveq	r3, #1
 800a158:	2300      	movne	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	617b      	str	r3, [r7, #20]
 800a15e:	e00a      	b.n	800a176 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d006      	beq.n	800a176 <lwip_close+0x56>
 800a168:	4b16      	ldr	r3, [pc, #88]	@ (800a1c4 <lwip_close+0xa4>)
 800a16a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800a16e:	4916      	ldr	r1, [pc, #88]	@ (800a1c8 <lwip_close+0xa8>)
 800a170:	4816      	ldr	r0, [pc, #88]	@ (800a1cc <lwip_close+0xac>)
 800a172:	f00d f80f 	bl	8017194 <iprintf>
#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7fd fdac 	bl	8007cd8 <netconn_delete>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d012      	beq.n	800a1b2 <lwip_close+0x92>
    sock_set_errno(sock, err_to_errno(err));
 800a18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fe37 	bl	8009e04 <err_to_errno>
 800a196:	60b8      	str	r0, [r7, #8]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	741a      	strb	r2, [r3, #16]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <lwip_close+0x8c>
 800a1a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d0 <lwip_close+0xb0>)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	6013      	str	r3, [r2, #0]
    return -1;
 800a1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a1b0:	e004      	b.n	800a1bc <lwip_close+0x9c>
  }

  free_socket(sock, is_tcp);
 800a1b2:	6979      	ldr	r1, [r7, #20]
 800a1b4:	6938      	ldr	r0, [r7, #16]
 800a1b6:	f7ff ff87 	bl	800a0c8 <free_socket>
  set_errno(0);
  return 0;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	08018a84 	.word	0x08018a84
 800a1c8:	08018b64 	.word	0x08018b64
 800a1cc:	08018ac8 	.word	0x08018ac8
 800a1d0:	20009b20 	.word	0x20009b20

0800a1d4 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b08c      	sub	sp, #48	@ 0x30
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff febf 	bl	8009f64 <get_socket>
 800a1e6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800a1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <lwip_connect+0x20>
    return -1;
 800a1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f2:	e06e      	b.n	800a2d2 <lwip_connect+0xfe>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d108      	bne.n	800a20e <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800a1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7fd fe17 	bl	8007e34 <netconn_disconnect>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a20c:	e03d      	b.n	800a28a <lwip_connect+0xb6>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b10      	cmp	r3, #16
 800a212:	d10c      	bne.n	800a22e <lwip_connect+0x5a>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d003      	beq.n	800a224 <lwip_connect+0x50>
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	785b      	ldrb	r3, [r3, #1]
 800a220:	2b02      	cmp	r3, #2
 800a222:	d104      	bne.n	800a22e <lwip_connect+0x5a>
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f003 0303 	and.w	r3, r3, #3
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d018      	beq.n	800a260 <lwip_connect+0x8c>
 800a22e:	4b2b      	ldr	r3, [pc, #172]	@ (800a2dc <lwip_connect+0x108>)
 800a230:	f240 229d 	movw	r2, #669	@ 0x29d
 800a234:	492a      	ldr	r1, [pc, #168]	@ (800a2e0 <lwip_connect+0x10c>)
 800a236:	482b      	ldr	r0, [pc, #172]	@ (800a2e4 <lwip_connect+0x110>)
 800a238:	f00c ffac 	bl	8017194 <iprintf>
 800a23c:	f06f 000f 	mvn.w	r0, #15
 800a240:	f7ff fde0 	bl	8009e04 <err_to_errno>
 800a244:	6238      	str	r0, [r7, #32]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	741a      	strb	r2, [r3, #16]
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <lwip_connect+0x86>
 800a254:	4a24      	ldr	r2, [pc, #144]	@ (800a2e8 <lwip_connect+0x114>)
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	6013      	str	r3, [r2, #0]
 800a25a:	f04f 33ff 	mov.w	r3, #4294967295
 800a25e:	e038      	b.n	800a2d2 <lwip_connect+0xfe>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	885b      	ldrh	r3, [r3, #2]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 fecc 	bl	800b008 <lwip_htons>
 800a270:	4603      	mov	r3, r0
 800a272:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800a274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a27a:	f107 0114 	add.w	r1, r7, #20
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fd fda0 	bl	8007dc4 <netconn_connect>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800a28a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d012      	beq.n	800a2b8 <lwip_connect+0xe4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800a292:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff fdb4 	bl	8009e04 <err_to_errno>
 800a29c:	61b8      	str	r0, [r7, #24]
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a4:	741a      	strb	r2, [r3, #16]
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <lwip_connect+0xde>
 800a2ac:	4a0e      	ldr	r2, [pc, #56]	@ (800a2e8 <lwip_connect+0x114>)
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	6013      	str	r3, [r2, #0]
    return -1;
 800a2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2b6:	e00c      	b.n	800a2d2 <lwip_connect+0xfe>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	61fb      	str	r3, [r7, #28]
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c2:	741a      	strb	r2, [r3, #16]
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <lwip_connect+0xfc>
 800a2ca:	4a07      	ldr	r2, [pc, #28]	@ (800a2e8 <lwip_connect+0x114>)
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	6013      	str	r3, [r2, #0]
  return 0;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3730      	adds	r7, #48	@ 0x30
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	08018a84 	.word	0x08018a84
 800a2e0:	08018b7c 	.word	0x08018b7c
 800a2e4:	08018ac8 	.word	0x08018ac8
 800a2e8:	20009b20 	.word	0x20009b20

0800a2ec <lwip_recvfrom>:
}

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800a2ec:	b590      	push	{r4, r7, lr}
 800a2ee:	b097      	sub	sp, #92	@ 0x5c
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	607a      	str	r2, [r7, #4]
 800a2f8:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  void             *buf = NULL;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u8_t             done = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  err_t            err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff fe2b 	bl	8009f64 <get_socket>
 800a30e:	6438      	str	r0, [r7, #64]	@ 0x40
  if (!sock) {
 800a310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <lwip_recvfrom+0x30>
    return -1;
 800a316:	f04f 33ff 	mov.w	r3, #4294967295
 800a31a:	e19b      	b.n	800a654 <lwip_recvfrom+0x368>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
 800a31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d003      	beq.n	800a32c <lwip_recvfrom+0x40>
      buf = sock->lastdata;
 800a324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a32a:	e08e      	b.n	800a44a <lwip_recvfrom+0x15e>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d107      	bne.n	800a346 <lwip_recvfrom+0x5a>
 800a336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01b      	beq.n	800a37e <lwip_recvfrom+0x92>
          (sock->rcvevent <= 0)) {
 800a346:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a348:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dc16      	bgt.n	800a37e <lwip_recvfrom+0x92>
        if (off > 0) {
 800a350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a352:	2b00      	cmp	r3, #0
 800a354:	dd0d      	ble.n	800a372 <lwip_recvfrom+0x86>
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a360:	741a      	strb	r2, [r3, #16]
 800a362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a364:	2b00      	cmp	r3, #0
 800a366:	d002      	beq.n	800a36e <lwip_recvfrom+0x82>
 800a368:	4aa0      	ldr	r2, [pc, #640]	@ (800a5ec <lwip_recvfrom+0x300>)
 800a36a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36c:	6013      	str	r3, [r2, #0]
          return off;
 800a36e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a370:	e170      	b.n	800a654 <lwip_recvfrom+0x368>
        }
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
 800a372:	4b9e      	ldr	r3, [pc, #632]	@ (800a5ec <lwip_recvfrom+0x300>)
 800a374:	220b      	movs	r2, #11
 800a376:	601a      	str	r2, [r3, #0]
        return -1;
 800a378:	f04f 33ff 	mov.w	r3, #4294967295
 800a37c:	e16a      	b.n	800a654 <lwip_recvfrom+0x368>
      }

      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d10b      	bne.n	800a3a4 <lwip_recvfrom+0xb8>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
 800a38c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a394:	4611      	mov	r1, r2
 800a396:	4618      	mov	r0, r3
 800a398:	f7fd fe54 	bl	8008044 <netconn_recv_tcp_pbuf>
 800a39c:	4603      	mov	r3, r0
 800a39e:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a3a2:	e00a      	b.n	800a3ba <lwip_recvfrom+0xce>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
 800a3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a3ac:	4611      	mov	r1, r2
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fd fe70 	bl	8008094 <netconn_recv>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
 800a3ba:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d036      	beq.n	800a430 <lwip_recvfrom+0x144>
        if (off > 0) {
 800a3c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	dd19      	ble.n	800a3fc <lwip_recvfrom+0x110>
          if (err == ERR_CLSD) {
 800a3c8:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800a3cc:	f113 0f0f 	cmn.w	r3, #15
 800a3d0:	d106      	bne.n	800a3e0 <lwip_recvfrom+0xf4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
 800a3d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	2100      	movs	r1, #0
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 facc 	bl	800a978 <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ea:	741a      	strb	r2, [r3, #16]
 800a3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d002      	beq.n	800a3f8 <lwip_recvfrom+0x10c>
 800a3f2:	4a7e      	ldr	r2, [pc, #504]	@ (800a5ec <lwip_recvfrom+0x300>)
 800a3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f6:	6013      	str	r3, [r2, #0]
          return off;
 800a3f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3fa:	e12b      	b.n	800a654 <lwip_recvfrom+0x368>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800a3fc:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff fcff 	bl	8009e04 <err_to_errno>
 800a406:	63b8      	str	r0, [r7, #56]	@ 0x38
 800a408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a40e:	741a      	strb	r2, [r3, #16]
 800a410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <lwip_recvfrom+0x130>
 800a416:	4a75      	ldr	r2, [pc, #468]	@ (800a5ec <lwip_recvfrom+0x300>)
 800a418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41a:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800a41c:	f997 304a 	ldrsb.w	r3, [r7, #74]	@ 0x4a
 800a420:	f113 0f0f 	cmn.w	r3, #15
 800a424:	d101      	bne.n	800a42a <lwip_recvfrom+0x13e>
          return 0;
 800a426:	2300      	movs	r3, #0
 800a428:	e114      	b.n	800a654 <lwip_recvfrom+0x368>
        } else {
          return -1;
 800a42a:	f04f 33ff 	mov.w	r3, #4294967295
 800a42e:	e111      	b.n	800a654 <lwip_recvfrom+0x368>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
 800a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d106      	bne.n	800a444 <lwip_recvfrom+0x158>
 800a436:	4b6e      	ldr	r3, [pc, #440]	@ (800a5f0 <lwip_recvfrom+0x304>)
 800a438:	f240 3227 	movw	r2, #807	@ 0x327
 800a43c:	496d      	ldr	r1, [pc, #436]	@ (800a5f4 <lwip_recvfrom+0x308>)
 800a43e:	486e      	ldr	r0, [pc, #440]	@ (800a5f8 <lwip_recvfrom+0x30c>)
 800a440:	f00c fea8 	bl	8017194 <iprintf>
      sock->lastdata = buf;
 800a444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a448:	605a      	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a454:	2b10      	cmp	r3, #16
 800a456:	d102      	bne.n	800a45e <lwip_recvfrom+0x172>
      p = (struct pbuf *)buf;
 800a458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a45c:	e002      	b.n	800a464 <lwip_recvfrom+0x178>
    } else {
      p = ((struct netbuf *)buf)->p;
 800a45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	657b      	str	r3, [r7, #84]	@ 0x54
    }
    buflen = p->tot_len;
 800a464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a466:	891b      	ldrh	r3, [r3, #8]
 800a468:	867b      	strh	r3, [r7, #50]	@ 0x32
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
 800a46a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a46c:	891b      	ldrh	r3, [r3, #8]
 800a46e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	867b      	strh	r3, [r7, #50]	@ 0x32

    if (len > buflen) {
 800a474:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d903      	bls.n	800a484 <lwip_recvfrom+0x198>
      copylen = buflen;
 800a47c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a47e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800a482:	e002      	b.n	800a48a <lwip_recvfrom+0x19e>
    } else {
      copylen = (u16_t)len;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
 800a48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	18d1      	adds	r1, r2, r3
 800a490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a492:	891b      	ldrh	r3, [r3, #8]
 800a494:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800a498:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a49a:	f002 f995 	bl	800c7c8 <pbuf_copy_partial>

    off += copylen;
 800a49e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a4a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4a4:	4413      	add	r3, r2
 800a4a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a4a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4b2:	2b10      	cmp	r3, #16
 800a4b4:	d127      	bne.n	800a506 <lwip_recvfrom+0x21a>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
 800a4b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d206      	bcs.n	800a4ce <lwip_recvfrom+0x1e2>
 800a4c0:	4b4b      	ldr	r3, [pc, #300]	@ (800a5f0 <lwip_recvfrom+0x304>)
 800a4c2:	f240 3243 	movw	r2, #835	@ 0x343
 800a4c6:	494d      	ldr	r1, [pc, #308]	@ (800a5fc <lwip_recvfrom+0x310>)
 800a4c8:	484b      	ldr	r0, [pc, #300]	@ (800a5f8 <lwip_recvfrom+0x30c>)
 800a4ca:	f00c fe63 	bl	8017194 <iprintf>
      len -= copylen;
 800a4ce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	1ad3      	subs	r3, r2, r3
 800a4d6:	607b      	str	r3, [r7, #4]
      if ((len <= 0) ||
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00f      	beq.n	800a4fe <lwip_recvfrom+0x212>
          (p->flags & PBUF_FLAG_PUSH) ||
 800a4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a4e0:	7b5b      	ldrb	r3, [r3, #13]
 800a4e2:	f003 0301 	and.w	r3, r3, #1
      if ((len <= 0) ||
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d109      	bne.n	800a4fe <lwip_recvfrom+0x212>
          (sock->rcvevent <= 0) ||
 800a4ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ec:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	dd04      	ble.n	800a4fe <lwip_recvfrom+0x212>
          ((flags & MSG_PEEK) != 0)) {
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
          (sock->rcvevent <= 0) ||
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d006      	beq.n	800a50c <lwip_recvfrom+0x220>
        done = 1;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 800a504:	e002      	b.n	800a50c <lwip_recvfrom+0x220>
      }
    } else {
      done = 1;
 800a506:	2301      	movs	r3, #1
 800a508:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    }

    /* Check to see from where the data was.*/
    if (done) {
 800a50c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a510:	2b00      	cmp	r3, #0
 800a512:	d04c      	beq.n	800a5ae <lwip_recvfrom+0x2c2>
#if !SOCKETS_DEBUG
      if (from && fromlen)
 800a514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a516:	2b00      	cmp	r3, #0
 800a518:	d049      	beq.n	800a5ae <lwip_recvfrom+0x2c2>
 800a51a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d046      	beq.n	800a5ae <lwip_recvfrom+0x2c2>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a52a:	2b10      	cmp	r3, #16
 800a52c:	d10b      	bne.n	800a546 <lwip_recvfrom+0x25a>
          fromaddr = &tmpaddr;
 800a52e:	f107 0320 	add.w	r3, r7, #32
 800a532:	647b      	str	r3, [r7, #68]	@ 0x44
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
 800a534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	f107 0226 	add.w	r2, r7, #38	@ 0x26
 800a53c:	2300      	movs	r3, #0
 800a53e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a540:	f7fd fbf0 	bl	8007d24 <netconn_getaddr>
 800a544:	e005      	b.n	800a552 <lwip_recvfrom+0x266>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
 800a546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a548:	899b      	ldrh	r3, [r3, #12]
 800a54a:	84fb      	strh	r3, [r7, #38]	@ 0x26
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
 800a54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a54e:	3308      	adds	r3, #8
 800a550:	647b      	str	r3, [r7, #68]	@ 0x44
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800a552:	f107 0310 	add.w	r3, r7, #16
 800a556:	2210      	movs	r2, #16
 800a558:	701a      	strb	r2, [r3, #0]
 800a55a:	f107 0310 	add.w	r3, r7, #16
 800a55e:	2202      	movs	r2, #2
 800a560:	705a      	strb	r2, [r3, #1]
 800a562:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a564:	f107 0410 	add.w	r4, r7, #16
 800a568:	4618      	mov	r0, r3
 800a56a:	f000 fd4d 	bl	800b008 <lwip_htons>
 800a56e:	4603      	mov	r3, r0
 800a570:	8063      	strh	r3, [r4, #2]
 800a572:	f107 0310 	add.w	r3, r7, #16
 800a576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	605a      	str	r2, [r3, #4]
 800a57c:	f107 0310 	add.w	r3, r7, #16
 800a580:	3308      	adds	r3, #8
 800a582:	2208      	movs	r2, #8
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f00c ff5c 	bl	8017444 <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
 800a58c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	7c3a      	ldrb	r2, [r7, #16]
 800a592:	4293      	cmp	r3, r2
 800a594:	d903      	bls.n	800a59e <lwip_recvfrom+0x2b2>
            *fromlen = saddr.sa.sa_len;
 800a596:	7c3b      	ldrb	r3, [r7, #16]
 800a598:	461a      	mov	r2, r3
 800a59a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a59c:	601a      	str	r2, [r3, #0]
          }
          MEMCPY(from, &saddr, *fromlen);
 800a59e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	f107 0310 	add.w	r3, r7, #16
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800a5aa:	f00d f838 	bl	801761e <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d13b      	bne.n	800a630 <lwip_recvfrom+0x344>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
 800a5b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5c2:	2b10      	cmp	r3, #16
 800a5c4:	d11c      	bne.n	800a600 <lwip_recvfrom+0x314>
 800a5c6:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a5c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	dd16      	ble.n	800a600 <lwip_recvfrom+0x314>
        sock->lastdata = buf;
 800a5d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a5d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5d6:	605a      	str	r2, [r3, #4]
        sock->lastoffset += copylen;
 800a5d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5da:	891a      	ldrh	r2, [r3, #8]
 800a5dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800a5e0:	4413      	add	r3, r2
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e6:	811a      	strh	r2, [r3, #8]
 800a5e8:	e022      	b.n	800a630 <lwip_recvfrom+0x344>
 800a5ea:	bf00      	nop
 800a5ec:	20009b20 	.word	0x20009b20
 800a5f0:	08018a84 	.word	0x08018a84
 800a5f4:	08018b9c 	.word	0x08018b9c
 800a5f8:	08018ac8 	.word	0x08018ac8
 800a5fc:	08018ba8 	.word	0x08018ba8
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
 800a600:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a602:	2200      	movs	r2, #0
 800a604:	605a      	str	r2, [r3, #4]
        sock->lastoffset = 0;
 800a606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a608:	2200      	movs	r2, #0
 800a60a:	811a      	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a60c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a616:	2b10      	cmp	r3, #16
 800a618:	d104      	bne.n	800a624 <lwip_recvfrom+0x338>
          pbuf_free((struct pbuf *)buf);
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	4618      	mov	r0, r3
 800a61e:	f001 fec9 	bl	800c3b4 <pbuf_free>
 800a622:	e003      	b.n	800a62c <lwip_recvfrom+0x340>
        } else {
          netbuf_delete((struct netbuf *)buf);
 800a624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a626:	4618      	mov	r0, r3
 800a628:	f7ff fc0a 	bl	8009e40 <netbuf_delete>
        }
        buf = NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
    }
  } while (!done);
 800a630:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a634:	2b00      	cmp	r3, #0
 800a636:	f43f ae71 	beq.w	800a31c <lwip_recvfrom+0x30>

  sock_set_errno(sock, 0);
 800a63a:	2300      	movs	r3, #0
 800a63c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a63e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a640:	b2da      	uxtb	r2, r3
 800a642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a644:	741a      	strb	r2, [r3, #16]
 800a646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <lwip_recvfrom+0x366>
 800a64c:	4a03      	ldr	r2, [pc, #12]	@ (800a65c <lwip_recvfrom+0x370>)
 800a64e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a650:	6013      	str	r3, [r2, #0]
  return off;
 800a652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800a654:	4618      	mov	r0, r3
 800a656:	375c      	adds	r7, #92	@ 0x5c
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	20009b20 	.word	0x20009b20

0800a660 <lwip_recv>:
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
}

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af02      	add	r7, sp, #8
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
 800a66c:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800a66e:	2300      	movs	r3, #0
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	2300      	movs	r3, #0
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f7ff fe35 	bl	800a2ec <lwip_recvfrom>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	@ 0x28
 800a690:	af02      	add	r7, sp, #8
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fc62 	bl	8009f64 <get_socket>
 800a6a0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <lwip_send+0x22>
    return -1;
 800a6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ac:	e04b      	b.n	800a746 <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d00b      	beq.n	800a6d4 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9301      	str	r3, [sp, #4]
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9300      	str	r3, [sp, #0]
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f000 f842 	bl	800a754 <lwip_sendto>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	e038      	b.n	800a746 <lwip_send+0xba>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	10db      	asrs	r3, r3, #3
 800a6d8:	b25b      	sxtb	r3, r3
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800a6e0:	f043 0301 	orr.w	r3, r3, #1
 800a6e4:	b25a      	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	105b      	asrs	r3, r3, #1
 800a6ea:	b25b      	sxtb	r3, r3
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	b25b      	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 800a6f6:	76fb      	strb	r3, [r7, #27]
  written = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	6818      	ldr	r0, [r3, #0]
 800a700:	7efa      	ldrb	r2, [r7, #27]
 800a702:	f107 0310 	add.w	r3, r7, #16
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	4613      	mov	r3, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	68b9      	ldr	r1, [r7, #8]
 800a70e:	f7fd fd65 	bl	80081dc <netconn_write_partly>
 800a712:	4603      	mov	r3, r0
 800a714:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800a716:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fb72 	bl	8009e04 <err_to_errno>
 800a720:	6178      	str	r0, [r7, #20]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	b2da      	uxtb	r2, r3
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	741a      	strb	r2, [r3, #16]
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <lwip_send+0xaa>
 800a730:	4a07      	ldr	r2, [pc, #28]	@ (800a750 <lwip_send+0xc4>)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 800a736:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <lwip_send+0xb6>
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	e001      	b.n	800a746 <lwip_send+0xba>
 800a742:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a746:	4618      	mov	r0, r3
 800a748:	3720      	adds	r7, #32
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20009b20 	.word	0x20009b20

0800a754 <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08e      	sub	sp, #56	@ 0x38
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f7ff fbfe 	bl	8009f64 <get_socket>
 800a768:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800a76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d102      	bne.n	800a776 <lwip_sendto+0x22>
    return -1;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	e094      	b.n	800a8a0 <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a780:	2b10      	cmp	r3, #16
 800a782:	d107      	bne.n	800a794 <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	68b9      	ldr	r1, [r7, #8]
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f7ff ff7e 	bl	800a68c <lwip_send>
 800a790:	4603      	mov	r3, r0
 800a792:	e085      	b.n	800a8a0 <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a79a:	d306      	bcc.n	800a7aa <lwip_sendto+0x56>
 800a79c:	4b42      	ldr	r3, [pc, #264]	@ (800a8a8 <lwip_sendto+0x154>)
 800a79e:	f240 427b 	movw	r2, #1147	@ 0x47b
 800a7a2:	4942      	ldr	r1, [pc, #264]	@ (800a8ac <lwip_sendto+0x158>)
 800a7a4:	4842      	ldr	r0, [pc, #264]	@ (800a8b0 <lwip_sendto+0x15c>)
 800a7a6:	f00c fcf5 	bl	8017194 <iprintf>
  short_size = (u16_t)size;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800a7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d102      	bne.n	800a7ba <lwip_sendto+0x66>
 800a7b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d024      	beq.n	800a804 <lwip_sendto+0xb0>
 800a7ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7bc:	2b10      	cmp	r3, #16
 800a7be:	d108      	bne.n	800a7d2 <lwip_sendto+0x7e>
 800a7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7c2:	785b      	ldrb	r3, [r3, #1]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d104      	bne.n	800a7d2 <lwip_sendto+0x7e>
 800a7c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d018      	beq.n	800a804 <lwip_sendto+0xb0>
 800a7d2:	4b35      	ldr	r3, [pc, #212]	@ (800a8a8 <lwip_sendto+0x154>)
 800a7d4:	f240 427d 	movw	r2, #1149	@ 0x47d
 800a7d8:	4936      	ldr	r1, [pc, #216]	@ (800a8b4 <lwip_sendto+0x160>)
 800a7da:	4835      	ldr	r0, [pc, #212]	@ (800a8b0 <lwip_sendto+0x15c>)
 800a7dc:	f00c fcda 	bl	8017194 <iprintf>
 800a7e0:	f06f 000f 	mvn.w	r0, #15
 800a7e4:	f7ff fb0e 	bl	8009e04 <err_to_errno>
 800a7e8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	741a      	strb	r2, [r3, #16]
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d002      	beq.n	800a7fe <lwip_sendto+0xaa>
 800a7f8:	4a2f      	ldr	r2, [pc, #188]	@ (800a8b8 <lwip_sendto+0x164>)
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a802:	e04d      	b.n	800a8a0 <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800a80c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800a812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a81a:	885b      	ldrh	r3, [r3, #2]
 800a81c:	4618      	mov	r0, r3
 800a81e:	f000 fbf3 	bl	800b008 <lwip_htons>
 800a822:	4603      	mov	r3, r0
 800a824:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a826:	e003      	b.n	800a830 <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800a82c:	2300      	movs	r3, #0
 800a82e:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 800a830:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a832:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800a834:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a836:	f107 0314 	add.w	r3, r7, #20
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff fb47 	bl	8009ed0 <netbuf_ref>
 800a842:	4603      	mov	r3, r0
 800a844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800a848:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f107 0214 	add.w	r2, r7, #20
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fd fc92 	bl	8008184 <netconn_send>
 800a860:	4603      	mov	r3, r0
 800a862:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800a866:	f107 0314 	add.w	r3, r7, #20
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7ff fb08 	bl	8009e80 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800a870:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a874:	4618      	mov	r0, r3
 800a876:	f7ff fac5 	bl	8009e04 <err_to_errno>
 800a87a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87e:	b2da      	uxtb	r2, r3
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	741a      	strb	r2, [r3, #16]
 800a884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	d002      	beq.n	800a890 <lwip_sendto+0x13c>
 800a88a:	4a0b      	ldr	r2, [pc, #44]	@ (800a8b8 <lwip_sendto+0x164>)
 800a88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88e:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 800a890:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <lwip_sendto+0x148>
 800a898:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a89a:	e001      	b.n	800a8a0 <lwip_sendto+0x14c>
 800a89c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3738      	adds	r7, #56	@ 0x38
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	08018a84 	.word	0x08018a84
 800a8ac:	08018c48 	.word	0x08018c48
 800a8b0:	08018ac8 	.word	0x08018ac8
 800a8b4:	08018c6c 	.word	0x08018c6c
 800a8b8:	20009b20 	.word	0x20009b20

0800a8bc <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b03      	cmp	r3, #3
 800a8cc:	d009      	beq.n	800a8e2 <lwip_socket+0x26>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	dc23      	bgt.n	800a91c <lwip_socket+0x60>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d019      	beq.n	800a90e <lwip_socket+0x52>
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d009      	beq.n	800a8f4 <lwip_socket+0x38>
 800a8e0:	e01c      	b.n	800a91c <lwip_socket+0x60>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	4a22      	ldr	r2, [pc, #136]	@ (800a970 <lwip_socket+0xb4>)
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	2040      	movs	r0, #64	@ 0x40
 800a8ec:	f7fd f97a 	bl	8007be4 <netconn_new_with_proto_and_callback>
 800a8f0:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800a8f2:	e019      	b.n	800a928 <lwip_socket+0x6c>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b88      	cmp	r3, #136	@ 0x88
 800a8f8:	d101      	bne.n	800a8fe <lwip_socket+0x42>
 800a8fa:	2321      	movs	r3, #33	@ 0x21
 800a8fc:	e000      	b.n	800a900 <lwip_socket+0x44>
 800a8fe:	2320      	movs	r3, #32
 800a900:	4a1b      	ldr	r2, [pc, #108]	@ (800a970 <lwip_socket+0xb4>)
 800a902:	2100      	movs	r1, #0
 800a904:	4618      	mov	r0, r3
 800a906:	f7fd f96d 	bl	8007be4 <netconn_new_with_proto_and_callback>
 800a90a:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800a90c:	e00c      	b.n	800a928 <lwip_socket+0x6c>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 800a90e:	4a18      	ldr	r2, [pc, #96]	@ (800a970 <lwip_socket+0xb4>)
 800a910:	2100      	movs	r1, #0
 800a912:	2010      	movs	r0, #16
 800a914:	f7fd f966 	bl	8007be4 <netconn_new_with_proto_and_callback>
 800a918:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 800a91a:	e005      	b.n	800a928 <lwip_socket+0x6c>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 800a91c:	4b15      	ldr	r3, [pc, #84]	@ (800a974 <lwip_socket+0xb8>)
 800a91e:	2216      	movs	r2, #22
 800a920:	601a      	str	r2, [r3, #0]
    return -1;
 800a922:	f04f 33ff 	mov.w	r3, #4294967295
 800a926:	e01e      	b.n	800a966 <lwip_socket+0xaa>
  }

  if (!conn) {
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d105      	bne.n	800a93a <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800a92e:	4b11      	ldr	r3, [pc, #68]	@ (800a974 <lwip_socket+0xb8>)
 800a930:	2269      	movs	r2, #105	@ 0x69
 800a932:	601a      	str	r2, [r3, #0]
    return -1;
 800a934:	f04f 33ff 	mov.w	r3, #4294967295
 800a938:	e015      	b.n	800a966 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800a93a:	2100      	movs	r1, #0
 800a93c:	6978      	ldr	r0, [r7, #20]
 800a93e:	f7ff fb3b 	bl	8009fb8 <alloc_socket>
 800a942:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94a:	d108      	bne.n	800a95e <lwip_socket+0xa2>
    netconn_delete(conn);
 800a94c:	6978      	ldr	r0, [r7, #20]
 800a94e:	f7fd f9c3 	bl	8007cd8 <netconn_delete>
    set_errno(ENFILE);
 800a952:	4b08      	ldr	r3, [pc, #32]	@ (800a974 <lwip_socket+0xb8>)
 800a954:	2217      	movs	r2, #23
 800a956:	601a      	str	r2, [r3, #0]
    return -1;
 800a958:	f04f 33ff 	mov.w	r3, #4294967295
 800a95c:	e003      	b.n	800a966 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800a964:	693b      	ldr	r3, [r7, #16]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	0800a979 	.word	0x0800a979
 800a974:	20009b20 	.word	0x20009b20

0800a978 <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
 800a984:	4613      	mov	r3, r2
 800a986:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80f6 	beq.w	800ab7c <event_callback+0x204>
    s = conn->socket;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da18      	bge.n	800a9ce <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800a99c:	f00a fbd6 	bl	801514c <sys_arch_protect>
 800a9a0:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	da0b      	bge.n	800a9c2 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800a9aa:	78fb      	ldrb	r3, [r7, #3]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <event_callback+0x42>
          conn->socket--;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	1e5a      	subs	r2, r3, #1
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f00a fbd4 	bl	8015168 <sys_arch_unprotect>
        return;
 800a9c0:	e0df      	b.n	800ab82 <event_callback+0x20a>
      }
      s = conn->socket;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 800a9c8:	6978      	ldr	r0, [r7, #20]
 800a9ca:	f00a fbcd 	bl	8015168 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800a9ce:	69f8      	ldr	r0, [r7, #28]
 800a9d0:	f7ff fac8 	bl	8009f64 <get_socket>
 800a9d4:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80d1 	beq.w	800ab80 <event_callback+0x208>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 800a9de:	f00a fbb5 	bl	801514c <sys_arch_protect>
 800a9e2:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 800a9e4:	78fb      	ldrb	r3, [r7, #3]
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	d82c      	bhi.n	800aa44 <event_callback+0xcc>
 800a9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f0 <event_callback+0x78>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aa05 	.word	0x0800aa05
 800a9f4:	0800aa19 	.word	0x0800aa19
 800a9f8:	0800aa2d 	.word	0x0800aa2d
 800a9fc:	0800aa35 	.word	0x0800aa35
 800aa00:	0800aa3d 	.word	0x0800aa3d
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	b21a      	sxth	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	815a      	strh	r2, [r3, #10]
      break;
 800aa16:	e01d      	b.n	800aa54 <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	b21a      	sxth	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	815a      	strh	r2, [r3, #10]
      break;
 800aa2a:	e013      	b.n	800aa54 <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2201      	movs	r2, #1
 800aa30:	819a      	strh	r2, [r3, #12]
      break;
 800aa32:	e00f      	b.n	800aa54 <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	819a      	strh	r2, [r3, #12]
      break;
 800aa3a:	e00b      	b.n	800aa54 <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	81da      	strh	r2, [r3, #14]
      break;
 800aa42:	e007      	b.n	800aa54 <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 800aa44:	4b50      	ldr	r3, [pc, #320]	@ (800ab88 <event_callback+0x210>)
 800aa46:	f240 625d 	movw	r2, #1629	@ 0x65d
 800aa4a:	4950      	ldr	r1, [pc, #320]	@ (800ab8c <event_callback+0x214>)
 800aa4c:	4850      	ldr	r0, [pc, #320]	@ (800ab90 <event_callback+0x218>)
 800aa4e:	f00c fba1 	bl	8017194 <iprintf>
      break;
 800aa52:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	7c5b      	ldrb	r3, [r3, #17]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <event_callback+0xe8>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
 800aa5c:	bf00      	nop
 800aa5e:	e003      	b.n	800aa68 <event_callback+0xf0>
    SYS_ARCH_UNPROTECT(lev);
 800aa60:	6978      	ldr	r0, [r7, #20]
 800aa62:	f00a fb81 	bl	8015168 <sys_arch_unprotect>
    return;
 800aa66:	e08c      	b.n	800ab82 <event_callback+0x20a>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800aa68:	4b4a      	ldr	r3, [pc, #296]	@ (800ab94 <event_callback+0x21c>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	61bb      	str	r3, [r7, #24]
 800aa6e:	e07d      	b.n	800ab6c <event_callback+0x1f4>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 800aa70:	4b49      	ldr	r3, [pc, #292]	@ (800ab98 <event_callback+0x220>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 800aa76:	69bb      	ldr	r3, [r7, #24]
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d167      	bne.n	800ab4e <event_callback+0x1d6>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dd17      	ble.n	800aabc <event_callback+0x144>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d013      	beq.n	800aabc <event_callback+0x144>
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da00      	bge.n	800aaa0 <event_callback+0x128>
 800aa9e:	331f      	adds	r3, #31
 800aaa0:	115b      	asrs	r3, r3, #5
 800aaa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	f003 031f 	and.w	r3, r3, #31
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <event_callback+0x144>
          do_signal = 1;
 800aab8:	2301      	movs	r3, #1
 800aaba:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	899b      	ldrh	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01a      	beq.n	800aafa <event_callback+0x182>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d117      	bne.n	800aafa <event_callback+0x182>
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d013      	beq.n	800aafa <event_callback+0x182>
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	68da      	ldr	r2, [r3, #12]
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	da00      	bge.n	800aade <event_callback+0x166>
 800aadc:	331f      	adds	r3, #31
 800aade:	115b      	asrs	r3, r3, #5
 800aae0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	fa22 f303 	lsr.w	r3, r2, r3
 800aaee:	f003 0301 	and.w	r3, r3, #1
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <event_callback+0x182>
          do_signal = 1;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	89db      	ldrh	r3, [r3, #14]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01a      	beq.n	800ab38 <event_callback+0x1c0>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d117      	bne.n	800ab38 <event_callback+0x1c0>
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d013      	beq.n	800ab38 <event_callback+0x1c0>
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	691a      	ldr	r2, [r3, #16]
 800ab14:	69fb      	ldr	r3, [r7, #28]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	da00      	bge.n	800ab1c <event_callback+0x1a4>
 800ab1a:	331f      	adds	r3, #31
 800ab1c:	115b      	asrs	r3, r3, #5
 800ab1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	f003 031f 	and.w	r3, r3, #31
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	f003 0301 	and.w	r3, r3, #1
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <event_callback+0x1c0>
          do_signal = 1;
 800ab34:	2301      	movs	r3, #1
 800ab36:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d007      	beq.n	800ab4e <event_callback+0x1d6>
        scb->sem_signalled = 1;
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2201      	movs	r2, #1
 800ab42:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	3318      	adds	r3, #24
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f00a fa5d 	bl	8015008 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 800ab4e:	6978      	ldr	r0, [r7, #20]
 800ab50:	f00a fb0a 	bl	8015168 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 800ab54:	f00a fafa 	bl	801514c <sys_arch_protect>
 800ab58:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 800ab5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab98 <event_callback+0x220>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d000      	beq.n	800ab66 <event_callback+0x1ee>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 800ab64:	e780      	b.n	800aa68 <event_callback+0xf0>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	61bb      	str	r3, [r7, #24]
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f47f af7e 	bne.w	800aa70 <event_callback+0xf8>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 800ab74:	6978      	ldr	r0, [r7, #20]
 800ab76:	f00a faf7 	bl	8015168 <sys_arch_unprotect>
 800ab7a:	e002      	b.n	800ab82 <event_callback+0x20a>
    return;
 800ab7c:	bf00      	nop
 800ab7e:	e000      	b.n	800ab82 <event_callback+0x20a>
      return;
 800ab80:	bf00      	nop
}
 800ab82:	3720      	adds	r7, #32
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	08018a84 	.word	0x08018a84
 800ab8c:	08018ce4 	.word	0x08018ce4
 800ab90:	08018ac8 	.word	0x08018ac8
 800ab94:	200060ec 	.word	0x200060ec
 800ab98:	200060f0 	.word	0x200060f0

0800ab9c <lwip_ioctl>:
  return err;
}

int
lwip_ioctl(int s, long cmd, void *argp)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b08e      	sub	sp, #56	@ 0x38
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	60f8      	str	r0, [r7, #12]
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f7ff f9db 	bl	8009f64 <get_socket>
 800abae:	62b8      	str	r0, [r7, #40]	@ 0x28
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d102      	bne.n	800abc0 <lwip_ioctl+0x24>
    return -1;
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	e09e      	b.n	800acfe <lwip_ioctl+0x162>
  }

  switch (cmd) {
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	4a51      	ldr	r2, [pc, #324]	@ (800ad08 <lwip_ioctl+0x16c>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d055      	beq.n	800ac74 <lwip_ioctl+0xd8>
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4a50      	ldr	r2, [pc, #320]	@ (800ad0c <lwip_ioctl+0x170>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	f040 8087 	bne.w	800ace0 <lwip_ioctl+0x144>
#if LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE
  case FIONREAD:
    if (!argp) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10e      	bne.n	800abf6 <lwip_ioctl+0x5a>
      sock_set_errno(sock, EINVAL);
 800abd8:	2316      	movs	r3, #22
 800abda:	61bb      	str	r3, [r7, #24]
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	741a      	strb	r2, [r3, #16]
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <lwip_ioctl+0x54>
 800abea:	4a49      	ldr	r2, [pc, #292]	@ (800ad10 <lwip_ioctl+0x174>)
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	6013      	str	r3, [r2, #0]
      return -1;
 800abf0:	f04f 33ff 	mov.w	r3, #4294967295
 800abf4:	e083      	b.n	800acfe <lwip_ioctl+0x162>
    }
#endif /* LWIP_FIONREAD_LINUXMODE */

#if LWIP_SO_RCVBUF
    /* we come here if either LWIP_FIONREAD_LINUXMODE==0 or this is a TCP socket */
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
 800abf6:	f00a faa9 	bl	801514c <sys_arch_protect>
 800abfa:	6238      	str	r0, [r7, #32]
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	633b      	str	r3, [r7, #48]	@ 0x30
 800ac04:	6a38      	ldr	r0, [r7, #32]
 800ac06:	f00a faaf 	bl	8015168 <sys_arch_unprotect>
    if (recv_avail < 0) {
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	da01      	bge.n	800ac14 <lwip_ioctl+0x78>
      recv_avail = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	633b      	str	r3, [r7, #48]	@ 0x30
    }
    *((int*)argp) = recv_avail;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac18:	601a      	str	r2, [r3, #0]

    /* Check if there is data left from the last recv operation. /maq 041215 */
    if (sock->lastdata) {
 800ac1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d01a      	beq.n	800ac58 <lwip_ioctl+0xbc>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
 800ac22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac32:	2b10      	cmp	r3, #16
 800ac34:	d002      	beq.n	800ac3c <lwip_ioctl+0xa0>
        p = ((struct netbuf *)p)->p;
 800ac36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      buflen = p->tot_len;
 800ac3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3e:	891b      	ldrh	r3, [r3, #8]
 800ac40:	84fb      	strh	r3, [r7, #38]	@ 0x26
      buflen -= sock->lastoffset;
 800ac42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac44:	891b      	ldrh	r3, [r3, #8]
 800ac46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ac48:	1ad3      	subs	r3, r2, r3
 800ac4a:	84fb      	strh	r3, [r7, #38]	@ 0x26

      *((int*)argp) += buflen;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac52:	441a      	add	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	601a      	str	r2, [r3, #0]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONREAD, %p) = %"U16_F"\n", s, argp, *((u16_t*)argp)));
    sock_set_errno(sock, 0);
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61fb      	str	r3, [r7, #28]
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac62:	741a      	strb	r2, [r3, #16]
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <lwip_ioctl+0xd4>
 800ac6a:	4a29      	ldr	r2, [pc, #164]	@ (800ad10 <lwip_ioctl+0x174>)
 800ac6c:	69fb      	ldr	r3, [r7, #28]
 800ac6e:	6013      	str	r3, [r2, #0]
    return 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	e044      	b.n	800acfe <lwip_ioctl+0x162>
    break;
#endif /* LWIP_SO_RCVBUF */
#endif /* LWIP_SO_RCVBUF || LWIP_FIONREAD_LINUXMODE */

  case (long)FIONBIO:
    val = 0;
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (argp && *(u32_t*)argp) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d006      	beq.n	800ac8e <lwip_ioctl+0xf2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d002      	beq.n	800ac8e <lwip_ioctl+0xf2>
      val = 1;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    netconn_set_nonblocking(sock->conn, val);
 800ac8e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00b      	beq.n	800acae <lwip_ioctl+0x112>
 800ac96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800ac9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f042 0202 	orr.w	r2, r2, #2
 800aca6:	b2d2      	uxtb	r2, r2
 800aca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800acac:	e00a      	b.n	800acc4 <lwip_ioctl+0x128>
 800acae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800acb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f022 0202 	bic.w	r2, r2, #2
 800acbe:	b2d2      	uxtb	r2, r2
 800acc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	b2da      	uxtb	r2, r3
 800accc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acce:	741a      	strb	r2, [r3, #16]
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <lwip_ioctl+0x140>
 800acd6:	4a0e      	ldr	r2, [pc, #56]	@ (800ad10 <lwip_ioctl+0x174>)
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	6013      	str	r3, [r2, #0]
    return 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	e00e      	b.n	800acfe <lwip_ioctl+0x162>

  default:
    break;
 800ace0:	bf00      	nop
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
 800ace2:	2326      	movs	r3, #38	@ 0x26
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acec:	741a      	strb	r2, [r3, #16]
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <lwip_ioctl+0x15e>
 800acf4:	4a06      	ldr	r2, [pc, #24]	@ (800ad10 <lwip_ioctl+0x174>)
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	6013      	str	r3, [r2, #0]
  return -1;
 800acfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3738      	adds	r7, #56	@ 0x38
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	8004667e 	.word	0x8004667e
 800ad0c:	4004667f 	.word	0x4004667f
 800ad10:	20009b20 	.word	0x20009b20

0800ad14 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800ad1c:	4b2b      	ldr	r3, [pc, #172]	@ (800adcc <tcpip_thread+0xb8>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800ad24:	4b29      	ldr	r3, [pc, #164]	@ (800adcc <tcpip_thread+0xb8>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a29      	ldr	r2, [pc, #164]	@ (800add0 <tcpip_thread+0xbc>)
 800ad2a:	6812      	ldr	r2, [r2, #0]
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800ad30:	4828      	ldr	r0, [pc, #160]	@ (800add4 <tcpip_thread+0xc0>)
 800ad32:	f00a f9c9 	bl	80150c8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800ad36:	4827      	ldr	r0, [pc, #156]	@ (800add4 <tcpip_thread+0xc0>)
 800ad38:	f00a f9d5 	bl	80150e6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800ad3c:	f107 030c 	add.w	r3, r7, #12
 800ad40:	4619      	mov	r1, r3
 800ad42:	4825      	ldr	r0, [pc, #148]	@ (800add8 <tcpip_thread+0xc4>)
 800ad44:	f007 f8f0 	bl	8011f28 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ad48:	4822      	ldr	r0, [pc, #136]	@ (800add4 <tcpip_thread+0xc0>)
 800ad4a:	f00a f9bd 	bl	80150c8 <sys_mutex_lock>
    if (msg == NULL) {
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d106      	bne.n	800ad62 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ad54:	4b21      	ldr	r3, [pc, #132]	@ (800addc <tcpip_thread+0xc8>)
 800ad56:	2269      	movs	r2, #105	@ 0x69
 800ad58:	4921      	ldr	r1, [pc, #132]	@ (800ade0 <tcpip_thread+0xcc>)
 800ad5a:	4822      	ldr	r0, [pc, #136]	@ (800ade4 <tcpip_thread+0xd0>)
 800ad5c:	f00c fa1a 	bl	8017194 <iprintf>
      continue;
 800ad60:	e032      	b.n	800adc8 <tcpip_thread+0xb4>
    }
    switch (msg->type) {
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b04      	cmp	r3, #4
 800ad68:	d020      	beq.n	800adac <tcpip_thread+0x98>
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	dc25      	bgt.n	800adba <tcpip_thread+0xa6>
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d002      	beq.n	800ad78 <tcpip_thread+0x64>
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d00e      	beq.n	800ad94 <tcpip_thread+0x80>
 800ad76:	e020      	b.n	800adba <tcpip_thread+0xa6>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	6850      	ldr	r0, [r2, #4]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	6892      	ldr	r2, [r2, #8]
 800ad84:	4611      	mov	r1, r2
 800ad86:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	2009      	movs	r0, #9
 800ad8e:	f000 fd79 	bl	800b884 <memp_free>
      break;
 800ad92:	e019      	b.n	800adc8 <tcpip_thread+0xb4>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	6892      	ldr	r2, [r2, #8]
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4619      	mov	r1, r3
 800ada4:	2008      	movs	r0, #8
 800ada6:	f000 fd6d 	bl	800b884 <memp_free>
      break;
 800adaa:	e00d      	b.n	800adc8 <tcpip_thread+0xb4>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	6892      	ldr	r2, [r2, #8]
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
      break;
 800adb8:	e006      	b.n	800adc8 <tcpip_thread+0xb4>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800adba:	4b08      	ldr	r3, [pc, #32]	@ (800addc <tcpip_thread+0xc8>)
 800adbc:	229b      	movs	r2, #155	@ 0x9b
 800adbe:	4908      	ldr	r1, [pc, #32]	@ (800ade0 <tcpip_thread+0xcc>)
 800adc0:	4808      	ldr	r0, [pc, #32]	@ (800ade4 <tcpip_thread+0xd0>)
 800adc2:	f00c f9e7 	bl	8017194 <iprintf>
      break;
 800adc6:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800adc8:	e7b5      	b.n	800ad36 <tcpip_thread+0x22>
 800adca:	bf00      	nop
 800adcc:	200060f4 	.word	0x200060f4
 800add0:	200060f8 	.word	0x200060f8
 800add4:	20006100 	.word	0x20006100
 800add8:	200060fc 	.word	0x200060fc
 800addc:	08018cf4 	.word	0x08018cf4
 800ade0:	08018d24 	.word	0x08018d24
 800ade4:	08018d44 	.word	0x08018d44

0800ade8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800adf4:	481a      	ldr	r0, [pc, #104]	@ (800ae60 <tcpip_inpkt+0x78>)
 800adf6:	f00a f892 	bl	8014f1e <sys_mbox_valid>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d105      	bne.n	800ae0c <tcpip_inpkt+0x24>
 800ae00:	4b18      	ldr	r3, [pc, #96]	@ (800ae64 <tcpip_inpkt+0x7c>)
 800ae02:	22b5      	movs	r2, #181	@ 0xb5
 800ae04:	4918      	ldr	r1, [pc, #96]	@ (800ae68 <tcpip_inpkt+0x80>)
 800ae06:	4819      	ldr	r0, [pc, #100]	@ (800ae6c <tcpip_inpkt+0x84>)
 800ae08:	f00c f9c4 	bl	8017194 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ae0c:	2009      	movs	r0, #9
 800ae0e:	f000 fce7 	bl	800b7e0 <memp_malloc>
 800ae12:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ae1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1e:	e01a      	b.n	800ae56 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2202      	movs	r2, #2
 800ae24:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	4809      	ldr	r0, [pc, #36]	@ (800ae60 <tcpip_inpkt+0x78>)
 800ae3c:	f009 fffa 	bl	8014e34 <sys_mbox_trypost>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d006      	beq.n	800ae54 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ae46:	6979      	ldr	r1, [r7, #20]
 800ae48:	2009      	movs	r0, #9
 800ae4a:	f000 fd1b 	bl	800b884 <memp_free>
    return ERR_MEM;
 800ae4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae52:	e000      	b.n	800ae56 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ae54:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3718      	adds	r7, #24
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	200060fc 	.word	0x200060fc
 800ae64:	08018cf4 	.word	0x08018cf4
 800ae68:	08018d6c 	.word	0x08018d6c
 800ae6c:	08018d44 	.word	0x08018d44

0800ae70 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ae80:	f003 0318 	and.w	r3, r3, #24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d006      	beq.n	800ae96 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ae88:	4a08      	ldr	r2, [pc, #32]	@ (800aeac <tcpip_input+0x3c>)
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff ffab 	bl	800ade8 <tcpip_inpkt>
 800ae92:	4603      	mov	r3, r0
 800ae94:	e005      	b.n	800aea2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800ae96:	4a06      	ldr	r2, [pc, #24]	@ (800aeb0 <tcpip_input+0x40>)
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f7ff ffa4 	bl	800ade8 <tcpip_inpkt>
 800aea0:	4603      	mov	r3, r0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	08014be5 	.word	0x08014be5
 800aeb0:	08013901 	.word	0x08013901

0800aeb4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	4613      	mov	r3, r2
 800aec0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800aec2:	481d      	ldr	r0, [pc, #116]	@ (800af38 <tcpip_callback_with_block+0x84>)
 800aec4:	f00a f82b 	bl	8014f1e <sys_mbox_valid>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d105      	bne.n	800aeda <tcpip_callback_with_block+0x26>
 800aece:	4b1b      	ldr	r3, [pc, #108]	@ (800af3c <tcpip_callback_with_block+0x88>)
 800aed0:	22ee      	movs	r2, #238	@ 0xee
 800aed2:	491b      	ldr	r1, [pc, #108]	@ (800af40 <tcpip_callback_with_block+0x8c>)
 800aed4:	481b      	ldr	r0, [pc, #108]	@ (800af44 <tcpip_callback_with_block+0x90>)
 800aed6:	f00c f95d 	bl	8017194 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aeda:	2008      	movs	r0, #8
 800aedc:	f000 fc80 	bl	800b7e0 <memp_malloc>
 800aee0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800aee8:	f04f 33ff 	mov.w	r3, #4294967295
 800aeec:	e01f      	b.n	800af2e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2203      	movs	r2, #3
 800aef2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	609a      	str	r2, [r3, #8]
  if (block) {
 800af00:	79fb      	ldrb	r3, [r7, #7]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800af06:	6979      	ldr	r1, [r7, #20]
 800af08:	480b      	ldr	r0, [pc, #44]	@ (800af38 <tcpip_callback_with_block+0x84>)
 800af0a:	f009 ff7d 	bl	8014e08 <sys_mbox_post>
 800af0e:	e00d      	b.n	800af2c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800af10:	6979      	ldr	r1, [r7, #20]
 800af12:	4809      	ldr	r0, [pc, #36]	@ (800af38 <tcpip_callback_with_block+0x84>)
 800af14:	f009 ff8e 	bl	8014e34 <sys_mbox_trypost>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d006      	beq.n	800af2c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800af1e:	6979      	ldr	r1, [r7, #20]
 800af20:	2008      	movs	r0, #8
 800af22:	f000 fcaf 	bl	800b884 <memp_free>
      return ERR_MEM;
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	e000      	b.n	800af2e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3718      	adds	r7, #24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	200060fc 	.word	0x200060fc
 800af3c:	08018cf4 	.word	0x08018cf4
 800af40:	08018d6c 	.word	0x08018d6c
 800af44:	08018d44 	.word	0x08018d44

0800af48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800af54:	4806      	ldr	r0, [pc, #24]	@ (800af70 <tcpip_send_msg_wait_sem+0x28>)
 800af56:	f00a f8b7 	bl	80150c8 <sys_mutex_lock>
  fn(apimsg);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68b8      	ldr	r0, [r7, #8]
 800af5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800af60:	4803      	ldr	r0, [pc, #12]	@ (800af70 <tcpip_send_msg_wait_sem+0x28>)
 800af62:	f00a f8c0 	bl	80150e6 <sys_mutex_unlock>
  return ERR_OK;
 800af66:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	20006100 	.word	0x20006100

0800af74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af02      	add	r7, sp, #8
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800af7e:	f000 f868 	bl	800b052 <lwip_init>

  tcpip_init_done = initfunc;
 800af82:	4a17      	ldr	r2, [pc, #92]	@ (800afe0 <tcpip_init+0x6c>)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800af88:	4a16      	ldr	r2, [pc, #88]	@ (800afe4 <tcpip_init+0x70>)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800af8e:	2106      	movs	r1, #6
 800af90:	4815      	ldr	r0, [pc, #84]	@ (800afe8 <tcpip_init+0x74>)
 800af92:	f009 ff05 	bl	8014da0 <sys_mbox_new>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d006      	beq.n	800afaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800af9c:	4b13      	ldr	r3, [pc, #76]	@ (800afec <tcpip_init+0x78>)
 800af9e:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800afa2:	4913      	ldr	r1, [pc, #76]	@ (800aff0 <tcpip_init+0x7c>)
 800afa4:	4813      	ldr	r0, [pc, #76]	@ (800aff4 <tcpip_init+0x80>)
 800afa6:	f00c f8f5 	bl	8017194 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800afaa:	4813      	ldr	r0, [pc, #76]	@ (800aff8 <tcpip_init+0x84>)
 800afac:	f00a f870 	bl	8015090 <sys_mutex_new>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800afb6:	4b0d      	ldr	r3, [pc, #52]	@ (800afec <tcpip_init+0x78>)
 800afb8:	f240 12d9 	movw	r2, #473	@ 0x1d9
 800afbc:	490f      	ldr	r1, [pc, #60]	@ (800affc <tcpip_init+0x88>)
 800afbe:	480d      	ldr	r0, [pc, #52]	@ (800aff4 <tcpip_init+0x80>)
 800afc0:	f00c f8e8 	bl	8017194 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800afc4:	2300      	movs	r3, #0
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afcc:	2200      	movs	r2, #0
 800afce:	490c      	ldr	r1, [pc, #48]	@ (800b000 <tcpip_init+0x8c>)
 800afd0:	480c      	ldr	r0, [pc, #48]	@ (800b004 <tcpip_init+0x90>)
 800afd2:	f00a f895 	bl	8015100 <sys_thread_new>
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	200060f4 	.word	0x200060f4
 800afe4:	200060f8 	.word	0x200060f8
 800afe8:	200060fc 	.word	0x200060fc
 800afec:	08018cf4 	.word	0x08018cf4
 800aff0:	08018d7c 	.word	0x08018d7c
 800aff4:	08018d44 	.word	0x08018d44
 800aff8:	20006100 	.word	0x20006100
 800affc:	08018da0 	.word	0x08018da0
 800b000:	0800ad15 	.word	0x0800ad15
 800b004:	08018dc4 	.word	0x08018dc4

0800b008 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	4603      	mov	r3, r0
 800b010:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800b012:	88fb      	ldrh	r3, [r7, #6]
 800b014:	ba5b      	rev16	r3, r3
 800b016:	b29b      	uxth	r3, r3
}
 800b018:	4618      	mov	r0, r3
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bc80      	pop	{r7}
 800b020:	4770      	bx	lr

0800b022 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b022:	b480      	push	{r7}
 800b024:	b083      	sub	sp, #12
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	061a      	lsls	r2, r3, #24
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	0a1b      	lsrs	r3, r3, #8
 800b03c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b040:	431a      	orrs	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	0e1b      	lsrs	r3, r3, #24
 800b046:	4313      	orrs	r3, r2
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bc80      	pop	{r7}
 800b050:	4770      	bx	lr

0800b052 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b058:	2300      	movs	r3, #0
 800b05a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b05c:	f00a f80a 	bl	8015074 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b060:	f000 f8a6 	bl	800b1b0 <mem_init>
  memp_init();
 800b064:	f000 fb70 	bl	800b748 <memp_init>
  pbuf_init();
  netif_init();
 800b068:	f000 fc36 	bl	800b8d8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b06c:	f006 ff82 	bl	8011f74 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b070:	f001 fc24 	bl	800c8bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800b074:	f006 fe14 	bl	8011ca0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b088:	4b40      	ldr	r3, [pc, #256]	@ (800b18c <plug_holes+0x10c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d206      	bcs.n	800b0a0 <plug_holes+0x20>
 800b092:	4b3f      	ldr	r3, [pc, #252]	@ (800b190 <plug_holes+0x110>)
 800b094:	f240 125d 	movw	r2, #349	@ 0x15d
 800b098:	493e      	ldr	r1, [pc, #248]	@ (800b194 <plug_holes+0x114>)
 800b09a:	483f      	ldr	r0, [pc, #252]	@ (800b198 <plug_holes+0x118>)
 800b09c:	f00c f87a 	bl	8017194 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b0a0:	4b3e      	ldr	r3, [pc, #248]	@ (800b19c <plug_holes+0x11c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d306      	bcc.n	800b0b8 <plug_holes+0x38>
 800b0aa:	4b39      	ldr	r3, [pc, #228]	@ (800b190 <plug_holes+0x110>)
 800b0ac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800b0b0:	493b      	ldr	r1, [pc, #236]	@ (800b1a0 <plug_holes+0x120>)
 800b0b2:	4839      	ldr	r0, [pc, #228]	@ (800b198 <plug_holes+0x118>)
 800b0b4:	f00c f86e 	bl	8017194 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	791b      	ldrb	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d006      	beq.n	800b0ce <plug_holes+0x4e>
 800b0c0:	4b33      	ldr	r3, [pc, #204]	@ (800b190 <plug_holes+0x110>)
 800b0c2:	f240 125f 	movw	r2, #351	@ 0x15f
 800b0c6:	4937      	ldr	r1, [pc, #220]	@ (800b1a4 <plug_holes+0x124>)
 800b0c8:	4833      	ldr	r0, [pc, #204]	@ (800b198 <plug_holes+0x118>)
 800b0ca:	f00c f863 	bl	8017194 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	881b      	ldrh	r3, [r3, #0]
 800b0d2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b0d6:	d906      	bls.n	800b0e6 <plug_holes+0x66>
 800b0d8:	4b2d      	ldr	r3, [pc, #180]	@ (800b190 <plug_holes+0x110>)
 800b0da:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800b0de:	4932      	ldr	r1, [pc, #200]	@ (800b1a8 <plug_holes+0x128>)
 800b0e0:	482d      	ldr	r0, [pc, #180]	@ (800b198 <plug_holes+0x118>)
 800b0e2:	f00c f857 	bl	8017194 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b0e6:	4b29      	ldr	r3, [pc, #164]	@ (800b18c <plug_holes+0x10c>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	8812      	ldrh	r2, [r2, #0]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d01f      	beq.n	800b13a <plug_holes+0xba>
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d11b      	bne.n	800b13a <plug_holes+0xba>
 800b102:	4b26      	ldr	r3, [pc, #152]	@ (800b19c <plug_holes+0x11c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d016      	beq.n	800b13a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b10c:	4b27      	ldr	r3, [pc, #156]	@ (800b1ac <plug_holes+0x12c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	429a      	cmp	r2, r3
 800b114:	d102      	bne.n	800b11c <plug_holes+0x9c>
      lfree = mem;
 800b116:	4a25      	ldr	r2, [pc, #148]	@ (800b1ac <plug_holes+0x12c>)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	881a      	ldrh	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b124:	4b19      	ldr	r3, [pc, #100]	@ (800b18c <plug_holes+0x10c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	1ad1      	subs	r1, r2, r3
 800b12c:	4b17      	ldr	r3, [pc, #92]	@ (800b18c <plug_holes+0x10c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68fa      	ldr	r2, [r7, #12]
 800b132:	8812      	ldrh	r2, [r2, #0]
 800b134:	4413      	add	r3, r2
 800b136:	b28a      	uxth	r2, r1
 800b138:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b13a:	4b14      	ldr	r3, [pc, #80]	@ (800b18c <plug_holes+0x10c>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	8852      	ldrh	r2, [r2, #2]
 800b142:	4413      	add	r3, r2
 800b144:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d01a      	beq.n	800b184 <plug_holes+0x104>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	791b      	ldrb	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d116      	bne.n	800b184 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b156:	4b15      	ldr	r3, [pc, #84]	@ (800b1ac <plug_holes+0x12c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d102      	bne.n	800b166 <plug_holes+0xe6>
      lfree = pmem;
 800b160:	4a12      	ldr	r2, [pc, #72]	@ (800b1ac <plug_holes+0x12c>)
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	881a      	ldrh	r2, [r3, #0]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b16e:	4b07      	ldr	r3, [pc, #28]	@ (800b18c <plug_holes+0x10c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	1ad1      	subs	r1, r2, r3
 800b176:	4b05      	ldr	r3, [pc, #20]	@ (800b18c <plug_holes+0x10c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	8812      	ldrh	r2, [r2, #0]
 800b17e:	4413      	add	r3, r2
 800b180:	b28a      	uxth	r2, r1
 800b182:	805a      	strh	r2, [r3, #2]
  }
}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20006770 	.word	0x20006770
 800b190:	08018dd4 	.word	0x08018dd4
 800b194:	08018e04 	.word	0x08018e04
 800b198:	08018e1c 	.word	0x08018e1c
 800b19c:	20006774 	.word	0x20006774
 800b1a0:	08018e44 	.word	0x08018e44
 800b1a4:	08018e60 	.word	0x08018e60
 800b1a8:	08018e7c 	.word	0x08018e7c
 800b1ac:	20006778 	.word	0x20006778

0800b1b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b1b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b230 <mem_init+0x80>)
 800b1b8:	3303      	adds	r3, #3
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800b234 <mem_init+0x84>)
 800b1c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b1c4:	4b1b      	ldr	r3, [pc, #108]	@ (800b234 <mem_init+0x84>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b1d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b1de:	4b15      	ldr	r3, [pc, #84]	@ (800b234 <mem_init+0x84>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 800b1e6:	4a14      	ldr	r2, [pc, #80]	@ (800b238 <mem_init+0x88>)
 800b1e8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b1ea:	4b13      	ldr	r3, [pc, #76]	@ (800b238 <mem_init+0x88>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b1f2:	4b11      	ldr	r3, [pc, #68]	@ (800b238 <mem_init+0x88>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b1fa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b238 <mem_init+0x88>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b204:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b206:	4b0b      	ldr	r3, [pc, #44]	@ (800b234 <mem_init+0x84>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a0c      	ldr	r2, [pc, #48]	@ (800b23c <mem_init+0x8c>)
 800b20c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b20e:	480c      	ldr	r0, [pc, #48]	@ (800b240 <mem_init+0x90>)
 800b210:	f009 ff3e 	bl	8015090 <sys_mutex_new>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b21a:	4b0a      	ldr	r3, [pc, #40]	@ (800b244 <mem_init+0x94>)
 800b21c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b220:	4909      	ldr	r1, [pc, #36]	@ (800b248 <mem_init+0x98>)
 800b222:	480a      	ldr	r0, [pc, #40]	@ (800b24c <mem_init+0x9c>)
 800b224:	f00b ffb6 	bl	8017194 <iprintf>
  }
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	2000611c 	.word	0x2000611c
 800b234:	20006770 	.word	0x20006770
 800b238:	20006774 	.word	0x20006774
 800b23c:	20006778 	.word	0x20006778
 800b240:	2000677c 	.word	0x2000677c
 800b244:	08018dd4 	.word	0x08018dd4
 800b248:	08018ea8 	.word	0x08018ea8
 800b24c:	08018e1c 	.word	0x08018e1c

0800b250 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d050      	beq.n	800b300 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f003 0303 	and.w	r3, r3, #3
 800b264:	2b00      	cmp	r3, #0
 800b266:	d006      	beq.n	800b276 <mem_free+0x26>
 800b268:	4b27      	ldr	r3, [pc, #156]	@ (800b308 <mem_free+0xb8>)
 800b26a:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 800b26e:	4927      	ldr	r1, [pc, #156]	@ (800b30c <mem_free+0xbc>)
 800b270:	4827      	ldr	r0, [pc, #156]	@ (800b310 <mem_free+0xc0>)
 800b272:	f00b ff8f 	bl	8017194 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b276:	4b27      	ldr	r3, [pc, #156]	@ (800b314 <mem_free+0xc4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d304      	bcc.n	800b28a <mem_free+0x3a>
 800b280:	4b25      	ldr	r3, [pc, #148]	@ (800b318 <mem_free+0xc8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	429a      	cmp	r2, r3
 800b288:	d306      	bcc.n	800b298 <mem_free+0x48>
 800b28a:	4b1f      	ldr	r3, [pc, #124]	@ (800b308 <mem_free+0xb8>)
 800b28c:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800b290:	4922      	ldr	r1, [pc, #136]	@ (800b31c <mem_free+0xcc>)
 800b292:	481f      	ldr	r0, [pc, #124]	@ (800b310 <mem_free+0xc0>)
 800b294:	f00b ff7e 	bl	8017194 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b298:	4b1e      	ldr	r3, [pc, #120]	@ (800b314 <mem_free+0xc4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d304      	bcc.n	800b2ac <mem_free+0x5c>
 800b2a2:	4b1d      	ldr	r3, [pc, #116]	@ (800b318 <mem_free+0xc8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d306      	bcc.n	800b2ba <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b2ac:	f009 ff4e 	bl	801514c <sys_arch_protect>
 800b2b0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f009 ff58 	bl	8015168 <sys_arch_unprotect>
    return;
 800b2b8:	e023      	b.n	800b302 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b2ba:	4819      	ldr	r0, [pc, #100]	@ (800b320 <mem_free+0xd0>)
 800b2bc:	f009 ff04 	bl	80150c8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3b08      	subs	r3, #8
 800b2c4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	791b      	ldrb	r3, [r3, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <mem_free+0x8c>
 800b2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b308 <mem_free+0xb8>)
 800b2d0:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800b2d4:	4913      	ldr	r1, [pc, #76]	@ (800b324 <mem_free+0xd4>)
 800b2d6:	480e      	ldr	r0, [pc, #56]	@ (800b310 <mem_free+0xc0>)
 800b2d8:	f00b ff5c 	bl	8017194 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b2e2:	4b11      	ldr	r3, [pc, #68]	@ (800b328 <mem_free+0xd8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d202      	bcs.n	800b2f2 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b2ec:	4a0e      	ldr	r2, [pc, #56]	@ (800b328 <mem_free+0xd8>)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff fec4 	bl	800b080 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b2f8:	4809      	ldr	r0, [pc, #36]	@ (800b320 <mem_free+0xd0>)
 800b2fa:	f009 fef4 	bl	80150e6 <sys_mutex_unlock>
 800b2fe:	e000      	b.n	800b302 <mem_free+0xb2>
    return;
 800b300:	bf00      	nop
}
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	08018dd4 	.word	0x08018dd4
 800b30c:	08018ec4 	.word	0x08018ec4
 800b310:	08018e1c 	.word	0x08018e1c
 800b314:	20006770 	.word	0x20006770
 800b318:	20006774 	.word	0x20006774
 800b31c:	08018ee8 	.word	0x08018ee8
 800b320:	2000677c 	.word	0x2000677c
 800b324:	08018f00 	.word	0x08018f00
 800b328:	20006778 	.word	0x20006778

0800b32c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b088      	sub	sp, #32
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b338:	887b      	ldrh	r3, [r7, #2]
 800b33a:	3303      	adds	r3, #3
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b344:	887b      	ldrh	r3, [r7, #2]
 800b346:	2b0b      	cmp	r3, #11
 800b348:	d801      	bhi.n	800b34e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b34a:	230c      	movs	r3, #12
 800b34c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b34e:	887b      	ldrh	r3, [r7, #2]
 800b350:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b354:	d901      	bls.n	800b35a <mem_trim+0x2e>
    return NULL;
 800b356:	2300      	movs	r3, #0
 800b358:	e0bd      	b.n	800b4d6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b35a:	4b61      	ldr	r3, [pc, #388]	@ (800b4e0 <mem_trim+0x1b4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	d304      	bcc.n	800b36e <mem_trim+0x42>
 800b364:	4b5f      	ldr	r3, [pc, #380]	@ (800b4e4 <mem_trim+0x1b8>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d306      	bcc.n	800b37c <mem_trim+0x50>
 800b36e:	4b5e      	ldr	r3, [pc, #376]	@ (800b4e8 <mem_trim+0x1bc>)
 800b370:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800b374:	495d      	ldr	r1, [pc, #372]	@ (800b4ec <mem_trim+0x1c0>)
 800b376:	485e      	ldr	r0, [pc, #376]	@ (800b4f0 <mem_trim+0x1c4>)
 800b378:	f00b ff0c 	bl	8017194 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b37c:	4b58      	ldr	r3, [pc, #352]	@ (800b4e0 <mem_trim+0x1b4>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	429a      	cmp	r2, r3
 800b384:	d304      	bcc.n	800b390 <mem_trim+0x64>
 800b386:	4b57      	ldr	r3, [pc, #348]	@ (800b4e4 <mem_trim+0x1b8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d307      	bcc.n	800b3a0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b390:	f009 fedc 	bl	801514c <sys_arch_protect>
 800b394:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f009 fee6 	bl	8015168 <sys_arch_unprotect>
    return rmem;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	e09a      	b.n	800b4d6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	3b08      	subs	r3, #8
 800b3a4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b3a6:	4b4e      	ldr	r3, [pc, #312]	@ (800b4e0 <mem_trim+0x1b4>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	881a      	ldrh	r2, [r3, #0]
 800b3b4:	8b7b      	ldrh	r3, [r7, #26]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	3b08      	subs	r3, #8
 800b3bc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b3be:	887a      	ldrh	r2, [r7, #2]
 800b3c0:	8b3b      	ldrh	r3, [r7, #24]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d906      	bls.n	800b3d4 <mem_trim+0xa8>
 800b3c6:	4b48      	ldr	r3, [pc, #288]	@ (800b4e8 <mem_trim+0x1bc>)
 800b3c8:	f240 2206 	movw	r2, #518	@ 0x206
 800b3cc:	4949      	ldr	r1, [pc, #292]	@ (800b4f4 <mem_trim+0x1c8>)
 800b3ce:	4848      	ldr	r0, [pc, #288]	@ (800b4f0 <mem_trim+0x1c4>)
 800b3d0:	f00b fee0 	bl	8017194 <iprintf>
  if (newsize > size) {
 800b3d4:	887a      	ldrh	r2, [r7, #2]
 800b3d6:	8b3b      	ldrh	r3, [r7, #24]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d901      	bls.n	800b3e0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e07a      	b.n	800b4d6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b3e0:	887a      	ldrh	r2, [r7, #2]
 800b3e2:	8b3b      	ldrh	r3, [r7, #24]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d101      	bne.n	800b3ec <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	e074      	b.n	800b4d6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b3ec:	4842      	ldr	r0, [pc, #264]	@ (800b4f8 <mem_trim+0x1cc>)
 800b3ee:	f009 fe6b 	bl	80150c8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b3f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b4e0 <mem_trim+0x1b4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69fa      	ldr	r2, [r7, #28]
 800b3f8:	8812      	ldrh	r2, [r2, #0]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	791b      	ldrb	r3, [r3, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d131      	bne.n	800b46a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b40c:	8b7a      	ldrh	r2, [r7, #26]
 800b40e:	887b      	ldrh	r3, [r7, #2]
 800b410:	4413      	add	r3, r2
 800b412:	b29b      	uxth	r3, r3
 800b414:	3308      	adds	r3, #8
 800b416:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800b418:	4b38      	ldr	r3, [pc, #224]	@ (800b4fc <mem_trim+0x1d0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d105      	bne.n	800b42e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b422:	4b2f      	ldr	r3, [pc, #188]	@ (800b4e0 <mem_trim+0x1b4>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	8a7b      	ldrh	r3, [r7, #18]
 800b428:	4413      	add	r3, r2
 800b42a:	4a34      	ldr	r2, [pc, #208]	@ (800b4fc <mem_trim+0x1d0>)
 800b42c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b42e:	4b2c      	ldr	r3, [pc, #176]	@ (800b4e0 <mem_trim+0x1b4>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	8a7b      	ldrh	r3, [r7, #18]
 800b434:	4413      	add	r3, r2
 800b436:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2200      	movs	r2, #0
 800b43c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	8a3a      	ldrh	r2, [r7, #16]
 800b442:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	8b7a      	ldrh	r2, [r7, #26]
 800b448:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	8a7a      	ldrh	r2, [r7, #18]
 800b44e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b458:	d039      	beq.n	800b4ce <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b45a:	4b21      	ldr	r3, [pc, #132]	@ (800b4e0 <mem_trim+0x1b4>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	8812      	ldrh	r2, [r2, #0]
 800b462:	4413      	add	r3, r2
 800b464:	8a7a      	ldrh	r2, [r7, #18]
 800b466:	805a      	strh	r2, [r3, #2]
 800b468:	e031      	b.n	800b4ce <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b46a:	887b      	ldrh	r3, [r7, #2]
 800b46c:	f103 0214 	add.w	r2, r3, #20
 800b470:	8b3b      	ldrh	r3, [r7, #24]
 800b472:	429a      	cmp	r2, r3
 800b474:	d82b      	bhi.n	800b4ce <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b476:	8b7a      	ldrh	r2, [r7, #26]
 800b478:	887b      	ldrh	r3, [r7, #2]
 800b47a:	4413      	add	r3, r2
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	3308      	adds	r3, #8
 800b480:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b482:	4b17      	ldr	r3, [pc, #92]	@ (800b4e0 <mem_trim+0x1b4>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	8a7b      	ldrh	r3, [r7, #18]
 800b488:	4413      	add	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b48c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4fc <mem_trim+0x1d0>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	697a      	ldr	r2, [r7, #20]
 800b492:	429a      	cmp	r2, r3
 800b494:	d202      	bcs.n	800b49c <mem_trim+0x170>
      lfree = mem2;
 800b496:	4a19      	ldr	r2, [pc, #100]	@ (800b4fc <mem_trim+0x1d0>)
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	8b7a      	ldrh	r2, [r7, #26]
 800b4ae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	8a7a      	ldrh	r2, [r7, #18]
 800b4b4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b4be:	d006      	beq.n	800b4ce <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b4c0:	4b07      	ldr	r3, [pc, #28]	@ (800b4e0 <mem_trim+0x1b4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	697a      	ldr	r2, [r7, #20]
 800b4c6:	8812      	ldrh	r2, [r2, #0]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	8a7a      	ldrh	r2, [r7, #18]
 800b4cc:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b4ce:	480a      	ldr	r0, [pc, #40]	@ (800b4f8 <mem_trim+0x1cc>)
 800b4d0:	f009 fe09 	bl	80150e6 <sys_mutex_unlock>
  return rmem;
 800b4d4:	687b      	ldr	r3, [r7, #4]
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20006770 	.word	0x20006770
 800b4e4:	20006774 	.word	0x20006774
 800b4e8:	08018dd4 	.word	0x08018dd4
 800b4ec:	08018f14 	.word	0x08018f14
 800b4f0:	08018e1c 	.word	0x08018e1c
 800b4f4:	08018f2c 	.word	0x08018f2c
 800b4f8:	2000677c 	.word	0x2000677c
 800b4fc:	20006778 	.word	0x20006778

0800b500 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af00      	add	r7, sp, #0
 800b506:	4603      	mov	r3, r0
 800b508:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b50a:	88fb      	ldrh	r3, [r7, #6]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d101      	bne.n	800b514 <mem_malloc+0x14>
    return NULL;
 800b510:	2300      	movs	r3, #0
 800b512:	e0d0      	b.n	800b6b6 <mem_malloc+0x1b6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	3303      	adds	r3, #3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	f023 0303 	bic.w	r3, r3, #3
 800b51e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b520:	88fb      	ldrh	r3, [r7, #6]
 800b522:	2b0b      	cmp	r3, #11
 800b524:	d801      	bhi.n	800b52a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b526:	230c      	movs	r3, #12
 800b528:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b52a:	88fb      	ldrh	r3, [r7, #6]
 800b52c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b530:	d901      	bls.n	800b536 <mem_malloc+0x36>
    return NULL;
 800b532:	2300      	movs	r3, #0
 800b534:	e0bf      	b.n	800b6b6 <mem_malloc+0x1b6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b536:	4862      	ldr	r0, [pc, #392]	@ (800b6c0 <mem_malloc+0x1c0>)
 800b538:	f009 fdc6 	bl	80150c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b53c:	4b61      	ldr	r3, [pc, #388]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	4b61      	ldr	r3, [pc, #388]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	83fb      	strh	r3, [r7, #30]
 800b548:	e0aa      	b.n	800b6a0 <mem_malloc+0x1a0>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b54a:	4b5f      	ldr	r3, [pc, #380]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	8bfb      	ldrh	r3, [r7, #30]
 800b550:	4413      	add	r3, r2
 800b552:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	791b      	ldrb	r3, [r3, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f040 809b 	bne.w	800b694 <mem_malloc+0x194>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	8bfb      	ldrh	r3, [r7, #30]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	f1a3 0208 	sub.w	r2, r3, #8
 800b56c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b56e:	429a      	cmp	r2, r3
 800b570:	f0c0 8090 	bcc.w	800b694 <mem_malloc+0x194>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	881b      	ldrh	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	8bfb      	ldrh	r3, [r7, #30]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	f1a3 0208 	sub.w	r2, r3, #8
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	3314      	adds	r3, #20
 800b586:	429a      	cmp	r2, r3
 800b588:	d327      	bcc.n	800b5da <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b58a:	8bfa      	ldrh	r2, [r7, #30]
 800b58c:	88fb      	ldrh	r3, [r7, #6]
 800b58e:	4413      	add	r3, r2
 800b590:	b29b      	uxth	r3, r3
 800b592:	3308      	adds	r3, #8
 800b594:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b596:	4b4c      	ldr	r3, [pc, #304]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	8a7b      	ldrh	r3, [r7, #18]
 800b59c:	4413      	add	r3, r2
 800b59e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	881a      	ldrh	r2, [r3, #0]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	8bfa      	ldrh	r2, [r7, #30]
 800b5b2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	8a7a      	ldrh	r2, [r7, #18]
 800b5b8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	881b      	ldrh	r3, [r3, #0]
 800b5c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b5c8:	d00a      	beq.n	800b5e0 <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b5ca:	4b3f      	ldr	r3, [pc, #252]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	8812      	ldrh	r2, [r2, #0]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	8a7a      	ldrh	r2, [r7, #18]
 800b5d6:	805a      	strh	r2, [r3, #2]
 800b5d8:	e002      	b.n	800b5e0 <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b5e0:	4b38      	ldr	r3, [pc, #224]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d127      	bne.n	800b63a <mem_malloc+0x13a>
          struct mem *cur = lfree;
 800b5ea:	4b36      	ldr	r3, [pc, #216]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b5f0:	e005      	b.n	800b5fe <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b5f2:	4b35      	ldr	r3, [pc, #212]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	69ba      	ldr	r2, [r7, #24]
 800b5f8:	8812      	ldrh	r2, [r2, #0]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	791b      	ldrb	r3, [r3, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <mem_malloc+0x110>
 800b606:	4b31      	ldr	r3, [pc, #196]	@ (800b6cc <mem_malloc+0x1cc>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	69ba      	ldr	r2, [r7, #24]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d1f0      	bne.n	800b5f2 <mem_malloc+0xf2>
          }
          lfree = cur;
 800b610:	4a2c      	ldr	r2, [pc, #176]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b616:	4b2b      	ldr	r3, [pc, #172]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	4b2c      	ldr	r3, [pc, #176]	@ (800b6cc <mem_malloc+0x1cc>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d00b      	beq.n	800b63a <mem_malloc+0x13a>
 800b622:	4b28      	ldr	r3, [pc, #160]	@ (800b6c4 <mem_malloc+0x1c4>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	791b      	ldrb	r3, [r3, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <mem_malloc+0x13a>
 800b62c:	4b28      	ldr	r3, [pc, #160]	@ (800b6d0 <mem_malloc+0x1d0>)
 800b62e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800b632:	4928      	ldr	r1, [pc, #160]	@ (800b6d4 <mem_malloc+0x1d4>)
 800b634:	4828      	ldr	r0, [pc, #160]	@ (800b6d8 <mem_malloc+0x1d8>)
 800b636:	f00b fdad 	bl	8017194 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b63a:	4821      	ldr	r0, [pc, #132]	@ (800b6c0 <mem_malloc+0x1c0>)
 800b63c:	f009 fd53 	bl	80150e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b640:	88fa      	ldrh	r2, [r7, #6]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	4413      	add	r3, r2
 800b646:	3308      	adds	r3, #8
 800b648:	4a20      	ldr	r2, [pc, #128]	@ (800b6cc <mem_malloc+0x1cc>)
 800b64a:	6812      	ldr	r2, [r2, #0]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d906      	bls.n	800b65e <mem_malloc+0x15e>
 800b650:	4b1f      	ldr	r3, [pc, #124]	@ (800b6d0 <mem_malloc+0x1d0>)
 800b652:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800b656:	4921      	ldr	r1, [pc, #132]	@ (800b6dc <mem_malloc+0x1dc>)
 800b658:	481f      	ldr	r0, [pc, #124]	@ (800b6d8 <mem_malloc+0x1d8>)
 800b65a:	f00b fd9b 	bl	8017194 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f003 0303 	and.w	r3, r3, #3
 800b664:	2b00      	cmp	r3, #0
 800b666:	d006      	beq.n	800b676 <mem_malloc+0x176>
 800b668:	4b19      	ldr	r3, [pc, #100]	@ (800b6d0 <mem_malloc+0x1d0>)
 800b66a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800b66e:	491c      	ldr	r1, [pc, #112]	@ (800b6e0 <mem_malloc+0x1e0>)
 800b670:	4819      	ldr	r0, [pc, #100]	@ (800b6d8 <mem_malloc+0x1d8>)
 800b672:	f00b fd8f 	bl	8017194 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f003 0303 	and.w	r3, r3, #3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d006      	beq.n	800b68e <mem_malloc+0x18e>
 800b680:	4b13      	ldr	r3, [pc, #76]	@ (800b6d0 <mem_malloc+0x1d0>)
 800b682:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800b686:	4917      	ldr	r1, [pc, #92]	@ (800b6e4 <mem_malloc+0x1e4>)
 800b688:	4813      	ldr	r0, [pc, #76]	@ (800b6d8 <mem_malloc+0x1d8>)
 800b68a:	f00b fd83 	bl	8017194 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	3308      	adds	r3, #8
 800b692:	e010      	b.n	800b6b6 <mem_malloc+0x1b6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b694:	4b0c      	ldr	r3, [pc, #48]	@ (800b6c8 <mem_malloc+0x1c8>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	8bfb      	ldrh	r3, [r7, #30]
 800b69a:	4413      	add	r3, r2
 800b69c:	881b      	ldrh	r3, [r3, #0]
 800b69e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b6a0:	8bfa      	ldrh	r2, [r7, #30]
 800b6a2:	88fb      	ldrh	r3, [r7, #6]
 800b6a4:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	f4ff af4e 	bcc.w	800b54a <mem_malloc+0x4a>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b6ae:	4804      	ldr	r0, [pc, #16]	@ (800b6c0 <mem_malloc+0x1c0>)
 800b6b0:	f009 fd19 	bl	80150e6 <sys_mutex_unlock>
  return NULL;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3720      	adds	r7, #32
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2000677c 	.word	0x2000677c
 800b6c4:	20006778 	.word	0x20006778
 800b6c8:	20006770 	.word	0x20006770
 800b6cc:	20006774 	.word	0x20006774
 800b6d0:	08018dd4 	.word	0x08018dd4
 800b6d4:	08018f4c 	.word	0x08018f4c
 800b6d8:	08018e1c 	.word	0x08018e1c
 800b6dc:	08018f68 	.word	0x08018f68
 800b6e0:	08018f98 	.word	0x08018f98
 800b6e4:	08018fc8 	.word	0x08018fc8

0800b6e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	3303      	adds	r3, #3
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e011      	b.n	800b72e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	881b      	ldrh	r3, [r3, #0]
 800b720:	461a      	mov	r2, r3
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	4413      	add	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	3301      	adds	r3, #1
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	461a      	mov	r2, r3
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	4293      	cmp	r3, r2
 800b738:	dbe7      	blt.n	800b70a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	bc80      	pop	{r7}
 800b744:	4770      	bx	lr
	...

0800b748 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b74e:	2300      	movs	r3, #0
 800b750:	80fb      	strh	r3, [r7, #6]
 800b752:	e009      	b.n	800b768 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	4a08      	ldr	r2, [pc, #32]	@ (800b778 <memp_init+0x30>)
 800b758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff ffc3 	bl	800b6e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b762:	88fb      	ldrh	r3, [r7, #6]
 800b764:	3301      	adds	r3, #1
 800b766:	80fb      	strh	r3, [r7, #6]
 800b768:	88fb      	ldrh	r3, [r7, #6]
 800b76a:	2b0c      	cmp	r3, #12
 800b76c:	d9f2      	bls.n	800b754 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b76e:	bf00      	nop
 800b770:	bf00      	nop
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	0801ac44 	.word	0x0801ac44

0800b77c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b784:	f009 fce2 	bl	801514c <sys_arch_protect>
 800b788:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d015      	beq.n	800b7c4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f003 0303 	and.w	r3, r3, #3
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d006      	beq.n	800b7ba <do_memp_malloc_pool+0x3e>
 800b7ac:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <do_memp_malloc_pool+0x58>)
 800b7ae:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800b7b2:	4909      	ldr	r1, [pc, #36]	@ (800b7d8 <do_memp_malloc_pool+0x5c>)
 800b7b4:	4809      	ldr	r0, [pc, #36]	@ (800b7dc <do_memp_malloc_pool+0x60>)
 800b7b6:	f00b fced 	bl	8017194 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f009 fcd4 	bl	8015168 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	e003      	b.n	800b7cc <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f009 fccf 	bl	8015168 <sys_arch_unprotect>
  return NULL;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	08018fec 	.word	0x08018fec
 800b7d8:	0801901c 	.word	0x0801901c
 800b7dc:	08019040 	.word	0x08019040

0800b7e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	2b0c      	cmp	r3, #12
 800b7ee:	d908      	bls.n	800b802 <memp_malloc+0x22>
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <memp_malloc+0x3c>)
 800b7f2:	f240 1287 	movw	r2, #391	@ 0x187
 800b7f6:	490a      	ldr	r1, [pc, #40]	@ (800b820 <memp_malloc+0x40>)
 800b7f8:	480a      	ldr	r0, [pc, #40]	@ (800b824 <memp_malloc+0x44>)
 800b7fa:	f00b fccb 	bl	8017194 <iprintf>
 800b7fe:	2300      	movs	r3, #0
 800b800:	e008      	b.n	800b814 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	4a08      	ldr	r2, [pc, #32]	@ (800b828 <memp_malloc+0x48>)
 800b806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff ffb6 	bl	800b77c <do_memp_malloc_pool>
 800b810:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b812:	68fb      	ldr	r3, [r7, #12]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	08018fec 	.word	0x08018fec
 800b820:	0801907c 	.word	0x0801907c
 800b824:	08019040 	.word	0x08019040
 800b828:	0801ac44 	.word	0x0801ac44

0800b82c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	f003 0303 	and.w	r3, r3, #3
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <do_memp_free_pool+0x22>
 800b840:	4b0d      	ldr	r3, [pc, #52]	@ (800b878 <do_memp_free_pool+0x4c>)
 800b842:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800b846:	490d      	ldr	r1, [pc, #52]	@ (800b87c <do_memp_free_pool+0x50>)
 800b848:	480d      	ldr	r0, [pc, #52]	@ (800b880 <do_memp_free_pool+0x54>)
 800b84a:	f00b fca3 	bl	8017194 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b852:	f009 fc7b 	bl	801514c <sys_arch_protect>
 800b856:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b86a:	68b8      	ldr	r0, [r7, #8]
 800b86c:	f009 fc7c 	bl	8015168 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	08018fec 	.word	0x08018fec
 800b87c:	0801909c 	.word	0x0801909c
 800b880:	08019040 	.word	0x08019040

0800b884 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	6039      	str	r1, [r7, #0]
 800b88e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b890:	79fb      	ldrb	r3, [r7, #7]
 800b892:	2b0c      	cmp	r3, #12
 800b894:	d907      	bls.n	800b8a6 <memp_free+0x22>
 800b896:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <memp_free+0x44>)
 800b898:	f240 12db 	movw	r2, #475	@ 0x1db
 800b89c:	490b      	ldr	r1, [pc, #44]	@ (800b8cc <memp_free+0x48>)
 800b89e:	480c      	ldr	r0, [pc, #48]	@ (800b8d0 <memp_free+0x4c>)
 800b8a0:	f00b fc78 	bl	8017194 <iprintf>
 800b8a4:	e00c      	b.n	800b8c0 <memp_free+0x3c>

  if (mem == NULL) {
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d008      	beq.n	800b8be <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	4a09      	ldr	r2, [pc, #36]	@ (800b8d4 <memp_free+0x50>)
 800b8b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b4:	6839      	ldr	r1, [r7, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff ffb8 	bl	800b82c <do_memp_free_pool>
 800b8bc:	e000      	b.n	800b8c0 <memp_free+0x3c>
    return;
 800b8be:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	08018fec 	.word	0x08018fec
 800b8cc:	080190bc 	.word	0x080190bc
 800b8d0:	08019040 	.word	0x08019040
 800b8d4:	0801ac44 	.word	0x0801ac44

0800b8d8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b8dc:	bf00      	nop
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bc80      	pop	{r7}
 800b8e2:	4770      	bx	lr

0800b8e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d105      	bne.n	800b904 <netif_add+0x20>
 800b8f8:	4b21      	ldr	r3, [pc, #132]	@ (800b980 <netif_add+0x9c>)
 800b8fa:	22fb      	movs	r2, #251	@ 0xfb
 800b8fc:	4921      	ldr	r1, [pc, #132]	@ (800b984 <netif_add+0xa0>)
 800b8fe:	4822      	ldr	r0, [pc, #136]	@ (800b988 <netif_add+0xa4>)
 800b900:	f00b fc48 	bl	8017194 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2200      	movs	r2, #0
 800b90e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2203      	movs	r2, #3
 800b922:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	69ba      	ldr	r2, [r7, #24]
 800b930:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800b932:	4b16      	ldr	r3, [pc, #88]	@ (800b98c <netif_add+0xa8>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	b2d1      	uxtb	r1, r2
 800b93a:	4a14      	ldr	r2, [pc, #80]	@ (800b98c <netif_add+0xa8>)
 800b93c:	7011      	strb	r1, [r2, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6a3a      	ldr	r2, [r7, #32]
 800b948:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	68b9      	ldr	r1, [r7, #8]
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 f81f 	bl	800b994 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	4798      	blx	r3
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <netif_add+0x82>
    return NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	e007      	b.n	800b976 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b966:	4b0a      	ldr	r3, [pc, #40]	@ (800b990 <netif_add+0xac>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b96e:	4a08      	ldr	r2, [pc, #32]	@ (800b990 <netif_add+0xac>)
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800b974:	68fb      	ldr	r3, [r7, #12]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	080190d8 	.word	0x080190d8
 800b984:	0801910c 	.word	0x0801910c
 800b988:	08019124 	.word	0x08019124
 800b98c:	20009870 	.word	0x20009870
 800b990:	20009868 	.word	0x20009868

0800b994 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <netif_set_addr+0x1c>
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10c      	bne.n	800b9ca <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800b9b0:	68b9      	ldr	r1, [r7, #8]
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 f81a 	bl	800b9ec <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f861 	bl	800ba82 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 f84a 	bl	800ba5c <netif_set_gw>
 800b9c8:	e00c      	b.n	800b9e4 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800b9ca:	6879      	ldr	r1, [r7, #4]
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 f858 	bl	800ba82 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f841 	bl	800ba5c <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 f805 	bl	800b9ec <netif_set_ipaddr>
  }
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <netif_set_ipaddr+0x18>
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	e002      	b.n	800ba0a <netif_set_ipaddr+0x1e>
 800ba04:	4b14      	ldr	r3, [pc, #80]	@ (800ba58 <netif_set_ipaddr+0x6c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d01c      	beq.n	800ba50 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3304      	adds	r3, #4
 800ba1a:	f107 020c 	add.w	r2, r7, #12
 800ba1e:	4611      	mov	r1, r2
 800ba20:	4618      	mov	r0, r3
 800ba22:	f002 fb1d 	bl	800e060 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	3304      	adds	r3, #4
 800ba2a:	f107 020c 	add.w	r2, r7, #12
 800ba2e:	4611      	mov	r1, r2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f006 fe5b 	bl	80126ec <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <netif_set_ipaddr+0x56>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	e000      	b.n	800ba44 <netif_set_ipaddr+0x58>
 800ba42:	2300      	movs	r3, #0
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ba48:	2101      	movs	r1, #1
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f85d 	bl	800bb0a <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ba50:	bf00      	nop
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	0801acb8 	.word	0x0801acb8

0800ba5c <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <netif_set_gw+0x16>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	e000      	b.n	800ba74 <netif_set_gw+0x18>
 800ba72:	2300      	movs	r3, #0
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bc80      	pop	{r7}
 800ba80:	4770      	bx	lr

0800ba82 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d002      	beq.n	800ba98 <netif_set_netmask+0x16>
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	e000      	b.n	800ba9a <netif_set_netmask+0x18>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ba9e:	bf00      	nop
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bc80      	pop	{r7}
 800baa6:	4770      	bx	lr

0800baa8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bab0:	4a03      	ldr	r2, [pc, #12]	@ (800bac0 <netif_set_default+0x18>)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bab6:	bf00      	nop
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	bc80      	pop	{r7}
 800babe:	4770      	bx	lr
 800bac0:	2000986c 	.word	0x2000986c

0800bac4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d113      	bne.n	800bb02 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bae0:	f043 0301 	orr.w	r3, r3, #1
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800baf2:	f003 0304 	and.w	r3, r3, #4
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800bafa:	2103      	movs	r1, #3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 f804 	bl	800bb0a <netif_issue_reports>
    }
  }
}
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	460b      	mov	r3, r1
 800bb14:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	f003 0301 	and.w	r3, r3, #1
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d011      	beq.n	800bb44 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	3304      	adds	r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00c      	beq.n	800bb44 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d005      	beq.n	800bb44 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f007 fcd4 	bl	80134ec <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb5a:	f003 0304 	and.w	r3, r3, #4
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d11b      	bne.n	800bb9a <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb68:	f043 0304 	orr.w	r3, r3, #4
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb7a:	f003 0301 	and.w	r3, r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d003      	beq.n	800bb8a <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800bb82:	2103      	movs	r1, #3
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7ff ffc0 	bl	800bb0a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	69db      	ldr	r3, [r3, #28]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <netif_set_link_up+0x4e>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	4798      	blx	r3
  }
}
 800bb9a:	bf00      	nop
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d010      	beq.n	800bbda <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bbbe:	f023 0304 	bic.w	r3, r3, #4
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    NETIF_LINK_CALLBACK(netif);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69db      	ldr	r3, [r3, #28]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <netif_set_link_down+0x38>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69db      	ldr	r3, [r3, #28]
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	4798      	blx	r3
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b083      	sub	sp, #12
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]
  if (netif) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d002      	beq.n	800bbf8 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	61da      	str	r2, [r3, #28]
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bc80      	pop	{r7}
 800bc00:	4770      	bx	lr
	...

0800bc04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bc0a:	f009 fa9f 	bl	801514c <sys_arch_protect>
 800bc0e:	6038      	str	r0, [r7, #0]
 800bc10:	4b0f      	ldr	r3, [pc, #60]	@ (800bc50 <pbuf_free_ooseq+0x4c>)
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f009 faa6 	bl	8015168 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc54 <pbuf_free_ooseq+0x50>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	607b      	str	r3, [r7, #4]
 800bc22:	e00f      	b.n	800bc44 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d008      	beq.n	800bc3e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc30:	4618      	mov	r0, r3
 800bc32:	f001 fe96 	bl	800d962 <tcp_segs_free>
      pcb->ooseq = NULL;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 800bc3c:	e005      	b.n	800bc4a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	607b      	str	r3, [r7, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1ec      	bne.n	800bc24 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20009871 	.word	0x20009871
 800bc54:	20009880 	.word	0x20009880

0800bc58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bc60:	f7ff ffd0 	bl	800bc04 <pbuf_free_ooseq>
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bc72:	f009 fa6b 	bl	801514c <sys_arch_protect>
 800bc76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bc78:	4b10      	ldr	r3, [pc, #64]	@ (800bcbc <pbuf_pool_is_empty+0x50>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	@ (800bcbc <pbuf_pool_is_empty+0x50>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f009 fa6f 	bl	8015168 <sys_arch_unprotect>

  if (!queued) {
 800bc8a:	78fb      	ldrb	r3, [r7, #3]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d110      	bne.n	800bcb2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	480a      	ldr	r0, [pc, #40]	@ (800bcc0 <pbuf_pool_is_empty+0x54>)
 800bc96:	f7ff f90d 	bl	800aeb4 <tcpip_callback_with_block>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d008      	beq.n	800bcb2 <pbuf_pool_is_empty+0x46>
 800bca0:	f009 fa54 	bl	801514c <sys_arch_protect>
 800bca4:	6078      	str	r0, [r7, #4]
 800bca6:	4b05      	ldr	r3, [pc, #20]	@ (800bcbc <pbuf_pool_is_empty+0x50>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	701a      	strb	r2, [r3, #0]
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f009 fa5b 	bl	8015168 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	20009871 	.word	0x20009871
 800bcc0:	0800bc59 	.word	0x0800bc59

0800bcc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b088      	sub	sp, #32
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	71fb      	strb	r3, [r7, #7]
 800bcce:	460b      	mov	r3, r1
 800bcd0:	80bb      	strh	r3, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d81c      	bhi.n	800bd16 <pbuf_alloc+0x52>
 800bcdc:	a201      	add	r2, pc, #4	@ (adr r2, 800bce4 <pbuf_alloc+0x20>)
 800bcde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce2:	bf00      	nop
 800bce4:	0800bcf9 	.word	0x0800bcf9
 800bce8:	0800bcff 	.word	0x0800bcff
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0b 	.word	0x0800bd0b
 800bcf4:	0800bd11 	.word	0x0800bd11
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bcf8:	2336      	movs	r3, #54	@ 0x36
 800bcfa:	82fb      	strh	r3, [r7, #22]
    break;
 800bcfc:	e014      	b.n	800bd28 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bcfe:	2322      	movs	r3, #34	@ 0x22
 800bd00:	82fb      	strh	r3, [r7, #22]
    break;
 800bd02:	e011      	b.n	800bd28 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bd04:	230e      	movs	r3, #14
 800bd06:	82fb      	strh	r3, [r7, #22]
    break;
 800bd08:	e00e      	b.n	800bd28 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	82fb      	strh	r3, [r7, #22]
    break;
 800bd0e:	e00b      	b.n	800bd28 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	82fb      	strh	r3, [r7, #22]
    break;
 800bd14:	e008      	b.n	800bd28 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800bd16:	4ba1      	ldr	r3, [pc, #644]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800bd18:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800bd1c:	49a0      	ldr	r1, [pc, #640]	@ (800bfa0 <pbuf_alloc+0x2dc>)
 800bd1e:	48a1      	ldr	r0, [pc, #644]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800bd20:	f00b fa38 	bl	8017194 <iprintf>
    return NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e15c      	b.n	800bfe2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 800bd28:	79bb      	ldrb	r3, [r7, #6]
 800bd2a:	2b03      	cmp	r3, #3
 800bd2c:	d00d      	beq.n	800bd4a <pbuf_alloc+0x86>
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	f300 8146 	bgt.w	800bfc0 <pbuf_alloc+0x2fc>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80d0 	beq.w	800beda <pbuf_alloc+0x216>
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f2c0 8140 	blt.w	800bfc0 <pbuf_alloc+0x2fc>
 800bd40:	3b01      	subs	r3, #1
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	f200 813c 	bhi.w	800bfc0 <pbuf_alloc+0x2fc>
 800bd48:	e10d      	b.n	800bf66 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bd4a:	200c      	movs	r0, #12
 800bd4c:	f7ff fd48 	bl	800b7e0 <memp_malloc>
 800bd50:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800bd52:	69fb      	ldr	r3, [r7, #28]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800bd58:	f7ff ff88 	bl	800bc6c <pbuf_pool_is_empty>
      return NULL;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e140      	b.n	800bfe2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	79ba      	ldrb	r2, [r7, #6]
 800bd64:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800bd6c:	8afb      	ldrh	r3, [r7, #22]
 800bd6e:	3310      	adds	r3, #16
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	4413      	add	r3, r2
 800bd74:	3303      	adds	r3, #3
 800bd76:	f023 0303 	bic.w	r3, r3, #3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d006      	beq.n	800bd9a <pbuf_alloc+0xd6>
 800bd8c:	4b83      	ldr	r3, [pc, #524]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800bd8e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800bd92:	4985      	ldr	r1, [pc, #532]	@ (800bfa8 <pbuf_alloc+0x2e4>)
 800bd94:	4883      	ldr	r0, [pc, #524]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800bd96:	f00b f9fd 	bl	8017194 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	88ba      	ldrh	r2, [r7, #4]
 800bd9e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800bda0:	8afb      	ldrh	r3, [r7, #22]
 800bda2:	3303      	adds	r3, #3
 800bda4:	f023 0303 	bic.w	r3, r3, #3
 800bda8:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 800bdac:	88bb      	ldrh	r3, [r7, #4]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	bf28      	it	cs
 800bdb2:	4613      	movcs	r3, r2
 800bdb4:	b29a      	uxth	r2, r3
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	69fa      	ldr	r2, [r7, #28]
 800bdc0:	8952      	ldrh	r2, [r2, #10]
 800bdc2:	441a      	add	r2, r3
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d906      	bls.n	800bddc <pbuf_alloc+0x118>
 800bdce:	4b73      	ldr	r3, [pc, #460]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800bdd0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800bdd4:	4975      	ldr	r1, [pc, #468]	@ (800bfac <pbuf_alloc+0x2e8>)
 800bdd6:	4873      	ldr	r0, [pc, #460]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800bdd8:	f00b f9dc 	bl	8017194 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bddc:	8afb      	ldrh	r3, [r7, #22]
 800bdde:	3303      	adds	r3, #3
 800bde0:	f023 0303 	bic.w	r3, r3, #3
 800bde4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800bde8:	d106      	bne.n	800bdf8 <pbuf_alloc+0x134>
 800bdea:	4b6c      	ldr	r3, [pc, #432]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800bdec:	f240 1231 	movw	r2, #305	@ 0x131
 800bdf0:	496f      	ldr	r1, [pc, #444]	@ (800bfb0 <pbuf_alloc+0x2ec>)
 800bdf2:	486c      	ldr	r0, [pc, #432]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800bdf4:	f00b f9ce 	bl	8017194 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800be02:	88bb      	ldrh	r3, [r7, #4]
 800be04:	69fa      	ldr	r2, [r7, #28]
 800be06:	8952      	ldrh	r2, [r2, #10]
 800be08:	1a9b      	subs	r3, r3, r2
 800be0a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800be0c:	e061      	b.n	800bed2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be0e:	200c      	movs	r0, #12
 800be10:	f7ff fce6 	bl	800b7e0 <memp_malloc>
 800be14:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d106      	bne.n	800be2a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800be1c:	f7ff ff26 	bl	800bc6c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800be20:	69f8      	ldr	r0, [r7, #28]
 800be22:	f000 fac7 	bl	800c3b4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800be26:	2300      	movs	r3, #0
 800be28:	e0db      	b.n	800bfe2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	79ba      	ldrb	r2, [r7, #6]
 800be2e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800be48:	4293      	cmp	r3, r2
 800be4a:	dd06      	ble.n	800be5a <pbuf_alloc+0x196>
 800be4c:	4b53      	ldr	r3, [pc, #332]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800be4e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800be52:	4958      	ldr	r1, [pc, #352]	@ (800bfb4 <pbuf_alloc+0x2f0>)
 800be54:	4853      	ldr	r0, [pc, #332]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800be56:	f00b f99d 	bl	8017194 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	b29b      	uxth	r3, r3
 800be66:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800be6a:	bf28      	it	cs
 800be6c:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 800be70:	b29a      	uxth	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f103 0210 	add.w	r2, r3, #16
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d006      	beq.n	800be9a <pbuf_alloc+0x1d6>
 800be8c:	4b43      	ldr	r3, [pc, #268]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800be8e:	f240 1251 	movw	r2, #337	@ 0x151
 800be92:	4949      	ldr	r1, [pc, #292]	@ (800bfb8 <pbuf_alloc+0x2f4>)
 800be94:	4843      	ldr	r0, [pc, #268]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800be96:	f00b f97d 	bl	8017194 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	69fa      	ldr	r2, [r7, #28]
 800bea0:	8952      	ldrh	r2, [r2, #10]
 800bea2:	441a      	add	r2, r3
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800beaa:	429a      	cmp	r2, r3
 800beac:	d906      	bls.n	800bebc <pbuf_alloc+0x1f8>
 800beae:	4b3b      	ldr	r3, [pc, #236]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800beb0:	f240 1253 	movw	r2, #339	@ 0x153
 800beb4:	493d      	ldr	r1, [pc, #244]	@ (800bfac <pbuf_alloc+0x2e8>)
 800beb6:	483b      	ldr	r0, [pc, #236]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800beb8:	f00b f96c 	bl	8017194 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2201      	movs	r2, #1
 800bec0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	895b      	ldrh	r3, [r3, #10]
 800bec6:	461a      	mov	r2, r3
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	1a9b      	subs	r3, r3, r2
 800becc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dc9a      	bgt.n	800be0e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800bed8:	e07c      	b.n	800bfd4 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800beda:	8afb      	ldrh	r3, [r7, #22]
 800bedc:	3313      	adds	r3, #19
 800bede:	b29b      	uxth	r3, r3
 800bee0:	f023 0303 	bic.w	r3, r3, #3
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	88bb      	ldrh	r3, [r7, #4]
 800bee8:	3303      	adds	r3, #3
 800beea:	b29b      	uxth	r3, r3
 800beec:	f023 0303 	bic.w	r3, r3, #3
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	4413      	add	r3, r2
 800bef4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800bef6:	897a      	ldrh	r2, [r7, #10]
 800bef8:	88bb      	ldrh	r3, [r7, #4]
 800befa:	3303      	adds	r3, #3
 800befc:	f023 0303 	bic.w	r3, r3, #3
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d201      	bcs.n	800bf08 <pbuf_alloc+0x244>
        return NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e06c      	b.n	800bfe2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800bf08:	897b      	ldrh	r3, [r7, #10]
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff faf8 	bl	800b500 <mem_malloc>
 800bf10:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d101      	bne.n	800bf1c <pbuf_alloc+0x258>
      return NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e062      	b.n	800bfe2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800bf1c:	8afb      	ldrh	r3, [r7, #22]
 800bf1e:	3310      	adds	r3, #16
 800bf20:	69fa      	ldr	r2, [r7, #28]
 800bf22:	4413      	add	r3, r2
 800bf24:	3303      	adds	r3, #3
 800bf26:	f023 0303 	bic.w	r3, r3, #3
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	88ba      	ldrh	r2, [r7, #4]
 800bf34:	811a      	strh	r2, [r3, #8]
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	891a      	ldrh	r2, [r3, #8]
 800bf3a:	69fb      	ldr	r3, [r7, #28]
 800bf3c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bf3e:	69fb      	ldr	r3, [r7, #28]
 800bf40:	2200      	movs	r2, #0
 800bf42:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	79ba      	ldrb	r2, [r7, #6]
 800bf48:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f003 0303 	and.w	r3, r3, #3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d03d      	beq.n	800bfd2 <pbuf_alloc+0x30e>
 800bf56:	4b11      	ldr	r3, [pc, #68]	@ (800bf9c <pbuf_alloc+0x2d8>)
 800bf58:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 800bf5c:	4917      	ldr	r1, [pc, #92]	@ (800bfbc <pbuf_alloc+0x2f8>)
 800bf5e:	4811      	ldr	r0, [pc, #68]	@ (800bfa4 <pbuf_alloc+0x2e0>)
 800bf60:	f00b f918 	bl	8017194 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800bf64:	e035      	b.n	800bfd2 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf66:	200b      	movs	r0, #11
 800bf68:	f7ff fc3a 	bl	800b7e0 <memp_malloc>
 800bf6c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e034      	b.n	800bfe2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	88ba      	ldrh	r2, [r7, #4]
 800bf82:	811a      	strh	r2, [r3, #8]
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	891a      	ldrh	r2, [r3, #8]
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	601a      	str	r2, [r3, #0]
    p->type = type;
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	79ba      	ldrb	r2, [r7, #6]
 800bf96:	731a      	strb	r2, [r3, #12]
    break;
 800bf98:	e01c      	b.n	800bfd4 <pbuf_alloc+0x310>
 800bf9a:	bf00      	nop
 800bf9c:	0801914c 	.word	0x0801914c
 800bfa0:	0801917c 	.word	0x0801917c
 800bfa4:	08019198 	.word	0x08019198
 800bfa8:	080191c0 	.word	0x080191c0
 800bfac:	080191f0 	.word	0x080191f0
 800bfb0:	08019224 	.word	0x08019224
 800bfb4:	08019258 	.word	0x08019258
 800bfb8:	0801926c 	.word	0x0801926c
 800bfbc:	0801929c 	.word	0x0801929c
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bfec <pbuf_alloc+0x328>)
 800bfc2:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800bfc6:	490a      	ldr	r1, [pc, #40]	@ (800bff0 <pbuf_alloc+0x32c>)
 800bfc8:	480a      	ldr	r0, [pc, #40]	@ (800bff4 <pbuf_alloc+0x330>)
 800bfca:	f00b f8e3 	bl	8017194 <iprintf>
    return NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e007      	b.n	800bfe2 <pbuf_alloc+0x31e>
    break;
 800bfd2:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bfe0:	69fb      	ldr	r3, [r7, #28]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3720      	adds	r7, #32
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	0801914c 	.word	0x0801914c
 800bff0:	080192c8 	.word	0x080192c8
 800bff4:	08019198 	.word	0x08019198

0800bff8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	603b      	str	r3, [r7, #0]
 800c000:	4603      	mov	r3, r0
 800c002:	71fb      	strb	r3, [r7, #7]
 800c004:	460b      	mov	r3, r1
 800c006:	80bb      	strh	r3, [r7, #4]
 800c008:	4613      	mov	r3, r2
 800c00a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c00c:	79fb      	ldrb	r3, [r7, #7]
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d81b      	bhi.n	800c04a <pbuf_alloced_custom+0x52>
 800c012:	a201      	add	r2, pc, #4	@ (adr r2, 800c018 <pbuf_alloced_custom+0x20>)
 800c014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c018:	0800c02d 	.word	0x0800c02d
 800c01c:	0800c033 	.word	0x0800c033
 800c020:	0800c039 	.word	0x0800c039
 800c024:	0800c03f 	.word	0x0800c03f
 800c028:	0800c045 	.word	0x0800c045
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c02c:	2336      	movs	r3, #54	@ 0x36
 800c02e:	81fb      	strh	r3, [r7, #14]
    break;
 800c030:	e014      	b.n	800c05c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c032:	2322      	movs	r3, #34	@ 0x22
 800c034:	81fb      	strh	r3, [r7, #14]
    break;
 800c036:	e011      	b.n	800c05c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c038:	230e      	movs	r3, #14
 800c03a:	81fb      	strh	r3, [r7, #14]
    break;
 800c03c:	e00e      	b.n	800c05c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c03e:	2300      	movs	r3, #0
 800c040:	81fb      	strh	r3, [r7, #14]
    break;
 800c042:	e00b      	b.n	800c05c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	81fb      	strh	r3, [r7, #14]
    break;
 800c048:	e008      	b.n	800c05c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c04a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c0 <pbuf_alloced_custom+0xc8>)
 800c04c:	f240 12c5 	movw	r2, #453	@ 0x1c5
 800c050:	491c      	ldr	r1, [pc, #112]	@ (800c0c4 <pbuf_alloced_custom+0xcc>)
 800c052:	481d      	ldr	r0, [pc, #116]	@ (800c0c8 <pbuf_alloced_custom+0xd0>)
 800c054:	f00b f89e 	bl	8017194 <iprintf>
    return NULL;
 800c058:	2300      	movs	r3, #0
 800c05a:	e02d      	b.n	800c0b8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c05c:	89fb      	ldrh	r3, [r7, #14]
 800c05e:	3303      	adds	r3, #3
 800c060:	f023 0203 	bic.w	r2, r3, #3
 800c064:	88bb      	ldrh	r3, [r7, #4]
 800c066:	441a      	add	r2, r3
 800c068:	8bbb      	ldrh	r3, [r7, #28]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d901      	bls.n	800c072 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	e022      	b.n	800c0b8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d008      	beq.n	800c090 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c07e:	89fb      	ldrh	r3, [r7, #14]
 800c080:	3303      	adds	r3, #3
 800c082:	f023 0303 	bic.w	r3, r3, #3
 800c086:	69ba      	ldr	r2, [r7, #24]
 800c088:	441a      	add	r2, r3
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	605a      	str	r2, [r3, #4]
 800c08e:	e002      	b.n	800c096 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2200      	movs	r2, #0
 800c094:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	2202      	movs	r2, #2
 800c09a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	88ba      	ldrh	r2, [r7, #4]
 800c0a0:	811a      	strh	r2, [r3, #8]
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	891a      	ldrh	r2, [r3, #8]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	79ba      	ldrb	r2, [r7, #6]
 800c0ae:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c0b6:	683b      	ldr	r3, [r7, #0]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	0801914c 	.word	0x0801914c
 800c0c4:	080192e4 	.word	0x080192e4
 800c0c8:	08019198 	.word	0x08019198

0800c0cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <pbuf_realloc+0x20>
 800c0de:	4b4b      	ldr	r3, [pc, #300]	@ (800c20c <pbuf_realloc+0x140>)
 800c0e0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800c0e4:	494a      	ldr	r1, [pc, #296]	@ (800c210 <pbuf_realloc+0x144>)
 800c0e6:	484b      	ldr	r0, [pc, #300]	@ (800c214 <pbuf_realloc+0x148>)
 800c0e8:	f00b f854 	bl	8017194 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7b1b      	ldrb	r3, [r3, #12]
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d012      	beq.n	800c11a <pbuf_realloc+0x4e>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	7b1b      	ldrb	r3, [r3, #12]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d00e      	beq.n	800c11a <pbuf_realloc+0x4e>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	7b1b      	ldrb	r3, [r3, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00a      	beq.n	800c11a <pbuf_realloc+0x4e>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	7b1b      	ldrb	r3, [r3, #12]
 800c108:	2b02      	cmp	r3, #2
 800c10a:	d006      	beq.n	800c11a <pbuf_realloc+0x4e>
 800c10c:	4b3f      	ldr	r3, [pc, #252]	@ (800c20c <pbuf_realloc+0x140>)
 800c10e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800c112:	4941      	ldr	r1, [pc, #260]	@ (800c218 <pbuf_realloc+0x14c>)
 800c114:	483f      	ldr	r0, [pc, #252]	@ (800c214 <pbuf_realloc+0x148>)
 800c116:	f00b f83d 	bl	8017194 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	891b      	ldrh	r3, [r3, #8]
 800c11e:	887a      	ldrh	r2, [r7, #2]
 800c120:	429a      	cmp	r2, r3
 800c122:	d26e      	bcs.n	800c202 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c124:	887b      	ldrh	r3, [r7, #2]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	8912      	ldrh	r2, [r2, #8]
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c12e:	887b      	ldrh	r3, [r7, #2]
 800c130:	827b      	strh	r3, [r7, #18]
  q = p;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c136:	e025      	b.n	800c184 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	895b      	ldrh	r3, [r3, #10]
 800c13c:	8a7a      	ldrh	r2, [r7, #18]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c148:	4293      	cmp	r3, r2
 800c14a:	dd06      	ble.n	800c15a <pbuf_realloc+0x8e>
 800c14c:	4b2f      	ldr	r3, [pc, #188]	@ (800c20c <pbuf_realloc+0x140>)
 800c14e:	f240 220b 	movw	r2, #523	@ 0x20b
 800c152:	4932      	ldr	r1, [pc, #200]	@ (800c21c <pbuf_realloc+0x150>)
 800c154:	482f      	ldr	r0, [pc, #188]	@ (800c214 <pbuf_realloc+0x148>)
 800c156:	f00b f81d 	bl	8017194 <iprintf>
    q->tot_len += (u16_t)grow;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	891a      	ldrh	r2, [r3, #8]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	b29b      	uxth	r3, r3
 800c162:	4413      	add	r3, r2
 800c164:	b29a      	uxth	r2, r3
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <pbuf_realloc+0xb8>
 800c176:	4b25      	ldr	r3, [pc, #148]	@ (800c20c <pbuf_realloc+0x140>)
 800c178:	f240 220f 	movw	r2, #527	@ 0x20f
 800c17c:	4928      	ldr	r1, [pc, #160]	@ (800c220 <pbuf_realloc+0x154>)
 800c17e:	4825      	ldr	r0, [pc, #148]	@ (800c214 <pbuf_realloc+0x148>)
 800c180:	f00b f808 	bl	8017194 <iprintf>
  while (rem_len > q->len) {
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	895b      	ldrh	r3, [r3, #10]
 800c188:	8a7a      	ldrh	r2, [r7, #18]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d8d4      	bhi.n	800c138 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	7b1b      	ldrb	r3, [r3, #12]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d121      	bne.n	800c1da <pbuf_realloc+0x10e>
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	895b      	ldrh	r3, [r3, #10]
 800c19a:	8a7a      	ldrh	r2, [r7, #18]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d01c      	beq.n	800c1da <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	7b5b      	ldrb	r3, [r3, #13]
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d116      	bne.n	800c1da <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	685a      	ldr	r2, [r3, #4]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	8a7b      	ldrh	r3, [r7, #18]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6978      	ldr	r0, [r7, #20]
 800c1c0:	f7ff f8b4 	bl	800b32c <mem_trim>
 800c1c4:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <pbuf_realloc+0x10e>
 800c1cc:	4b0f      	ldr	r3, [pc, #60]	@ (800c20c <pbuf_realloc+0x140>)
 800c1ce:	f240 221d 	movw	r2, #541	@ 0x21d
 800c1d2:	4914      	ldr	r1, [pc, #80]	@ (800c224 <pbuf_realloc+0x158>)
 800c1d4:	480f      	ldr	r0, [pc, #60]	@ (800c214 <pbuf_realloc+0x148>)
 800c1d6:	f00a ffdd 	bl	8017194 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	8a7a      	ldrh	r2, [r7, #18]
 800c1de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	895a      	ldrh	r2, [r3, #10]
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d004      	beq.n	800c1fa <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f8dd 	bl	800c3b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]
 800c200:	e000      	b.n	800c204 <pbuf_realloc+0x138>
    return;
 800c202:	bf00      	nop

}
 800c204:	3718      	adds	r7, #24
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	0801914c 	.word	0x0801914c
 800c210:	08019308 	.word	0x08019308
 800c214:	08019198 	.word	0x08019198
 800c218:	08019320 	.word	0x08019320
 800c21c:	0801933c 	.word	0x0801933c
 800c220:	08019350 	.word	0x08019350
 800c224:	08019368 	.word	0x08019368

0800c228 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	460b      	mov	r3, r1
 800c232:	807b      	strh	r3, [r7, #2]
 800c234:	4613      	mov	r3, r2
 800c236:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d106      	bne.n	800c24c <pbuf_header_impl+0x24>
 800c23e:	4b46      	ldr	r3, [pc, #280]	@ (800c358 <pbuf_header_impl+0x130>)
 800c240:	f240 223f 	movw	r2, #575	@ 0x23f
 800c244:	4945      	ldr	r1, [pc, #276]	@ (800c35c <pbuf_header_impl+0x134>)
 800c246:	4846      	ldr	r0, [pc, #280]	@ (800c360 <pbuf_header_impl+0x138>)
 800c248:	f00a ffa4 	bl	8017194 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c24c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <pbuf_header_impl+0x32>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <pbuf_header_impl+0x36>
    return 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	e078      	b.n	800c350 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c25e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c262:	2b00      	cmp	r3, #0
 800c264:	da10      	bge.n	800c288 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c266:	887b      	ldrh	r3, [r7, #2]
 800c268:	425b      	negs	r3, r3
 800c26a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	895b      	ldrh	r3, [r3, #10]
 800c270:	89fa      	ldrh	r2, [r7, #14]
 800c272:	429a      	cmp	r2, r3
 800c274:	d90a      	bls.n	800c28c <pbuf_header_impl+0x64>
 800c276:	4b38      	ldr	r3, [pc, #224]	@ (800c358 <pbuf_header_impl+0x130>)
 800c278:	f240 2247 	movw	r2, #583	@ 0x247
 800c27c:	4939      	ldr	r1, [pc, #228]	@ (800c364 <pbuf_header_impl+0x13c>)
 800c27e:	4838      	ldr	r0, [pc, #224]	@ (800c360 <pbuf_header_impl+0x138>)
 800c280:	f00a ff88 	bl	8017194 <iprintf>
 800c284:	2301      	movs	r3, #1
 800c286:	e063      	b.n	800c350 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c288:	887b      	ldrh	r3, [r7, #2]
 800c28a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7b1b      	ldrb	r3, [r3, #12]
 800c290:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c298:	89bb      	ldrh	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d002      	beq.n	800c2a4 <pbuf_header_impl+0x7c>
 800c29e:	89bb      	ldrh	r3, [r7, #12]
 800c2a0:	2b03      	cmp	r3, #3
 800c2a2:	d112      	bne.n	800c2ca <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2ac:	425b      	negs	r3, r3
 800c2ae:	441a      	add	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685a      	ldr	r2, [r3, #4]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	3310      	adds	r3, #16
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d238      	bcs.n	800c332 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e042      	b.n	800c350 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c2ca:	89bb      	ldrh	r3, [r7, #12]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d002      	beq.n	800c2d6 <pbuf_header_impl+0xae>
 800c2d0:	89bb      	ldrh	r3, [r7, #12]
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d124      	bne.n	800c320 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c2d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	da0d      	bge.n	800c2fa <pbuf_header_impl+0xd2>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	895b      	ldrh	r3, [r3, #10]
 800c2e2:	89fa      	ldrh	r2, [r7, #14]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d808      	bhi.n	800c2fa <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685a      	ldr	r2, [r3, #4]
 800c2ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2f0:	425b      	negs	r3, r3
 800c2f2:	441a      	add	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	605a      	str	r2, [r3, #4]
 800c2f8:	e011      	b.n	800c31e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c2fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	dd0b      	ble.n	800c31a <pbuf_header_impl+0xf2>
 800c302:	787b      	ldrb	r3, [r7, #1]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d008      	beq.n	800c31a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c310:	425b      	negs	r3, r3
 800c312:	441a      	add	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	e001      	b.n	800c31e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c31a:	2301      	movs	r3, #1
 800c31c:	e018      	b.n	800c350 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c31e:	e008      	b.n	800c332 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c320:	4b0d      	ldr	r3, [pc, #52]	@ (800c358 <pbuf_header_impl+0x130>)
 800c322:	f240 2277 	movw	r2, #631	@ 0x277
 800c326:	4910      	ldr	r1, [pc, #64]	@ (800c368 <pbuf_header_impl+0x140>)
 800c328:	480d      	ldr	r0, [pc, #52]	@ (800c360 <pbuf_header_impl+0x138>)
 800c32a:	f00a ff33 	bl	8017194 <iprintf>
    return 1;
 800c32e:	2301      	movs	r3, #1
 800c330:	e00e      	b.n	800c350 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	895a      	ldrh	r2, [r3, #10]
 800c336:	887b      	ldrh	r3, [r7, #2]
 800c338:	4413      	add	r3, r2
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	891a      	ldrh	r2, [r3, #8]
 800c344:	887b      	ldrh	r3, [r7, #2]
 800c346:	4413      	add	r3, r2
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	3710      	adds	r7, #16
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	0801914c 	.word	0x0801914c
 800c35c:	08019384 	.word	0x08019384
 800c360:	08019198 	.word	0x08019198
 800c364:	08019390 	.word	0x08019390
 800c368:	080193b0 	.word	0x080193b0

0800c36c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c37c:	2200      	movs	r2, #0
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff ff51 	bl	800c228 <pbuf_header_impl>
 800c386:	4603      	mov	r3, r0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c39c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f7ff ff3f 	bl	800c228 <pbuf_header_impl>
 800c3aa:	4603      	mov	r3, r0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10b      	bne.n	800c3da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <pbuf_free+0x22>
 800c3c8:	4b41      	ldr	r3, [pc, #260]	@ (800c4d0 <pbuf_free+0x11c>)
 800c3ca:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800c3ce:	4941      	ldr	r1, [pc, #260]	@ (800c4d4 <pbuf_free+0x120>)
 800c3d0:	4841      	ldr	r0, [pc, #260]	@ (800c4d8 <pbuf_free+0x124>)
 800c3d2:	f00a fedf 	bl	8017194 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e076      	b.n	800c4c8 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	7b1b      	ldrb	r3, [r3, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d012      	beq.n	800c408 <pbuf_free+0x54>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	7b1b      	ldrb	r3, [r3, #12]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d00e      	beq.n	800c408 <pbuf_free+0x54>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	7b1b      	ldrb	r3, [r3, #12]
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	d00a      	beq.n	800c408 <pbuf_free+0x54>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7b1b      	ldrb	r3, [r3, #12]
 800c3f6:	2b03      	cmp	r3, #3
 800c3f8:	d006      	beq.n	800c408 <pbuf_free+0x54>
 800c3fa:	4b35      	ldr	r3, [pc, #212]	@ (800c4d0 <pbuf_free+0x11c>)
 800c3fc:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c400:	4936      	ldr	r1, [pc, #216]	@ (800c4dc <pbuf_free+0x128>)
 800c402:	4835      	ldr	r0, [pc, #212]	@ (800c4d8 <pbuf_free+0x124>)
 800c404:	f00a fec6 	bl	8017194 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c40c:	e058      	b.n	800c4c0 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c40e:	f008 fe9d 	bl	801514c <sys_arch_protect>
 800c412:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	89db      	ldrh	r3, [r3, #14]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d106      	bne.n	800c42a <pbuf_free+0x76>
 800c41c:	4b2c      	ldr	r3, [pc, #176]	@ (800c4d0 <pbuf_free+0x11c>)
 800c41e:	f240 22eb 	movw	r2, #747	@ 0x2eb
 800c422:	492f      	ldr	r1, [pc, #188]	@ (800c4e0 <pbuf_free+0x12c>)
 800c424:	482c      	ldr	r0, [pc, #176]	@ (800c4d8 <pbuf_free+0x124>)
 800c426:	f00a feb5 	bl	8017194 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	89db      	ldrh	r3, [r3, #14]
 800c42e:	3b01      	subs	r3, #1
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	81da      	strh	r2, [r3, #14]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	89db      	ldrh	r3, [r3, #14]
 800c43a:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c43c:	69b8      	ldr	r0, [r7, #24]
 800c43e:	f008 fe93 	bl	8015168 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c442:	8afb      	ldrh	r3, [r7, #22]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d139      	bne.n	800c4bc <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	7b1b      	ldrb	r3, [r3, #12]
 800c452:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	7b5b      	ldrb	r3, [r3, #13]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d011      	beq.n	800c484 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	691b      	ldr	r3, [r3, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d106      	bne.n	800c47a <pbuf_free+0xc6>
 800c46c:	4b18      	ldr	r3, [pc, #96]	@ (800c4d0 <pbuf_free+0x11c>)
 800c46e:	f240 22f9 	movw	r2, #761	@ 0x2f9
 800c472:	491c      	ldr	r1, [pc, #112]	@ (800c4e4 <pbuf_free+0x130>)
 800c474:	4818      	ldr	r0, [pc, #96]	@ (800c4d8 <pbuf_free+0x124>)
 800c476:	f00a fe8d 	bl	8017194 <iprintf>
        pc->custom_free_function(p);
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	4798      	blx	r3
 800c482:	e015      	b.n	800c4b0 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c484:	89fb      	ldrh	r3, [r7, #14]
 800c486:	2b03      	cmp	r3, #3
 800c488:	d104      	bne.n	800c494 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	200c      	movs	r0, #12
 800c48e:	f7ff f9f9 	bl	800b884 <memp_free>
 800c492:	e00d      	b.n	800c4b0 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c494:	89fb      	ldrh	r3, [r7, #14]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d002      	beq.n	800c4a0 <pbuf_free+0xec>
 800c49a:	89fb      	ldrh	r3, [r7, #14]
 800c49c:	2b02      	cmp	r3, #2
 800c49e:	d104      	bne.n	800c4aa <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c4a0:	6879      	ldr	r1, [r7, #4]
 800c4a2:	200b      	movs	r0, #11
 800c4a4:	f7ff f9ee 	bl	800b884 <memp_free>
 800c4a8:	e002      	b.n	800c4b0 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7fe fed0 	bl	800b250 <mem_free>
        }
      }
      count++;
 800c4b0:	7ffb      	ldrb	r3, [r7, #31]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	607b      	str	r3, [r7, #4]
 800c4ba:	e001      	b.n	800c4c0 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1a3      	bne.n	800c40e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c4c6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3720      	adds	r7, #32
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	0801914c 	.word	0x0801914c
 800c4d4:	08019384 	.word	0x08019384
 800c4d8:	08019198 	.word	0x08019198
 800c4dc:	080193c0 	.word	0x080193c0
 800c4e0:	080193d8 	.word	0x080193d8
 800c4e4:	080193f0 	.word	0x080193f0

0800c4e8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c4f4:	e005      	b.n	800c502 <pbuf_clen+0x1a>
    ++len;
 800c4f6:	89fb      	ldrh	r3, [r7, #14]
 800c4f8:	3301      	adds	r3, #1
 800c4fa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1f6      	bne.n	800c4f6 <pbuf_clen+0xe>
  }
  return len;
 800c508:	89fb      	ldrh	r3, [r7, #14]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr

0800c514 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d016      	beq.n	800c550 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c522:	f008 fe13 	bl	801514c <sys_arch_protect>
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	89db      	ldrh	r3, [r3, #14]
 800c52c:	3301      	adds	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	81da      	strh	r2, [r3, #14]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f008 fe17 	bl	8015168 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	89db      	ldrh	r3, [r3, #14]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <pbuf_ref+0x3c>
 800c542:	4b05      	ldr	r3, [pc, #20]	@ (800c558 <pbuf_ref+0x44>)
 800c544:	f240 3239 	movw	r2, #825	@ 0x339
 800c548:	4904      	ldr	r1, [pc, #16]	@ (800c55c <pbuf_ref+0x48>)
 800c54a:	4805      	ldr	r0, [pc, #20]	@ (800c560 <pbuf_ref+0x4c>)
 800c54c:	f00a fe22 	bl	8017194 <iprintf>
  }
}
 800c550:	bf00      	nop
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	0801914c 	.word	0x0801914c
 800c55c:	08019414 	.word	0x08019414
 800c560:	08019198 	.word	0x08019198

0800c564 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <pbuf_cat+0x16>
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d107      	bne.n	800c58a <pbuf_cat+0x26>
 800c57a:	4b20      	ldr	r3, [pc, #128]	@ (800c5fc <pbuf_cat+0x98>)
 800c57c:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800c580:	491f      	ldr	r1, [pc, #124]	@ (800c600 <pbuf_cat+0x9c>)
 800c582:	4820      	ldr	r0, [pc, #128]	@ (800c604 <pbuf_cat+0xa0>)
 800c584:	f00a fe06 	bl	8017194 <iprintf>
 800c588:	e034      	b.n	800c5f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	e00a      	b.n	800c5a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	891a      	ldrh	r2, [r3, #8]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	891b      	ldrh	r3, [r3, #8]
 800c598:	4413      	add	r3, r2
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d1f0      	bne.n	800c590 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	891a      	ldrh	r2, [r3, #8]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	895b      	ldrh	r3, [r3, #10]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d006      	beq.n	800c5c8 <pbuf_cat+0x64>
 800c5ba:	4b10      	ldr	r3, [pc, #64]	@ (800c5fc <pbuf_cat+0x98>)
 800c5bc:	f240 3255 	movw	r2, #853	@ 0x355
 800c5c0:	4911      	ldr	r1, [pc, #68]	@ (800c608 <pbuf_cat+0xa4>)
 800c5c2:	4810      	ldr	r0, [pc, #64]	@ (800c604 <pbuf_cat+0xa0>)
 800c5c4:	f00a fde6 	bl	8017194 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d006      	beq.n	800c5de <pbuf_cat+0x7a>
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <pbuf_cat+0x98>)
 800c5d2:	f240 3256 	movw	r2, #854	@ 0x356
 800c5d6:	490d      	ldr	r1, [pc, #52]	@ (800c60c <pbuf_cat+0xa8>)
 800c5d8:	480a      	ldr	r0, [pc, #40]	@ (800c604 <pbuf_cat+0xa0>)
 800c5da:	f00a fddb 	bl	8017194 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	891a      	ldrh	r2, [r3, #8]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	891b      	ldrh	r3, [r3, #8]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	b29a      	uxth	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	683a      	ldr	r2, [r7, #0]
 800c5f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	0801914c 	.word	0x0801914c
 800c600:	08019428 	.word	0x08019428
 800c604:	08019198 	.word	0x08019198
 800c608:	08019460 	.word	0x08019460
 800c60c:	08019490 	.word	0x08019490

0800c610 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c61a:	6839      	ldr	r1, [r7, #0]
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff ffa1 	bl	800c564 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c622:	6838      	ldr	r0, [r7, #0]
 800c624:	f7ff ff76 	bl	800c514 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c63a:	2300      	movs	r3, #0
 800c63c:	81fb      	strh	r3, [r7, #14]
 800c63e:	2300      	movs	r3, #0
 800c640:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d008      	beq.n	800c65a <pbuf_copy+0x2a>
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d005      	beq.n	800c65a <pbuf_copy+0x2a>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	891a      	ldrh	r2, [r3, #8]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	891b      	ldrh	r3, [r3, #8]
 800c656:	429a      	cmp	r2, r3
 800c658:	d209      	bcs.n	800c66e <pbuf_copy+0x3e>
 800c65a:	4b54      	ldr	r3, [pc, #336]	@ (800c7ac <pbuf_copy+0x17c>)
 800c65c:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 800c660:	4953      	ldr	r1, [pc, #332]	@ (800c7b0 <pbuf_copy+0x180>)
 800c662:	4854      	ldr	r0, [pc, #336]	@ (800c7b4 <pbuf_copy+0x184>)
 800c664:	f00a fd96 	bl	8017194 <iprintf>
 800c668:	f06f 030f 	mvn.w	r3, #15
 800c66c:	e099      	b.n	800c7a2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	895b      	ldrh	r3, [r3, #10]
 800c672:	461a      	mov	r2, r3
 800c674:	89fb      	ldrh	r3, [r7, #14]
 800c676:	1ad2      	subs	r2, r2, r3
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	895b      	ldrh	r3, [r3, #10]
 800c67c:	4619      	mov	r1, r3
 800c67e:	89bb      	ldrh	r3, [r7, #12]
 800c680:	1acb      	subs	r3, r1, r3
 800c682:	429a      	cmp	r2, r3
 800c684:	db05      	blt.n	800c692 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	895a      	ldrh	r2, [r3, #10]
 800c68a:	89bb      	ldrh	r3, [r7, #12]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	817b      	strh	r3, [r7, #10]
 800c690:	e004      	b.n	800c69c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	895a      	ldrh	r2, [r3, #10]
 800c696:	89fb      	ldrh	r3, [r7, #14]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685a      	ldr	r2, [r3, #4]
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	18d0      	adds	r0, r2, r3
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	89bb      	ldrh	r3, [r7, #12]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	897a      	ldrh	r2, [r7, #10]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f00a ffb5 	bl	801761e <memcpy>
    offset_to += len;
 800c6b4:	89fa      	ldrh	r2, [r7, #14]
 800c6b6:	897b      	ldrh	r3, [r7, #10]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c6bc:	89ba      	ldrh	r2, [r7, #12]
 800c6be:	897b      	ldrh	r3, [r7, #10]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	895b      	ldrh	r3, [r3, #10]
 800c6c8:	89fa      	ldrh	r2, [r7, #14]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d906      	bls.n	800c6dc <pbuf_copy+0xac>
 800c6ce:	4b37      	ldr	r3, [pc, #220]	@ (800c7ac <pbuf_copy+0x17c>)
 800c6d0:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c6d4:	4938      	ldr	r1, [pc, #224]	@ (800c7b8 <pbuf_copy+0x188>)
 800c6d6:	4837      	ldr	r0, [pc, #220]	@ (800c7b4 <pbuf_copy+0x184>)
 800c6d8:	f00a fd5c 	bl	8017194 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	895b      	ldrh	r3, [r3, #10]
 800c6e0:	89ba      	ldrh	r2, [r7, #12]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d906      	bls.n	800c6f4 <pbuf_copy+0xc4>
 800c6e6:	4b31      	ldr	r3, [pc, #196]	@ (800c7ac <pbuf_copy+0x17c>)
 800c6e8:	f240 32ce 	movw	r2, #974	@ 0x3ce
 800c6ec:	4933      	ldr	r1, [pc, #204]	@ (800c7bc <pbuf_copy+0x18c>)
 800c6ee:	4831      	ldr	r0, [pc, #196]	@ (800c7b4 <pbuf_copy+0x184>)
 800c6f0:	f00a fd50 	bl	8017194 <iprintf>
    if (offset_from >= p_from->len) {
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	895b      	ldrh	r3, [r3, #10]
 800c6f8:	89ba      	ldrh	r2, [r7, #12]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d304      	bcc.n	800c708 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	895b      	ldrh	r3, [r3, #10]
 800c70c:	89fa      	ldrh	r2, [r7, #14]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d114      	bne.n	800c73c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c712:	2300      	movs	r3, #0
 800c714:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10c      	bne.n	800c73c <pbuf_copy+0x10c>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <pbuf_copy+0x10c>
 800c728:	4b20      	ldr	r3, [pc, #128]	@ (800c7ac <pbuf_copy+0x17c>)
 800c72a:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c72e:	4924      	ldr	r1, [pc, #144]	@ (800c7c0 <pbuf_copy+0x190>)
 800c730:	4820      	ldr	r0, [pc, #128]	@ (800c7b4 <pbuf_copy+0x184>)
 800c732:	f00a fd2f 	bl	8017194 <iprintf>
 800c736:	f06f 030f 	mvn.w	r3, #15
 800c73a:	e032      	b.n	800c7a2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d013      	beq.n	800c76a <pbuf_copy+0x13a>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	895a      	ldrh	r2, [r3, #10]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	891b      	ldrh	r3, [r3, #8]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d10d      	bne.n	800c76a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d009      	beq.n	800c76a <pbuf_copy+0x13a>
 800c756:	4b15      	ldr	r3, [pc, #84]	@ (800c7ac <pbuf_copy+0x17c>)
 800c758:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800c75c:	4919      	ldr	r1, [pc, #100]	@ (800c7c4 <pbuf_copy+0x194>)
 800c75e:	4815      	ldr	r0, [pc, #84]	@ (800c7b4 <pbuf_copy+0x184>)
 800c760:	f00a fd18 	bl	8017194 <iprintf>
 800c764:	f06f 0305 	mvn.w	r3, #5
 800c768:	e01b      	b.n	800c7a2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d013      	beq.n	800c798 <pbuf_copy+0x168>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	895a      	ldrh	r2, [r3, #10]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	891b      	ldrh	r3, [r3, #8]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d10d      	bne.n	800c798 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d009      	beq.n	800c798 <pbuf_copy+0x168>
 800c784:	4b09      	ldr	r3, [pc, #36]	@ (800c7ac <pbuf_copy+0x17c>)
 800c786:	f240 32e2 	movw	r2, #994	@ 0x3e2
 800c78a:	490e      	ldr	r1, [pc, #56]	@ (800c7c4 <pbuf_copy+0x194>)
 800c78c:	4809      	ldr	r0, [pc, #36]	@ (800c7b4 <pbuf_copy+0x184>)
 800c78e:	f00a fd01 	bl	8017194 <iprintf>
 800c792:	f06f 0305 	mvn.w	r3, #5
 800c796:	e004      	b.n	800c7a2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f47f af67 	bne.w	800c66e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c7a0:	2300      	movs	r3, #0
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3710      	adds	r7, #16
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0801914c 	.word	0x0801914c
 800c7b0:	080194dc 	.word	0x080194dc
 800c7b4:	08019198 	.word	0x08019198
 800c7b8:	0801950c 	.word	0x0801950c
 800c7bc:	08019524 	.word	0x08019524
 800c7c0:	08019540 	.word	0x08019540
 800c7c4:	08019550 	.word	0x08019550

0800c7c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b088      	sub	sp, #32
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	80fb      	strh	r3, [r7, #6]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d108      	bne.n	800c7fa <pbuf_copy_partial+0x32>
 800c7e8:	4b30      	ldr	r3, [pc, #192]	@ (800c8ac <pbuf_copy_partial+0xe4>)
 800c7ea:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800c7ee:	4930      	ldr	r1, [pc, #192]	@ (800c8b0 <pbuf_copy_partial+0xe8>)
 800c7f0:	4830      	ldr	r0, [pc, #192]	@ (800c8b4 <pbuf_copy_partial+0xec>)
 800c7f2:	f00a fccf 	bl	8017194 <iprintf>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e054      	b.n	800c8a4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d108      	bne.n	800c812 <pbuf_copy_partial+0x4a>
 800c800:	4b2a      	ldr	r3, [pc, #168]	@ (800c8ac <pbuf_copy_partial+0xe4>)
 800c802:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800c806:	492c      	ldr	r1, [pc, #176]	@ (800c8b8 <pbuf_copy_partial+0xf0>)
 800c808:	482a      	ldr	r0, [pc, #168]	@ (800c8b4 <pbuf_copy_partial+0xec>)
 800c80a:	f00a fcc3 	bl	8017194 <iprintf>
 800c80e:	2300      	movs	r3, #0
 800c810:	e048      	b.n	800c8a4 <pbuf_copy_partial+0xdc>

  left = 0;
 800c812:	2300      	movs	r3, #0
 800c814:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <pbuf_copy_partial+0x5a>
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <pbuf_copy_partial+0x5e>
    return 0;
 800c822:	2300      	movs	r3, #0
 800c824:	e03e      	b.n	800c8a4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	61fb      	str	r3, [r7, #28]
 800c82a:	e034      	b.n	800c896 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c82c:	88bb      	ldrh	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00a      	beq.n	800c848 <pbuf_copy_partial+0x80>
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	895b      	ldrh	r3, [r3, #10]
 800c836:	88ba      	ldrh	r2, [r7, #4]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d305      	bcc.n	800c848 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	895b      	ldrh	r3, [r3, #10]
 800c840:	88ba      	ldrh	r2, [r7, #4]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	80bb      	strh	r3, [r7, #4]
 800c846:	e023      	b.n	800c890 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	895a      	ldrh	r2, [r3, #10]
 800c84c:	88bb      	ldrh	r3, [r7, #4]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c852:	8b3a      	ldrh	r2, [r7, #24]
 800c854:	88fb      	ldrh	r3, [r7, #6]
 800c856:	429a      	cmp	r2, r3
 800c858:	d901      	bls.n	800c85e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800c85e:	8b7b      	ldrh	r3, [r7, #26]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	18d0      	adds	r0, r2, r3
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	88bb      	ldrh	r3, [r7, #4]
 800c86a:	4413      	add	r3, r2
 800c86c:	8b3a      	ldrh	r2, [r7, #24]
 800c86e:	4619      	mov	r1, r3
 800c870:	f00a fed5 	bl	801761e <memcpy>
      copied_total += buf_copy_len;
 800c874:	8afa      	ldrh	r2, [r7, #22]
 800c876:	8b3b      	ldrh	r3, [r7, #24]
 800c878:	4413      	add	r3, r2
 800c87a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800c87c:	8b7a      	ldrh	r2, [r7, #26]
 800c87e:	8b3b      	ldrh	r3, [r7, #24]
 800c880:	4413      	add	r3, r2
 800c882:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800c884:	88fa      	ldrh	r2, [r7, #6]
 800c886:	8b3b      	ldrh	r3, [r7, #24]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	88fb      	ldrh	r3, [r7, #6]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d002      	beq.n	800c8a2 <pbuf_copy_partial+0xda>
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1c4      	bne.n	800c82c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800c8a2:	8afb      	ldrh	r3, [r7, #22]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3720      	adds	r7, #32
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	0801914c 	.word	0x0801914c
 800c8b0:	0801957c 	.word	0x0801957c
 800c8b4:	08019198 	.word	0x08019198
 800c8b8:	0801959c 	.word	0x0801959c

0800c8bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c8c0:	bf00      	nop
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bc80      	pop	{r7}
 800c8c6:	4770      	bx	lr

0800c8c8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c8cc:	f000 ff7c 	bl	800d7c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c8d0:	4b07      	ldr	r3, [pc, #28]	@ (800c8f0 <tcp_tmr+0x28>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <tcp_tmr+0x28>)
 800c8da:	701a      	strb	r2, [r3, #0]
 800c8dc:	4b04      	ldr	r3, [pc, #16]	@ (800c8f0 <tcp_tmr+0x28>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d001      	beq.n	800c8ec <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c8e8:	f000 fcaa 	bl	800d240 <tcp_slowtmr>
  }
}
 800c8ec:	bf00      	nop
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20009889 	.word	0x20009889

0800c8f4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	e00a      	b.n	800c91a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d102      	bne.n	800c914 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2200      	movs	r2, #0
 800c912:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	60fb      	str	r3, [r7, #12]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1f1      	bne.n	800c904 <tcp_remove_listener+0x10>
      }
   }
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	bc80      	pop	{r7}
 800c92a:	4770      	bx	lr

0800c92c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d105      	bne.n	800c946 <tcp_listen_closed+0x1a>
 800c93a:	4b13      	ldr	r3, [pc, #76]	@ (800c988 <tcp_listen_closed+0x5c>)
 800c93c:	22c0      	movs	r2, #192	@ 0xc0
 800c93e:	4913      	ldr	r1, [pc, #76]	@ (800c98c <tcp_listen_closed+0x60>)
 800c940:	4813      	ldr	r0, [pc, #76]	@ (800c990 <tcp_listen_closed+0x64>)
 800c942:	f00a fc27 	bl	8017194 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	7d1b      	ldrb	r3, [r3, #20]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d005      	beq.n	800c95a <tcp_listen_closed+0x2e>
 800c94e:	4b0e      	ldr	r3, [pc, #56]	@ (800c988 <tcp_listen_closed+0x5c>)
 800c950:	22c1      	movs	r2, #193	@ 0xc1
 800c952:	4910      	ldr	r1, [pc, #64]	@ (800c994 <tcp_listen_closed+0x68>)
 800c954:	480e      	ldr	r0, [pc, #56]	@ (800c990 <tcp_listen_closed+0x64>)
 800c956:	f00a fc1d 	bl	8017194 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c95a:	2301      	movs	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	e00b      	b.n	800c978 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800c960:	4a0d      	ldr	r2, [pc, #52]	@ (800c998 <tcp_listen_closed+0x6c>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	6879      	ldr	r1, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7ff ffc1 	bl	800c8f4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	3301      	adds	r3, #1
 800c976:	60fb      	str	r3, [r7, #12]
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d9f0      	bls.n	800c960 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c97e:	bf00      	nop
 800c980:	bf00      	nop
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	080196d0 	.word	0x080196d0
 800c98c:	08019700 	.word	0x08019700
 800c990:	0801970c 	.word	0x0801970c
 800c994:	08019734 	.word	0x08019734
 800c998:	0801ac90 	.word	0x0801ac90

0800c99c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c99c:	b5b0      	push	{r4, r5, r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af02      	add	r7, sp, #8
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c9a8:	78fb      	ldrb	r3, [r7, #3]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d075      	beq.n	800ca9a <tcp_close_shutdown+0xfe>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	7d1b      	ldrb	r3, [r3, #20]
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d003      	beq.n	800c9be <tcp_close_shutdown+0x22>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ba:	2b07      	cmp	r3, #7
 800c9bc:	d16d      	bne.n	800ca9a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d104      	bne.n	800c9d0 <tcp_close_shutdown+0x34>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9ca:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c9ce:	d064      	beq.n	800ca9a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7e9b      	ldrb	r3, [r3, #26]
 800c9d4:	f003 0310 	and.w	r3, r3, #16
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d106      	bne.n	800c9ea <tcp_close_shutdown+0x4e>
 800c9dc:	4b5b      	ldr	r3, [pc, #364]	@ (800cb4c <tcp_close_shutdown+0x1b0>)
 800c9de:	f240 120f 	movw	r2, #271	@ 0x10f
 800c9e2:	495b      	ldr	r1, [pc, #364]	@ (800cb50 <tcp_close_shutdown+0x1b4>)
 800c9e4:	485b      	ldr	r0, [pc, #364]	@ (800cb54 <tcp_close_shutdown+0x1b8>)
 800c9e6:	f00a fbd5 	bl	8017194 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c9f2:	687c      	ldr	r4, [r7, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	1d1d      	adds	r5, r3, #4
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	8adb      	ldrh	r3, [r3, #22]
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	8b12      	ldrh	r2, [r2, #24]
 800ca00:	9201      	str	r2, [sp, #4]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	462b      	mov	r3, r5
 800ca06:	4622      	mov	r2, r4
 800ca08:	f004 fecc 	bl	80117a4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f001 fa0d 	bl	800de2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca12:	4b51      	ldr	r3, [pc, #324]	@ (800cb58 <tcp_close_shutdown+0x1bc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d105      	bne.n	800ca28 <tcp_close_shutdown+0x8c>
 800ca1c:	4b4e      	ldr	r3, [pc, #312]	@ (800cb58 <tcp_close_shutdown+0x1bc>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68db      	ldr	r3, [r3, #12]
 800ca22:	4a4d      	ldr	r2, [pc, #308]	@ (800cb58 <tcp_close_shutdown+0x1bc>)
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	e013      	b.n	800ca50 <tcp_close_shutdown+0xb4>
 800ca28:	4b4b      	ldr	r3, [pc, #300]	@ (800cb58 <tcp_close_shutdown+0x1bc>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	e00c      	b.n	800ca4a <tcp_close_shutdown+0xae>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	687a      	ldr	r2, [r7, #4]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d104      	bne.n	800ca44 <tcp_close_shutdown+0xa8>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	68da      	ldr	r2, [r3, #12]
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	60da      	str	r2, [r3, #12]
 800ca42:	e005      	b.n	800ca50 <tcp_close_shutdown+0xb4>
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	60fb      	str	r3, [r7, #12]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d1ef      	bne.n	800ca30 <tcp_close_shutdown+0x94>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	60da      	str	r2, [r3, #12]
 800ca56:	4b41      	ldr	r3, [pc, #260]	@ (800cb5c <tcp_close_shutdown+0x1c0>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7d1b      	ldrb	r3, [r3, #20]
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d10c      	bne.n	800ca7e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	220a      	movs	r2, #10
 800ca68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ca6a:	4b3d      	ldr	r3, [pc, #244]	@ (800cb60 <tcp_close_shutdown+0x1c4>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	60da      	str	r2, [r3, #12]
 800ca72:	4a3b      	ldr	r2, [pc, #236]	@ (800cb60 <tcp_close_shutdown+0x1c4>)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6013      	str	r3, [r2, #0]
 800ca78:	f005 f8dc 	bl	8011c34 <tcp_timer_needed>
 800ca7c:	e00b      	b.n	800ca96 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800ca7e:	4b39      	ldr	r3, [pc, #228]	@ (800cb64 <tcp_close_shutdown+0x1c8>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d102      	bne.n	800ca8e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ca88:	f003 fd2e 	bl	80104e8 <tcp_trigger_input_pcb_close>
 800ca8c:	e003      	b.n	800ca96 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ca8e:	6879      	ldr	r1, [r7, #4]
 800ca90:	2001      	movs	r0, #1
 800ca92:	f7fe fef7 	bl	800b884 <memp_free>
        }
      }
      return ERR_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	e053      	b.n	800cb42 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	7d1b      	ldrb	r3, [r3, #20]
 800ca9e:	2b02      	cmp	r3, #2
 800caa0:	d03d      	beq.n	800cb1e <tcp_close_shutdown+0x182>
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	dc47      	bgt.n	800cb36 <tcp_close_shutdown+0x19a>
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d002      	beq.n	800cab0 <tcp_close_shutdown+0x114>
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d02b      	beq.n	800cb06 <tcp_close_shutdown+0x16a>
 800caae:	e042      	b.n	800cb36 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8adb      	ldrh	r3, [r3, #22]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d021      	beq.n	800cafc <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cab8:	4b2b      	ldr	r3, [pc, #172]	@ (800cb68 <tcp_close_shutdown+0x1cc>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d105      	bne.n	800cace <tcp_close_shutdown+0x132>
 800cac2:	4b29      	ldr	r3, [pc, #164]	@ (800cb68 <tcp_close_shutdown+0x1cc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	4a27      	ldr	r2, [pc, #156]	@ (800cb68 <tcp_close_shutdown+0x1cc>)
 800caca:	6013      	str	r3, [r2, #0]
 800cacc:	e013      	b.n	800caf6 <tcp_close_shutdown+0x15a>
 800cace:	4b26      	ldr	r3, [pc, #152]	@ (800cb68 <tcp_close_shutdown+0x1cc>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60bb      	str	r3, [r7, #8]
 800cad4:	e00c      	b.n	800caf0 <tcp_close_shutdown+0x154>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d104      	bne.n	800caea <tcp_close_shutdown+0x14e>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	68da      	ldr	r2, [r3, #12]
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	60da      	str	r2, [r3, #12]
 800cae8:	e005      	b.n	800caf6 <tcp_close_shutdown+0x15a>
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	60bb      	str	r3, [r7, #8]
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1ef      	bne.n	800cad6 <tcp_close_shutdown+0x13a>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800cafc:	6879      	ldr	r1, [r7, #4]
 800cafe:	2001      	movs	r0, #1
 800cb00:	f7fe fec0 	bl	800b884 <memp_free>
    break;
 800cb04:	e01c      	b.n	800cb40 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f7ff ff10 	bl	800c92c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	4817      	ldr	r0, [pc, #92]	@ (800cb6c <tcp_close_shutdown+0x1d0>)
 800cb10:	f001 f9ce 	bl	800deb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	2002      	movs	r0, #2
 800cb18:	f7fe feb4 	bl	800b884 <memp_free>
    break;
 800cb1c:	e010      	b.n	800cb40 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	480d      	ldr	r0, [pc, #52]	@ (800cb58 <tcp_close_shutdown+0x1bc>)
 800cb22:	f001 f9c5 	bl	800deb0 <tcp_pcb_remove>
 800cb26:	4b0d      	ldr	r3, [pc, #52]	@ (800cb5c <tcp_close_shutdown+0x1c0>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	2001      	movs	r0, #1
 800cb30:	f7fe fea8 	bl	800b884 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800cb34:	e004      	b.n	800cb40 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 f81a 	bl	800cb70 <tcp_close_shutdown_fin>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	e000      	b.n	800cb42 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bdb0      	pop	{r4, r5, r7, pc}
 800cb4a:	bf00      	nop
 800cb4c:	080196d0 	.word	0x080196d0
 800cb50:	0801974c 	.word	0x0801974c
 800cb54:	0801970c 	.word	0x0801970c
 800cb58:	20009880 	.word	0x20009880
 800cb5c:	20009888 	.word	0x20009888
 800cb60:	20009884 	.word	0x20009884
 800cb64:	200098c0 	.word	0x200098c0
 800cb68:	20009878 	.word	0x20009878
 800cb6c:	2000987c 	.word	0x2000987c

0800cb70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b084      	sub	sp, #16
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d106      	bne.n	800cb8c <tcp_close_shutdown_fin+0x1c>
 800cb7e:	4b2e      	ldr	r3, [pc, #184]	@ (800cc38 <tcp_close_shutdown_fin+0xc8>)
 800cb80:	f240 124d 	movw	r2, #333	@ 0x14d
 800cb84:	492d      	ldr	r1, [pc, #180]	@ (800cc3c <tcp_close_shutdown_fin+0xcc>)
 800cb86:	482e      	ldr	r0, [pc, #184]	@ (800cc40 <tcp_close_shutdown_fin+0xd0>)
 800cb88:	f00a fb04 	bl	8017194 <iprintf>

  switch (pcb->state) {
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7d1b      	ldrb	r3, [r3, #20]
 800cb90:	2b07      	cmp	r3, #7
 800cb92:	d020      	beq.n	800cbd6 <tcp_close_shutdown_fin+0x66>
 800cb94:	2b07      	cmp	r3, #7
 800cb96:	dc2b      	bgt.n	800cbf0 <tcp_close_shutdown_fin+0x80>
 800cb98:	2b03      	cmp	r3, #3
 800cb9a:	d002      	beq.n	800cba2 <tcp_close_shutdown_fin+0x32>
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d00d      	beq.n	800cbbc <tcp_close_shutdown_fin+0x4c>
 800cba0:	e026      	b.n	800cbf0 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f003 fd2a 	bl	80105fc <tcp_send_fin>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cbac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d11f      	bne.n	800cbf4 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2205      	movs	r2, #5
 800cbb8:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cbba:	e01b      	b.n	800cbf4 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f003 fd1d 	bl	80105fc <tcp_send_fin>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cbc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d114      	bne.n	800cbf8 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2205      	movs	r2, #5
 800cbd2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cbd4:	e010      	b.n	800cbf8 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f003 fd10 	bl	80105fc <tcp_send_fin>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cbe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d109      	bne.n	800cbfc <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2209      	movs	r2, #9
 800cbec:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cbee:	e005      	b.n	800cbfc <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	e01c      	b.n	800cc2e <tcp_close_shutdown_fin+0xbe>
    break;
 800cbf4:	bf00      	nop
 800cbf6:	e002      	b.n	800cbfe <tcp_close_shutdown_fin+0x8e>
    break;
 800cbf8:	bf00      	nop
 800cbfa:	e000      	b.n	800cbfe <tcp_close_shutdown_fin+0x8e>
    break;
 800cbfc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d103      	bne.n	800cc0e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f004 fb48 	bl	801129c <tcp_output>
 800cc0c:	e00d      	b.n	800cc2a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc16:	d108      	bne.n	800cc2a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	7e9b      	ldrb	r3, [r3, #26]
 800cc1c:	f043 0308 	orr.w	r3, r3, #8
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cc26:	2300      	movs	r3, #0
 800cc28:	e001      	b.n	800cc2e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cc2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	080196d0 	.word	0x080196d0
 800cc3c:	08019700 	.word	0x08019700
 800cc40:	0801970c 	.word	0x0801970c

0800cc44 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7d1b      	ldrb	r3, [r3, #20]
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d006      	beq.n	800cc62 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	7e9b      	ldrb	r3, [r3, #26]
 800cc58:	f043 0310 	orr.w	r3, r3, #16
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cc62:	2101      	movs	r1, #1
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff fe99 	bl	800c99c <tcp_close_shutdown>
 800cc6a:	4603      	mov	r3, r0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3708      	adds	r7, #8
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	7d1b      	ldrb	r3, [r3, #20]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d102      	bne.n	800cc8e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800cc88:	f06f 030a 	mvn.w	r3, #10
 800cc8c:	e036      	b.n	800ccfc <tcp_shutdown+0x88>
  }
  if (shut_rx) {
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01b      	beq.n	800cccc <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	7e9b      	ldrb	r3, [r3, #26]
 800cc98:	f043 0310 	orr.w	r3, r3, #16
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800cca8:	2101      	movs	r1, #1
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f7ff fe76 	bl	800c99c <tcp_close_shutdown>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	e023      	b.n	800ccfc <tcp_shutdown+0x88>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d007      	beq.n	800cccc <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7ff fb77 	bl	800c3b4 <pbuf_free>
      pcb->refused_data = NULL;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d013      	beq.n	800ccfa <tcp_shutdown+0x86>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	7d1b      	ldrb	r3, [r3, #20]
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	dc02      	bgt.n	800cce0 <tcp_shutdown+0x6c>
 800ccda:	2b03      	cmp	r3, #3
 800ccdc:	da02      	bge.n	800cce4 <tcp_shutdown+0x70>
 800ccde:	e009      	b.n	800ccf4 <tcp_shutdown+0x80>
 800cce0:	2b07      	cmp	r3, #7
 800cce2:	d107      	bne.n	800ccf4 <tcp_shutdown+0x80>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	4619      	mov	r1, r3
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7ff fe56 	bl	800c99c <tcp_close_shutdown>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	e003      	b.n	800ccfc <tcp_shutdown+0x88>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800ccf4:	f06f 030a 	mvn.w	r3, #10
 800ccf8:	e000      	b.n	800ccfc <tcp_shutdown+0x88>
    }
  }
  return ERR_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b08c      	sub	sp, #48	@ 0x30
 800cd08:	af02      	add	r7, sp, #8
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	7d1b      	ldrb	r3, [r3, #20]
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d106      	bne.n	800cd24 <tcp_abandon+0x20>
 800cd16:	4b4d      	ldr	r3, [pc, #308]	@ (800ce4c <tcp_abandon+0x148>)
 800cd18:	f240 12df 	movw	r2, #479	@ 0x1df
 800cd1c:	494c      	ldr	r1, [pc, #304]	@ (800ce50 <tcp_abandon+0x14c>)
 800cd1e:	484d      	ldr	r0, [pc, #308]	@ (800ce54 <tcp_abandon+0x150>)
 800cd20:	f00a fa38 	bl	8017194 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	7d1b      	ldrb	r3, [r3, #20]
 800cd28:	2b0a      	cmp	r3, #10
 800cd2a:	d108      	bne.n	800cd3e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	484a      	ldr	r0, [pc, #296]	@ (800ce58 <tcp_abandon+0x154>)
 800cd30:	f001 f8be 	bl	800deb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800cd34:	6879      	ldr	r1, [r7, #4]
 800cd36:	2001      	movs	r0, #1
 800cd38:	f7fe fda4 	bl	800b884 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800cd3c:	e081      	b.n	800ce42 <tcp_abandon+0x13e>
    int send_rst = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd50:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd58:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	7d1b      	ldrb	r3, [r3, #20]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d126      	bne.n	800cdb6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	8adb      	ldrh	r3, [r3, #22]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d02e      	beq.n	800cdce <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd70:	4b3a      	ldr	r3, [pc, #232]	@ (800ce5c <tcp_abandon+0x158>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d105      	bne.n	800cd86 <tcp_abandon+0x82>
 800cd7a:	4b38      	ldr	r3, [pc, #224]	@ (800ce5c <tcp_abandon+0x158>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	4a36      	ldr	r2, [pc, #216]	@ (800ce5c <tcp_abandon+0x158>)
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	e013      	b.n	800cdae <tcp_abandon+0xaa>
 800cd86:	4b35      	ldr	r3, [pc, #212]	@ (800ce5c <tcp_abandon+0x158>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	61fb      	str	r3, [r7, #28]
 800cd8c:	e00c      	b.n	800cda8 <tcp_abandon+0xa4>
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d104      	bne.n	800cda2 <tcp_abandon+0x9e>
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	68da      	ldr	r2, [r3, #12]
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	60da      	str	r2, [r3, #12]
 800cda0:	e005      	b.n	800cdae <tcp_abandon+0xaa>
 800cda2:	69fb      	ldr	r3, [r7, #28]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	61fb      	str	r3, [r7, #28]
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1ef      	bne.n	800cd8e <tcp_abandon+0x8a>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	60da      	str	r2, [r3, #12]
 800cdb4:	e00b      	b.n	800cdce <tcp_abandon+0xca>
      send_rst = reset;
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	8adb      	ldrh	r3, [r3, #22]
 800cdbe:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	4827      	ldr	r0, [pc, #156]	@ (800ce60 <tcp_abandon+0x15c>)
 800cdc4:	f001 f874 	bl	800deb0 <tcp_pcb_remove>
 800cdc8:	4b26      	ldr	r3, [pc, #152]	@ (800ce64 <tcp_abandon+0x160>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d004      	beq.n	800cde0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 fdc1 	bl	800d962 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d004      	beq.n	800cdf2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 fdb8 	bl	800d962 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 fdaf 	bl	800d962 <tcp_segs_free>
    if (send_rst) {
 800ce04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00c      	beq.n	800ce24 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ce0a:	687a      	ldr	r2, [r7, #4]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	1d19      	adds	r1, r3, #4
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8b1b      	ldrh	r3, [r3, #24]
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ce18:	9300      	str	r3, [sp, #0]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	6979      	ldr	r1, [r7, #20]
 800ce1e:	69b8      	ldr	r0, [r7, #24]
 800ce20:	f004 fcc0 	bl	80117a4 <tcp_rst>
    last_state = pcb->state;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	7d1b      	ldrb	r3, [r3, #20]
 800ce28:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	f7fe fd29 	bl	800b884 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <tcp_abandon+0x13e>
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	f06f 010c 	mvn.w	r1, #12
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	4798      	blx	r3
}
 800ce42:	bf00      	nop
 800ce44:	3728      	adds	r7, #40	@ 0x28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	080196d0 	.word	0x080196d0
 800ce50:	08019768 	.word	0x08019768
 800ce54:	0801970c 	.word	0x0801970c
 800ce58:	20009884 	.word	0x20009884
 800ce5c:	20009878 	.word	0x20009878
 800ce60:	20009880 	.word	0x20009880
 800ce64:	20009888 	.word	0x20009888

0800ce68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ce70:	2101      	movs	r1, #1
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7ff ff46 	bl	800cd04 <tcp_abandon>
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ce90:	4413      	add	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ce9c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800cea0:	bf28      	it	cs
 800cea2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800cea6:	b292      	uxth	r2, r2
 800cea8:	4413      	add	r3, r2
 800ceaa:	68fa      	ldr	r2, [r7, #12]
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	db08      	blt.n	800cec4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	1ad3      	subs	r3, r2, r3
 800cec2:	e020      	b.n	800cf06 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	dd03      	ble.n	800ceda <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ced8:	e014      	b.n	800cf04 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ceec:	d306      	bcc.n	800cefc <tcp_update_rcv_ann_wnd+0x7c>
 800ceee:	4b08      	ldr	r3, [pc, #32]	@ (800cf10 <tcp_update_rcv_ann_wnd+0x90>)
 800cef0:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800cef4:	4907      	ldr	r1, [pc, #28]	@ (800cf14 <tcp_update_rcv_ann_wnd+0x94>)
 800cef6:	4808      	ldr	r0, [pc, #32]	@ (800cf18 <tcp_update_rcv_ann_wnd+0x98>)
 800cef8:	f00a f94c 	bl	8017194 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800cf04:	2300      	movs	r3, #0
  }
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	080196d0 	.word	0x080196d0
 800cf14:	080197e8 	.word	0x080197e8
 800cf18:	0801970c 	.word	0x0801970c

0800cf1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	460b      	mov	r3, r1
 800cf26:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	7d1b      	ldrb	r3, [r3, #20]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d106      	bne.n	800cf3e <tcp_recved+0x22>
 800cf30:	4b23      	ldr	r3, [pc, #140]	@ (800cfc0 <tcp_recved+0xa4>)
 800cf32:	f240 321f 	movw	r2, #799	@ 0x31f
 800cf36:	4923      	ldr	r1, [pc, #140]	@ (800cfc4 <tcp_recved+0xa8>)
 800cf38:	4823      	ldr	r0, [pc, #140]	@ (800cfc8 <tcp_recved+0xac>)
 800cf3a:	f00a f92b 	bl	8017194 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf42:	887b      	ldrh	r3, [r7, #2]
 800cf44:	4413      	add	r3, r2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf50:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cf54:	d904      	bls.n	800cf60 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cf5c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cf5e:	e017      	b.n	800cf90 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d113      	bne.n	800cf90 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	7d1b      	ldrb	r3, [r3, #20]
 800cf6c:	2b07      	cmp	r3, #7
 800cf6e:	d003      	beq.n	800cf78 <tcp_recved+0x5c>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7d1b      	ldrb	r3, [r3, #20]
 800cf74:	2b09      	cmp	r3, #9
 800cf76:	d104      	bne.n	800cf82 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cf7e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cf80:	e006      	b.n	800cf90 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800cf82:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc0 <tcp_recved+0xa4>)
 800cf84:	f240 322d 	movw	r2, #813	@ 0x32d
 800cf88:	4910      	ldr	r1, [pc, #64]	@ (800cfcc <tcp_recved+0xb0>)
 800cf8a:	480f      	ldr	r0, [pc, #60]	@ (800cfc8 <tcp_recved+0xac>)
 800cf8c:	f00a f902 	bl	8017194 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7ff ff75 	bl	800ce80 <tcp_update_rcv_ann_wnd>
 800cf96:	4603      	mov	r3, r0
 800cf98:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800cfa0:	db09      	blt.n	800cfb6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	7e9b      	ldrb	r3, [r3, #26]
 800cfa6:	f043 0302 	orr.w	r3, r3, #2
 800cfaa:	b2da      	uxtb	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f004 f973 	bl	801129c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cfb6:	bf00      	nop
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	080196d0 	.word	0x080196d0
 800cfc4:	08019804 	.word	0x08019804
 800cfc8:	0801970c 	.word	0x0801970c
 800cfcc:	0801982c 	.word	0x0801982c

0800cfd0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800cfda:	4b1d      	ldr	r3, [pc, #116]	@ (800d050 <tcp_new_port+0x80>)
 800cfdc:	881b      	ldrh	r3, [r3, #0]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	b291      	uxth	r1, r2
 800cfe2:	4a1b      	ldr	r2, [pc, #108]	@ (800d050 <tcp_new_port+0x80>)
 800cfe4:	8011      	strh	r1, [r2, #0]
 800cfe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d103      	bne.n	800cff6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cfee:	4b18      	ldr	r3, [pc, #96]	@ (800d050 <tcp_new_port+0x80>)
 800cff0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800cff4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cff6:	2300      	movs	r3, #0
 800cff8:	71fb      	strb	r3, [r7, #7]
 800cffa:	e01e      	b.n	800d03a <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cffc:	79fb      	ldrb	r3, [r7, #7]
 800cffe:	4a15      	ldr	r2, [pc, #84]	@ (800d054 <tcp_new_port+0x84>)
 800d000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	603b      	str	r3, [r7, #0]
 800d008:	e011      	b.n	800d02e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	8ada      	ldrh	r2, [r3, #22]
 800d00e:	4b10      	ldr	r3, [pc, #64]	@ (800d050 <tcp_new_port+0x80>)
 800d010:	881b      	ldrh	r3, [r3, #0]
 800d012:	429a      	cmp	r2, r3
 800d014:	d108      	bne.n	800d028 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d016:	88bb      	ldrh	r3, [r7, #4]
 800d018:	3301      	adds	r3, #1
 800d01a:	80bb      	strh	r3, [r7, #4]
 800d01c:	88bb      	ldrh	r3, [r7, #4]
 800d01e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d022:	d3da      	bcc.n	800cfda <tcp_new_port+0xa>
          return 0;
 800d024:	2300      	movs	r3, #0
 800d026:	e00d      	b.n	800d044 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	603b      	str	r3, [r7, #0]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1ea      	bne.n	800d00a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d034:	79fb      	ldrb	r3, [r7, #7]
 800d036:	3301      	adds	r3, #1
 800d038:	71fb      	strb	r3, [r7, #7]
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	2b03      	cmp	r3, #3
 800d03e:	d9dd      	bls.n	800cffc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d040:	4b03      	ldr	r3, [pc, #12]	@ (800d050 <tcp_new_port+0x80>)
 800d042:	881b      	ldrh	r3, [r3, #0]
}
 800d044:	4618      	mov	r0, r3
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	bc80      	pop	{r7}
 800d04c:	4770      	bx	lr
 800d04e:	bf00      	nop
 800d050:	20000010 	.word	0x20000010
 800d054:	0801ac90 	.word	0x0801ac90

0800d058 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b08a      	sub	sp, #40	@ 0x28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	603b      	str	r3, [r7, #0]
 800d064:	4613      	mov	r3, r2
 800d066:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d002      	beq.n	800d074 <tcp_connect+0x1c>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <tcp_connect+0x22>
    return ERR_VAL;
 800d074:	f06f 0305 	mvn.w	r3, #5
 800d078:	e0d1      	b.n	800d21e <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	7d1b      	ldrb	r3, [r3, #20]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d009      	beq.n	800d096 <tcp_connect+0x3e>
 800d082:	4b69      	ldr	r3, [pc, #420]	@ (800d228 <tcp_connect+0x1d0>)
 800d084:	f44f 725e 	mov.w	r2, #888	@ 0x378
 800d088:	4968      	ldr	r1, [pc, #416]	@ (800d22c <tcp_connect+0x1d4>)
 800d08a:	4869      	ldr	r0, [pc, #420]	@ (800d230 <tcp_connect+0x1d8>)
 800d08c:	f00a f882 	bl	8017194 <iprintf>
 800d090:	f06f 0309 	mvn.w	r3, #9
 800d094:	e0c3      	b.n	800d21e <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <tcp_connect+0x4a>
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	e000      	b.n	800d0a4 <tcp_connect+0x4c>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	88fa      	ldrh	r2, [r7, #6]
 800d0ac:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d003      	beq.n	800d0bc <tcp_connect+0x64>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d11a      	bne.n	800d0f2 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f006 fbb3 	bl	801382c <ip4_route>
 800d0c6:	6238      	str	r0, [r7, #32]
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <tcp_connect+0x7c>
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	3304      	adds	r3, #4
 800d0d2:	e000      	b.n	800d0d6 <tcp_connect+0x7e>
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <tcp_connect+0x8c>
 800d0de:	69fb      	ldr	r3, [r7, #28]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d102      	bne.n	800d0ea <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800d0e4:	f06f 0303 	mvn.w	r3, #3
 800d0e8:	e099      	b.n	800d21e <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d0ea:	69fb      	ldr	r3, [r7, #28]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	8adb      	ldrh	r3, [r3, #22]
 800d0f6:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	8adb      	ldrh	r3, [r3, #22]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10c      	bne.n	800d11a <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800d100:	f7ff ff66 	bl	800cfd0 <tcp_new_port>
 800d104:	4603      	mov	r3, r0
 800d106:	461a      	mov	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	8adb      	ldrh	r3, [r3, #22]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <tcp_connect+0xc2>
      return ERR_BUF;
 800d114:	f06f 0301 	mvn.w	r3, #1
 800d118:	e081      	b.n	800d21e <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d11a:	68f8      	ldr	r0, [r7, #12]
 800d11c:	f000 ff44 	bl	800dfa8 <tcp_next_iss>
 800d120:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	697a      	ldr	r2, [r7, #20]
 800d12c:	64da      	str	r2, [r3, #76]	@ 0x4c
  pcb->lastack = iss - 1;
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	1e5a      	subs	r2, r3, #1
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	1e5a      	subs	r2, r3, #1
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	655a      	str	r2, [r3, #84]	@ 0x54
  pcb->snd_lbb = iss - 1;
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	1e5a      	subs	r2, r3, #1
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d14c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800d164:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d16e:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	3304      	adds	r3, #4
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f000 ff2a 	bl	800dfd4 <tcp_eff_send_mss_impl>
 800d180:	4603      	mov	r3, r0
 800d182:	461a      	mov	r2, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d198:	2102      	movs	r1, #2
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f003 ff26 	bl	8010fec <tcp_enqueue_flags>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d1a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d136      	bne.n	800d21a <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2202      	movs	r2, #2
 800d1b0:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d1b2:	8b7b      	ldrh	r3, [r7, #26]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d021      	beq.n	800d1fc <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d1b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d234 <tcp_connect+0x1dc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68fa      	ldr	r2, [r7, #12]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d105      	bne.n	800d1ce <tcp_connect+0x176>
 800d1c2:	4b1c      	ldr	r3, [pc, #112]	@ (800d234 <tcp_connect+0x1dc>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	4a1a      	ldr	r2, [pc, #104]	@ (800d234 <tcp_connect+0x1dc>)
 800d1ca:	6013      	str	r3, [r2, #0]
 800d1cc:	e013      	b.n	800d1f6 <tcp_connect+0x19e>
 800d1ce:	4b19      	ldr	r3, [pc, #100]	@ (800d234 <tcp_connect+0x1dc>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1d4:	e00c      	b.n	800d1f0 <tcp_connect+0x198>
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d8:	68db      	ldr	r3, [r3, #12]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d104      	bne.n	800d1ea <tcp_connect+0x192>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	68da      	ldr	r2, [r3, #12]
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	60da      	str	r2, [r3, #12]
 800d1e8:	e005      	b.n	800d1f6 <tcp_connect+0x19e>
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d1ef      	bne.n	800d1d6 <tcp_connect+0x17e>
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d1fc:	4b0e      	ldr	r3, [pc, #56]	@ (800d238 <tcp_connect+0x1e0>)
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	60da      	str	r2, [r3, #12]
 800d204:	4a0c      	ldr	r2, [pc, #48]	@ (800d238 <tcp_connect+0x1e0>)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6013      	str	r3, [r2, #0]
 800d20a:	f004 fd13 	bl	8011c34 <tcp_timer_needed>
 800d20e:	4b0b      	ldr	r3, [pc, #44]	@ (800d23c <tcp_connect+0x1e4>)
 800d210:	2201      	movs	r2, #1
 800d212:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f004 f841 	bl	801129c <tcp_output>
  }
  return ret;
 800d21a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3728      	adds	r7, #40	@ 0x28
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	080196d0 	.word	0x080196d0
 800d22c:	08019850 	.word	0x08019850
 800d230:	0801970c 	.word	0x0801970c
 800d234:	20009878 	.word	0x20009878
 800d238:	20009880 	.word	0x20009880
 800d23c:	20009888 	.word	0x20009888

0800d240 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d240:	b5b0      	push	{r4, r5, r7, lr}
 800d242:	b08c      	sub	sp, #48	@ 0x30
 800d244:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d24a:	4b98      	ldr	r3, [pc, #608]	@ (800d4ac <tcp_slowtmr+0x26c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3301      	adds	r3, #1
 800d250:	4a96      	ldr	r2, [pc, #600]	@ (800d4ac <tcp_slowtmr+0x26c>)
 800d252:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d254:	4b96      	ldr	r3, [pc, #600]	@ (800d4b0 <tcp_slowtmr+0x270>)
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	3301      	adds	r3, #1
 800d25a:	b2da      	uxtb	r2, r3
 800d25c:	4b94      	ldr	r3, [pc, #592]	@ (800d4b0 <tcp_slowtmr+0x270>)
 800d25e:	701a      	strb	r2, [r3, #0]
 800d260:	e000      	b.n	800d264 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800d262:	bf00      	nop
  prev = NULL;
 800d264:	2300      	movs	r3, #0
 800d266:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d268:	4b92      	ldr	r3, [pc, #584]	@ (800d4b4 <tcp_slowtmr+0x274>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800d26e:	e227      	b.n	800d6c0 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	7d1b      	ldrb	r3, [r3, #20]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d106      	bne.n	800d286 <tcp_slowtmr+0x46>
 800d278:	4b8f      	ldr	r3, [pc, #572]	@ (800d4b8 <tcp_slowtmr+0x278>)
 800d27a:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 800d27e:	498f      	ldr	r1, [pc, #572]	@ (800d4bc <tcp_slowtmr+0x27c>)
 800d280:	488f      	ldr	r0, [pc, #572]	@ (800d4c0 <tcp_slowtmr+0x280>)
 800d282:	f009 ff87 	bl	8017194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d288:	7d1b      	ldrb	r3, [r3, #20]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d106      	bne.n	800d29c <tcp_slowtmr+0x5c>
 800d28e:	4b8a      	ldr	r3, [pc, #552]	@ (800d4b8 <tcp_slowtmr+0x278>)
 800d290:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800d294:	498b      	ldr	r1, [pc, #556]	@ (800d4c4 <tcp_slowtmr+0x284>)
 800d296:	488a      	ldr	r0, [pc, #552]	@ (800d4c0 <tcp_slowtmr+0x280>)
 800d298:	f009 ff7c 	bl	8017194 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d29e:	7d1b      	ldrb	r3, [r3, #20]
 800d2a0:	2b0a      	cmp	r3, #10
 800d2a2:	d106      	bne.n	800d2b2 <tcp_slowtmr+0x72>
 800d2a4:	4b84      	ldr	r3, [pc, #528]	@ (800d4b8 <tcp_slowtmr+0x278>)
 800d2a6:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800d2aa:	4987      	ldr	r1, [pc, #540]	@ (800d4c8 <tcp_slowtmr+0x288>)
 800d2ac:	4884      	ldr	r0, [pc, #528]	@ (800d4c0 <tcp_slowtmr+0x280>)
 800d2ae:	f009 ff71 	bl	8017194 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b4:	7f5a      	ldrb	r2, [r3, #29]
 800d2b6:	4b7e      	ldr	r3, [pc, #504]	@ (800d4b0 <tcp_slowtmr+0x270>)
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d103      	bne.n	800d2c6 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 800d2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800d2c4:	e1fc      	b.n	800d6c0 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 800d2c6:	4b7a      	ldr	r3, [pc, #488]	@ (800d4b0 <tcp_slowtmr+0x270>)
 800d2c8:	781a      	ldrb	r2, [r3, #0]
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2cc:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d8:	7d1b      	ldrb	r3, [r3, #20]
 800d2da:	2b02      	cmp	r3, #2
 800d2dc:	d108      	bne.n	800d2f0 <tcp_slowtmr+0xb0>
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2e4:	2b05      	cmp	r3, #5
 800d2e6:	d903      	bls.n	800d2f0 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 800d2e8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	77fb      	strb	r3, [r7, #31]
 800d2ee:	e0a2      	b.n	800d436 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d2f6:	2b0b      	cmp	r3, #11
 800d2f8:	d903      	bls.n	800d302 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 800d2fa:	7ffb      	ldrb	r3, [r7, #31]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	77fb      	strb	r3, [r7, #31]
 800d300:	e099      	b.n	800d436 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d032      	beq.n	800d372 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d312:	3b01      	subs	r3, #1
 800d314:	4a6d      	ldr	r2, [pc, #436]	@ (800d4cc <tcp_slowtmr+0x28c>)
 800d316:	5cd3      	ldrb	r3, [r2, r3]
 800d318:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d320:	7cfa      	ldrb	r2, [r7, #19]
 800d322:	429a      	cmp	r2, r3
 800d324:	d907      	bls.n	800d336 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 800d326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d328:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d32c:	3301      	adds	r3, #1
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d332:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800d336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d338:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800d33c:	7cfa      	ldrb	r2, [r7, #19]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d879      	bhi.n	800d436 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d342:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d344:	f004 fbb5 	bl	8011ab2 <tcp_zero_window_probe>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d173      	bne.n	800d436 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 800d34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d350:	2200      	movs	r2, #0
 800d352:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d358:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d35c:	2b06      	cmp	r3, #6
 800d35e:	d86a      	bhi.n	800d436 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 800d360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d362:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d366:	3301      	adds	r3, #1
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800d370:	e061      	b.n	800d436 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 800d372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d374:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d378:	2b00      	cmp	r3, #0
 800d37a:	db08      	blt.n	800d38e <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 800d37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d382:	b29b      	uxth	r3, r3
 800d384:	3301      	adds	r3, #1
 800d386:	b29b      	uxth	r3, r3
 800d388:	b21a      	sxth	r2, r3
 800d38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38c:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d390:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d392:	2b00      	cmp	r3, #0
 800d394:	d04f      	beq.n	800d436 <tcp_slowtmr+0x1f6>
 800d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d398:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	db47      	blt.n	800d436 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a8:	7d1b      	ldrb	r3, [r3, #20]
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	d018      	beq.n	800d3e0 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3b4:	2b0c      	cmp	r3, #12
 800d3b6:	bf28      	it	cs
 800d3b8:	230c      	movcs	r3, #12
 800d3ba:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d3c2:	10db      	asrs	r3, r3, #3
 800d3c4:	b21b      	sxth	r3, r3
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d3ce:	4413      	add	r3, r2
 800d3d0:	7dfa      	ldrb	r2, [r7, #23]
 800d3d2:	493f      	ldr	r1, [pc, #252]	@ (800d4d0 <tcp_slowtmr+0x290>)
 800d3d4:	5c8a      	ldrb	r2, [r1, r2]
 800d3d6:	4093      	lsls	r3, r2
 800d3d8:	b21a      	sxth	r2, r3
 800d3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 800d3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d3f2:	4293      	cmp	r3, r2
 800d3f4:	bf28      	it	cs
 800d3f6:	4613      	movcs	r3, r2
 800d3f8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800d3fa:	8abb      	ldrh	r3, [r7, #20]
 800d3fc:	085b      	lsrs	r3, r3, #1
 800d3fe:	b29a      	uxth	r2, r3
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d408:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	b29b      	uxth	r3, r3
 800d414:	429a      	cmp	r2, r3
 800d416:	d206      	bcs.n	800d426 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 800d418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d41c:	005b      	lsls	r3, r3, #1
 800d41e:	b29a      	uxth	r2, r3
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 800d430:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d432:	f004 fa2d 	bl	8011890 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	7d1b      	ldrb	r3, [r3, #20]
 800d43a:	2b06      	cmp	r3, #6
 800d43c:	d10f      	bne.n	800d45e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 800d43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d440:	7e9b      	ldrb	r3, [r3, #26]
 800d442:	f003 0310 	and.w	r3, r3, #16
 800d446:	2b00      	cmp	r3, #0
 800d448:	d009      	beq.n	800d45e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d44a:	4b18      	ldr	r3, [pc, #96]	@ (800d4ac <tcp_slowtmr+0x26c>)
 800d44c:	681a      	ldr	r2, [r3, #0]
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	6a1b      	ldr	r3, [r3, #32]
 800d452:	1ad3      	subs	r3, r2, r3
 800d454:	2b28      	cmp	r3, #40	@ 0x28
 800d456:	d902      	bls.n	800d45e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 800d458:	7ffb      	ldrb	r3, [r7, #31]
 800d45a:	3301      	adds	r3, #1
 800d45c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d460:	7a1b      	ldrb	r3, [r3, #8]
 800d462:	f003 0308 	and.w	r3, r3, #8
 800d466:	2b00      	cmp	r3, #0
 800d468:	d05d      	beq.n	800d526 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 800d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d46e:	2b04      	cmp	r3, #4
 800d470:	d003      	beq.n	800d47a <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d476:	2b07      	cmp	r3, #7
 800d478:	d155      	bne.n	800d526 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d47a:	4b0c      	ldr	r3, [pc, #48]	@ (800d4ac <tcp_slowtmr+0x26c>)
 800d47c:	681a      	ldr	r2, [r3, #0]
 800d47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d480:	6a1b      	ldr	r3, [r3, #32]
 800d482:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d48a:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d48e:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d492:	4910      	ldr	r1, [pc, #64]	@ (800d4d4 <tcp_slowtmr+0x294>)
 800d494:	fba1 1303 	umull	r1, r3, r1, r3
 800d498:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d91c      	bls.n	800d4d8 <tcp_slowtmr+0x298>
        ++pcb_remove;
 800d49e:	7ffb      	ldrb	r3, [r7, #31]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d4a4:	7fbb      	ldrb	r3, [r7, #30]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	77bb      	strb	r3, [r7, #30]
 800d4aa:	e03c      	b.n	800d526 <tcp_slowtmr+0x2e6>
 800d4ac:	20009874 	.word	0x20009874
 800d4b0:	2000988a 	.word	0x2000988a
 800d4b4:	20009880 	.word	0x20009880
 800d4b8:	080196d0 	.word	0x080196d0
 800d4bc:	08019880 	.word	0x08019880
 800d4c0:	0801970c 	.word	0x0801970c
 800d4c4:	080198ac 	.word	0x080198ac
 800d4c8:	080198d8 	.word	0x080198d8
 800d4cc:	0801ac88 	.word	0x0801ac88
 800d4d0:	0801ac78 	.word	0x0801ac78
 800d4d4:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d4d8:	4b97      	ldr	r3, [pc, #604]	@ (800d738 <tcp_slowtmr+0x4f8>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4de:	6a1b      	ldr	r3, [r3, #32]
 800d4e0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800d4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ea:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	4b92      	ldr	r3, [pc, #584]	@ (800d73c <tcp_slowtmr+0x4fc>)
 800d4f2:	fb00 f303 	mul.w	r3, r0, r3
 800d4f6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d4f8:	4991      	ldr	r1, [pc, #580]	@ (800d740 <tcp_slowtmr+0x500>)
 800d4fa:	fba1 1303 	umull	r1, r3, r1, r3
 800d4fe:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d500:	429a      	cmp	r2, r3
 800d502:	d910      	bls.n	800d526 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 800d504:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d506:	f004 fa97 	bl	8011a38 <tcp_keepalive>
 800d50a:	4603      	mov	r3, r0
 800d50c:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d50e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800d51c:	3301      	adds	r3, #1
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d016      	beq.n	800d55c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d52e:	4b82      	ldr	r3, [pc, #520]	@ (800d738 <tcp_slowtmr+0x4f8>)
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	1ad2      	subs	r2, r2, r3
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d53e:	4619      	mov	r1, r3
 800d540:	460b      	mov	r3, r1
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	440b      	add	r3, r1
 800d546:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d548:	429a      	cmp	r2, r3
 800d54a:	d307      	bcc.n	800d55c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 800d54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d550:	4618      	mov	r0, r3
 800d552:	f000 fa06 	bl	800d962 <tcp_segs_free>
      pcb->ooseq = NULL;
 800d556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d558:	2200      	movs	r2, #0
 800d55a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	7d1b      	ldrb	r3, [r3, #20]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d109      	bne.n	800d578 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d564:	4b74      	ldr	r3, [pc, #464]	@ (800d738 <tcp_slowtmr+0x4f8>)
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d56a:	6a1b      	ldr	r3, [r3, #32]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	2b28      	cmp	r3, #40	@ 0x28
 800d570:	d902      	bls.n	800d578 <tcp_slowtmr+0x338>
        ++pcb_remove;
 800d572:	7ffb      	ldrb	r3, [r7, #31]
 800d574:	3301      	adds	r3, #1
 800d576:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 800d578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57a:	7d1b      	ldrb	r3, [r3, #20]
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	d109      	bne.n	800d594 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d580:	4b6d      	ldr	r3, [pc, #436]	@ (800d738 <tcp_slowtmr+0x4f8>)
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d586:	6a1b      	ldr	r3, [r3, #32]
 800d588:	1ad3      	subs	r3, r2, r3
 800d58a:	2bf0      	cmp	r3, #240	@ 0xf0
 800d58c:	d902      	bls.n	800d594 <tcp_slowtmr+0x354>
        ++pcb_remove;
 800d58e:	7ffb      	ldrb	r3, [r7, #31]
 800d590:	3301      	adds	r3, #1
 800d592:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 800d594:	7ffb      	ldrb	r3, [r7, #31]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d05d      	beq.n	800d656 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 800d59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d5a0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d5a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d5a4:	f000 fc42 	bl	800de2c <tcp_pcb_purge>
      if (prev != NULL) {
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d010      	beq.n	800d5d0 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d5ae:	4b65      	ldr	r3, [pc, #404]	@ (800d744 <tcp_slowtmr+0x504>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d106      	bne.n	800d5c6 <tcp_slowtmr+0x386>
 800d5b8:	4b63      	ldr	r3, [pc, #396]	@ (800d748 <tcp_slowtmr+0x508>)
 800d5ba:	f240 4289 	movw	r2, #1161	@ 0x489
 800d5be:	4963      	ldr	r1, [pc, #396]	@ (800d74c <tcp_slowtmr+0x50c>)
 800d5c0:	4863      	ldr	r0, [pc, #396]	@ (800d750 <tcp_slowtmr+0x510>)
 800d5c2:	f009 fde7 	bl	8017194 <iprintf>
        prev->next = pcb->next;
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	68da      	ldr	r2, [r3, #12]
 800d5ca:	6a3b      	ldr	r3, [r7, #32]
 800d5cc:	60da      	str	r2, [r3, #12]
 800d5ce:	e00f      	b.n	800d5f0 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d5d0:	4b5c      	ldr	r3, [pc, #368]	@ (800d744 <tcp_slowtmr+0x504>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d006      	beq.n	800d5e8 <tcp_slowtmr+0x3a8>
 800d5da:	4b5b      	ldr	r3, [pc, #364]	@ (800d748 <tcp_slowtmr+0x508>)
 800d5dc:	f240 428d 	movw	r2, #1165	@ 0x48d
 800d5e0:	495c      	ldr	r1, [pc, #368]	@ (800d754 <tcp_slowtmr+0x514>)
 800d5e2:	485b      	ldr	r0, [pc, #364]	@ (800d750 <tcp_slowtmr+0x510>)
 800d5e4:	f009 fdd6 	bl	8017194 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	4a55      	ldr	r2, [pc, #340]	@ (800d744 <tcp_slowtmr+0x504>)
 800d5ee:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d5f0:	7fbb      	ldrb	r3, [r7, #30]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d010      	beq.n	800d618 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d5fe:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800d600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d602:	1d1d      	adds	r5, r3, #4
 800d604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d606:	8adb      	ldrh	r3, [r3, #22]
 800d608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d60a:	8b12      	ldrh	r2, [r2, #24]
 800d60c:	9201      	str	r2, [sp, #4]
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	462b      	mov	r3, r5
 800d612:	4622      	mov	r2, r4
 800d614:	f004 f8c6 	bl	80117a4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d61a:	691b      	ldr	r3, [r3, #16]
 800d61c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	7d1b      	ldrb	r3, [r3, #20]
 800d622:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d626:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	2001      	movs	r0, #1
 800d632:	f7fe f927 	bl	800b884 <memp_free>
      tcp_active_pcbs_changed = 0;
 800d636:	4b48      	ldr	r3, [pc, #288]	@ (800d758 <tcp_slowtmr+0x518>)
 800d638:	2200      	movs	r2, #0
 800d63a:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d004      	beq.n	800d64c <tcp_slowtmr+0x40c>
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f06f 010c 	mvn.w	r1, #12
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d64c:	4b42      	ldr	r3, [pc, #264]	@ (800d758 <tcp_slowtmr+0x518>)
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d035      	beq.n	800d6c0 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 800d654:	e606      	b.n	800d264 <tcp_slowtmr+0x24>
      prev = pcb;
 800d656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d658:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	7edb      	ldrb	r3, [r3, #27]
 800d664:	3301      	adds	r3, #1
 800d666:	b2da      	uxtb	r2, r3
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	7eda      	ldrb	r2, [r3, #27]
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	7f1b      	ldrb	r3, [r3, #28]
 800d674:	429a      	cmp	r2, r3
 800d676:	d323      	bcc.n	800d6c0 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	2200      	movs	r2, #0
 800d67c:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 800d67e:	4b36      	ldr	r3, [pc, #216]	@ (800d758 <tcp_slowtmr+0x518>)
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <tcp_slowtmr+0x464>
 800d68e:	6a3b      	ldr	r3, [r7, #32]
 800d690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d694:	6a3a      	ldr	r2, [r7, #32]
 800d696:	6912      	ldr	r2, [r2, #16]
 800d698:	6a39      	ldr	r1, [r7, #32]
 800d69a:	4610      	mov	r0, r2
 800d69c:	4798      	blx	r3
 800d69e:	4603      	mov	r3, r0
 800d6a0:	777b      	strb	r3, [r7, #29]
 800d6a2:	e001      	b.n	800d6a8 <tcp_slowtmr+0x468>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d6a8:	4b2b      	ldr	r3, [pc, #172]	@ (800d758 <tcp_slowtmr+0x518>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f47f add8 	bne.w	800d262 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d6b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d102      	bne.n	800d6c0 <tcp_slowtmr+0x480>
          tcp_output(prev);
 800d6ba:	6a38      	ldr	r0, [r7, #32]
 800d6bc:	f003 fdee 	bl	801129c <tcp_output>
  while (pcb != NULL) {
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f47f add4 	bne.w	800d270 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d6cc:	4b23      	ldr	r3, [pc, #140]	@ (800d75c <tcp_slowtmr+0x51c>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800d6d2:	e068      	b.n	800d7a6 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d6:	7d1b      	ldrb	r3, [r3, #20]
 800d6d8:	2b0a      	cmp	r3, #10
 800d6da:	d006      	beq.n	800d6ea <tcp_slowtmr+0x4aa>
 800d6dc:	4b1a      	ldr	r3, [pc, #104]	@ (800d748 <tcp_slowtmr+0x508>)
 800d6de:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800d6e2:	491f      	ldr	r1, [pc, #124]	@ (800d760 <tcp_slowtmr+0x520>)
 800d6e4:	481a      	ldr	r0, [pc, #104]	@ (800d750 <tcp_slowtmr+0x510>)
 800d6e6:	f009 fd55 	bl	8017194 <iprintf>
    pcb_remove = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d6ee:	4b12      	ldr	r3, [pc, #72]	@ (800d738 <tcp_slowtmr+0x4f8>)
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	1ad3      	subs	r3, r2, r3
 800d6f8:	2bf0      	cmp	r3, #240	@ 0xf0
 800d6fa:	d902      	bls.n	800d702 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 800d6fc:	7ffb      	ldrb	r3, [r7, #31]
 800d6fe:	3301      	adds	r3, #1
 800d700:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d702:	7ffb      	ldrb	r3, [r7, #31]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d049      	beq.n	800d79c <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d708:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d70a:	f000 fb8f 	bl	800de2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d70e:	6a3b      	ldr	r3, [r7, #32]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d029      	beq.n	800d768 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d714:	4b11      	ldr	r3, [pc, #68]	@ (800d75c <tcp_slowtmr+0x51c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d106      	bne.n	800d72c <tcp_slowtmr+0x4ec>
 800d71e:	4b0a      	ldr	r3, [pc, #40]	@ (800d748 <tcp_slowtmr+0x508>)
 800d720:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 800d724:	490f      	ldr	r1, [pc, #60]	@ (800d764 <tcp_slowtmr+0x524>)
 800d726:	480a      	ldr	r0, [pc, #40]	@ (800d750 <tcp_slowtmr+0x510>)
 800d728:	f009 fd34 	bl	8017194 <iprintf>
        prev->next = pcb->next;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	60da      	str	r2, [r3, #12]
 800d734:	e028      	b.n	800d788 <tcp_slowtmr+0x548>
 800d736:	bf00      	nop
 800d738:	20009874 	.word	0x20009874
 800d73c:	000124f8 	.word	0x000124f8
 800d740:	10624dd3 	.word	0x10624dd3
 800d744:	20009880 	.word	0x20009880
 800d748:	080196d0 	.word	0x080196d0
 800d74c:	08019908 	.word	0x08019908
 800d750:	0801970c 	.word	0x0801970c
 800d754:	08019934 	.word	0x08019934
 800d758:	20009888 	.word	0x20009888
 800d75c:	20009884 	.word	0x20009884
 800d760:	08019960 	.word	0x08019960
 800d764:	08019990 	.word	0x08019990
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d768:	4b13      	ldr	r3, [pc, #76]	@ (800d7b8 <tcp_slowtmr+0x578>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d76e:	429a      	cmp	r2, r3
 800d770:	d006      	beq.n	800d780 <tcp_slowtmr+0x540>
 800d772:	4b12      	ldr	r3, [pc, #72]	@ (800d7bc <tcp_slowtmr+0x57c>)
 800d774:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 800d778:	4911      	ldr	r1, [pc, #68]	@ (800d7c0 <tcp_slowtmr+0x580>)
 800d77a:	4812      	ldr	r0, [pc, #72]	@ (800d7c4 <tcp_slowtmr+0x584>)
 800d77c:	f009 fd0a 	bl	8017194 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	4a0c      	ldr	r2, [pc, #48]	@ (800d7b8 <tcp_slowtmr+0x578>)
 800d786:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800d78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d792:	69b9      	ldr	r1, [r7, #24]
 800d794:	2001      	movs	r0, #1
 800d796:	f7fe f875 	bl	800b884 <memp_free>
 800d79a:	e004      	b.n	800d7a6 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 800d79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d193      	bne.n	800d6d4 <tcp_slowtmr+0x494>
    }
  }
}
 800d7ac:	bf00      	nop
 800d7ae:	bf00      	nop
 800d7b0:	3728      	adds	r7, #40	@ 0x28
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20009884 	.word	0x20009884
 800d7bc:	080196d0 	.word	0x080196d0
 800d7c0:	080199b8 	.word	0x080199b8
 800d7c4:	0801970c 	.word	0x0801970c

0800d7c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d7ce:	4b2d      	ldr	r3, [pc, #180]	@ (800d884 <tcp_fasttmr+0xbc>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	4b2b      	ldr	r3, [pc, #172]	@ (800d884 <tcp_fasttmr+0xbc>)
 800d7d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d7da:	4b2b      	ldr	r3, [pc, #172]	@ (800d888 <tcp_fasttmr+0xc0>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d7e0:	e048      	b.n	800d874 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	7f5a      	ldrb	r2, [r3, #29]
 800d7e6:	4b27      	ldr	r3, [pc, #156]	@ (800d884 <tcp_fasttmr+0xbc>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d03f      	beq.n	800d86e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d7ee:	4b25      	ldr	r3, [pc, #148]	@ (800d884 <tcp_fasttmr+0xbc>)
 800d7f0:	781a      	ldrb	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	7e9b      	ldrb	r3, [r3, #26]
 800d7fa:	f003 0301 	and.w	r3, r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d010      	beq.n	800d824 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	7e9b      	ldrb	r3, [r3, #26]
 800d806:	f043 0302 	orr.w	r3, r3, #2
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f003 fd43 	bl	801129c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7e9b      	ldrb	r3, [r3, #26]
 800d81a:	f023 0303 	bic.w	r3, r3, #3
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	7e9b      	ldrb	r3, [r3, #26]
 800d828:	f003 0308 	and.w	r3, r3, #8
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d009      	beq.n	800d844 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	7e9b      	ldrb	r3, [r3, #26]
 800d834:	f023 0308 	bic.w	r3, r3, #8
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f7ff f996 	bl	800cb70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d00a      	beq.n	800d868 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d852:	4b0e      	ldr	r3, [pc, #56]	@ (800d88c <tcp_fasttmr+0xc4>)
 800d854:	2200      	movs	r2, #0
 800d856:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 f819 	bl	800d890 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d85e:	4b0b      	ldr	r3, [pc, #44]	@ (800d88c <tcp_fasttmr+0xc4>)
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d000      	beq.n	800d868 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d866:	e7b8      	b.n	800d7da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	e002      	b.n	800d874 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1b3      	bne.n	800d7e2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d87a:	bf00      	nop
 800d87c:	bf00      	nop
 800d87e:	3708      	adds	r7, #8
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}
 800d884:	2000988a 	.word	0x2000988a
 800d888:	20009880 	.word	0x20009880
 800d88c:	20009888 	.word	0x20009888

0800d890 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d890:	b590      	push	{r4, r7, lr}
 800d892:	b085      	sub	sp, #20
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d89c:	7b5b      	ldrb	r3, [r3, #13]
 800d89e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8a4:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00b      	beq.n	800d8ce <tcp_process_refused_data+0x3e>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6918      	ldr	r0, [r3, #16]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	68ba      	ldr	r2, [r7, #8]
 800d8c4:	6879      	ldr	r1, [r7, #4]
 800d8c6:	47a0      	blx	r4
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73fb      	strb	r3, [r7, #15]
 800d8cc:	e007      	b.n	800d8de <tcp_process_refused_data+0x4e>
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	68ba      	ldr	r2, [r7, #8]
 800d8d2:	6879      	ldr	r1, [r7, #4]
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f000 f88d 	bl	800d9f4 <tcp_recv_null>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d8de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d12a      	bne.n	800d93c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800d8e6:	7bbb      	ldrb	r3, [r7, #14]
 800d8e8:	f003 0320 	and.w	r3, r3, #32
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d033      	beq.n	800d958 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d8f8:	d005      	beq.n	800d906 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8fe:	3301      	adds	r3, #1
 800d900:	b29a      	uxth	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00b      	beq.n	800d928 <tcp_process_refused_data+0x98>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6918      	ldr	r0, [r3, #16]
 800d91a:	2300      	movs	r3, #0
 800d91c:	2200      	movs	r2, #0
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	47a0      	blx	r4
 800d922:	4603      	mov	r3, r0
 800d924:	73fb      	strb	r3, [r7, #15]
 800d926:	e001      	b.n	800d92c <tcp_process_refused_data+0x9c>
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d930:	f113 0f0d 	cmn.w	r3, #13
 800d934:	d110      	bne.n	800d958 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800d936:	f06f 030c 	mvn.w	r3, #12
 800d93a:	e00e      	b.n	800d95a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800d93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d940:	f113 0f0d 	cmn.w	r3, #13
 800d944:	d102      	bne.n	800d94c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d946:	f06f 030c 	mvn.w	r3, #12
 800d94a:	e006      	b.n	800d95a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800d952:	f06f 0304 	mvn.w	r3, #4
 800d956:	e000      	b.n	800d95a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3714      	adds	r7, #20
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd90      	pop	{r4, r7, pc}

0800d962 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d962:	b580      	push	{r7, lr}
 800d964:	b084      	sub	sp, #16
 800d966:	af00      	add	r7, sp, #0
 800d968:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d96a:	e007      	b.n	800d97c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f000 f80a 	bl	800d98c <tcp_seg_free>
    seg = next;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d1f4      	bne.n	800d96c <tcp_segs_free+0xa>
  }
}
 800d982:	bf00      	nop
 800d984:	bf00      	nop
 800d986:	3710      	adds	r7, #16
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00c      	beq.n	800d9b4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d004      	beq.n	800d9ac <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fd04 	bl	800c3b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	2003      	movs	r0, #3
 800d9b0:	f7fd ff68 	bl	800b884 <memp_free>
  }
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b084      	sub	sp, #16
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d9c4:	2003      	movs	r0, #3
 800d9c6:	f7fd ff0b 	bl	800b7e0 <memp_malloc>
 800d9ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <tcp_seg_copy+0x1a>
    return NULL;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e00a      	b.n	800d9ec <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d9d6:	2210      	movs	r2, #16
 800d9d8:	6879      	ldr	r1, [r7, #4]
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f009 fe1f 	bl	801761e <memcpy>
  pbuf_ref(cseg->p);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7fe fd95 	bl	800c514 <pbuf_ref>
  return cseg;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3710      	adds	r7, #16
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d009      	beq.n	800da1c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	891b      	ldrh	r3, [r3, #8]
 800da0c:	4619      	mov	r1, r3
 800da0e:	68b8      	ldr	r0, [r7, #8]
 800da10:	f7ff fa84 	bl	800cf1c <tcp_recved>
    pbuf_free(p);
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7fe fccd 	bl	800c3b4 <pbuf_free>
 800da1a:	e008      	b.n	800da2e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800da1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d104      	bne.n	800da2e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800da24:	68b8      	ldr	r0, [r7, #8]
 800da26:	f7ff f90d 	bl	800cc44 <tcp_close>
 800da2a:	4603      	mov	r3, r0
 800da2c:	e000      	b.n	800da30 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800da2e:	2300      	movs	r3, #0
}
 800da30:	4618      	mov	r0, r3
 800da32:	3710      	adds	r7, #16
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}

0800da38 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	4603      	mov	r3, r0
 800da40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800da42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da46:	2b00      	cmp	r3, #0
 800da48:	db01      	blt.n	800da4e <tcp_kill_prio+0x16>
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	e000      	b.n	800da50 <tcp_kill_prio+0x18>
 800da4e:	237f      	movs	r3, #127	@ 0x7f
 800da50:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800da52:	2300      	movs	r3, #0
 800da54:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da56:	2300      	movs	r3, #0
 800da58:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da5a:	4b16      	ldr	r3, [pc, #88]	@ (800dab4 <tcp_kill_prio+0x7c>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	617b      	str	r3, [r7, #20]
 800da60:	e01a      	b.n	800da98 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	7d5b      	ldrb	r3, [r3, #21]
 800da66:	7afa      	ldrb	r2, [r7, #11]
 800da68:	429a      	cmp	r2, r3
 800da6a:	d312      	bcc.n	800da92 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800da6c:	4b12      	ldr	r3, [pc, #72]	@ (800dab8 <tcp_kill_prio+0x80>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	6a1b      	ldr	r3, [r3, #32]
 800da74:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800da76:	68fa      	ldr	r2, [r7, #12]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d80a      	bhi.n	800da92 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800da7c:	4b0e      	ldr	r3, [pc, #56]	@ (800dab8 <tcp_kill_prio+0x80>)
 800da7e:	681a      	ldr	r2, [r3, #0]
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	6a1b      	ldr	r3, [r3, #32]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	7d5b      	ldrb	r3, [r3, #21]
 800da90:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e1      	bne.n	800da62 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d002      	beq.n	800daaa <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800daa4:	6938      	ldr	r0, [r7, #16]
 800daa6:	f7ff f9df 	bl	800ce68 <tcp_abort>
  }
}
 800daaa:	bf00      	nop
 800daac:	3718      	adds	r7, #24
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	20009880 	.word	0x20009880
 800dab8:	20009874 	.word	0x20009874

0800dabc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	2b08      	cmp	r3, #8
 800daca:	d009      	beq.n	800dae0 <tcp_kill_state+0x24>
 800dacc:	79fb      	ldrb	r3, [r7, #7]
 800dace:	2b09      	cmp	r3, #9
 800dad0:	d006      	beq.n	800dae0 <tcp_kill_state+0x24>
 800dad2:	4b1a      	ldr	r3, [pc, #104]	@ (800db3c <tcp_kill_state+0x80>)
 800dad4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800dad8:	4919      	ldr	r1, [pc, #100]	@ (800db40 <tcp_kill_state+0x84>)
 800dada:	481a      	ldr	r0, [pc, #104]	@ (800db44 <tcp_kill_state+0x88>)
 800dadc:	f009 fb5a 	bl	8017194 <iprintf>

  inactivity = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dae4:	2300      	movs	r3, #0
 800dae6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae8:	4b17      	ldr	r3, [pc, #92]	@ (800db48 <tcp_kill_state+0x8c>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	617b      	str	r3, [r7, #20]
 800daee:	e017      	b.n	800db20 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	79fa      	ldrb	r2, [r7, #7]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d10f      	bne.n	800db1a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dafa:	4b14      	ldr	r3, [pc, #80]	@ (800db4c <tcp_kill_state+0x90>)
 800dafc:	681a      	ldr	r2, [r3, #0]
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	6a1b      	ldr	r3, [r3, #32]
 800db02:	1ad3      	subs	r3, r2, r3
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	429a      	cmp	r2, r3
 800db08:	d807      	bhi.n	800db1a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800db0a:	4b10      	ldr	r3, [pc, #64]	@ (800db4c <tcp_kill_state+0x90>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	617b      	str	r3, [r7, #20]
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d1e4      	bne.n	800daf0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d003      	beq.n	800db34 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800db2c:	2100      	movs	r1, #0
 800db2e:	6938      	ldr	r0, [r7, #16]
 800db30:	f7ff f8e8 	bl	800cd04 <tcp_abandon>
  }
}
 800db34:	bf00      	nop
 800db36:	3718      	adds	r7, #24
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	080196d0 	.word	0x080196d0
 800db40:	080199e0 	.word	0x080199e0
 800db44:	0801970c 	.word	0x0801970c
 800db48:	20009880 	.word	0x20009880
 800db4c:	20009874 	.word	0x20009874

0800db50 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db56:	2300      	movs	r3, #0
 800db58:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db5e:	4b12      	ldr	r3, [pc, #72]	@ (800dba8 <tcp_kill_timewait+0x58>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]
 800db64:	e012      	b.n	800db8c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db66:	4b11      	ldr	r3, [pc, #68]	@ (800dbac <tcp_kill_timewait+0x5c>)
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	1ad3      	subs	r3, r2, r3
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	429a      	cmp	r2, r3
 800db74:	d807      	bhi.n	800db86 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800db76:	4b0d      	ldr	r3, [pc, #52]	@ (800dbac <tcp_kill_timewait+0x5c>)
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	1ad3      	subs	r3, r2, r3
 800db80:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	68db      	ldr	r3, [r3, #12]
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1e9      	bne.n	800db66 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d002      	beq.n	800db9e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800db98:	68b8      	ldr	r0, [r7, #8]
 800db9a:	f7ff f965 	bl	800ce68 <tcp_abort>
  }
}
 800db9e:	bf00      	nop
 800dba0:	3710      	adds	r7, #16
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	20009884 	.word	0x20009884
 800dbac:	20009874 	.word	0x20009874

0800dbb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f7fd fe10 	bl	800b7e0 <memp_malloc>
 800dbc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d124      	bne.n	800dc12 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dbc8:	f7ff ffc2 	bl	800db50 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbcc:	2001      	movs	r0, #1
 800dbce:	f7fd fe07 	bl	800b7e0 <memp_malloc>
 800dbd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d11b      	bne.n	800dc12 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dbda:	2009      	movs	r0, #9
 800dbdc:	f7ff ff6e 	bl	800dabc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	f7fd fdfd 	bl	800b7e0 <memp_malloc>
 800dbe6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d111      	bne.n	800dc12 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dbee:	2008      	movs	r0, #8
 800dbf0:	f7ff ff64 	bl	800dabc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbf4:	2001      	movs	r0, #1
 800dbf6:	f7fd fdf3 	bl	800b7e0 <memp_malloc>
 800dbfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d107      	bne.n	800dc12 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc02:	79fb      	ldrb	r3, [r7, #7]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff ff17 	bl	800da38 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc0a:	2001      	movs	r0, #1
 800dc0c:	f7fd fde8 	bl	800b7e0 <memp_malloc>
 800dc10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d03f      	beq.n	800dc98 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dc18:	2298      	movs	r2, #152	@ 0x98
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f009 fc11 	bl	8017444 <memset>
    pcb->prio = prio;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	79fa      	ldrb	r2, [r7, #7]
 800dc26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800dc2e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dc38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	22ff      	movs	r2, #255	@ 0xff
 800dc46:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dc4e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2206      	movs	r2, #6
 800dc54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2206      	movs	r2, #6
 800dc5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dc64:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dca4 <tcp_alloc+0xf4>)
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dc76:	4b0c      	ldr	r3, [pc, #48]	@ (800dca8 <tcp_alloc+0xf8>)
 800dc78:	781a      	ldrb	r2, [r3, #0]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800dc84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	4a08      	ldr	r2, [pc, #32]	@ (800dcac <tcp_alloc+0xfc>)
 800dc8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	4a07      	ldr	r2, [pc, #28]	@ (800dcb0 <tcp_alloc+0x100>)
 800dc94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dc98:	68fb      	ldr	r3, [r7, #12]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20009874 	.word	0x20009874
 800dca8:	2000988a 	.word	0x2000988a
 800dcac:	0800d9f5 	.word	0x0800d9f5
 800dcb0:	006ddd00 	.word	0x006ddd00

0800dcb4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dcbe:	2040      	movs	r0, #64	@ 0x40
 800dcc0:	f7ff ff76 	bl	800dbb0 <tcp_alloc>
 800dcc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3710      	adds	r7, #16
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dcd0:	b480      	push	{r7}
 800dcd2:	b083      	sub	sp, #12
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
 800dcd8:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d002      	beq.n	800dce6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	683a      	ldr	r2, [r7, #0]
 800dce4:	611a      	str	r2, [r3, #16]
  }
}
 800dce6:	bf00      	nop
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bc80      	pop	{r7}
 800dcee:	4770      	bx	lr

0800dcf0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b082      	sub	sp, #8
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00e      	beq.n	800dd1e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d106      	bne.n	800dd16 <tcp_recv+0x26>
 800dd08:	4b07      	ldr	r3, [pc, #28]	@ (800dd28 <tcp_recv+0x38>)
 800dd0a:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 800dd0e:	4907      	ldr	r1, [pc, #28]	@ (800dd2c <tcp_recv+0x3c>)
 800dd10:	4807      	ldr	r0, [pc, #28]	@ (800dd30 <tcp_recv+0x40>)
 800dd12:	f009 fa3f 	bl	8017194 <iprintf>
    pcb->recv = recv;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	080196d0 	.word	0x080196d0
 800dd2c:	080199f0 	.word	0x080199f0
 800dd30:	0801970c 	.word	0x0801970c

0800dd34 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00d      	beq.n	800dd60 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d106      	bne.n	800dd5a <tcp_sent+0x26>
 800dd4c:	4b06      	ldr	r3, [pc, #24]	@ (800dd68 <tcp_sent+0x34>)
 800dd4e:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 800dd52:	4906      	ldr	r1, [pc, #24]	@ (800dd6c <tcp_sent+0x38>)
 800dd54:	4806      	ldr	r0, [pc, #24]	@ (800dd70 <tcp_sent+0x3c>)
 800dd56:	f009 fa1d 	bl	8017194 <iprintf>
    pcb->sent = sent;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 800dd60:	bf00      	nop
 800dd62:	3708      	adds	r7, #8
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	080196d0 	.word	0x080196d0
 800dd6c:	08019a18 	.word	0x08019a18
 800dd70:	0801970c 	.word	0x0801970c

0800dd74 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d00e      	beq.n	800dda2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	7d1b      	ldrb	r3, [r3, #20]
 800dd88:	2b01      	cmp	r3, #1
 800dd8a:	d106      	bne.n	800dd9a <tcp_err+0x26>
 800dd8c:	4b07      	ldr	r3, [pc, #28]	@ (800ddac <tcp_err+0x38>)
 800dd8e:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 800dd92:	4907      	ldr	r1, [pc, #28]	@ (800ddb0 <tcp_err+0x3c>)
 800dd94:	4807      	ldr	r0, [pc, #28]	@ (800ddb4 <tcp_err+0x40>)
 800dd96:	f009 f9fd 	bl	8017194 <iprintf>
    pcb->errf = err;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800dda2:	bf00      	nop
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	080196d0 	.word	0x080196d0
 800ddb0:	08019a40 	.word	0x08019a40
 800ddb4:	0801970c 	.word	0x0801970c

0800ddb8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b085      	sub	sp, #20
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d008      	beq.n	800ddda <tcp_accept+0x22>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7d1b      	ldrb	r3, [r3, #20]
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d104      	bne.n	800ddda <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	683a      	ldr	r2, [r7, #0]
 800ddd8:	619a      	str	r2, [r3, #24]
  }
}
 800ddda:	bf00      	nop
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bc80      	pop	{r7}
 800dde2:	4770      	bx	lr

0800dde4 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	4613      	mov	r3, r2
 800ddf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	7d1b      	ldrb	r3, [r3, #20]
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d106      	bne.n	800de08 <tcp_poll+0x24>
 800ddfa:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <tcp_poll+0x3c>)
 800ddfc:	f240 7203 	movw	r2, #1795	@ 0x703
 800de00:	4908      	ldr	r1, [pc, #32]	@ (800de24 <tcp_poll+0x40>)
 800de02:	4809      	ldr	r0, [pc, #36]	@ (800de28 <tcp_poll+0x44>)
 800de04:	f009 f9c6 	bl	8017194 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68ba      	ldr	r2, [r7, #8]
 800de0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	79fa      	ldrb	r2, [r7, #7]
 800de14:	771a      	strb	r2, [r3, #28]
}
 800de16:	bf00      	nop
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	080196d0 	.word	0x080196d0
 800de24:	08019a68 	.word	0x08019a68
 800de28:	0801970c 	.word	0x0801970c

0800de2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7d1b      	ldrb	r3, [r3, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d034      	beq.n	800dea6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800de40:	2b0a      	cmp	r3, #10
 800de42:	d030      	beq.n	800dea6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d02c      	beq.n	800dea6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe faab 	bl	800c3b4 <pbuf_free>
      pcb->refused_data = NULL;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fd7a 	bl	800d962 <tcp_segs_free>
    pcb->ooseq = NULL;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de7a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fd6e 	bl	800d962 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7ff fd69 	bl	800d962 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2200      	movs	r2, #0
 800de94:	669a      	str	r2, [r3, #104]	@ 0x68
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800dea6:	bf00      	nop
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
	...

0800deb0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d105      	bne.n	800ded0 <tcp_pcb_remove+0x20>
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68da      	ldr	r2, [r3, #12]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	e013      	b.n	800def8 <tcp_pcb_remove+0x48>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	e00c      	b.n	800def2 <tcp_pcb_remove+0x42>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d104      	bne.n	800deec <tcp_pcb_remove+0x3c>
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	68da      	ldr	r2, [r3, #12]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	60da      	str	r2, [r3, #12]
 800deea:	e005      	b.n	800def8 <tcp_pcb_remove+0x48>
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	60fb      	str	r3, [r7, #12]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1ef      	bne.n	800ded8 <tcp_pcb_remove+0x28>
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	2200      	movs	r2, #0
 800defc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800defe:	6838      	ldr	r0, [r7, #0]
 800df00:	f7ff ff94 	bl	800de2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	7d1b      	ldrb	r3, [r3, #20]
 800df08:	2b0a      	cmp	r3, #10
 800df0a:	d013      	beq.n	800df34 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800df10:	2b01      	cmp	r3, #1
 800df12:	d00f      	beq.n	800df34 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	7e9b      	ldrb	r3, [r3, #26]
 800df18:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d009      	beq.n	800df34 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	7e9b      	ldrb	r3, [r3, #26]
 800df24:	f043 0302 	orr.w	r3, r3, #2
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800df2e:	6838      	ldr	r0, [r7, #0]
 800df30:	f003 f9b4 	bl	801129c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	7d1b      	ldrb	r3, [r3, #20]
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d020      	beq.n	800df7e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800df40:	2b00      	cmp	r3, #0
 800df42:	d006      	beq.n	800df52 <tcp_pcb_remove+0xa2>
 800df44:	4b13      	ldr	r3, [pc, #76]	@ (800df94 <tcp_pcb_remove+0xe4>)
 800df46:	f240 7253 	movw	r2, #1875	@ 0x753
 800df4a:	4913      	ldr	r1, [pc, #76]	@ (800df98 <tcp_pcb_remove+0xe8>)
 800df4c:	4813      	ldr	r0, [pc, #76]	@ (800df9c <tcp_pcb_remove+0xec>)
 800df4e:	f009 f921 	bl	8017194 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <tcp_pcb_remove+0xb8>
 800df5a:	4b0e      	ldr	r3, [pc, #56]	@ (800df94 <tcp_pcb_remove+0xe4>)
 800df5c:	f240 7254 	movw	r2, #1876	@ 0x754
 800df60:	490f      	ldr	r1, [pc, #60]	@ (800dfa0 <tcp_pcb_remove+0xf0>)
 800df62:	480e      	ldr	r0, [pc, #56]	@ (800df9c <tcp_pcb_remove+0xec>)
 800df64:	f009 f916 	bl	8017194 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d006      	beq.n	800df7e <tcp_pcb_remove+0xce>
 800df70:	4b08      	ldr	r3, [pc, #32]	@ (800df94 <tcp_pcb_remove+0xe4>)
 800df72:	f240 7256 	movw	r2, #1878	@ 0x756
 800df76:	490b      	ldr	r1, [pc, #44]	@ (800dfa4 <tcp_pcb_remove+0xf4>)
 800df78:	4808      	ldr	r0, [pc, #32]	@ (800df9c <tcp_pcb_remove+0xec>)
 800df7a:	f009 f90b 	bl	8017194 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	2200      	movs	r2, #0
 800df82:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	2200      	movs	r2, #0
 800df88:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	080196d0 	.word	0x080196d0
 800df98:	08019a88 	.word	0x08019a88
 800df9c:	0801970c 	.word	0x0801970c
 800dfa0:	08019aa0 	.word	0x08019aa0
 800dfa4:	08019abc 	.word	0x08019abc

0800dfa8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dfb0:	4b06      	ldr	r3, [pc, #24]	@ (800dfcc <tcp_next_iss+0x24>)
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	4b06      	ldr	r3, [pc, #24]	@ (800dfd0 <tcp_next_iss+0x28>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	4413      	add	r3, r2
 800dfba:	4a04      	ldr	r2, [pc, #16]	@ (800dfcc <tcp_next_iss+0x24>)
 800dfbc:	6013      	str	r3, [r2, #0]
  return iss;
 800dfbe:	4b03      	ldr	r3, [pc, #12]	@ (800dfcc <tcp_next_iss+0x24>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bc80      	pop	{r7}
 800dfca:	4770      	bx	lr
 800dfcc:	20000014 	.word	0x20000014
 800dfd0:	20009874 	.word	0x20009874

0800dfd4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	4603      	mov	r3, r0
 800dfdc:	6039      	str	r1, [r7, #0]
 800dfde:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800dfe0:	6838      	ldr	r0, [r7, #0]
 800dfe2:	f005 fc23 	bl	801382c <ip4_route>
 800dfe6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	e010      	b.n	800e014 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dff6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dff8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d008      	beq.n	800e012 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e000:	897b      	ldrh	r3, [r7, #10]
 800e002:	3b28      	subs	r3, #40	@ 0x28
 800e004:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e006:	893a      	ldrh	r2, [r7, #8]
 800e008:	88fb      	ldrh	r3, [r7, #6]
 800e00a:	4293      	cmp	r3, r2
 800e00c:	bf28      	it	cs
 800e00e:	4613      	movcs	r3, r2
 800e010:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e012:	88fb      	ldrh	r3, [r7, #6]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e02a:	e011      	b.n	800e050 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d108      	bne.n	800e04a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e03e:	68f8      	ldr	r0, [r7, #12]
 800e040:	f7fe ff12 	bl	800ce68 <tcp_abort>
      pcb = next;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	60fb      	str	r3, [r7, #12]
 800e048:	e002      	b.n	800e050 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1ea      	bne.n	800e02c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e056:	bf00      	nop
 800e058:	bf00      	nop
 800e05a:	3710      	adds	r7, #16
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}

0800e060 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d02c      	beq.n	800e0ca <tcp_netif_ip_addr_changed+0x6a>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d028      	beq.n	800e0ca <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e078:	4b16      	ldr	r3, [pc, #88]	@ (800e0d4 <tcp_netif_ip_addr_changed+0x74>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4619      	mov	r1, r3
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f7ff ffcc 	bl	800e01c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e084:	4b14      	ldr	r3, [pc, #80]	@ (800e0d8 <tcp_netif_ip_addr_changed+0x78>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff ffc6 	bl	800e01c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d019      	beq.n	800e0ca <tcp_netif_ip_addr_changed+0x6a>
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d015      	beq.n	800e0ca <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e09e:	4b0f      	ldr	r3, [pc, #60]	@ (800e0dc <tcp_netif_ip_addr_changed+0x7c>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	60fb      	str	r3, [r7, #12]
 800e0a4:	e00e      	b.n	800e0c4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d103      	bne.n	800e0c0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1ed      	bne.n	800e0a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e0ca:	bf00      	nop
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop
 800e0d4:	20009880 	.word	0x20009880
 800e0d8:	20009878 	.word	0x20009878
 800e0dc:	2000987c 	.word	0x2000987c

0800e0e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b08b      	sub	sp, #44	@ 0x2c
 800e0e4:	af02      	add	r7, sp, #8
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	4a81      	ldr	r2, [pc, #516]	@ (800e2f4 <tcp_input+0x214>)
 800e0f0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	895b      	ldrh	r3, [r3, #10]
 800e0f6:	2b13      	cmp	r3, #19
 800e0f8:	f240 8396 	bls.w	800e828 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e0fc:	4b7e      	ldr	r3, [pc, #504]	@ (800e2f8 <tcp_input+0x218>)
 800e0fe:	695b      	ldr	r3, [r3, #20]
 800e100:	4a7d      	ldr	r2, [pc, #500]	@ (800e2f8 <tcp_input+0x218>)
 800e102:	6812      	ldr	r2, [r2, #0]
 800e104:	4611      	mov	r1, r2
 800e106:	4618      	mov	r0, r3
 800e108:	f005 fe0a 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 800e10c:	4603      	mov	r3, r0
 800e10e:	2b00      	cmp	r3, #0
 800e110:	f040 838c 	bne.w	800e82c <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e114:	4b78      	ldr	r3, [pc, #480]	@ (800e2f8 <tcp_input+0x218>)
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e11c:	2be0      	cmp	r3, #224	@ 0xe0
 800e11e:	f000 8385 	beq.w	800e82c <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e122:	4b74      	ldr	r3, [pc, #464]	@ (800e2f4 <tcp_input+0x214>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	899b      	ldrh	r3, [r3, #12]
 800e128:	b29b      	uxth	r3, r3
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fc ff6c 	bl	800b008 <lwip_htons>
 800e130:	4603      	mov	r3, r0
 800e132:	0b1b      	lsrs	r3, r3, #12
 800e134:	b29b      	uxth	r3, r3
 800e136:	b2db      	uxtb	r3, r3
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e13c:	7cbb      	ldrb	r3, [r7, #18]
 800e13e:	2b13      	cmp	r3, #19
 800e140:	f240 8376 	bls.w	800e830 <tcp_input+0x750>
 800e144:	7cbb      	ldrb	r3, [r7, #18]
 800e146:	b29a      	uxth	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	891b      	ldrh	r3, [r3, #8]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	f200 836f 	bhi.w	800e830 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e152:	7cbb      	ldrb	r3, [r7, #18]
 800e154:	b29b      	uxth	r3, r3
 800e156:	3b14      	subs	r3, #20
 800e158:	b29a      	uxth	r2, r3
 800e15a:	4b68      	ldr	r3, [pc, #416]	@ (800e2fc <tcp_input+0x21c>)
 800e15c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e15e:	4b68      	ldr	r3, [pc, #416]	@ (800e300 <tcp_input+0x220>)
 800e160:	2200      	movs	r2, #0
 800e162:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	895a      	ldrh	r2, [r3, #10]
 800e168:	7cbb      	ldrb	r3, [r7, #18]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d30d      	bcc.n	800e18c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e170:	4b62      	ldr	r3, [pc, #392]	@ (800e2fc <tcp_input+0x21c>)
 800e172:	881a      	ldrh	r2, [r3, #0]
 800e174:	4b63      	ldr	r3, [pc, #396]	@ (800e304 <tcp_input+0x224>)
 800e176:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e178:	7cbb      	ldrb	r3, [r7, #18]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	425b      	negs	r3, r3
 800e17e:	b29b      	uxth	r3, r3
 800e180:	b21b      	sxth	r3, r3
 800e182:	4619      	mov	r1, r3
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7fe f8f1 	bl	800c36c <pbuf_header>
 800e18a:	e055      	b.n	800e238 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d105      	bne.n	800e1a0 <tcp_input+0xc0>
 800e194:	4b5c      	ldr	r3, [pc, #368]	@ (800e308 <tcp_input+0x228>)
 800e196:	22b2      	movs	r2, #178	@ 0xb2
 800e198:	495c      	ldr	r1, [pc, #368]	@ (800e30c <tcp_input+0x22c>)
 800e19a:	485d      	ldr	r0, [pc, #372]	@ (800e310 <tcp_input+0x230>)
 800e19c:	f008 fffa 	bl	8017194 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e1a0:	f06f 0113 	mvn.w	r1, #19
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f7fe f8e1 	bl	800c36c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	895a      	ldrh	r2, [r3, #10]
 800e1ae:	4b55      	ldr	r3, [pc, #340]	@ (800e304 <tcp_input+0x224>)
 800e1b0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e1b2:	4b52      	ldr	r3, [pc, #328]	@ (800e2fc <tcp_input+0x21c>)
 800e1b4:	881a      	ldrh	r2, [r3, #0]
 800e1b6:	4b53      	ldr	r3, [pc, #332]	@ (800e304 <tcp_input+0x224>)
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e1be:	4b51      	ldr	r3, [pc, #324]	@ (800e304 <tcp_input+0x224>)
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	425b      	negs	r3, r3
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	b21b      	sxth	r3, r3
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f7fe f8ce 	bl	800c36c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	895b      	ldrh	r3, [r3, #10]
 800e1d6:	8a3a      	ldrh	r2, [r7, #16]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	f200 832b 	bhi.w	800e834 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	4a46      	ldr	r2, [pc, #280]	@ (800e300 <tcp_input+0x220>)
 800e1e6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	8a3b      	ldrh	r3, [r7, #16]
 800e1ee:	425b      	negs	r3, r3
 800e1f0:	b29b      	uxth	r3, r3
 800e1f2:	b21b      	sxth	r3, r3
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	f7fe f8b8 	bl	800c36c <pbuf_header>
    p->tot_len -= opt2len;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	891a      	ldrh	r2, [r3, #8]
 800e200:	8a3b      	ldrh	r3, [r7, #16]
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	b29a      	uxth	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	895b      	ldrh	r3, [r3, #10]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <tcp_input+0x13e>
 800e212:	4b3d      	ldr	r3, [pc, #244]	@ (800e308 <tcp_input+0x228>)
 800e214:	22cf      	movs	r2, #207	@ 0xcf
 800e216:	493f      	ldr	r1, [pc, #252]	@ (800e314 <tcp_input+0x234>)
 800e218:	483d      	ldr	r0, [pc, #244]	@ (800e310 <tcp_input+0x230>)
 800e21a:	f008 ffbb 	bl	8017194 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	891a      	ldrh	r2, [r3, #8]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	891b      	ldrh	r3, [r3, #8]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d005      	beq.n	800e238 <tcp_input+0x158>
 800e22c:	4b36      	ldr	r3, [pc, #216]	@ (800e308 <tcp_input+0x228>)
 800e22e:	22d0      	movs	r2, #208	@ 0xd0
 800e230:	4939      	ldr	r1, [pc, #228]	@ (800e318 <tcp_input+0x238>)
 800e232:	4837      	ldr	r0, [pc, #220]	@ (800e310 <tcp_input+0x230>)
 800e234:	f008 ffae 	bl	8017194 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e238:	4b2e      	ldr	r3, [pc, #184]	@ (800e2f4 <tcp_input+0x214>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	881b      	ldrh	r3, [r3, #0]
 800e23e:	b29b      	uxth	r3, r3
 800e240:	4a2c      	ldr	r2, [pc, #176]	@ (800e2f4 <tcp_input+0x214>)
 800e242:	6814      	ldr	r4, [r2, #0]
 800e244:	4618      	mov	r0, r3
 800e246:	f7fc fedf 	bl	800b008 <lwip_htons>
 800e24a:	4603      	mov	r3, r0
 800e24c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e24e:	4b29      	ldr	r3, [pc, #164]	@ (800e2f4 <tcp_input+0x214>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	885b      	ldrh	r3, [r3, #2]
 800e254:	b29b      	uxth	r3, r3
 800e256:	4a27      	ldr	r2, [pc, #156]	@ (800e2f4 <tcp_input+0x214>)
 800e258:	6814      	ldr	r4, [r2, #0]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fc fed4 	bl	800b008 <lwip_htons>
 800e260:	4603      	mov	r3, r0
 800e262:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e264:	4b23      	ldr	r3, [pc, #140]	@ (800e2f4 <tcp_input+0x214>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	4a22      	ldr	r2, [pc, #136]	@ (800e2f4 <tcp_input+0x214>)
 800e26c:	6814      	ldr	r4, [r2, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fc fed7 	bl	800b022 <lwip_htonl>
 800e274:	4603      	mov	r3, r0
 800e276:	6063      	str	r3, [r4, #4]
 800e278:	6863      	ldr	r3, [r4, #4]
 800e27a:	4a28      	ldr	r2, [pc, #160]	@ (800e31c <tcp_input+0x23c>)
 800e27c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e27e:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f4 <tcp_input+0x214>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	4a1b      	ldr	r2, [pc, #108]	@ (800e2f4 <tcp_input+0x214>)
 800e286:	6814      	ldr	r4, [r2, #0]
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fc feca 	bl	800b022 <lwip_htonl>
 800e28e:	4603      	mov	r3, r0
 800e290:	60a3      	str	r3, [r4, #8]
 800e292:	68a3      	ldr	r3, [r4, #8]
 800e294:	4a22      	ldr	r2, [pc, #136]	@ (800e320 <tcp_input+0x240>)
 800e296:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e298:	4b16      	ldr	r3, [pc, #88]	@ (800e2f4 <tcp_input+0x214>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	89db      	ldrh	r3, [r3, #14]
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	4a14      	ldr	r2, [pc, #80]	@ (800e2f4 <tcp_input+0x214>)
 800e2a2:	6814      	ldr	r4, [r2, #0]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fc feaf 	bl	800b008 <lwip_htons>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e2ae:	4b11      	ldr	r3, [pc, #68]	@ (800e2f4 <tcp_input+0x214>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	899b      	ldrh	r3, [r3, #12]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7fc fea6 	bl	800b008 <lwip_htons>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2c4:	b2da      	uxtb	r2, r3
 800e2c6:	4b17      	ldr	r3, [pc, #92]	@ (800e324 <tcp_input+0x244>)
 800e2c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	891b      	ldrh	r3, [r3, #8]
 800e2ce:	4a15      	ldr	r2, [pc, #84]	@ (800e324 <tcp_input+0x244>)
 800e2d0:	7812      	ldrb	r2, [r2, #0]
 800e2d2:	f002 0203 	and.w	r2, r2, #3
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	bf14      	ite	ne
 800e2da:	2201      	movne	r2, #1
 800e2dc:	2200      	moveq	r2, #0
 800e2de:	b2d2      	uxtb	r2, r2
 800e2e0:	4413      	add	r3, r2
 800e2e2:	b29a      	uxth	r2, r3
 800e2e4:	4b10      	ldr	r3, [pc, #64]	@ (800e328 <tcp_input+0x248>)
 800e2e6:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800e32c <tcp_input+0x24c>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	61fb      	str	r3, [r7, #28]
 800e2f2:	e081      	b.n	800e3f8 <tcp_input+0x318>
 800e2f4:	2000989c 	.word	0x2000989c
 800e2f8:	20006104 	.word	0x20006104
 800e2fc:	200098a0 	.word	0x200098a0
 800e300:	200098a4 	.word	0x200098a4
 800e304:	200098a2 	.word	0x200098a2
 800e308:	08019ad4 	.word	0x08019ad4
 800e30c:	08019b08 	.word	0x08019b08
 800e310:	08019b18 	.word	0x08019b18
 800e314:	08019b40 	.word	0x08019b40
 800e318:	08019b4c 	.word	0x08019b4c
 800e31c:	200098ac 	.word	0x200098ac
 800e320:	200098b0 	.word	0x200098b0
 800e324:	200098b8 	.word	0x200098b8
 800e328:	200098b6 	.word	0x200098b6
 800e32c:	20009880 	.word	0x20009880
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	7d1b      	ldrb	r3, [r3, #20]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d105      	bne.n	800e344 <tcp_input+0x264>
 800e338:	4b6e      	ldr	r3, [pc, #440]	@ (800e4f4 <tcp_input+0x414>)
 800e33a:	22e2      	movs	r2, #226	@ 0xe2
 800e33c:	496e      	ldr	r1, [pc, #440]	@ (800e4f8 <tcp_input+0x418>)
 800e33e:	486f      	ldr	r0, [pc, #444]	@ (800e4fc <tcp_input+0x41c>)
 800e340:	f008 ff28 	bl	8017194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	7d1b      	ldrb	r3, [r3, #20]
 800e348:	2b0a      	cmp	r3, #10
 800e34a:	d105      	bne.n	800e358 <tcp_input+0x278>
 800e34c:	4b69      	ldr	r3, [pc, #420]	@ (800e4f4 <tcp_input+0x414>)
 800e34e:	22e3      	movs	r2, #227	@ 0xe3
 800e350:	496b      	ldr	r1, [pc, #428]	@ (800e500 <tcp_input+0x420>)
 800e352:	486a      	ldr	r0, [pc, #424]	@ (800e4fc <tcp_input+0x41c>)
 800e354:	f008 ff1e 	bl	8017194 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	7d1b      	ldrb	r3, [r3, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d105      	bne.n	800e36c <tcp_input+0x28c>
 800e360:	4b64      	ldr	r3, [pc, #400]	@ (800e4f4 <tcp_input+0x414>)
 800e362:	22e4      	movs	r2, #228	@ 0xe4
 800e364:	4967      	ldr	r1, [pc, #412]	@ (800e504 <tcp_input+0x424>)
 800e366:	4865      	ldr	r0, [pc, #404]	@ (800e4fc <tcp_input+0x41c>)
 800e368:	f008 ff14 	bl	8017194 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	8b1a      	ldrh	r2, [r3, #24]
 800e370:	4b65      	ldr	r3, [pc, #404]	@ (800e508 <tcp_input+0x428>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	b29b      	uxth	r3, r3
 800e378:	429a      	cmp	r2, r3
 800e37a:	d138      	bne.n	800e3ee <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	8ada      	ldrh	r2, [r3, #22]
 800e380:	4b61      	ldr	r3, [pc, #388]	@ (800e508 <tcp_input+0x428>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	885b      	ldrh	r3, [r3, #2]
 800e386:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e388:	429a      	cmp	r2, r3
 800e38a:	d130      	bne.n	800e3ee <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	685a      	ldr	r2, [r3, #4]
 800e390:	4b5e      	ldr	r3, [pc, #376]	@ (800e50c <tcp_input+0x42c>)
 800e392:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e394:	429a      	cmp	r2, r3
 800e396:	d12a      	bne.n	800e3ee <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	681a      	ldr	r2, [r3, #0]
 800e39c:	4b5b      	ldr	r3, [pc, #364]	@ (800e50c <tcp_input+0x42c>)
 800e39e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d124      	bne.n	800e3ee <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d105      	bne.n	800e3ba <tcp_input+0x2da>
 800e3ae:	4b51      	ldr	r3, [pc, #324]	@ (800e4f4 <tcp_input+0x414>)
 800e3b0:	22ec      	movs	r2, #236	@ 0xec
 800e3b2:	4957      	ldr	r1, [pc, #348]	@ (800e510 <tcp_input+0x430>)
 800e3b4:	4851      	ldr	r0, [pc, #324]	@ (800e4fc <tcp_input+0x41c>)
 800e3b6:	f008 feed 	bl	8017194 <iprintf>
      if (prev != NULL) {
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00a      	beq.n	800e3d6 <tcp_input+0x2f6>
        prev->next = pcb->next;
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	68da      	ldr	r2, [r3, #12]
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e3c8:	4b52      	ldr	r3, [pc, #328]	@ (800e514 <tcp_input+0x434>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e3d0:	4a50      	ldr	r2, [pc, #320]	@ (800e514 <tcp_input+0x434>)
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d10f      	bne.n	800e400 <tcp_input+0x320>
 800e3e0:	4b44      	ldr	r3, [pc, #272]	@ (800e4f4 <tcp_input+0x414>)
 800e3e2:	22f4      	movs	r2, #244	@ 0xf4
 800e3e4:	494c      	ldr	r1, [pc, #304]	@ (800e518 <tcp_input+0x438>)
 800e3e6:	4845      	ldr	r0, [pc, #276]	@ (800e4fc <tcp_input+0x41c>)
 800e3e8:	f008 fed4 	bl	8017194 <iprintf>
      break;
 800e3ec:	e008      	b.n	800e400 <tcp_input+0x320>
    }
    prev = pcb;
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	68db      	ldr	r3, [r3, #12]
 800e3f6:	61fb      	str	r3, [r7, #28]
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d198      	bne.n	800e330 <tcp_input+0x250>
 800e3fe:	e000      	b.n	800e402 <tcp_input+0x322>
      break;
 800e400:	bf00      	nop
  }

  if (pcb == NULL) {
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	2b00      	cmp	r3, #0
 800e406:	f040 808f 	bne.w	800e528 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e40a:	4b44      	ldr	r3, [pc, #272]	@ (800e51c <tcp_input+0x43c>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	61fb      	str	r3, [r7, #28]
 800e410:	e02f      	b.n	800e472 <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	7d1b      	ldrb	r3, [r3, #20]
 800e416:	2b0a      	cmp	r3, #10
 800e418:	d005      	beq.n	800e426 <tcp_input+0x346>
 800e41a:	4b36      	ldr	r3, [pc, #216]	@ (800e4f4 <tcp_input+0x414>)
 800e41c:	22fe      	movs	r2, #254	@ 0xfe
 800e41e:	4940      	ldr	r1, [pc, #256]	@ (800e520 <tcp_input+0x440>)
 800e420:	4836      	ldr	r0, [pc, #216]	@ (800e4fc <tcp_input+0x41c>)
 800e422:	f008 feb7 	bl	8017194 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	8b1a      	ldrh	r2, [r3, #24]
 800e42a:	4b37      	ldr	r3, [pc, #220]	@ (800e508 <tcp_input+0x428>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	b29b      	uxth	r3, r3
 800e432:	429a      	cmp	r2, r3
 800e434:	d11a      	bne.n	800e46c <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	8ada      	ldrh	r2, [r3, #22]
 800e43a:	4b33      	ldr	r3, [pc, #204]	@ (800e508 <tcp_input+0x428>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	885b      	ldrh	r3, [r3, #2]
 800e440:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e442:	429a      	cmp	r2, r3
 800e444:	d112      	bne.n	800e46c <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	4b30      	ldr	r3, [pc, #192]	@ (800e50c <tcp_input+0x42c>)
 800e44c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e44e:	429a      	cmp	r2, r3
 800e450:	d10c      	bne.n	800e46c <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e452:	69fb      	ldr	r3, [r7, #28]
 800e454:	681a      	ldr	r2, [r3, #0]
 800e456:	4b2d      	ldr	r3, [pc, #180]	@ (800e50c <tcp_input+0x42c>)
 800e458:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d106      	bne.n	800e46c <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e45e:	69f8      	ldr	r0, [r7, #28]
 800e460:	f000 fb16 	bl	800ea90 <tcp_timewait_input>
        pbuf_free(p);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7fd ffa5 	bl	800c3b4 <pbuf_free>
        return;
 800e46a:	e1e9      	b.n	800e840 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	61fb      	str	r3, [r7, #28]
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d1cc      	bne.n	800e412 <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e47c:	4b29      	ldr	r3, [pc, #164]	@ (800e524 <tcp_input+0x444>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	617b      	str	r3, [r7, #20]
 800e482:	e019      	b.n	800e4b8 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	8ada      	ldrh	r2, [r3, #22]
 800e488:	4b1f      	ldr	r3, [pc, #124]	@ (800e508 <tcp_input+0x428>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	885b      	ldrh	r3, [r3, #2]
 800e48e:	b29b      	uxth	r3, r3
 800e490:	429a      	cmp	r2, r3
 800e492:	d10c      	bne.n	800e4ae <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	681a      	ldr	r2, [r3, #0]
 800e498:	4b1c      	ldr	r3, [pc, #112]	@ (800e50c <tcp_input+0x42c>)
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d00f      	beq.n	800e4c0 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00d      	beq.n	800e4c2 <tcp_input+0x3e2>
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d009      	beq.n	800e4c2 <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	617b      	str	r3, [r7, #20]
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d1e2      	bne.n	800e484 <tcp_input+0x3a4>
 800e4be:	e000      	b.n	800e4c2 <tcp_input+0x3e2>
            break;
 800e4c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d02f      	beq.n	800e528 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d00a      	beq.n	800e4e4 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	68da      	ldr	r2, [r3, #12]
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e4d6:	4b13      	ldr	r3, [pc, #76]	@ (800e524 <tcp_input+0x444>)
 800e4d8:	681a      	ldr	r2, [r3, #0]
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e4de:	4a11      	ldr	r2, [pc, #68]	@ (800e524 <tcp_input+0x444>)
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e4e4:	6978      	ldr	r0, [r7, #20]
 800e4e6:	f000 f9f3 	bl	800e8d0 <tcp_listen_input>
      pbuf_free(p);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f7fd ff62 	bl	800c3b4 <pbuf_free>
      return;
 800e4f0:	e1a6      	b.n	800e840 <tcp_input+0x760>
 800e4f2:	bf00      	nop
 800e4f4:	08019ad4 	.word	0x08019ad4
 800e4f8:	08019b6c 	.word	0x08019b6c
 800e4fc:	08019b18 	.word	0x08019b18
 800e500:	08019b94 	.word	0x08019b94
 800e504:	08019bc0 	.word	0x08019bc0
 800e508:	2000989c 	.word	0x2000989c
 800e50c:	20006104 	.word	0x20006104
 800e510:	08019be8 	.word	0x08019be8
 800e514:	20009880 	.word	0x20009880
 800e518:	08019c14 	.word	0x08019c14
 800e51c:	20009884 	.word	0x20009884
 800e520:	08019c40 	.word	0x08019c40
 800e524:	2000987c 	.word	0x2000987c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e528:	69fb      	ldr	r3, [r7, #28]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 8156 	beq.w	800e7dc <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e530:	4b94      	ldr	r3, [pc, #592]	@ (800e784 <tcp_input+0x6a4>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	891a      	ldrh	r2, [r3, #8]
 800e53a:	4b92      	ldr	r3, [pc, #584]	@ (800e784 <tcp_input+0x6a4>)
 800e53c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e53e:	4a91      	ldr	r2, [pc, #580]	@ (800e784 <tcp_input+0x6a4>)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e544:	4b90      	ldr	r3, [pc, #576]	@ (800e788 <tcp_input+0x6a8>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a8e      	ldr	r2, [pc, #568]	@ (800e784 <tcp_input+0x6a4>)
 800e54a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e54c:	4b8f      	ldr	r3, [pc, #572]	@ (800e78c <tcp_input+0x6ac>)
 800e54e:	2200      	movs	r2, #0
 800e550:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e552:	4b8f      	ldr	r3, [pc, #572]	@ (800e790 <tcp_input+0x6b0>)
 800e554:	2200      	movs	r2, #0
 800e556:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e558:	4b8e      	ldr	r3, [pc, #568]	@ (800e794 <tcp_input+0x6b4>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e55e:	4b8e      	ldr	r3, [pc, #568]	@ (800e798 <tcp_input+0x6b8>)
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	f003 0308 	and.w	r3, r3, #8
 800e566:	2b00      	cmp	r3, #0
 800e568:	d006      	beq.n	800e578 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	7b5b      	ldrb	r3, [r3, #13]
 800e56e:	f043 0301 	orr.w	r3, r3, #1
 800e572:	b2da      	uxtb	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d017      	beq.n	800e5b0 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e580:	69f8      	ldr	r0, [r7, #28]
 800e582:	f7ff f985 	bl	800d890 <tcp_process_refused_data>
 800e586:	4603      	mov	r3, r0
 800e588:	f113 0f0d 	cmn.w	r3, #13
 800e58c:	d007      	beq.n	800e59e <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00c      	beq.n	800e5b0 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e596:	4b81      	ldr	r3, [pc, #516]	@ (800e79c <tcp_input+0x6bc>)
 800e598:	881b      	ldrh	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d008      	beq.n	800e5b0 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f040 80e2 	bne.w	800e76c <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e5a8:	69f8      	ldr	r0, [r7, #28]
 800e5aa:	f002 fe1b 	bl	80111e4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e5ae:	e0dd      	b.n	800e76c <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 800e5b0:	4a7b      	ldr	r2, [pc, #492]	@ (800e7a0 <tcp_input+0x6c0>)
 800e5b2:	69fb      	ldr	r3, [r7, #28]
 800e5b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e5b6:	69f8      	ldr	r0, [r7, #28]
 800e5b8:	f000 fad2 	bl	800eb60 <tcp_process>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e5c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5c4:	f113 0f0d 	cmn.w	r3, #13
 800e5c8:	f000 80d2 	beq.w	800e770 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 800e5cc:	4b70      	ldr	r3, [pc, #448]	@ (800e790 <tcp_input+0x6b0>)
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	f003 0308 	and.w	r3, r3, #8
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d016      	beq.n	800e606 <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d008      	beq.n	800e5f4 <tcp_input+0x514>
 800e5e2:	69fb      	ldr	r3, [r7, #28]
 800e5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5e8:	69fa      	ldr	r2, [r7, #28]
 800e5ea:	6912      	ldr	r2, [r2, #16]
 800e5ec:	f06f 010d 	mvn.w	r1, #13
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5f4:	69f9      	ldr	r1, [r7, #28]
 800e5f6:	486b      	ldr	r0, [pc, #428]	@ (800e7a4 <tcp_input+0x6c4>)
 800e5f8:	f7ff fc5a 	bl	800deb0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e5fc:	69f9      	ldr	r1, [r7, #28]
 800e5fe:	2001      	movs	r0, #1
 800e600:	f7fd f940 	bl	800b884 <memp_free>
 800e604:	e0d7      	b.n	800e7b6 <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e60a:	4b62      	ldr	r3, [pc, #392]	@ (800e794 <tcp_input+0x6b4>)
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d01b      	beq.n	800e64a <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e612:	4b60      	ldr	r3, [pc, #384]	@ (800e794 <tcp_input+0x6b4>)
 800e614:	881b      	ldrh	r3, [r3, #0]
 800e616:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d009      	beq.n	800e634 <tcp_input+0x554>
 800e620:	69fb      	ldr	r3, [r7, #28]
 800e622:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e624:	69fa      	ldr	r2, [r7, #28]
 800e626:	6910      	ldr	r0, [r2, #16]
 800e628:	89fa      	ldrh	r2, [r7, #14]
 800e62a:	69f9      	ldr	r1, [r7, #28]
 800e62c:	4798      	blx	r3
 800e62e:	4603      	mov	r3, r0
 800e630:	74fb      	strb	r3, [r7, #19]
 800e632:	e001      	b.n	800e638 <tcp_input+0x558>
 800e634:	2300      	movs	r3, #0
 800e636:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e63c:	f113 0f0d 	cmn.w	r3, #13
 800e640:	f000 8098 	beq.w	800e774 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e644:	4b53      	ldr	r3, [pc, #332]	@ (800e794 <tcp_input+0x6b4>)
 800e646:	2200      	movs	r2, #0
 800e648:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e64a:	69f8      	ldr	r0, [r7, #28]
 800e64c:	f000 f90e 	bl	800e86c <tcp_input_delayed_close>
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	f040 8090 	bne.w	800e778 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e658:	4b4c      	ldr	r3, [pc, #304]	@ (800e78c <tcp_input+0x6ac>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d041      	beq.n	800e6e4 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e660:	69fb      	ldr	r3, [r7, #28]
 800e662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e664:	2b00      	cmp	r3, #0
 800e666:	d006      	beq.n	800e676 <tcp_input+0x596>
 800e668:	4b4f      	ldr	r3, [pc, #316]	@ (800e7a8 <tcp_input+0x6c8>)
 800e66a:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 800e66e:	494f      	ldr	r1, [pc, #316]	@ (800e7ac <tcp_input+0x6cc>)
 800e670:	484f      	ldr	r0, [pc, #316]	@ (800e7b0 <tcp_input+0x6d0>)
 800e672:	f008 fd8f 	bl	8017194 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	7e9b      	ldrb	r3, [r3, #26]
 800e67a:	f003 0310 	and.w	r3, r3, #16
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d008      	beq.n	800e694 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e682:	4b42      	ldr	r3, [pc, #264]	@ (800e78c <tcp_input+0x6ac>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4618      	mov	r0, r3
 800e688:	f7fd fe94 	bl	800c3b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e68c:	69f8      	ldr	r0, [r7, #28]
 800e68e:	f7fe fbeb 	bl	800ce68 <tcp_abort>
            goto aborted;
 800e692:	e090      	b.n	800e7b6 <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00c      	beq.n	800e6b8 <tcp_input+0x5d8>
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	6918      	ldr	r0, [r3, #16]
 800e6a8:	4b38      	ldr	r3, [pc, #224]	@ (800e78c <tcp_input+0x6ac>)
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	69f9      	ldr	r1, [r7, #28]
 800e6b0:	47a0      	blx	r4
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	74fb      	strb	r3, [r7, #19]
 800e6b6:	e008      	b.n	800e6ca <tcp_input+0x5ea>
 800e6b8:	4b34      	ldr	r3, [pc, #208]	@ (800e78c <tcp_input+0x6ac>)
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	2300      	movs	r3, #0
 800e6be:	69f9      	ldr	r1, [r7, #28]
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	f7ff f997 	bl	800d9f4 <tcp_recv_null>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e6ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6ce:	f113 0f0d 	cmn.w	r3, #13
 800e6d2:	d053      	beq.n	800e77c <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e6d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d003      	beq.n	800e6e4 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e6dc:	4b2b      	ldr	r3, [pc, #172]	@ (800e78c <tcp_input+0x6ac>)
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e6e4:	4b2a      	ldr	r3, [pc, #168]	@ (800e790 <tcp_input+0x6b0>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	f003 0320 	and.w	r3, r3, #32
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d030      	beq.n	800e752 <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6fc:	7b5a      	ldrb	r2, [r3, #13]
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e702:	f042 0220 	orr.w	r2, r2, #32
 800e706:	b2d2      	uxtb	r2, r2
 800e708:	735a      	strb	r2, [r3, #13]
 800e70a:	e022      	b.n	800e752 <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e710:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e714:	d005      	beq.n	800e722 <tcp_input+0x642>
              pcb->rcv_wnd++;
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e71a:	3301      	adds	r3, #1
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00b      	beq.n	800e744 <tcp_input+0x664>
 800e72c:	69fb      	ldr	r3, [r7, #28]
 800e72e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	6918      	ldr	r0, [r3, #16]
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	69f9      	ldr	r1, [r7, #28]
 800e73c:	47a0      	blx	r4
 800e73e:	4603      	mov	r3, r0
 800e740:	74fb      	strb	r3, [r7, #19]
 800e742:	e001      	b.n	800e748 <tcp_input+0x668>
 800e744:	2300      	movs	r3, #0
 800e746:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e748:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e74c:	f113 0f0d 	cmn.w	r3, #13
 800e750:	d016      	beq.n	800e780 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e752:	4b13      	ldr	r3, [pc, #76]	@ (800e7a0 <tcp_input+0x6c0>)
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e758:	69f8      	ldr	r0, [r7, #28]
 800e75a:	f000 f887 	bl	800e86c <tcp_input_delayed_close>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d127      	bne.n	800e7b4 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e764:	69f8      	ldr	r0, [r7, #28]
 800e766:	f002 fd99 	bl	801129c <tcp_output>
 800e76a:	e024      	b.n	800e7b6 <tcp_input+0x6d6>
        goto aborted;
 800e76c:	bf00      	nop
 800e76e:	e022      	b.n	800e7b6 <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e770:	bf00      	nop
 800e772:	e020      	b.n	800e7b6 <tcp_input+0x6d6>
              goto aborted;
 800e774:	bf00      	nop
 800e776:	e01e      	b.n	800e7b6 <tcp_input+0x6d6>
          goto aborted;
 800e778:	bf00      	nop
 800e77a:	e01c      	b.n	800e7b6 <tcp_input+0x6d6>
            goto aborted;
 800e77c:	bf00      	nop
 800e77e:	e01a      	b.n	800e7b6 <tcp_input+0x6d6>
              goto aborted;
 800e780:	bf00      	nop
 800e782:	e018      	b.n	800e7b6 <tcp_input+0x6d6>
 800e784:	2000988c 	.word	0x2000988c
 800e788:	2000989c 	.word	0x2000989c
 800e78c:	200098bc 	.word	0x200098bc
 800e790:	200098b9 	.word	0x200098b9
 800e794:	200098b4 	.word	0x200098b4
 800e798:	200098b8 	.word	0x200098b8
 800e79c:	200098b6 	.word	0x200098b6
 800e7a0:	200098c0 	.word	0x200098c0
 800e7a4:	20009880 	.word	0x20009880
 800e7a8:	08019ad4 	.word	0x08019ad4
 800e7ac:	08019c70 	.word	0x08019c70
 800e7b0:	08019b18 	.word	0x08019b18
          goto aborted;
 800e7b4:	bf00      	nop
    tcp_input_pcb = NULL;
 800e7b6:	4b24      	ldr	r3, [pc, #144]	@ (800e848 <tcp_input+0x768>)
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e7bc:	4b23      	ldr	r3, [pc, #140]	@ (800e84c <tcp_input+0x76c>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800e7c2:	4b23      	ldr	r3, [pc, #140]	@ (800e850 <tcp_input+0x770>)
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d039      	beq.n	800e83e <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 800e7ca:	4b21      	ldr	r3, [pc, #132]	@ (800e850 <tcp_input+0x770>)
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7fd fdf0 	bl	800c3b4 <pbuf_free>
      inseg.p = NULL;
 800e7d4:	4b1e      	ldr	r3, [pc, #120]	@ (800e850 <tcp_input+0x770>)
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e7da:	e030      	b.n	800e83e <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e7dc:	4b1d      	ldr	r3, [pc, #116]	@ (800e854 <tcp_input+0x774>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	899b      	ldrh	r3, [r3, #12]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7fc fc0f 	bl	800b008 <lwip_htons>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	f003 0304 	and.w	r3, r3, #4
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d115      	bne.n	800e820 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7f4:	4b18      	ldr	r3, [pc, #96]	@ (800e858 <tcp_input+0x778>)
 800e7f6:	6818      	ldr	r0, [r3, #0]
 800e7f8:	4b18      	ldr	r3, [pc, #96]	@ (800e85c <tcp_input+0x77c>)
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4b18      	ldr	r3, [pc, #96]	@ (800e860 <tcp_input+0x780>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e804:	4b13      	ldr	r3, [pc, #76]	@ (800e854 <tcp_input+0x774>)
 800e806:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e808:	885b      	ldrh	r3, [r3, #2]
 800e80a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e80c:	4a11      	ldr	r2, [pc, #68]	@ (800e854 <tcp_input+0x774>)
 800e80e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e810:	8812      	ldrh	r2, [r2, #0]
 800e812:	b292      	uxth	r2, r2
 800e814:	9201      	str	r2, [sp, #4]
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	4b12      	ldr	r3, [pc, #72]	@ (800e864 <tcp_input+0x784>)
 800e81a:	4a13      	ldr	r2, [pc, #76]	@ (800e868 <tcp_input+0x788>)
 800e81c:	f002 ffc2 	bl	80117a4 <tcp_rst>
    pbuf_free(p);
 800e820:	6878      	ldr	r0, [r7, #4]
 800e822:	f7fd fdc7 	bl	800c3b4 <pbuf_free>
  return;
 800e826:	e00a      	b.n	800e83e <tcp_input+0x75e>
    goto dropped;
 800e828:	bf00      	nop
 800e82a:	e004      	b.n	800e836 <tcp_input+0x756>
    goto dropped;
 800e82c:	bf00      	nop
 800e82e:	e002      	b.n	800e836 <tcp_input+0x756>
    goto dropped;
 800e830:	bf00      	nop
 800e832:	e000      	b.n	800e836 <tcp_input+0x756>
      goto dropped;
 800e834:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7fd fdbc 	bl	800c3b4 <pbuf_free>
 800e83c:	e000      	b.n	800e840 <tcp_input+0x760>
  return;
 800e83e:	bf00      	nop
}
 800e840:	3724      	adds	r7, #36	@ 0x24
 800e842:	46bd      	mov	sp, r7
 800e844:	bd90      	pop	{r4, r7, pc}
 800e846:	bf00      	nop
 800e848:	200098c0 	.word	0x200098c0
 800e84c:	200098bc 	.word	0x200098bc
 800e850:	2000988c 	.word	0x2000988c
 800e854:	2000989c 	.word	0x2000989c
 800e858:	200098b0 	.word	0x200098b0
 800e85c:	200098b6 	.word	0x200098b6
 800e860:	200098ac 	.word	0x200098ac
 800e864:	20006114 	.word	0x20006114
 800e868:	20006118 	.word	0x20006118

0800e86c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800e874:	4b14      	ldr	r3, [pc, #80]	@ (800e8c8 <tcp_input_delayed_close+0x5c>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 0310 	and.w	r3, r3, #16
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d01d      	beq.n	800e8bc <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	7e9b      	ldrb	r3, [r3, #26]
 800e884:	f003 0310 	and.w	r3, r3, #16
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d10d      	bne.n	800e8a8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e892:	2b00      	cmp	r3, #0
 800e894:	d008      	beq.n	800e8a8 <tcp_input_delayed_close+0x3c>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e89c:	687a      	ldr	r2, [r7, #4]
 800e89e:	6912      	ldr	r2, [r2, #16]
 800e8a0:	f06f 010e 	mvn.w	r1, #14
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8a8:	6879      	ldr	r1, [r7, #4]
 800e8aa:	4808      	ldr	r0, [pc, #32]	@ (800e8cc <tcp_input_delayed_close+0x60>)
 800e8ac:	f7ff fb00 	bl	800deb0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	2001      	movs	r0, #1
 800e8b4:	f7fc ffe6 	bl	800b884 <memp_free>
    return 1;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e000      	b.n	800e8be <tcp_input_delayed_close+0x52>
  }
  return 0;
 800e8bc:	2300      	movs	r3, #0
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3708      	adds	r7, #8
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	200098b9 	.word	0x200098b9
 800e8cc:	20009880 	.word	0x20009880

0800e8d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b088      	sub	sp, #32
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e8d8:	4b63      	ldr	r3, [pc, #396]	@ (800ea68 <tcp_listen_input+0x198>)
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	f003 0304 	and.w	r3, r3, #4
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f040 80bb 	bne.w	800ea5c <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e8e6:	4b60      	ldr	r3, [pc, #384]	@ (800ea68 <tcp_listen_input+0x198>)
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 0310 	and.w	r3, r3, #16
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d016      	beq.n	800e920 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8f2:	4b5e      	ldr	r3, [pc, #376]	@ (800ea6c <tcp_listen_input+0x19c>)
 800e8f4:	6818      	ldr	r0, [r3, #0]
 800e8f6:	4b5e      	ldr	r3, [pc, #376]	@ (800ea70 <tcp_listen_input+0x1a0>)
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	4b5d      	ldr	r3, [pc, #372]	@ (800ea74 <tcp_listen_input+0x1a4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e902:	4b5d      	ldr	r3, [pc, #372]	@ (800ea78 <tcp_listen_input+0x1a8>)
 800e904:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e906:	885b      	ldrh	r3, [r3, #2]
 800e908:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e90a:	4a5b      	ldr	r2, [pc, #364]	@ (800ea78 <tcp_listen_input+0x1a8>)
 800e90c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e90e:	8812      	ldrh	r2, [r2, #0]
 800e910:	b292      	uxth	r2, r2
 800e912:	9201      	str	r2, [sp, #4]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	4b59      	ldr	r3, [pc, #356]	@ (800ea7c <tcp_listen_input+0x1ac>)
 800e918:	4a59      	ldr	r2, [pc, #356]	@ (800ea80 <tcp_listen_input+0x1b0>)
 800e91a:	f002 ff43 	bl	80117a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e91e:	e09f      	b.n	800ea60 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800e920:	4b51      	ldr	r3, [pc, #324]	@ (800ea68 <tcp_listen_input+0x198>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	f003 0302 	and.w	r3, r3, #2
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 8099 	beq.w	800ea60 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	7d5b      	ldrb	r3, [r3, #21]
 800e932:	4618      	mov	r0, r3
 800e934:	f7ff f93c 	bl	800dbb0 <tcp_alloc>
 800e938:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d111      	bne.n	800e964 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00a      	beq.n	800e95e <tcp_listen_input+0x8e>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	6910      	ldr	r0, [r2, #16]
 800e950:	f04f 32ff 	mov.w	r2, #4294967295
 800e954:	2100      	movs	r1, #0
 800e956:	4798      	blx	r3
 800e958:	4603      	mov	r3, r0
 800e95a:	73bb      	strb	r3, [r7, #14]
      return;
 800e95c:	e081      	b.n	800ea62 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e95e:	23f0      	movs	r3, #240	@ 0xf0
 800e960:	73bb      	strb	r3, [r7, #14]
      return;
 800e962:	e07e      	b.n	800ea62 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e964:	4b47      	ldr	r3, [pc, #284]	@ (800ea84 <tcp_listen_input+0x1b4>)
 800e966:	695a      	ldr	r2, [r3, #20]
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e96c:	4b45      	ldr	r3, [pc, #276]	@ (800ea84 <tcp_listen_input+0x1b4>)
 800e96e:	691a      	ldr	r2, [r3, #16]
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	8ada      	ldrh	r2, [r3, #22]
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e97c:	4b3e      	ldr	r3, [pc, #248]	@ (800ea78 <tcp_listen_input+0x1a8>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	881b      	ldrh	r3, [r3, #0]
 800e982:	b29a      	uxth	r2, r3
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2203      	movs	r2, #3
 800e98c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e98e:	4b39      	ldr	r3, [pc, #228]	@ (800ea74 <tcp_listen_input+0x1a4>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e9a0:	6978      	ldr	r0, [r7, #20]
 800e9a2:	f7ff fb01 	bl	800dfa8 <tcp_next_iss>
 800e9a6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	693a      	ldr	r2, [r7, #16]
 800e9be:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e9c0:	4b2c      	ldr	r3, [pc, #176]	@ (800ea74 <tcp_listen_input+0x1a4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	1e5a      	subs	r2, r3, #1
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	691a      	ldr	r2, [r3, #16]
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	687a      	ldr	r2, [r7, #4]
 800e9d6:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7a1b      	ldrb	r3, [r3, #8]
 800e9dc:	f003 030c 	and.w	r3, r3, #12
 800e9e0:	b2da      	uxtb	r2, r3
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e9e6:	4b28      	ldr	r3, [pc, #160]	@ (800ea88 <tcp_listen_input+0x1b8>)
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	60da      	str	r2, [r3, #12]
 800e9ee:	4a26      	ldr	r2, [pc, #152]	@ (800ea88 <tcp_listen_input+0x1b8>)
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	6013      	str	r3, [r2, #0]
 800e9f4:	f003 f91e 	bl	8011c34 <tcp_timer_needed>
 800e9f8:	4b24      	ldr	r3, [pc, #144]	@ (800ea8c <tcp_listen_input+0x1bc>)
 800e9fa:	2201      	movs	r2, #1
 800e9fc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e9fe:	6978      	ldr	r0, [r7, #20]
 800ea00:	f001 fd0c 	bl	801041c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ea04:	4b1c      	ldr	r3, [pc, #112]	@ (800ea78 <tcp_listen_input+0x1a8>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	89db      	ldrh	r3, [r3, #14]
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	3304      	adds	r3, #4
 800ea26:	4619      	mov	r1, r3
 800ea28:	4610      	mov	r0, r2
 800ea2a:	f7ff fad3 	bl	800dfd4 <tcp_eff_send_mss_impl>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	461a      	mov	r2, r3
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ea36:	2112      	movs	r1, #18
 800ea38:	6978      	ldr	r0, [r7, #20]
 800ea3a:	f002 fad7 	bl	8010fec <tcp_enqueue_flags>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ea42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d004      	beq.n	800ea54 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	6978      	ldr	r0, [r7, #20]
 800ea4e:	f7fe f959 	bl	800cd04 <tcp_abandon>
      return;
 800ea52:	e006      	b.n	800ea62 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800ea54:	6978      	ldr	r0, [r7, #20]
 800ea56:	f002 fc21 	bl	801129c <tcp_output>
  return;
 800ea5a:	e001      	b.n	800ea60 <tcp_listen_input+0x190>
    return;
 800ea5c:	bf00      	nop
 800ea5e:	e000      	b.n	800ea62 <tcp_listen_input+0x192>
  return;
 800ea60:	bf00      	nop
}
 800ea62:	3718      	adds	r7, #24
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	200098b8 	.word	0x200098b8
 800ea6c:	200098b0 	.word	0x200098b0
 800ea70:	200098b6 	.word	0x200098b6
 800ea74:	200098ac 	.word	0x200098ac
 800ea78:	2000989c 	.word	0x2000989c
 800ea7c:	20006114 	.word	0x20006114
 800ea80:	20006118 	.word	0x20006118
 800ea84:	20006104 	.word	0x20006104
 800ea88:	20009880 	.word	0x20009880
 800ea8c:	20009888 	.word	0x20009888

0800ea90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af02      	add	r7, sp, #8
 800ea96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ea98:	4b29      	ldr	r3, [pc, #164]	@ (800eb40 <tcp_timewait_input+0xb0>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	f003 0304 	and.w	r3, r3, #4
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d146      	bne.n	800eb32 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eaa4:	4b26      	ldr	r3, [pc, #152]	@ (800eb40 <tcp_timewait_input+0xb0>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	f003 0302 	and.w	r3, r3, #2
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d027      	beq.n	800eb00 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eab0:	4b24      	ldr	r3, [pc, #144]	@ (800eb44 <tcp_timewait_input+0xb4>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	db2a      	blt.n	800eb14 <tcp_timewait_input+0x84>
 800eabe:	4b21      	ldr	r3, [pc, #132]	@ (800eb44 <tcp_timewait_input+0xb4>)
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eaca:	440b      	add	r3, r1
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	dc20      	bgt.n	800eb14 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ead2:	4b1d      	ldr	r3, [pc, #116]	@ (800eb48 <tcp_timewait_input+0xb8>)
 800ead4:	6818      	ldr	r0, [r3, #0]
 800ead6:	4b1d      	ldr	r3, [pc, #116]	@ (800eb4c <tcp_timewait_input+0xbc>)
 800ead8:	881b      	ldrh	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	4b19      	ldr	r3, [pc, #100]	@ (800eb44 <tcp_timewait_input+0xb4>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eae2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb50 <tcp_timewait_input+0xc0>)
 800eae4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae6:	885b      	ldrh	r3, [r3, #2]
 800eae8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eaea:	4a19      	ldr	r2, [pc, #100]	@ (800eb50 <tcp_timewait_input+0xc0>)
 800eaec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eaee:	8812      	ldrh	r2, [r2, #0]
 800eaf0:	b292      	uxth	r2, r2
 800eaf2:	9201      	str	r2, [sp, #4]
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	4b17      	ldr	r3, [pc, #92]	@ (800eb54 <tcp_timewait_input+0xc4>)
 800eaf8:	4a17      	ldr	r2, [pc, #92]	@ (800eb58 <tcp_timewait_input+0xc8>)
 800eafa:	f002 fe53 	bl	80117a4 <tcp_rst>
      return;
 800eafe:	e01b      	b.n	800eb38 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800eb00:	4b0f      	ldr	r3, [pc, #60]	@ (800eb40 <tcp_timewait_input+0xb0>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d003      	beq.n	800eb14 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eb0c:	4b13      	ldr	r3, [pc, #76]	@ (800eb5c <tcp_timewait_input+0xcc>)
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eb14:	4b0d      	ldr	r3, [pc, #52]	@ (800eb4c <tcp_timewait_input+0xbc>)
 800eb16:	881b      	ldrh	r3, [r3, #0]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00c      	beq.n	800eb36 <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7e9b      	ldrb	r3, [r3, #26]
 800eb20:	f043 0302 	orr.w	r3, r3, #2
 800eb24:	b2da      	uxtb	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f002 fbb6 	bl	801129c <tcp_output>
  }
  return;
 800eb30:	e001      	b.n	800eb36 <tcp_timewait_input+0xa6>
    return;
 800eb32:	bf00      	nop
 800eb34:	e000      	b.n	800eb38 <tcp_timewait_input+0xa8>
  return;
 800eb36:	bf00      	nop
}
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	200098b8 	.word	0x200098b8
 800eb44:	200098ac 	.word	0x200098ac
 800eb48:	200098b0 	.word	0x200098b0
 800eb4c:	200098b6 	.word	0x200098b6
 800eb50:	2000989c 	.word	0x2000989c
 800eb54:	20006114 	.word	0x20006114
 800eb58:	20006118 	.word	0x20006118
 800eb5c:	20009874 	.word	0x20009874

0800eb60 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b08a      	sub	sp, #40	@ 0x28
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800eb70:	4b93      	ldr	r3, [pc, #588]	@ (800edc0 <tcp_process+0x260>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 0304 	and.w	r3, r3, #4
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d04e      	beq.n	800ec1a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	7d1b      	ldrb	r3, [r3, #20]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d108      	bne.n	800eb96 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800eb88:	4b8e      	ldr	r3, [pc, #568]	@ (800edc4 <tcp_process+0x264>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d123      	bne.n	800ebd8 <tcp_process+0x78>
        acceptable = 1;
 800eb90:	2301      	movs	r3, #1
 800eb92:	76fb      	strb	r3, [r7, #27]
 800eb94:	e020      	b.n	800ebd8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb9a:	4b8b      	ldr	r3, [pc, #556]	@ (800edc8 <tcp_process+0x268>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	429a      	cmp	r2, r3
 800eba0:	d102      	bne.n	800eba8 <tcp_process+0x48>
        acceptable = 1;
 800eba2:	2301      	movs	r3, #1
 800eba4:	76fb      	strb	r3, [r7, #27]
 800eba6:	e017      	b.n	800ebd8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eba8:	4b87      	ldr	r3, [pc, #540]	@ (800edc8 <tcp_process+0x268>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	db10      	blt.n	800ebd8 <tcp_process+0x78>
 800ebb6:	4b84      	ldr	r3, [pc, #528]	@ (800edc8 <tcp_process+0x268>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebbe:	6879      	ldr	r1, [r7, #4]
 800ebc0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ebc2:	440b      	add	r3, r1
 800ebc4:	1ad3      	subs	r3, r2, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	dc06      	bgt.n	800ebd8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7e9b      	ldrb	r3, [r3, #26]
 800ebce:	f043 0302 	orr.w	r3, r3, #2
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ebd8:	7efb      	ldrb	r3, [r7, #27]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d01b      	beq.n	800ec16 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7d1b      	ldrb	r3, [r3, #20]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <tcp_process+0x94>
 800ebe6:	4b79      	ldr	r3, [pc, #484]	@ (800edcc <tcp_process+0x26c>)
 800ebe8:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800ebec:	4978      	ldr	r1, [pc, #480]	@ (800edd0 <tcp_process+0x270>)
 800ebee:	4879      	ldr	r0, [pc, #484]	@ (800edd4 <tcp_process+0x274>)
 800ebf0:	f008 fad0 	bl	8017194 <iprintf>
      recv_flags |= TF_RESET;
 800ebf4:	4b78      	ldr	r3, [pc, #480]	@ (800edd8 <tcp_process+0x278>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f043 0308 	orr.w	r3, r3, #8
 800ebfc:	b2da      	uxtb	r2, r3
 800ebfe:	4b76      	ldr	r3, [pc, #472]	@ (800edd8 <tcp_process+0x278>)
 800ec00:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	7e9b      	ldrb	r3, [r3, #26]
 800ec06:	f023 0301 	bic.w	r3, r3, #1
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800ec10:	f06f 030d 	mvn.w	r3, #13
 800ec14:	e348      	b.n	800f2a8 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	e346      	b.n	800f2a8 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ec1a:	4b69      	ldr	r3, [pc, #420]	@ (800edc0 <tcp_process+0x260>)
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	f003 0302 	and.w	r3, r3, #2
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d010      	beq.n	800ec48 <tcp_process+0xe8>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	7d1b      	ldrb	r3, [r3, #20]
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d00c      	beq.n	800ec48 <tcp_process+0xe8>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	7d1b      	ldrb	r3, [r3, #20]
 800ec32:	2b03      	cmp	r3, #3
 800ec34:	d008      	beq.n	800ec48 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	7e9b      	ldrb	r3, [r3, #26]
 800ec3a:	f043 0302 	orr.w	r3, r3, #2
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ec44:	2300      	movs	r3, #0
 800ec46:	e32f      	b.n	800f2a8 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	7e9b      	ldrb	r3, [r3, #26]
 800ec4c:	f003 0310 	and.w	r3, r3, #16
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d103      	bne.n	800ec5c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ec54:	4b61      	ldr	r3, [pc, #388]	@ (800eddc <tcp_process+0x27c>)
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f001 fbd9 	bl	801041c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	7d1b      	ldrb	r3, [r3, #20]
 800ec6e:	3b02      	subs	r3, #2
 800ec70:	2b07      	cmp	r3, #7
 800ec72:	f200 8309 	bhi.w	800f288 <tcp_process+0x728>
 800ec76:	a201      	add	r2, pc, #4	@ (adr r2, 800ec7c <tcp_process+0x11c>)
 800ec78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7c:	0800ec9d 	.word	0x0800ec9d
 800ec80:	0800ee93 	.word	0x0800ee93
 800ec84:	0800efeb 	.word	0x0800efeb
 800ec88:	0800f015 	.word	0x0800f015
 800ec8c:	0800f137 	.word	0x0800f137
 800ec90:	0800efeb 	.word	0x0800efeb
 800ec94:	0800f1c3 	.word	0x0800f1c3
 800ec98:	0800f253 	.word	0x0800f253
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ec9c:	4b48      	ldr	r3, [pc, #288]	@ (800edc0 <tcp_process+0x260>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f003 0310 	and.w	r3, r3, #16
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	f000 80ca 	beq.w	800ee3e <tcp_process+0x2de>
 800ecaa:	4b45      	ldr	r3, [pc, #276]	@ (800edc0 <tcp_process+0x260>)
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 80c3 	beq.w	800ee3e <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	4b41      	ldr	r3, [pc, #260]	@ (800edc4 <tcp_process+0x264>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	f040 80bb 	bne.w	800ee3e <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800ecc8:	4b3f      	ldr	r3, [pc, #252]	@ (800edc8 <tcp_process+0x268>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 800ecda:	4b3a      	ldr	r3, [pc, #232]	@ (800edc4 <tcp_process+0x264>)
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800ece2:	4b3f      	ldr	r3, [pc, #252]	@ (800ede0 <tcp_process+0x280>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	89db      	ldrh	r3, [r3, #14]
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ecfc:	4b32      	ldr	r3, [pc, #200]	@ (800edc8 <tcp_process+0x268>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	1e5a      	subs	r2, r3, #1
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2204      	movs	r2, #4
 800ed0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3304      	adds	r3, #4
 800ed14:	4619      	mov	r1, r3
 800ed16:	4610      	mov	r0, r2
 800ed18:	f7ff f95c 	bl	800dfd4 <tcp_eff_send_mss_impl>
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	461a      	mov	r2, r3
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	bf38      	it	cc
 800ed32:	461a      	movcc	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	bf28      	it	cs
 800ed3e:	4613      	movcs	r3, r2
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d106      	bne.n	800ed60 <tcp_process+0x200>
 800ed52:	4b1e      	ldr	r3, [pc, #120]	@ (800edcc <tcp_process+0x26c>)
 800ed54:	f240 321a 	movw	r2, #794	@ 0x31a
 800ed58:	4922      	ldr	r1, [pc, #136]	@ (800ede4 <tcp_process+0x284>)
 800ed5a:	481e      	ldr	r0, [pc, #120]	@ (800edd4 <tcp_process+0x274>)
 800ed5c:	f008 fa1a 	bl	8017194 <iprintf>
      --pcb->snd_queuelen;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ed66:	3b01      	subs	r3, #1
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ed74:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d111      	bne.n	800eda0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed80:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ed82:	69fb      	ldr	r3, [r7, #28]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d106      	bne.n	800ed96 <tcp_process+0x236>
 800ed88:	4b10      	ldr	r3, [pc, #64]	@ (800edcc <tcp_process+0x26c>)
 800ed8a:	f240 3222 	movw	r2, #802	@ 0x322
 800ed8e:	4916      	ldr	r1, [pc, #88]	@ (800ede8 <tcp_process+0x288>)
 800ed90:	4810      	ldr	r0, [pc, #64]	@ (800edd4 <tcp_process+0x274>)
 800ed92:	f008 f9ff 	bl	8017194 <iprintf>
        pcb->unsent = rseg->next;
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	669a      	str	r2, [r3, #104]	@ 0x68
 800ed9e:	e003      	b.n	800eda8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 800eda8:	69f8      	ldr	r0, [r7, #28]
 800edaa:	f7fe fdef 	bl	800d98c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d11a      	bne.n	800edec <tcp_process+0x28c>
        pcb->rtime = -1;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800edbc:	861a      	strh	r2, [r3, #48]	@ 0x30
 800edbe:	e01c      	b.n	800edfa <tcp_process+0x29a>
 800edc0:	200098b8 	.word	0x200098b8
 800edc4:	200098b0 	.word	0x200098b0
 800edc8:	200098ac 	.word	0x200098ac
 800edcc:	08019ad4 	.word	0x08019ad4
 800edd0:	08019c8c 	.word	0x08019c8c
 800edd4:	08019b18 	.word	0x08019b18
 800edd8:	200098b9 	.word	0x200098b9
 800eddc:	20009874 	.word	0x20009874
 800ede0:	2000989c 	.word	0x2000989c
 800ede4:	08019cac 	.word	0x08019cac
 800ede8:	08019cc4 	.word	0x08019cc4
      } else {
        pcb->rtime = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <tcp_process+0x2ba>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	6910      	ldr	r0, [r2, #16]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	6879      	ldr	r1, [r7, #4]
 800ee12:	4798      	blx	r3
 800ee14:	4603      	mov	r3, r0
 800ee16:	76bb      	strb	r3, [r7, #26]
 800ee18:	e001      	b.n	800ee1e <tcp_process+0x2be>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800ee1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee22:	f113 0f0d 	cmn.w	r3, #13
 800ee26:	d102      	bne.n	800ee2e <tcp_process+0x2ce>
        return ERR_ABRT;
 800ee28:	f06f 030c 	mvn.w	r3, #12
 800ee2c:	e23c      	b.n	800f2a8 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	7e9b      	ldrb	r3, [r3, #26]
 800ee32:	f043 0302 	orr.w	r3, r3, #2
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800ee3c:	e226      	b.n	800f28c <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800ee3e:	4b93      	ldr	r3, [pc, #588]	@ (800f08c <tcp_process+0x52c>)
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	f003 0310 	and.w	r3, r3, #16
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f000 8220 	beq.w	800f28c <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee4c:	4b90      	ldr	r3, [pc, #576]	@ (800f090 <tcp_process+0x530>)
 800ee4e:	6818      	ldr	r0, [r3, #0]
 800ee50:	4b90      	ldr	r3, [pc, #576]	@ (800f094 <tcp_process+0x534>)
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	4b90      	ldr	r3, [pc, #576]	@ (800f098 <tcp_process+0x538>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee5c:	4b8f      	ldr	r3, [pc, #572]	@ (800f09c <tcp_process+0x53c>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee60:	885b      	ldrh	r3, [r3, #2]
 800ee62:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee64:	4a8d      	ldr	r2, [pc, #564]	@ (800f09c <tcp_process+0x53c>)
 800ee66:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee68:	8812      	ldrh	r2, [r2, #0]
 800ee6a:	b292      	uxth	r2, r2
 800ee6c:	9201      	str	r2, [sp, #4]
 800ee6e:	9300      	str	r3, [sp, #0]
 800ee70:	4b8b      	ldr	r3, [pc, #556]	@ (800f0a0 <tcp_process+0x540>)
 800ee72:	4a8c      	ldr	r2, [pc, #560]	@ (800f0a4 <tcp_process+0x544>)
 800ee74:	f002 fc96 	bl	80117a4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	f200 8204 	bhi.w	800f28c <tcp_process+0x72c>
        pcb->rtime = 0;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f002 fd00 	bl	8011890 <tcp_rexmit_rto>
    break;
 800ee90:	e1fc      	b.n	800f28c <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800ee92:	4b7e      	ldr	r3, [pc, #504]	@ (800f08c <tcp_process+0x52c>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	f003 0310 	and.w	r3, r3, #16
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f000 8091 	beq.w	800efc2 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800eea0:	4b7b      	ldr	r3, [pc, #492]	@ (800f090 <tcp_process+0x530>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	3b01      	subs	r3, #1
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	db71      	blt.n	800ef94 <tcp_process+0x434>
 800eeb0:	4b77      	ldr	r3, [pc, #476]	@ (800f090 <tcp_process+0x530>)
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	dc6a      	bgt.n	800ef94 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2204      	movs	r2, #4
 800eec2:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00b      	beq.n	800eee4 <tcp_process+0x384>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d106      	bne.n	800eee4 <tcp_process+0x384>
 800eed6:	4b74      	ldr	r3, [pc, #464]	@ (800f0a8 <tcp_process+0x548>)
 800eed8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800eedc:	4973      	ldr	r1, [pc, #460]	@ (800f0ac <tcp_process+0x54c>)
 800eede:	4874      	ldr	r0, [pc, #464]	@ (800f0b0 <tcp_process+0x550>)
 800eee0:	f008 f958 	bl	8017194 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800eeec:	23fa      	movs	r3, #250	@ 0xfa
 800eeee:	76bb      	strb	r3, [r7, #26]
 800eef0:	e011      	b.n	800ef16 <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00a      	beq.n	800ef12 <tcp_process+0x3b2>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef00:	699b      	ldr	r3, [r3, #24]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	6910      	ldr	r0, [r2, #16]
 800ef06:	2200      	movs	r2, #0
 800ef08:	6879      	ldr	r1, [r7, #4]
 800ef0a:	4798      	blx	r3
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	76bb      	strb	r3, [r7, #26]
 800ef10:	e001      	b.n	800ef16 <tcp_process+0x3b6>
 800ef12:	23f0      	movs	r3, #240	@ 0xf0
 800ef14:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800ef16:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00a      	beq.n	800ef34 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800ef1e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef22:	f113 0f0d 	cmn.w	r3, #13
 800ef26:	d002      	beq.n	800ef2e <tcp_process+0x3ce>
            tcp_abort(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7fd ff9d 	bl	800ce68 <tcp_abort>
          }
          return ERR_ABRT;
 800ef2e:	f06f 030c 	mvn.w	r3, #12
 800ef32:	e1b9      	b.n	800f2a8 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f000 fa3d 	bl	800f3b4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800ef3a:	4b5e      	ldr	r3, [pc, #376]	@ (800f0b4 <tcp_process+0x554>)
 800ef3c:	881b      	ldrh	r3, [r3, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d005      	beq.n	800ef4e <tcp_process+0x3ee>
          recv_acked--;
 800ef42:	4b5c      	ldr	r3, [pc, #368]	@ (800f0b4 <tcp_process+0x554>)
 800ef44:	881b      	ldrh	r3, [r3, #0]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	4b5a      	ldr	r3, [pc, #360]	@ (800f0b4 <tcp_process+0x554>)
 800ef4c:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef52:	005b      	lsls	r3, r3, #1
 800ef54:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	bf38      	it	cc
 800ef5c:	461a      	movcc	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4293      	cmp	r3, r2
 800ef66:	bf28      	it	cs
 800ef68:	4613      	movcs	r3, r2
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ef72:	4b51      	ldr	r3, [pc, #324]	@ (800f0b8 <tcp_process+0x558>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 0320 	and.w	r3, r3, #32
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d034      	beq.n	800efe8 <tcp_process+0x488>
          tcp_ack_now(pcb);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	7e9b      	ldrb	r3, [r3, #26]
 800ef82:	f043 0302 	orr.w	r3, r3, #2
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2207      	movs	r2, #7
 800ef90:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ef92:	e029      	b.n	800efe8 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef94:	4b3e      	ldr	r3, [pc, #248]	@ (800f090 <tcp_process+0x530>)
 800ef96:	6818      	ldr	r0, [r3, #0]
 800ef98:	4b3e      	ldr	r3, [pc, #248]	@ (800f094 <tcp_process+0x534>)
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	4b3e      	ldr	r3, [pc, #248]	@ (800f098 <tcp_process+0x538>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efa4:	4b3d      	ldr	r3, [pc, #244]	@ (800f09c <tcp_process+0x53c>)
 800efa6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800efa8:	885b      	ldrh	r3, [r3, #2]
 800efaa:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efac:	4a3b      	ldr	r2, [pc, #236]	@ (800f09c <tcp_process+0x53c>)
 800efae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800efb0:	8812      	ldrh	r2, [r2, #0]
 800efb2:	b292      	uxth	r2, r2
 800efb4:	9201      	str	r2, [sp, #4]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4b39      	ldr	r3, [pc, #228]	@ (800f0a0 <tcp_process+0x540>)
 800efba:	4a3a      	ldr	r2, [pc, #232]	@ (800f0a4 <tcp_process+0x544>)
 800efbc:	f002 fbf2 	bl	80117a4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800efc0:	e166      	b.n	800f290 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800efc2:	4b32      	ldr	r3, [pc, #200]	@ (800f08c <tcp_process+0x52c>)
 800efc4:	781b      	ldrb	r3, [r3, #0]
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 8160 	beq.w	800f290 <tcp_process+0x730>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efd4:	1e5a      	subs	r2, r3, #1
 800efd6:	4b30      	ldr	r3, [pc, #192]	@ (800f098 <tcp_process+0x538>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	f040 8158 	bne.w	800f290 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f002 fc8b 	bl	80118fc <tcp_rexmit>
    break;
 800efe6:	e153      	b.n	800f290 <tcp_process+0x730>
 800efe8:	e152      	b.n	800f290 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800efea:	6878      	ldr	r0, [r7, #4]
 800efec:	f000 f9e2 	bl	800f3b4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eff0:	4b31      	ldr	r3, [pc, #196]	@ (800f0b8 <tcp_process+0x558>)
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	f003 0320 	and.w	r3, r3, #32
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 814b 	beq.w	800f294 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7e9b      	ldrb	r3, [r3, #26]
 800f002:	f043 0302 	orr.w	r3, r3, #2
 800f006:	b2da      	uxtb	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2207      	movs	r2, #7
 800f010:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f012:	e13f      	b.n	800f294 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f000 f9cd 	bl	800f3b4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f01a:	4b27      	ldr	r3, [pc, #156]	@ (800f0b8 <tcp_process+0x558>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f003 0320 	and.w	r3, r3, #32
 800f022:	2b00      	cmp	r3, #0
 800f024:	d070      	beq.n	800f108 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f026:	4b19      	ldr	r3, [pc, #100]	@ (800f08c <tcp_process+0x52c>)
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 0310 	and.w	r3, r3, #16
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d05f      	beq.n	800f0f2 <tcp_process+0x592>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f036:	4b16      	ldr	r3, [pc, #88]	@ (800f090 <tcp_process+0x530>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d159      	bne.n	800f0f2 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f042:	2b00      	cmp	r3, #0
 800f044:	d155      	bne.n	800f0f2 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	7e9b      	ldrb	r3, [r3, #26]
 800f04a:	f043 0302 	orr.w	r3, r3, #2
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f7fe fee9 	bl	800de2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f05a:	4b18      	ldr	r3, [pc, #96]	@ (800f0bc <tcp_process+0x55c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	429a      	cmp	r2, r3
 800f062:	d105      	bne.n	800f070 <tcp_process+0x510>
 800f064:	4b15      	ldr	r3, [pc, #84]	@ (800f0bc <tcp_process+0x55c>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	4a14      	ldr	r2, [pc, #80]	@ (800f0bc <tcp_process+0x55c>)
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	e02d      	b.n	800f0cc <tcp_process+0x56c>
 800f070:	4b12      	ldr	r3, [pc, #72]	@ (800f0bc <tcp_process+0x55c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	617b      	str	r3, [r7, #20]
 800f076:	e026      	b.n	800f0c6 <tcp_process+0x566>
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	68db      	ldr	r3, [r3, #12]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	429a      	cmp	r2, r3
 800f080:	d11e      	bne.n	800f0c0 <tcp_process+0x560>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	68da      	ldr	r2, [r3, #12]
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	60da      	str	r2, [r3, #12]
 800f08a:	e01f      	b.n	800f0cc <tcp_process+0x56c>
 800f08c:	200098b8 	.word	0x200098b8
 800f090:	200098b0 	.word	0x200098b0
 800f094:	200098b6 	.word	0x200098b6
 800f098:	200098ac 	.word	0x200098ac
 800f09c:	2000989c 	.word	0x2000989c
 800f0a0:	20006114 	.word	0x20006114
 800f0a4:	20006118 	.word	0x20006118
 800f0a8:	08019ad4 	.word	0x08019ad4
 800f0ac:	08019cd8 	.word	0x08019cd8
 800f0b0:	08019b18 	.word	0x08019b18
 800f0b4:	200098b4 	.word	0x200098b4
 800f0b8:	200098b9 	.word	0x200098b9
 800f0bc:	20009880 	.word	0x20009880
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	617b      	str	r3, [r7, #20]
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1d5      	bne.n	800f078 <tcp_process+0x518>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	60da      	str	r2, [r3, #12]
 800f0d2:	4b77      	ldr	r3, [pc, #476]	@ (800f2b0 <tcp_process+0x750>)
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	220a      	movs	r2, #10
 800f0dc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f0de:	4b75      	ldr	r3, [pc, #468]	@ (800f2b4 <tcp_process+0x754>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	60da      	str	r2, [r3, #12]
 800f0e6:	4a73      	ldr	r2, [pc, #460]	@ (800f2b4 <tcp_process+0x754>)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6013      	str	r3, [r2, #0]
 800f0ec:	f002 fda2 	bl	8011c34 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f0f0:	e0d2      	b.n	800f298 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	7e9b      	ldrb	r3, [r3, #26]
 800f0f6:	f043 0302 	orr.w	r3, r3, #2
 800f0fa:	b2da      	uxtb	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2208      	movs	r2, #8
 800f104:	751a      	strb	r2, [r3, #20]
    break;
 800f106:	e0c7      	b.n	800f298 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f108:	4b6b      	ldr	r3, [pc, #428]	@ (800f2b8 <tcp_process+0x758>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	f003 0310 	and.w	r3, r3, #16
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 80c1 	beq.w	800f298 <tcp_process+0x738>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f11a:	4b68      	ldr	r3, [pc, #416]	@ (800f2bc <tcp_process+0x75c>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	429a      	cmp	r2, r3
 800f120:	f040 80ba 	bne.w	800f298 <tcp_process+0x738>
               pcb->unsent == NULL) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f040 80b5 	bne.w	800f298 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2206      	movs	r2, #6
 800f132:	751a      	strb	r2, [r3, #20]
    break;
 800f134:	e0b0      	b.n	800f298 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f93c 	bl	800f3b4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f13c:	4b60      	ldr	r3, [pc, #384]	@ (800f2c0 <tcp_process+0x760>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f003 0320 	and.w	r3, r3, #32
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 80a9 	beq.w	800f29c <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	7e9b      	ldrb	r3, [r3, #26]
 800f14e:	f043 0302 	orr.w	r3, r3, #2
 800f152:	b2da      	uxtb	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7fe fe67 	bl	800de2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f15e:	4b59      	ldr	r3, [pc, #356]	@ (800f2c4 <tcp_process+0x764>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	429a      	cmp	r2, r3
 800f166:	d105      	bne.n	800f174 <tcp_process+0x614>
 800f168:	4b56      	ldr	r3, [pc, #344]	@ (800f2c4 <tcp_process+0x764>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	4a55      	ldr	r2, [pc, #340]	@ (800f2c4 <tcp_process+0x764>)
 800f170:	6013      	str	r3, [r2, #0]
 800f172:	e013      	b.n	800f19c <tcp_process+0x63c>
 800f174:	4b53      	ldr	r3, [pc, #332]	@ (800f2c4 <tcp_process+0x764>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	613b      	str	r3, [r7, #16]
 800f17a:	e00c      	b.n	800f196 <tcp_process+0x636>
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	429a      	cmp	r2, r3
 800f184:	d104      	bne.n	800f190 <tcp_process+0x630>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	68da      	ldr	r2, [r3, #12]
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	60da      	str	r2, [r3, #12]
 800f18e:	e005      	b.n	800f19c <tcp_process+0x63c>
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	68db      	ldr	r3, [r3, #12]
 800f194:	613b      	str	r3, [r7, #16]
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d1ef      	bne.n	800f17c <tcp_process+0x61c>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	60da      	str	r2, [r3, #12]
 800f1a2:	4b43      	ldr	r3, [pc, #268]	@ (800f2b0 <tcp_process+0x750>)
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	220a      	movs	r2, #10
 800f1ac:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f1ae:	4b41      	ldr	r3, [pc, #260]	@ (800f2b4 <tcp_process+0x754>)
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	60da      	str	r2, [r3, #12]
 800f1b6:	4a3f      	ldr	r2, [pc, #252]	@ (800f2b4 <tcp_process+0x754>)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	6013      	str	r3, [r2, #0]
 800f1bc:	f002 fd3a 	bl	8011c34 <tcp_timer_needed>
    }
    break;
 800f1c0:	e06c      	b.n	800f29c <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f8f6 	bl	800f3b4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f1c8:	4b3b      	ldr	r3, [pc, #236]	@ (800f2b8 <tcp_process+0x758>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 0310 	and.w	r3, r3, #16
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d065      	beq.n	800f2a0 <tcp_process+0x740>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f1d8:	4b38      	ldr	r3, [pc, #224]	@ (800f2bc <tcp_process+0x75c>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d15f      	bne.n	800f2a0 <tcp_process+0x740>
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d15b      	bne.n	800f2a0 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7fe fe1f 	bl	800de2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f1ee:	4b35      	ldr	r3, [pc, #212]	@ (800f2c4 <tcp_process+0x764>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d105      	bne.n	800f204 <tcp_process+0x6a4>
 800f1f8:	4b32      	ldr	r3, [pc, #200]	@ (800f2c4 <tcp_process+0x764>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	4a31      	ldr	r2, [pc, #196]	@ (800f2c4 <tcp_process+0x764>)
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	e013      	b.n	800f22c <tcp_process+0x6cc>
 800f204:	4b2f      	ldr	r3, [pc, #188]	@ (800f2c4 <tcp_process+0x764>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	e00c      	b.n	800f226 <tcp_process+0x6c6>
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	68db      	ldr	r3, [r3, #12]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	429a      	cmp	r2, r3
 800f214:	d104      	bne.n	800f220 <tcp_process+0x6c0>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	68da      	ldr	r2, [r3, #12]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	60da      	str	r2, [r3, #12]
 800f21e:	e005      	b.n	800f22c <tcp_process+0x6cc>
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	60fb      	str	r3, [r7, #12]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1ef      	bne.n	800f20c <tcp_process+0x6ac>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	60da      	str	r2, [r3, #12]
 800f232:	4b1f      	ldr	r3, [pc, #124]	@ (800f2b0 <tcp_process+0x750>)
 800f234:	2201      	movs	r2, #1
 800f236:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	220a      	movs	r2, #10
 800f23c:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f23e:	4b1d      	ldr	r3, [pc, #116]	@ (800f2b4 <tcp_process+0x754>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	60da      	str	r2, [r3, #12]
 800f246:	4a1b      	ldr	r2, [pc, #108]	@ (800f2b4 <tcp_process+0x754>)
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6013      	str	r3, [r2, #0]
 800f24c:	f002 fcf2 	bl	8011c34 <tcp_timer_needed>
    }
    break;
 800f250:	e026      	b.n	800f2a0 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f000 f8ae 	bl	800f3b4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f258:	4b17      	ldr	r3, [pc, #92]	@ (800f2b8 <tcp_process+0x758>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	f003 0310 	and.w	r3, r3, #16
 800f260:	2b00      	cmp	r3, #0
 800f262:	d01f      	beq.n	800f2a4 <tcp_process+0x744>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f268:	4b14      	ldr	r3, [pc, #80]	@ (800f2bc <tcp_process+0x75c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d119      	bne.n	800f2a4 <tcp_process+0x744>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f274:	2b00      	cmp	r3, #0
 800f276:	d115      	bne.n	800f2a4 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f278:	4b11      	ldr	r3, [pc, #68]	@ (800f2c0 <tcp_process+0x760>)
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	f043 0310 	orr.w	r3, r3, #16
 800f280:	b2da      	uxtb	r2, r3
 800f282:	4b0f      	ldr	r3, [pc, #60]	@ (800f2c0 <tcp_process+0x760>)
 800f284:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f286:	e00d      	b.n	800f2a4 <tcp_process+0x744>
  default:
    break;
 800f288:	bf00      	nop
 800f28a:	e00c      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f28c:	bf00      	nop
 800f28e:	e00a      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f290:	bf00      	nop
 800f292:	e008      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f294:	bf00      	nop
 800f296:	e006      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f298:	bf00      	nop
 800f29a:	e004      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f29c:	bf00      	nop
 800f29e:	e002      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f2a0:	bf00      	nop
 800f2a2:	e000      	b.n	800f2a6 <tcp_process+0x746>
    break;
 800f2a4:	bf00      	nop
  }
  return ERR_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3720      	adds	r7, #32
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	20009888 	.word	0x20009888
 800f2b4:	20009884 	.word	0x20009884
 800f2b8:	200098b8 	.word	0x200098b8
 800f2bc:	200098b0 	.word	0x200098b0
 800f2c0:	200098b9 	.word	0x200098b9
 800f2c4:	20009880 	.word	0x20009880

0800f2c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f2c8:	b590      	push	{r4, r7, lr}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	899b      	ldrh	r3, [r3, #12]
 800f2d8:	b29b      	uxth	r3, r3
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fb fe94 	bl	800b008 <lwip_htons>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d027      	beq.n	800f33a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f2ea:	6838      	ldr	r0, [r7, #0]
 800f2ec:	f7fe fb39 	bl	800d962 <tcp_segs_free>
    next = NULL;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	e055      	b.n	800f3a2 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	899b      	ldrh	r3, [r3, #12]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fb fe82 	bl	800b008 <lwip_htons>
 800f304:	4603      	mov	r3, r0
 800f306:	f003 0301 	and.w	r3, r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00d      	beq.n	800f32a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	899b      	ldrh	r3, [r3, #12]
 800f314:	b29c      	uxth	r4, r3
 800f316:	2001      	movs	r0, #1
 800f318:	f7fb fe76 	bl	800b008 <lwip_htons>
 800f31c:	4603      	mov	r3, r0
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	4322      	orrs	r2, r4
 800f326:	b292      	uxth	r2, r2
 800f328:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f334:	68f8      	ldr	r0, [r7, #12]
 800f336:	f7fe fb29 	bl	800d98c <tcp_seg_free>
    while (next &&
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00e      	beq.n	800f35e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	891b      	ldrh	r3, [r3, #8]
 800f344:	461a      	mov	r2, r3
 800f346:	4b1a      	ldr	r3, [pc, #104]	@ (800f3b0 <tcp_oos_insert_segment+0xe8>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	441a      	add	r2, r3
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	8909      	ldrh	r1, [r1, #8]
 800f356:	440b      	add	r3, r1
 800f358:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	dacb      	bge.n	800f2f6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d01e      	beq.n	800f3a2 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	891b      	ldrh	r3, [r3, #8]
 800f368:	461a      	mov	r2, r3
 800f36a:	4b11      	ldr	r3, [pc, #68]	@ (800f3b0 <tcp_oos_insert_segment+0xe8>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	441a      	add	r2, r3
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dd12      	ble.n	800f3a2 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	b29a      	uxth	r2, r3
 800f384:	4b0a      	ldr	r3, [pc, #40]	@ (800f3b0 <tcp_oos_insert_segment+0xe8>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	b29b      	uxth	r3, r3
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	891b      	ldrh	r3, [r3, #8]
 800f39a:	4619      	mov	r1, r3
 800f39c:	4610      	mov	r0, r2
 800f39e:	f7fc fe95 	bl	800c0cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	601a      	str	r2, [r3, #0]
}
 800f3a8:	bf00      	nop
 800f3aa:	3714      	adds	r7, #20
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd90      	pop	{r4, r7, pc}
 800f3b0:	200098ac 	.word	0x200098ac

0800f3b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b6:	b08d      	sub	sp, #52	@ 0x34
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	7d1b      	ldrb	r3, [r3, #20]
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d806      	bhi.n	800f3d6 <tcp_receive+0x22>
 800f3c8:	4b98      	ldr	r3, [pc, #608]	@ (800f62c <tcp_receive+0x278>)
 800f3ca:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800f3ce:	4998      	ldr	r1, [pc, #608]	@ (800f630 <tcp_receive+0x27c>)
 800f3d0:	4898      	ldr	r0, [pc, #608]	@ (800f634 <tcp_receive+0x280>)
 800f3d2:	f007 fedf 	bl	8017194 <iprintf>

  if (flags & TCP_ACK) {
 800f3d6:	4b98      	ldr	r3, [pc, #608]	@ (800f638 <tcp_receive+0x284>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 0310 	and.w	r3, r3, #16
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	f000 82c1 	beq.w	800f966 <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3f0:	4413      	add	r3, r2
 800f3f2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3f8:	4b90      	ldr	r3, [pc, #576]	@ (800f63c <tcp_receive+0x288>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	db1b      	blt.n	800f43a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f406:	4b8d      	ldr	r3, [pc, #564]	@ (800f63c <tcp_receive+0x288>)
 800f408:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d106      	bne.n	800f41c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f412:	4b8b      	ldr	r3, [pc, #556]	@ (800f640 <tcp_receive+0x28c>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	1ad3      	subs	r3, r2, r3
 800f418:	2b00      	cmp	r3, #0
 800f41a:	db0e      	blt.n	800f43a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f420:	4b87      	ldr	r3, [pc, #540]	@ (800f640 <tcp_receive+0x28c>)
 800f422:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f424:	429a      	cmp	r2, r3
 800f426:	d141      	bne.n	800f4ac <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f428:	4b86      	ldr	r3, [pc, #536]	@ (800f644 <tcp_receive+0x290>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	89db      	ldrh	r3, [r3, #14]
 800f42e:	b29a      	uxth	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f436:	429a      	cmp	r2, r3
 800f438:	d938      	bls.n	800f4ac <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f43a:	4b82      	ldr	r3, [pc, #520]	@ (800f644 <tcp_receive+0x290>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	89db      	ldrh	r3, [r3, #14]
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f454:	429a      	cmp	r2, r3
 800f456:	d205      	bcs.n	800f464 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f464:	4b75      	ldr	r3, [pc, #468]	@ (800f63c <tcp_receive+0x288>)
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 800f46c:	4b74      	ldr	r3, [pc, #464]	@ (800f640 <tcp_receive+0x28c>)
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10d      	bne.n	800f49a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800f484:	2b00      	cmp	r3, #0
 800f486:	d111      	bne.n	800f4ac <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2201      	movs	r2, #1
 800f494:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800f498:	e008      	b.n	800f4ac <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d003      	beq.n	800f4ac <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f4ac:	4b64      	ldr	r3, [pc, #400]	@ (800f640 <tcp_receive+0x28c>)
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	dc53      	bgt.n	800f562 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800f4ba:	4b63      	ldr	r3, [pc, #396]	@ (800f648 <tcp_receive+0x294>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d146      	bne.n	800f550 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f4cc:	4413      	add	r3, r2
 800f4ce:	697a      	ldr	r2, [r7, #20]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d13d      	bne.n	800f550 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	db38      	blt.n	800f550 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4e2:	4b57      	ldr	r3, [pc, #348]	@ (800f640 <tcp_receive+0x28c>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d132      	bne.n	800f550 <tcp_receive+0x19c>
              found_dupack = 1;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f4f4:	2bff      	cmp	r3, #255	@ 0xff
 800f4f6:	d007      	beq.n	800f508 <tcp_receive+0x154>
                ++pcb->dupacks;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f4fe:	3301      	adds	r3, #1
 800f500:	b2da      	uxtb	r2, r3
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f50e:	2b03      	cmp	r3, #3
 800f510:	d916      	bls.n	800f540 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f51c:	4413      	add	r3, r2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f526:	429a      	cmp	r2, r3
 800f528:	d912      	bls.n	800f550 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f534:	4413      	add	r3, r2
 800f536:	b29a      	uxth	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f53e:	e007      	b.n	800f550 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f546:	2b03      	cmp	r3, #3
 800f548:	d102      	bne.n	800f550 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f002 fa26 	bl	801199c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	2b00      	cmp	r3, #0
 800f554:	f040 816a 	bne.w	800f82c <tcp_receive+0x478>
        pcb->dupacks = 0;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f560:	e164      	b.n	800f82c <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f562:	4b37      	ldr	r3, [pc, #220]	@ (800f640 <tcp_receive+0x28c>)
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f56a:	1ad3      	subs	r3, r2, r3
 800f56c:	3b01      	subs	r3, #1
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f2c0 8108 	blt.w	800f784 <tcp_receive+0x3d0>
 800f574:	4b32      	ldr	r3, [pc, #200]	@ (800f640 <tcp_receive+0x28c>)
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f57c:	1ad3      	subs	r3, r2, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f300 8100 	bgt.w	800f784 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	7e9b      	ldrb	r3, [r3, #26]
 800f588:	f003 0304 	and.w	r3, r3, #4
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00c      	beq.n	800f5aa <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7e9b      	ldrb	r3, [r3, #26]
 800f594:	f023 0304 	bic.w	r3, r3, #4
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f5b8:	10db      	asrs	r3, r3, #3
 800f5ba:	b21b      	sxth	r3, r3
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	4413      	add	r3, r2
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	b21a      	sxth	r2, r3
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f5da:	4b19      	ldr	r3, [pc, #100]	@ (800f640 <tcp_receive+0x28c>)
 800f5dc:	681a      	ldr	r2, [r3, #0]
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	f240 8095 	bls.w	800f716 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d227      	bcs.n	800f64c <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f606:	4413      	add	r3, r2
 800f608:	b29a      	uxth	r2, r3
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f610:	429a      	cmp	r2, r3
 800f612:	f240 8080 	bls.w	800f716 <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f620:	4413      	add	r3, r2
 800f622:	b29a      	uxth	r2, r3
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f62a:	e074      	b.n	800f716 <tcp_receive+0x362>
 800f62c:	08019ad4 	.word	0x08019ad4
 800f630:	08019cf8 	.word	0x08019cf8
 800f634:	08019b18 	.word	0x08019b18
 800f638:	200098b8 	.word	0x200098b8
 800f63c:	200098ac 	.word	0x200098ac
 800f640:	200098b0 	.word	0x200098b0
 800f644:	2000989c 	.word	0x2000989c
 800f648:	200098b6 	.word	0x200098b6
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f656:	4619      	mov	r1, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f65c:	fb01 f303 	mul.w	r3, r1, r3
 800f660:	6879      	ldr	r1, [r7, #4]
 800f662:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 800f666:	fb93 f3f1 	sdiv	r3, r3, r1
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4413      	add	r3, r2
 800f66e:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f676:	8a7a      	ldrh	r2, [r7, #18]
 800f678:	429a      	cmp	r2, r3
 800f67a:	d94c      	bls.n	800f716 <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	8a7a      	ldrh	r2, [r7, #18]
 800f680:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f684:	e047      	b.n	800f716 <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f68a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f690:	681a      	ldr	r2, [r3, #0]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 800f69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fc ff21 	bl	800c4e8 <pbuf_clen>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	429c      	cmp	r4, r3
 800f6aa:	d206      	bcs.n	800f6ba <tcp_receive+0x306>
 800f6ac:	4b70      	ldr	r3, [pc, #448]	@ (800f870 <tcp_receive+0x4bc>)
 800f6ae:	f240 429e 	movw	r2, #1182	@ 0x49e
 800f6b2:	4970      	ldr	r1, [pc, #448]	@ (800f874 <tcp_receive+0x4c0>)
 800f6b4:	4870      	ldr	r0, [pc, #448]	@ (800f878 <tcp_receive+0x4c4>)
 800f6b6:	f007 fd6d 	bl	8017194 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f6ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6bc:	685b      	ldr	r3, [r3, #4]
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fc ff12 	bl	800c4e8 <pbuf_clen>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f6ce:	1a9b      	subs	r3, r3, r2
 800f6d0:	b29a      	uxth	r2, r3
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 800f6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6da:	891a      	ldrh	r2, [r3, #8]
 800f6dc:	4b67      	ldr	r3, [pc, #412]	@ (800f87c <tcp_receive+0x4c8>)
 800f6de:	881b      	ldrh	r3, [r3, #0]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	4b65      	ldr	r3, [pc, #404]	@ (800f87c <tcp_receive+0x4c8>)
 800f6e6:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f6e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f6ea:	f7fe f94f 	bl	800d98c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00e      	beq.n	800f716 <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <tcp_receive+0x362>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f704:	2b00      	cmp	r3, #0
 800f706:	d106      	bne.n	800f716 <tcp_receive+0x362>
 800f708:	4b59      	ldr	r3, [pc, #356]	@ (800f870 <tcp_receive+0x4bc>)
 800f70a:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 800f70e:	495c      	ldr	r1, [pc, #368]	@ (800f880 <tcp_receive+0x4cc>)
 800f710:	4859      	ldr	r0, [pc, #356]	@ (800f878 <tcp_receive+0x4c4>)
 800f712:	f007 fd3f 	bl	8017194 <iprintf>
      while (pcb->unacked != NULL &&
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d022      	beq.n	800f764 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	4618      	mov	r0, r3
 800f728:	f7fb fc7b 	bl	800b022 <lwip_htonl>
 800f72c:	4604      	mov	r4, r0
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f732:	891b      	ldrh	r3, [r3, #8]
 800f734:	461d      	mov	r5, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	899b      	ldrh	r3, [r3, #12]
 800f73e:	b29b      	uxth	r3, r3
 800f740:	4618      	mov	r0, r3
 800f742:	f7fb fc61 	bl	800b008 <lwip_htons>
 800f746:	4603      	mov	r3, r0
 800f748:	f003 0303 	and.w	r3, r3, #3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d001      	beq.n	800f754 <tcp_receive+0x3a0>
 800f750:	2301      	movs	r3, #1
 800f752:	e000      	b.n	800f756 <tcp_receive+0x3a2>
 800f754:	2300      	movs	r3, #0
 800f756:	442b      	add	r3, r5
 800f758:	18e2      	adds	r2, r4, r3
 800f75a:	4b4a      	ldr	r3, [pc, #296]	@ (800f884 <tcp_receive+0x4d0>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800f760:	2b00      	cmp	r3, #0
 800f762:	dd90      	ble.n	800f686 <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f772:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f774:	e002      	b.n	800f77c <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2200      	movs	r2, #0
 800f780:	76da      	strb	r2, [r3, #27]
 800f782:	e002      	b.n	800f78a <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f001 fd2d 	bl	80111e4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800f78a:	e04f      	b.n	800f82c <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f790:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d103      	bne.n	800f7ac <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 800f7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fc fe96 	bl	800c4e8 <pbuf_clen>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	429c      	cmp	r4, r3
 800f7c0:	d206      	bcs.n	800f7d0 <tcp_receive+0x41c>
 800f7c2:	4b2b      	ldr	r3, [pc, #172]	@ (800f870 <tcp_receive+0x4bc>)
 800f7c4:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800f7c8:	492a      	ldr	r1, [pc, #168]	@ (800f874 <tcp_receive+0x4c0>)
 800f7ca:	482b      	ldr	r0, [pc, #172]	@ (800f878 <tcp_receive+0x4c4>)
 800f7cc:	f007 fce2 	bl	8017194 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800f7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fc fe87 	bl	800c4e8 <pbuf_clen>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	461a      	mov	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f7e4:	1a9b      	subs	r3, r3, r2
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 800f7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7f0:	891a      	ldrh	r2, [r3, #8]
 800f7f2:	4b22      	ldr	r3, [pc, #136]	@ (800f87c <tcp_receive+0x4c8>)
 800f7f4:	881b      	ldrh	r3, [r3, #0]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	b29a      	uxth	r2, r3
 800f7fa:	4b20      	ldr	r3, [pc, #128]	@ (800f87c <tcp_receive+0x4c8>)
 800f7fc:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800f7fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f800:	f7fe f8c4 	bl	800d98c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d00e      	beq.n	800f82c <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d10a      	bne.n	800f82c <tcp_receive+0x478>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d106      	bne.n	800f82c <tcp_receive+0x478>
 800f81e:	4b14      	ldr	r3, [pc, #80]	@ (800f870 <tcp_receive+0x4bc>)
 800f820:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 800f824:	4916      	ldr	r1, [pc, #88]	@ (800f880 <tcp_receive+0x4cc>)
 800f826:	4814      	ldr	r0, [pc, #80]	@ (800f878 <tcp_receive+0x4c4>)
 800f828:	f007 fcb4 	bl	8017194 <iprintf>
    while (pcb->unsent != NULL &&
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f830:	2b00      	cmp	r3, #0
 800f832:	d037      	beq.n	800f8a4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f834:	4b13      	ldr	r3, [pc, #76]	@ (800f884 <tcp_receive+0x4d0>)
 800f836:	681c      	ldr	r4, [r3, #0]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f7fb fbee 	bl	800b022 <lwip_htonl>
 800f846:	4605      	mov	r5, r0
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f84c:	891b      	ldrh	r3, [r3, #8]
 800f84e:	461e      	mov	r6, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	899b      	ldrh	r3, [r3, #12]
 800f858:	b29b      	uxth	r3, r3
 800f85a:	4618      	mov	r0, r3
 800f85c:	f7fb fbd4 	bl	800b008 <lwip_htons>
 800f860:	4603      	mov	r3, r0
 800f862:	f003 0303 	and.w	r3, r3, #3
 800f866:	2b00      	cmp	r3, #0
 800f868:	d00e      	beq.n	800f888 <tcp_receive+0x4d4>
 800f86a:	2301      	movs	r3, #1
 800f86c:	e00d      	b.n	800f88a <tcp_receive+0x4d6>
 800f86e:	bf00      	nop
 800f870:	08019ad4 	.word	0x08019ad4
 800f874:	08019d14 	.word	0x08019d14
 800f878:	08019b18 	.word	0x08019b18
 800f87c:	200098b4 	.word	0x200098b4
 800f880:	08019d3c 	.word	0x08019d3c
 800f884:	200098b0 	.word	0x200098b0
 800f888:	2300      	movs	r3, #0
 800f88a:	4433      	add	r3, r6
 800f88c:	442b      	add	r3, r5
 800f88e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800f890:	2b00      	cmp	r3, #0
 800f892:	db07      	blt.n	800f8a4 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800f894:	4b8d      	ldr	r3, [pc, #564]	@ (800facc <tcp_receive+0x718>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f77f af74 	ble.w	800f78c <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f8aa:	4b89      	ldr	r3, [pc, #548]	@ (800fad0 <tcp_receive+0x71c>)
 800f8ac:	881b      	ldrh	r3, [r3, #0]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d052      	beq.n	800f966 <tcp_receive+0x5b2>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8c4:	4b81      	ldr	r3, [pc, #516]	@ (800facc <tcp_receive+0x718>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da4b      	bge.n	800f966 <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f8ce:	4b81      	ldr	r3, [pc, #516]	@ (800fad4 <tcp_receive+0x720>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800f8e0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8e8:	10db      	asrs	r3, r3, #3
 800f8ea:	b21b      	sxth	r3, r3
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f8fe:	4413      	add	r3, r2
 800f900:	b29b      	uxth	r3, r3
 800f902:	b21a      	sxth	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f908:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	da03      	bge.n	800f918 <tcp_receive+0x564>
        m = -m;
 800f910:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f912:	425b      	negs	r3, r3
 800f914:	b29b      	uxth	r3, r3
 800f916:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 800f918:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f920:	109b      	asrs	r3, r3, #2
 800f922:	b21b      	sxth	r3, r3
 800f924:	b29b      	uxth	r3, r3
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	b29b      	uxth	r3, r3
 800f92a:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f932:	b29a      	uxth	r2, r3
 800f934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f936:	4413      	add	r3, r2
 800f938:	b29b      	uxth	r3, r3
 800f93a:	b21a      	sxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f946:	10db      	asrs	r3, r3, #3
 800f948:	b21b      	sxth	r3, r3
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f952:	b29b      	uxth	r3, r3
 800f954:	4413      	add	r3, r2
 800f956:	b29b      	uxth	r3, r3
 800f958:	b21a      	sxth	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f966:	4b5c      	ldr	r3, [pc, #368]	@ (800fad8 <tcp_receive+0x724>)
 800f968:	881b      	ldrh	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f000 84f1 	beq.w	8010352 <tcp_receive+0xf9e>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b06      	cmp	r3, #6
 800f976:	f200 84ec 	bhi.w	8010352 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f97e:	4b57      	ldr	r3, [pc, #348]	@ (800fadc <tcp_receive+0x728>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	3b01      	subs	r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	f2c0 80b8 	blt.w	800fafc <tcp_receive+0x748>
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f990:	4b51      	ldr	r3, [pc, #324]	@ (800fad8 <tcp_receive+0x724>)
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	4619      	mov	r1, r3
 800f996:	4b51      	ldr	r3, [pc, #324]	@ (800fadc <tcp_receive+0x728>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	440b      	add	r3, r1
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	3301      	adds	r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	f300 80ab 	bgt.w	800fafc <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f9a6:	4b4e      	ldr	r3, [pc, #312]	@ (800fae0 <tcp_receive+0x72c>)
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9b0:	4b4a      	ldr	r3, [pc, #296]	@ (800fadc <tcp_receive+0x728>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	1ad3      	subs	r3, r2, r3
 800f9b6:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f9b8:	4b49      	ldr	r3, [pc, #292]	@ (800fae0 <tcp_receive+0x72c>)
 800f9ba:	685b      	ldr	r3, [r3, #4]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d106      	bne.n	800f9ce <tcp_receive+0x61a>
 800f9c0:	4b48      	ldr	r3, [pc, #288]	@ (800fae4 <tcp_receive+0x730>)
 800f9c2:	f240 523c 	movw	r2, #1340	@ 0x53c
 800f9c6:	4948      	ldr	r1, [pc, #288]	@ (800fae8 <tcp_receive+0x734>)
 800f9c8:	4848      	ldr	r0, [pc, #288]	@ (800faec <tcp_receive+0x738>)
 800f9ca:	f007 fbe3 	bl	8017194 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	dd06      	ble.n	800f9e6 <tcp_receive+0x632>
 800f9d8:	4b42      	ldr	r3, [pc, #264]	@ (800fae4 <tcp_receive+0x730>)
 800f9da:	f240 523d 	movw	r2, #1341	@ 0x53d
 800f9de:	4944      	ldr	r1, [pc, #272]	@ (800faf0 <tcp_receive+0x73c>)
 800f9e0:	4842      	ldr	r0, [pc, #264]	@ (800faec <tcp_receive+0x738>)
 800f9e2:	f007 fbd7 	bl	8017194 <iprintf>
      if (inseg.p->len < off) {
 800f9e6:	4b3e      	ldr	r3, [pc, #248]	@ (800fae0 <tcp_receive+0x72c>)
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	895b      	ldrh	r3, [r3, #10]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	dd3e      	ble.n	800fa72 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f9f4:	4b3a      	ldr	r3, [pc, #232]	@ (800fae0 <tcp_receive+0x72c>)
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	891b      	ldrh	r3, [r3, #8]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	dd06      	ble.n	800fa10 <tcp_receive+0x65c>
 800fa02:	4b38      	ldr	r3, [pc, #224]	@ (800fae4 <tcp_receive+0x730>)
 800fa04:	f240 523f 	movw	r2, #1343	@ 0x53f
 800fa08:	493a      	ldr	r1, [pc, #232]	@ (800faf4 <tcp_receive+0x740>)
 800fa0a:	4838      	ldr	r0, [pc, #224]	@ (800faec <tcp_receive+0x738>)
 800fa0c:	f007 fbc2 	bl	8017194 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fa10:	4b33      	ldr	r3, [pc, #204]	@ (800fae0 <tcp_receive+0x72c>)
 800fa12:	685b      	ldr	r3, [r3, #4]
 800fa14:	891a      	ldrh	r2, [r3, #8]
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800fa1e:	e00e      	b.n	800fa3e <tcp_receive+0x68a>
          off -= p->len;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	895b      	ldrh	r3, [r3, #10]
 800fa24:	461a      	mov	r2, r3
 800fa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa28:	1a9b      	subs	r3, r3, r2
 800fa2a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	8a3a      	ldrh	r2, [r7, #16]
 800fa30:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2200      	movs	r2, #0
 800fa36:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	895b      	ldrh	r3, [r3, #10]
 800fa42:	461a      	mov	r2, r3
 800fa44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa46:	4293      	cmp	r3, r2
 800fa48:	dcea      	bgt.n	800fa20 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	425b      	negs	r3, r3
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	b21b      	sxth	r3, r3
 800fa54:	4619      	mov	r1, r3
 800fa56:	69b8      	ldr	r0, [r7, #24]
 800fa58:	f7fc fc88 	bl	800c36c <pbuf_header>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d01c      	beq.n	800fa9c <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fa62:	4b20      	ldr	r3, [pc, #128]	@ (800fae4 <tcp_receive+0x730>)
 800fa64:	f240 524c 	movw	r2, #1356	@ 0x54c
 800fa68:	4923      	ldr	r1, [pc, #140]	@ (800faf8 <tcp_receive+0x744>)
 800fa6a:	4820      	ldr	r0, [pc, #128]	@ (800faec <tcp_receive+0x738>)
 800fa6c:	f007 fb92 	bl	8017194 <iprintf>
 800fa70:	e014      	b.n	800fa9c <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800fa72:	4b1b      	ldr	r3, [pc, #108]	@ (800fae0 <tcp_receive+0x72c>)
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa78:	b292      	uxth	r2, r2
 800fa7a:	4252      	negs	r2, r2
 800fa7c:	b292      	uxth	r2, r2
 800fa7e:	b212      	sxth	r2, r2
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fc fc72 	bl	800c36c <pbuf_header>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d006      	beq.n	800fa9c <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fa8e:	4b15      	ldr	r3, [pc, #84]	@ (800fae4 <tcp_receive+0x730>)
 800fa90:	f240 5251 	movw	r2, #1361	@ 0x551
 800fa94:	4918      	ldr	r1, [pc, #96]	@ (800faf8 <tcp_receive+0x744>)
 800fa96:	4815      	ldr	r0, [pc, #84]	@ (800faec <tcp_receive+0x738>)
 800fa98:	f007 fb7c 	bl	8017194 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800fa9c:	4b10      	ldr	r3, [pc, #64]	@ (800fae0 <tcp_receive+0x72c>)
 800fa9e:	891a      	ldrh	r2, [r3, #8]
 800faa0:	4b0e      	ldr	r3, [pc, #56]	@ (800fadc <tcp_receive+0x728>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	b299      	uxth	r1, r3
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faaa:	b29b      	uxth	r3, r3
 800faac:	1acb      	subs	r3, r1, r3
 800faae:	b29b      	uxth	r3, r3
 800fab0:	4413      	add	r3, r2
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	4b0a      	ldr	r3, [pc, #40]	@ (800fae0 <tcp_receive+0x72c>)
 800fab6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fabc:	4a07      	ldr	r2, [pc, #28]	@ (800fadc <tcp_receive+0x728>)
 800fabe:	6013      	str	r3, [r2, #0]
 800fac0:	4b07      	ldr	r3, [pc, #28]	@ (800fae0 <tcp_receive+0x72c>)
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	4a05      	ldr	r2, [pc, #20]	@ (800fadc <tcp_receive+0x728>)
 800fac6:	6812      	ldr	r2, [r2, #0]
 800fac8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800faca:	e025      	b.n	800fb18 <tcp_receive+0x764>
 800facc:	200098b0 	.word	0x200098b0
 800fad0:	200098b4 	.word	0x200098b4
 800fad4:	20009874 	.word	0x20009874
 800fad8:	200098b6 	.word	0x200098b6
 800fadc:	200098ac 	.word	0x200098ac
 800fae0:	2000988c 	.word	0x2000988c
 800fae4:	08019ad4 	.word	0x08019ad4
 800fae8:	08019d5c 	.word	0x08019d5c
 800faec:	08019b18 	.word	0x08019b18
 800faf0:	08019d6c 	.word	0x08019d6c
 800faf4:	08019d7c 	.word	0x08019d7c
 800faf8:	08019d8c 	.word	0x08019d8c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fafc:	4b87      	ldr	r3, [pc, #540]	@ (800fd1c <tcp_receive+0x968>)
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	da06      	bge.n	800fb18 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	7e9b      	ldrb	r3, [r3, #26]
 800fb0e:	f043 0302 	orr.w	r3, r3, #2
 800fb12:	b2da      	uxtb	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb18:	4b80      	ldr	r3, [pc, #512]	@ (800fd1c <tcp_receive+0x968>)
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f2c0 8410 	blt.w	8010348 <tcp_receive+0xf94>
 800fb28:	4b7c      	ldr	r3, [pc, #496]	@ (800fd1c <tcp_receive+0x968>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fb34:	440b      	add	r3, r1
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	3301      	adds	r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f300 8404 	bgt.w	8010348 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb44:	4b75      	ldr	r3, [pc, #468]	@ (800fd1c <tcp_receive+0x968>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	f040 8287 	bne.w	801005c <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fb4e:	4b74      	ldr	r3, [pc, #464]	@ (800fd20 <tcp_receive+0x96c>)
 800fb50:	891c      	ldrh	r4, [r3, #8]
 800fb52:	4b73      	ldr	r3, [pc, #460]	@ (800fd20 <tcp_receive+0x96c>)
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	899b      	ldrh	r3, [r3, #12]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fb fa54 	bl	800b008 <lwip_htons>
 800fb60:	4603      	mov	r3, r0
 800fb62:	f003 0303 	and.w	r3, r3, #3
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <tcp_receive+0x7ba>
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	e000      	b.n	800fb70 <tcp_receive+0x7bc>
 800fb6e:	2300      	movs	r3, #0
 800fb70:	4423      	add	r3, r4
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	4b6b      	ldr	r3, [pc, #428]	@ (800fd24 <tcp_receive+0x970>)
 800fb76:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb7c:	4b69      	ldr	r3, [pc, #420]	@ (800fd24 <tcp_receive+0x970>)
 800fb7e:	881b      	ldrh	r3, [r3, #0]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d26e      	bcs.n	800fc62 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb84:	4b66      	ldr	r3, [pc, #408]	@ (800fd20 <tcp_receive+0x96c>)
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	899b      	ldrh	r3, [r3, #12]
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fb fa3b 	bl	800b008 <lwip_htons>
 800fb92:	4603      	mov	r3, r0
 800fb94:	f003 0301 	and.w	r3, r3, #1
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d01b      	beq.n	800fbd4 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fb9c:	4b60      	ldr	r3, [pc, #384]	@ (800fd20 <tcp_receive+0x96c>)
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	899b      	ldrh	r3, [r3, #12]
 800fba2:	b29b      	uxth	r3, r3
 800fba4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fba8:	b29c      	uxth	r4, r3
 800fbaa:	4b5d      	ldr	r3, [pc, #372]	@ (800fd20 <tcp_receive+0x96c>)
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	899b      	ldrh	r3, [r3, #12]
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fb fa28 	bl	800b008 <lwip_htons>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fbbe:	b29b      	uxth	r3, r3
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fb fa21 	bl	800b008 <lwip_htons>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	461a      	mov	r2, r3
 800fbca:	4b55      	ldr	r3, [pc, #340]	@ (800fd20 <tcp_receive+0x96c>)
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	4322      	orrs	r2, r4
 800fbd0:	b292      	uxth	r2, r2
 800fbd2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fbd8:	4b51      	ldr	r3, [pc, #324]	@ (800fd20 <tcp_receive+0x96c>)
 800fbda:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fbdc:	4b50      	ldr	r3, [pc, #320]	@ (800fd20 <tcp_receive+0x96c>)
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	899b      	ldrh	r3, [r3, #12]
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fb fa0f 	bl	800b008 <lwip_htons>
 800fbea:	4603      	mov	r3, r0
 800fbec:	f003 0302 	and.w	r3, r3, #2
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d005      	beq.n	800fc00 <tcp_receive+0x84c>
            inseg.len -= 1;
 800fbf4:	4b4a      	ldr	r3, [pc, #296]	@ (800fd20 <tcp_receive+0x96c>)
 800fbf6:	891b      	ldrh	r3, [r3, #8]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	4b48      	ldr	r3, [pc, #288]	@ (800fd20 <tcp_receive+0x96c>)
 800fbfe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fc00:	4b47      	ldr	r3, [pc, #284]	@ (800fd20 <tcp_receive+0x96c>)
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4a46      	ldr	r2, [pc, #280]	@ (800fd20 <tcp_receive+0x96c>)
 800fc06:	8912      	ldrh	r2, [r2, #8]
 800fc08:	4611      	mov	r1, r2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f7fc fa5e 	bl	800c0cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fc10:	4b43      	ldr	r3, [pc, #268]	@ (800fd20 <tcp_receive+0x96c>)
 800fc12:	891c      	ldrh	r4, [r3, #8]
 800fc14:	4b42      	ldr	r3, [pc, #264]	@ (800fd20 <tcp_receive+0x96c>)
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	899b      	ldrh	r3, [r3, #12]
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fb f9f3 	bl	800b008 <lwip_htons>
 800fc22:	4603      	mov	r3, r0
 800fc24:	f003 0303 	and.w	r3, r3, #3
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d001      	beq.n	800fc30 <tcp_receive+0x87c>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	e000      	b.n	800fc32 <tcp_receive+0x87e>
 800fc30:	2300      	movs	r3, #0
 800fc32:	4423      	add	r3, r4
 800fc34:	b29a      	uxth	r2, r3
 800fc36:	4b3b      	ldr	r3, [pc, #236]	@ (800fd24 <tcp_receive+0x970>)
 800fc38:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fc3a:	4b3a      	ldr	r3, [pc, #232]	@ (800fd24 <tcp_receive+0x970>)
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	461a      	mov	r2, r3
 800fc40:	4b36      	ldr	r3, [pc, #216]	@ (800fd1c <tcp_receive+0x968>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	441a      	add	r2, r3
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc4a:	6879      	ldr	r1, [r7, #4]
 800fc4c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc4e:	440b      	add	r3, r1
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d006      	beq.n	800fc62 <tcp_receive+0x8ae>
 800fc54:	4b34      	ldr	r3, [pc, #208]	@ (800fd28 <tcp_receive+0x974>)
 800fc56:	f240 527e 	movw	r2, #1406	@ 0x57e
 800fc5a:	4934      	ldr	r1, [pc, #208]	@ (800fd2c <tcp_receive+0x978>)
 800fc5c:	4834      	ldr	r0, [pc, #208]	@ (800fd30 <tcp_receive+0x97c>)
 800fc5e:	f007 fa99 	bl	8017194 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f000 80e1 	beq.w	800fe2e <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc6c:	4b2c      	ldr	r3, [pc, #176]	@ (800fd20 <tcp_receive+0x96c>)
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	899b      	ldrh	r3, [r3, #12]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fb f9c7 	bl	800b008 <lwip_htons>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	f003 0301 	and.w	r3, r3, #1
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d010      	beq.n	800fca6 <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fc84:	e00a      	b.n	800fc9c <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc8a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc90:	681a      	ldr	r2, [r3, #0]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 800fc96:	68b8      	ldr	r0, [r7, #8]
 800fc98:	f7fd fe78 	bl	800d98c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d1f0      	bne.n	800fc86 <tcp_receive+0x8d2>
 800fca4:	e0c3      	b.n	800fe2e <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fcac:	e04f      	b.n	800fd4e <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fcae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	899b      	ldrh	r3, [r3, #12]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fb f9a6 	bl	800b008 <lwip_htons>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	f003 0301 	and.w	r3, r3, #1
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d03b      	beq.n	800fd3e <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fcc6:	4b16      	ldr	r3, [pc, #88]	@ (800fd20 <tcp_receive+0x96c>)
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	899b      	ldrh	r3, [r3, #12]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fb f99a 	bl	800b008 <lwip_htons>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d12f      	bne.n	800fd3e <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fcde:	4b10      	ldr	r3, [pc, #64]	@ (800fd20 <tcp_receive+0x96c>)
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	899b      	ldrh	r3, [r3, #12]
 800fce4:	b29c      	uxth	r4, r3
 800fce6:	2001      	movs	r0, #1
 800fce8:	f7fb f98e 	bl	800b008 <lwip_htons>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	@ (800fd20 <tcp_receive+0x96c>)
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	4322      	orrs	r2, r4
 800fcf6:	b292      	uxth	r2, r2
 800fcf8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fcfa:	4b09      	ldr	r3, [pc, #36]	@ (800fd20 <tcp_receive+0x96c>)
 800fcfc:	891c      	ldrh	r4, [r3, #8]
 800fcfe:	4b08      	ldr	r3, [pc, #32]	@ (800fd20 <tcp_receive+0x96c>)
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	899b      	ldrh	r3, [r3, #12]
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fb f97e 	bl	800b008 <lwip_htons>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	f003 0303 	and.w	r3, r3, #3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00e      	beq.n	800fd34 <tcp_receive+0x980>
 800fd16:	2301      	movs	r3, #1
 800fd18:	e00d      	b.n	800fd36 <tcp_receive+0x982>
 800fd1a:	bf00      	nop
 800fd1c:	200098ac 	.word	0x200098ac
 800fd20:	2000988c 	.word	0x2000988c
 800fd24:	200098b6 	.word	0x200098b6
 800fd28:	08019ad4 	.word	0x08019ad4
 800fd2c:	08019da0 	.word	0x08019da0
 800fd30:	08019b18 	.word	0x08019b18
 800fd34:	2300      	movs	r3, #0
 800fd36:	4423      	add	r3, r4
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	4b95      	ldr	r3, [pc, #596]	@ (800ff90 <tcp_receive+0xbdc>)
 800fd3c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800fd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd40:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 800fd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 800fd48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fd4a:	f7fd fe1f 	bl	800d98c <tcp_seg_free>
            while (next &&
 800fd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00e      	beq.n	800fd72 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fd54:	4b8e      	ldr	r3, [pc, #568]	@ (800ff90 <tcp_receive+0xbdc>)
 800fd56:	881b      	ldrh	r3, [r3, #0]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4b8e      	ldr	r3, [pc, #568]	@ (800ff94 <tcp_receive+0xbe0>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	441a      	add	r2, r3
 800fd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd62:	68db      	ldr	r3, [r3, #12]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd68:	8909      	ldrh	r1, [r1, #8]
 800fd6a:	440b      	add	r3, r1
 800fd6c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	da9d      	bge.n	800fcae <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fd72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d057      	beq.n	800fe28 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800fd78:	4b85      	ldr	r3, [pc, #532]	@ (800ff90 <tcp_receive+0xbdc>)
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	4b85      	ldr	r3, [pc, #532]	@ (800ff94 <tcp_receive+0xbe0>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	441a      	add	r2, r3
 800fd84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	dd4b      	ble.n	800fe28 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	4b7e      	ldr	r3, [pc, #504]	@ (800ff94 <tcp_receive+0xbe0>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	1ad3      	subs	r3, r2, r3
 800fda0:	b29a      	uxth	r2, r3
 800fda2:	4b7d      	ldr	r3, [pc, #500]	@ (800ff98 <tcp_receive+0xbe4>)
 800fda4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fda6:	4b7c      	ldr	r3, [pc, #496]	@ (800ff98 <tcp_receive+0xbe4>)
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	899b      	ldrh	r3, [r3, #12]
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fb f92a 	bl	800b008 <lwip_htons>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	f003 0302 	and.w	r3, r3, #2
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d005      	beq.n	800fdca <tcp_receive+0xa16>
                inseg.len -= 1;
 800fdbe:	4b76      	ldr	r3, [pc, #472]	@ (800ff98 <tcp_receive+0xbe4>)
 800fdc0:	891b      	ldrh	r3, [r3, #8]
 800fdc2:	3b01      	subs	r3, #1
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	4b74      	ldr	r3, [pc, #464]	@ (800ff98 <tcp_receive+0xbe4>)
 800fdc8:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fdca:	4b73      	ldr	r3, [pc, #460]	@ (800ff98 <tcp_receive+0xbe4>)
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	4a72      	ldr	r2, [pc, #456]	@ (800ff98 <tcp_receive+0xbe4>)
 800fdd0:	8912      	ldrh	r2, [r2, #8]
 800fdd2:	4611      	mov	r1, r2
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fc f979 	bl	800c0cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fdda:	4b6f      	ldr	r3, [pc, #444]	@ (800ff98 <tcp_receive+0xbe4>)
 800fddc:	891c      	ldrh	r4, [r3, #8]
 800fdde:	4b6e      	ldr	r3, [pc, #440]	@ (800ff98 <tcp_receive+0xbe4>)
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	899b      	ldrh	r3, [r3, #12]
 800fde4:	b29b      	uxth	r3, r3
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fb f90e 	bl	800b008 <lwip_htons>
 800fdec:	4603      	mov	r3, r0
 800fdee:	f003 0303 	and.w	r3, r3, #3
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d001      	beq.n	800fdfa <tcp_receive+0xa46>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e000      	b.n	800fdfc <tcp_receive+0xa48>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	4423      	add	r3, r4
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	4b63      	ldr	r3, [pc, #396]	@ (800ff90 <tcp_receive+0xbdc>)
 800fe02:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fe04:	4b62      	ldr	r3, [pc, #392]	@ (800ff90 <tcp_receive+0xbdc>)
 800fe06:	881b      	ldrh	r3, [r3, #0]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4b62      	ldr	r3, [pc, #392]	@ (800ff94 <tcp_receive+0xbe0>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	441a      	add	r2, r3
 800fe10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	685b      	ldr	r3, [r3, #4]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d006      	beq.n	800fe28 <tcp_receive+0xa74>
 800fe1a:	4b60      	ldr	r3, [pc, #384]	@ (800ff9c <tcp_receive+0xbe8>)
 800fe1c:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800fe20:	495f      	ldr	r1, [pc, #380]	@ (800ffa0 <tcp_receive+0xbec>)
 800fe22:	4860      	ldr	r0, [pc, #384]	@ (800ffa4 <tcp_receive+0xbf0>)
 800fe24:	f007 f9b6 	bl	8017194 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe2c:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fe2e:	4b58      	ldr	r3, [pc, #352]	@ (800ff90 <tcp_receive+0xbdc>)
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	461a      	mov	r2, r3
 800fe34:	4b57      	ldr	r3, [pc, #348]	@ (800ff94 <tcp_receive+0xbe0>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	441a      	add	r2, r3
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe42:	4b53      	ldr	r3, [pc, #332]	@ (800ff90 <tcp_receive+0xbdc>)
 800fe44:	881b      	ldrh	r3, [r3, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d206      	bcs.n	800fe58 <tcp_receive+0xaa4>
 800fe4a:	4b54      	ldr	r3, [pc, #336]	@ (800ff9c <tcp_receive+0xbe8>)
 800fe4c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800fe50:	4955      	ldr	r1, [pc, #340]	@ (800ffa8 <tcp_receive+0xbf4>)
 800fe52:	4854      	ldr	r0, [pc, #336]	@ (800ffa4 <tcp_receive+0xbf0>)
 800fe54:	f007 f99e 	bl	8017194 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe5c:	4b4c      	ldr	r3, [pc, #304]	@ (800ff90 <tcp_receive+0xbdc>)
 800fe5e:	881b      	ldrh	r3, [r3, #0]
 800fe60:	1ad3      	subs	r3, r2, r3
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fd f809 	bl	800ce80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fe6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ff98 <tcp_receive+0xbe4>)
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	891b      	ldrh	r3, [r3, #8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d006      	beq.n	800fe86 <tcp_receive+0xad2>
          recv_data = inseg.p;
 800fe78:	4b47      	ldr	r3, [pc, #284]	@ (800ff98 <tcp_receive+0xbe4>)
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	4a4b      	ldr	r2, [pc, #300]	@ (800ffac <tcp_receive+0xbf8>)
 800fe7e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fe80:	4b45      	ldr	r3, [pc, #276]	@ (800ff98 <tcp_receive+0xbe4>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe86:	4b44      	ldr	r3, [pc, #272]	@ (800ff98 <tcp_receive+0xbe4>)
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	899b      	ldrh	r3, [r3, #12]
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fb f8ba 	bl	800b008 <lwip_htons>
 800fe94:	4603      	mov	r3, r0
 800fe96:	f003 0301 	and.w	r3, r3, #1
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	f000 80b4 	beq.w	8010008 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fea0:	4b43      	ldr	r3, [pc, #268]	@ (800ffb0 <tcp_receive+0xbfc>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	f043 0320 	orr.w	r3, r3, #32
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	4b41      	ldr	r3, [pc, #260]	@ (800ffb0 <tcp_receive+0xbfc>)
 800feac:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800feae:	e0ab      	b.n	8010008 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feb4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	4a35      	ldr	r2, [pc, #212]	@ (800ff94 <tcp_receive+0xbe0>)
 800fec0:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	891b      	ldrh	r3, [r3, #8]
 800fec6:	461c      	mov	r4, r3
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	899b      	ldrh	r3, [r3, #12]
 800fece:	b29b      	uxth	r3, r3
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fb f899 	bl	800b008 <lwip_htons>
 800fed6:	4603      	mov	r3, r0
 800fed8:	f003 0303 	and.w	r3, r3, #3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d001      	beq.n	800fee4 <tcp_receive+0xb30>
 800fee0:	2301      	movs	r3, #1
 800fee2:	e000      	b.n	800fee6 <tcp_receive+0xb32>
 800fee4:	2300      	movs	r3, #0
 800fee6:	191a      	adds	r2, r3, r4
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feec:	441a      	add	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fef6:	461c      	mov	r4, r3
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	891b      	ldrh	r3, [r3, #8]
 800fefc:	461d      	mov	r5, r3
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	899b      	ldrh	r3, [r3, #12]
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	4618      	mov	r0, r3
 800ff08:	f7fb f87e 	bl	800b008 <lwip_htons>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f003 0303 	and.w	r3, r3, #3
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <tcp_receive+0xb66>
 800ff16:	2301      	movs	r3, #1
 800ff18:	e000      	b.n	800ff1c <tcp_receive+0xb68>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	442b      	add	r3, r5
 800ff1e:	429c      	cmp	r4, r3
 800ff20:	d206      	bcs.n	800ff30 <tcp_receive+0xb7c>
 800ff22:	4b1e      	ldr	r3, [pc, #120]	@ (800ff9c <tcp_receive+0xbe8>)
 800ff24:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 800ff28:	4922      	ldr	r1, [pc, #136]	@ (800ffb4 <tcp_receive+0xc00>)
 800ff2a:	481e      	ldr	r0, [pc, #120]	@ (800ffa4 <tcp_receive+0xbf0>)
 800ff2c:	f007 f932 	bl	8017194 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	891b      	ldrh	r3, [r3, #8]
 800ff34:	461c      	mov	r4, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	899b      	ldrh	r3, [r3, #12]
 800ff3c:	b29b      	uxth	r3, r3
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7fb f862 	bl	800b008 <lwip_htons>
 800ff44:	4603      	mov	r3, r0
 800ff46:	f003 0303 	and.w	r3, r3, #3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d001      	beq.n	800ff52 <tcp_receive+0xb9e>
 800ff4e:	2301      	movs	r3, #1
 800ff50:	e000      	b.n	800ff54 <tcp_receive+0xba0>
 800ff52:	2300      	movs	r3, #0
 800ff54:	1919      	adds	r1, r3, r4
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ff5a:	b28b      	uxth	r3, r1
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7fc ff8b 	bl	800ce80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	891b      	ldrh	r3, [r3, #8]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d028      	beq.n	800ffc6 <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ff74:	4b0d      	ldr	r3, [pc, #52]	@ (800ffac <tcp_receive+0xbf8>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d01d      	beq.n	800ffb8 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800ff7c:	4b0b      	ldr	r3, [pc, #44]	@ (800ffac <tcp_receive+0xbf8>)
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	4619      	mov	r1, r3
 800ff86:	4610      	mov	r0, r2
 800ff88:	f7fc faec 	bl	800c564 <pbuf_cat>
 800ff8c:	e018      	b.n	800ffc0 <tcp_receive+0xc0c>
 800ff8e:	bf00      	nop
 800ff90:	200098b6 	.word	0x200098b6
 800ff94:	200098ac 	.word	0x200098ac
 800ff98:	2000988c 	.word	0x2000988c
 800ff9c:	08019ad4 	.word	0x08019ad4
 800ffa0:	08019dd8 	.word	0x08019dd8
 800ffa4:	08019b18 	.word	0x08019b18
 800ffa8:	08019e14 	.word	0x08019e14
 800ffac:	200098bc 	.word	0x200098bc
 800ffb0:	200098b9 	.word	0x200098b9
 800ffb4:	08019e34 	.word	0x08019e34
            } else {
              recv_data = cseg->p;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	4a71      	ldr	r2, [pc, #452]	@ (8010184 <tcp_receive+0xdd0>)
 800ffbe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	899b      	ldrh	r3, [r3, #12]
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fb f81a 	bl	800b008 <lwip_htons>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	f003 0301 	and.w	r3, r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d00d      	beq.n	800fffa <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ffde:	4b6a      	ldr	r3, [pc, #424]	@ (8010188 <tcp_receive+0xdd4>)
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	f043 0320 	orr.w	r3, r3, #32
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	4b67      	ldr	r3, [pc, #412]	@ (8010188 <tcp_receive+0xdd4>)
 800ffea:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	7d1b      	ldrb	r3, [r3, #20]
 800fff0:	2b04      	cmp	r3, #4
 800fff2:	d102      	bne.n	800fffa <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2207      	movs	r2, #7
 800fff8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681a      	ldr	r2, [r3, #0]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 8010002:	68f8      	ldr	r0, [r7, #12]
 8010004:	f7fd fcc2 	bl	800d98c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801000c:	2b00      	cmp	r3, #0
 801000e:	d008      	beq.n	8010022 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010014:	68db      	ldr	r3, [r3, #12]
 8010016:	685a      	ldr	r2, [r3, #4]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801001c:	429a      	cmp	r2, r3
 801001e:	f43f af47 	beq.w	800feb0 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	7e9b      	ldrb	r3, [r3, #26]
 8010026:	f003 0301 	and.w	r3, r3, #1
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00e      	beq.n	801004c <tcp_receive+0xc98>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7e9b      	ldrb	r3, [r3, #26]
 8010032:	f023 0301 	bic.w	r3, r3, #1
 8010036:	b2da      	uxtb	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	769a      	strb	r2, [r3, #26]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	7e9b      	ldrb	r3, [r3, #26]
 8010040:	f043 0302 	orr.w	r3, r3, #2
 8010044:	b2da      	uxtb	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801004a:	e181      	b.n	8010350 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	7e9b      	ldrb	r3, [r3, #26]
 8010050:	f043 0301 	orr.w	r3, r3, #1
 8010054:	b2da      	uxtb	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801005a:	e179      	b.n	8010350 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f001 f8c1 	bl	80111e4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010066:	2b00      	cmp	r3, #0
 8010068:	d106      	bne.n	8010078 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801006a:	4848      	ldr	r0, [pc, #288]	@ (801018c <tcp_receive+0xdd8>)
 801006c:	f7fd fca6 	bl	800d9bc <tcp_seg_copy>
 8010070:	4602      	mov	r2, r0
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 8010076:	e16b      	b.n	8010350 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010078:	2300      	movs	r3, #0
 801007a:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010082:	e150      	b.n	8010326 <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8010084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	685a      	ldr	r2, [r3, #4]
 801008a:	4b41      	ldr	r3, [pc, #260]	@ (8010190 <tcp_receive+0xddc>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	429a      	cmp	r2, r3
 8010090:	d11d      	bne.n	80100ce <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010092:	4b3e      	ldr	r3, [pc, #248]	@ (801018c <tcp_receive+0xdd8>)
 8010094:	891a      	ldrh	r2, [r3, #8]
 8010096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010098:	891b      	ldrh	r3, [r3, #8]
 801009a:	429a      	cmp	r2, r3
 801009c:	f240 8148 	bls.w	8010330 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80100a0:	483a      	ldr	r0, [pc, #232]	@ (801018c <tcp_receive+0xdd8>)
 80100a2:	f7fd fc8b 	bl	800d9bc <tcp_seg_copy>
 80100a6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f000 8142 	beq.w	8010334 <tcp_receive+0xf80>
                  if (prev != NULL) {
 80100b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d003      	beq.n	80100be <tcp_receive+0xd0a>
                    prev->next = cseg;
 80100b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	601a      	str	r2, [r3, #0]
 80100bc:	e002      	b.n	80100c4 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80100c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7ff f8fe 	bl	800f2c8 <tcp_oos_insert_segment>
                }
                break;
 80100cc:	e132      	b.n	8010334 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80100ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d117      	bne.n	8010104 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80100d4:	4b2e      	ldr	r3, [pc, #184]	@ (8010190 <tcp_receive+0xddc>)
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100da:	68db      	ldr	r3, [r3, #12]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	da57      	bge.n	8010194 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80100e4:	4829      	ldr	r0, [pc, #164]	@ (801018c <tcp_receive+0xdd8>)
 80100e6:	f7fd fc69 	bl	800d9bc <tcp_seg_copy>
 80100ea:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	f000 8122 	beq.w	8010338 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	68fa      	ldr	r2, [r7, #12]
 80100f8:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 80100fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f7ff f8e3 	bl	800f2c8 <tcp_oos_insert_segment>
                  }
                  break;
 8010102:	e119      	b.n	8010338 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8010104:	4b22      	ldr	r3, [pc, #136]	@ (8010190 <tcp_receive+0xddc>)
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	685b      	ldr	r3, [r3, #4]
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	3b01      	subs	r3, #1
 8010112:	2b00      	cmp	r3, #0
 8010114:	db3e      	blt.n	8010194 <tcp_receive+0xde0>
 8010116:	4b1e      	ldr	r3, [pc, #120]	@ (8010190 <tcp_receive+0xddc>)
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	3301      	adds	r3, #1
 8010124:	2b00      	cmp	r3, #0
 8010126:	dc35      	bgt.n	8010194 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010128:	4818      	ldr	r0, [pc, #96]	@ (801018c <tcp_receive+0xdd8>)
 801012a:	f7fd fc47 	bl	800d9bc <tcp_seg_copy>
 801012e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2b00      	cmp	r3, #0
 8010134:	f000 8102 	beq.w	801033c <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010140:	8912      	ldrh	r2, [r2, #8]
 8010142:	441a      	add	r2, r3
 8010144:	4b12      	ldr	r3, [pc, #72]	@ (8010190 <tcp_receive+0xddc>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	2b00      	cmp	r3, #0
 801014c:	dd12      	ble.n	8010174 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801014e:	4b10      	ldr	r3, [pc, #64]	@ (8010190 <tcp_receive+0xddc>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	b29a      	uxth	r2, r3
 8010154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	b29b      	uxth	r3, r3
 801015c:	1ad3      	subs	r3, r2, r3
 801015e:	b29a      	uxth	r2, r3
 8010160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010162:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010166:	685a      	ldr	r2, [r3, #4]
 8010168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016a:	891b      	ldrh	r3, [r3, #8]
 801016c:	4619      	mov	r1, r3
 801016e:	4610      	mov	r0, r2
 8010170:	f7fb ffac 	bl	800c0cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801017a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801017c:	68f8      	ldr	r0, [r7, #12]
 801017e:	f7ff f8a3 	bl	800f2c8 <tcp_oos_insert_segment>
                  }
                  break;
 8010182:	e0db      	b.n	801033c <tcp_receive+0xf88>
 8010184:	200098bc 	.word	0x200098bc
 8010188:	200098b9 	.word	0x200098b9
 801018c:	2000988c 	.word	0x2000988c
 8010190:	200098ac 	.word	0x200098ac
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	2b00      	cmp	r3, #0
 801019a:	f040 80bf 	bne.w	801031c <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801019e:	4b7c      	ldr	r3, [pc, #496]	@ (8010390 <tcp_receive+0xfdc>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	685b      	ldr	r3, [r3, #4]
 80101a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	f340 80b6 	ble.w	801031c <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80101b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	899b      	ldrh	r3, [r3, #12]
 80101b6:	b29b      	uxth	r3, r3
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7fa ff25 	bl	800b008 <lwip_htons>
 80101be:	4603      	mov	r3, r0
 80101c0:	f003 0301 	and.w	r3, r3, #1
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f040 80bb 	bne.w	8010340 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80101ca:	4872      	ldr	r0, [pc, #456]	@ (8010394 <tcp_receive+0xfe0>)
 80101cc:	f7fd fbf6 	bl	800d9bc <tcp_seg_copy>
 80101d0:	4602      	mov	r2, r0
 80101d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d4:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80101d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 80b2 	beq.w	8010344 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80101e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101e8:	8912      	ldrh	r2, [r2, #8]
 80101ea:	441a      	add	r2, r3
 80101ec:	4b68      	ldr	r3, [pc, #416]	@ (8010390 <tcp_receive+0xfdc>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	dd12      	ble.n	801021c <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80101f6:	4b66      	ldr	r3, [pc, #408]	@ (8010390 <tcp_receive+0xfdc>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	b29b      	uxth	r3, r3
 8010204:	1ad3      	subs	r3, r2, r3
 8010206:	b29a      	uxth	r2, r3
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801020c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020e:	685a      	ldr	r2, [r3, #4]
 8010210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010212:	891b      	ldrh	r3, [r3, #8]
 8010214:	4619      	mov	r1, r3
 8010216:	4610      	mov	r0, r2
 8010218:	f7fb ff58 	bl	800c0cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801021c:	4b5e      	ldr	r3, [pc, #376]	@ (8010398 <tcp_receive+0xfe4>)
 801021e:	881b      	ldrh	r3, [r3, #0]
 8010220:	461a      	mov	r2, r3
 8010222:	4b5b      	ldr	r3, [pc, #364]	@ (8010390 <tcp_receive+0xfdc>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	441a      	add	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010230:	440b      	add	r3, r1
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	2b00      	cmp	r3, #0
 8010236:	f340 8085 	ble.w	8010344 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801023a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	899b      	ldrh	r3, [r3, #12]
 8010242:	b29b      	uxth	r3, r3
 8010244:	4618      	mov	r0, r3
 8010246:	f7fa fedf 	bl	800b008 <lwip_htons>
 801024a:	4603      	mov	r3, r0
 801024c:	f003 0301 	and.w	r3, r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	d01e      	beq.n	8010292 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	899b      	ldrh	r3, [r3, #12]
 801025c:	b29b      	uxth	r3, r3
 801025e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010262:	b29c      	uxth	r4, r3
 8010264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	899b      	ldrh	r3, [r3, #12]
 801026c:	b29b      	uxth	r3, r3
 801026e:	4618      	mov	r0, r3
 8010270:	f7fa feca 	bl	800b008 <lwip_htons>
 8010274:	4603      	mov	r3, r0
 8010276:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801027a:	b29b      	uxth	r3, r3
 801027c:	4618      	mov	r0, r3
 801027e:	f7fa fec3 	bl	800b008 <lwip_htons>
 8010282:	4603      	mov	r3, r0
 8010284:	461a      	mov	r2, r3
 8010286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	4322      	orrs	r2, r4
 801028e:	b292      	uxth	r2, r2
 8010290:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010296:	b29a      	uxth	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801029c:	4413      	add	r3, r2
 801029e:	b299      	uxth	r1, r3
 80102a0:	4b3b      	ldr	r3, [pc, #236]	@ (8010390 <tcp_receive+0xfdc>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	b29a      	uxth	r2, r3
 80102a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	1a8a      	subs	r2, r1, r2
 80102ac:	b292      	uxth	r2, r2
 80102ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80102b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	891b      	ldrh	r3, [r3, #8]
 80102bc:	4619      	mov	r1, r3
 80102be:	4610      	mov	r0, r2
 80102c0:	f7fb ff04 	bl	800c0cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80102c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	891c      	ldrh	r4, [r3, #8]
 80102ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	899b      	ldrh	r3, [r3, #12]
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fa fe97 	bl	800b008 <lwip_htons>
 80102da:	4603      	mov	r3, r0
 80102dc:	f003 0303 	and.w	r3, r3, #3
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <tcp_receive+0xf34>
 80102e4:	2301      	movs	r3, #1
 80102e6:	e000      	b.n	80102ea <tcp_receive+0xf36>
 80102e8:	2300      	movs	r3, #0
 80102ea:	4423      	add	r3, r4
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	4b2a      	ldr	r3, [pc, #168]	@ (8010398 <tcp_receive+0xfe4>)
 80102f0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102f2:	4b29      	ldr	r3, [pc, #164]	@ (8010398 <tcp_receive+0xfe4>)
 80102f4:	881b      	ldrh	r3, [r3, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	4b25      	ldr	r3, [pc, #148]	@ (8010390 <tcp_receive+0xfdc>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	441a      	add	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010306:	440b      	add	r3, r1
 8010308:	429a      	cmp	r2, r3
 801030a:	d01b      	beq.n	8010344 <tcp_receive+0xf90>
 801030c:	4b23      	ldr	r3, [pc, #140]	@ (801039c <tcp_receive+0xfe8>)
 801030e:	f240 627a 	movw	r2, #1658	@ 0x67a
 8010312:	4923      	ldr	r1, [pc, #140]	@ (80103a0 <tcp_receive+0xfec>)
 8010314:	4823      	ldr	r0, [pc, #140]	@ (80103a4 <tcp_receive+0xff0>)
 8010316:	f006 ff3d 	bl	8017194 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801031a:	e013      	b.n	8010344 <tcp_receive+0xf90>
              }
            }
            prev = next;
 801031c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031e:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010328:	2b00      	cmp	r3, #0
 801032a:	f47f aeab 	bne.w	8010084 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 801032e:	e00f      	b.n	8010350 <tcp_receive+0xf9c>
                break;
 8010330:	bf00      	nop
 8010332:	e00d      	b.n	8010350 <tcp_receive+0xf9c>
                break;
 8010334:	bf00      	nop
 8010336:	e00b      	b.n	8010350 <tcp_receive+0xf9c>
                  break;
 8010338:	bf00      	nop
 801033a:	e009      	b.n	8010350 <tcp_receive+0xf9c>
                  break;
 801033c:	bf00      	nop
 801033e:	e007      	b.n	8010350 <tcp_receive+0xf9c>
                  break;
 8010340:	bf00      	nop
 8010342:	e005      	b.n	8010350 <tcp_receive+0xf9c>
                break;
 8010344:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8010346:	e003      	b.n	8010350 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 ff4b 	bl	80111e4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801034e:	e01a      	b.n	8010386 <tcp_receive+0xfd2>
 8010350:	e019      	b.n	8010386 <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010352:	4b0f      	ldr	r3, [pc, #60]	@ (8010390 <tcp_receive+0xfdc>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	db0a      	blt.n	8010376 <tcp_receive+0xfc2>
 8010360:	4b0b      	ldr	r3, [pc, #44]	@ (8010390 <tcp_receive+0xfdc>)
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010368:	6879      	ldr	r1, [r7, #4]
 801036a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801036c:	440b      	add	r3, r1
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	3301      	adds	r3, #1
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd07      	ble.n	8010386 <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	7e9b      	ldrb	r3, [r3, #26]
 801037a:	f043 0302 	orr.w	r3, r3, #2
 801037e:	b2da      	uxtb	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8010384:	e7ff      	b.n	8010386 <tcp_receive+0xfd2>
 8010386:	bf00      	nop
 8010388:	3734      	adds	r7, #52	@ 0x34
 801038a:	46bd      	mov	sp, r7
 801038c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801038e:	bf00      	nop
 8010390:	200098ac 	.word	0x200098ac
 8010394:	2000988c 	.word	0x2000988c
 8010398:	200098b6 	.word	0x200098b6
 801039c:	08019ad4 	.word	0x08019ad4
 80103a0:	08019da0 	.word	0x08019da0
 80103a4:	08019b18 	.word	0x08019b18

080103a8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80103ae:	4b17      	ldr	r3, [pc, #92]	@ (801040c <tcp_getoptbyte+0x64>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d005      	beq.n	80103c2 <tcp_getoptbyte+0x1a>
 80103b6:	4b16      	ldr	r3, [pc, #88]	@ (8010410 <tcp_getoptbyte+0x68>)
 80103b8:	881a      	ldrh	r2, [r3, #0]
 80103ba:	4b16      	ldr	r3, [pc, #88]	@ (8010414 <tcp_getoptbyte+0x6c>)
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d20e      	bcs.n	80103e0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80103c2:	4b15      	ldr	r3, [pc, #84]	@ (8010418 <tcp_getoptbyte+0x70>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3314      	adds	r3, #20
 80103c8:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80103ca:	4b11      	ldr	r3, [pc, #68]	@ (8010410 <tcp_getoptbyte+0x68>)
 80103cc:	881b      	ldrh	r3, [r3, #0]
 80103ce:	1c5a      	adds	r2, r3, #1
 80103d0:	b291      	uxth	r1, r2
 80103d2:	4a0f      	ldr	r2, [pc, #60]	@ (8010410 <tcp_getoptbyte+0x68>)
 80103d4:	8011      	strh	r1, [r2, #0]
 80103d6:	461a      	mov	r2, r3
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	4413      	add	r3, r2
 80103dc:	781b      	ldrb	r3, [r3, #0]
 80103de:	e010      	b.n	8010402 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80103e0:	4b0b      	ldr	r3, [pc, #44]	@ (8010410 <tcp_getoptbyte+0x68>)
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	1c5a      	adds	r2, r3, #1
 80103e6:	b291      	uxth	r1, r2
 80103e8:	4a09      	ldr	r2, [pc, #36]	@ (8010410 <tcp_getoptbyte+0x68>)
 80103ea:	8011      	strh	r1, [r2, #0]
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	4b09      	ldr	r3, [pc, #36]	@ (8010414 <tcp_getoptbyte+0x6c>)
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	1ad3      	subs	r3, r2, r3
 80103f6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80103f8:	4b04      	ldr	r3, [pc, #16]	@ (801040c <tcp_getoptbyte+0x64>)
 80103fa:	681a      	ldr	r2, [r3, #0]
 80103fc:	79fb      	ldrb	r3, [r7, #7]
 80103fe:	4413      	add	r3, r2
 8010400:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010402:	4618      	mov	r0, r3
 8010404:	370c      	adds	r7, #12
 8010406:	46bd      	mov	sp, r7
 8010408:	bc80      	pop	{r7}
 801040a:	4770      	bx	lr
 801040c:	200098a4 	.word	0x200098a4
 8010410:	200098a8 	.word	0x200098a8
 8010414:	200098a2 	.word	0x200098a2
 8010418:	2000989c 	.word	0x2000989c

0801041c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010424:	4b2e      	ldr	r3, [pc, #184]	@ (80104e0 <tcp_parseopt+0xc4>)
 8010426:	881b      	ldrh	r3, [r3, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d056      	beq.n	80104da <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801042c:	4b2d      	ldr	r3, [pc, #180]	@ (80104e4 <tcp_parseopt+0xc8>)
 801042e:	2200      	movs	r2, #0
 8010430:	801a      	strh	r2, [r3, #0]
 8010432:	e046      	b.n	80104c2 <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 8010434:	f7ff ffb8 	bl	80103a8 <tcp_getoptbyte>
 8010438:	4603      	mov	r3, r0
 801043a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801043c:	7bfb      	ldrb	r3, [r7, #15]
 801043e:	2b02      	cmp	r3, #2
 8010440:	d006      	beq.n	8010450 <tcp_parseopt+0x34>
 8010442:	2b02      	cmp	r3, #2
 8010444:	dc2a      	bgt.n	801049c <tcp_parseopt+0x80>
 8010446:	2b00      	cmp	r3, #0
 8010448:	d042      	beq.n	80104d0 <tcp_parseopt+0xb4>
 801044a:	2b01      	cmp	r3, #1
 801044c:	d038      	beq.n	80104c0 <tcp_parseopt+0xa4>
 801044e:	e025      	b.n	801049c <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010450:	f7ff ffaa 	bl	80103a8 <tcp_getoptbyte>
 8010454:	4603      	mov	r3, r0
 8010456:	2b04      	cmp	r3, #4
 8010458:	d13c      	bne.n	80104d4 <tcp_parseopt+0xb8>
 801045a:	4b22      	ldr	r3, [pc, #136]	@ (80104e4 <tcp_parseopt+0xc8>)
 801045c:	881b      	ldrh	r3, [r3, #0]
 801045e:	3301      	adds	r3, #1
 8010460:	4a1f      	ldr	r2, [pc, #124]	@ (80104e0 <tcp_parseopt+0xc4>)
 8010462:	8812      	ldrh	r2, [r2, #0]
 8010464:	4293      	cmp	r3, r2
 8010466:	da35      	bge.n	80104d4 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8010468:	f7ff ff9e 	bl	80103a8 <tcp_getoptbyte>
 801046c:	4603      	mov	r3, r0
 801046e:	021b      	lsls	r3, r3, #8
 8010470:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8010472:	f7ff ff99 	bl	80103a8 <tcp_getoptbyte>
 8010476:	4603      	mov	r3, r0
 8010478:	461a      	mov	r2, r3
 801047a:	89bb      	ldrh	r3, [r7, #12]
 801047c:	4313      	orrs	r3, r2
 801047e:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010480:	89bb      	ldrh	r3, [r7, #12]
 8010482:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010486:	d804      	bhi.n	8010492 <tcp_parseopt+0x76>
 8010488:	89bb      	ldrh	r3, [r7, #12]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d001      	beq.n	8010492 <tcp_parseopt+0x76>
 801048e:	89ba      	ldrh	r2, [r7, #12]
 8010490:	e001      	b.n	8010496 <tcp_parseopt+0x7a>
 8010492:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 801049a:	e012      	b.n	80104c2 <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801049c:	f7ff ff84 	bl	80103a8 <tcp_getoptbyte>
 80104a0:	4603      	mov	r3, r0
 80104a2:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80104a4:	7afb      	ldrb	r3, [r7, #11]
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d916      	bls.n	80104d8 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80104aa:	7afb      	ldrb	r3, [r7, #11]
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	4b0d      	ldr	r3, [pc, #52]	@ (80104e4 <tcp_parseopt+0xc8>)
 80104b0:	881b      	ldrh	r3, [r3, #0]
 80104b2:	4413      	add	r3, r2
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	3b02      	subs	r3, #2
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	4b0a      	ldr	r3, [pc, #40]	@ (80104e4 <tcp_parseopt+0xc8>)
 80104bc:	801a      	strh	r2, [r3, #0]
 80104be:	e000      	b.n	80104c2 <tcp_parseopt+0xa6>
        break;
 80104c0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80104c2:	4b08      	ldr	r3, [pc, #32]	@ (80104e4 <tcp_parseopt+0xc8>)
 80104c4:	881a      	ldrh	r2, [r3, #0]
 80104c6:	4b06      	ldr	r3, [pc, #24]	@ (80104e0 <tcp_parseopt+0xc4>)
 80104c8:	881b      	ldrh	r3, [r3, #0]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d3b2      	bcc.n	8010434 <tcp_parseopt+0x18>
 80104ce:	e004      	b.n	80104da <tcp_parseopt+0xbe>
        return;
 80104d0:	bf00      	nop
 80104d2:	e002      	b.n	80104da <tcp_parseopt+0xbe>
          return;
 80104d4:	bf00      	nop
 80104d6:	e000      	b.n	80104da <tcp_parseopt+0xbe>
          return;
 80104d8:	bf00      	nop
      }
    }
  }
}
 80104da:	3710      	adds	r7, #16
 80104dc:	46bd      	mov	sp, r7
 80104de:	bd80      	pop	{r7, pc}
 80104e0:	200098a0 	.word	0x200098a0
 80104e4:	200098a8 	.word	0x200098a8

080104e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80104e8:	b480      	push	{r7}
 80104ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80104ec:	4b05      	ldr	r3, [pc, #20]	@ (8010504 <tcp_trigger_input_pcb_close+0x1c>)
 80104ee:	781b      	ldrb	r3, [r3, #0]
 80104f0:	f043 0310 	orr.w	r3, r3, #16
 80104f4:	b2da      	uxtb	r2, r3
 80104f6:	4b03      	ldr	r3, [pc, #12]	@ (8010504 <tcp_trigger_input_pcb_close+0x1c>)
 80104f8:	701a      	strb	r2, [r3, #0]
}
 80104fa:	bf00      	nop
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bc80      	pop	{r7}
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop
 8010504:	200098b9 	.word	0x200098b9

08010508 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	60f8      	str	r0, [r7, #12]
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	460b      	mov	r3, r1
 8010514:	817b      	strh	r3, [r7, #10]
 8010516:	4613      	mov	r3, r2
 8010518:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801051a:	897a      	ldrh	r2, [r7, #10]
 801051c:	893b      	ldrh	r3, [r7, #8]
 801051e:	4413      	add	r3, r2
 8010520:	b29b      	uxth	r3, r3
 8010522:	3314      	adds	r3, #20
 8010524:	b29b      	uxth	r3, r3
 8010526:	2200      	movs	r2, #0
 8010528:	4619      	mov	r1, r3
 801052a:	2001      	movs	r0, #1
 801052c:	f7fb fbca 	bl	800bcc4 <pbuf_alloc>
 8010530:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d056      	beq.n	80105e6 <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010538:	897b      	ldrh	r3, [r7, #10]
 801053a:	3313      	adds	r3, #19
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	8952      	ldrh	r2, [r2, #10]
 8010540:	4293      	cmp	r3, r2
 8010542:	db05      	blt.n	8010550 <tcp_output_alloc_header+0x48>
 8010544:	4b2a      	ldr	r3, [pc, #168]	@ (80105f0 <tcp_output_alloc_header+0xe8>)
 8010546:	2272      	movs	r2, #114	@ 0x72
 8010548:	492a      	ldr	r1, [pc, #168]	@ (80105f4 <tcp_output_alloc_header+0xec>)
 801054a:	482b      	ldr	r0, [pc, #172]	@ (80105f8 <tcp_output_alloc_header+0xf0>)
 801054c:	f006 fe22 	bl	8017194 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	8adb      	ldrh	r3, [r3, #22]
 801055a:	4618      	mov	r0, r3
 801055c:	f7fa fd54 	bl	800b008 <lwip_htons>
 8010560:	4603      	mov	r3, r0
 8010562:	461a      	mov	r2, r3
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	8b1b      	ldrh	r3, [r3, #24]
 801056c:	4618      	mov	r0, r3
 801056e:	f7fa fd4b 	bl	800b008 <lwip_htons>
 8010572:	4603      	mov	r3, r0
 8010574:	461a      	mov	r2, r3
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010584:	4618      	mov	r0, r3
 8010586:	f7fa fd4c 	bl	800b022 <lwip_htonl>
 801058a:	4602      	mov	r2, r0
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010590:	897b      	ldrh	r3, [r7, #10]
 8010592:	089b      	lsrs	r3, r3, #2
 8010594:	b29b      	uxth	r3, r3
 8010596:	3305      	adds	r3, #5
 8010598:	b29b      	uxth	r3, r3
 801059a:	031b      	lsls	r3, r3, #12
 801059c:	b29b      	uxth	r3, r3
 801059e:	f043 0310 	orr.w	r3, r3, #16
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fa fd2f 	bl	800b008 <lwip_htons>
 80105aa:	4603      	mov	r3, r0
 80105ac:	461a      	mov	r2, r3
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fa fd26 	bl	800b008 <lwip_htons>
 80105bc:	4603      	mov	r3, r0
 80105be:	461a      	mov	r2, r3
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	2200      	movs	r2, #0
 80105c8:	741a      	strb	r2, [r3, #16]
 80105ca:	2200      	movs	r2, #0
 80105cc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	2200      	movs	r2, #0
 80105d2:	749a      	strb	r2, [r3, #18]
 80105d4:	2200      	movs	r2, #0
 80105d6:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80105e0:	441a      	add	r2, r3
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80105e6:	697b      	ldr	r3, [r7, #20]
}
 80105e8:	4618      	mov	r0, r3
 80105ea:	3718      	adds	r7, #24
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	08019e5c 	.word	0x08019e5c
 80105f4:	08019e90 	.word	0x08019e90
 80105f8:	08019ec0 	.word	0x08019ec0

080105fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80105fc:	b590      	push	{r4, r7, lr}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010608:	2b00      	cmp	r3, #0
 801060a:	d02d      	beq.n	8010668 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010610:	60fb      	str	r3, [r7, #12]
 8010612:	e002      	b.n	801061a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1f8      	bne.n	8010614 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	899b      	ldrh	r3, [r3, #12]
 8010628:	b29b      	uxth	r3, r3
 801062a:	4618      	mov	r0, r3
 801062c:	f7fa fcec 	bl	800b008 <lwip_htons>
 8010630:	4603      	mov	r3, r0
 8010632:	f003 0307 	and.w	r3, r3, #7
 8010636:	2b00      	cmp	r3, #0
 8010638:	d116      	bne.n	8010668 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	899b      	ldrh	r3, [r3, #12]
 8010640:	b29c      	uxth	r4, r3
 8010642:	2001      	movs	r0, #1
 8010644:	f7fa fce0 	bl	800b008 <lwip_htons>
 8010648:	4603      	mov	r3, r0
 801064a:	461a      	mov	r2, r3
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	4322      	orrs	r2, r4
 8010652:	b292      	uxth	r2, r2
 8010654:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	7e9b      	ldrb	r3, [r3, #26]
 801065a:	f043 0320 	orr.w	r3, r3, #32
 801065e:	b2da      	uxtb	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8010664:	2300      	movs	r3, #0
 8010666:	e004      	b.n	8010672 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010668:	2101      	movs	r1, #1
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fcbe 	bl	8010fec <tcp_enqueue_flags>
 8010670:	4603      	mov	r3, r0
}
 8010672:	4618      	mov	r0, r3
 8010674:	3714      	adds	r7, #20
 8010676:	46bd      	mov	sp, r7
 8010678:	bd90      	pop	{r4, r7, pc}
	...

0801067c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 801067c:	b590      	push	{r4, r7, lr}
 801067e:	b087      	sub	sp, #28
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	603b      	str	r3, [r7, #0]
 8010688:	4613      	mov	r3, r2
 801068a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801068c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	b2db      	uxtb	r3, r3
 8010694:	f003 0304 	and.w	r3, r3, #4
 8010698:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801069a:	2003      	movs	r0, #3
 801069c:	f7fb f8a0 	bl	800b7e0 <memp_malloc>
 80106a0:	6138      	str	r0, [r7, #16]
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d104      	bne.n	80106b2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80106a8:	68b8      	ldr	r0, [r7, #8]
 80106aa:	f7fb fe83 	bl	800c3b4 <pbuf_free>
    return NULL;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e060      	b.n	8010774 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 80106b2:	693b      	ldr	r3, [r7, #16]
 80106b4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80106b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	2200      	movs	r2, #0
 80106be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80106c0:	693b      	ldr	r3, [r7, #16]
 80106c2:	68ba      	ldr	r2, [r7, #8]
 80106c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	891a      	ldrh	r2, [r3, #8]
 80106ca:	7dfb      	ldrb	r3, [r7, #23]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d205      	bcs.n	80106de <tcp_create_segment+0x62>
 80106d2:	4b2a      	ldr	r3, [pc, #168]	@ (801077c <tcp_create_segment+0x100>)
 80106d4:	22ba      	movs	r2, #186	@ 0xba
 80106d6:	492a      	ldr	r1, [pc, #168]	@ (8010780 <tcp_create_segment+0x104>)
 80106d8:	482a      	ldr	r0, [pc, #168]	@ (8010784 <tcp_create_segment+0x108>)
 80106da:	f006 fd5b 	bl	8017194 <iprintf>
  seg->len = p->tot_len - optlen;
 80106de:	68bb      	ldr	r3, [r7, #8]
 80106e0:	891a      	ldrh	r2, [r3, #8]
 80106e2:	7dfb      	ldrb	r3, [r7, #23]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80106ee:	2114      	movs	r1, #20
 80106f0:	68b8      	ldr	r0, [r7, #8]
 80106f2:	f7fb fe3b 	bl	800c36c <pbuf_header>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d004      	beq.n	8010706 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80106fc:	6938      	ldr	r0, [r7, #16]
 80106fe:	f7fd f945 	bl	800d98c <tcp_seg_free>
    return NULL;
 8010702:	2300      	movs	r3, #0
 8010704:	e036      	b.n	8010774 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	685a      	ldr	r2, [r3, #4]
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	8ada      	ldrh	r2, [r3, #22]
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	68dc      	ldr	r4, [r3, #12]
 8010718:	4610      	mov	r0, r2
 801071a:	f7fa fc75 	bl	800b008 <lwip_htons>
 801071e:	4603      	mov	r3, r0
 8010720:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	8b1a      	ldrh	r2, [r3, #24]
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	68dc      	ldr	r4, [r3, #12]
 801072a:	4610      	mov	r0, r2
 801072c:	f7fa fc6c 	bl	800b008 <lwip_htons>
 8010730:	4603      	mov	r3, r0
 8010732:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	68dc      	ldr	r4, [r3, #12]
 8010738:	6838      	ldr	r0, [r7, #0]
 801073a:	f7fa fc72 	bl	800b022 <lwip_htonl>
 801073e:	4603      	mov	r3, r0
 8010740:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010742:	7dfb      	ldrb	r3, [r7, #23]
 8010744:	089b      	lsrs	r3, r3, #2
 8010746:	b2db      	uxtb	r3, r3
 8010748:	3305      	adds	r3, #5
 801074a:	b29b      	uxth	r3, r3
 801074c:	031b      	lsls	r3, r3, #12
 801074e:	b29a      	uxth	r2, r3
 8010750:	79fb      	ldrb	r3, [r7, #7]
 8010752:	b29b      	uxth	r3, r3
 8010754:	4313      	orrs	r3, r2
 8010756:	b29a      	uxth	r2, r3
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	68dc      	ldr	r4, [r3, #12]
 801075c:	4610      	mov	r0, r2
 801075e:	f7fa fc53 	bl	800b008 <lwip_htons>
 8010762:	4603      	mov	r3, r0
 8010764:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	2200      	movs	r2, #0
 801076c:	749a      	strb	r2, [r3, #18]
 801076e:	2200      	movs	r2, #0
 8010770:	74da      	strb	r2, [r3, #19]
  return seg;
 8010772:	693b      	ldr	r3, [r7, #16]
}
 8010774:	4618      	mov	r0, r3
 8010776:	371c      	adds	r7, #28
 8010778:	46bd      	mov	sp, r7
 801077a:	bd90      	pop	{r4, r7, pc}
 801077c:	08019e5c 	.word	0x08019e5c
 8010780:	08019ee8 	.word	0x08019ee8
 8010784:	08019ec0 	.word	0x08019ec0

08010788 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	607b      	str	r3, [r7, #4]
 8010790:	4603      	mov	r3, r0
 8010792:	73fb      	strb	r3, [r7, #15]
 8010794:	460b      	mov	r3, r1
 8010796:	81bb      	strh	r3, [r7, #12]
 8010798:	4613      	mov	r3, r2
 801079a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801079c:	89bb      	ldrh	r3, [r7, #12]
 801079e:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80107a0:	89ba      	ldrh	r2, [r7, #12]
 80107a2:	897b      	ldrh	r3, [r7, #10]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d221      	bcs.n	80107ec <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80107a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80107ac:	f003 0302 	and.w	r3, r3, #2
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d111      	bne.n	80107d8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	7e9b      	ldrb	r3, [r3, #26]
 80107b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d115      	bne.n	80107ec <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 80107c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d007      	beq.n	80107d8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d103      	bne.n	80107d8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80107d0:	6a3b      	ldr	r3, [r7, #32]
 80107d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d009      	beq.n	80107ec <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80107d8:	89bb      	ldrh	r3, [r7, #12]
 80107da:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80107de:	f023 0203 	bic.w	r2, r3, #3
 80107e2:	897b      	ldrh	r3, [r7, #10]
 80107e4:	4293      	cmp	r3, r2
 80107e6:	bf28      	it	cs
 80107e8:	4613      	movcs	r3, r2
 80107ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80107ec:	8af9      	ldrh	r1, [r7, #22]
 80107ee:	7bfb      	ldrb	r3, [r7, #15]
 80107f0:	2200      	movs	r2, #0
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fb fa66 	bl	800bcc4 <pbuf_alloc>
 80107f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d101      	bne.n	8010804 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8010800:	2300      	movs	r3, #0
 8010802:	e019      	b.n	8010838 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d006      	beq.n	801081a <tcp_pbuf_prealloc+0x92>
 801080c:	4b0c      	ldr	r3, [pc, #48]	@ (8010840 <tcp_pbuf_prealloc+0xb8>)
 801080e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8010812:	490c      	ldr	r1, [pc, #48]	@ (8010844 <tcp_pbuf_prealloc+0xbc>)
 8010814:	480c      	ldr	r0, [pc, #48]	@ (8010848 <tcp_pbuf_prealloc+0xc0>)
 8010816:	f006 fcbd 	bl	8017194 <iprintf>
  *oversize = p->len - length;
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	895a      	ldrh	r2, [r3, #10]
 801081e:	89bb      	ldrh	r3, [r7, #12]
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	b29a      	uxth	r2, r3
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	89ba      	ldrh	r2, [r7, #12]
 801082c:	811a      	strh	r2, [r3, #8]
 801082e:	693b      	ldr	r3, [r7, #16]
 8010830:	891a      	ldrh	r2, [r3, #8]
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	815a      	strh	r2, [r3, #10]
  return p;
 8010836:	693b      	ldr	r3, [r7, #16]
}
 8010838:	4618      	mov	r0, r3
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	08019e5c 	.word	0x08019e5c
 8010844:	08019f00 	.word	0x08019f00
 8010848:	08019ec0 	.word	0x08019ec0

0801084c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
 8010854:	460b      	mov	r3, r1
 8010856:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	7d1b      	ldrb	r3, [r3, #20]
 801085c:	2b04      	cmp	r3, #4
 801085e:	d00e      	beq.n	801087e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010864:	2b07      	cmp	r3, #7
 8010866:	d00a      	beq.n	801087e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801086c:	2b02      	cmp	r3, #2
 801086e:	d006      	beq.n	801087e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010874:	2b03      	cmp	r3, #3
 8010876:	d002      	beq.n	801087e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010878:	f06f 030a 	mvn.w	r3, #10
 801087c:	e04f      	b.n	801091e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 801087e:	887b      	ldrh	r3, [r7, #2]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	e04a      	b.n	801091e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801088e:	887a      	ldrh	r2, [r7, #2]
 8010890:	429a      	cmp	r2, r3
 8010892:	d909      	bls.n	80108a8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	7e9b      	ldrb	r3, [r3, #26]
 8010898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801089c:	b2da      	uxtb	r2, r3
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80108a2:	f04f 33ff 	mov.w	r3, #4294967295
 80108a6:	e03a      	b.n	801091e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108ae:	2b08      	cmp	r3, #8
 80108b0:	d806      	bhi.n	80108c0 <tcp_write_checks+0x74>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108b8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 80108bc:	4293      	cmp	r3, r2
 80108be:	d909      	bls.n	80108d4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	7e9b      	ldrb	r3, [r3, #26]
 80108c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80108c8:	b2da      	uxtb	r2, r3
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80108ce:	f04f 33ff 	mov.w	r3, #4294967295
 80108d2:	e024      	b.n	801091e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00f      	beq.n	80108fe <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d11a      	bne.n	801091c <tcp_write_checks+0xd0>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d116      	bne.n	801091c <tcp_write_checks+0xd0>
 80108ee:	4b0e      	ldr	r3, [pc, #56]	@ (8010928 <tcp_write_checks+0xdc>)
 80108f0:	f240 1255 	movw	r2, #341	@ 0x155
 80108f4:	490d      	ldr	r1, [pc, #52]	@ (801092c <tcp_write_checks+0xe0>)
 80108f6:	480e      	ldr	r0, [pc, #56]	@ (8010930 <tcp_write_checks+0xe4>)
 80108f8:	f006 fc4c 	bl	8017194 <iprintf>
 80108fc:	e00e      	b.n	801091c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010902:	2b00      	cmp	r3, #0
 8010904:	d103      	bne.n	801090e <tcp_write_checks+0xc2>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801090a:	2b00      	cmp	r3, #0
 801090c:	d006      	beq.n	801091c <tcp_write_checks+0xd0>
 801090e:	4b06      	ldr	r3, [pc, #24]	@ (8010928 <tcp_write_checks+0xdc>)
 8010910:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8010914:	4907      	ldr	r1, [pc, #28]	@ (8010934 <tcp_write_checks+0xe8>)
 8010916:	4806      	ldr	r0, [pc, #24]	@ (8010930 <tcp_write_checks+0xe4>)
 8010918:	f006 fc3c 	bl	8017194 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801091c:	2300      	movs	r3, #0
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	08019e5c 	.word	0x08019e5c
 801092c:	08019f14 	.word	0x08019f14
 8010930:	08019ec0 	.word	0x08019ec0
 8010934:	08019f50 	.word	0x08019f50

08010938 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010938:	b590      	push	{r4, r7, lr}
 801093a:	b09b      	sub	sp, #108	@ 0x6c
 801093c:	af04      	add	r7, sp, #16
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	4611      	mov	r1, r2
 8010944:	461a      	mov	r2, r3
 8010946:	460b      	mov	r3, r1
 8010948:	80fb      	strh	r3, [r7, #6]
 801094a:	4613      	mov	r3, r2
 801094c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801094e:	2300      	movs	r3, #0
 8010950:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010952:	2300      	movs	r3, #0
 8010954:	653b      	str	r3, [r7, #80]	@ 0x50
 8010956:	2300      	movs	r3, #0
 8010958:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801095a:	2300      	movs	r3, #0
 801095c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801095e:	2300      	movs	r3, #0
 8010960:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010962:	2300      	movs	r3, #0
 8010964:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010968:	2300      	movs	r3, #0
 801096a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010974:	2300      	movs	r3, #0
 8010976:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010978:	2300      	movs	r3, #0
 801097a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801097c:	2300      	movs	r3, #0
 801097e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010986:	085b      	lsrs	r3, r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801098e:	4293      	cmp	r3, r2
 8010990:	bf28      	it	cs
 8010992:	4613      	movcs	r3, r2
 8010994:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010996:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010998:	2b00      	cmp	r3, #0
 801099a:	d102      	bne.n	80109a2 <tcp_write+0x6a>
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80109a0:	e000      	b.n	80109a4 <tcp_write+0x6c>
 80109a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80109a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80109a6:	68bb      	ldr	r3, [r7, #8]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d109      	bne.n	80109c0 <tcp_write+0x88>
 80109ac:	4b92      	ldr	r3, [pc, #584]	@ (8010bf8 <tcp_write+0x2c0>)
 80109ae:	f240 1291 	movw	r2, #401	@ 0x191
 80109b2:	4992      	ldr	r1, [pc, #584]	@ (8010bfc <tcp_write+0x2c4>)
 80109b4:	4892      	ldr	r0, [pc, #584]	@ (8010c00 <tcp_write+0x2c8>)
 80109b6:	f006 fbed 	bl	8017194 <iprintf>
 80109ba:	f06f 030f 	mvn.w	r3, #15
 80109be:	e30a      	b.n	8010fd6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80109c0:	88fb      	ldrh	r3, [r7, #6]
 80109c2:	4619      	mov	r1, r3
 80109c4:	68f8      	ldr	r0, [r7, #12]
 80109c6:	f7ff ff41 	bl	801084c <tcp_write_checks>
 80109ca:	4603      	mov	r3, r0
 80109cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80109d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <tcp_write+0xa6>
    return err;
 80109d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80109dc:	e2fb      	b.n	8010fd6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80109e4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 80f4 	beq.w	8010bda <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80109f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80109f8:	e002      	b.n	8010a00 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80109fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d1f8      	bne.n	80109fa <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a0a:	7a9b      	ldrb	r3, [r3, #10]
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010a16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a1a:	891b      	ldrh	r3, [r3, #8]
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	8c3b      	ldrh	r3, [r7, #32]
 8010a20:	440b      	add	r3, r1
 8010a22:	429a      	cmp	r2, r3
 8010a24:	da06      	bge.n	8010a34 <tcp_write+0xfc>
 8010a26:	4b74      	ldr	r3, [pc, #464]	@ (8010bf8 <tcp_write+0x2c0>)
 8010a28:	f240 12c7 	movw	r2, #455	@ 0x1c7
 8010a2c:	4975      	ldr	r1, [pc, #468]	@ (8010c04 <tcp_write+0x2cc>)
 8010a2e:	4874      	ldr	r0, [pc, #464]	@ (8010c00 <tcp_write+0x2c8>)
 8010a30:	f006 fbb0 	bl	8017194 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a36:	891a      	ldrh	r2, [r3, #8]
 8010a38:	8c3b      	ldrh	r3, [r7, #32]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010a4a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010a4c:	8a7b      	ldrh	r3, [r7, #18]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d026      	beq.n	8010aa0 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010a52:	8a7b      	ldrh	r3, [r7, #18]
 8010a54:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d206      	bcs.n	8010a68 <tcp_write+0x130>
 8010a5a:	4b67      	ldr	r3, [pc, #412]	@ (8010bf8 <tcp_write+0x2c0>)
 8010a5c:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8010a60:	4969      	ldr	r1, [pc, #420]	@ (8010c08 <tcp_write+0x2d0>)
 8010a62:	4867      	ldr	r0, [pc, #412]	@ (8010c00 <tcp_write+0x2c8>)
 8010a64:	f006 fb96 	bl	8017194 <iprintf>
      seg = last_unsent;
 8010a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010a6c:	8a7b      	ldrh	r3, [r7, #18]
 8010a6e:	88fa      	ldrh	r2, [r7, #6]
 8010a70:	4293      	cmp	r3, r2
 8010a72:	bf28      	it	cs
 8010a74:	4613      	movcs	r3, r2
 8010a76:	b29b      	uxth	r3, r3
 8010a78:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010a7a:	4293      	cmp	r3, r2
 8010a7c:	bf28      	it	cs
 8010a7e:	4613      	movcs	r3, r2
 8010a80:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8010a82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010a86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010a88:	4413      	add	r3, r2
 8010a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8010a8e:	8a7a      	ldrh	r2, [r7, #18]
 8010a90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010a92:	1ad3      	subs	r3, r2, r3
 8010a94:	b29b      	uxth	r3, r3
 8010a96:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010a98:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010a9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010aa0:	8a7b      	ldrh	r3, [r7, #18]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d00b      	beq.n	8010abe <tcp_write+0x186>
 8010aa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010aaa:	88fb      	ldrh	r3, [r7, #6]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d006      	beq.n	8010abe <tcp_write+0x186>
 8010ab0:	4b51      	ldr	r3, [pc, #324]	@ (8010bf8 <tcp_write+0x2c0>)
 8010ab2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010ab6:	4955      	ldr	r1, [pc, #340]	@ (8010c0c <tcp_write+0x2d4>)
 8010ab8:	4851      	ldr	r0, [pc, #324]	@ (8010c00 <tcp_write+0x2c8>)
 8010aba:	f006 fb6b 	bl	8017194 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010abe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010ac2:	88fb      	ldrh	r3, [r7, #6]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	f080 8169 	bcs.w	8010d9c <tcp_write+0x464>
 8010aca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f000 8165 	beq.w	8010d9c <tcp_write+0x464>
 8010ad2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ad4:	891b      	ldrh	r3, [r3, #8]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f000 8160 	beq.w	8010d9c <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010adc:	88fa      	ldrh	r2, [r7, #6]
 8010ade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ae2:	1ad2      	subs	r2, r2, r3
 8010ae4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	bfa8      	it	ge
 8010aea:	4613      	movge	r3, r2
 8010aec:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010af0:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010af2:	797b      	ldrb	r3, [r7, #5]
 8010af4:	f003 0301 	and.w	r3, r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d027      	beq.n	8010b4c <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010afc:	f107 0012 	add.w	r0, r7, #18
 8010b00:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8010b02:	8bf9      	ldrh	r1, [r7, #30]
 8010b04:	2301      	movs	r3, #1
 8010b06:	9302      	str	r3, [sp, #8]
 8010b08:	797b      	ldrb	r3, [r7, #5]
 8010b0a:	9301      	str	r3, [sp, #4]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4603      	mov	r3, r0
 8010b12:	2004      	movs	r0, #4
 8010b14:	f7ff fe38 	bl	8010788 <tcp_pbuf_prealloc>
 8010b18:	6578      	str	r0, [r7, #84]	@ 0x54
 8010b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 8228 	beq.w	8010f72 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b24:	6858      	ldr	r0, [r3, #4]
 8010b26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b2a:	68ba      	ldr	r2, [r7, #8]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	8bfa      	ldrh	r2, [r7, #30]
 8010b30:	4619      	mov	r1, r3
 8010b32:	f006 fd74 	bl	801761e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010b36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010b38:	f7fb fcd6 	bl	800c4e8 <pbuf_clen>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	461a      	mov	r2, r3
 8010b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010b44:	4413      	add	r3, r2
 8010b46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8010b4a:	e03f      	b.n	8010bcc <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b52:	e002      	b.n	8010b5a <tcp_write+0x222>
 8010b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1f8      	bne.n	8010b54 <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b64:	7b1b      	ldrb	r3, [r3, #12]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d115      	bne.n	8010b96 <tcp_write+0x25e>
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b70:	8952      	ldrh	r2, [r2, #10]
 8010b72:	4413      	add	r3, r2
 8010b74:	68ba      	ldr	r2, [r7, #8]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d10d      	bne.n	8010b96 <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010b7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d006      	beq.n	8010b90 <tcp_write+0x258>
 8010b82:	4b1d      	ldr	r3, [pc, #116]	@ (8010bf8 <tcp_write+0x2c0>)
 8010b84:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8010b88:	4921      	ldr	r1, [pc, #132]	@ (8010c10 <tcp_write+0x2d8>)
 8010b8a:	481d      	ldr	r0, [pc, #116]	@ (8010c00 <tcp_write+0x2c8>)
 8010b8c:	f006 fb02 	bl	8017194 <iprintf>
          extendlen = seglen;
 8010b90:	8bfb      	ldrh	r3, [r7, #30]
 8010b92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8010b94:	e01a      	b.n	8010bcc <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010b96:	8bfb      	ldrh	r3, [r7, #30]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	2004      	movs	r0, #4
 8010b9e:	f7fb f891 	bl	800bcc4 <pbuf_alloc>
 8010ba2:	6578      	str	r0, [r7, #84]	@ 0x54
 8010ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 81e5 	beq.w	8010f76 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010bac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	441a      	add	r2, r3
 8010bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010bb6:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010bb8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010bba:	f7fb fc95 	bl	800c4e8 <pbuf_clen>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010bcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010bd0:	8bfb      	ldrh	r3, [r7, #30]
 8010bd2:	4413      	add	r3, r2
 8010bd4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8010bd8:	e0e0      	b.n	8010d9c <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	f000 80db 	beq.w	8010d9c <tcp_write+0x464>
 8010be6:	4b04      	ldr	r3, [pc, #16]	@ (8010bf8 <tcp_write+0x2c0>)
 8010be8:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8010bec:	4909      	ldr	r1, [pc, #36]	@ (8010c14 <tcp_write+0x2dc>)
 8010bee:	4804      	ldr	r0, [pc, #16]	@ (8010c00 <tcp_write+0x2c8>)
 8010bf0:	f006 fad0 	bl	8017194 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010bf4:	e0d2      	b.n	8010d9c <tcp_write+0x464>
 8010bf6:	bf00      	nop
 8010bf8:	08019e5c 	.word	0x08019e5c
 8010bfc:	08019f84 	.word	0x08019f84
 8010c00:	08019ec0 	.word	0x08019ec0
 8010c04:	08019fb8 	.word	0x08019fb8
 8010c08:	08019fd0 	.word	0x08019fd0
 8010c0c:	08019ff0 	.word	0x08019ff0
 8010c10:	0801a010 	.word	0x0801a010
 8010c14:	0801a03c 	.word	0x0801a03c
    struct pbuf *p;
    u16_t left = len - pos;
 8010c18:	88fa      	ldrh	r2, [r7, #6]
 8010c1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010c1e:	1ad3      	subs	r3, r2, r3
 8010c20:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010c22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c26:	b29b      	uxth	r3, r3
 8010c28:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010c2a:	1ad3      	subs	r3, r2, r3
 8010c2c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010c2e:	8b7a      	ldrh	r2, [r7, #26]
 8010c30:	8bbb      	ldrh	r3, [r7, #28]
 8010c32:	4293      	cmp	r3, r2
 8010c34:	bf28      	it	cs
 8010c36:	4613      	movcs	r3, r2
 8010c38:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010c3a:	797b      	ldrb	r3, [r7, #5]
 8010c3c:	f003 0301 	and.w	r3, r3, #1
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d036      	beq.n	8010cb2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010c44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	8b3b      	ldrh	r3, [r7, #24]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	b299      	uxth	r1, r3
 8010c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	bf0c      	ite	eq
 8010c56:	2301      	moveq	r3, #1
 8010c58:	2300      	movne	r3, #0
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	f107 0012 	add.w	r0, r7, #18
 8010c60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010c62:	9302      	str	r3, [sp, #8]
 8010c64:	797b      	ldrb	r3, [r7, #5]
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	9300      	str	r3, [sp, #0]
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2000      	movs	r0, #0
 8010c70:	f7ff fd8a 	bl	8010788 <tcp_pbuf_prealloc>
 8010c74:	6338      	str	r0, [r7, #48]	@ 0x30
 8010c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	f000 817e 	beq.w	8010f7a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c80:	895b      	ldrh	r3, [r3, #10]
 8010c82:	8b3a      	ldrh	r2, [r7, #24]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d906      	bls.n	8010c96 <tcp_write+0x35e>
 8010c88:	4b8f      	ldr	r3, [pc, #572]	@ (8010ec8 <tcp_write+0x590>)
 8010c8a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8010c8e:	498f      	ldr	r1, [pc, #572]	@ (8010ecc <tcp_write+0x594>)
 8010c90:	488f      	ldr	r0, [pc, #572]	@ (8010ed0 <tcp_write+0x598>)
 8010c92:	f006 fa7f 	bl	8017194 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c98:	685a      	ldr	r2, [r3, #4]
 8010c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c9e:	18d0      	adds	r0, r2, r3
 8010ca0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ca4:	68ba      	ldr	r2, [r7, #8]
 8010ca6:	4413      	add	r3, r2
 8010ca8:	8b3a      	ldrh	r2, [r7, #24]
 8010caa:	4619      	mov	r1, r3
 8010cac:	f006 fcb7 	bl	801761e <memcpy>
 8010cb0:	e02e      	b.n	8010d10 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010cb2:	8a7b      	ldrh	r3, [r7, #18]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d006      	beq.n	8010cc6 <tcp_write+0x38e>
 8010cb8:	4b83      	ldr	r3, [pc, #524]	@ (8010ec8 <tcp_write+0x590>)
 8010cba:	f240 224b 	movw	r2, #587	@ 0x24b
 8010cbe:	4985      	ldr	r1, [pc, #532]	@ (8010ed4 <tcp_write+0x59c>)
 8010cc0:	4883      	ldr	r0, [pc, #524]	@ (8010ed0 <tcp_write+0x598>)
 8010cc2:	f006 fa67 	bl	8017194 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010cc6:	8b3b      	ldrh	r3, [r7, #24]
 8010cc8:	2201      	movs	r2, #1
 8010cca:	4619      	mov	r1, r3
 8010ccc:	2000      	movs	r0, #0
 8010cce:	f7fa fff9 	bl	800bcc4 <pbuf_alloc>
 8010cd2:	6178      	str	r0, [r7, #20]
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 8151 	beq.w	8010f7e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010cdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010ce0:	68ba      	ldr	r2, [r7, #8]
 8010ce2:	441a      	add	r2, r3
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	2200      	movs	r2, #0
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	f7fa ffe6 	bl	800bcc4 <pbuf_alloc>
 8010cf8:	6338      	str	r0, [r7, #48]	@ 0x30
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d103      	bne.n	8010d08 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010d00:	6978      	ldr	r0, [r7, #20]
 8010d02:	f7fb fb57 	bl	800c3b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010d06:	e13d      	b.n	8010f84 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010d08:	6979      	ldr	r1, [r7, #20]
 8010d0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d0c:	f7fb fc2a 	bl	800c564 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010d10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d12:	f7fb fbe9 	bl	800c4e8 <pbuf_clen>
 8010d16:	4603      	mov	r3, r0
 8010d18:	461a      	mov	r2, r3
 8010d1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010d1e:	4413      	add	r3, r2
 8010d20:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010d24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010d28:	2b09      	cmp	r3, #9
 8010d2a:	d805      	bhi.n	8010d38 <tcp_write+0x400>
 8010d2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010d30:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8010d34:	4293      	cmp	r3, r2
 8010d36:	d903      	bls.n	8010d40 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010d38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d3a:	f7fb fb3b 	bl	800c3b4 <pbuf_free>
      goto memerr;
 8010d3e:	e121      	b.n	8010f84 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010d44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010d48:	441a      	add	r2, r3
 8010d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d4e:	9300      	str	r3, [sp, #0]
 8010d50:	4613      	mov	r3, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010d56:	68f8      	ldr	r0, [r7, #12]
 8010d58:	f7ff fc90 	bl	801067c <tcp_create_segment>
 8010d5c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 810e 	beq.w	8010f82 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <tcp_write+0x43a>
      queue = seg;
 8010d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d70:	e00c      	b.n	8010d8c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d106      	bne.n	8010d86 <tcp_write+0x44e>
 8010d78:	4b53      	ldr	r3, [pc, #332]	@ (8010ec8 <tcp_write+0x590>)
 8010d7a:	f240 2285 	movw	r2, #645	@ 0x285
 8010d7e:	4956      	ldr	r1, [pc, #344]	@ (8010ed8 <tcp_write+0x5a0>)
 8010d80:	4853      	ldr	r0, [pc, #332]	@ (8010ed0 <tcp_write+0x598>)
 8010d82:	f006 fa07 	bl	8017194 <iprintf>
      prev_seg->next = seg;
 8010d86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010d8a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010d90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010d94:	8b3b      	ldrh	r3, [r7, #24]
 8010d96:	4413      	add	r3, r2
 8010d98:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8010d9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010da0:	88fb      	ldrh	r3, [r7, #6]
 8010da2:	429a      	cmp	r2, r3
 8010da4:	f4ff af38 	bcc.w	8010c18 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010da8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d02c      	beq.n	8010e08 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010db4:	e01e      	b.n	8010df4 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8010db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010db8:	891a      	ldrh	r2, [r3, #8]
 8010dba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010dbc:	4413      	add	r3, r2
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d110      	bne.n	8010dee <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dce:	685b      	ldr	r3, [r3, #4]
 8010dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dd2:	8952      	ldrh	r2, [r2, #10]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010dd8:	68b9      	ldr	r1, [r7, #8]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f006 fc1f 	bl	801761e <memcpy>
        p->len += oversize_used;
 8010de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010de2:	895a      	ldrh	r2, [r3, #10]
 8010de4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010de6:	4413      	add	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dec:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1dd      	bne.n	8010db6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8010dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010dfc:	891a      	ldrh	r2, [r3, #8]
 8010dfe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010e00:	4413      	add	r3, r2
 8010e02:	b29a      	uxth	r2, r3
 8010e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e06:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010e08:	8a7a      	ldrh	r2, [r7, #18]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d018      	beq.n	8010e48 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d106      	bne.n	8010e2a <tcp_write+0x4f2>
 8010e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8010ec8 <tcp_write+0x590>)
 8010e1e:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8010e22:	492e      	ldr	r1, [pc, #184]	@ (8010edc <tcp_write+0x5a4>)
 8010e24:	482a      	ldr	r0, [pc, #168]	@ (8010ed0 <tcp_write+0x598>)
 8010e26:	f006 f9b5 	bl	8017194 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fb fb97 	bl	800c564 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e38:	891a      	ldrh	r2, [r3, #8]
 8010e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	4413      	add	r3, r2
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e44:	811a      	strh	r2, [r3, #8]
 8010e46:	e037      	b.n	8010eb8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8010e48:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d034      	beq.n	8010eb8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d003      	beq.n	8010e5c <tcp_write+0x524>
 8010e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d106      	bne.n	8010e6a <tcp_write+0x532>
 8010e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8010ec8 <tcp_write+0x590>)
 8010e5e:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8010e62:	491f      	ldr	r1, [pc, #124]	@ (8010ee0 <tcp_write+0x5a8>)
 8010e64:	481a      	ldr	r0, [pc, #104]	@ (8010ed0 <tcp_write+0x598>)
 8010e66:	f006 f995 	bl	8017194 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e70:	e009      	b.n	8010e86 <tcp_write+0x54e>
      p->tot_len += extendlen;
 8010e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e74:	891a      	ldrh	r2, [r3, #8]
 8010e76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010e78:	4413      	add	r3, r2
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e7e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d1f1      	bne.n	8010e72 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e90:	891a      	ldrh	r2, [r3, #8]
 8010e92:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010e94:	4413      	add	r3, r2
 8010e96:	b29a      	uxth	r2, r3
 8010e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9a:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9e:	895a      	ldrh	r2, [r3, #10]
 8010ea0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010ea2:	4413      	add	r3, r2
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010eaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eac:	891a      	ldrh	r2, [r3, #8]
 8010eae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010eb0:	4413      	add	r3, r2
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eb6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d112      	bne.n	8010ee4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ec2:	669a      	str	r2, [r3, #104]	@ 0x68
 8010ec4:	e011      	b.n	8010eea <tcp_write+0x5b2>
 8010ec6:	bf00      	nop
 8010ec8:	08019e5c 	.word	0x08019e5c
 8010ecc:	0801a06c 	.word	0x0801a06c
 8010ed0:	08019ec0 	.word	0x08019ec0
 8010ed4:	0801a0ac 	.word	0x0801a0ac
 8010ed8:	0801a0bc 	.word	0x0801a0bc
 8010edc:	0801a0d0 	.word	0x0801a0d0
 8010ee0:	0801a108 	.word	0x0801a108
  } else {
    last_unsent->next = queue;
 8010ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010ee8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010eee:	88fb      	ldrh	r3, [r7, #6]
 8010ef0:	441a      	add	r2, r3
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010efc:	88fb      	ldrh	r3, [r7, #6]
 8010efe:	1ad3      	subs	r3, r2, r3
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8010f0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d00e      	beq.n	8010f3a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d10a      	bne.n	8010f3a <tcp_write+0x602>
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <tcp_write+0x602>
 8010f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8010fe0 <tcp_write+0x6a8>)
 8010f2e:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 8010f32:	492c      	ldr	r1, [pc, #176]	@ (8010fe4 <tcp_write+0x6ac>)
 8010f34:	482c      	ldr	r0, [pc, #176]	@ (8010fe8 <tcp_write+0x6b0>)
 8010f36:	f006 f92d 	bl	8017194 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8010f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d016      	beq.n	8010f6e <tcp_write+0x636>
 8010f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f42:	68db      	ldr	r3, [r3, #12]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d012      	beq.n	8010f6e <tcp_write+0x636>
 8010f48:	797b      	ldrb	r3, [r7, #5]
 8010f4a:	f003 0302 	and.w	r3, r3, #2
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d10d      	bne.n	8010f6e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	899b      	ldrh	r3, [r3, #12]
 8010f58:	b29c      	uxth	r4, r3
 8010f5a:	2008      	movs	r0, #8
 8010f5c:	f7fa f854 	bl	800b008 <lwip_htons>
 8010f60:	4603      	mov	r3, r0
 8010f62:	461a      	mov	r2, r3
 8010f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	4322      	orrs	r2, r4
 8010f6a:	b292      	uxth	r2, r2
 8010f6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	e031      	b.n	8010fd6 <tcp_write+0x69e>
          goto memerr;
 8010f72:	bf00      	nop
 8010f74:	e006      	b.n	8010f84 <tcp_write+0x64c>
            goto memerr;
 8010f76:	bf00      	nop
 8010f78:	e004      	b.n	8010f84 <tcp_write+0x64c>
        goto memerr;
 8010f7a:	bf00      	nop
 8010f7c:	e002      	b.n	8010f84 <tcp_write+0x64c>
        goto memerr;
 8010f7e:	bf00      	nop
 8010f80:	e000      	b.n	8010f84 <tcp_write+0x64c>
      goto memerr;
 8010f82:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	7e9b      	ldrb	r3, [r3, #26]
 8010f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010f8c:	b2da      	uxtb	r2, r3
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010f92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <tcp_write+0x666>
    pbuf_free(concat_p);
 8010f98:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8010f9a:	f7fb fa0b 	bl	800c3b4 <pbuf_free>
  }
  if (queue != NULL) {
 8010f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <tcp_write+0x672>
    tcp_segs_free(queue);
 8010fa4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010fa6:	f7fc fcdc 	bl	800d962 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00e      	beq.n	8010fd2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d10a      	bne.n	8010fd2 <tcp_write+0x69a>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d106      	bne.n	8010fd2 <tcp_write+0x69a>
 8010fc4:	4b06      	ldr	r3, [pc, #24]	@ (8010fe0 <tcp_write+0x6a8>)
 8010fc6:	f240 3201 	movw	r2, #769	@ 0x301
 8010fca:	4906      	ldr	r1, [pc, #24]	@ (8010fe4 <tcp_write+0x6ac>)
 8010fcc:	4806      	ldr	r0, [pc, #24]	@ (8010fe8 <tcp_write+0x6b0>)
 8010fce:	f006 f8e1 	bl	8017194 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	375c      	adds	r7, #92	@ 0x5c
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd90      	pop	{r4, r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	08019e5c 	.word	0x08019e5c
 8010fe4:	0801a140 	.word	0x0801a140
 8010fe8:	08019ec0 	.word	0x08019ec0

08010fec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b08a      	sub	sp, #40	@ 0x28
 8010ff0:	af02      	add	r7, sp, #8
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011000:	78fb      	ldrb	r3, [r7, #3]
 8011002:	f003 0303 	and.w	r3, r3, #3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <tcp_enqueue_flags+0x2c>
 801100a:	4b6f      	ldr	r3, [pc, #444]	@ (80111c8 <tcp_enqueue_flags+0x1dc>)
 801100c:	f240 321a 	movw	r2, #794	@ 0x31a
 8011010:	496e      	ldr	r1, [pc, #440]	@ (80111cc <tcp_enqueue_flags+0x1e0>)
 8011012:	486f      	ldr	r0, [pc, #444]	@ (80111d0 <tcp_enqueue_flags+0x1e4>)
 8011014:	f006 f8be 	bl	8017194 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801101e:	2b08      	cmp	r3, #8
 8011020:	d806      	bhi.n	8011030 <tcp_enqueue_flags+0x44>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011028:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801102c:	4293      	cmp	r3, r2
 801102e:	d90e      	bls.n	801104e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011030:	78fb      	ldrb	r3, [r7, #3]
 8011032:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011036:	2b00      	cmp	r3, #0
 8011038:	d109      	bne.n	801104e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7e9b      	ldrb	r3, [r3, #26]
 801103e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011042:	b2da      	uxtb	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011048:	f04f 33ff 	mov.w	r3, #4294967295
 801104c:	e0b7      	b.n	80111be <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801104e:	78fb      	ldrb	r3, [r7, #3]
 8011050:	f003 0302 	and.w	r3, r3, #2
 8011054:	2b00      	cmp	r3, #0
 8011056:	d001      	beq.n	801105c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011058:	2301      	movs	r3, #1
 801105a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801105c:	7ffb      	ldrb	r3, [r7, #31]
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	b2db      	uxtb	r3, r3
 8011062:	f003 0304 	and.w	r3, r3, #4
 8011066:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011068:	7dfb      	ldrb	r3, [r7, #23]
 801106a:	b29b      	uxth	r3, r3
 801106c:	2200      	movs	r2, #0
 801106e:	4619      	mov	r1, r3
 8011070:	2000      	movs	r0, #0
 8011072:	f7fa fe27 	bl	800bcc4 <pbuf_alloc>
 8011076:	6138      	str	r0, [r7, #16]
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d109      	bne.n	8011092 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	7e9b      	ldrb	r3, [r3, #26]
 8011082:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011086:	b2da      	uxtb	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801108c:	f04f 33ff 	mov.w	r3, #4294967295
 8011090:	e095      	b.n	80111be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	895a      	ldrh	r2, [r3, #10]
 8011096:	7dfb      	ldrb	r3, [r7, #23]
 8011098:	b29b      	uxth	r3, r3
 801109a:	429a      	cmp	r2, r3
 801109c:	d206      	bcs.n	80110ac <tcp_enqueue_flags+0xc0>
 801109e:	4b4a      	ldr	r3, [pc, #296]	@ (80111c8 <tcp_enqueue_flags+0x1dc>)
 80110a0:	f44f 7250 	mov.w	r2, #832	@ 0x340
 80110a4:	494b      	ldr	r1, [pc, #300]	@ (80111d4 <tcp_enqueue_flags+0x1e8>)
 80110a6:	484a      	ldr	r0, [pc, #296]	@ (80111d0 <tcp_enqueue_flags+0x1e4>)
 80110a8:	f006 f874 	bl	8017194 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80110b0:	78fa      	ldrb	r2, [r7, #3]
 80110b2:	7ffb      	ldrb	r3, [r7, #31]
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	460b      	mov	r3, r1
 80110b8:	6939      	ldr	r1, [r7, #16]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff fade 	bl	801067c <tcp_create_segment>
 80110c0:	60f8      	str	r0, [r7, #12]
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d109      	bne.n	80110dc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	7e9b      	ldrb	r3, [r3, #26]
 80110cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110d6:	f04f 33ff 	mov.w	r3, #4294967295
 80110da:	e070      	b.n	80111be <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	68db      	ldr	r3, [r3, #12]
 80110e0:	f003 0303 	and.w	r3, r3, #3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d006      	beq.n	80110f6 <tcp_enqueue_flags+0x10a>
 80110e8:	4b37      	ldr	r3, [pc, #220]	@ (80111c8 <tcp_enqueue_flags+0x1dc>)
 80110ea:	f240 3249 	movw	r2, #841	@ 0x349
 80110ee:	493a      	ldr	r1, [pc, #232]	@ (80111d8 <tcp_enqueue_flags+0x1ec>)
 80110f0:	4837      	ldr	r0, [pc, #220]	@ (80111d0 <tcp_enqueue_flags+0x1e4>)
 80110f2:	f006 f84f 	bl	8017194 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	891b      	ldrh	r3, [r3, #8]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d006      	beq.n	801110c <tcp_enqueue_flags+0x120>
 80110fe:	4b32      	ldr	r3, [pc, #200]	@ (80111c8 <tcp_enqueue_flags+0x1dc>)
 8011100:	f240 324a 	movw	r2, #842	@ 0x34a
 8011104:	4935      	ldr	r1, [pc, #212]	@ (80111dc <tcp_enqueue_flags+0x1f0>)
 8011106:	4832      	ldr	r0, [pc, #200]	@ (80111d0 <tcp_enqueue_flags+0x1e4>)
 8011108:	f006 f844 	bl	8017194 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011110:	2b00      	cmp	r3, #0
 8011112:	d103      	bne.n	801111c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	669a      	str	r2, [r3, #104]	@ 0x68
 801111a:	e00d      	b.n	8011138 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011120:	61bb      	str	r3, [r7, #24]
 8011122:	e002      	b.n	801112a <tcp_enqueue_flags+0x13e>
 8011124:	69bb      	ldr	r3, [r7, #24]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	61bb      	str	r3, [r7, #24]
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1f8      	bne.n	8011124 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	68fa      	ldr	r2, [r7, #12]
 8011136:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	f003 0302 	and.w	r3, r3, #2
 8011146:	2b00      	cmp	r3, #0
 8011148:	d104      	bne.n	8011154 <tcp_enqueue_flags+0x168>
 801114a:	78fb      	ldrb	r3, [r7, #3]
 801114c:	f003 0301 	and.w	r3, r3, #1
 8011150:	2b00      	cmp	r3, #0
 8011152:	d004      	beq.n	801115e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011158:	1c5a      	adds	r2, r3, #1
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801115e:	78fb      	ldrb	r3, [r7, #3]
 8011160:	f003 0301 	and.w	r3, r3, #1
 8011164:	2b00      	cmp	r3, #0
 8011166:	d006      	beq.n	8011176 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	7e9b      	ldrb	r3, [r3, #26]
 801116c:	f043 0320 	orr.w	r3, r3, #32
 8011170:	b2da      	uxtb	r2, r3
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7fb f9b4 	bl	800c4e8 <pbuf_clen>
 8011180:	4603      	mov	r3, r0
 8011182:	461a      	mov	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801118a:	4413      	add	r3, r2
 801118c:	b29a      	uxth	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801119a:	2b00      	cmp	r3, #0
 801119c:	d00e      	beq.n	80111bc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10a      	bne.n	80111bc <tcp_enqueue_flags+0x1d0>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d106      	bne.n	80111bc <tcp_enqueue_flags+0x1d0>
 80111ae:	4b06      	ldr	r3, [pc, #24]	@ (80111c8 <tcp_enqueue_flags+0x1dc>)
 80111b0:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80111b4:	490a      	ldr	r1, [pc, #40]	@ (80111e0 <tcp_enqueue_flags+0x1f4>)
 80111b6:	4806      	ldr	r0, [pc, #24]	@ (80111d0 <tcp_enqueue_flags+0x1e4>)
 80111b8:	f005 ffec 	bl	8017194 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3720      	adds	r7, #32
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	08019e5c 	.word	0x08019e5c
 80111cc:	0801a160 	.word	0x0801a160
 80111d0:	08019ec0 	.word	0x08019ec0
 80111d4:	0801a1b8 	.word	0x0801a1b8
 80111d8:	0801a1f4 	.word	0x0801a1f4
 80111dc:	0801a20c 	.word	0x0801a20c
 80111e0:	0801a238 	.word	0x0801a238

080111e4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80111e4:	b590      	push	{r4, r7, lr}
 80111e6:	b08b      	sub	sp, #44	@ 0x2c
 80111e8:	af04      	add	r7, sp, #16
 80111ea:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80111ec:	2300      	movs	r3, #0
 80111ee:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80111f0:	7dbb      	ldrb	r3, [r7, #22]
 80111f2:	b29c      	uxth	r4, r3
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f9 ff12 	bl	800b022 <lwip_htonl>
 80111fe:	4603      	mov	r3, r0
 8011200:	2200      	movs	r2, #0
 8011202:	4621      	mov	r1, r4
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff f97f 	bl	8010508 <tcp_output_alloc_header>
 801120a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d109      	bne.n	8011226 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	7e9b      	ldrb	r3, [r3, #26]
 8011216:	f043 0303 	orr.w	r3, r3, #3
 801121a:	b2da      	uxtb	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011220:	f06f 0301 	mvn.w	r3, #1
 8011224:	e036      	b.n	8011294 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3304      	adds	r3, #4
 801122a:	4618      	mov	r0, r3
 801122c:	f002 fafe 	bl	801382c <ip4_route>
 8011230:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d102      	bne.n	801123e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011238:	23fc      	movs	r3, #252	@ 0xfc
 801123a:	75fb      	strb	r3, [r7, #23]
 801123c:	e012      	b.n	8011264 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801123e:	6879      	ldr	r1, [r7, #4]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	1d18      	adds	r0, r3, #4
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7a9c      	ldrb	r4, [r3, #10]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	7a5b      	ldrb	r3, [r3, #9]
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	9202      	str	r2, [sp, #8]
 8011250:	2206      	movs	r2, #6
 8011252:	9201      	str	r2, [sp, #4]
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	4623      	mov	r3, r4
 8011258:	4602      	mov	r2, r0
 801125a:	6938      	ldr	r0, [r7, #16]
 801125c:	f002 fc8e 	bl	8013b7c <ip4_output_if>
 8011260:	4603      	mov	r3, r0
 8011262:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011264:	6938      	ldr	r0, [r7, #16]
 8011266:	f7fb f8a5 	bl	800c3b4 <pbuf_free>

  if (err != ERR_OK) {
 801126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d007      	beq.n	8011282 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	7e9b      	ldrb	r3, [r3, #26]
 8011276:	f043 0303 	orr.w	r3, r3, #3
 801127a:	b2da      	uxtb	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	769a      	strb	r2, [r3, #26]
 8011280:	e006      	b.n	8011290 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	7e9b      	ldrb	r3, [r3, #26]
 8011286:	f023 0303 	bic.w	r3, r3, #3
 801128a:	b2da      	uxtb	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011290:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011294:	4618      	mov	r0, r3
 8011296:	371c      	adds	r7, #28
 8011298:	46bd      	mov	sp, r7
 801129a:	bd90      	pop	{r4, r7, pc}

0801129c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801129c:	b5b0      	push	{r4, r5, r7, lr}
 801129e:	b08a      	sub	sp, #40	@ 0x28
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	7d1b      	ldrb	r3, [r3, #20]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d106      	bne.n	80112ba <tcp_output+0x1e>
 80112ac:	4b99      	ldr	r3, [pc, #612]	@ (8011514 <tcp_output+0x278>)
 80112ae:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 80112b2:	4999      	ldr	r1, [pc, #612]	@ (8011518 <tcp_output+0x27c>)
 80112b4:	4899      	ldr	r0, [pc, #612]	@ (801151c <tcp_output+0x280>)
 80112b6:	f005 ff6d 	bl	8017194 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80112ba:	4b99      	ldr	r3, [pc, #612]	@ (8011520 <tcp_output+0x284>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d101      	bne.n	80112c8 <tcp_output+0x2c>
    return ERR_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	e1cb      	b.n	8011660 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bf28      	it	cs
 80112d8:	4613      	movcs	r3, r2
 80112da:	b29b      	uxth	r3, r3
 80112dc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80112e2:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	7e9b      	ldrb	r3, [r3, #26]
 80112e8:	f003 0302 	and.w	r3, r3, #2
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d017      	beq.n	8011320 <tcp_output+0x84>
 80112f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d00f      	beq.n	8011316 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80112f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f9 fe90 	bl	800b022 <lwip_htonl>
 8011302:	4602      	mov	r2, r0
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801130c:	8912      	ldrh	r2, [r2, #8]
 801130e:	4413      	add	r3, r2
     (seg == NULL ||
 8011310:	69ba      	ldr	r2, [r7, #24]
 8011312:	429a      	cmp	r2, r3
 8011314:	d204      	bcs.n	8011320 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f7ff ff64 	bl	80111e4 <tcp_send_empty_ack>
 801131c:	4603      	mov	r3, r0
 801131e:	e19f      	b.n	8011660 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011324:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011326:	6a3b      	ldr	r3, [r7, #32]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d007      	beq.n	801133c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801132c:	e002      	b.n	8011334 <tcp_output+0x98>
 801132e:	6a3b      	ldr	r3, [r7, #32]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	623b      	str	r3, [r7, #32]
 8011334:	6a3b      	ldr	r3, [r7, #32]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1f8      	bne.n	801132e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	3304      	adds	r3, #4
 8011340:	4618      	mov	r0, r3
 8011342:	f002 fa73 	bl	801382c <ip4_route>
 8011346:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d102      	bne.n	8011354 <tcp_output+0xb8>
    return ERR_RTE;
 801134e:	f06f 0303 	mvn.w	r3, #3
 8011352:	e185      	b.n	8011660 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d003      	beq.n	8011362 <tcp_output+0xc6>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d111      	bne.n	8011386 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <tcp_output+0xd2>
 8011368:	697b      	ldr	r3, [r7, #20]
 801136a:	3304      	adds	r3, #4
 801136c:	e000      	b.n	8011370 <tcp_output+0xd4>
 801136e:	2300      	movs	r3, #0
 8011370:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d102      	bne.n	801137e <tcp_output+0xe2>
      return ERR_RTE;
 8011378:	f06f 0303 	mvn.w	r3, #3
 801137c:	e170      	b.n	8011660 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 813f 	beq.w	801160c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	685b      	ldr	r3, [r3, #4]
 8011394:	4618      	mov	r0, r3
 8011396:	f7f9 fe44 	bl	800b022 <lwip_htonl>
 801139a:	4602      	mov	r2, r0
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80113a0:	1ad3      	subs	r3, r2, r3
 80113a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80113a4:	8912      	ldrh	r2, [r2, #8]
 80113a6:	4413      	add	r3, r2
  if (seg != NULL &&
 80113a8:	69ba      	ldr	r2, [r7, #24]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	f080 812e 	bcs.w	801160c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	f000 812a 	beq.w	801160c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80113be:	461a      	mov	r2, r3
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	4293      	cmp	r3, r2
 80113c4:	f040 8122 	bne.w	801160c <tcp_output+0x370>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	f040 811d 	bne.w	801160c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80113d8:	2b00      	cmp	r3, #0
 80113da:	f040 812c 	bne.w	8011636 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	2200      	movs	r2, #0
 80113e2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2201      	movs	r2, #1
 80113ea:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 80113ee:	e122      	b.n	8011636 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80113f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	899b      	ldrh	r3, [r3, #12]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7f9 fe05 	bl	800b008 <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	f003 0304 	and.w	r3, r3, #4
 8011404:	2b00      	cmp	r3, #0
 8011406:	d006      	beq.n	8011416 <tcp_output+0x17a>
 8011408:	4b42      	ldr	r3, [pc, #264]	@ (8011514 <tcp_output+0x278>)
 801140a:	f240 4245 	movw	r2, #1093	@ 0x445
 801140e:	4945      	ldr	r1, [pc, #276]	@ (8011524 <tcp_output+0x288>)
 8011410:	4842      	ldr	r0, [pc, #264]	@ (801151c <tcp_output+0x280>)
 8011412:	f005 febf 	bl	8017194 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801141a:	2b00      	cmp	r3, #0
 801141c:	d01f      	beq.n	801145e <tcp_output+0x1c2>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	7e9b      	ldrb	r3, [r3, #26]
 8011422:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011426:	2b00      	cmp	r3, #0
 8011428:	d119      	bne.n	801145e <tcp_output+0x1c2>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00b      	beq.n	801144a <tcp_output+0x1ae>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d110      	bne.n	801145e <tcp_output+0x1c2>
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011440:	891a      	ldrh	r2, [r3, #8]
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011446:	429a      	cmp	r2, r3
 8011448:	d209      	bcs.n	801145e <tcp_output+0x1c2>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011450:	2b00      	cmp	r3, #0
 8011452:	d004      	beq.n	801145e <tcp_output+0x1c2>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801145a:	2b08      	cmp	r3, #8
 801145c:	d901      	bls.n	8011462 <tcp_output+0x1c6>
 801145e:	2301      	movs	r3, #1
 8011460:	e000      	b.n	8011464 <tcp_output+0x1c8>
 8011462:	2300      	movs	r3, #0
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	7e9b      	ldrb	r3, [r3, #26]
 801146c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011470:	2b00      	cmp	r3, #0
 8011472:	f000 80e2 	beq.w	801163a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	7d1b      	ldrb	r3, [r3, #20]
 801147a:	2b02      	cmp	r3, #2
 801147c:	d00d      	beq.n	801149a <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	899b      	ldrh	r3, [r3, #12]
 8011484:	b29c      	uxth	r4, r3
 8011486:	2010      	movs	r0, #16
 8011488:	f7f9 fdbe 	bl	800b008 <lwip_htons>
 801148c:	4603      	mov	r3, r0
 801148e:	461a      	mov	r2, r3
 8011490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011492:	68db      	ldr	r3, [r3, #12]
 8011494:	4322      	orrs	r2, r4
 8011496:	b292      	uxth	r2, r2
 8011498:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	6879      	ldr	r1, [r7, #4]
 801149e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80114a0:	f000 f8e2 	bl	8011668 <tcp_output_segment>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80114a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d009      	beq.n	80114c4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	7e9b      	ldrb	r3, [r3, #26]
 80114b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80114b8:	b2da      	uxtb	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	769a      	strb	r2, [r3, #26]
      return err;
 80114be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c2:	e0cd      	b.n	8011660 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80114c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	7d1b      	ldrb	r3, [r3, #20]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d006      	beq.n	80114e2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	7e9b      	ldrb	r3, [r3, #26]
 80114d8:	f023 0303 	bic.w	r3, r3, #3
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7f9 fd9a 	bl	800b022 <lwip_htonl>
 80114ee:	4604      	mov	r4, r0
 80114f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f2:	891b      	ldrh	r3, [r3, #8]
 80114f4:	461d      	mov	r5, r3
 80114f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f8:	68db      	ldr	r3, [r3, #12]
 80114fa:	899b      	ldrh	r3, [r3, #12]
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f9 fd82 	bl	800b008 <lwip_htons>
 8011504:	4603      	mov	r3, r0
 8011506:	f003 0303 	and.w	r3, r3, #3
 801150a:	2b00      	cmp	r3, #0
 801150c:	d00c      	beq.n	8011528 <tcp_output+0x28c>
 801150e:	2301      	movs	r3, #1
 8011510:	e00b      	b.n	801152a <tcp_output+0x28e>
 8011512:	bf00      	nop
 8011514:	08019e5c 	.word	0x08019e5c
 8011518:	0801a260 	.word	0x0801a260
 801151c:	08019ec0 	.word	0x08019ec0
 8011520:	200098c0 	.word	0x200098c0
 8011524:	0801a288 	.word	0x0801a288
 8011528:	2300      	movs	r3, #0
 801152a:	442b      	add	r3, r5
 801152c:	4423      	add	r3, r4
 801152e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	2b00      	cmp	r3, #0
 801153a:	da02      	bge.n	8011542 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68ba      	ldr	r2, [r7, #8]
 8011540:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011544:	891b      	ldrh	r3, [r3, #8]
 8011546:	461c      	mov	r4, r3
 8011548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	899b      	ldrh	r3, [r3, #12]
 801154e:	b29b      	uxth	r3, r3
 8011550:	4618      	mov	r0, r3
 8011552:	f7f9 fd59 	bl	800b008 <lwip_htons>
 8011556:	4603      	mov	r3, r0
 8011558:	f003 0303 	and.w	r3, r3, #3
 801155c:	2b00      	cmp	r3, #0
 801155e:	d001      	beq.n	8011564 <tcp_output+0x2c8>
 8011560:	2301      	movs	r3, #1
 8011562:	e000      	b.n	8011566 <tcp_output+0x2ca>
 8011564:	2300      	movs	r3, #0
 8011566:	4423      	add	r3, r4
 8011568:	2b00      	cmp	r3, #0
 801156a:	d049      	beq.n	8011600 <tcp_output+0x364>
      seg->next = NULL;
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	2200      	movs	r2, #0
 8011570:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011576:	2b00      	cmp	r3, #0
 8011578:	d105      	bne.n	8011586 <tcp_output+0x2ea>
        pcb->unacked = seg;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801157e:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 8011580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011582:	623b      	str	r3, [r7, #32]
 8011584:	e03f      	b.n	8011606 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	f7f9 fd48 	bl	800b022 <lwip_htonl>
 8011592:	4604      	mov	r4, r0
 8011594:	6a3b      	ldr	r3, [r7, #32]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f7f9 fd41 	bl	800b022 <lwip_htonl>
 80115a0:	4603      	mov	r3, r0
 80115a2:	1ae3      	subs	r3, r4, r3
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	da24      	bge.n	80115f2 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	336c      	adds	r3, #108	@ 0x6c
 80115ac:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115ae:	e002      	b.n	80115b6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80115b6:	69fb      	ldr	r3, [r7, #28]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d011      	beq.n	80115e2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80115be:	69fb      	ldr	r3, [r7, #28]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4618      	mov	r0, r3
 80115c8:	f7f9 fd2b 	bl	800b022 <lwip_htonl>
 80115cc:	4604      	mov	r4, r0
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f9 fd24 	bl	800b022 <lwip_htonl>
 80115da:	4603      	mov	r3, r0
 80115dc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80115de:	2b00      	cmp	r3, #0
 80115e0:	dbe6      	blt.n	80115b0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115ee:	601a      	str	r2, [r3, #0]
 80115f0:	e009      	b.n	8011606 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115f2:	6a3b      	ldr	r3, [r7, #32]
 80115f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115f6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115f8:	6a3b      	ldr	r3, [r7, #32]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	623b      	str	r3, [r7, #32]
 80115fe:	e002      	b.n	8011606 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011600:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011602:	f7fc f9c3 	bl	800d98c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801160a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160e:	2b00      	cmp	r3, #0
 8011610:	d015      	beq.n	801163e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011614:	68db      	ldr	r3, [r3, #12]
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	4618      	mov	r0, r3
 801161a:	f7f9 fd02 	bl	800b022 <lwip_htonl>
 801161e:	4602      	mov	r2, r0
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011624:	1ad3      	subs	r3, r2, r3
 8011626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011628:	8912      	ldrh	r2, [r2, #8]
 801162a:	4413      	add	r3, r2
  while (seg != NULL &&
 801162c:	69ba      	ldr	r2, [r7, #24]
 801162e:	429a      	cmp	r2, r3
 8011630:	f4bf aede 	bcs.w	80113f0 <tcp_output+0x154>
  }
output_done:
 8011634:	e003      	b.n	801163e <tcp_output+0x3a2>
    goto output_done;
 8011636:	bf00      	nop
 8011638:	e002      	b.n	8011640 <tcp_output+0x3a4>
      break;
 801163a:	bf00      	nop
 801163c:	e000      	b.n	8011640 <tcp_output+0x3a4>
output_done:
 801163e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011644:	2b00      	cmp	r3, #0
 8011646:	d103      	bne.n	8011650 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2200      	movs	r2, #0
 801164c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7e9b      	ldrb	r3, [r3, #26]
 8011654:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011658:	b2da      	uxtb	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801165e:	2300      	movs	r3, #0
}
 8011660:	4618      	mov	r0, r3
 8011662:	3728      	adds	r7, #40	@ 0x28
 8011664:	46bd      	mov	sp, r7
 8011666:	bdb0      	pop	{r4, r5, r7, pc}

08011668 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011668:	b5b0      	push	{r4, r5, r7, lr}
 801166a:	b08c      	sub	sp, #48	@ 0x30
 801166c:	af04      	add	r7, sp, #16
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	89db      	ldrh	r3, [r3, #14]
 801167a:	2b01      	cmp	r3, #1
 801167c:	d001      	beq.n	8011682 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	e08a      	b.n	8011798 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	68dc      	ldr	r4, [r3, #12]
 801168a:	4610      	mov	r0, r2
 801168c:	f7f9 fcc9 	bl	800b022 <lwip_htonl>
 8011690:	4603      	mov	r3, r0
 8011692:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	68dc      	ldr	r4, [r3, #12]
 801169c:	4610      	mov	r0, r2
 801169e:	f7f9 fcb3 	bl	800b008 <lwip_htons>
 80116a2:	4603      	mov	r3, r0
 80116a4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80116ae:	441a      	add	r2, r3
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	3314      	adds	r3, #20
 80116ba:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	7a9b      	ldrb	r3, [r3, #10]
 80116c0:	f003 0301 	and.w	r3, r3, #1
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d014      	beq.n	80116f2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	3304      	adds	r3, #4
 80116cc:	4619      	mov	r1, r3
 80116ce:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80116d2:	f7fc fc7f 	bl	800dfd4 <tcp_eff_send_mss_impl>
 80116d6:	4603      	mov	r3, r0
 80116d8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80116da:	8b7b      	ldrh	r3, [r7, #26]
 80116dc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80116e0:	4618      	mov	r0, r3
 80116e2:	f7f9 fc9e 	bl	800b022 <lwip_htonl>
 80116e6:	4602      	mov	r2, r0
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	601a      	str	r2, [r3, #0]
    opts += 1;
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	3304      	adds	r3, #4
 80116f0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	da02      	bge.n	8011702 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	2200      	movs	r2, #0
 8011700:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011706:	2b00      	cmp	r3, #0
 8011708:	d10c      	bne.n	8011724 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801170a:	4b25      	ldr	r3, [pc, #148]	@ (80117a0 <tcp_output_segment+0x138>)
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	4618      	mov	r0, r3
 801171a:	f7f9 fc82 	bl	800b022 <lwip_htonl>
 801171e:	4602      	mov	r2, r0
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	68da      	ldr	r2, [r3, #12]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	685b      	ldr	r3, [r3, #4]
 801172e:	1ad3      	subs	r3, r2, r3
 8011730:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	8959      	ldrh	r1, [r3, #10]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	8b3a      	ldrh	r2, [r7, #24]
 801173e:	1a8a      	subs	r2, r1, r2
 8011740:	b292      	uxth	r2, r2
 8011742:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	685b      	ldr	r3, [r3, #4]
 8011748:	8919      	ldrh	r1, [r3, #8]
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	8b3a      	ldrh	r2, [r7, #24]
 8011750:	1a8a      	subs	r2, r1, r2
 8011752:	b292      	uxth	r2, r2
 8011754:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	68fa      	ldr	r2, [r7, #12]
 801175c:	68d2      	ldr	r2, [r2, #12]
 801175e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	68db      	ldr	r3, [r3, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	741a      	strb	r2, [r3, #16]
 8011768:	2200      	movs	r2, #0
 801176a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6858      	ldr	r0, [r3, #4]
 8011770:	68b9      	ldr	r1, [r7, #8]
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	1d1c      	adds	r4, r3, #4
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	7a9d      	ldrb	r5, [r3, #10]
 801177a:	68bb      	ldr	r3, [r7, #8]
 801177c:	7a5b      	ldrb	r3, [r3, #9]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	9202      	str	r2, [sp, #8]
 8011782:	2206      	movs	r2, #6
 8011784:	9201      	str	r2, [sp, #4]
 8011786:	9300      	str	r3, [sp, #0]
 8011788:	462b      	mov	r3, r5
 801178a:	4622      	mov	r2, r4
 801178c:	f002 f9f6 	bl	8013b7c <ip4_output_if>
 8011790:	4603      	mov	r3, r0
 8011792:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011794:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011798:	4618      	mov	r0, r3
 801179a:	3720      	adds	r7, #32
 801179c:	46bd      	mov	sp, r7
 801179e:	bdb0      	pop	{r4, r5, r7, pc}
 80117a0:	20009874 	.word	0x20009874

080117a4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b08c      	sub	sp, #48	@ 0x30
 80117a8:	af04      	add	r7, sp, #16
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80117b2:	2200      	movs	r2, #0
 80117b4:	2114      	movs	r1, #20
 80117b6:	2001      	movs	r0, #1
 80117b8:	f7fa fa84 	bl	800bcc4 <pbuf_alloc>
 80117bc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d05b      	beq.n	801187c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	2b13      	cmp	r3, #19
 80117ca:	d806      	bhi.n	80117da <tcp_rst+0x36>
 80117cc:	4b2d      	ldr	r3, [pc, #180]	@ (8011884 <tcp_rst+0xe0>)
 80117ce:	f240 524c 	movw	r2, #1356	@ 0x54c
 80117d2:	492d      	ldr	r1, [pc, #180]	@ (8011888 <tcp_rst+0xe4>)
 80117d4:	482d      	ldr	r0, [pc, #180]	@ (801188c <tcp_rst+0xe8>)
 80117d6:	f005 fcdd 	bl	8017194 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80117e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7f9 fc10 	bl	800b008 <lwip_htons>
 80117e8:	4603      	mov	r3, r0
 80117ea:	461a      	mov	r2, r3
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80117f0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7f9 fc08 	bl	800b008 <lwip_htons>
 80117f8:	4603      	mov	r3, r0
 80117fa:	461a      	mov	r2, r3
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f7f9 fc0e 	bl	800b022 <lwip_htonl>
 8011806:	4602      	mov	r2, r0
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801180c:	68b8      	ldr	r0, [r7, #8]
 801180e:	f7f9 fc08 	bl	800b022 <lwip_htonl>
 8011812:	4602      	mov	r2, r0
 8011814:	69bb      	ldr	r3, [r7, #24]
 8011816:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011818:	f245 0014 	movw	r0, #20500	@ 0x5014
 801181c:	f7f9 fbf4 	bl	800b008 <lwip_htons>
 8011820:	4603      	mov	r3, r0
 8011822:	461a      	mov	r2, r3
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011828:	69bb      	ldr	r3, [r7, #24]
 801182a:	2200      	movs	r2, #0
 801182c:	f042 0208 	orr.w	r2, r2, #8
 8011830:	739a      	strb	r2, [r3, #14]
 8011832:	2200      	movs	r2, #0
 8011834:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8011838:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801183a:	69bb      	ldr	r3, [r7, #24]
 801183c:	2200      	movs	r2, #0
 801183e:	741a      	strb	r2, [r3, #16]
 8011840:	2200      	movs	r2, #0
 8011842:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	2200      	movs	r2, #0
 8011848:	749a      	strb	r2, [r3, #18]
 801184a:	2200      	movs	r2, #0
 801184c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801184e:	6838      	ldr	r0, [r7, #0]
 8011850:	f001 ffec 	bl	801382c <ip4_route>
 8011854:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00b      	beq.n	8011874 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	9302      	str	r3, [sp, #8]
 8011860:	2306      	movs	r3, #6
 8011862:	9301      	str	r3, [sp, #4]
 8011864:	2300      	movs	r3, #0
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	23ff      	movs	r3, #255	@ 0xff
 801186a:	683a      	ldr	r2, [r7, #0]
 801186c:	6879      	ldr	r1, [r7, #4]
 801186e:	69f8      	ldr	r0, [r7, #28]
 8011870:	f002 f984 	bl	8013b7c <ip4_output_if>
  }
  pbuf_free(p);
 8011874:	69f8      	ldr	r0, [r7, #28]
 8011876:	f7fa fd9d 	bl	800c3b4 <pbuf_free>
 801187a:	e000      	b.n	801187e <tcp_rst+0xda>
    return;
 801187c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801187e:	3720      	adds	r7, #32
 8011880:	46bd      	mov	sp, r7
 8011882:	bd80      	pop	{r7, pc}
 8011884:	08019e5c 	.word	0x08019e5c
 8011888:	08019e90 	.word	0x08019e90
 801188c:	08019ec0 	.word	0x08019ec0

08011890 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801189c:	2b00      	cmp	r3, #0
 801189e:	d029      	beq.n	80118f4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118a4:	60fb      	str	r3, [r7, #12]
 80118a6:	e002      	b.n	80118ae <tcp_rexmit_rto+0x1e>
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1f8      	bne.n	80118a8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80118d2:	2bff      	cmp	r3, #255	@ 0xff
 80118d4:	d007      	beq.n	80118e6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80118dc:	3301      	adds	r3, #1
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f7ff fcd5 	bl	801129c <tcp_output>
 80118f2:	e000      	b.n	80118f6 <tcp_rexmit_rto+0x66>
    return;
 80118f4:	bf00      	nop
}
 80118f6:	3710      	adds	r7, #16
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80118fc:	b590      	push	{r4, r7, lr}
 80118fe:	b085      	sub	sp, #20
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011908:	2b00      	cmp	r3, #0
 801190a:	d043      	beq.n	8011994 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011910:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	681a      	ldr	r2, [r3, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	3368      	adds	r3, #104	@ 0x68
 801191e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011920:	e002      	b.n	8011928 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d011      	beq.n	8011954 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	4618      	mov	r0, r3
 801193a:	f7f9 fb72 	bl	800b022 <lwip_htonl>
 801193e:	4604      	mov	r4, r0
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	4618      	mov	r0, r3
 8011948:	f7f9 fb6b 	bl	800b022 <lwip_htonl>
 801194c:	4603      	mov	r3, r0
 801194e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011950:	2b00      	cmp	r3, #0
 8011952:	dbe6      	blt.n	8011922 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d103      	bne.n	8011972 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011978:	2bff      	cmp	r3, #255	@ 0xff
 801197a:	d007      	beq.n	801198c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011982:	3301      	adds	r3, #1
 8011984:	b2da      	uxtb	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2200      	movs	r2, #0
 8011990:	635a      	str	r2, [r3, #52]	@ 0x34
 8011992:	e000      	b.n	8011996 <tcp_rexmit+0x9a>
    return;
 8011994:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	bd90      	pop	{r4, r7, pc}

0801199c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d041      	beq.n	8011a30 <tcp_rexmit_fast+0x94>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	7e9b      	ldrb	r3, [r3, #26]
 80119b0:	f003 0304 	and.w	r3, r3, #4
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d13b      	bne.n	8011a30 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80119b8:	6878      	ldr	r0, [r7, #4]
 80119ba:	f7ff ff9f 	bl	80118fc <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80119ca:	4293      	cmp	r3, r2
 80119cc:	bf28      	it	cs
 80119ce:	4613      	movcs	r3, r2
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	0fda      	lsrs	r2, r3, #31
 80119d4:	4413      	add	r3, r2
 80119d6:	105b      	asrs	r3, r3, #1
 80119d8:	b29a      	uxth	r2, r3
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80119e6:	461a      	mov	r2, r3
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119ec:	005b      	lsls	r3, r3, #1
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d206      	bcs.n	8011a00 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80119f6:	005b      	lsls	r3, r3, #1
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011a0a:	4619      	mov	r1, r3
 8011a0c:	0049      	lsls	r1, r1, #1
 8011a0e:	440b      	add	r3, r1
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	4413      	add	r3, r2
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	7e9b      	ldrb	r3, [r3, #26]
 8011a20:	f043 0304 	orr.w	r3, r3, #4
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 8011a30:	bf00      	nop
 8011a32:	3708      	adds	r7, #8
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b08a      	sub	sp, #40	@ 0x28
 8011a3c:	af04      	add	r7, sp, #16
 8011a3e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a44:	3b01      	subs	r3, #1
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7f9 faeb 	bl	800b022 <lwip_htonl>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2200      	movs	r2, #0
 8011a50:	2100      	movs	r1, #0
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7fe fd58 	bl	8010508 <tcp_output_alloc_header>
 8011a58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d102      	bne.n	8011a66 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011a60:	f04f 33ff 	mov.w	r3, #4294967295
 8011a64:	e021      	b.n	8011aaa <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	3304      	adds	r3, #4
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f001 fede 	bl	801382c <ip4_route>
 8011a70:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d102      	bne.n	8011a7e <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011a78:	23fc      	movs	r3, #252	@ 0xfc
 8011a7a:	75fb      	strb	r3, [r7, #23]
 8011a7c:	e010      	b.n	8011aa0 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011a7e:	6879      	ldr	r1, [r7, #4]
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	1d1a      	adds	r2, r3, #4
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	7a98      	ldrb	r0, [r3, #10]
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	9302      	str	r3, [sp, #8]
 8011a8c:	2306      	movs	r3, #6
 8011a8e:	9301      	str	r3, [sp, #4]
 8011a90:	2300      	movs	r3, #0
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	4603      	mov	r3, r0
 8011a96:	6938      	ldr	r0, [r7, #16]
 8011a98:	f002 f870 	bl	8013b7c <ip4_output_if>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011aa0:	6938      	ldr	r0, [r7, #16]
 8011aa2:	f7fa fc87 	bl	800c3b4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3718      	adds	r7, #24
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011ab2:	b590      	push	{r4, r7, lr}
 8011ab4:	b08f      	sub	sp, #60	@ 0x3c
 8011ab6:	af04      	add	r7, sp, #16
 8011ab8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011abe:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011aca:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011acc:	6a3b      	ldr	r3, [r7, #32]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d101      	bne.n	8011ad6 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e085      	b.n	8011be2 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011ad6:	6a3b      	ldr	r3, [r7, #32]
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	899b      	ldrh	r3, [r3, #12]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f9 fa92 	bl	800b008 <lwip_htons>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d005      	beq.n	8011afa <tcp_zero_window_probe+0x48>
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	891b      	ldrh	r3, [r3, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d101      	bne.n	8011afa <tcp_zero_window_probe+0x48>
 8011af6:	2301      	movs	r3, #1
 8011af8:	e000      	b.n	8011afc <tcp_zero_window_probe+0x4a>
 8011afa:	2300      	movs	r3, #0
 8011afc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011afe:	7ffb      	ldrb	r3, [r7, #31]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	bf0c      	ite	eq
 8011b04:	2301      	moveq	r3, #1
 8011b06:	2300      	movne	r3, #0
 8011b08:	b2db      	uxtb	r3, r3
 8011b0a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8011b0c:	6a3b      	ldr	r3, [r7, #32]
 8011b0e:	68db      	ldr	r3, [r3, #12]
 8011b10:	685b      	ldr	r3, [r3, #4]
 8011b12:	8bba      	ldrh	r2, [r7, #28]
 8011b14:	2100      	movs	r1, #0
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7fe fcf6 	bl	8010508 <tcp_output_alloc_header>
 8011b1c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011b1e:	69bb      	ldr	r3, [r7, #24]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d102      	bne.n	8011b2a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011b24:	f04f 33ff 	mov.w	r3, #4294967295
 8011b28:	e05b      	b.n	8011be2 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011b30:	7ffb      	ldrb	r3, [r7, #31]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00e      	beq.n	8011b54 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	899b      	ldrh	r3, [r3, #12]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011b40:	b29c      	uxth	r4, r3
 8011b42:	2011      	movs	r0, #17
 8011b44:	f7f9 fa60 	bl	800b008 <lwip_htons>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	4323      	orrs	r3, r4
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	819a      	strh	r2, [r3, #12]
 8011b52:	e010      	b.n	8011b76 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	3314      	adds	r3, #20
 8011b5a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011b5c:	6a3b      	ldr	r3, [r7, #32]
 8011b5e:	6858      	ldr	r0, [r3, #4]
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	891a      	ldrh	r2, [r3, #8]
 8011b66:	6a3b      	ldr	r3, [r7, #32]
 8011b68:	891b      	ldrh	r3, [r3, #8]
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	b29b      	uxth	r3, r3
 8011b6e:	2201      	movs	r2, #1
 8011b70:	6939      	ldr	r1, [r7, #16]
 8011b72:	f7fa fe29 	bl	800c7c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b76:	6a3b      	ldr	r3, [r7, #32]
 8011b78:	68db      	ldr	r3, [r3, #12]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7f9 fa50 	bl	800b022 <lwip_htonl>
 8011b82:	4603      	mov	r3, r0
 8011b84:	3301      	adds	r3, #1
 8011b86:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	1ad3      	subs	r3, r2, r3
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	da02      	bge.n	8011b9a <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	3304      	adds	r3, #4
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f001 fe44 	bl	801382c <ip4_route>
 8011ba4:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d103      	bne.n	8011bb4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011bac:	23fc      	movs	r3, #252	@ 0xfc
 8011bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011bb2:	e011      	b.n	8011bd8 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011bb4:	6879      	ldr	r1, [r7, #4]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	1d1a      	adds	r2, r3, #4
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	7a98      	ldrb	r0, [r3, #10]
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	9302      	str	r3, [sp, #8]
 8011bc2:	2306      	movs	r3, #6
 8011bc4:	9301      	str	r3, [sp, #4]
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	9300      	str	r3, [sp, #0]
 8011bca:	4603      	mov	r3, r0
 8011bcc:	69b8      	ldr	r0, [r7, #24]
 8011bce:	f001 ffd5 	bl	8013b7c <ip4_output_if>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011bd8:	69b8      	ldr	r0, [r7, #24]
 8011bda:	f7fa fbeb 	bl	800c3b4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011bde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	372c      	adds	r7, #44	@ 0x2c
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd90      	pop	{r4, r7, pc}
	...

08011bec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011bf4:	f7fa fe68 	bl	800c8c8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8011c24 <tcpip_tcp_timer+0x38>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d103      	bne.n	8011c08 <tcpip_tcp_timer+0x1c>
 8011c00:	4b09      	ldr	r3, [pc, #36]	@ (8011c28 <tcpip_tcp_timer+0x3c>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4908      	ldr	r1, [pc, #32]	@ (8011c2c <tcpip_tcp_timer+0x40>)
 8011c0c:	20fa      	movs	r0, #250	@ 0xfa
 8011c0e:	f000 f86f 	bl	8011cf0 <sys_timeout>
 8011c12:	e003      	b.n	8011c1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011c14:	4b06      	ldr	r3, [pc, #24]	@ (8011c30 <tcpip_tcp_timer+0x44>)
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
  }
}
 8011c1a:	bf00      	nop
 8011c1c:	bf00      	nop
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	20009880 	.word	0x20009880
 8011c28:	20009884 	.word	0x20009884
 8011c2c:	08011bed 	.word	0x08011bed
 8011c30:	200098cc 	.word	0x200098cc

08011c34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011c38:	4b0a      	ldr	r3, [pc, #40]	@ (8011c64 <tcp_timer_needed+0x30>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d10f      	bne.n	8011c60 <tcp_timer_needed+0x2c>
 8011c40:	4b09      	ldr	r3, [pc, #36]	@ (8011c68 <tcp_timer_needed+0x34>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d103      	bne.n	8011c50 <tcp_timer_needed+0x1c>
 8011c48:	4b08      	ldr	r3, [pc, #32]	@ (8011c6c <tcp_timer_needed+0x38>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d007      	beq.n	8011c60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011c50:	4b04      	ldr	r3, [pc, #16]	@ (8011c64 <tcp_timer_needed+0x30>)
 8011c52:	2201      	movs	r2, #1
 8011c54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011c56:	2200      	movs	r2, #0
 8011c58:	4905      	ldr	r1, [pc, #20]	@ (8011c70 <tcp_timer_needed+0x3c>)
 8011c5a:	20fa      	movs	r0, #250	@ 0xfa
 8011c5c:	f000 f848 	bl	8011cf0 <sys_timeout>
  }
}
 8011c60:	bf00      	nop
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	200098cc 	.word	0x200098cc
 8011c68:	20009880 	.word	0x20009880
 8011c6c:	20009884 	.word	0x20009884
 8011c70:	08011bed 	.word	0x08011bed

08011c74 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	4903      	ldr	r1, [pc, #12]	@ (8011c9c <cyclic_timer+0x28>)
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 f82e 	bl	8011cf0 <sys_timeout>
}
 8011c94:	bf00      	nop
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	08011c75 	.word	0x08011c75

08011ca0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	607b      	str	r3, [r7, #4]
 8011caa:	e00e      	b.n	8011cca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011cac:	4a0d      	ldr	r2, [pc, #52]	@ (8011ce4 <sys_timeouts_init+0x44>)
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	00db      	lsls	r3, r3, #3
 8011cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8011ce4 <sys_timeouts_init+0x44>)
 8011cba:	4413      	add	r3, r2
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	490a      	ldr	r1, [pc, #40]	@ (8011ce8 <sys_timeouts_init+0x48>)
 8011cc0:	f000 f816 	bl	8011cf0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	607b      	str	r3, [r7, #4]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b02      	cmp	r3, #2
 8011cce:	d9ed      	bls.n	8011cac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011cd0:	f7f3 f856 	bl	8004d80 <sys_now>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	4a05      	ldr	r2, [pc, #20]	@ (8011cec <sys_timeouts_init+0x4c>)
 8011cd8:	6013      	str	r3, [r2, #0]
}
 8011cda:	bf00      	nop
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	0801aca0 	.word	0x0801aca0
 8011ce8:	08011c75 	.word	0x08011c75
 8011cec:	200098c8 	.word	0x200098c8

08011cf0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011cfc:	200a      	movs	r0, #10
 8011cfe:	f7f9 fd6f 	bl	800b7e0 <memp_malloc>
 8011d02:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d10a      	bne.n	8011d20 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	f040 8084 	bne.w	8011e1a <sys_timeout+0x12a>
 8011d12:	4b44      	ldr	r3, [pc, #272]	@ (8011e24 <sys_timeout+0x134>)
 8011d14:	22d4      	movs	r2, #212	@ 0xd4
 8011d16:	4944      	ldr	r1, [pc, #272]	@ (8011e28 <sys_timeout+0x138>)
 8011d18:	4844      	ldr	r0, [pc, #272]	@ (8011e2c <sys_timeout+0x13c>)
 8011d1a:	f005 fa3b 	bl	8017194 <iprintf>
    return;
 8011d1e:	e07c      	b.n	8011e1a <sys_timeout+0x12a>
  }

  now = sys_now();
 8011d20:	f7f3 f82e 	bl	8004d80 <sys_now>
 8011d24:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8011d26:	4b42      	ldr	r3, [pc, #264]	@ (8011e30 <sys_timeout+0x140>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d105      	bne.n	8011d3a <sys_timeout+0x4a>
    diff = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8011d32:	4a40      	ldr	r2, [pc, #256]	@ (8011e34 <sys_timeout+0x144>)
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	6013      	str	r3, [r2, #0]
 8011d38:	e004      	b.n	8011d44 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8011d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8011e34 <sys_timeout+0x144>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	693a      	ldr	r2, [r7, #16]
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	2200      	movs	r2, #0
 8011d48:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8011d56:	68fa      	ldr	r2, [r7, #12]
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	441a      	add	r2, r3
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011d60:	4b33      	ldr	r3, [pc, #204]	@ (8011e30 <sys_timeout+0x140>)
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d103      	bne.n	8011d70 <sys_timeout+0x80>
    next_timeout = timeout;
 8011d68:	4a31      	ldr	r2, [pc, #196]	@ (8011e30 <sys_timeout+0x140>)
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	6013      	str	r3, [r2, #0]
    return;
 8011d6e:	e055      	b.n	8011e1c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8011d70:	4b2f      	ldr	r3, [pc, #188]	@ (8011e30 <sys_timeout+0x140>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d20f      	bcs.n	8011d9c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8011d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8011e30 <sys_timeout+0x140>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	6859      	ldr	r1, [r3, #4]
 8011d82:	4b2b      	ldr	r3, [pc, #172]	@ (8011e30 <sys_timeout+0x140>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	68fa      	ldr	r2, [r7, #12]
 8011d88:	1a8a      	subs	r2, r1, r2
 8011d8a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8011d8c:	4b28      	ldr	r3, [pc, #160]	@ (8011e30 <sys_timeout+0x140>)
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011d94:	4a26      	ldr	r2, [pc, #152]	@ (8011e30 <sys_timeout+0x140>)
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	6013      	str	r3, [r2, #0]
 8011d9a:	e03f      	b.n	8011e1c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011d9c:	4b24      	ldr	r3, [pc, #144]	@ (8011e30 <sys_timeout+0x140>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	61fb      	str	r3, [r7, #28]
 8011da2:	e036      	b.n	8011e12 <sys_timeout+0x122>
      timeout->time -= t->time;
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	685a      	ldr	r2, [r3, #4]
 8011da8:	69fb      	ldr	r3, [r7, #28]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	1ad2      	subs	r2, r2, r3
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d006      	beq.n	8011dc8 <sys_timeout+0xd8>
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d921      	bls.n	8011e0c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8011dc8:	69fb      	ldr	r3, [r7, #28]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d009      	beq.n	8011de4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	6859      	ldr	r1, [r3, #4]
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	685a      	ldr	r2, [r3, #4]
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	1a8a      	subs	r2, r1, r2
 8011de0:	605a      	str	r2, [r3, #4]
 8011de2:	e00b      	b.n	8011dfc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d206      	bcs.n	8011dfc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8011dee:	4b10      	ldr	r3, [pc, #64]	@ (8011e30 <sys_timeout+0x140>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	685a      	ldr	r2, [r3, #4]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	441a      	add	r2, r3
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8011dfc:	69fb      	ldr	r3, [r7, #28]
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	697a      	ldr	r2, [r7, #20]
 8011e08:	601a      	str	r2, [r3, #0]
        break;
 8011e0a:	e007      	b.n	8011e1c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	61fb      	str	r3, [r7, #28]
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d1c5      	bne.n	8011da4 <sys_timeout+0xb4>
 8011e18:	e000      	b.n	8011e1c <sys_timeout+0x12c>
    return;
 8011e1a:	bf00      	nop
      }
    }
  }
}
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	0801a2a0 	.word	0x0801a2a0
 8011e28:	0801a2d4 	.word	0x0801a2d4
 8011e2c:	0801a314 	.word	0x0801a314
 8011e30:	200098c4 	.word	0x200098c4
 8011e34:	200098c8 	.word	0x200098c8

08011e38 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b086      	sub	sp, #24
 8011e3c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8011e3e:	4b24      	ldr	r3, [pc, #144]	@ (8011ed0 <sys_check_timeouts+0x98>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d03f      	beq.n	8011ec6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8011e46:	f7f2 ff9b 	bl	8004d80 <sys_now>
 8011e4a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8011e4c:	4b21      	ldr	r3, [pc, #132]	@ (8011ed4 <sys_check_timeouts+0x9c>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	68fa      	ldr	r2, [r7, #12]
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8011e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ed0 <sys_check_timeouts+0x98>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d02c      	beq.n	8011ec0 <sys_check_timeouts+0x88>
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	697a      	ldr	r2, [r7, #20]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d327      	bcc.n	8011ec0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011e70:	2301      	movs	r3, #1
 8011e72:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	685a      	ldr	r2, [r3, #4]
 8011e78:	4b16      	ldr	r3, [pc, #88]	@ (8011ed4 <sys_check_timeouts+0x9c>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	4413      	add	r3, r2
 8011e7e:	4a15      	ldr	r2, [pc, #84]	@ (8011ed4 <sys_check_timeouts+0x9c>)
 8011e80:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	697a      	ldr	r2, [r7, #20]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	4a0f      	ldr	r2, [pc, #60]	@ (8011ed0 <sys_check_timeouts+0x98>)
 8011e92:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	689b      	ldr	r3, [r3, #8]
 8011e98:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	68db      	ldr	r3, [r3, #12]
 8011e9e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011ea0:	68b9      	ldr	r1, [r7, #8]
 8011ea2:	200a      	movs	r0, #10
 8011ea4:	f7f9 fcee 	bl	800b884 <memp_free>
        if (handler != NULL) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d008      	beq.n	8011ec0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8011eae:	480a      	ldr	r0, [pc, #40]	@ (8011ed8 <sys_check_timeouts+0xa0>)
 8011eb0:	f003 f90a 	bl	80150c8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6838      	ldr	r0, [r7, #0]
 8011eb8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8011eba:	4807      	ldr	r0, [pc, #28]	@ (8011ed8 <sys_check_timeouts+0xa0>)
 8011ebc:	f003 f913 	bl	80150e6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011ec0:	7cfb      	ldrb	r3, [r7, #19]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d1c7      	bne.n	8011e56 <sys_check_timeouts+0x1e>
  }
}
 8011ec6:	bf00      	nop
 8011ec8:	3718      	adds	r7, #24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	200098c4 	.word	0x200098c4
 8011ed4:	200098c8 	.word	0x200098c8
 8011ed8:	20006100 	.word	0x20006100

08011edc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b082      	sub	sp, #8
 8011ee0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8011f20 <sys_timeouts_sleeptime+0x44>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d102      	bne.n	8011ef0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8011eea:	f04f 33ff 	mov.w	r3, #4294967295
 8011eee:	e013      	b.n	8011f18 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011ef0:	f7f2 ff46 	bl	8004d80 <sys_now>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8011f24 <sys_timeouts_sleeptime+0x48>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8011efe:	4b08      	ldr	r3, [pc, #32]	@ (8011f20 <sys_timeouts_sleeptime+0x44>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	429a      	cmp	r2, r3
 8011f08:	d901      	bls.n	8011f0e <sys_timeouts_sleeptime+0x32>
    return 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	e004      	b.n	8011f18 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8011f0e:	4b04      	ldr	r3, [pc, #16]	@ (8011f20 <sys_timeouts_sleeptime+0x44>)
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	685a      	ldr	r2, [r3, #4]
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	1ad3      	subs	r3, r2, r3
  }
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3708      	adds	r7, #8
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	200098c4 	.word	0x200098c4
 8011f24:	200098c8 	.word	0x200098c8

08011f28 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8011f32:	4b0f      	ldr	r3, [pc, #60]	@ (8011f70 <sys_timeouts_mbox_fetch+0x48>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d105      	bne.n	8011f46 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f002 ff92 	bl	8014e68 <sys_arch_mbox_fetch>
    return;
 8011f44:	e011      	b.n	8011f6a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8011f46:	f7ff ffc9 	bl	8011edc <sys_timeouts_sleeptime>
 8011f4a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d008      	beq.n	8011f64 <sys_timeouts_mbox_fetch+0x3c>
 8011f52:	68fa      	ldr	r2, [r7, #12]
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f002 ff86 	bl	8014e68 <sys_arch_mbox_fetch>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f62:	d102      	bne.n	8011f6a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011f64:	f7ff ff68 	bl	8011e38 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011f68:	e7e3      	b.n	8011f32 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8011f6a:	3710      	adds	r7, #16
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	bd80      	pop	{r7, pc}
 8011f70:	200098c4 	.word	0x200098c4

08011f74 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011f74:	b480      	push	{r7}
 8011f76:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011f78:	bf00      	nop
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bc80      	pop	{r7}
 8011f7e:	4770      	bx	lr

08011f80 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011f86:	2300      	movs	r3, #0
 8011f88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011f8a:	4b17      	ldr	r3, [pc, #92]	@ (8011fe8 <udp_new_port+0x68>)
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	1c5a      	adds	r2, r3, #1
 8011f90:	b291      	uxth	r1, r2
 8011f92:	4a15      	ldr	r2, [pc, #84]	@ (8011fe8 <udp_new_port+0x68>)
 8011f94:	8011      	strh	r1, [r2, #0]
 8011f96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d103      	bne.n	8011fa6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011f9e:	4b12      	ldr	r3, [pc, #72]	@ (8011fe8 <udp_new_port+0x68>)
 8011fa0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011fa4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fa6:	4b11      	ldr	r3, [pc, #68]	@ (8011fec <udp_new_port+0x6c>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	603b      	str	r3, [r7, #0]
 8011fac:	e011      	b.n	8011fd2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	8a5a      	ldrh	r2, [r3, #18]
 8011fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe8 <udp_new_port+0x68>)
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d108      	bne.n	8011fcc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011fba:	88fb      	ldrh	r3, [r7, #6]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	80fb      	strh	r3, [r7, #6]
 8011fc0:	88fb      	ldrh	r3, [r7, #6]
 8011fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011fc6:	d3e0      	bcc.n	8011f8a <udp_new_port+0xa>
        return 0;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	e007      	b.n	8011fdc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	603b      	str	r3, [r7, #0]
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d1ea      	bne.n	8011fae <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011fd8:	4b03      	ldr	r3, [pc, #12]	@ (8011fe8 <udp_new_port+0x68>)
 8011fda:	881b      	ldrh	r3, [r3, #0]
}
 8011fdc:	4618      	mov	r0, r3
 8011fde:	370c      	adds	r7, #12
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bc80      	pop	{r7}
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	20000018 	.word	0x20000018
 8011fec:	200098d0 	.word	0x200098d0

08011ff0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011ffe:	79fb      	ldrb	r3, [r7, #7]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d018      	beq.n	8012036 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d013      	beq.n	8012032 <udp_input_local_match+0x42>
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00f      	beq.n	8012032 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012012:	4b13      	ldr	r3, [pc, #76]	@ (8012060 <udp_input_local_match+0x70>)
 8012014:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801201a:	d00a      	beq.n	8012032 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	681a      	ldr	r2, [r3, #0]
 8012020:	4b0f      	ldr	r3, [pc, #60]	@ (8012060 <udp_input_local_match+0x70>)
 8012022:	695b      	ldr	r3, [r3, #20]
 8012024:	405a      	eors	r2, r3
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	3308      	adds	r3, #8
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801202e:	2b00      	cmp	r3, #0
 8012030:	d110      	bne.n	8012054 <udp_input_local_match+0x64>
          return 1;
 8012032:	2301      	movs	r3, #1
 8012034:	e00f      	b.n	8012056 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d009      	beq.n	8012050 <udp_input_local_match+0x60>
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d005      	beq.n	8012050 <udp_input_local_match+0x60>
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	4b05      	ldr	r3, [pc, #20]	@ (8012060 <udp_input_local_match+0x70>)
 801204a:	695b      	ldr	r3, [r3, #20]
 801204c:	429a      	cmp	r2, r3
 801204e:	d101      	bne.n	8012054 <udp_input_local_match+0x64>
      return 1;
 8012050:	2301      	movs	r3, #1
 8012052:	e000      	b.n	8012056 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012054:	2300      	movs	r3, #0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3714      	adds	r7, #20
 801205a:	46bd      	mov	sp, r7
 801205c:	bc80      	pop	{r7}
 801205e:	4770      	bx	lr
 8012060:	20006104 	.word	0x20006104

08012064 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012064:	b590      	push	{r4, r7, lr}
 8012066:	b08d      	sub	sp, #52	@ 0x34
 8012068:	af02      	add	r7, sp, #8
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	895b      	ldrh	r3, [r3, #10]
 8012076:	2b07      	cmp	r3, #7
 8012078:	d803      	bhi.n	8012082 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7fa f99a 	bl	800c3b4 <pbuf_free>
    goto end;
 8012080:	e0c6      	b.n	8012210 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	685b      	ldr	r3, [r3, #4]
 8012086:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012088:	4b63      	ldr	r3, [pc, #396]	@ (8012218 <udp_input+0x1b4>)
 801208a:	695b      	ldr	r3, [r3, #20]
 801208c:	4a62      	ldr	r2, [pc, #392]	@ (8012218 <udp_input+0x1b4>)
 801208e:	6812      	ldr	r2, [r2, #0]
 8012090:	4611      	mov	r1, r2
 8012092:	4618      	mov	r0, r3
 8012094:	f001 fe44 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8012098:	4603      	mov	r3, r0
 801209a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7f8 ffb0 	bl	800b008 <lwip_htons>
 80120a8:	4603      	mov	r3, r0
 80120aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	885b      	ldrh	r3, [r3, #2]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	4618      	mov	r0, r3
 80120b4:	f7f8 ffa8 	bl	800b008 <lwip_htons>
 80120b8:	4603      	mov	r3, r0
 80120ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80120bc:	2300      	movs	r3, #0
 80120be:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80120c0:	2300      	movs	r3, #0
 80120c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80120c4:	2300      	movs	r3, #0
 80120c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120c8:	4b54      	ldr	r3, [pc, #336]	@ (801221c <udp_input+0x1b8>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80120ce:	e03b      	b.n	8012148 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80120d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120d2:	8a5b      	ldrh	r3, [r3, #18]
 80120d4:	89fa      	ldrh	r2, [r7, #14]
 80120d6:	429a      	cmp	r2, r3
 80120d8:	d131      	bne.n	801213e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120da:	7cfb      	ldrb	r3, [r7, #19]
 80120dc:	461a      	mov	r2, r3
 80120de:	6839      	ldr	r1, [r7, #0]
 80120e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120e2:	f7ff ff85 	bl	8011ff0 <udp_input_local_match>
 80120e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d028      	beq.n	801213e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80120ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ee:	7c1b      	ldrb	r3, [r3, #16]
 80120f0:	f003 0304 	and.w	r3, r3, #4
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d104      	bne.n	8012102 <udp_input+0x9e>
 80120f8:	69fb      	ldr	r3, [r7, #28]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d101      	bne.n	8012102 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80120fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012100:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012104:	8a9b      	ldrh	r3, [r3, #20]
 8012106:	8a3a      	ldrh	r2, [r7, #16]
 8012108:	429a      	cmp	r2, r3
 801210a:	d118      	bne.n	801213e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012110:	2b00      	cmp	r3, #0
 8012112:	d005      	beq.n	8012120 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012116:	685a      	ldr	r2, [r3, #4]
 8012118:	4b3f      	ldr	r3, [pc, #252]	@ (8012218 <udp_input+0x1b4>)
 801211a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801211c:	429a      	cmp	r2, r3
 801211e:	d10e      	bne.n	801213e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012120:	6a3b      	ldr	r3, [r7, #32]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d014      	beq.n	8012150 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012128:	68da      	ldr	r2, [r3, #12]
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801212e:	4b3b      	ldr	r3, [pc, #236]	@ (801221c <udp_input+0x1b8>)
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012134:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012136:	4a39      	ldr	r2, [pc, #228]	@ (801221c <udp_input+0x1b8>)
 8012138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801213c:	e008      	b.n	8012150 <udp_input+0xec>
      }
    }

    prev = pcb;
 801213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012140:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	627b      	str	r3, [r7, #36]	@ 0x24
 8012148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214a:	2b00      	cmp	r3, #0
 801214c:	d1c0      	bne.n	80120d0 <udp_input+0x6c>
 801214e:	e000      	b.n	8012152 <udp_input+0xee>
        break;
 8012150:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012154:	2b00      	cmp	r3, #0
 8012156:	d101      	bne.n	801215c <udp_input+0xf8>
    pcb = uncon_pcb;
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801215e:	2b00      	cmp	r3, #0
 8012160:	d002      	beq.n	8012168 <udp_input+0x104>
    for_us = 1;
 8012162:	2301      	movs	r3, #1
 8012164:	76fb      	strb	r3, [r7, #27]
 8012166:	e00a      	b.n	801217e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	3304      	adds	r3, #4
 801216c:	681a      	ldr	r2, [r3, #0]
 801216e:	4b2a      	ldr	r3, [pc, #168]	@ (8012218 <udp_input+0x1b4>)
 8012170:	695b      	ldr	r3, [r3, #20]
 8012172:	429a      	cmp	r2, r3
 8012174:	bf0c      	ite	eq
 8012176:	2301      	moveq	r3, #1
 8012178:	2300      	movne	r3, #0
 801217a:	b2db      	uxtb	r3, r3
 801217c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801217e:	7efb      	ldrb	r3, [r7, #27]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d042      	beq.n	801220a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012184:	f06f 0107 	mvn.w	r1, #7
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7fa f8ef 	bl	800c36c <pbuf_header>
 801218e:	4603      	mov	r3, r0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d00a      	beq.n	80121aa <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012194:	4b22      	ldr	r3, [pc, #136]	@ (8012220 <udp_input+0x1bc>)
 8012196:	f240 1255 	movw	r2, #341	@ 0x155
 801219a:	4922      	ldr	r1, [pc, #136]	@ (8012224 <udp_input+0x1c0>)
 801219c:	4822      	ldr	r0, [pc, #136]	@ (8012228 <udp_input+0x1c4>)
 801219e:	f004 fff9 	bl	8017194 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7fa f906 	bl	800c3b4 <pbuf_free>
      goto end;
 80121a8:	e032      	b.n	8012210 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80121aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d012      	beq.n	80121d6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b2:	699b      	ldr	r3, [r3, #24]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d00a      	beq.n	80121ce <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ba:	699c      	ldr	r4, [r3, #24]
 80121bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121be:	69d8      	ldr	r0, [r3, #28]
 80121c0:	8a3b      	ldrh	r3, [r7, #16]
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	4b19      	ldr	r3, [pc, #100]	@ (801222c <udp_input+0x1c8>)
 80121c6:	687a      	ldr	r2, [r7, #4]
 80121c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80121ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121cc:	e021      	b.n	8012212 <udp_input+0x1ae>
        pbuf_free(p);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7fa f8f0 	bl	800c3b4 <pbuf_free>
        goto end;
 80121d4:	e01c      	b.n	8012210 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121d6:	7cfb      	ldrb	r3, [r7, #19]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d112      	bne.n	8012202 <udp_input+0x19e>
 80121dc:	4b0e      	ldr	r3, [pc, #56]	@ (8012218 <udp_input+0x1b4>)
 80121de:	695b      	ldr	r3, [r3, #20]
 80121e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121e4:	2be0      	cmp	r3, #224	@ 0xe0
 80121e6:	d00c      	beq.n	8012202 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121e8:	4b0b      	ldr	r3, [pc, #44]	@ (8012218 <udp_input+0x1b4>)
 80121ea:	899b      	ldrh	r3, [r3, #12]
 80121ec:	3308      	adds	r3, #8
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	b21b      	sxth	r3, r3
 80121f2:	4619      	mov	r1, r3
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7fa f8cb 	bl	800c390 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80121fa:	2103      	movs	r1, #3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f001 fa8d 	bl	801371c <icmp_dest_unreach>
      pbuf_free(p);
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f7fa f8d6 	bl	800c3b4 <pbuf_free>
  return;
 8012208:	e003      	b.n	8012212 <udp_input+0x1ae>
    pbuf_free(p);
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f7fa f8d2 	bl	800c3b4 <pbuf_free>
  return;
 8012210:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012212:	372c      	adds	r7, #44	@ 0x2c
 8012214:	46bd      	mov	sp, r7
 8012216:	bd90      	pop	{r4, r7, pc}
 8012218:	20006104 	.word	0x20006104
 801221c:	200098d0 	.word	0x200098d0
 8012220:	0801a33c 	.word	0x0801a33c
 8012224:	0801a36c 	.word	0x0801a36c
 8012228:	0801a380 	.word	0x0801a380
 801222c:	20006114 	.word	0x20006114

08012230 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
 8012238:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d102      	bne.n	8012246 <udp_send+0x16>
    return ERR_VAL;
 8012240:	f06f 0305 	mvn.w	r3, #5
 8012244:	e008      	b.n	8012258 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	1d1a      	adds	r2, r3, #4
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8a9b      	ldrh	r3, [r3, #20]
 801224e:	6839      	ldr	r1, [r7, #0]
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f805 	bl	8012260 <udp_sendto>
 8012256:	4603      	mov	r3, r0
}
 8012258:	4618      	mov	r0, r3
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}

08012260 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b088      	sub	sp, #32
 8012264:	af02      	add	r7, sp, #8
 8012266:	60f8      	str	r0, [r7, #12]
 8012268:	60b9      	str	r1, [r7, #8]
 801226a:	607a      	str	r2, [r7, #4]
 801226c:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d002      	beq.n	801227e <udp_sendto+0x1e>
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d102      	bne.n	8012284 <udp_sendto+0x24>
    return ERR_VAL;
 801227e:	f06f 0305 	mvn.w	r3, #5
 8012282:	e013      	b.n	80122ac <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8012284:	6978      	ldr	r0, [r7, #20]
 8012286:	f001 fad1 	bl	801382c <ip4_route>
 801228a:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d102      	bne.n	8012298 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012292:	f06f 0303 	mvn.w	r3, #3
 8012296:	e009      	b.n	80122ac <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012298:	887a      	ldrh	r2, [r7, #2]
 801229a:	693b      	ldr	r3, [r7, #16]
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	4613      	mov	r3, r2
 80122a0:	687a      	ldr	r2, [r7, #4]
 80122a2:	68b9      	ldr	r1, [r7, #8]
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f000 f805 	bl	80122b4 <udp_sendto_if>
 80122aa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3718      	adds	r7, #24
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b088      	sub	sp, #32
 80122b8:	af02      	add	r7, sp, #8
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d002      	beq.n	80122ce <udp_sendto_if+0x1a>
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d102      	bne.n	80122d4 <udp_sendto_if+0x20>
    return ERR_VAL;
 80122ce:	f06f 0305 	mvn.w	r3, #5
 80122d2:	e028      	b.n	8012326 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d009      	beq.n	80122ee <udp_sendto_if+0x3a>
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d005      	beq.n	80122ee <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122ea:	2be0      	cmp	r3, #224	@ 0xe0
 80122ec:	d103      	bne.n	80122f6 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 80122ee:	6a3b      	ldr	r3, [r7, #32]
 80122f0:	3304      	adds	r3, #4
 80122f2:	617b      	str	r3, [r7, #20]
 80122f4:	e00b      	b.n	801230e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681a      	ldr	r2, [r3, #0]
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	3304      	adds	r3, #4
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	429a      	cmp	r2, r3
 8012302:	d002      	beq.n	801230a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012304:	f06f 0303 	mvn.w	r3, #3
 8012308:	e00d      	b.n	8012326 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801230e:	887a      	ldrh	r2, [r7, #2]
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	9301      	str	r3, [sp, #4]
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	4613      	mov	r3, r2
 801231a:	687a      	ldr	r2, [r7, #4]
 801231c:	68b9      	ldr	r1, [r7, #8]
 801231e:	68f8      	ldr	r0, [r7, #12]
 8012320:	f000 f806 	bl	8012330 <udp_sendto_if_src>
 8012324:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012326:	4618      	mov	r0, r3
 8012328:	3718      	adds	r7, #24
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}
	...

08012330 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b08c      	sub	sp, #48	@ 0x30
 8012334:	af04      	add	r7, sp, #16
 8012336:	60f8      	str	r0, [r7, #12]
 8012338:	60b9      	str	r1, [r7, #8]
 801233a:	607a      	str	r2, [r7, #4]
 801233c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <udp_sendto_if_src+0x1a>
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d102      	bne.n	8012350 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 801234a:	f06f 0305 	mvn.w	r3, #5
 801234e:	e07e      	b.n	801244e <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	8a5b      	ldrh	r3, [r3, #18]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d10f      	bne.n	8012378 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012358:	68f9      	ldr	r1, [r7, #12]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	8a5b      	ldrh	r3, [r3, #18]
 801235e:	461a      	mov	r2, r3
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f000 f87f 	bl	8012464 <udp_bind>
 8012366:	4603      	mov	r3, r0
 8012368:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801236a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d002      	beq.n	8012378 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012372:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012376:	e06a      	b.n	801244e <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012378:	2108      	movs	r1, #8
 801237a:	68b8      	ldr	r0, [r7, #8]
 801237c:	f7f9 fff6 	bl	800c36c <pbuf_header>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	d014      	beq.n	80123b0 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012386:	2200      	movs	r2, #0
 8012388:	2108      	movs	r1, #8
 801238a:	2001      	movs	r0, #1
 801238c:	f7f9 fc9a 	bl	800bcc4 <pbuf_alloc>
 8012390:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012392:	69fb      	ldr	r3, [r7, #28]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d102      	bne.n	801239e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012398:	f04f 33ff 	mov.w	r3, #4294967295
 801239c:	e057      	b.n	801244e <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	891b      	ldrh	r3, [r3, #8]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d006      	beq.n	80123b4 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80123a6:	68b9      	ldr	r1, [r7, #8]
 80123a8:	69f8      	ldr	r0, [r7, #28]
 80123aa:	f7fa f931 	bl	800c610 <pbuf_chain>
 80123ae:	e001      	b.n	80123b4 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80123b4:	69fb      	ldr	r3, [r7, #28]
 80123b6:	895b      	ldrh	r3, [r3, #10]
 80123b8:	2b07      	cmp	r3, #7
 80123ba:	d806      	bhi.n	80123ca <udp_sendto_if_src+0x9a>
 80123bc:	4b26      	ldr	r3, [pc, #152]	@ (8012458 <udp_sendto_if_src+0x128>)
 80123be:	f240 22db 	movw	r2, #731	@ 0x2db
 80123c2:	4926      	ldr	r1, [pc, #152]	@ (801245c <udp_sendto_if_src+0x12c>)
 80123c4:	4826      	ldr	r0, [pc, #152]	@ (8012460 <udp_sendto_if_src+0x130>)
 80123c6:	f004 fee5 	bl	8017194 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	685b      	ldr	r3, [r3, #4]
 80123ce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	8a5b      	ldrh	r3, [r3, #18]
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7f8 fe17 	bl	800b008 <lwip_htons>
 80123da:	4603      	mov	r3, r0
 80123dc:	461a      	mov	r2, r3
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80123e2:	887b      	ldrh	r3, [r7, #2]
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7f8 fe0f 	bl	800b008 <lwip_htons>
 80123ea:	4603      	mov	r3, r0
 80123ec:	461a      	mov	r2, r3
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2200      	movs	r2, #0
 80123f6:	719a      	strb	r2, [r3, #6]
 80123f8:	2200      	movs	r2, #0
 80123fa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80123fc:	69fb      	ldr	r3, [r7, #28]
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	4618      	mov	r0, r3
 8012402:	f7f8 fe01 	bl	800b008 <lwip_htons>
 8012406:	4603      	mov	r3, r0
 8012408:	461a      	mov	r2, r3
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801240e:	2311      	movs	r3, #17
 8012410:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	7a9b      	ldrb	r3, [r3, #10]
 8012416:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	7a5b      	ldrb	r3, [r3, #9]
 801241c:	7cb9      	ldrb	r1, [r7, #18]
 801241e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012420:	9202      	str	r2, [sp, #8]
 8012422:	7cfa      	ldrb	r2, [r7, #19]
 8012424:	9201      	str	r2, [sp, #4]
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	460b      	mov	r3, r1
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801242e:	69f8      	ldr	r0, [r7, #28]
 8012430:	f001 fbce 	bl	8013bd0 <ip4_output_if_src>
 8012434:	4603      	mov	r3, r0
 8012436:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012438:	69fa      	ldr	r2, [r7, #28]
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	429a      	cmp	r2, r3
 801243e:	d004      	beq.n	801244a <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8012440:	69f8      	ldr	r0, [r7, #28]
 8012442:	f7f9 ffb7 	bl	800c3b4 <pbuf_free>
    q = NULL;
 8012446:	2300      	movs	r3, #0
 8012448:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801244a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3720      	adds	r7, #32
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}
 8012456:	bf00      	nop
 8012458:	0801a33c 	.word	0x0801a33c
 801245c:	0801a3a8 	.word	0x0801a3a8
 8012460:	0801a380 	.word	0x0801a380

08012464 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b086      	sub	sp, #24
 8012468:	af00      	add	r7, sp, #0
 801246a:	60f8      	str	r0, [r7, #12]
 801246c:	60b9      	str	r1, [r7, #8]
 801246e:	4613      	mov	r3, r2
 8012470:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d101      	bne.n	801247c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012478:	4b30      	ldr	r3, [pc, #192]	@ (801253c <udp_bind+0xd8>)
 801247a:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <udp_bind+0x24>
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d102      	bne.n	801248e <udp_bind+0x2a>
    return ERR_VAL;
 8012488:	f06f 0305 	mvn.w	r3, #5
 801248c:	e052      	b.n	8012534 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012492:	4b2b      	ldr	r3, [pc, #172]	@ (8012540 <udp_bind+0xdc>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	617b      	str	r3, [r7, #20]
 8012498:	e009      	b.n	80124ae <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801249a:	68fa      	ldr	r2, [r7, #12]
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d102      	bne.n	80124a8 <udp_bind+0x44>
      rebind = 1;
 80124a2:	2301      	movs	r3, #1
 80124a4:	74fb      	strb	r3, [r7, #19]
      break;
 80124a6:	e005      	b.n	80124b4 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	617b      	str	r3, [r7, #20]
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1f2      	bne.n	801249a <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80124b4:	88fb      	ldrh	r3, [r7, #6]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d109      	bne.n	80124ce <udp_bind+0x6a>
    port = udp_new_port();
 80124ba:	f7ff fd61 	bl	8011f80 <udp_new_port>
 80124be:	4603      	mov	r3, r0
 80124c0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80124c2:	88fb      	ldrh	r3, [r7, #6]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d11e      	bne.n	8012506 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80124c8:	f06f 0307 	mvn.w	r3, #7
 80124cc:	e032      	b.n	8012534 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124ce:	4b1c      	ldr	r3, [pc, #112]	@ (8012540 <udp_bind+0xdc>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	617b      	str	r3, [r7, #20]
 80124d4:	e014      	b.n	8012500 <udp_bind+0x9c>
      if (pcb != ipcb) {
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	429a      	cmp	r2, r3
 80124dc:	d00d      	beq.n	80124fa <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	8a5b      	ldrh	r3, [r3, #18]
 80124e2:	88fa      	ldrh	r2, [r7, #6]
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d108      	bne.n	80124fa <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d102      	bne.n	80124fa <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80124f4:	f06f 0307 	mvn.w	r3, #7
 80124f8:	e01c      	b.n	8012534 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	617b      	str	r3, [r7, #20]
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1e7      	bne.n	80124d6 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <udp_bind+0xae>
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	e000      	b.n	8012514 <udp_bind+0xb0>
 8012512:	2300      	movs	r3, #0
 8012514:	68fa      	ldr	r2, [r7, #12]
 8012516:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	88fa      	ldrh	r2, [r7, #6]
 801251c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801251e:	7cfb      	ldrb	r3, [r7, #19]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012524:	4b06      	ldr	r3, [pc, #24]	@ (8012540 <udp_bind+0xdc>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801252c:	4a04      	ldr	r2, [pc, #16]	@ (8012540 <udp_bind+0xdc>)
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012532:	2300      	movs	r3, #0
}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	0801acb8 	.word	0x0801acb8
 8012540:	200098d0 	.word	0x200098d0

08012544 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	4613      	mov	r3, r2
 8012550:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d002      	beq.n	801255e <udp_connect+0x1a>
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d102      	bne.n	8012564 <udp_connect+0x20>
    return ERR_VAL;
 801255e:	f06f 0305 	mvn.w	r3, #5
 8012562:	e03e      	b.n	80125e2 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	8a5b      	ldrh	r3, [r3, #18]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d10f      	bne.n	801258c <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801256c:	68f9      	ldr	r1, [r7, #12]
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	8a5b      	ldrh	r3, [r3, #18]
 8012572:	461a      	mov	r2, r3
 8012574:	68f8      	ldr	r0, [r7, #12]
 8012576:	f7ff ff75 	bl	8012464 <udp_bind>
 801257a:	4603      	mov	r3, r0
 801257c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801257e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d002      	beq.n	801258c <udp_connect+0x48>
      return err;
 8012586:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801258a:	e02a      	b.n	80125e2 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d002      	beq.n	8012598 <udp_connect+0x54>
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	e000      	b.n	801259a <udp_connect+0x56>
 8012598:	2300      	movs	r3, #0
 801259a:	68fa      	ldr	r2, [r7, #12]
 801259c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	88fa      	ldrh	r2, [r7, #6]
 80125a2:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	7c1b      	ldrb	r3, [r3, #16]
 80125a8:	f043 0304 	orr.w	r3, r3, #4
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125b2:	4b0e      	ldr	r3, [pc, #56]	@ (80125ec <udp_connect+0xa8>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	e008      	b.n	80125cc <udp_connect+0x88>
    if (pcb == ipcb) {
 80125ba:	68fa      	ldr	r2, [r7, #12]
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d101      	bne.n	80125c6 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80125c2:	2300      	movs	r3, #0
 80125c4:	e00d      	b.n	80125e2 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	68db      	ldr	r3, [r3, #12]
 80125ca:	617b      	str	r3, [r7, #20]
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d1f3      	bne.n	80125ba <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80125d2:	4b06      	ldr	r3, [pc, #24]	@ (80125ec <udp_connect+0xa8>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80125da:	4a04      	ldr	r2, [pc, #16]	@ (80125ec <udp_connect+0xa8>)
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80125e0:	2300      	movs	r3, #0
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	3718      	adds	r7, #24
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	200098d0 	.word	0x200098d0

080125f0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b083      	sub	sp, #12
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2200      	movs	r2, #0
 80125fc:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	7c1b      	ldrb	r3, [r3, #16]
 8012608:	f023 0304 	bic.w	r3, r3, #4
 801260c:	b2da      	uxtb	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	741a      	strb	r2, [r3, #16]
}
 8012612:	bf00      	nop
 8012614:	370c      	adds	r7, #12
 8012616:	46bd      	mov	sp, r7
 8012618:	bc80      	pop	{r7}
 801261a:	4770      	bx	lr

0801261c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801261c:	b480      	push	{r7}
 801261e:	b085      	sub	sp, #20
 8012620:	af00      	add	r7, sp, #0
 8012622:	60f8      	str	r0, [r7, #12]
 8012624:	60b9      	str	r1, [r7, #8]
 8012626:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	68ba      	ldr	r2, [r7, #8]
 801262c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	687a      	ldr	r2, [r7, #4]
 8012632:	61da      	str	r2, [r3, #28]
}
 8012634:	bf00      	nop
 8012636:	3714      	adds	r7, #20
 8012638:	46bd      	mov	sp, r7
 801263a:	bc80      	pop	{r7}
 801263c:	4770      	bx	lr
	...

08012640 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b084      	sub	sp, #16
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012648:	4b15      	ldr	r3, [pc, #84]	@ (80126a0 <udp_remove+0x60>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	429a      	cmp	r2, r3
 8012650:	d105      	bne.n	801265e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012652:	4b13      	ldr	r3, [pc, #76]	@ (80126a0 <udp_remove+0x60>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	4a11      	ldr	r2, [pc, #68]	@ (80126a0 <udp_remove+0x60>)
 801265a:	6013      	str	r3, [r2, #0]
 801265c:	e017      	b.n	801268e <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801265e:	4b10      	ldr	r3, [pc, #64]	@ (80126a0 <udp_remove+0x60>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	60fb      	str	r3, [r7, #12]
 8012664:	e010      	b.n	8012688 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d009      	beq.n	8012682 <udp_remove+0x42>
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	687a      	ldr	r2, [r7, #4]
 8012674:	429a      	cmp	r2, r3
 8012676:	d104      	bne.n	8012682 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	68da      	ldr	r2, [r3, #12]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	60da      	str	r2, [r3, #12]
        break;
 8012680:	e005      	b.n	801268e <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	68db      	ldr	r3, [r3, #12]
 8012686:	60fb      	str	r3, [r7, #12]
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d1eb      	bne.n	8012666 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801268e:	6879      	ldr	r1, [r7, #4]
 8012690:	2000      	movs	r0, #0
 8012692:	f7f9 f8f7 	bl	800b884 <memp_free>
}
 8012696:	bf00      	nop
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	200098d0 	.word	0x200098d0

080126a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80126aa:	2000      	movs	r0, #0
 80126ac:	f7f9 f898 	bl	800b7e0 <memp_malloc>
 80126b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d007      	beq.n	80126c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80126b8:	2220      	movs	r2, #32
 80126ba:	2100      	movs	r1, #0
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f004 fec1 	bl	8017444 <memset>
    pcb->ttl = UDP_TTL;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	22ff      	movs	r2, #255	@ 0xff
 80126c6:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80126c8:	687b      	ldr	r3, [r7, #4]
}
 80126ca:	4618      	mov	r0, r3
 80126cc:	3708      	adds	r7, #8
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}

080126d2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80126d2:	b580      	push	{r7, lr}
 80126d4:	b084      	sub	sp, #16
 80126d6:	af00      	add	r7, sp, #0
 80126d8:	4603      	mov	r3, r0
 80126da:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80126dc:	f7ff ffe2 	bl	80126a4 <udp_new>
 80126e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80126e2:	68fb      	ldr	r3, [r7, #12]
}
 80126e4:	4618      	mov	r0, r3
 80126e6:	3710      	adds	r7, #16
 80126e8:	46bd      	mov	sp, r7
 80126ea:	bd80      	pop	{r7, pc}

080126ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80126ec:	b480      	push	{r7}
 80126ee:	b085      	sub	sp, #20
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
 80126f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d01e      	beq.n	801273a <udp_netif_ip_addr_changed+0x4e>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2b00      	cmp	r3, #0
 8012702:	d01a      	beq.n	801273a <udp_netif_ip_addr_changed+0x4e>
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d017      	beq.n	801273a <udp_netif_ip_addr_changed+0x4e>
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d013      	beq.n	801273a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012712:	4b0c      	ldr	r3, [pc, #48]	@ (8012744 <udp_netif_ip_addr_changed+0x58>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
 8012718:	e00c      	b.n	8012734 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	429a      	cmp	r2, r3
 8012724:	d103      	bne.n	801272e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	60fb      	str	r3, [r7, #12]
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d1ef      	bne.n	801271a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801273a:	bf00      	nop
 801273c:	3714      	adds	r7, #20
 801273e:	46bd      	mov	sp, r7
 8012740:	bc80      	pop	{r7}
 8012742:	4770      	bx	lr
 8012744:	200098d0 	.word	0x200098d0

08012748 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012750:	4915      	ldr	r1, [pc, #84]	@ (80127a8 <etharp_free_entry+0x60>)
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	4613      	mov	r3, r2
 8012756:	005b      	lsls	r3, r3, #1
 8012758:	4413      	add	r3, r2
 801275a:	00db      	lsls	r3, r3, #3
 801275c:	440b      	add	r3, r1
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d013      	beq.n	801278c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012764:	4910      	ldr	r1, [pc, #64]	@ (80127a8 <etharp_free_entry+0x60>)
 8012766:	687a      	ldr	r2, [r7, #4]
 8012768:	4613      	mov	r3, r2
 801276a:	005b      	lsls	r3, r3, #1
 801276c:	4413      	add	r3, r2
 801276e:	00db      	lsls	r3, r3, #3
 8012770:	440b      	add	r3, r1
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4618      	mov	r0, r3
 8012776:	f7f9 fe1d 	bl	800c3b4 <pbuf_free>
    arp_table[i].q = NULL;
 801277a:	490b      	ldr	r1, [pc, #44]	@ (80127a8 <etharp_free_entry+0x60>)
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	4613      	mov	r3, r2
 8012780:	005b      	lsls	r3, r3, #1
 8012782:	4413      	add	r3, r2
 8012784:	00db      	lsls	r3, r3, #3
 8012786:	440b      	add	r3, r1
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801278c:	4906      	ldr	r1, [pc, #24]	@ (80127a8 <etharp_free_entry+0x60>)
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	4613      	mov	r3, r2
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	440b      	add	r3, r1
 801279a:	3314      	adds	r3, #20
 801279c:	2200      	movs	r2, #0
 801279e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127a0:	bf00      	nop
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	200098d4 	.word	0x200098d4

080127ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127b2:	2300      	movs	r3, #0
 80127b4:	71fb      	strb	r3, [r7, #7]
 80127b6:	e096      	b.n	80128e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80127b8:	79fa      	ldrb	r2, [r7, #7]
 80127ba:	494f      	ldr	r1, [pc, #316]	@ (80128f8 <etharp_tmr+0x14c>)
 80127bc:	4613      	mov	r3, r2
 80127be:	005b      	lsls	r3, r3, #1
 80127c0:	4413      	add	r3, r2
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	440b      	add	r3, r1
 80127c6:	3314      	adds	r3, #20
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80127cc:	79bb      	ldrb	r3, [r7, #6]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f000 8086 	beq.w	80128e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80127d4:	79fa      	ldrb	r2, [r7, #7]
 80127d6:	4948      	ldr	r1, [pc, #288]	@ (80128f8 <etharp_tmr+0x14c>)
 80127d8:	4613      	mov	r3, r2
 80127da:	005b      	lsls	r3, r3, #1
 80127dc:	4413      	add	r3, r2
 80127de:	00db      	lsls	r3, r3, #3
 80127e0:	440b      	add	r3, r1
 80127e2:	3312      	adds	r3, #18
 80127e4:	881b      	ldrh	r3, [r3, #0]
 80127e6:	3301      	adds	r3, #1
 80127e8:	b298      	uxth	r0, r3
 80127ea:	4943      	ldr	r1, [pc, #268]	@ (80128f8 <etharp_tmr+0x14c>)
 80127ec:	4613      	mov	r3, r2
 80127ee:	005b      	lsls	r3, r3, #1
 80127f0:	4413      	add	r3, r2
 80127f2:	00db      	lsls	r3, r3, #3
 80127f4:	440b      	add	r3, r1
 80127f6:	3312      	adds	r3, #18
 80127f8:	4602      	mov	r2, r0
 80127fa:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80127fc:	79fa      	ldrb	r2, [r7, #7]
 80127fe:	493e      	ldr	r1, [pc, #248]	@ (80128f8 <etharp_tmr+0x14c>)
 8012800:	4613      	mov	r3, r2
 8012802:	005b      	lsls	r3, r3, #1
 8012804:	4413      	add	r3, r2
 8012806:	00db      	lsls	r3, r3, #3
 8012808:	440b      	add	r3, r1
 801280a:	3312      	adds	r3, #18
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012812:	d215      	bcs.n	8012840 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012814:	79fa      	ldrb	r2, [r7, #7]
 8012816:	4938      	ldr	r1, [pc, #224]	@ (80128f8 <etharp_tmr+0x14c>)
 8012818:	4613      	mov	r3, r2
 801281a:	005b      	lsls	r3, r3, #1
 801281c:	4413      	add	r3, r2
 801281e:	00db      	lsls	r3, r3, #3
 8012820:	440b      	add	r3, r1
 8012822:	3314      	adds	r3, #20
 8012824:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012826:	2b01      	cmp	r3, #1
 8012828:	d10f      	bne.n	801284a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801282a:	79fa      	ldrb	r2, [r7, #7]
 801282c:	4932      	ldr	r1, [pc, #200]	@ (80128f8 <etharp_tmr+0x14c>)
 801282e:	4613      	mov	r3, r2
 8012830:	005b      	lsls	r3, r3, #1
 8012832:	4413      	add	r3, r2
 8012834:	00db      	lsls	r3, r3, #3
 8012836:	440b      	add	r3, r1
 8012838:	3312      	adds	r3, #18
 801283a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801283c:	2b04      	cmp	r3, #4
 801283e:	d904      	bls.n	801284a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012840:	79fb      	ldrb	r3, [r7, #7]
 8012842:	4618      	mov	r0, r3
 8012844:	f7ff ff80 	bl	8012748 <etharp_free_entry>
 8012848:	e04a      	b.n	80128e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801284a:	79fa      	ldrb	r2, [r7, #7]
 801284c:	492a      	ldr	r1, [pc, #168]	@ (80128f8 <etharp_tmr+0x14c>)
 801284e:	4613      	mov	r3, r2
 8012850:	005b      	lsls	r3, r3, #1
 8012852:	4413      	add	r3, r2
 8012854:	00db      	lsls	r3, r3, #3
 8012856:	440b      	add	r3, r1
 8012858:	3314      	adds	r3, #20
 801285a:	781b      	ldrb	r3, [r3, #0]
 801285c:	2b03      	cmp	r3, #3
 801285e:	d10a      	bne.n	8012876 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012860:	79fa      	ldrb	r2, [r7, #7]
 8012862:	4925      	ldr	r1, [pc, #148]	@ (80128f8 <etharp_tmr+0x14c>)
 8012864:	4613      	mov	r3, r2
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	4413      	add	r3, r2
 801286a:	00db      	lsls	r3, r3, #3
 801286c:	440b      	add	r3, r1
 801286e:	3314      	adds	r3, #20
 8012870:	2204      	movs	r2, #4
 8012872:	701a      	strb	r2, [r3, #0]
 8012874:	e034      	b.n	80128e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012876:	79fa      	ldrb	r2, [r7, #7]
 8012878:	491f      	ldr	r1, [pc, #124]	@ (80128f8 <etharp_tmr+0x14c>)
 801287a:	4613      	mov	r3, r2
 801287c:	005b      	lsls	r3, r3, #1
 801287e:	4413      	add	r3, r2
 8012880:	00db      	lsls	r3, r3, #3
 8012882:	440b      	add	r3, r1
 8012884:	3314      	adds	r3, #20
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	2b04      	cmp	r3, #4
 801288a:	d10a      	bne.n	80128a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801288c:	79fa      	ldrb	r2, [r7, #7]
 801288e:	491a      	ldr	r1, [pc, #104]	@ (80128f8 <etharp_tmr+0x14c>)
 8012890:	4613      	mov	r3, r2
 8012892:	005b      	lsls	r3, r3, #1
 8012894:	4413      	add	r3, r2
 8012896:	00db      	lsls	r3, r3, #3
 8012898:	440b      	add	r3, r1
 801289a:	3314      	adds	r3, #20
 801289c:	2202      	movs	r2, #2
 801289e:	701a      	strb	r2, [r3, #0]
 80128a0:	e01e      	b.n	80128e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128a2:	79fa      	ldrb	r2, [r7, #7]
 80128a4:	4914      	ldr	r1, [pc, #80]	@ (80128f8 <etharp_tmr+0x14c>)
 80128a6:	4613      	mov	r3, r2
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	00db      	lsls	r3, r3, #3
 80128ae:	440b      	add	r3, r1
 80128b0:	3314      	adds	r3, #20
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d113      	bne.n	80128e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80128b8:	79fa      	ldrb	r2, [r7, #7]
 80128ba:	490f      	ldr	r1, [pc, #60]	@ (80128f8 <etharp_tmr+0x14c>)
 80128bc:	4613      	mov	r3, r2
 80128be:	005b      	lsls	r3, r3, #1
 80128c0:	4413      	add	r3, r2
 80128c2:	00db      	lsls	r3, r3, #3
 80128c4:	440b      	add	r3, r1
 80128c6:	3308      	adds	r3, #8
 80128c8:	6818      	ldr	r0, [r3, #0]
 80128ca:	79fa      	ldrb	r2, [r7, #7]
 80128cc:	4613      	mov	r3, r2
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	4413      	add	r3, r2
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	4a08      	ldr	r2, [pc, #32]	@ (80128f8 <etharp_tmr+0x14c>)
 80128d6:	4413      	add	r3, r2
 80128d8:	3304      	adds	r3, #4
 80128da:	4619      	mov	r1, r3
 80128dc:	f000 fe06 	bl	80134ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128e0:	79fb      	ldrb	r3, [r7, #7]
 80128e2:	3301      	adds	r3, #1
 80128e4:	71fb      	strb	r3, [r7, #7]
 80128e6:	79fb      	ldrb	r3, [r7, #7]
 80128e8:	2b09      	cmp	r3, #9
 80128ea:	f67f af65 	bls.w	80127b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80128ee:	bf00      	nop
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	200098d4 	.word	0x200098d4

080128fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b088      	sub	sp, #32
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	460b      	mov	r3, r1
 8012906:	607a      	str	r2, [r7, #4]
 8012908:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801290a:	230a      	movs	r3, #10
 801290c:	77fb      	strb	r3, [r7, #31]
 801290e:	230a      	movs	r3, #10
 8012910:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8012912:	230a      	movs	r3, #10
 8012914:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8012916:	2300      	movs	r3, #0
 8012918:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801291a:	230a      	movs	r3, #10
 801291c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801291e:	2300      	movs	r3, #0
 8012920:	833b      	strh	r3, [r7, #24]
 8012922:	2300      	movs	r3, #0
 8012924:	82fb      	strh	r3, [r7, #22]
 8012926:	2300      	movs	r3, #0
 8012928:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801292a:	2300      	movs	r3, #0
 801292c:	773b      	strb	r3, [r7, #28]
 801292e:	e093      	b.n	8012a58 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8012930:	7f3a      	ldrb	r2, [r7, #28]
 8012932:	4990      	ldr	r1, [pc, #576]	@ (8012b74 <etharp_find_entry+0x278>)
 8012934:	4613      	mov	r3, r2
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	4413      	add	r3, r2
 801293a:	00db      	lsls	r3, r3, #3
 801293c:	440b      	add	r3, r1
 801293e:	3314      	adds	r3, #20
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012944:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012948:	2b0a      	cmp	r3, #10
 801294a:	d105      	bne.n	8012958 <etharp_find_entry+0x5c>
 801294c:	7cfb      	ldrb	r3, [r7, #19]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8012952:	7f3b      	ldrb	r3, [r7, #28]
 8012954:	777b      	strb	r3, [r7, #29]
 8012956:	e07c      	b.n	8012a52 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012958:	7cfb      	ldrb	r3, [r7, #19]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d079      	beq.n	8012a52 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801295e:	7cfb      	ldrb	r3, [r7, #19]
 8012960:	2b01      	cmp	r3, #1
 8012962:	d009      	beq.n	8012978 <etharp_find_entry+0x7c>
 8012964:	7cfb      	ldrb	r3, [r7, #19]
 8012966:	2b01      	cmp	r3, #1
 8012968:	d806      	bhi.n	8012978 <etharp_find_entry+0x7c>
 801296a:	4b83      	ldr	r3, [pc, #524]	@ (8012b78 <etharp_find_entry+0x27c>)
 801296c:	f240 1225 	movw	r2, #293	@ 0x125
 8012970:	4982      	ldr	r1, [pc, #520]	@ (8012b7c <etharp_find_entry+0x280>)
 8012972:	4883      	ldr	r0, [pc, #524]	@ (8012b80 <etharp_find_entry+0x284>)
 8012974:	f004 fc0e 	bl	8017194 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00f      	beq.n	801299e <etharp_find_entry+0xa2>
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	6819      	ldr	r1, [r3, #0]
 8012982:	7f3a      	ldrb	r2, [r7, #28]
 8012984:	487b      	ldr	r0, [pc, #492]	@ (8012b74 <etharp_find_entry+0x278>)
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	4403      	add	r3, r0
 8012990:	3304      	adds	r3, #4
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4299      	cmp	r1, r3
 8012996:	d102      	bne.n	801299e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012998:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801299c:	e0e5      	b.n	8012b6a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801299e:	7cfb      	ldrb	r3, [r7, #19]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d13b      	bne.n	8012a1c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80129a4:	7f3a      	ldrb	r2, [r7, #28]
 80129a6:	4973      	ldr	r1, [pc, #460]	@ (8012b74 <etharp_find_entry+0x278>)
 80129a8:	4613      	mov	r3, r2
 80129aa:	005b      	lsls	r3, r3, #1
 80129ac:	4413      	add	r3, r2
 80129ae:	00db      	lsls	r3, r3, #3
 80129b0:	440b      	add	r3, r1
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d018      	beq.n	80129ea <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80129b8:	7f3a      	ldrb	r2, [r7, #28]
 80129ba:	496e      	ldr	r1, [pc, #440]	@ (8012b74 <etharp_find_entry+0x278>)
 80129bc:	4613      	mov	r3, r2
 80129be:	005b      	lsls	r3, r3, #1
 80129c0:	4413      	add	r3, r2
 80129c2:	00db      	lsls	r3, r3, #3
 80129c4:	440b      	add	r3, r1
 80129c6:	3312      	adds	r3, #18
 80129c8:	881b      	ldrh	r3, [r3, #0]
 80129ca:	8b3a      	ldrh	r2, [r7, #24]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d840      	bhi.n	8012a52 <etharp_find_entry+0x156>
            old_queue = i;
 80129d0:	7f3b      	ldrb	r3, [r7, #28]
 80129d2:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80129d4:	7f3a      	ldrb	r2, [r7, #28]
 80129d6:	4967      	ldr	r1, [pc, #412]	@ (8012b74 <etharp_find_entry+0x278>)
 80129d8:	4613      	mov	r3, r2
 80129da:	005b      	lsls	r3, r3, #1
 80129dc:	4413      	add	r3, r2
 80129de:	00db      	lsls	r3, r3, #3
 80129e0:	440b      	add	r3, r1
 80129e2:	3312      	adds	r3, #18
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	833b      	strh	r3, [r7, #24]
 80129e8:	e033      	b.n	8012a52 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80129ea:	7f3a      	ldrb	r2, [r7, #28]
 80129ec:	4961      	ldr	r1, [pc, #388]	@ (8012b74 <etharp_find_entry+0x278>)
 80129ee:	4613      	mov	r3, r2
 80129f0:	005b      	lsls	r3, r3, #1
 80129f2:	4413      	add	r3, r2
 80129f4:	00db      	lsls	r3, r3, #3
 80129f6:	440b      	add	r3, r1
 80129f8:	3312      	adds	r3, #18
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	8afa      	ldrh	r2, [r7, #22]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d827      	bhi.n	8012a52 <etharp_find_entry+0x156>
            old_pending = i;
 8012a02:	7f3b      	ldrb	r3, [r7, #28]
 8012a04:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8012a06:	7f3a      	ldrb	r2, [r7, #28]
 8012a08:	495a      	ldr	r1, [pc, #360]	@ (8012b74 <etharp_find_entry+0x278>)
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	00db      	lsls	r3, r3, #3
 8012a12:	440b      	add	r3, r1
 8012a14:	3312      	adds	r3, #18
 8012a16:	881b      	ldrh	r3, [r3, #0]
 8012a18:	82fb      	strh	r3, [r7, #22]
 8012a1a:	e01a      	b.n	8012a52 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a1c:	7cfb      	ldrb	r3, [r7, #19]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d917      	bls.n	8012a52 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a22:	7f3a      	ldrb	r2, [r7, #28]
 8012a24:	4953      	ldr	r1, [pc, #332]	@ (8012b74 <etharp_find_entry+0x278>)
 8012a26:	4613      	mov	r3, r2
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	4413      	add	r3, r2
 8012a2c:	00db      	lsls	r3, r3, #3
 8012a2e:	440b      	add	r3, r1
 8012a30:	3312      	adds	r3, #18
 8012a32:	881b      	ldrh	r3, [r3, #0]
 8012a34:	8aba      	ldrh	r2, [r7, #20]
 8012a36:	429a      	cmp	r2, r3
 8012a38:	d80b      	bhi.n	8012a52 <etharp_find_entry+0x156>
            old_stable = i;
 8012a3a:	7f3b      	ldrb	r3, [r7, #28]
 8012a3c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8012a3e:	7f3a      	ldrb	r2, [r7, #28]
 8012a40:	494c      	ldr	r1, [pc, #304]	@ (8012b74 <etharp_find_entry+0x278>)
 8012a42:	4613      	mov	r3, r2
 8012a44:	005b      	lsls	r3, r3, #1
 8012a46:	4413      	add	r3, r2
 8012a48:	00db      	lsls	r3, r3, #3
 8012a4a:	440b      	add	r3, r1
 8012a4c:	3312      	adds	r3, #18
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a52:	7f3b      	ldrb	r3, [r7, #28]
 8012a54:	3301      	adds	r3, #1
 8012a56:	773b      	strb	r3, [r7, #28]
 8012a58:	7f3b      	ldrb	r3, [r7, #28]
 8012a5a:	2b09      	cmp	r3, #9
 8012a5c:	f67f af68 	bls.w	8012930 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012a60:	7afb      	ldrb	r3, [r7, #11]
 8012a62:	f003 0302 	and.w	r3, r3, #2
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d108      	bne.n	8012a7c <etharp_find_entry+0x180>
 8012a6a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012a6e:	2b0a      	cmp	r3, #10
 8012a70:	d107      	bne.n	8012a82 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012a72:	7afb      	ldrb	r3, [r7, #11]
 8012a74:	f003 0301 	and.w	r3, r3, #1
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d102      	bne.n	8012a82 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a80:	e073      	b.n	8012b6a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012a82:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012a86:	2b09      	cmp	r3, #9
 8012a88:	dc02      	bgt.n	8012a90 <etharp_find_entry+0x194>
    i = empty;
 8012a8a:	7f7b      	ldrb	r3, [r7, #29]
 8012a8c:	773b      	strb	r3, [r7, #28]
 8012a8e:	e036      	b.n	8012afe <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012a90:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012a94:	2b09      	cmp	r3, #9
 8012a96:	dc13      	bgt.n	8012ac0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8012a98:	7fbb      	ldrb	r3, [r7, #30]
 8012a9a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012a9c:	7f3a      	ldrb	r2, [r7, #28]
 8012a9e:	4935      	ldr	r1, [pc, #212]	@ (8012b74 <etharp_find_entry+0x278>)
 8012aa0:	4613      	mov	r3, r2
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	4413      	add	r3, r2
 8012aa6:	00db      	lsls	r3, r3, #3
 8012aa8:	440b      	add	r3, r1
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d018      	beq.n	8012ae2 <etharp_find_entry+0x1e6>
 8012ab0:	4b31      	ldr	r3, [pc, #196]	@ (8012b78 <etharp_find_entry+0x27c>)
 8012ab2:	f240 126f 	movw	r2, #367	@ 0x16f
 8012ab6:	4933      	ldr	r1, [pc, #204]	@ (8012b84 <etharp_find_entry+0x288>)
 8012ab8:	4831      	ldr	r0, [pc, #196]	@ (8012b80 <etharp_find_entry+0x284>)
 8012aba:	f004 fb6b 	bl	8017194 <iprintf>
 8012abe:	e010      	b.n	8012ae2 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012ac0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ac4:	2b09      	cmp	r3, #9
 8012ac6:	dc02      	bgt.n	8012ace <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8012ac8:	7ffb      	ldrb	r3, [r7, #31]
 8012aca:	773b      	strb	r3, [r7, #28]
 8012acc:	e009      	b.n	8012ae2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012ace:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012ad2:	2b09      	cmp	r3, #9
 8012ad4:	dc02      	bgt.n	8012adc <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012ad6:	7efb      	ldrb	r3, [r7, #27]
 8012ad8:	773b      	strb	r3, [r7, #28]
 8012ada:	e002      	b.n	8012ae2 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8012adc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae0:	e043      	b.n	8012b6a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012ae2:	7f3b      	ldrb	r3, [r7, #28]
 8012ae4:	2b09      	cmp	r3, #9
 8012ae6:	d906      	bls.n	8012af6 <etharp_find_entry+0x1fa>
 8012ae8:	4b23      	ldr	r3, [pc, #140]	@ (8012b78 <etharp_find_entry+0x27c>)
 8012aea:	f240 1281 	movw	r2, #385	@ 0x181
 8012aee:	4926      	ldr	r1, [pc, #152]	@ (8012b88 <etharp_find_entry+0x28c>)
 8012af0:	4823      	ldr	r0, [pc, #140]	@ (8012b80 <etharp_find_entry+0x284>)
 8012af2:	f004 fb4f 	bl	8017194 <iprintf>
    etharp_free_entry(i);
 8012af6:	7f3b      	ldrb	r3, [r7, #28]
 8012af8:	4618      	mov	r0, r3
 8012afa:	f7ff fe25 	bl	8012748 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012afe:	7f3b      	ldrb	r3, [r7, #28]
 8012b00:	2b09      	cmp	r3, #9
 8012b02:	d906      	bls.n	8012b12 <etharp_find_entry+0x216>
 8012b04:	4b1c      	ldr	r3, [pc, #112]	@ (8012b78 <etharp_find_entry+0x27c>)
 8012b06:	f240 1285 	movw	r2, #389	@ 0x185
 8012b0a:	491f      	ldr	r1, [pc, #124]	@ (8012b88 <etharp_find_entry+0x28c>)
 8012b0c:	481c      	ldr	r0, [pc, #112]	@ (8012b80 <etharp_find_entry+0x284>)
 8012b0e:	f004 fb41 	bl	8017194 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b12:	7f3a      	ldrb	r2, [r7, #28]
 8012b14:	4917      	ldr	r1, [pc, #92]	@ (8012b74 <etharp_find_entry+0x278>)
 8012b16:	4613      	mov	r3, r2
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	4413      	add	r3, r2
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	440b      	add	r3, r1
 8012b20:	3314      	adds	r3, #20
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d006      	beq.n	8012b36 <etharp_find_entry+0x23a>
 8012b28:	4b13      	ldr	r3, [pc, #76]	@ (8012b78 <etharp_find_entry+0x27c>)
 8012b2a:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8012b2e:	4917      	ldr	r1, [pc, #92]	@ (8012b8c <etharp_find_entry+0x290>)
 8012b30:	4813      	ldr	r0, [pc, #76]	@ (8012b80 <etharp_find_entry+0x284>)
 8012b32:	f004 fb2f 	bl	8017194 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00a      	beq.n	8012b52 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012b3c:	7f3a      	ldrb	r2, [r7, #28]
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	6819      	ldr	r1, [r3, #0]
 8012b42:	480c      	ldr	r0, [pc, #48]	@ (8012b74 <etharp_find_entry+0x278>)
 8012b44:	4613      	mov	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	4413      	add	r3, r2
 8012b4a:	00db      	lsls	r3, r3, #3
 8012b4c:	4403      	add	r3, r0
 8012b4e:	3304      	adds	r3, #4
 8012b50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012b52:	7f3a      	ldrb	r2, [r7, #28]
 8012b54:	4907      	ldr	r1, [pc, #28]	@ (8012b74 <etharp_find_entry+0x278>)
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	440b      	add	r3, r1
 8012b60:	3312      	adds	r3, #18
 8012b62:	2200      	movs	r2, #0
 8012b64:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8012b66:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3720      	adds	r7, #32
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	200098d4 	.word	0x200098d4
 8012b78:	0801a3d8 	.word	0x0801a3d8
 8012b7c:	0801a410 	.word	0x0801a410
 8012b80:	0801a450 	.word	0x0801a450
 8012b84:	0801a478 	.word	0x0801a478
 8012b88:	0801a490 	.word	0x0801a490
 8012b8c:	0801a4a4 	.word	0x0801a4a4

08012b90 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b088      	sub	sp, #32
 8012b94:	af02      	add	r7, sp, #8
 8012b96:	60f8      	str	r0, [r7, #12]
 8012b98:	60b9      	str	r1, [r7, #8]
 8012b9a:	607a      	str	r2, [r7, #4]
 8012b9c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ba4:	2b06      	cmp	r3, #6
 8012ba6:	d006      	beq.n	8012bb6 <etharp_update_arp_entry+0x26>
 8012ba8:	4b48      	ldr	r3, [pc, #288]	@ (8012ccc <etharp_update_arp_entry+0x13c>)
 8012baa:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8012bae:	4948      	ldr	r1, [pc, #288]	@ (8012cd0 <etharp_update_arp_entry+0x140>)
 8012bb0:	4848      	ldr	r0, [pc, #288]	@ (8012cd4 <etharp_update_arp_entry+0x144>)
 8012bb2:	f004 faef 	bl	8017194 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d012      	beq.n	8012be2 <etharp_update_arp_entry+0x52>
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00e      	beq.n	8012be2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	68f9      	ldr	r1, [r7, #12]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f001 f8a8 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8012bd0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d105      	bne.n	8012be2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012bde:	2be0      	cmp	r3, #224	@ 0xe0
 8012be0:	d102      	bne.n	8012be8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012be2:	f06f 030f 	mvn.w	r3, #15
 8012be6:	e06c      	b.n	8012cc2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012be8:	78fb      	ldrb	r3, [r7, #3]
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	4619      	mov	r1, r3
 8012bee:	68b8      	ldr	r0, [r7, #8]
 8012bf0:	f7ff fe84 	bl	80128fc <etharp_find_entry>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012bf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	da02      	bge.n	8012c06 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c04:	e05d      	b.n	8012cc2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c06:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c0a:	4933      	ldr	r1, [pc, #204]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c0c:	4613      	mov	r3, r2
 8012c0e:	005b      	lsls	r3, r3, #1
 8012c10:	4413      	add	r3, r2
 8012c12:	00db      	lsls	r3, r3, #3
 8012c14:	440b      	add	r3, r1
 8012c16:	3314      	adds	r3, #20
 8012c18:	2202      	movs	r2, #2
 8012c1a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012c1c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c20:	492d      	ldr	r1, [pc, #180]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c22:	4613      	mov	r3, r2
 8012c24:	005b      	lsls	r3, r3, #1
 8012c26:	4413      	add	r3, r2
 8012c28:	00db      	lsls	r3, r3, #3
 8012c2a:	440b      	add	r3, r1
 8012c2c:	3308      	adds	r3, #8
 8012c2e:	68fa      	ldr	r2, [r7, #12]
 8012c30:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8012c32:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c36:	4613      	mov	r3, r2
 8012c38:	005b      	lsls	r3, r3, #1
 8012c3a:	4413      	add	r3, r2
 8012c3c:	00db      	lsls	r3, r3, #3
 8012c3e:	3308      	adds	r3, #8
 8012c40:	4a25      	ldr	r2, [pc, #148]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c42:	4413      	add	r3, r2
 8012c44:	3304      	adds	r3, #4
 8012c46:	2206      	movs	r2, #6
 8012c48:	6879      	ldr	r1, [r7, #4]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f004 fce7 	bl	801761e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012c50:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c54:	4920      	ldr	r1, [pc, #128]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c56:	4613      	mov	r3, r2
 8012c58:	005b      	lsls	r3, r3, #1
 8012c5a:	4413      	add	r3, r2
 8012c5c:	00db      	lsls	r3, r3, #3
 8012c5e:	440b      	add	r3, r1
 8012c60:	3312      	adds	r3, #18
 8012c62:	2200      	movs	r2, #0
 8012c64:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012c66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c6a:	491b      	ldr	r1, [pc, #108]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	005b      	lsls	r3, r3, #1
 8012c70:	4413      	add	r3, r2
 8012c72:	00db      	lsls	r3, r3, #3
 8012c74:	440b      	add	r3, r1
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d021      	beq.n	8012cc0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012c7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c80:	4915      	ldr	r1, [pc, #84]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c82:	4613      	mov	r3, r2
 8012c84:	005b      	lsls	r3, r3, #1
 8012c86:	4413      	add	r3, r2
 8012c88:	00db      	lsls	r3, r3, #3
 8012c8a:	440b      	add	r3, r1
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012c90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012c94:	4910      	ldr	r1, [pc, #64]	@ (8012cd8 <etharp_update_arp_entry+0x148>)
 8012c96:	4613      	mov	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	00db      	lsls	r3, r3, #3
 8012c9e:	440b      	add	r3, r1
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8012caa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6939      	ldr	r1, [r7, #16]
 8012cb4:	68f8      	ldr	r0, [r7, #12]
 8012cb6:	f002 f82b 	bl	8014d10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012cba:	6938      	ldr	r0, [r7, #16]
 8012cbc:	f7f9 fb7a 	bl	800c3b4 <pbuf_free>
  }
  return ERR_OK;
 8012cc0:	2300      	movs	r3, #0
}
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	3718      	adds	r7, #24
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	0801a3d8 	.word	0x0801a3d8
 8012cd0:	0801a4d0 	.word	0x0801a4d0
 8012cd4:	0801a450 	.word	0x0801a450
 8012cd8:	200098d4 	.word	0x200098d4

08012cdc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012cdc:	b5b0      	push	{r4, r5, r7, lr}
 8012cde:	b08a      	sub	sp, #40	@ 0x28
 8012ce0:	af04      	add	r7, sp, #16
 8012ce2:	6078      	str	r0, [r7, #4]
 8012ce4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d107      	bne.n	8012cfc <etharp_input+0x20>
 8012cec:	4b3d      	ldr	r3, [pc, #244]	@ (8012de4 <etharp_input+0x108>)
 8012cee:	f44f 7222 	mov.w	r2, #648	@ 0x288
 8012cf2:	493d      	ldr	r1, [pc, #244]	@ (8012de8 <etharp_input+0x10c>)
 8012cf4:	483d      	ldr	r0, [pc, #244]	@ (8012dec <etharp_input+0x110>)
 8012cf6:	f004 fa4d 	bl	8017194 <iprintf>
 8012cfa:	e06f      	b.n	8012ddc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	881b      	ldrh	r3, [r3, #0]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d0c:	d10c      	bne.n	8012d28 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012d12:	2b06      	cmp	r3, #6
 8012d14:	d108      	bne.n	8012d28 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012d1a:	2b04      	cmp	r3, #4
 8012d1c:	d104      	bne.n	8012d28 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	885b      	ldrh	r3, [r3, #2]
 8012d22:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012d24:	2b08      	cmp	r3, #8
 8012d26:	d003      	beq.n	8012d30 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7f9 fb43 	bl	800c3b4 <pbuf_free>
    return;
 8012d2e:	e055      	b.n	8012ddc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8012d30:	693b      	ldr	r3, [r7, #16]
 8012d32:	330e      	adds	r3, #14
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	3318      	adds	r3, #24
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	3304      	adds	r3, #4
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d102      	bne.n	8012d50 <etharp_input+0x74>
    for_us = 0;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	75fb      	strb	r3, [r7, #23]
 8012d4e:	e009      	b.n	8012d64 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012d50:	68ba      	ldr	r2, [r7, #8]
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	3304      	adds	r3, #4
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	429a      	cmp	r2, r3
 8012d5a:	bf0c      	ite	eq
 8012d5c:	2301      	moveq	r3, #1
 8012d5e:	2300      	movne	r3, #0
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	f103 0208 	add.w	r2, r3, #8
 8012d6a:	7dfb      	ldrb	r3, [r7, #23]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d001      	beq.n	8012d74 <etharp_input+0x98>
 8012d70:	2301      	movs	r3, #1
 8012d72:	e000      	b.n	8012d76 <etharp_input+0x9a>
 8012d74:	2302      	movs	r3, #2
 8012d76:	f107 010c 	add.w	r1, r7, #12
 8012d7a:	6838      	ldr	r0, [r7, #0]
 8012d7c:	f7ff ff08 	bl	8012b90 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	88db      	ldrh	r3, [r3, #6]
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d8a:	d003      	beq.n	8012d94 <etharp_input+0xb8>
 8012d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d90:	d01e      	beq.n	8012dd0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8012d92:	e020      	b.n	8012dd6 <etharp_input+0xfa>
    if (for_us) {
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d01c      	beq.n	8012dd4 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 8012da0:	693b      	ldr	r3, [r7, #16]
 8012da2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8012db0:	693a      	ldr	r2, [r7, #16]
 8012db2:	3208      	adds	r2, #8
      etharp_raw(netif,
 8012db4:	2102      	movs	r1, #2
 8012db6:	9103      	str	r1, [sp, #12]
 8012db8:	f107 010c 	add.w	r1, r7, #12
 8012dbc:	9102      	str	r1, [sp, #8]
 8012dbe:	9201      	str	r2, [sp, #4]
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	462b      	mov	r3, r5
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	4601      	mov	r1, r0
 8012dc8:	6838      	ldr	r0, [r7, #0]
 8012dca:	f000 fae1 	bl	8013390 <etharp_raw>
    break;
 8012dce:	e001      	b.n	8012dd4 <etharp_input+0xf8>
    break;
 8012dd0:	bf00      	nop
 8012dd2:	e000      	b.n	8012dd6 <etharp_input+0xfa>
    break;
 8012dd4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f7f9 faec 	bl	800c3b4 <pbuf_free>
}
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bdb0      	pop	{r4, r5, r7, pc}
 8012de2:	bf00      	nop
 8012de4:	0801a3d8 	.word	0x0801a3d8
 8012de8:	0801a528 	.word	0x0801a528
 8012dec:	0801a450 	.word	0x0801a450

08012df0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af02      	add	r7, sp, #8
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	4613      	mov	r3, r2
 8012dfc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012dfe:	79fa      	ldrb	r2, [r7, #7]
 8012e00:	4944      	ldr	r1, [pc, #272]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e02:	4613      	mov	r3, r2
 8012e04:	005b      	lsls	r3, r3, #1
 8012e06:	4413      	add	r3, r2
 8012e08:	00db      	lsls	r3, r3, #3
 8012e0a:	440b      	add	r3, r1
 8012e0c:	3314      	adds	r3, #20
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d806      	bhi.n	8012e22 <etharp_output_to_arp_index+0x32>
 8012e14:	4b40      	ldr	r3, [pc, #256]	@ (8012f18 <etharp_output_to_arp_index+0x128>)
 8012e16:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 8012e1a:	4940      	ldr	r1, [pc, #256]	@ (8012f1c <etharp_output_to_arp_index+0x12c>)
 8012e1c:	4840      	ldr	r0, [pc, #256]	@ (8012f20 <etharp_output_to_arp_index+0x130>)
 8012e1e:	f004 f9b9 	bl	8017194 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012e22:	79fa      	ldrb	r2, [r7, #7]
 8012e24:	493b      	ldr	r1, [pc, #236]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e26:	4613      	mov	r3, r2
 8012e28:	005b      	lsls	r3, r3, #1
 8012e2a:	4413      	add	r3, r2
 8012e2c:	00db      	lsls	r3, r3, #3
 8012e2e:	440b      	add	r3, r1
 8012e30:	3314      	adds	r3, #20
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	2b02      	cmp	r3, #2
 8012e36:	d153      	bne.n	8012ee0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012e38:	79fa      	ldrb	r2, [r7, #7]
 8012e3a:	4936      	ldr	r1, [pc, #216]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e3c:	4613      	mov	r3, r2
 8012e3e:	005b      	lsls	r3, r3, #1
 8012e40:	4413      	add	r3, r2
 8012e42:	00db      	lsls	r3, r3, #3
 8012e44:	440b      	add	r3, r1
 8012e46:	3312      	adds	r3, #18
 8012e48:	881b      	ldrh	r3, [r3, #0]
 8012e4a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012e4e:	d919      	bls.n	8012e84 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012e50:	79fa      	ldrb	r2, [r7, #7]
 8012e52:	4613      	mov	r3, r2
 8012e54:	005b      	lsls	r3, r3, #1
 8012e56:	4413      	add	r3, r2
 8012e58:	00db      	lsls	r3, r3, #3
 8012e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e5c:	4413      	add	r3, r2
 8012e5e:	3304      	adds	r3, #4
 8012e60:	4619      	mov	r1, r3
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f000 fb42 	bl	80134ec <etharp_request>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d138      	bne.n	8012ee0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012e6e:	79fa      	ldrb	r2, [r7, #7]
 8012e70:	4928      	ldr	r1, [pc, #160]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e72:	4613      	mov	r3, r2
 8012e74:	005b      	lsls	r3, r3, #1
 8012e76:	4413      	add	r3, r2
 8012e78:	00db      	lsls	r3, r3, #3
 8012e7a:	440b      	add	r3, r1
 8012e7c:	3314      	adds	r3, #20
 8012e7e:	2203      	movs	r2, #3
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	e02d      	b.n	8012ee0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012e84:	79fa      	ldrb	r2, [r7, #7]
 8012e86:	4923      	ldr	r1, [pc, #140]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012e88:	4613      	mov	r3, r2
 8012e8a:	005b      	lsls	r3, r3, #1
 8012e8c:	4413      	add	r3, r2
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	440b      	add	r3, r1
 8012e92:	3312      	adds	r3, #18
 8012e94:	881b      	ldrh	r3, [r3, #0]
 8012e96:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012e9a:	d321      	bcc.n	8012ee0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012e9c:	79fa      	ldrb	r2, [r7, #7]
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	005b      	lsls	r3, r3, #1
 8012ea2:	4413      	add	r3, r2
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012ea8:	4413      	add	r3, r2
 8012eaa:	1d19      	adds	r1, r3, #4
 8012eac:	79fa      	ldrb	r2, [r7, #7]
 8012eae:	4613      	mov	r3, r2
 8012eb0:	005b      	lsls	r3, r3, #1
 8012eb2:	4413      	add	r3, r2
 8012eb4:	00db      	lsls	r3, r3, #3
 8012eb6:	3308      	adds	r3, #8
 8012eb8:	4a16      	ldr	r2, [pc, #88]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012eba:	4413      	add	r3, r2
 8012ebc:	3304      	adds	r3, #4
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	68f8      	ldr	r0, [r7, #12]
 8012ec2:	f000 faf1 	bl	80134a8 <etharp_request_dst>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d109      	bne.n	8012ee0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012ecc:	79fa      	ldrb	r2, [r7, #7]
 8012ece:	4911      	ldr	r1, [pc, #68]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012ed0:	4613      	mov	r3, r2
 8012ed2:	005b      	lsls	r3, r3, #1
 8012ed4:	4413      	add	r3, r2
 8012ed6:	00db      	lsls	r3, r3, #3
 8012ed8:	440b      	add	r3, r1
 8012eda:	3314      	adds	r3, #20
 8012edc:	2203      	movs	r2, #3
 8012ede:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 8012ee6:	79fa      	ldrb	r2, [r7, #7]
 8012ee8:	4613      	mov	r3, r2
 8012eea:	005b      	lsls	r3, r3, #1
 8012eec:	4413      	add	r3, r2
 8012eee:	00db      	lsls	r3, r3, #3
 8012ef0:	3308      	adds	r3, #8
 8012ef2:	4a08      	ldr	r2, [pc, #32]	@ (8012f14 <etharp_output_to_arp_index+0x124>)
 8012ef4:	4413      	add	r3, r2
 8012ef6:	3304      	adds	r3, #4
 8012ef8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012efc:	9200      	str	r2, [sp, #0]
 8012efe:	460a      	mov	r2, r1
 8012f00:	68b9      	ldr	r1, [r7, #8]
 8012f02:	68f8      	ldr	r0, [r7, #12]
 8012f04:	f001 ff04 	bl	8014d10 <ethernet_output>
 8012f08:	4603      	mov	r3, r0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3710      	adds	r7, #16
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}
 8012f12:	bf00      	nop
 8012f14:	200098d4 	.word	0x200098d4
 8012f18:	0801a3d8 	.word	0x0801a3d8
 8012f1c:	0801a548 	.word	0x0801a548
 8012f20:	0801a450 	.word	0x0801a450

08012f24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b08a      	sub	sp, #40	@ 0x28
 8012f28:	af02      	add	r7, sp, #8
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d106      	bne.n	8012f48 <etharp_output+0x24>
 8012f3a:	4b69      	ldr	r3, [pc, #420]	@ (80130e0 <etharp_output+0x1bc>)
 8012f3c:	f240 321b 	movw	r2, #795	@ 0x31b
 8012f40:	4968      	ldr	r1, [pc, #416]	@ (80130e4 <etharp_output+0x1c0>)
 8012f42:	4869      	ldr	r0, [pc, #420]	@ (80130e8 <etharp_output+0x1c4>)
 8012f44:	f004 f926 	bl	8017194 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <etharp_output+0x38>
 8012f4e:	4b64      	ldr	r3, [pc, #400]	@ (80130e0 <etharp_output+0x1bc>)
 8012f50:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012f54:	4965      	ldr	r1, [pc, #404]	@ (80130ec <etharp_output+0x1c8>)
 8012f56:	4864      	ldr	r0, [pc, #400]	@ (80130e8 <etharp_output+0x1c4>)
 8012f58:	f004 f91c 	bl	8017194 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d106      	bne.n	8012f70 <etharp_output+0x4c>
 8012f62:	4b5f      	ldr	r3, [pc, #380]	@ (80130e0 <etharp_output+0x1bc>)
 8012f64:	f240 321d 	movw	r2, #797	@ 0x31d
 8012f68:	4961      	ldr	r1, [pc, #388]	@ (80130f0 <etharp_output+0x1cc>)
 8012f6a:	485f      	ldr	r0, [pc, #380]	@ (80130e8 <etharp_output+0x1c4>)
 8012f6c:	f004 f912 	bl	8017194 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	68f9      	ldr	r1, [r7, #12]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f000 fed2 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d002      	beq.n	8012f88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8012f82:	4b5c      	ldr	r3, [pc, #368]	@ (80130f4 <etharp_output+0x1d0>)
 8012f84:	61fb      	str	r3, [r7, #28]
 8012f86:	e09b      	b.n	80130c0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012f90:	2be0      	cmp	r3, #224	@ 0xe0
 8012f92:	d118      	bne.n	8012fc6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012f94:	2301      	movs	r3, #1
 8012f96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012f9c:	235e      	movs	r3, #94	@ 0x5e
 8012f9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	3302      	adds	r3, #2
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	3303      	adds	r3, #3
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012fbe:	f107 0310 	add.w	r3, r7, #16
 8012fc2:	61fb      	str	r3, [r7, #28]
 8012fc4:	e07c      	b.n	80130c0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	3304      	adds	r3, #4
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	405a      	eors	r2, r3
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	4013      	ands	r3, r2
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d012      	beq.n	8013004 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012fe4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012fe8:	4293      	cmp	r3, r2
 8012fea:	d00b      	beq.n	8013004 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	330c      	adds	r3, #12
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d003      	beq.n	8012ffe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	330c      	adds	r3, #12
 8012ffa:	61bb      	str	r3, [r7, #24]
 8012ffc:	e002      	b.n	8013004 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012ffe:	f06f 0303 	mvn.w	r3, #3
 8013002:	e069      	b.n	80130d8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013004:	4b3c      	ldr	r3, [pc, #240]	@ (80130f8 <etharp_output+0x1d4>)
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	4619      	mov	r1, r3
 801300a:	4a3c      	ldr	r2, [pc, #240]	@ (80130fc <etharp_output+0x1d8>)
 801300c:	460b      	mov	r3, r1
 801300e:	005b      	lsls	r3, r3, #1
 8013010:	440b      	add	r3, r1
 8013012:	00db      	lsls	r3, r3, #3
 8013014:	4413      	add	r3, r2
 8013016:	3314      	adds	r3, #20
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	2b01      	cmp	r3, #1
 801301c:	d917      	bls.n	801304e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	4b35      	ldr	r3, [pc, #212]	@ (80130f8 <etharp_output+0x1d4>)
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	4618      	mov	r0, r3
 8013028:	4934      	ldr	r1, [pc, #208]	@ (80130fc <etharp_output+0x1d8>)
 801302a:	4603      	mov	r3, r0
 801302c:	005b      	lsls	r3, r3, #1
 801302e:	4403      	add	r3, r0
 8013030:	00db      	lsls	r3, r3, #3
 8013032:	440b      	add	r3, r1
 8013034:	3304      	adds	r3, #4
 8013036:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013038:	429a      	cmp	r2, r3
 801303a:	d108      	bne.n	801304e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801303c:	4b2e      	ldr	r3, [pc, #184]	@ (80130f8 <etharp_output+0x1d4>)
 801303e:	781b      	ldrb	r3, [r3, #0]
 8013040:	461a      	mov	r2, r3
 8013042:	68b9      	ldr	r1, [r7, #8]
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f7ff fed3 	bl	8012df0 <etharp_output_to_arp_index>
 801304a:	4603      	mov	r3, r0
 801304c:	e044      	b.n	80130d8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801304e:	2300      	movs	r3, #0
 8013050:	75fb      	strb	r3, [r7, #23]
 8013052:	e02a      	b.n	80130aa <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013054:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013058:	4928      	ldr	r1, [pc, #160]	@ (80130fc <etharp_output+0x1d8>)
 801305a:	4613      	mov	r3, r2
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	4413      	add	r3, r2
 8013060:	00db      	lsls	r3, r3, #3
 8013062:	440b      	add	r3, r1
 8013064:	3314      	adds	r3, #20
 8013066:	781b      	ldrb	r3, [r3, #0]
 8013068:	2b01      	cmp	r3, #1
 801306a:	d918      	bls.n	801309e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	6819      	ldr	r1, [r3, #0]
 8013070:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013074:	4821      	ldr	r0, [pc, #132]	@ (80130fc <etharp_output+0x1d8>)
 8013076:	4613      	mov	r3, r2
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	4413      	add	r3, r2
 801307c:	00db      	lsls	r3, r3, #3
 801307e:	4403      	add	r3, r0
 8013080:	3304      	adds	r3, #4
 8013082:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013084:	4299      	cmp	r1, r3
 8013086:	d10a      	bne.n	801309e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8013088:	7dfa      	ldrb	r2, [r7, #23]
 801308a:	4b1b      	ldr	r3, [pc, #108]	@ (80130f8 <etharp_output+0x1d4>)
 801308c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801308e:	7dfb      	ldrb	r3, [r7, #23]
 8013090:	461a      	mov	r2, r3
 8013092:	68b9      	ldr	r1, [r7, #8]
 8013094:	68f8      	ldr	r0, [r7, #12]
 8013096:	f7ff feab 	bl	8012df0 <etharp_output_to_arp_index>
 801309a:	4603      	mov	r3, r0
 801309c:	e01c      	b.n	80130d8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801309e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	3301      	adds	r3, #1
 80130a6:	b2db      	uxtb	r3, r3
 80130a8:	75fb      	strb	r3, [r7, #23]
 80130aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80130ae:	2b09      	cmp	r3, #9
 80130b0:	ddd0      	ble.n	8013054 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80130b2:	68ba      	ldr	r2, [r7, #8]
 80130b4:	69b9      	ldr	r1, [r7, #24]
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f000 f822 	bl	8013100 <etharp_query>
 80130bc:	4603      	mov	r3, r0
 80130be:	e00b      	b.n	80130d8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80130c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	69fb      	ldr	r3, [r7, #28]
 80130ce:	68b9      	ldr	r1, [r7, #8]
 80130d0:	68f8      	ldr	r0, [r7, #12]
 80130d2:	f001 fe1d 	bl	8014d10 <ethernet_output>
 80130d6:	4603      	mov	r3, r0
}
 80130d8:	4618      	mov	r0, r3
 80130da:	3720      	adds	r7, #32
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	0801a3d8 	.word	0x0801a3d8
 80130e4:	0801a528 	.word	0x0801a528
 80130e8:	0801a450 	.word	0x0801a450
 80130ec:	0801a578 	.word	0x0801a578
 80130f0:	0801a518 	.word	0x0801a518
 80130f4:	0801acbc 	.word	0x0801acbc
 80130f8:	200099c4 	.word	0x200099c4
 80130fc:	200098d4 	.word	0x200098d4

08013100 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b08c      	sub	sp, #48	@ 0x30
 8013104:	af02      	add	r7, sp, #8
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	3329      	adds	r3, #41	@ 0x29
 8013110:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013112:	23ff      	movs	r3, #255	@ 0xff
 8013114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013118:	2300      	movs	r3, #0
 801311a:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	68f9      	ldr	r1, [r7, #12]
 8013122:	4618      	mov	r0, r3
 8013124:	f000 fdfc 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10c      	bne.n	8013148 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801312e:	68bb      	ldr	r3, [r7, #8]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013136:	2be0      	cmp	r3, #224	@ 0xe0
 8013138:	d006      	beq.n	8013148 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d003      	beq.n	8013148 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d102      	bne.n	801314e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013148:	f06f 030f 	mvn.w	r3, #15
 801314c:	e10e      	b.n	801336c <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801314e:	68fa      	ldr	r2, [r7, #12]
 8013150:	2101      	movs	r1, #1
 8013152:	68b8      	ldr	r0, [r7, #8]
 8013154:	f7ff fbd2 	bl	80128fc <etharp_find_entry>
 8013158:	4603      	mov	r3, r0
 801315a:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 801315c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013160:	2b00      	cmp	r3, #0
 8013162:	da02      	bge.n	801316a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8013164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013168:	e100      	b.n	801336c <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801316a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801316e:	4981      	ldr	r1, [pc, #516]	@ (8013374 <etharp_query+0x274>)
 8013170:	4613      	mov	r3, r2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	4413      	add	r3, r2
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	440b      	add	r3, r1
 801317a:	3314      	adds	r3, #20
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d117      	bne.n	80131b2 <etharp_query+0xb2>
    is_new_entry = 1;
 8013182:	2301      	movs	r3, #1
 8013184:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013186:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801318a:	497a      	ldr	r1, [pc, #488]	@ (8013374 <etharp_query+0x274>)
 801318c:	4613      	mov	r3, r2
 801318e:	005b      	lsls	r3, r3, #1
 8013190:	4413      	add	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	440b      	add	r3, r1
 8013196:	3314      	adds	r3, #20
 8013198:	2201      	movs	r2, #1
 801319a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801319c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80131a0:	4974      	ldr	r1, [pc, #464]	@ (8013374 <etharp_query+0x274>)
 80131a2:	4613      	mov	r3, r2
 80131a4:	005b      	lsls	r3, r3, #1
 80131a6:	4413      	add	r3, r2
 80131a8:	00db      	lsls	r3, r3, #3
 80131aa:	440b      	add	r3, r1
 80131ac:	3308      	adds	r3, #8
 80131ae:	68fa      	ldr	r2, [r7, #12]
 80131b0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80131b2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80131b6:	496f      	ldr	r1, [pc, #444]	@ (8013374 <etharp_query+0x274>)
 80131b8:	4613      	mov	r3, r2
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	4413      	add	r3, r2
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	440b      	add	r3, r1
 80131c2:	3314      	adds	r3, #20
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	2b01      	cmp	r3, #1
 80131c8:	d012      	beq.n	80131f0 <etharp_query+0xf0>
 80131ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80131ce:	4969      	ldr	r1, [pc, #420]	@ (8013374 <etharp_query+0x274>)
 80131d0:	4613      	mov	r3, r2
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	4413      	add	r3, r2
 80131d6:	00db      	lsls	r3, r3, #3
 80131d8:	440b      	add	r3, r1
 80131da:	3314      	adds	r3, #20
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	2b01      	cmp	r3, #1
 80131e0:	d806      	bhi.n	80131f0 <etharp_query+0xf0>
 80131e2:	4b65      	ldr	r3, [pc, #404]	@ (8013378 <etharp_query+0x278>)
 80131e4:	f240 32c7 	movw	r2, #967	@ 0x3c7
 80131e8:	4964      	ldr	r1, [pc, #400]	@ (801337c <etharp_query+0x27c>)
 80131ea:	4865      	ldr	r0, [pc, #404]	@ (8013380 <etharp_query+0x280>)
 80131ec:	f003 ffd2 	bl	8017194 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80131f0:	6a3b      	ldr	r3, [r7, #32]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d102      	bne.n	80131fc <etharp_query+0xfc>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d10c      	bne.n	8013216 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80131fc:	68b9      	ldr	r1, [r7, #8]
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f000 f974 	bl	80134ec <etharp_request>
 8013204:	4603      	mov	r3, r0
 8013206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <etharp_query+0x116>
      return result;
 8013210:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013214:	e0aa      	b.n	801336c <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d106      	bne.n	801322a <etharp_query+0x12a>
 801321c:	4b56      	ldr	r3, [pc, #344]	@ (8013378 <etharp_query+0x278>)
 801321e:	f240 32db 	movw	r2, #987	@ 0x3db
 8013222:	4958      	ldr	r1, [pc, #352]	@ (8013384 <etharp_query+0x284>)
 8013224:	4856      	ldr	r0, [pc, #344]	@ (8013380 <etharp_query+0x280>)
 8013226:	f003 ffb5 	bl	8017194 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801322a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801322e:	4951      	ldr	r1, [pc, #324]	@ (8013374 <etharp_query+0x274>)
 8013230:	4613      	mov	r3, r2
 8013232:	005b      	lsls	r3, r3, #1
 8013234:	4413      	add	r3, r2
 8013236:	00db      	lsls	r3, r3, #3
 8013238:	440b      	add	r3, r1
 801323a:	3314      	adds	r3, #20
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	2b01      	cmp	r3, #1
 8013240:	d918      	bls.n	8013274 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8013242:	7cfa      	ldrb	r2, [r7, #19]
 8013244:	4b50      	ldr	r3, [pc, #320]	@ (8013388 <etharp_query+0x288>)
 8013246:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013248:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801324c:	4613      	mov	r3, r2
 801324e:	005b      	lsls	r3, r3, #1
 8013250:	4413      	add	r3, r2
 8013252:	00db      	lsls	r3, r3, #3
 8013254:	3308      	adds	r3, #8
 8013256:	4a47      	ldr	r2, [pc, #284]	@ (8013374 <etharp_query+0x274>)
 8013258:	4413      	add	r3, r2
 801325a:	3304      	adds	r3, #4
 801325c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013260:	9200      	str	r2, [sp, #0]
 8013262:	697a      	ldr	r2, [r7, #20]
 8013264:	6879      	ldr	r1, [r7, #4]
 8013266:	68f8      	ldr	r0, [r7, #12]
 8013268:	f001 fd52 	bl	8014d10 <ethernet_output>
 801326c:	4603      	mov	r3, r0
 801326e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013272:	e079      	b.n	8013368 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013274:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013278:	493e      	ldr	r1, [pc, #248]	@ (8013374 <etharp_query+0x274>)
 801327a:	4613      	mov	r3, r2
 801327c:	005b      	lsls	r3, r3, #1
 801327e:	4413      	add	r3, r2
 8013280:	00db      	lsls	r3, r3, #3
 8013282:	440b      	add	r3, r1
 8013284:	3314      	adds	r3, #20
 8013286:	781b      	ldrb	r3, [r3, #0]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d16d      	bne.n	8013368 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801328c:	2300      	movs	r3, #0
 801328e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013294:	e01a      	b.n	80132cc <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013296:	69fb      	ldr	r3, [r7, #28]
 8013298:	895a      	ldrh	r2, [r3, #10]
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	891b      	ldrh	r3, [r3, #8]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d10a      	bne.n	80132b8 <etharp_query+0x1b8>
 80132a2:	69fb      	ldr	r3, [r7, #28]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d006      	beq.n	80132b8 <etharp_query+0x1b8>
 80132aa:	4b33      	ldr	r3, [pc, #204]	@ (8013378 <etharp_query+0x278>)
 80132ac:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 80132b0:	4936      	ldr	r1, [pc, #216]	@ (801338c <etharp_query+0x28c>)
 80132b2:	4833      	ldr	r0, [pc, #204]	@ (8013380 <etharp_query+0x280>)
 80132b4:	f003 ff6e 	bl	8017194 <iprintf>
      if (p->type != PBUF_ROM) {
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	7b1b      	ldrb	r3, [r3, #12]
 80132bc:	2b01      	cmp	r3, #1
 80132be:	d002      	beq.n	80132c6 <etharp_query+0x1c6>
        copy_needed = 1;
 80132c0:	2301      	movs	r3, #1
 80132c2:	61bb      	str	r3, [r7, #24]
        break;
 80132c4:	e005      	b.n	80132d2 <etharp_query+0x1d2>
      }
      p = p->next;
 80132c6:	69fb      	ldr	r3, [r7, #28]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d1e1      	bne.n	8013296 <etharp_query+0x196>
    }
    if (copy_needed) {
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d017      	beq.n	8013308 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80132d8:	69fb      	ldr	r3, [r7, #28]
 80132da:	891b      	ldrh	r3, [r3, #8]
 80132dc:	2200      	movs	r2, #0
 80132de:	4619      	mov	r1, r3
 80132e0:	2002      	movs	r0, #2
 80132e2:	f7f8 fcef 	bl	800bcc4 <pbuf_alloc>
 80132e6:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d011      	beq.n	8013312 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 80132ee:	6879      	ldr	r1, [r7, #4]
 80132f0:	69f8      	ldr	r0, [r7, #28]
 80132f2:	f7f9 f99d 	bl	800c630 <pbuf_copy>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00a      	beq.n	8013312 <etharp_query+0x212>
          pbuf_free(p);
 80132fc:	69f8      	ldr	r0, [r7, #28]
 80132fe:	f7f9 f859 	bl	800c3b4 <pbuf_free>
          p = NULL;
 8013302:	2300      	movs	r3, #0
 8013304:	61fb      	str	r3, [r7, #28]
 8013306:	e004      	b.n	8013312 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801330c:	69f8      	ldr	r0, [r7, #28]
 801330e:	f7f9 f901 	bl	800c514 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013312:	69fb      	ldr	r3, [r7, #28]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d024      	beq.n	8013362 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013318:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801331c:	4915      	ldr	r1, [pc, #84]	@ (8013374 <etharp_query+0x274>)
 801331e:	4613      	mov	r3, r2
 8013320:	005b      	lsls	r3, r3, #1
 8013322:	4413      	add	r3, r2
 8013324:	00db      	lsls	r3, r3, #3
 8013326:	440b      	add	r3, r1
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d00b      	beq.n	8013346 <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801332e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8013332:	4910      	ldr	r1, [pc, #64]	@ (8013374 <etharp_query+0x274>)
 8013334:	4613      	mov	r3, r2
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	4413      	add	r3, r2
 801333a:	00db      	lsls	r3, r3, #3
 801333c:	440b      	add	r3, r1
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	4618      	mov	r0, r3
 8013342:	f7f9 f837 	bl	800c3b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8013346:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801334a:	490a      	ldr	r1, [pc, #40]	@ (8013374 <etharp_query+0x274>)
 801334c:	4613      	mov	r3, r2
 801334e:	005b      	lsls	r3, r3, #1
 8013350:	4413      	add	r3, r2
 8013352:	00db      	lsls	r3, r3, #3
 8013354:	440b      	add	r3, r1
 8013356:	69fa      	ldr	r2, [r7, #28]
 8013358:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801335a:	2300      	movs	r3, #0
 801335c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013360:	e002      	b.n	8013368 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013362:	23ff      	movs	r3, #255	@ 0xff
 8013364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8013368:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801336c:	4618      	mov	r0, r3
 801336e:	3728      	adds	r7, #40	@ 0x28
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	200098d4 	.word	0x200098d4
 8013378:	0801a3d8 	.word	0x0801a3d8
 801337c:	0801a584 	.word	0x0801a584
 8013380:	0801a450 	.word	0x0801a450
 8013384:	0801a578 	.word	0x0801a578
 8013388:	200099c4 	.word	0x200099c4
 801338c:	0801a5ac 	.word	0x0801a5ac

08013390 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013390:	b580      	push	{r7, lr}
 8013392:	b08a      	sub	sp, #40	@ 0x28
 8013394:	af02      	add	r7, sp, #8
 8013396:	60f8      	str	r0, [r7, #12]
 8013398:	60b9      	str	r1, [r7, #8]
 801339a:	607a      	str	r2, [r7, #4]
 801339c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801339e:	2300      	movs	r3, #0
 80133a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d106      	bne.n	80133b6 <etharp_raw+0x26>
 80133a8:	4b3a      	ldr	r3, [pc, #232]	@ (8013494 <etharp_raw+0x104>)
 80133aa:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 80133ae:	493a      	ldr	r1, [pc, #232]	@ (8013498 <etharp_raw+0x108>)
 80133b0:	483a      	ldr	r0, [pc, #232]	@ (801349c <etharp_raw+0x10c>)
 80133b2:	f003 feef 	bl	8017194 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80133b6:	2200      	movs	r2, #0
 80133b8:	211c      	movs	r1, #28
 80133ba:	2002      	movs	r0, #2
 80133bc:	f7f8 fc82 	bl	800bcc4 <pbuf_alloc>
 80133c0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d102      	bne.n	80133ce <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80133c8:	f04f 33ff 	mov.w	r3, #4294967295
 80133cc:	e05d      	b.n	801348a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	895b      	ldrh	r3, [r3, #10]
 80133d2:	2b1b      	cmp	r3, #27
 80133d4:	d806      	bhi.n	80133e4 <etharp_raw+0x54>
 80133d6:	4b2f      	ldr	r3, [pc, #188]	@ (8013494 <etharp_raw+0x104>)
 80133d8:	f240 4263 	movw	r2, #1123	@ 0x463
 80133dc:	4930      	ldr	r1, [pc, #192]	@ (80134a0 <etharp_raw+0x110>)
 80133de:	482f      	ldr	r0, [pc, #188]	@ (801349c <etharp_raw+0x10c>)
 80133e0:	f003 fed8 	bl	8017194 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80133ea:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7f7 fe0b 	bl	800b008 <lwip_htons>
 80133f2:	4603      	mov	r3, r0
 80133f4:	461a      	mov	r2, r3
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013400:	2b06      	cmp	r3, #6
 8013402:	d006      	beq.n	8013412 <etharp_raw+0x82>
 8013404:	4b23      	ldr	r3, [pc, #140]	@ (8013494 <etharp_raw+0x104>)
 8013406:	f240 426a 	movw	r2, #1130	@ 0x46a
 801340a:	4926      	ldr	r1, [pc, #152]	@ (80134a4 <etharp_raw+0x114>)
 801340c:	4823      	ldr	r0, [pc, #140]	@ (801349c <etharp_raw+0x10c>)
 801340e:	f003 fec1 	bl	8017194 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	3308      	adds	r3, #8
 8013416:	2206      	movs	r2, #6
 8013418:	6839      	ldr	r1, [r7, #0]
 801341a:	4618      	mov	r0, r3
 801341c:	f004 f8ff 	bl	801761e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	3312      	adds	r3, #18
 8013424:	2206      	movs	r2, #6
 8013426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013428:	4618      	mov	r0, r3
 801342a:	f004 f8f8 	bl	801761e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	330e      	adds	r3, #14
 8013432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013434:	6812      	ldr	r2, [r2, #0]
 8013436:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	3318      	adds	r3, #24
 801343c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801343e:	6812      	ldr	r2, [r2, #0]
 8013440:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	2200      	movs	r2, #0
 8013446:	701a      	strb	r2, [r3, #0]
 8013448:	2200      	movs	r2, #0
 801344a:	f042 0201 	orr.w	r2, r2, #1
 801344e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	2200      	movs	r2, #0
 8013454:	f042 0208 	orr.w	r2, r2, #8
 8013458:	709a      	strb	r2, [r3, #2]
 801345a:	2200      	movs	r2, #0
 801345c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	2206      	movs	r2, #6
 8013462:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	2204      	movs	r2, #4
 8013468:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801346a:	f640 0306 	movw	r3, #2054	@ 0x806
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	68ba      	ldr	r2, [r7, #8]
 8013474:	69b9      	ldr	r1, [r7, #24]
 8013476:	68f8      	ldr	r0, [r7, #12]
 8013478:	f001 fc4a 	bl	8014d10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801347c:	69b8      	ldr	r0, [r7, #24]
 801347e:	f7f8 ff99 	bl	800c3b4 <pbuf_free>
  p = NULL;
 8013482:	2300      	movs	r3, #0
 8013484:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013486:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3720      	adds	r7, #32
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	0801a3d8 	.word	0x0801a3d8
 8013498:	0801a528 	.word	0x0801a528
 801349c:	0801a450 	.word	0x0801a450
 80134a0:	0801a5c8 	.word	0x0801a5c8
 80134a4:	0801a5fc 	.word	0x0801a5fc

080134a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b088      	sub	sp, #32
 80134ac:	af04      	add	r7, sp, #16
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80134c4:	2201      	movs	r2, #1
 80134c6:	9203      	str	r2, [sp, #12]
 80134c8:	68ba      	ldr	r2, [r7, #8]
 80134ca:	9202      	str	r2, [sp, #8]
 80134cc:	4a06      	ldr	r2, [pc, #24]	@ (80134e8 <etharp_request_dst+0x40>)
 80134ce:	9201      	str	r2, [sp, #4]
 80134d0:	9300      	str	r3, [sp, #0]
 80134d2:	4603      	mov	r3, r0
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f7ff ff5a 	bl	8013390 <etharp_raw>
 80134dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	0801acc4 	.word	0x0801acc4

080134ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80134f6:	4a05      	ldr	r2, [pc, #20]	@ (801350c <etharp_request+0x20>)
 80134f8:	6839      	ldr	r1, [r7, #0]
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7ff ffd4 	bl	80134a8 <etharp_request_dst>
 8013500:	4603      	mov	r3, r0
}
 8013502:	4618      	mov	r0, r3
 8013504:	3708      	adds	r7, #8
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	0801acbc 	.word	0x0801acbc

08013510 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b08e      	sub	sp, #56	@ 0x38
 8013514:	af04      	add	r7, sp, #16
 8013516:	6078      	str	r0, [r7, #4]
 8013518:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801351a:	4b7a      	ldr	r3, [pc, #488]	@ (8013704 <icmp_input+0x1f4>)
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8013520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013522:	781b      	ldrb	r3, [r3, #0]
 8013524:	f003 030f 	and.w	r3, r3, #15
 8013528:	b29b      	uxth	r3, r3
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801352e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013530:	2b13      	cmp	r3, #19
 8013532:	f240 80d1 	bls.w	80136d8 <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	895b      	ldrh	r3, [r3, #10]
 801353a:	2b03      	cmp	r3, #3
 801353c:	f240 80ce 	bls.w	80136dc <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	685b      	ldr	r3, [r3, #4]
 8013544:	781b      	ldrb	r3, [r3, #0]
 8013546:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801354a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801354e:	2b00      	cmp	r3, #0
 8013550:	f000 80bb 	beq.w	80136ca <icmp_input+0x1ba>
 8013554:	2b08      	cmp	r3, #8
 8013556:	f040 80bb 	bne.w	80136d0 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801355a:	4b6b      	ldr	r3, [pc, #428]	@ (8013708 <icmp_input+0x1f8>)
 801355c:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801355e:	4b69      	ldr	r3, [pc, #420]	@ (8013704 <icmp_input+0x1f4>)
 8013560:	695b      	ldr	r3, [r3, #20]
 8013562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013566:	2be0      	cmp	r3, #224	@ 0xe0
 8013568:	f000 80bf 	beq.w	80136ea <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801356c:	4b65      	ldr	r3, [pc, #404]	@ (8013704 <icmp_input+0x1f4>)
 801356e:	695b      	ldr	r3, [r3, #20]
 8013570:	4a64      	ldr	r2, [pc, #400]	@ (8013704 <icmp_input+0x1f4>)
 8013572:	6812      	ldr	r2, [r2, #0]
 8013574:	4611      	mov	r1, r2
 8013576:	4618      	mov	r0, r3
 8013578:	f000 fbd2 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 801357c:	4603      	mov	r3, r0
 801357e:	2b00      	cmp	r3, #0
 8013580:	f040 80b5 	bne.w	80136ee <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	891b      	ldrh	r3, [r3, #8]
 8013588:	2b07      	cmp	r3, #7
 801358a:	f240 80a9 	bls.w	80136e0 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801358e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013590:	330e      	adds	r3, #14
 8013592:	b29b      	uxth	r3, r3
 8013594:	b21b      	sxth	r3, r3
 8013596:	4619      	mov	r1, r3
 8013598:	6878      	ldr	r0, [r7, #4]
 801359a:	f7f8 fee7 	bl	800c36c <pbuf_header>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d046      	beq.n	8013632 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	891a      	ldrh	r2, [r3, #8]
 80135a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135aa:	4413      	add	r3, r2
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	2200      	movs	r2, #0
 80135b0:	4619      	mov	r1, r3
 80135b2:	2002      	movs	r0, #2
 80135b4:	f7f8 fb86 	bl	800bcc4 <pbuf_alloc>
 80135b8:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80135ba:	69bb      	ldr	r3, [r7, #24]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	f000 8098 	beq.w	80136f2 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	895b      	ldrh	r3, [r3, #10]
 80135c6:	461a      	mov	r2, r3
 80135c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135ca:	3308      	adds	r3, #8
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d203      	bcs.n	80135d8 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80135d0:	69b8      	ldr	r0, [r7, #24]
 80135d2:	f7f8 feef 	bl	800c3b4 <pbuf_free>
        goto icmperr;
 80135d6:	e08d      	b.n	80136f4 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80135de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80135e0:	4618      	mov	r0, r3
 80135e2:	f004 f81c 	bl	801761e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80135e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80135e8:	425b      	negs	r3, r3
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	b21b      	sxth	r3, r3
 80135ee:	4619      	mov	r1, r3
 80135f0:	69b8      	ldr	r0, [r7, #24]
 80135f2:	f7f8 febb 	bl	800c36c <pbuf_header>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d009      	beq.n	8013610 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80135fc:	4b43      	ldr	r3, [pc, #268]	@ (801370c <icmp_input+0x1fc>)
 80135fe:	22af      	movs	r2, #175	@ 0xaf
 8013600:	4943      	ldr	r1, [pc, #268]	@ (8013710 <icmp_input+0x200>)
 8013602:	4844      	ldr	r0, [pc, #272]	@ (8013714 <icmp_input+0x204>)
 8013604:	f003 fdc6 	bl	8017194 <iprintf>
        pbuf_free(r);
 8013608:	69b8      	ldr	r0, [r7, #24]
 801360a:	f7f8 fed3 	bl	800c3b4 <pbuf_free>
        goto icmperr;
 801360e:	e071      	b.n	80136f4 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8013610:	6879      	ldr	r1, [r7, #4]
 8013612:	69b8      	ldr	r0, [r7, #24]
 8013614:	f7f9 f80c 	bl	800c630 <pbuf_copy>
 8013618:	4603      	mov	r3, r0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d003      	beq.n	8013626 <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801361e:	69b8      	ldr	r0, [r7, #24]
 8013620:	f7f8 fec8 	bl	800c3b4 <pbuf_free>
        goto icmperr;
 8013624:	e066      	b.n	80136f4 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f7f8 fec4 	bl	800c3b4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801362c:	69bb      	ldr	r3, [r7, #24]
 801362e:	607b      	str	r3, [r7, #4]
 8013630:	e015      	b.n	801365e <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8013632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013634:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 8013638:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 801363c:	33f2      	adds	r3, #242	@ 0xf2
 801363e:	b29b      	uxth	r3, r3
 8013640:	b21b      	sxth	r3, r3
 8013642:	4619      	mov	r1, r3
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7f8 fe91 	bl	800c36c <pbuf_header>
 801364a:	4603      	mov	r3, r0
 801364c:	2b00      	cmp	r3, #0
 801364e:	d006      	beq.n	801365e <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013650:	4b2e      	ldr	r3, [pc, #184]	@ (801370c <icmp_input+0x1fc>)
 8013652:	22c0      	movs	r2, #192	@ 0xc0
 8013654:	4930      	ldr	r1, [pc, #192]	@ (8013718 <icmp_input+0x208>)
 8013656:	482f      	ldr	r0, [pc, #188]	@ (8013714 <icmp_input+0x204>)
 8013658:	f003 fd9c 	bl	8017194 <iprintf>
        goto icmperr;
 801365c:	e04a      	b.n	80136f4 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8013664:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8013668:	4619      	mov	r1, r3
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f7f8 fe7e 	bl	800c36c <pbuf_header>
 8013670:	4603      	mov	r3, r0
 8013672:	2b00      	cmp	r3, #0
 8013674:	d12b      	bne.n	80136ce <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	685b      	ldr	r3, [r3, #4]
 801367a:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	681a      	ldr	r2, [r3, #0]
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013684:	4b1f      	ldr	r3, [pc, #124]	@ (8013704 <icmp_input+0x1f4>)
 8013686:	691a      	ldr	r2, [r3, #16]
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	2200      	movs	r2, #0
 8013696:	709a      	strb	r2, [r3, #2]
 8013698:	2200      	movs	r2, #0
 801369a:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	22ff      	movs	r2, #255	@ 0xff
 80136a0:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	2200      	movs	r2, #0
 80136a6:	729a      	strb	r2, [r3, #10]
 80136a8:	2200      	movs	r2, #0
 80136aa:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80136ac:	683b      	ldr	r3, [r7, #0]
 80136ae:	9302      	str	r3, [sp, #8]
 80136b0:	2301      	movs	r3, #1
 80136b2:	9301      	str	r3, [sp, #4]
 80136b4:	2300      	movs	r3, #0
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	23ff      	movs	r3, #255	@ 0xff
 80136ba:	2200      	movs	r2, #0
 80136bc:	69f9      	ldr	r1, [r7, #28]
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f000 fa5c 	bl	8013b7c <ip4_output_if>
 80136c4:	4603      	mov	r3, r0
 80136c6:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80136c8:	e001      	b.n	80136ce <icmp_input+0x1be>
    break;
 80136ca:	bf00      	nop
 80136cc:	e000      	b.n	80136d0 <icmp_input+0x1c0>
    break;
 80136ce:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f7f8 fe6f 	bl	800c3b4 <pbuf_free>
  return;
 80136d6:	e011      	b.n	80136fc <icmp_input+0x1ec>
    goto lenerr;
 80136d8:	bf00      	nop
 80136da:	e002      	b.n	80136e2 <icmp_input+0x1d2>
    goto lenerr;
 80136dc:	bf00      	nop
 80136de:	e000      	b.n	80136e2 <icmp_input+0x1d2>
      goto lenerr;
 80136e0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7f8 fe66 	bl	800c3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136e8:	e008      	b.n	80136fc <icmp_input+0x1ec>
      goto icmperr;
 80136ea:	bf00      	nop
 80136ec:	e002      	b.n	80136f4 <icmp_input+0x1e4>
      goto icmperr;
 80136ee:	bf00      	nop
 80136f0:	e000      	b.n	80136f4 <icmp_input+0x1e4>
        goto icmperr;
 80136f2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7f8 fe5d 	bl	800c3b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80136fa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80136fc:	3728      	adds	r7, #40	@ 0x28
 80136fe:	46bd      	mov	sp, r7
 8013700:	bd80      	pop	{r7, pc}
 8013702:	bf00      	nop
 8013704:	20006104 	.word	0x20006104
 8013708:	20006118 	.word	0x20006118
 801370c:	0801a640 	.word	0x0801a640
 8013710:	0801a678 	.word	0x0801a678
 8013714:	0801a6b0 	.word	0x0801a6b0
 8013718:	0801a6d8 	.word	0x0801a6d8

0801371c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013728:	78fb      	ldrb	r3, [r7, #3]
 801372a:	461a      	mov	r2, r3
 801372c:	2103      	movs	r1, #3
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 f814 	bl	801375c <icmp_send_response>
}
 8013734:	bf00      	nop
 8013736:	3708      	adds	r7, #8
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	460b      	mov	r3, r1
 8013746:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013748:	78fb      	ldrb	r3, [r7, #3]
 801374a:	461a      	mov	r2, r3
 801374c:	210b      	movs	r1, #11
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f000 f804 	bl	801375c <icmp_send_response>
}
 8013754:	bf00      	nop
 8013756:	3708      	adds	r7, #8
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b08c      	sub	sp, #48	@ 0x30
 8013760:	af04      	add	r7, sp, #16
 8013762:	6078      	str	r0, [r7, #4]
 8013764:	460b      	mov	r3, r1
 8013766:	70fb      	strb	r3, [r7, #3]
 8013768:	4613      	mov	r3, r2
 801376a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801376c:	2200      	movs	r2, #0
 801376e:	2124      	movs	r1, #36	@ 0x24
 8013770:	2001      	movs	r0, #1
 8013772:	f7f8 faa7 	bl	800bcc4 <pbuf_alloc>
 8013776:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d04c      	beq.n	8013818 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	895b      	ldrh	r3, [r3, #10]
 8013782:	2b23      	cmp	r3, #35	@ 0x23
 8013784:	d806      	bhi.n	8013794 <icmp_send_response+0x38>
 8013786:	4b26      	ldr	r3, [pc, #152]	@ (8013820 <icmp_send_response+0xc4>)
 8013788:	f240 1261 	movw	r2, #353	@ 0x161
 801378c:	4925      	ldr	r1, [pc, #148]	@ (8013824 <icmp_send_response+0xc8>)
 801378e:	4826      	ldr	r0, [pc, #152]	@ (8013828 <icmp_send_response+0xcc>)
 8013790:	f003 fd00 	bl	8017194 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	685b      	ldr	r3, [r3, #4]
 8013798:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	78fa      	ldrb	r2, [r7, #3]
 80137a4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	78ba      	ldrb	r2, [r7, #2]
 80137aa:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	2200      	movs	r2, #0
 80137b0:	711a      	strb	r2, [r3, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	2200      	movs	r2, #0
 80137ba:	719a      	strb	r2, [r3, #6]
 80137bc:	2200      	movs	r2, #0
 80137be:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	f103 0008 	add.w	r0, r3, #8
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	221c      	movs	r2, #28
 80137ce:	4619      	mov	r1, r3
 80137d0:	f003 ff25 	bl	801761e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80137d4:	69bb      	ldr	r3, [r7, #24]
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80137da:	f107 030c 	add.w	r3, r7, #12
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 f824 	bl	801382c <ip4_route>
 80137e4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d011      	beq.n	8013810 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	2200      	movs	r2, #0
 80137f0:	709a      	strb	r2, [r3, #2]
 80137f2:	2200      	movs	r2, #0
 80137f4:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80137f6:	f107 020c 	add.w	r2, r7, #12
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	9302      	str	r3, [sp, #8]
 80137fe:	2301      	movs	r3, #1
 8013800:	9301      	str	r3, [sp, #4]
 8013802:	2300      	movs	r3, #0
 8013804:	9300      	str	r3, [sp, #0]
 8013806:	23ff      	movs	r3, #255	@ 0xff
 8013808:	2100      	movs	r1, #0
 801380a:	69f8      	ldr	r0, [r7, #28]
 801380c:	f000 f9b6 	bl	8013b7c <ip4_output_if>
  }
  pbuf_free(q);
 8013810:	69f8      	ldr	r0, [r7, #28]
 8013812:	f7f8 fdcf 	bl	800c3b4 <pbuf_free>
 8013816:	e000      	b.n	801381a <icmp_send_response+0xbe>
    return;
 8013818:	bf00      	nop
}
 801381a:	3720      	adds	r7, #32
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	0801a640 	.word	0x0801a640
 8013824:	0801a70c 	.word	0x0801a70c
 8013828:	0801a6b0 	.word	0x0801a6b0

0801382c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801382c:	b480      	push	{r7}
 801382e:	b085      	sub	sp, #20
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8013834:	4b30      	ldr	r3, [pc, #192]	@ (80138f8 <ip4_route+0xcc>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	60fb      	str	r3, [r7, #12]
 801383a:	e036      	b.n	80138aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013842:	f003 0301 	and.w	r3, r3, #1
 8013846:	b2db      	uxtb	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d02b      	beq.n	80138a4 <ip4_route+0x78>
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013852:	089b      	lsrs	r3, r3, #2
 8013854:	f003 0301 	and.w	r3, r3, #1
 8013858:	b2db      	uxtb	r3, r3
 801385a:	2b00      	cmp	r3, #0
 801385c:	d022      	beq.n	80138a4 <ip4_route+0x78>
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	3304      	adds	r3, #4
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d01d      	beq.n	80138a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	3304      	adds	r3, #4
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	405a      	eors	r2, r3
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	3308      	adds	r3, #8
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	4013      	ands	r3, r2
 801387c:	2b00      	cmp	r3, #0
 801387e:	d101      	bne.n	8013884 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	e033      	b.n	80138ec <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801388a:	f003 0302 	and.w	r3, r3, #2
 801388e:	2b00      	cmp	r3, #0
 8013890:	d108      	bne.n	80138a4 <ip4_route+0x78>
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	330c      	adds	r3, #12
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	429a      	cmp	r2, r3
 801389e:	d101      	bne.n	80138a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	e023      	b.n	80138ec <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	60fb      	str	r3, [r7, #12]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d1c5      	bne.n	801383c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80138b0:	4b12      	ldr	r3, [pc, #72]	@ (80138fc <ip4_route+0xd0>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d015      	beq.n	80138e4 <ip4_route+0xb8>
 80138b8:	4b10      	ldr	r3, [pc, #64]	@ (80138fc <ip4_route+0xd0>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80138c0:	f003 0301 	and.w	r3, r3, #1
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00d      	beq.n	80138e4 <ip4_route+0xb8>
 80138c8:	4b0c      	ldr	r3, [pc, #48]	@ (80138fc <ip4_route+0xd0>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80138d0:	f003 0304 	and.w	r3, r3, #4
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d005      	beq.n	80138e4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80138d8:	4b08      	ldr	r3, [pc, #32]	@ (80138fc <ip4_route+0xd0>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	3304      	adds	r3, #4
 80138de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d101      	bne.n	80138e8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80138e4:	2300      	movs	r3, #0
 80138e6:	e001      	b.n	80138ec <ip4_route+0xc0>
  }

  return netif_default;
 80138e8:	4b04      	ldr	r3, [pc, #16]	@ (80138fc <ip4_route+0xd0>)
 80138ea:	681b      	ldr	r3, [r3, #0]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bc80      	pop	{r7}
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	20009868 	.word	0x20009868
 80138fc:	2000986c 	.word	0x2000986c

08013900 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b086      	sub	sp, #24
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013910:	697b      	ldr	r3, [r7, #20]
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	091b      	lsrs	r3, r3, #4
 8013916:	b2db      	uxtb	r3, r3
 8013918:	2b04      	cmp	r3, #4
 801391a:	d004      	beq.n	8013926 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801391c:	6878      	ldr	r0, [r7, #4]
 801391e:	f7f8 fd49 	bl	800c3b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013922:	2300      	movs	r3, #0
 8013924:	e122      	b.n	8013b6c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	f003 030f 	and.w	r3, r3, #15
 801392e:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8013930:	897b      	ldrh	r3, [r7, #10]
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	885b      	ldrh	r3, [r3, #2]
 801393a:	b29b      	uxth	r3, r3
 801393c:	4618      	mov	r0, r3
 801393e:	f7f7 fb63 	bl	800b008 <lwip_htons>
 8013942:	4603      	mov	r3, r0
 8013944:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	893a      	ldrh	r2, [r7, #8]
 801394c:	429a      	cmp	r2, r3
 801394e:	d204      	bcs.n	801395a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013950:	893b      	ldrh	r3, [r7, #8]
 8013952:	4619      	mov	r1, r3
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f7f8 fbb9 	bl	800c0cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	895b      	ldrh	r3, [r3, #10]
 801395e:	897a      	ldrh	r2, [r7, #10]
 8013960:	429a      	cmp	r2, r3
 8013962:	d807      	bhi.n	8013974 <ip4_input+0x74>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	891b      	ldrh	r3, [r3, #8]
 8013968:	893a      	ldrh	r2, [r7, #8]
 801396a:	429a      	cmp	r2, r3
 801396c:	d802      	bhi.n	8013974 <ip4_input+0x74>
 801396e:	897b      	ldrh	r3, [r7, #10]
 8013970:	2b13      	cmp	r3, #19
 8013972:	d804      	bhi.n	801397e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f7f8 fd1d 	bl	800c3b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801397a:	2300      	movs	r3, #0
 801397c:	e0f6      	b.n	8013b6c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	691b      	ldr	r3, [r3, #16]
 8013982:	4a7c      	ldr	r2, [pc, #496]	@ (8013b74 <ip4_input+0x274>)
 8013984:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	68db      	ldr	r3, [r3, #12]
 801398a:	4a7a      	ldr	r2, [pc, #488]	@ (8013b74 <ip4_input+0x274>)
 801398c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801398e:	4b79      	ldr	r3, [pc, #484]	@ (8013b74 <ip4_input+0x274>)
 8013990:	695b      	ldr	r3, [r3, #20]
 8013992:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013996:	2be0      	cmp	r3, #224	@ 0xe0
 8013998:	d112      	bne.n	80139c0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80139a0:	f003 0301 	and.w	r3, r3, #1
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d007      	beq.n	80139ba <ip4_input+0xba>
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	3304      	adds	r3, #4
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d002      	beq.n	80139ba <ip4_input+0xba>
      netif = inp;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	613b      	str	r3, [r7, #16]
 80139b8:	e041      	b.n	8013a3e <ip4_input+0x13e>
    } else {
      netif = NULL;
 80139ba:	2300      	movs	r3, #0
 80139bc:	613b      	str	r3, [r7, #16]
 80139be:	e03e      	b.n	8013a3e <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80139c0:	2301      	movs	r3, #1
 80139c2:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80139ce:	f003 0301 	and.w	r3, r3, #1
 80139d2:	b2db      	uxtb	r3, r3
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d014      	beq.n	8013a02 <ip4_input+0x102>
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	3304      	adds	r3, #4
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d00f      	beq.n	8013a02 <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80139e2:	4b64      	ldr	r3, [pc, #400]	@ (8013b74 <ip4_input+0x274>)
 80139e4:	695a      	ldr	r2, [r3, #20]
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	3304      	adds	r3, #4
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d026      	beq.n	8013a3e <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80139f0:	4b60      	ldr	r3, [pc, #384]	@ (8013b74 <ip4_input+0x274>)
 80139f2:	695b      	ldr	r3, [r3, #20]
 80139f4:	6939      	ldr	r1, [r7, #16]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 f992 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 80139fc:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d11d      	bne.n	8013a3e <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00d      	beq.n	8013a24 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8013a08:	4b5a      	ldr	r3, [pc, #360]	@ (8013b74 <ip4_input+0x274>)
 8013a0a:	695b      	ldr	r3, [r3, #20]
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8013a10:	d102      	bne.n	8013a18 <ip4_input+0x118>
          netif = NULL;
 8013a12:	2300      	movs	r3, #0
 8013a14:	613b      	str	r3, [r7, #16]
          break;
 8013a16:	e012      	b.n	8013a3e <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8013a1c:	4b56      	ldr	r3, [pc, #344]	@ (8013b78 <ip4_input+0x278>)
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	613b      	str	r3, [r7, #16]
 8013a22:	e002      	b.n	8013a2a <ip4_input+0x12a>
      } else {
        netif = netif->next;
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8013a2a:	693a      	ldr	r2, [r7, #16]
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d102      	bne.n	8013a38 <ip4_input+0x138>
        netif = netif->next;
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d1c4      	bne.n	80139c8 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8013b74 <ip4_input+0x274>)
 8013a40:	691b      	ldr	r3, [r3, #16]
 8013a42:	6839      	ldr	r1, [r7, #0]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f000 f96b 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d105      	bne.n	8013a5c <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013a50:	4b48      	ldr	r3, [pc, #288]	@ (8013b74 <ip4_input+0x274>)
 8013a52:	691b      	ldr	r3, [r3, #16]
 8013a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013a58:	2be0      	cmp	r3, #224	@ 0xe0
 8013a5a:	d104      	bne.n	8013a66 <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7f8 fca9 	bl	800c3b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013a62:	2300      	movs	r3, #0
 8013a64:	e082      	b.n	8013b6c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d104      	bne.n	8013a76 <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7f8 fca1 	bl	800c3b4 <pbuf_free>
    return ERR_OK;
 8013a72:	2300      	movs	r3, #0
 8013a74:	e07a      	b.n	8013b6c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	88db      	ldrh	r3, [r3, #6]
 8013a7a:	b29b      	uxth	r3, r3
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013a82:	4013      	ands	r3, r2
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00b      	beq.n	8013aa0 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fde3 	bl	8014654 <ip4_reass>
 8013a8e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d101      	bne.n	8013a9a <ip4_input+0x19a>
      return ERR_OK;
 8013a96:	2300      	movs	r3, #0
 8013a98:	e068      	b.n	8013b6c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013aa0:	4a34      	ldr	r2, [pc, #208]	@ (8013b74 <ip4_input+0x274>)
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013aa6:	4a33      	ldr	r2, [pc, #204]	@ (8013b74 <ip4_input+0x274>)
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013aac:	4a31      	ldr	r2, [pc, #196]	@ (8013b74 <ip4_input+0x274>)
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	781b      	ldrb	r3, [r3, #0]
 8013ab6:	f003 030f 	and.w	r3, r3, #15
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	009b      	lsls	r3, r3, #2
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8013b74 <ip4_input+0x274>)
 8013ac2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8013ac4:	897b      	ldrh	r3, [r7, #10]
 8013ac6:	425b      	negs	r3, r3
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	b21b      	sxth	r3, r3
 8013acc:	4619      	mov	r1, r3
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f7f8 fc4c 	bl	800c36c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	7a5b      	ldrb	r3, [r3, #9]
 8013ad8:	2b11      	cmp	r3, #17
 8013ada:	d006      	beq.n	8013aea <ip4_input+0x1ea>
 8013adc:	2b11      	cmp	r3, #17
 8013ade:	dc13      	bgt.n	8013b08 <ip4_input+0x208>
 8013ae0:	2b01      	cmp	r3, #1
 8013ae2:	d00c      	beq.n	8013afe <ip4_input+0x1fe>
 8013ae4:	2b06      	cmp	r3, #6
 8013ae6:	d005      	beq.n	8013af4 <ip4_input+0x1f4>
 8013ae8:	e00e      	b.n	8013b08 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8013aea:	6839      	ldr	r1, [r7, #0]
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7fe fab9 	bl	8012064 <udp_input>
      break;
 8013af2:	e028      	b.n	8013b46 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8013af4:	6839      	ldr	r1, [r7, #0]
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f7fa faf2 	bl	800e0e0 <tcp_input>
      break;
 8013afc:	e023      	b.n	8013b46 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8013afe:	6839      	ldr	r1, [r7, #0]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ff fd05 	bl	8013510 <icmp_input>
      break;
 8013b06:	e01e      	b.n	8013b46 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013b08:	4b1a      	ldr	r3, [pc, #104]	@ (8013b74 <ip4_input+0x274>)
 8013b0a:	695b      	ldr	r3, [r3, #20]
 8013b0c:	6939      	ldr	r1, [r7, #16]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f000 f906 	bl	8013d20 <ip4_addr_isbroadcast_u32>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d112      	bne.n	8013b40 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b1a:	4b16      	ldr	r3, [pc, #88]	@ (8013b74 <ip4_input+0x274>)
 8013b1c:	695b      	ldr	r3, [r3, #20]
 8013b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013b22:	2be0      	cmp	r3, #224	@ 0xe0
 8013b24:	d00c      	beq.n	8013b40 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8013b26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013b2a:	4619      	mov	r1, r3
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7f8 fc2f 	bl	800c390 <pbuf_header_force>
        p->payload = iphdr;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	697a      	ldr	r2, [r7, #20]
 8013b36:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013b38:	2102      	movs	r1, #2
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7ff fdee 	bl	801371c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f7f8 fc37 	bl	800c3b4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013b46:	4b0b      	ldr	r3, [pc, #44]	@ (8013b74 <ip4_input+0x274>)
 8013b48:	2200      	movs	r2, #0
 8013b4a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013b4c:	4b09      	ldr	r3, [pc, #36]	@ (8013b74 <ip4_input+0x274>)
 8013b4e:	2200      	movs	r2, #0
 8013b50:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013b52:	4b08      	ldr	r3, [pc, #32]	@ (8013b74 <ip4_input+0x274>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013b58:	4b06      	ldr	r3, [pc, #24]	@ (8013b74 <ip4_input+0x274>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013b5e:	4b05      	ldr	r3, [pc, #20]	@ (8013b74 <ip4_input+0x274>)
 8013b60:	2200      	movs	r2, #0
 8013b62:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013b64:	4b03      	ldr	r3, [pc, #12]	@ (8013b74 <ip4_input+0x274>)
 8013b66:	2200      	movs	r2, #0
 8013b68:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013b6a:	2300      	movs	r3, #0
}
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	20006104 	.word	0x20006104
 8013b78:	20009868 	.word	0x20009868

08013b7c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08a      	sub	sp, #40	@ 0x28
 8013b80:	af04      	add	r7, sp, #16
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d009      	beq.n	8013ba8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d003      	beq.n	8013ba2 <ip4_output_if+0x26>
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d102      	bne.n	8013ba8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ba4:	3304      	adds	r3, #4
 8013ba6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013ba8:	78fa      	ldrb	r2, [r7, #3]
 8013baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bac:	9302      	str	r3, [sp, #8]
 8013bae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013bb2:	9301      	str	r3, [sp, #4]
 8013bb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	4613      	mov	r3, r2
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	6979      	ldr	r1, [r7, #20]
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f000 f805 	bl	8013bd0 <ip4_output_if_src>
 8013bc6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b088      	sub	sp, #32
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
 8013bdc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	89db      	ldrh	r3, [r3, #14]
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	d006      	beq.n	8013bf4 <ip4_output_if_src+0x24>
 8013be6:	4b48      	ldr	r3, [pc, #288]	@ (8013d08 <ip4_output_if_src+0x138>)
 8013be8:	f240 3233 	movw	r2, #819	@ 0x333
 8013bec:	4947      	ldr	r1, [pc, #284]	@ (8013d0c <ip4_output_if_src+0x13c>)
 8013bee:	4848      	ldr	r0, [pc, #288]	@ (8013d10 <ip4_output_if_src+0x140>)
 8013bf0:	f003 fad0 	bl	8017194 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d060      	beq.n	8013cbc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013bfa:	2314      	movs	r3, #20
 8013bfc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8013bfe:	2114      	movs	r1, #20
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f7f8 fbb3 	bl	800c36c <pbuf_header>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013c0c:	f06f 0301 	mvn.w	r3, #1
 8013c10:	e075      	b.n	8013cfe <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	895b      	ldrh	r3, [r3, #10]
 8013c1c:	2b13      	cmp	r3, #19
 8013c1e:	d806      	bhi.n	8013c2e <ip4_output_if_src+0x5e>
 8013c20:	4b39      	ldr	r3, [pc, #228]	@ (8013d08 <ip4_output_if_src+0x138>)
 8013c22:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8013c26:	493b      	ldr	r1, [pc, #236]	@ (8013d14 <ip4_output_if_src+0x144>)
 8013c28:	4839      	ldr	r0, [pc, #228]	@ (8013d10 <ip4_output_if_src+0x140>)
 8013c2a:	f003 fab3 	bl	8017194 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	78fa      	ldrb	r2, [r7, #3]
 8013c32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013c34:	69fb      	ldr	r3, [r7, #28]
 8013c36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013c3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681a      	ldr	r2, [r3, #0]
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013c44:	8b7b      	ldrh	r3, [r7, #26]
 8013c46:	089b      	lsrs	r3, r3, #2
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c50:	b2da      	uxtb	r2, r3
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013c56:	69fb      	ldr	r3, [r7, #28]
 8013c58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013c5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	891b      	ldrh	r3, [r3, #8]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7f7 f9d0 	bl	800b008 <lwip_htons>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	69fb      	ldr	r3, [r7, #28]
 8013c6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013c70:	69fb      	ldr	r3, [r7, #28]
 8013c72:	2200      	movs	r2, #0
 8013c74:	719a      	strb	r2, [r3, #6]
 8013c76:	2200      	movs	r2, #0
 8013c78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013c7a:	4b27      	ldr	r3, [pc, #156]	@ (8013d18 <ip4_output_if_src+0x148>)
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7f7 f9c2 	bl	800b008 <lwip_htons>
 8013c84:	4603      	mov	r3, r0
 8013c86:	461a      	mov	r2, r3
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013c8c:	4b22      	ldr	r3, [pc, #136]	@ (8013d18 <ip4_output_if_src+0x148>)
 8013c8e:	881b      	ldrh	r3, [r3, #0]
 8013c90:	3301      	adds	r3, #1
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	4b20      	ldr	r3, [pc, #128]	@ (8013d18 <ip4_output_if_src+0x148>)
 8013c96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d104      	bne.n	8013ca8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8013d1c <ip4_output_if_src+0x14c>)
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	69fb      	ldr	r3, [r7, #28]
 8013ca4:	60da      	str	r2, [r3, #12]
 8013ca6:	e003      	b.n	8013cb0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013ca8:	68bb      	ldr	r3, [r7, #8]
 8013caa:	681a      	ldr	r2, [r3, #0]
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	729a      	strb	r2, [r3, #10]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	72da      	strb	r2, [r3, #11]
 8013cba:	e008      	b.n	8013cce <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	685b      	ldr	r3, [r3, #4]
 8013cc0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013cc2:	69fb      	ldr	r3, [r7, #28]
 8013cc4:	691b      	ldr	r3, [r3, #16]
 8013cc6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013cc8:	f107 0314 	add.w	r3, r7, #20
 8013ccc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d00c      	beq.n	8013cf0 <ip4_output_if_src+0x120>
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	891a      	ldrh	r2, [r3, #8]
 8013cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d906      	bls.n	8013cf0 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013ce6:	68f8      	ldr	r0, [r7, #12]
 8013ce8:	f000 fe5e 	bl	80149a8 <ip4_frag>
 8013cec:	4603      	mov	r3, r0
 8013cee:	e006      	b.n	8013cfe <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cf2:	695b      	ldr	r3, [r3, #20]
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	68f9      	ldr	r1, [r7, #12]
 8013cf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013cfa:	4798      	blx	r3
 8013cfc:	4603      	mov	r3, r0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3720      	adds	r7, #32
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	0801a738 	.word	0x0801a738
 8013d0c:	0801a76c 	.word	0x0801a76c
 8013d10:	0801a778 	.word	0x0801a778
 8013d14:	0801a7a0 	.word	0x0801a7a0
 8013d18:	200099c6 	.word	0x200099c6
 8013d1c:	0801acb8 	.word	0x0801acb8

08013d20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b085      	sub	sp, #20
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d34:	d002      	beq.n	8013d3c <ip4_addr_isbroadcast_u32+0x1c>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d101      	bne.n	8013d40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e02a      	b.n	8013d96 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013d46:	f003 0302 	and.w	r3, r3, #2
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d101      	bne.n	8013d52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e021      	b.n	8013d96 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013d52:	683b      	ldr	r3, [r7, #0]
 8013d54:	3304      	adds	r3, #4
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	687a      	ldr	r2, [r7, #4]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d101      	bne.n	8013d62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	e019      	b.n	8013d96 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	683b      	ldr	r3, [r7, #0]
 8013d66:	3304      	adds	r3, #4
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	405a      	eors	r2, r3
 8013d6c:	683b      	ldr	r3, [r7, #0]
 8013d6e:	3308      	adds	r3, #8
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	4013      	ands	r3, r2
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d10d      	bne.n	8013d94 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	43da      	mvns	r2, r3
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	3308      	adds	r3, #8
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d101      	bne.n	8013d94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013d90:	2301      	movs	r3, #1
 8013d92:	e000      	b.n	8013d96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013d94:	2300      	movs	r3, #0
  }
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3714      	adds	r7, #20
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bc80      	pop	{r7}
 8013d9e:	4770      	bx	lr

08013da0 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8013da8:	f107 030c 	add.w	r3, r7, #12
 8013dac:	4619      	mov	r1, r3
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f000 f80c 	bl	8013dcc <ip4addr_aton>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d001      	beq.n	8013dbe <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	e001      	b.n	8013dc2 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8013dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	3710      	adds	r7, #16
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bd80      	pop	{r7, pc}
	...

08013dcc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b08a      	sub	sp, #40	@ 0x28
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013dd6:	f107 030c 	add.w	r3, r7, #12
 8013dda:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 8013de4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013de8:	2b2f      	cmp	r3, #47	@ 0x2f
 8013dea:	d903      	bls.n	8013df4 <ip4addr_aton+0x28>
 8013dec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013df0:	2b39      	cmp	r3, #57	@ 0x39
 8013df2:	d901      	bls.n	8013df8 <ip4addr_aton+0x2c>
      return 0;
 8013df4:	2300      	movs	r3, #0
 8013df6:	e11e      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    val = 0;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 8013dfc:	230a      	movs	r3, #10
 8013dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 8013e02:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e06:	2b30      	cmp	r3, #48	@ 0x30
 8013e08:	d11c      	bne.n	8013e44 <ip4addr_aton+0x78>
      c = *++cp;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	607b      	str	r3, [r7, #4]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 8013e18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e1c:	2b78      	cmp	r3, #120	@ 0x78
 8013e1e:	d003      	beq.n	8013e28 <ip4addr_aton+0x5c>
 8013e20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e24:	2b58      	cmp	r3, #88	@ 0x58
 8013e26:	d10a      	bne.n	8013e3e <ip4addr_aton+0x72>
        base = 16;
 8013e28:	2310      	movs	r3, #16
 8013e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	3301      	adds	r3, #1
 8013e32:	607b      	str	r3, [r7, #4]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	781b      	ldrb	r3, [r3, #0]
 8013e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8013e3c:	e002      	b.n	8013e44 <ip4addr_aton+0x78>
      } else {
        base = 8;
 8013e3e:	2308      	movs	r3, #8
 8013e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 8013e44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e48:	2b2f      	cmp	r3, #47	@ 0x2f
 8013e4a:	d915      	bls.n	8013e78 <ip4addr_aton+0xac>
 8013e4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e50:	2b39      	cmp	r3, #57	@ 0x39
 8013e52:	d811      	bhi.n	8013e78 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 8013e54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e5a:	fb03 f202 	mul.w	r2, r3, r2
 8013e5e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e62:	4413      	add	r3, r2
 8013e64:	3b30      	subs	r3, #48	@ 0x30
 8013e66:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	607b      	str	r3, [r7, #4]
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8013e76:	e036      	b.n	8013ee6 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 8013e78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013e7c:	2b10      	cmp	r3, #16
 8013e7e:	d133      	bne.n	8013ee8 <ip4addr_aton+0x11c>
 8013e80:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e84:	2b2f      	cmp	r3, #47	@ 0x2f
 8013e86:	d903      	bls.n	8013e90 <ip4addr_aton+0xc4>
 8013e88:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e8c:	2b39      	cmp	r3, #57	@ 0x39
 8013e8e:	d90f      	bls.n	8013eb0 <ip4addr_aton+0xe4>
 8013e90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e94:	2b60      	cmp	r3, #96	@ 0x60
 8013e96:	d903      	bls.n	8013ea0 <ip4addr_aton+0xd4>
 8013e98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013e9c:	2b66      	cmp	r3, #102	@ 0x66
 8013e9e:	d907      	bls.n	8013eb0 <ip4addr_aton+0xe4>
 8013ea0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013ea4:	2b40      	cmp	r3, #64	@ 0x40
 8013ea6:	d91f      	bls.n	8013ee8 <ip4addr_aton+0x11c>
 8013ea8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013eac:	2b46      	cmp	r3, #70	@ 0x46
 8013eae:	d81b      	bhi.n	8013ee8 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8013eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb2:	011b      	lsls	r3, r3, #4
 8013eb4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8013eb8:	f102 010a 	add.w	r1, r2, #10
 8013ebc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8013ec0:	2a60      	cmp	r2, #96	@ 0x60
 8013ec2:	d905      	bls.n	8013ed0 <ip4addr_aton+0x104>
 8013ec4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8013ec8:	2a7a      	cmp	r2, #122	@ 0x7a
 8013eca:	d801      	bhi.n	8013ed0 <ip4addr_aton+0x104>
 8013ecc:	2261      	movs	r2, #97	@ 0x61
 8013ece:	e000      	b.n	8013ed2 <ip4addr_aton+0x106>
 8013ed0:	2241      	movs	r2, #65	@ 0x41
 8013ed2:	1a8a      	subs	r2, r1, r2
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	3301      	adds	r3, #1
 8013edc:	607b      	str	r3, [r7, #4]
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 8013ee6:	e7ad      	b.n	8013e44 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 8013ee8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8013eee:	d114      	bne.n	8013f1a <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8013ef0:	f107 030c 	add.w	r3, r7, #12
 8013ef4:	330c      	adds	r3, #12
 8013ef6:	69fa      	ldr	r2, [r7, #28]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d301      	bcc.n	8013f00 <ip4addr_aton+0x134>
        return 0;
 8013efc:	2300      	movs	r3, #0
 8013efe:	e09a      	b.n	8014036 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	1d1a      	adds	r2, r3, #4
 8013f04:	61fa      	str	r2, [r7, #28]
 8013f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f08:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	3301      	adds	r3, #1
 8013f0e:	607b      	str	r3, [r7, #4]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 8013f18:	e764      	b.n	8013de4 <ip4addr_aton+0x18>
    } else {
      break;
 8013f1a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8013f1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d019      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f28:	2b20      	cmp	r3, #32
 8013f2a:	d015      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f30:	2b0c      	cmp	r3, #12
 8013f32:	d011      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f34:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f38:	2b0a      	cmp	r3, #10
 8013f3a:	d00d      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f40:	2b0d      	cmp	r3, #13
 8013f42:	d009      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f48:	2b09      	cmp	r3, #9
 8013f4a:	d005      	beq.n	8013f58 <ip4addr_aton+0x18c>
 8013f4c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8013f50:	2b0b      	cmp	r3, #11
 8013f52:	d001      	beq.n	8013f58 <ip4addr_aton+0x18c>
    return 0;
 8013f54:	2300      	movs	r3, #0
 8013f56:	e06e      	b.n	8014036 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8013f58:	f107 030c 	add.w	r3, r7, #12
 8013f5c:	69fa      	ldr	r2, [r7, #28]
 8013f5e:	1ad3      	subs	r3, r2, r3
 8013f60:	109b      	asrs	r3, r3, #2
 8013f62:	3301      	adds	r3, #1
 8013f64:	2b04      	cmp	r3, #4
 8013f66:	d853      	bhi.n	8014010 <ip4addr_aton+0x244>
 8013f68:	a201      	add	r2, pc, #4	@ (adr r2, 8013f70 <ip4addr_aton+0x1a4>)
 8013f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f6e:	bf00      	nop
 8013f70:	08013f85 	.word	0x08013f85
 8013f74:	08014021 	.word	0x08014021
 8013f78:	08013f89 	.word	0x08013f89
 8013f7c:	08013fab 	.word	0x08013fab
 8013f80:	08013fd9 	.word	0x08013fd9

  case 0:
    return 0;       /* initial nondigit */
 8013f84:	2300      	movs	r3, #0
 8013f86:	e056      	b.n	8014036 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 8013f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013f8e:	d301      	bcc.n	8013f94 <ip4addr_aton+0x1c8>
      return 0;
 8013f90:	2300      	movs	r3, #0
 8013f92:	e050      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2bff      	cmp	r3, #255	@ 0xff
 8013f98:	d901      	bls.n	8013f9e <ip4addr_aton+0x1d2>
      return 0;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	e04b      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	061b      	lsls	r3, r3, #24
 8013fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fa4:	4313      	orrs	r3, r2
 8013fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8013fa8:	e03b      	b.n	8014022 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8013faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fb0:	d301      	bcc.n	8013fb6 <ip4addr_aton+0x1ea>
      return 0;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	e03f      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2bff      	cmp	r3, #255	@ 0xff
 8013fba:	d802      	bhi.n	8013fc2 <ip4addr_aton+0x1f6>
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	2bff      	cmp	r3, #255	@ 0xff
 8013fc0:	d901      	bls.n	8013fc6 <ip4addr_aton+0x1fa>
      return 0;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	e037      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	061a      	lsls	r2, r3, #24
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	041b      	lsls	r3, r3, #16
 8013fce:	4313      	orrs	r3, r2
 8013fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fd2:	4313      	orrs	r3, r2
 8013fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8013fd6:	e024      	b.n	8014022 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fda:	2bff      	cmp	r3, #255	@ 0xff
 8013fdc:	d901      	bls.n	8013fe2 <ip4addr_aton+0x216>
      return 0;
 8013fde:	2300      	movs	r3, #0
 8013fe0:	e029      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2bff      	cmp	r3, #255	@ 0xff
 8013fe6:	d805      	bhi.n	8013ff4 <ip4addr_aton+0x228>
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	2bff      	cmp	r3, #255	@ 0xff
 8013fec:	d802      	bhi.n	8013ff4 <ip4addr_aton+0x228>
 8013fee:	697b      	ldr	r3, [r7, #20]
 8013ff0:	2bff      	cmp	r3, #255	@ 0xff
 8013ff2:	d901      	bls.n	8013ff8 <ip4addr_aton+0x22c>
      return 0;
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	e01e      	b.n	8014036 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	061a      	lsls	r2, r3, #24
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	041b      	lsls	r3, r3, #16
 8014000:	431a      	orrs	r2, r3
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	021b      	lsls	r3, r3, #8
 8014006:	4313      	orrs	r3, r2
 8014008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801400a:	4313      	orrs	r3, r2
 801400c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 801400e:	e008      	b.n	8014022 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 8014010:	4b0b      	ldr	r3, [pc, #44]	@ (8014040 <ip4addr_aton+0x274>)
 8014012:	f240 1203 	movw	r2, #259	@ 0x103
 8014016:	490b      	ldr	r1, [pc, #44]	@ (8014044 <ip4addr_aton+0x278>)
 8014018:	480b      	ldr	r0, [pc, #44]	@ (8014048 <ip4addr_aton+0x27c>)
 801401a:	f003 f8bb 	bl	8017194 <iprintf>
    break;
 801401e:	e000      	b.n	8014022 <ip4addr_aton+0x256>
    break;
 8014020:	bf00      	nop
  }
  if (addr) {
 8014022:	683b      	ldr	r3, [r7, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d005      	beq.n	8014034 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8014028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801402a:	f7f6 fffa 	bl	800b022 <lwip_htonl>
 801402e:	4602      	mov	r2, r0
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8014034:	2301      	movs	r3, #1
}
 8014036:	4618      	mov	r0, r3
 8014038:	3728      	adds	r7, #40	@ 0x28
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
 801403e:	bf00      	nop
 8014040:	0801a7d0 	.word	0x0801a7d0
 8014044:	0801a80c 	.word	0x0801a80c
 8014048:	0801a818 	.word	0x0801a818

0801404c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b084      	sub	sp, #16
 8014050:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014052:	2300      	movs	r3, #0
 8014054:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014056:	4b12      	ldr	r3, [pc, #72]	@ (80140a0 <ip_reass_tmr+0x54>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801405c:	e018      	b.n	8014090 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	7fdb      	ldrb	r3, [r3, #31]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00b      	beq.n	801407e <ip_reass_tmr+0x32>
      r->timer--;
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	7fdb      	ldrb	r3, [r3, #31]
 801406a:	3b01      	subs	r3, #1
 801406c:	b2da      	uxtb	r2, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	60fb      	str	r3, [r7, #12]
 801407c:	e008      	b.n	8014090 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014088:	68b9      	ldr	r1, [r7, #8]
 801408a:	6878      	ldr	r0, [r7, #4]
 801408c:	f000 f80a 	bl	80140a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1e3      	bne.n	801405e <ip_reass_tmr+0x12>
     }
   }
}
 8014096:	bf00      	nop
 8014098:	bf00      	nop
 801409a:	3710      	adds	r7, #16
 801409c:	46bd      	mov	sp, r7
 801409e:	bd80      	pop	{r7, pc}
 80140a0:	200099c8 	.word	0x200099c8

080140a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b088      	sub	sp, #32
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80140ae:	2300      	movs	r3, #0
 80140b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80140b2:	683a      	ldr	r2, [r7, #0]
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d105      	bne.n	80140c6 <ip_reass_free_complete_datagram+0x22>
 80140ba:	4b45      	ldr	r3, [pc, #276]	@ (80141d0 <ip_reass_free_complete_datagram+0x12c>)
 80140bc:	22ab      	movs	r2, #171	@ 0xab
 80140be:	4945      	ldr	r1, [pc, #276]	@ (80141d4 <ip_reass_free_complete_datagram+0x130>)
 80140c0:	4845      	ldr	r0, [pc, #276]	@ (80141d8 <ip_reass_free_complete_datagram+0x134>)
 80140c2:	f003 f867 	bl	8017194 <iprintf>
  if (prev != NULL) {
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d00a      	beq.n	80140e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d005      	beq.n	80140e2 <ip_reass_free_complete_datagram+0x3e>
 80140d6:	4b3e      	ldr	r3, [pc, #248]	@ (80141d0 <ip_reass_free_complete_datagram+0x12c>)
 80140d8:	22ad      	movs	r2, #173	@ 0xad
 80140da:	4940      	ldr	r1, [pc, #256]	@ (80141dc <ip_reass_free_complete_datagram+0x138>)
 80140dc:	483e      	ldr	r0, [pc, #248]	@ (80141d8 <ip_reass_free_complete_datagram+0x134>)
 80140de:	f003 f859 	bl	8017194 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80140ea:	697b      	ldr	r3, [r7, #20]
 80140ec:	889b      	ldrh	r3, [r3, #4]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d12a      	bne.n	801414a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	685b      	ldr	r3, [r3, #4]
 80140f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	681a      	ldr	r2, [r3, #0]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	6858      	ldr	r0, [r3, #4]
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	3308      	adds	r3, #8
 801410a:	2214      	movs	r2, #20
 801410c:	4619      	mov	r1, r3
 801410e:	f003 fa86 	bl	801761e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014112:	2101      	movs	r1, #1
 8014114:	69b8      	ldr	r0, [r7, #24]
 8014116:	f7ff fb11 	bl	801373c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801411a:	69b8      	ldr	r0, [r7, #24]
 801411c:	f7f8 f9e4 	bl	800c4e8 <pbuf_clen>
 8014120:	4603      	mov	r3, r0
 8014122:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014124:	8bfa      	ldrh	r2, [r7, #30]
 8014126:	8a7b      	ldrh	r3, [r7, #18]
 8014128:	4413      	add	r3, r2
 801412a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801412e:	db05      	blt.n	801413c <ip_reass_free_complete_datagram+0x98>
 8014130:	4b27      	ldr	r3, [pc, #156]	@ (80141d0 <ip_reass_free_complete_datagram+0x12c>)
 8014132:	22bc      	movs	r2, #188	@ 0xbc
 8014134:	492a      	ldr	r1, [pc, #168]	@ (80141e0 <ip_reass_free_complete_datagram+0x13c>)
 8014136:	4828      	ldr	r0, [pc, #160]	@ (80141d8 <ip_reass_free_complete_datagram+0x134>)
 8014138:	f003 f82c 	bl	8017194 <iprintf>
    pbufs_freed += clen;
 801413c:	8bfa      	ldrh	r2, [r7, #30]
 801413e:	8a7b      	ldrh	r3, [r7, #18]
 8014140:	4413      	add	r3, r2
 8014142:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014144:	69b8      	ldr	r0, [r7, #24]
 8014146:	f7f8 f935 	bl	800c3b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014150:	e01f      	b.n	8014192 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f7f8 f9c0 	bl	800c4e8 <pbuf_clen>
 8014168:	4603      	mov	r3, r0
 801416a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801416c:	8bfa      	ldrh	r2, [r7, #30]
 801416e:	8a7b      	ldrh	r3, [r7, #18]
 8014170:	4413      	add	r3, r2
 8014172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014176:	db05      	blt.n	8014184 <ip_reass_free_complete_datagram+0xe0>
 8014178:	4b15      	ldr	r3, [pc, #84]	@ (80141d0 <ip_reass_free_complete_datagram+0x12c>)
 801417a:	22cc      	movs	r2, #204	@ 0xcc
 801417c:	4918      	ldr	r1, [pc, #96]	@ (80141e0 <ip_reass_free_complete_datagram+0x13c>)
 801417e:	4816      	ldr	r0, [pc, #88]	@ (80141d8 <ip_reass_free_complete_datagram+0x134>)
 8014180:	f003 f808 	bl	8017194 <iprintf>
    pbufs_freed += clen;
 8014184:	8bfa      	ldrh	r2, [r7, #30]
 8014186:	8a7b      	ldrh	r3, [r7, #18]
 8014188:	4413      	add	r3, r2
 801418a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f7f8 f911 	bl	800c3b4 <pbuf_free>
  while (p != NULL) {
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1dc      	bne.n	8014152 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014198:	6839      	ldr	r1, [r7, #0]
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f000 f8c2 	bl	8014324 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80141a0:	4b10      	ldr	r3, [pc, #64]	@ (80141e4 <ip_reass_free_complete_datagram+0x140>)
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	8bfa      	ldrh	r2, [r7, #30]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d905      	bls.n	80141b6 <ip_reass_free_complete_datagram+0x112>
 80141aa:	4b09      	ldr	r3, [pc, #36]	@ (80141d0 <ip_reass_free_complete_datagram+0x12c>)
 80141ac:	22d2      	movs	r2, #210	@ 0xd2
 80141ae:	490e      	ldr	r1, [pc, #56]	@ (80141e8 <ip_reass_free_complete_datagram+0x144>)
 80141b0:	4809      	ldr	r0, [pc, #36]	@ (80141d8 <ip_reass_free_complete_datagram+0x134>)
 80141b2:	f002 ffef 	bl	8017194 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80141b6:	4b0b      	ldr	r3, [pc, #44]	@ (80141e4 <ip_reass_free_complete_datagram+0x140>)
 80141b8:	881a      	ldrh	r2, [r3, #0]
 80141ba:	8bfb      	ldrh	r3, [r7, #30]
 80141bc:	1ad3      	subs	r3, r2, r3
 80141be:	b29a      	uxth	r2, r3
 80141c0:	4b08      	ldr	r3, [pc, #32]	@ (80141e4 <ip_reass_free_complete_datagram+0x140>)
 80141c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80141c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3720      	adds	r7, #32
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
 80141ce:	bf00      	nop
 80141d0:	0801a840 	.word	0x0801a840
 80141d4:	0801a87c 	.word	0x0801a87c
 80141d8:	0801a888 	.word	0x0801a888
 80141dc:	0801a8b0 	.word	0x0801a8b0
 80141e0:	0801a8c4 	.word	0x0801a8c4
 80141e4:	200099cc 	.word	0x200099cc
 80141e8:	0801a8e4 	.word	0x0801a8e4

080141ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b08a      	sub	sp, #40	@ 0x28
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
 80141f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80141f6:	2300      	movs	r3, #0
 80141f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80141fe:	2300      	movs	r3, #0
 8014200:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014202:	2300      	movs	r3, #0
 8014204:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801420a:	4b28      	ldr	r3, [pc, #160]	@ (80142ac <ip_reass_remove_oldest_datagram+0xc0>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014210:	e030      	b.n	8014274 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014214:	695a      	ldr	r2, [r3, #20]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	68db      	ldr	r3, [r3, #12]
 801421a:	429a      	cmp	r2, r3
 801421c:	d10c      	bne.n	8014238 <ip_reass_remove_oldest_datagram+0x4c>
 801421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014220:	699a      	ldr	r2, [r3, #24]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	429a      	cmp	r2, r3
 8014228:	d106      	bne.n	8014238 <ip_reass_remove_oldest_datagram+0x4c>
 801422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801422c:	899a      	ldrh	r2, [r3, #12]
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	889b      	ldrh	r3, [r3, #4]
 8014232:	b29b      	uxth	r3, r3
 8014234:	429a      	cmp	r2, r3
 8014236:	d014      	beq.n	8014262 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	3301      	adds	r3, #1
 801423c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801423e:	6a3b      	ldr	r3, [r7, #32]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d104      	bne.n	801424e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014246:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014248:	69fb      	ldr	r3, [r7, #28]
 801424a:	61bb      	str	r3, [r7, #24]
 801424c:	e009      	b.n	8014262 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014250:	7fda      	ldrb	r2, [r3, #31]
 8014252:	6a3b      	ldr	r3, [r7, #32]
 8014254:	7fdb      	ldrb	r3, [r3, #31]
 8014256:	429a      	cmp	r2, r3
 8014258:	d803      	bhi.n	8014262 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801425c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801425e:	69fb      	ldr	r3, [r7, #28]
 8014260:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d001      	beq.n	801426e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801426c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014276:	2b00      	cmp	r3, #0
 8014278:	d1cb      	bne.n	8014212 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801427a:	6a3b      	ldr	r3, [r7, #32]
 801427c:	2b00      	cmp	r3, #0
 801427e:	d008      	beq.n	8014292 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014280:	69b9      	ldr	r1, [r7, #24]
 8014282:	6a38      	ldr	r0, [r7, #32]
 8014284:	f7ff ff0e 	bl	80140a4 <ip_reass_free_complete_datagram>
 8014288:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801428a:	697a      	ldr	r2, [r7, #20]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	4413      	add	r3, r2
 8014290:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014292:	697a      	ldr	r2, [r7, #20]
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	429a      	cmp	r2, r3
 8014298:	da02      	bge.n	80142a0 <ip_reass_remove_oldest_datagram+0xb4>
 801429a:	693b      	ldr	r3, [r7, #16]
 801429c:	2b01      	cmp	r3, #1
 801429e:	dcac      	bgt.n	80141fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80142a0:	697b      	ldr	r3, [r7, #20]
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3728      	adds	r7, #40	@ 0x28
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	200099c8 	.word	0x200099c8

080142b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80142ba:	2004      	movs	r0, #4
 80142bc:	f7f7 fa90 	bl	800b7e0 <memp_malloc>
 80142c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d110      	bne.n	80142ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80142c8:	6839      	ldr	r1, [r7, #0]
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f7ff ff8e 	bl	80141ec <ip_reass_remove_oldest_datagram>
 80142d0:	4602      	mov	r2, r0
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	4293      	cmp	r3, r2
 80142d6:	dc03      	bgt.n	80142e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80142d8:	2004      	movs	r0, #4
 80142da:	f7f7 fa81 	bl	800b7e0 <memp_malloc>
 80142de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d101      	bne.n	80142ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 80142e6:	2300      	movs	r3, #0
 80142e8:	e016      	b.n	8014318 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80142ea:	2220      	movs	r2, #32
 80142ec:	2100      	movs	r1, #0
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f003 f8a8 	bl	8017444 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2203      	movs	r2, #3
 80142f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80142fa:	4b09      	ldr	r3, [pc, #36]	@ (8014320 <ip_reass_enqueue_new_datagram+0x70>)
 80142fc:	681a      	ldr	r2, [r3, #0]
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014302:	4a07      	ldr	r2, [pc, #28]	@ (8014320 <ip_reass_enqueue_new_datagram+0x70>)
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	3308      	adds	r3, #8
 801430c:	2214      	movs	r2, #20
 801430e:	6879      	ldr	r1, [r7, #4]
 8014310:	4618      	mov	r0, r3
 8014312:	f003 f984 	bl	801761e <memcpy>
  return ipr;
 8014316:	68fb      	ldr	r3, [r7, #12]
}
 8014318:	4618      	mov	r0, r3
 801431a:	3710      	adds	r7, #16
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}
 8014320:	200099c8 	.word	0x200099c8

08014324 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014324:	b580      	push	{r7, lr}
 8014326:	b082      	sub	sp, #8
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801432e:	4b10      	ldr	r3, [pc, #64]	@ (8014370 <ip_reass_dequeue_datagram+0x4c>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	429a      	cmp	r2, r3
 8014336:	d104      	bne.n	8014342 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4a0c      	ldr	r2, [pc, #48]	@ (8014370 <ip_reass_dequeue_datagram+0x4c>)
 801433e:	6013      	str	r3, [r2, #0]
 8014340:	e00d      	b.n	801435e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014342:	683b      	ldr	r3, [r7, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d106      	bne.n	8014356 <ip_reass_dequeue_datagram+0x32>
 8014348:	4b0a      	ldr	r3, [pc, #40]	@ (8014374 <ip_reass_dequeue_datagram+0x50>)
 801434a:	f240 1245 	movw	r2, #325	@ 0x145
 801434e:	490a      	ldr	r1, [pc, #40]	@ (8014378 <ip_reass_dequeue_datagram+0x54>)
 8014350:	480a      	ldr	r0, [pc, #40]	@ (801437c <ip_reass_dequeue_datagram+0x58>)
 8014352:	f002 ff1f 	bl	8017194 <iprintf>
    prev->next = ipr->next;
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	681a      	ldr	r2, [r3, #0]
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801435e:	6879      	ldr	r1, [r7, #4]
 8014360:	2004      	movs	r0, #4
 8014362:	f7f7 fa8f 	bl	800b884 <memp_free>
}
 8014366:	bf00      	nop
 8014368:	3708      	adds	r7, #8
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}
 801436e:	bf00      	nop
 8014370:	200099c8 	.word	0x200099c8
 8014374:	0801a840 	.word	0x0801a840
 8014378:	0801a900 	.word	0x0801a900
 801437c:	0801a888 	.word	0x0801a888

08014380 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b08c      	sub	sp, #48	@ 0x30
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	60b9      	str	r1, [r7, #8]
 801438a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801438c:	2300      	movs	r3, #0
 801438e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014390:	2301      	movs	r3, #1
 8014392:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	685b      	ldr	r3, [r3, #4]
 8014398:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	885b      	ldrh	r3, [r3, #2]
 801439e:	b29b      	uxth	r3, r3
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f6 fe31 	bl	800b008 <lwip_htons>
 80143a6:	4603      	mov	r3, r0
 80143a8:	461a      	mov	r2, r3
 80143aa:	69fb      	ldr	r3, [r7, #28]
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	f003 030f 	and.w	r3, r3, #15
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	b29b      	uxth	r3, r3
 80143b8:	1ad3      	subs	r3, r2, r3
 80143ba:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	88db      	ldrh	r3, [r3, #6]
 80143c0:	b29b      	uxth	r3, r3
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7f6 fe20 	bl	800b008 <lwip_htons>
 80143c8:	4603      	mov	r3, r0
 80143ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	00db      	lsls	r3, r3, #3
 80143d2:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80143da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143dc:	2200      	movs	r2, #0
 80143de:	701a      	strb	r2, [r3, #0]
 80143e0:	2200      	movs	r2, #0
 80143e2:	705a      	strb	r2, [r3, #1]
 80143e4:	2200      	movs	r2, #0
 80143e6:	709a      	strb	r2, [r3, #2]
 80143e8:	2200      	movs	r2, #0
 80143ea:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80143ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ee:	8b3a      	ldrh	r2, [r7, #24]
 80143f0:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80143f2:	8b3a      	ldrh	r2, [r7, #24]
 80143f4:	8b7b      	ldrh	r3, [r7, #26]
 80143f6:	4413      	add	r3, r2
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143fc:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	627b      	str	r3, [r7, #36]	@ 0x24
 8014404:	e061      	b.n	80144ca <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8014406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801440c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801440e:	889b      	ldrh	r3, [r3, #4]
 8014410:	b29a      	uxth	r2, r3
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	889b      	ldrh	r3, [r3, #4]
 8014416:	b29b      	uxth	r3, r3
 8014418:	429a      	cmp	r2, r3
 801441a:	d232      	bcs.n	8014482 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801441c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801441e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014420:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014424:	2b00      	cmp	r3, #0
 8014426:	d01f      	beq.n	8014468 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801442a:	889b      	ldrh	r3, [r3, #4]
 801442c:	b29a      	uxth	r2, r3
 801442e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014430:	88db      	ldrh	r3, [r3, #6]
 8014432:	b29b      	uxth	r3, r3
 8014434:	429a      	cmp	r2, r3
 8014436:	f0c0 80e3 	bcc.w	8014600 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 801443a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443c:	88db      	ldrh	r3, [r3, #6]
 801443e:	b29a      	uxth	r2, r3
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	889b      	ldrh	r3, [r3, #4]
 8014444:	b29b      	uxth	r3, r3
 8014446:	429a      	cmp	r2, r3
 8014448:	f200 80da 	bhi.w	8014600 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801444e:	68ba      	ldr	r2, [r7, #8]
 8014450:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014454:	88db      	ldrh	r3, [r3, #6]
 8014456:	b29a      	uxth	r2, r3
 8014458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801445a:	889b      	ldrh	r3, [r3, #4]
 801445c:	b29b      	uxth	r3, r3
 801445e:	429a      	cmp	r2, r3
 8014460:	d037      	beq.n	80144d2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014462:	2300      	movs	r3, #0
 8014464:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014466:	e034      	b.n	80144d2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8014468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446a:	88db      	ldrh	r3, [r3, #6]
 801446c:	b29a      	uxth	r2, r3
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	889b      	ldrh	r3, [r3, #4]
 8014472:	b29b      	uxth	r3, r3
 8014474:	429a      	cmp	r2, r3
 8014476:	f200 80c5 	bhi.w	8014604 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	605a      	str	r2, [r3, #4]
      break;
 8014480:	e027      	b.n	80144d2 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8014482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014484:	889b      	ldrh	r3, [r3, #4]
 8014486:	b29a      	uxth	r2, r3
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	889b      	ldrh	r3, [r3, #4]
 801448c:	b29b      	uxth	r3, r3
 801448e:	429a      	cmp	r2, r3
 8014490:	f000 80ba 	beq.w	8014608 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014496:	889b      	ldrh	r3, [r3, #4]
 8014498:	b29a      	uxth	r2, r3
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	88db      	ldrh	r3, [r3, #6]
 801449e:	b29b      	uxth	r3, r3
 80144a0:	429a      	cmp	r2, r3
 80144a2:	f0c0 80b3 	bcc.w	801460c <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80144a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d009      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 80144ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ae:	88db      	ldrh	r3, [r3, #6]
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	889b      	ldrh	r3, [r3, #4]
 80144b6:	b29b      	uxth	r3, r3
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d001      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80144bc:	2300      	movs	r3, #0
 80144be:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80144c0:	697b      	ldr	r3, [r7, #20]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80144ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d19a      	bne.n	8014406 <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 80144d0:	e000      	b.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 80144d2:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80144d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d12d      	bne.n	8014536 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 80144da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d01c      	beq.n	801451a <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80144e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144e2:	88db      	ldrh	r3, [r3, #6]
 80144e4:	b29a      	uxth	r2, r3
 80144e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e8:	889b      	ldrh	r3, [r3, #4]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d906      	bls.n	80144fe <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 80144f0:	4b51      	ldr	r3, [pc, #324]	@ (8014638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80144f2:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80144f6:	4951      	ldr	r1, [pc, #324]	@ (801463c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144f8:	4851      	ldr	r0, [pc, #324]	@ (8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80144fa:	f002 fe4b 	bl	8017194 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80144fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014500:	68ba      	ldr	r2, [r7, #8]
 8014502:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014506:	88db      	ldrh	r3, [r3, #6]
 8014508:	b29a      	uxth	r2, r3
 801450a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801450c:	889b      	ldrh	r3, [r3, #4]
 801450e:	b29b      	uxth	r3, r3
 8014510:	429a      	cmp	r2, r3
 8014512:	d010      	beq.n	8014536 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8014514:	2300      	movs	r3, #0
 8014516:	623b      	str	r3, [r7, #32]
 8014518:	e00d      	b.n	8014536 <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d006      	beq.n	8014530 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8014522:	4b45      	ldr	r3, [pc, #276]	@ (8014638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8014524:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8014528:	4946      	ldr	r1, [pc, #280]	@ (8014644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801452a:	4845      	ldr	r0, [pc, #276]	@ (8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801452c:	f002 fe32 	bl	8017194 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	68ba      	ldr	r2, [r7, #8]
 8014534:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d105      	bne.n	8014548 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	7f9b      	ldrb	r3, [r3, #30]
 8014540:	f003 0301 	and.w	r3, r3, #1
 8014544:	2b00      	cmp	r3, #0
 8014546:	d059      	beq.n	80145fc <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8014548:	6a3b      	ldr	r3, [r7, #32]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d04f      	beq.n	80145ee <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d006      	beq.n	8014564 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	889b      	ldrh	r3, [r3, #4]
 801455e:	b29b      	uxth	r3, r3
 8014560:	2b00      	cmp	r3, #0
 8014562:	d002      	beq.n	801456a <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	623b      	str	r3, [r7, #32]
 8014568:	e041      	b.n	80145ee <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801456a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801456c:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801456e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014574:	e012      	b.n	801459c <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8014576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801457c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457e:	88db      	ldrh	r3, [r3, #6]
 8014580:	b29a      	uxth	r2, r3
 8014582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014584:	889b      	ldrh	r3, [r3, #4]
 8014586:	b29b      	uxth	r3, r3
 8014588:	429a      	cmp	r2, r3
 801458a:	d002      	beq.n	8014592 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 801458c:	2300      	movs	r3, #0
 801458e:	623b      	str	r3, [r7, #32]
            break;
 8014590:	e007      	b.n	80145a2 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8014592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014594:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d1e9      	bne.n	8014576 <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80145a2:	6a3b      	ldr	r3, [r7, #32]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d022      	beq.n	80145ee <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	685b      	ldr	r3, [r3, #4]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d106      	bne.n	80145be <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 80145b0:	4b21      	ldr	r3, [pc, #132]	@ (8014638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80145b2:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 80145b6:	4924      	ldr	r1, [pc, #144]	@ (8014648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80145b8:	4821      	ldr	r0, [pc, #132]	@ (8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80145ba:	f002 fdeb 	bl	8017194 <iprintf>
          LWIP_ASSERT("sanity check",
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	685b      	ldr	r3, [r3, #4]
 80145c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d106      	bne.n	80145d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 80145ca:	4b1b      	ldr	r3, [pc, #108]	@ (8014638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80145cc:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80145d0:	491d      	ldr	r1, [pc, #116]	@ (8014648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80145d2:	481b      	ldr	r0, [pc, #108]	@ (8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80145d4:	f002 fdde 	bl	8017194 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80145d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d006      	beq.n	80145ee <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 80145e0:	4b15      	ldr	r3, [pc, #84]	@ (8014638 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80145e2:	f240 12d7 	movw	r2, #471	@ 0x1d7
 80145e6:	4919      	ldr	r1, [pc, #100]	@ (801464c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80145e8:	4815      	ldr	r0, [pc, #84]	@ (8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80145ea:	f002 fdd3 	bl	8017194 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80145ee:	6a3b      	ldr	r3, [r7, #32]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	bf14      	ite	ne
 80145f4:	2301      	movne	r3, #1
 80145f6:	2300      	moveq	r3, #0
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	e018      	b.n	801462e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80145fc:	2300      	movs	r3, #0
 80145fe:	e016      	b.n	801462e <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8014600:	bf00      	nop
 8014602:	e004      	b.n	801460e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8014604:	bf00      	nop
 8014606:	e002      	b.n	801460e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8014608:	bf00      	nop
 801460a:	e000      	b.n	801460e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 801460c:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 801460e:	68b8      	ldr	r0, [r7, #8]
 8014610:	f7f7 ff6a 	bl	800c4e8 <pbuf_clen>
 8014614:	4603      	mov	r3, r0
 8014616:	461a      	mov	r2, r3
 8014618:	4b0d      	ldr	r3, [pc, #52]	@ (8014650 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801461a:	881b      	ldrh	r3, [r3, #0]
 801461c:	1a9b      	subs	r3, r3, r2
 801461e:	b29a      	uxth	r2, r3
 8014620:	4b0b      	ldr	r3, [pc, #44]	@ (8014650 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014622:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8014624:	68b8      	ldr	r0, [r7, #8]
 8014626:	f7f7 fec5 	bl	800c3b4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 801462a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 801462e:	4618      	mov	r0, r3
 8014630:	3730      	adds	r7, #48	@ 0x30
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	0801a840 	.word	0x0801a840
 801463c:	0801a91c 	.word	0x0801a91c
 8014640:	0801a888 	.word	0x0801a888
 8014644:	0801a93c 	.word	0x0801a93c
 8014648:	0801a974 	.word	0x0801a974
 801464c:	0801a984 	.word	0x0801a984
 8014650:	200099cc 	.word	0x200099cc

08014654 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b08e      	sub	sp, #56	@ 0x38
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8014662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	f003 030f 	and.w	r3, r3, #15
 801466a:	2b05      	cmp	r3, #5
 801466c:	f040 8130 	bne.w	80148d0 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8014670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014672:	88db      	ldrh	r3, [r3, #6]
 8014674:	b29b      	uxth	r3, r3
 8014676:	4618      	mov	r0, r3
 8014678:	f7f6 fcc6 	bl	800b008 <lwip_htons>
 801467c:	4603      	mov	r3, r0
 801467e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014682:	b29b      	uxth	r3, r3
 8014684:	00db      	lsls	r3, r3, #3
 8014686:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8014688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801468a:	885b      	ldrh	r3, [r3, #2]
 801468c:	b29b      	uxth	r3, r3
 801468e:	4618      	mov	r0, r3
 8014690:	f7f6 fcba 	bl	800b008 <lwip_htons>
 8014694:	4603      	mov	r3, r0
 8014696:	461a      	mov	r2, r3
 8014698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	f003 030f 	and.w	r3, r3, #15
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	1ad3      	subs	r3, r2, r3
 80146a8:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7f7 ff1c 	bl	800c4e8 <pbuf_clen>
 80146b0:	4603      	mov	r3, r0
 80146b2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80146b4:	4b8e      	ldr	r3, [pc, #568]	@ (80148f0 <ip4_reass+0x29c>)
 80146b6:	881b      	ldrh	r3, [r3, #0]
 80146b8:	461a      	mov	r2, r3
 80146ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146bc:	4413      	add	r3, r2
 80146be:	2b0a      	cmp	r3, #10
 80146c0:	dd10      	ble.n	80146e4 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80146c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146c4:	4619      	mov	r1, r3
 80146c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146c8:	f7ff fd90 	bl	80141ec <ip_reass_remove_oldest_datagram>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f000 8100 	beq.w	80148d4 <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80146d4:	4b86      	ldr	r3, [pc, #536]	@ (80148f0 <ip4_reass+0x29c>)
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	461a      	mov	r2, r3
 80146da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80146dc:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80146de:	2b0a      	cmp	r3, #10
 80146e0:	f300 80f8 	bgt.w	80148d4 <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80146e4:	4b83      	ldr	r3, [pc, #524]	@ (80148f4 <ip4_reass+0x2a0>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80146ea:	e015      	b.n	8014718 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80146ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146ee:	695a      	ldr	r2, [r3, #20]
 80146f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d10c      	bne.n	8014712 <ip4_reass+0xbe>
 80146f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146fa:	699a      	ldr	r2, [r3, #24]
 80146fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	429a      	cmp	r2, r3
 8014702:	d106      	bne.n	8014712 <ip4_reass+0xbe>
 8014704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014706:	899a      	ldrh	r2, [r3, #12]
 8014708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801470a:	889b      	ldrh	r3, [r3, #4]
 801470c:	b29b      	uxth	r3, r3
 801470e:	429a      	cmp	r2, r3
 8014710:	d006      	beq.n	8014720 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	633b      	str	r3, [r7, #48]	@ 0x30
 8014718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801471a:	2b00      	cmp	r3, #0
 801471c:	d1e6      	bne.n	80146ec <ip4_reass+0x98>
 801471e:	e000      	b.n	8014722 <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014720:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014724:	2b00      	cmp	r3, #0
 8014726:	d109      	bne.n	801473c <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014728:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801472a:	4619      	mov	r1, r3
 801472c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801472e:	f7ff fdbf 	bl	80142b0 <ip_reass_enqueue_new_datagram>
 8014732:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014736:	2b00      	cmp	r3, #0
 8014738:	d11c      	bne.n	8014774 <ip4_reass+0x120>
      goto nullreturn;
 801473a:	e0d0      	b.n	80148de <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801473e:	88db      	ldrh	r3, [r3, #6]
 8014740:	b29b      	uxth	r3, r3
 8014742:	4618      	mov	r0, r3
 8014744:	f7f6 fc60 	bl	800b008 <lwip_htons>
 8014748:	4603      	mov	r3, r0
 801474a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801474e:	2b00      	cmp	r3, #0
 8014750:	d110      	bne.n	8014774 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014754:	89db      	ldrh	r3, [r3, #14]
 8014756:	4618      	mov	r0, r3
 8014758:	f7f6 fc56 	bl	800b008 <lwip_htons>
 801475c:	4603      	mov	r3, r0
 801475e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014762:	2b00      	cmp	r3, #0
 8014764:	d006      	beq.n	8014774 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014768:	3308      	adds	r3, #8
 801476a:	2214      	movs	r2, #20
 801476c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801476e:	4618      	mov	r0, r3
 8014770:	f002 ff55 	bl	801761e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014776:	88db      	ldrh	r3, [r3, #6]
 8014778:	b29b      	uxth	r3, r3
 801477a:	f003 0320 	and.w	r3, r3, #32
 801477e:	2b00      	cmp	r3, #0
 8014780:	bf0c      	ite	eq
 8014782:	2301      	moveq	r3, #1
 8014784:	2300      	movne	r3, #0
 8014786:	b2db      	uxtb	r3, r3
 8014788:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d00e      	beq.n	80147ae <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 8014790:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014792:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014794:	4413      	add	r3, r2
 8014796:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014798:	8b7a      	ldrh	r2, [r7, #26]
 801479a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801479c:	429a      	cmp	r2, r3
 801479e:	f0c0 809b 	bcc.w	80148d8 <ip4_reass+0x284>
 80147a2:	8b7b      	ldrh	r3, [r7, #26]
 80147a4:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80147a8:	4293      	cmp	r3, r2
 80147aa:	f200 8095 	bhi.w	80148d8 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80147ae:	69fa      	ldr	r2, [r7, #28]
 80147b0:	6879      	ldr	r1, [r7, #4]
 80147b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80147b4:	f7ff fde4 	bl	8014380 <ip_reass_chain_frag_into_datagram_and_validate>
 80147b8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147c0:	f000 808c 	beq.w	80148dc <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80147c4:	4b4a      	ldr	r3, [pc, #296]	@ (80148f0 <ip4_reass+0x29c>)
 80147c6:	881a      	ldrh	r2, [r3, #0]
 80147c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147ca:	4413      	add	r3, r2
 80147cc:	b29a      	uxth	r2, r3
 80147ce:	4b48      	ldr	r3, [pc, #288]	@ (80148f0 <ip4_reass+0x29c>)
 80147d0:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d00d      	beq.n	80147f4 <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 80147d8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80147da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80147dc:	4413      	add	r3, r2
 80147de:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80147e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147e2:	8a7a      	ldrh	r2, [r7, #18]
 80147e4:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80147e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147e8:	7f9b      	ldrb	r3, [r3, #30]
 80147ea:	f043 0301 	orr.w	r3, r3, #1
 80147ee:	b2da      	uxtb	r2, r3
 80147f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f2:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	2b01      	cmp	r3, #1
 80147f8:	d168      	bne.n	80148cc <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80147fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147fc:	8b9b      	ldrh	r3, [r3, #28]
 80147fe:	3314      	adds	r3, #20
 8014800:	b29a      	uxth	r2, r3
 8014802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014804:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8014806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8014810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801481a:	3308      	adds	r3, #8
 801481c:	2214      	movs	r2, #20
 801481e:	4619      	mov	r1, r3
 8014820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014822:	f002 fefc 	bl	801761e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8014826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014828:	8b9b      	ldrh	r3, [r3, #28]
 801482a:	4618      	mov	r0, r3
 801482c:	f7f6 fbec 	bl	800b008 <lwip_htons>
 8014830:	4603      	mov	r3, r0
 8014832:	461a      	mov	r2, r3
 8014834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014836:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801483a:	2200      	movs	r2, #0
 801483c:	719a      	strb	r2, [r3, #6]
 801483e:	2200      	movs	r2, #0
 8014840:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014844:	2200      	movs	r2, #0
 8014846:	729a      	strb	r2, [r3, #10]
 8014848:	2200      	movs	r2, #0
 801484a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801484e:	685b      	ldr	r3, [r3, #4]
 8014850:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014852:	e00e      	b.n	8014872 <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 8014854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 801485a:	f06f 0113 	mvn.w	r1, #19
 801485e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014860:	f7f7 fd84 	bl	800c36c <pbuf_header>
      pbuf_cat(p, r);
 8014864:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f7f7 fe7c 	bl	800c564 <pbuf_cat>
      r = iprh->next_pbuf;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1ed      	bne.n	8014854 <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014878:	4b1e      	ldr	r3, [pc, #120]	@ (80148f4 <ip4_reass+0x2a0>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801487e:	429a      	cmp	r2, r3
 8014880:	d102      	bne.n	8014888 <ip4_reass+0x234>
      ipr_prev = NULL;
 8014882:	2300      	movs	r3, #0
 8014884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014886:	e010      	b.n	80148aa <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014888:	4b1a      	ldr	r3, [pc, #104]	@ (80148f4 <ip4_reass+0x2a0>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801488e:	e007      	b.n	80148a0 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 8014890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014896:	429a      	cmp	r2, r3
 8014898:	d006      	beq.n	80148a8 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801489a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d1f4      	bne.n	8014890 <ip4_reass+0x23c>
 80148a6:	e000      	b.n	80148aa <ip4_reass+0x256>
          break;
 80148a8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80148aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80148ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80148ae:	f7ff fd39 	bl	8014324 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f7f7 fe18 	bl	800c4e8 <pbuf_clen>
 80148b8:	4603      	mov	r3, r0
 80148ba:	461a      	mov	r2, r3
 80148bc:	4b0c      	ldr	r3, [pc, #48]	@ (80148f0 <ip4_reass+0x29c>)
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	1a9b      	subs	r3, r3, r2
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	4b0a      	ldr	r3, [pc, #40]	@ (80148f0 <ip4_reass+0x29c>)
 80148c6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	e00c      	b.n	80148e6 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80148cc:	2300      	movs	r3, #0
 80148ce:	e00a      	b.n	80148e6 <ip4_reass+0x292>
    goto nullreturn;
 80148d0:	bf00      	nop
 80148d2:	e004      	b.n	80148de <ip4_reass+0x28a>
      goto nullreturn;
 80148d4:	bf00      	nop
 80148d6:	e002      	b.n	80148de <ip4_reass+0x28a>
      goto nullreturn;
 80148d8:	bf00      	nop
 80148da:	e000      	b.n	80148de <ip4_reass+0x28a>
    goto nullreturn;
 80148dc:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f7f7 fd68 	bl	800c3b4 <pbuf_free>
  return NULL;
 80148e4:	2300      	movs	r3, #0
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3738      	adds	r7, #56	@ 0x38
 80148ea:	46bd      	mov	sp, r7
 80148ec:	bd80      	pop	{r7, pc}
 80148ee:	bf00      	nop
 80148f0:	200099cc 	.word	0x200099cc
 80148f4:	200099c8 	.word	0x200099c8

080148f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80148fc:	2005      	movs	r0, #5
 80148fe:	f7f6 ff6f 	bl	800b7e0 <memp_malloc>
 8014902:	4603      	mov	r3, r0
}
 8014904:	4618      	mov	r0, r3
 8014906:	bd80      	pop	{r7, pc}

08014908 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d106      	bne.n	8014924 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014916:	4b07      	ldr	r3, [pc, #28]	@ (8014934 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014918:	f240 22ae 	movw	r2, #686	@ 0x2ae
 801491c:	4906      	ldr	r1, [pc, #24]	@ (8014938 <ip_frag_free_pbuf_custom_ref+0x30>)
 801491e:	4807      	ldr	r0, [pc, #28]	@ (801493c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014920:	f002 fc38 	bl	8017194 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014924:	6879      	ldr	r1, [r7, #4]
 8014926:	2005      	movs	r0, #5
 8014928:	f7f6 ffac 	bl	800b884 <memp_free>
}
 801492c:	bf00      	nop
 801492e:	3708      	adds	r7, #8
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	0801a840 	.word	0x0801a840
 8014938:	0801a9a8 	.word	0x0801a9a8
 801493c:	0801a888 	.word	0x0801a888

08014940 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b084      	sub	sp, #16
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <ipfrag_free_pbuf_custom+0x20>
 8014952:	4b11      	ldr	r3, [pc, #68]	@ (8014998 <ipfrag_free_pbuf_custom+0x58>)
 8014954:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8014958:	4910      	ldr	r1, [pc, #64]	@ (801499c <ipfrag_free_pbuf_custom+0x5c>)
 801495a:	4811      	ldr	r0, [pc, #68]	@ (80149a0 <ipfrag_free_pbuf_custom+0x60>)
 801495c:	f002 fc1a 	bl	8017194 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8014960:	68fa      	ldr	r2, [r7, #12]
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	429a      	cmp	r2, r3
 8014966:	d006      	beq.n	8014976 <ipfrag_free_pbuf_custom+0x36>
 8014968:	4b0b      	ldr	r3, [pc, #44]	@ (8014998 <ipfrag_free_pbuf_custom+0x58>)
 801496a:	f240 22b9 	movw	r2, #697	@ 0x2b9
 801496e:	490d      	ldr	r1, [pc, #52]	@ (80149a4 <ipfrag_free_pbuf_custom+0x64>)
 8014970:	480b      	ldr	r0, [pc, #44]	@ (80149a0 <ipfrag_free_pbuf_custom+0x60>)
 8014972:	f002 fc0f 	bl	8017194 <iprintf>
  if (pcr->original != NULL) {
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	695b      	ldr	r3, [r3, #20]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d004      	beq.n	8014988 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	695b      	ldr	r3, [r3, #20]
 8014982:	4618      	mov	r0, r3
 8014984:	f7f7 fd16 	bl	800c3b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014988:	68f8      	ldr	r0, [r7, #12]
 801498a:	f7ff ffbd 	bl	8014908 <ip_frag_free_pbuf_custom_ref>
}
 801498e:	bf00      	nop
 8014990:	3710      	adds	r7, #16
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	0801a840 	.word	0x0801a840
 801499c:	0801a9b4 	.word	0x0801a9b4
 80149a0:	0801a888 	.word	0x0801a888
 80149a4:	0801a9c0 	.word	0x0801a9c0

080149a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b092      	sub	sp, #72	@ 0x48
 80149ac:	af02      	add	r7, sp, #8
 80149ae:	60f8      	str	r0, [r7, #12]
 80149b0:	60b9      	str	r1, [r7, #8]
 80149b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80149b4:	2300      	movs	r3, #0
 80149b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80149bc:	3b14      	subs	r3, #20
 80149be:	2b00      	cmp	r3, #0
 80149c0:	da00      	bge.n	80149c4 <ip4_frag+0x1c>
 80149c2:	3307      	adds	r3, #7
 80149c4:	10db      	asrs	r3, r3, #3
 80149c6:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80149c8:	2314      	movs	r3, #20
 80149ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	685b      	ldr	r3, [r3, #4]
 80149d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 80149d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80149d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	f003 030f 	and.w	r3, r3, #15
 80149de:	2b05      	cmp	r3, #5
 80149e0:	d009      	beq.n	80149f6 <ip4_frag+0x4e>
 80149e2:	4b7a      	ldr	r3, [pc, #488]	@ (8014bcc <ip4_frag+0x224>)
 80149e4:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80149e8:	4979      	ldr	r1, [pc, #484]	@ (8014bd0 <ip4_frag+0x228>)
 80149ea:	487a      	ldr	r0, [pc, #488]	@ (8014bd4 <ip4_frag+0x22c>)
 80149ec:	f002 fbd2 	bl	8017194 <iprintf>
 80149f0:	f06f 0305 	mvn.w	r3, #5
 80149f4:	e0e6      	b.n	8014bc4 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80149f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149f8:	88db      	ldrh	r3, [r3, #6]
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7f6 fb03 	bl	800b008 <lwip_htons>
 8014a02:	4603      	mov	r3, r0
 8014a04:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 8014a06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a0c:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8014a0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014a10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d009      	beq.n	8014a2c <ip4_frag+0x84>
 8014a18:	4b6c      	ldr	r3, [pc, #432]	@ (8014bcc <ip4_frag+0x224>)
 8014a1a:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8014a1e:	496e      	ldr	r1, [pc, #440]	@ (8014bd8 <ip4_frag+0x230>)
 8014a20:	486c      	ldr	r0, [pc, #432]	@ (8014bd4 <ip4_frag+0x22c>)
 8014a22:	f002 fbb7 	bl	8017194 <iprintf>
 8014a26:	f06f 0305 	mvn.w	r3, #5
 8014a2a:	e0cb      	b.n	8014bc4 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	891b      	ldrh	r3, [r3, #8]
 8014a30:	3b14      	subs	r3, #20
 8014a32:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 8014a34:	e0bd      	b.n	8014bb2 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8014a36:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014a38:	00da      	lsls	r2, r3, #3
 8014a3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	bfa8      	it	ge
 8014a40:	4613      	movge	r3, r2
 8014a42:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014a44:	2200      	movs	r2, #0
 8014a46:	2114      	movs	r1, #20
 8014a48:	2002      	movs	r0, #2
 8014a4a:	f7f7 f93b 	bl	800bcc4 <pbuf_alloc>
 8014a4e:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8014a50:	6a3b      	ldr	r3, [r7, #32]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	f000 80b3 	beq.w	8014bbe <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	895b      	ldrh	r3, [r3, #10]
 8014a5c:	2b13      	cmp	r3, #19
 8014a5e:	d806      	bhi.n	8014a6e <ip4_frag+0xc6>
 8014a60:	4b5a      	ldr	r3, [pc, #360]	@ (8014bcc <ip4_frag+0x224>)
 8014a62:	f44f 7242 	mov.w	r2, #776	@ 0x308
 8014a66:	495d      	ldr	r1, [pc, #372]	@ (8014bdc <ip4_frag+0x234>)
 8014a68:	485a      	ldr	r0, [pc, #360]	@ (8014bd4 <ip4_frag+0x22c>)
 8014a6a:	f002 fb93 	bl	8017194 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	2214      	movs	r2, #20
 8014a74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014a76:	4618      	mov	r0, r3
 8014a78:	f002 fdd1 	bl	801761e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014a7c:	6a3b      	ldr	r3, [r7, #32]
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 8014a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014a84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 8014a86:	e04f      	b.n	8014b28 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	895a      	ldrh	r2, [r3, #10]
 8014a8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a8e:	1ad3      	subs	r3, r2, r3
 8014a90:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014a92:	8b7a      	ldrh	r2, [r7, #26]
 8014a94:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014a96:	4293      	cmp	r3, r2
 8014a98:	bf28      	it	cs
 8014a9a:	4613      	movcs	r3, r2
 8014a9c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014a9e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d105      	bne.n	8014ab0 <ip4_frag+0x108>
        poff = 0;
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	60fb      	str	r3, [r7, #12]
        continue;
 8014aae:	e03b      	b.n	8014b28 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014ab0:	f7ff ff22 	bl	80148f8 <ip_frag_alloc_pbuf_custom_ref>
 8014ab4:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d103      	bne.n	8014ac4 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8014abc:	6a38      	ldr	r0, [r7, #32]
 8014abe:	f7f7 fc79 	bl	800c3b4 <pbuf_free>
        goto memerr;
 8014ac2:	e07d      	b.n	8014bc0 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ac4:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014acc:	4413      	add	r3, r2
 8014ace:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8014ad0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014ad2:	9201      	str	r2, [sp, #4]
 8014ad4:	9300      	str	r3, [sp, #0]
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2202      	movs	r2, #2
 8014ada:	2004      	movs	r0, #4
 8014adc:	f7f7 fa8c 	bl	800bff8 <pbuf_alloced_custom>
 8014ae0:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8014ae2:	693b      	ldr	r3, [r7, #16]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d106      	bne.n	8014af6 <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014ae8:	6978      	ldr	r0, [r7, #20]
 8014aea:	f7ff ff0d 	bl	8014908 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014aee:	6a38      	ldr	r0, [r7, #32]
 8014af0:	f7f7 fc60 	bl	800c3b4 <pbuf_free>
        goto memerr;
 8014af4:	e064      	b.n	8014bc0 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8014af6:	68f8      	ldr	r0, [r7, #12]
 8014af8:	f7f7 fd0c 	bl	800c514 <pbuf_ref>
      pcr->original = p;
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	68fa      	ldr	r2, [r7, #12]
 8014b00:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	4a36      	ldr	r2, [pc, #216]	@ (8014be0 <ip4_frag+0x238>)
 8014b06:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014b08:	6939      	ldr	r1, [r7, #16]
 8014b0a:	6a38      	ldr	r0, [r7, #32]
 8014b0c:	f7f7 fd2a 	bl	800c564 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8014b10:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8014b12:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 8014b18:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d004      	beq.n	8014b28 <ip4_frag+0x180>
        poff = 0;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014b28:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d1ac      	bne.n	8014a88 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8014b2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014b30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014b32:	4413      	add	r3, r2
 8014b34:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014b36:	68bb      	ldr	r3, [r7, #8]
 8014b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8014b3a:	f1a3 0213 	sub.w	r2, r3, #19
 8014b3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014b40:	429a      	cmp	r2, r3
 8014b42:	bfcc      	ite	gt
 8014b44:	2301      	movgt	r3, #1
 8014b46:	2300      	movle	r3, #0
 8014b48:	b2db      	uxtb	r3, r3
 8014b4a:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014b4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8014b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014b52:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 8014b54:	69fb      	ldr	r3, [r7, #28]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d103      	bne.n	8014b62 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8014b5a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014b5c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014b60:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014b62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7f6 fa4f 	bl	800b008 <lwip_htons>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b70:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8014b72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014b74:	3314      	adds	r3, #20
 8014b76:	b29b      	uxth	r3, r3
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7f6 fa45 	bl	800b008 <lwip_htons>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	461a      	mov	r2, r3
 8014b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b84:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b88:	2200      	movs	r2, #0
 8014b8a:	729a      	strb	r2, [r3, #10]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	695b      	ldr	r3, [r3, #20]
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	6a39      	ldr	r1, [r7, #32]
 8014b98:	68b8      	ldr	r0, [r7, #8]
 8014b9a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b9c:	6a38      	ldr	r0, [r7, #32]
 8014b9e:	f7f7 fc09 	bl	800c3b4 <pbuf_free>
    left -= fragsize;
 8014ba2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014ba4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014ba6:	1ad3      	subs	r3, r2, r3
 8014ba8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 8014baa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8014bac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8014bae:	4413      	add	r3, r2
 8014bb0:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 8014bb2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f47f af3e 	bne.w	8014a36 <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	e002      	b.n	8014bc4 <ip4_frag+0x21c>
      goto memerr;
 8014bbe:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3740      	adds	r7, #64	@ 0x40
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	0801a840 	.word	0x0801a840
 8014bd0:	0801a9cc 	.word	0x0801a9cc
 8014bd4:	0801a888 	.word	0x0801a888
 8014bd8:	0801a9f4 	.word	0x0801a9f4
 8014bdc:	0801aa10 	.word	0x0801aa10
 8014be0:	08014941 	.word	0x08014941

08014be4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8014bee:	230e      	movs	r3, #14
 8014bf0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	895b      	ldrh	r3, [r3, #10]
 8014bf6:	2b0e      	cmp	r3, #14
 8014bf8:	d977      	bls.n	8014cea <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	7b1a      	ldrb	r2, [r3, #12]
 8014c04:	7b5b      	ldrb	r3, [r3, #13]
 8014c06:	021b      	lsls	r3, r3, #8
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	f003 0301 	and.w	r3, r3, #1
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d023      	beq.n	8014c60 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d10f      	bne.n	8014c40 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	785b      	ldrb	r3, [r3, #1]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d11b      	bne.n	8014c60 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014c28:	693b      	ldr	r3, [r7, #16]
 8014c2a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014c2c:	2b5e      	cmp	r3, #94	@ 0x5e
 8014c2e:	d117      	bne.n	8014c60 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	7b5b      	ldrb	r3, [r3, #13]
 8014c34:	f043 0310 	orr.w	r3, r3, #16
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	735a      	strb	r2, [r3, #13]
 8014c3e:	e00f      	b.n	8014c60 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	2206      	movs	r2, #6
 8014c44:	4931      	ldr	r1, [pc, #196]	@ (8014d0c <ethernet_input+0x128>)
 8014c46:	4618      	mov	r0, r3
 8014c48:	f002 fbec 	bl	8017424 <memcmp>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d106      	bne.n	8014c60 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	7b5b      	ldrb	r3, [r3, #13]
 8014c56:	f043 0308 	orr.w	r3, r3, #8
 8014c5a:	b2da      	uxtb	r2, r3
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014c60:	89fb      	ldrh	r3, [r7, #14]
 8014c62:	2b08      	cmp	r3, #8
 8014c64:	d003      	beq.n	8014c6e <ethernet_input+0x8a>
 8014c66:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014c6a:	d01e      	beq.n	8014caa <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014c6c:	e046      	b.n	8014cfc <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014c74:	f003 0308 	and.w	r3, r3, #8
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d038      	beq.n	8014cee <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	895b      	ldrh	r3, [r3, #10]
 8014c80:	461a      	mov	r2, r3
 8014c82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c86:	429a      	cmp	r2, r3
 8014c88:	db33      	blt.n	8014cf2 <ethernet_input+0x10e>
 8014c8a:	8afb      	ldrh	r3, [r7, #22]
 8014c8c:	425b      	negs	r3, r3
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	b21b      	sxth	r3, r3
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7f7 fb69 	bl	800c36c <pbuf_header>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d128      	bne.n	8014cf2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8014ca0:	6839      	ldr	r1, [r7, #0]
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7fe fe2c 	bl	8013900 <ip4_input>
      break;
 8014ca8:	e01d      	b.n	8014ce6 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014cb0:	f003 0308 	and.w	r3, r3, #8
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d01e      	beq.n	8014cf6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	895b      	ldrh	r3, [r3, #10]
 8014cbc:	461a      	mov	r2, r3
 8014cbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	db19      	blt.n	8014cfa <ethernet_input+0x116>
 8014cc6:	8afb      	ldrh	r3, [r7, #22]
 8014cc8:	425b      	negs	r3, r3
 8014cca:	b29b      	uxth	r3, r3
 8014ccc:	b21b      	sxth	r3, r3
 8014cce:	4619      	mov	r1, r3
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7f7 fb4b 	bl	800c36c <pbuf_header>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d10e      	bne.n	8014cfa <ethernet_input+0x116>
        etharp_input(p, netif);
 8014cdc:	6839      	ldr	r1, [r7, #0]
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f7fd fffc 	bl	8012cdc <etharp_input>
      break;
 8014ce4:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	e00c      	b.n	8014d04 <ethernet_input+0x120>
    goto free_and_return;
 8014cea:	bf00      	nop
 8014cec:	e006      	b.n	8014cfc <ethernet_input+0x118>
        goto free_and_return;
 8014cee:	bf00      	nop
 8014cf0:	e004      	b.n	8014cfc <ethernet_input+0x118>
        goto free_and_return;
 8014cf2:	bf00      	nop
 8014cf4:	e002      	b.n	8014cfc <ethernet_input+0x118>
        goto free_and_return;
 8014cf6:	bf00      	nop
 8014cf8:	e000      	b.n	8014cfc <ethernet_input+0x118>
        goto free_and_return;
 8014cfa:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7f7 fb59 	bl	800c3b4 <pbuf_free>
  return ERR_OK;
 8014d02:	2300      	movs	r3, #0
}
 8014d04:	4618      	mov	r0, r3
 8014d06:	3718      	adds	r7, #24
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	bd80      	pop	{r7, pc}
 8014d0c:	0801acbc 	.word	0x0801acbc

08014d10 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b086      	sub	sp, #24
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60f8      	str	r0, [r7, #12]
 8014d18:	60b9      	str	r1, [r7, #8]
 8014d1a:	607a      	str	r2, [r7, #4]
 8014d1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014d1e:	8c3b      	ldrh	r3, [r7, #32]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7f6 f971 	bl	800b008 <lwip_htons>
 8014d26:	4603      	mov	r3, r0
 8014d28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8014d2a:	210e      	movs	r1, #14
 8014d2c:	68b8      	ldr	r0, [r7, #8]
 8014d2e:	f7f7 fb1d 	bl	800c36c <pbuf_header>
 8014d32:	4603      	mov	r3, r0
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d125      	bne.n	8014d84 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	8afa      	ldrh	r2, [r7, #22]
 8014d42:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	2206      	movs	r2, #6
 8014d48:	6839      	ldr	r1, [r7, #0]
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f002 fc67 	bl	801761e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	3306      	adds	r3, #6
 8014d54:	2206      	movs	r2, #6
 8014d56:	6879      	ldr	r1, [r7, #4]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f002 fc60 	bl	801761e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014d64:	2b06      	cmp	r3, #6
 8014d66:	d006      	beq.n	8014d76 <ethernet_output+0x66>
 8014d68:	4b0a      	ldr	r3, [pc, #40]	@ (8014d94 <ethernet_output+0x84>)
 8014d6a:	f240 122b 	movw	r2, #299	@ 0x12b
 8014d6e:	490a      	ldr	r1, [pc, #40]	@ (8014d98 <ethernet_output+0x88>)
 8014d70:	480a      	ldr	r0, [pc, #40]	@ (8014d9c <ethernet_output+0x8c>)
 8014d72:	f002 fa0f 	bl	8017194 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	699b      	ldr	r3, [r3, #24]
 8014d7a:	68b9      	ldr	r1, [r7, #8]
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	4798      	blx	r3
 8014d80:	4603      	mov	r3, r0
 8014d82:	e002      	b.n	8014d8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014d84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014d86:	f06f 0301 	mvn.w	r3, #1
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3718      	adds	r7, #24
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
 8014d92:	bf00      	nop
 8014d94:	0801aa30 	.word	0x0801aa30
 8014d98:	0801aa68 	.word	0x0801aa68
 8014d9c:	0801aa9c 	.word	0x0801aa9c

08014da0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b086      	sub	sp, #24
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	60bb      	str	r3, [r7, #8]
 8014dae:	2304      	movs	r3, #4
 8014db0:	60fb      	str	r3, [r7, #12]
 8014db2:	2300      	movs	r3, #0
 8014db4:	613b      	str	r3, [r7, #16]
 8014db6:	2300      	movs	r3, #0
 8014db8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014dba:	f107 0308 	add.w	r3, r7, #8
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7f0 faaa 	bl	800531a <osMessageCreate>
 8014dc6:	4602      	mov	r2, r0
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d102      	bne.n	8014dda <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd8:	e000      	b.n	8014ddc <sys_mbox_new+0x3c>

  return ERR_OK;
 8014dda:	2300      	movs	r3, #0
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3718      	adds	r7, #24
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b082      	sub	sp, #8
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7f0 fb6f 	bl	80054d4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f7f0 fb80 	bl	8005500 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014e00:	bf00      	nop
 8014e02:	3708      	adds	r7, #8
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b082      	sub	sp, #8
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8014e12:	bf00      	nop
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	6839      	ldr	r1, [r7, #0]
 8014e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7f0 faa4 	bl	800536c <osMessagePut>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1f4      	bne.n	8014e14 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8014e2a:	bf00      	nop
 8014e2c:	bf00      	nop
 8014e2e:	3708      	adds	r7, #8
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b084      	sub	sp, #16
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
 8014e3c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	6839      	ldr	r1, [r7, #0]
 8014e44:	2200      	movs	r2, #0
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f0 fa90 	bl	800536c <osMessagePut>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d102      	bne.n	8014e58 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014e52:	2300      	movs	r3, #0
 8014e54:	73fb      	strb	r3, [r7, #15]
 8014e56:	e001      	b.n	8014e5c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014e58:	23ff      	movs	r3, #255	@ 0xff
 8014e5a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	3710      	adds	r7, #16
 8014e64:	46bd      	mov	sp, r7
 8014e66:	bd80      	pop	{r7, pc}

08014e68 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b08c      	sub	sp, #48	@ 0x30
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	61f8      	str	r0, [r7, #28]
 8014e70:	61b9      	str	r1, [r7, #24]
 8014e72:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014e74:	f7f0 f87c 	bl	8004f70 <osKernelSysTick>
 8014e78:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014e7a:	697b      	ldr	r3, [r7, #20]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d017      	beq.n	8014eb0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014e80:	69fb      	ldr	r3, [r7, #28]
 8014e82:	6819      	ldr	r1, [r3, #0]
 8014e84:	f107 0320 	add.w	r3, r7, #32
 8014e88:	697a      	ldr	r2, [r7, #20]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7f0 faae 	bl	80053ec <osMessageGet>

    if(event.status == osEventMessage)
 8014e90:	6a3b      	ldr	r3, [r7, #32]
 8014e92:	2b10      	cmp	r3, #16
 8014e94:	d109      	bne.n	8014eaa <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e98:	461a      	mov	r2, r3
 8014e9a:	69bb      	ldr	r3, [r7, #24]
 8014e9c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014e9e:	f7f0 f867 	bl	8004f70 <osKernelSysTick>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ea6:	1ad3      	subs	r3, r2, r3
 8014ea8:	e019      	b.n	8014ede <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8014eae:	e016      	b.n	8014ede <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	6819      	ldr	r1, [r3, #0]
 8014eb4:	463b      	mov	r3, r7
 8014eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7f0 fa96 	bl	80053ec <osMessageGet>
 8014ec0:	f107 0320 	add.w	r3, r7, #32
 8014ec4:	463a      	mov	r2, r7
 8014ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014ec8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ece:	461a      	mov	r2, r3
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014ed4:	f7f0 f84c 	bl	8004f70 <osKernelSysTick>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014edc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3730      	adds	r7, #48	@ 0x30
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}

08014ee6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b086      	sub	sp, #24
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	6819      	ldr	r1, [r3, #0]
 8014ef4:	f107 030c 	add.w	r3, r7, #12
 8014ef8:	2200      	movs	r2, #0
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7f0 fa76 	bl	80053ec <osMessageGet>

  if(event.status == osEventMessage)
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2b10      	cmp	r3, #16
 8014f04:	d105      	bne.n	8014f12 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	461a      	mov	r2, r3
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	e001      	b.n	8014f16 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8014f12:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3718      	adds	r7, #24
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014f1e:	b480      	push	{r7}
 8014f20:	b083      	sub	sp, #12
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d101      	bne.n	8014f32 <sys_mbox_valid+0x14>
    return 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e000      	b.n	8014f34 <sys_mbox_valid+0x16>
  else
    return 1;
 8014f32:	2301      	movs	r3, #1
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bc80      	pop	{r7}
 8014f3c:	4770      	bx	lr

08014f3e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8014f3e:	b480      	push	{r7}
 8014f40:	b083      	sub	sp, #12
 8014f42:	af00      	add	r7, sp, #0
 8014f44:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	601a      	str	r2, [r3, #0]
}
 8014f4c:	bf00      	nop
 8014f4e:	370c      	adds	r7, #12
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bc80      	pop	{r7}
 8014f54:	4770      	bx	lr

08014f56 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8014f56:	b580      	push	{r7, lr}
 8014f58:	b084      	sub	sp, #16
 8014f5a:	af00      	add	r7, sp, #0
 8014f5c:	6078      	str	r0, [r7, #4]
 8014f5e:	460b      	mov	r3, r1
 8014f60:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8014f62:	2300      	movs	r3, #0
 8014f64:	60bb      	str	r3, [r7, #8]
 8014f66:	2300      	movs	r3, #0
 8014f68:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8014f6a:	f107 0308 	add.w	r3, r7, #8
 8014f6e:	2101      	movs	r1, #1
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7f0 f909 	bl	8005188 <osSemaphoreCreate>
 8014f76:	4602      	mov	r2, r0
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d102      	bne.n	8014f8a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014f84:	f04f 33ff 	mov.w	r3, #4294967295
 8014f88:	e009      	b.n	8014f9e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8014f8a:	78fb      	ldrb	r3, [r7, #3]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d105      	bne.n	8014f9c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	2100      	movs	r1, #0
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7f0 f928 	bl	80051ec <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8014f9c:	2300      	movs	r3, #0
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3710      	adds	r7, #16
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b084      	sub	sp, #16
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
 8014fae:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8014fb0:	f7ef ffde 	bl	8004f70 <osKernelSysTick>
 8014fb4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d011      	beq.n	8014fe0 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	6839      	ldr	r1, [r7, #0]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f0 f912 	bl	80051ec <osSemaphoreWait>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d105      	bne.n	8014fda <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8014fce:	f7ef ffcf 	bl	8004f70 <osKernelSysTick>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	e012      	b.n	8015000 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014fda:	f04f 33ff 	mov.w	r3, #4294967295
 8014fde:	e00f      	b.n	8015000 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8014fe0:	bf00      	nop
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8014fea:	4618      	mov	r0, r3
 8014fec:	f7f0 f8fe 	bl	80051ec <osSemaphoreWait>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d1f5      	bne.n	8014fe2 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8014ff6:	f7ef ffbb 	bl	8004f70 <osKernelSysTick>
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015000:	4618      	mov	r0, r3
 8015002:	3710      	adds	r7, #16
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4618      	mov	r0, r3
 8015016:	f7f0 f937 	bl	8005288 <osSemaphoreRelease>
}
 801501a:	bf00      	nop
 801501c:	3708      	adds	r7, #8
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015022:	b580      	push	{r7, lr}
 8015024:	b082      	sub	sp, #8
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	4618      	mov	r0, r3
 8015030:	f7f0 f960 	bl	80052f4 <osSemaphoreDelete>
}
 8015034:	bf00      	nop
 8015036:	3708      	adds	r7, #8
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801503c:	b480      	push	{r7}
 801503e:	b083      	sub	sp, #12
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d101      	bne.n	8015050 <sys_sem_valid+0x14>
    return 0;
 801504c:	2300      	movs	r3, #0
 801504e:	e000      	b.n	8015052 <sys_sem_valid+0x16>
  else
    return 1;
 8015050:	2301      	movs	r3, #1
}
 8015052:	4618      	mov	r0, r3
 8015054:	370c      	adds	r7, #12
 8015056:	46bd      	mov	sp, r7
 8015058:	bc80      	pop	{r7}
 801505a:	4770      	bx	lr

0801505c <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2200      	movs	r2, #0
 8015068:	601a      	str	r2, [r3, #0]
}
 801506a:	bf00      	nop
 801506c:	370c      	adds	r7, #12
 801506e:	46bd      	mov	sp, r7
 8015070:	bc80      	pop	{r7}
 8015072:	4770      	bx	lr

08015074 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015078:	4803      	ldr	r0, [pc, #12]	@ (8015088 <sys_init+0x14>)
 801507a:	f7ef ffe9 	bl	8005050 <osMutexCreate>
 801507e:	4603      	mov	r3, r0
 8015080:	4a02      	ldr	r2, [pc, #8]	@ (801508c <sys_init+0x18>)
 8015082:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015084:	bf00      	nop
 8015086:	bd80      	pop	{r7, pc}
 8015088:	0801accc 	.word	0x0801accc
 801508c:	200099d0 	.word	0x200099d0

08015090 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015098:	2300      	movs	r3, #0
 801509a:	60bb      	str	r3, [r7, #8]
 801509c:	2300      	movs	r3, #0
 801509e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80150a0:	f107 0308 	add.w	r3, r7, #8
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7ef ffd3 	bl	8005050 <osMutexCreate>
 80150aa:	4602      	mov	r2, r0
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d102      	bne.n	80150be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80150b8:	f04f 33ff 	mov.w	r3, #4294967295
 80150bc:	e000      	b.n	80150c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80150be:	2300      	movs	r3, #0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3710      	adds	r7, #16
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f04f 31ff 	mov.w	r1, #4294967295
 80150d8:	4618      	mov	r0, r3
 80150da:	f7ef ffd1 	bl	8005080 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80150de:	bf00      	nop
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	4618      	mov	r0, r3
 80150f4:	f7f0 f812 	bl	800511c <osMutexRelease>
}
 80150f8:	bf00      	nop
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}

08015100 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015100:	b580      	push	{r7, lr}
 8015102:	b08c      	sub	sp, #48	@ 0x30
 8015104:	af00      	add	r7, sp, #0
 8015106:	60f8      	str	r0, [r7, #12]
 8015108:	60b9      	str	r1, [r7, #8]
 801510a:	607a      	str	r2, [r7, #4]
 801510c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801510e:	f107 0314 	add.w	r3, r7, #20
 8015112:	2200      	movs	r2, #0
 8015114:	601a      	str	r2, [r3, #0]
 8015116:	605a      	str	r2, [r3, #4]
 8015118:	609a      	str	r2, [r3, #8]
 801511a:	60da      	str	r2, [r3, #12]
 801511c:	611a      	str	r2, [r3, #16]
 801511e:	615a      	str	r2, [r3, #20]
 8015120:	619a      	str	r2, [r3, #24]
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	617b      	str	r3, [r7, #20]
 8015126:	68bb      	ldr	r3, [r7, #8]
 8015128:	61bb      	str	r3, [r7, #24]
 801512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801512c:	b21b      	sxth	r3, r3
 801512e:	83bb      	strh	r3, [r7, #28]
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015134:	f107 0314 	add.w	r3, r7, #20
 8015138:	6879      	ldr	r1, [r7, #4]
 801513a:	4618      	mov	r0, r3
 801513c:	f7ef ff28 	bl	8004f90 <osThreadCreate>
 8015140:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015142:	4618      	mov	r0, r3
 8015144:	3730      	adds	r7, #48	@ 0x30
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
	...

0801514c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015150:	4b04      	ldr	r3, [pc, #16]	@ (8015164 <sys_arch_protect+0x18>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	f04f 31ff 	mov.w	r1, #4294967295
 8015158:	4618      	mov	r0, r3
 801515a:	f7ef ff91 	bl	8005080 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801515e:	2301      	movs	r3, #1
}
 8015160:	4618      	mov	r0, r3
 8015162:	bd80      	pop	{r7, pc}
 8015164:	200099d0 	.word	0x200099d0

08015168 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
 801516e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015170:	4b04      	ldr	r3, [pc, #16]	@ (8015184 <sys_arch_unprotect+0x1c>)
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4618      	mov	r0, r3
 8015176:	f7ef ffd1 	bl	800511c <osMutexRelease>
}
 801517a:	bf00      	nop
 801517c:	3708      	adds	r7, #8
 801517e:	46bd      	mov	sp, r7
 8015180:	bd80      	pop	{r7, pc}
 8015182:	bf00      	nop
 8015184:	200099d0 	.word	0x200099d0

08015188 <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8015188:	b480      	push	{r7}
 801518a:	b085      	sub	sp, #20
 801518c:	af00      	add	r7, sp, #0
 801518e:	60f8      	str	r0, [r7, #12]
 8015190:	60b9      	str	r1, [r7, #8]
 8015192:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	68ba      	ldr	r2, [r7, #8]
 8015198:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	601a      	str	r2, [r3, #0]
}
 80151a0:	bf00      	nop
 80151a2:	3714      	adds	r7, #20
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bc80      	pop	{r7}
 80151a8:	4770      	bx	lr

080151aa <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 80151aa:	b480      	push	{r7}
 80151ac:	b083      	sub	sp, #12
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d003      	beq.n	80151c6 <getNextPacketId+0x1c>
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	3301      	adds	r3, #1
 80151c4:	e000      	b.n	80151c8 <getNextPacketId+0x1e>
 80151c6:	2301      	movs	r3, #1
 80151c8:	687a      	ldr	r2, [r7, #4]
 80151ca:	6013      	str	r3, [r2, #0]
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	370c      	adds	r7, #12
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bc80      	pop	{r7}
 80151d8:	4770      	bx	lr

080151da <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 80151da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151dc:	b087      	sub	sp, #28
 80151de:	af00      	add	r7, sp, #0
 80151e0:	60f8      	str	r0, [r7, #12]
 80151e2:	60b9      	str	r1, [r7, #8]
 80151e4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80151e6:	f04f 33ff 	mov.w	r3, #4294967295
 80151ea:	617b      	str	r3, [r7, #20]
        sent = 0;
 80151ec:	2300      	movs	r3, #0
 80151ee:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80151f0:	e018      	b.n	8015224 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151f6:	689c      	ldr	r4, [r3, #8]
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	691a      	ldr	r2, [r3, #16]
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	18d6      	adds	r6, r2, r3
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f000 fec5 	bl	8015f94 <TimerLeftMS>
 801520a:	4603      	mov	r3, r0
 801520c:	68ba      	ldr	r2, [r7, #8]
 801520e:	4631      	mov	r1, r6
 8015210:	4628      	mov	r0, r5
 8015212:	47a0      	blx	r4
 8015214:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2b00      	cmp	r3, #0
 801521a:	db0e      	blt.n	801523a <sendPacket+0x60>
            break;
        sent += rc;
 801521c:	693a      	ldr	r2, [r7, #16]
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	4413      	add	r3, r2
 8015222:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 8015224:	693a      	ldr	r2, [r7, #16]
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	429a      	cmp	r2, r3
 801522a:	da07      	bge.n	801523c <sendPacket+0x62>
 801522c:	6878      	ldr	r0, [r7, #4]
 801522e:	f000 fe75 	bl	8015f1c <TimerIsExpired>
 8015232:	4603      	mov	r3, r0
 8015234:	2b00      	cmp	r3, #0
 8015236:	d0dc      	beq.n	80151f2 <sendPacket+0x18>
 8015238:	e000      	b.n	801523c <sendPacket+0x62>
            break;
 801523a:	bf00      	nop
    }
    if (sent == length)
 801523c:	693a      	ldr	r2, [r7, #16]
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	429a      	cmp	r2, r3
 8015242:	d10b      	bne.n	801525c <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully sent the packet
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	699b      	ldr	r3, [r3, #24]
 801524e:	4619      	mov	r1, r3
 8015250:	4610      	mov	r0, r2
 8015252:	f000 fe89 	bl	8015f68 <TimerCountdown>
        rc = MQTT_SUCCESS;
 8015256:	2300      	movs	r3, #0
 8015258:	617b      	str	r3, [r7, #20]
 801525a:	e002      	b.n	8015262 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801525c:	f04f 33ff 	mov.w	r3, #4294967295
 8015260:	617b      	str	r3, [r7, #20]
    return rc;
 8015262:	697b      	ldr	r3, [r7, #20]
}
 8015264:	4618      	mov	r0, r3
 8015266:	371c      	adds	r7, #28
 8015268:	46bd      	mov	sp, r7
 801526a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801526c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	607a      	str	r2, [r7, #4]
 8015278:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	68ba      	ldr	r2, [r7, #8]
 801527e:	655a      	str	r2, [r3, #84]	@ 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015280:	2300      	movs	r3, #0
 8015282:	617b      	str	r3, [r7, #20]
 8015284:	e008      	b.n	8015298 <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	697a      	ldr	r2, [r7, #20]
 801528a:	3205      	adds	r2, #5
 801528c:	2100      	movs	r1, #0
 801528e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	3301      	adds	r3, #1
 8015296:	617b      	str	r3, [r7, #20]
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	2b04      	cmp	r3, #4
 801529c:	ddf3      	ble.n	8015286 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	687a      	ldr	r2, [r7, #4]
 80152a2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	683a      	ldr	r2, [r7, #0]
 80152a8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	6a3a      	ldr	r2, [r7, #32]
 80152ae:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152b4:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80152ba:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	2200      	movs	r2, #0
 80152c0:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2200      	movs	r2, #0
 80152c6:	625a      	str	r2, [r3, #36]	@ 0x24
    c->ping_outstanding = 0;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	651a      	str	r2, [r3, #80]	@ 0x50
	  c->next_packetid = 1;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	2201      	movs	r2, #1
 80152d8:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	3358      	adds	r3, #88	@ 0x58
 80152de:	4618      	mov	r0, r3
 80152e0:	f000 fe6c 	bl	8015fbc <TimerInit>
    TimerInit(&c->last_received);
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	3360      	adds	r3, #96	@ 0x60
 80152e8:	4618      	mov	r0, r3
 80152ea:	f000 fe67 	bl	8015fbc <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80152ee:	bf00      	nop
 80152f0:	3718      	adds	r7, #24
 80152f2:	46bd      	mov	sp, r7
 80152f4:	bd80      	pop	{r7, pc}

080152f6 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80152f6:	b590      	push	{r4, r7, lr}
 80152f8:	b08b      	sub	sp, #44	@ 0x2c
 80152fa:	af00      	add	r7, sp, #0
 80152fc:	60f8      	str	r0, [r7, #12]
 80152fe:	60b9      	str	r1, [r7, #8]
 8015300:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8015302:	2301      	movs	r3, #1
 8015304:	627b      	str	r3, [r7, #36]	@ 0x24
    int len = 0;
 8015306:	2300      	movs	r3, #0
 8015308:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801530a:	2304      	movs	r3, #4
 801530c:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	2200      	movs	r2, #0
 8015312:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8015314:	f04f 33ff 	mov.w	r3, #4294967295
 8015318:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	3301      	adds	r3, #1
 801531e:	623b      	str	r3, [r7, #32]
 8015320:	6a3a      	ldr	r2, [r7, #32]
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	429a      	cmp	r2, r3
 8015326:	dd03      	ble.n	8015330 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8015328:	f04f 33ff 	mov.w	r3, #4294967295
 801532c:	61bb      	str	r3, [r7, #24]
            goto exit;
 801532e:	e021      	b.n	8015374 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015334:	685c      	ldr	r4, [r3, #4]
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 801533a:	f107 0117 	add.w	r1, r7, #23
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	2201      	movs	r2, #1
 8015342:	47a0      	blx	r4
 8015344:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8015346:	69bb      	ldr	r3, [r7, #24]
 8015348:	2b01      	cmp	r3, #1
 801534a:	d112      	bne.n	8015372 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	7dfb      	ldrb	r3, [r7, #23]
 8015352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015356:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015358:	fb01 f303 	mul.w	r3, r1, r3
 801535c:	441a      	add	r2, r3
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015364:	01db      	lsls	r3, r3, #7
 8015366:	627b      	str	r3, [r7, #36]	@ 0x24
    } while ((i & 128) != 0);
 8015368:	7dfb      	ldrb	r3, [r7, #23]
 801536a:	b25b      	sxtb	r3, r3
 801536c:	2b00      	cmp	r3, #0
 801536e:	dbd1      	blt.n	8015314 <decodePacket+0x1e>
exit:
 8015370:	e000      	b.n	8015374 <decodePacket+0x7e>
            goto exit;
 8015372:	bf00      	nop
    return len;
 8015374:	6a3b      	ldr	r3, [r7, #32]
}
 8015376:	4618      	mov	r0, r3
 8015378:	372c      	adds	r7, #44	@ 0x2c
 801537a:	46bd      	mov	sp, r7
 801537c:	bd90      	pop	{r4, r7, pc}

0801537e <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801537e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015380:	b089      	sub	sp, #36	@ 0x24
 8015382:	af00      	add	r7, sp, #0
 8015384:	60f8      	str	r0, [r7, #12]
 8015386:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 8015388:	2300      	movs	r3, #0
 801538a:	617b      	str	r3, [r7, #20]
    int len = 0;
 801538c:	2300      	movs	r3, #0
 801538e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8015390:	2300      	movs	r3, #0
 8015392:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015398:	685c      	ldr	r4, [r3, #4]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	695e      	ldr	r6, [r3, #20]
 80153a2:	68b8      	ldr	r0, [r7, #8]
 80153a4:	f000 fdf6 	bl	8015f94 <TimerLeftMS>
 80153a8:	4603      	mov	r3, r0
 80153aa:	2201      	movs	r2, #1
 80153ac:	4631      	mov	r1, r6
 80153ae:	4628      	mov	r0, r5
 80153b0:	47a0      	blx	r4
 80153b2:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d15d      	bne.n	8015476 <readPacket+0xf8>
        goto exit;

    len = 1;
 80153ba:	2301      	movs	r3, #1
 80153bc:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 80153be:	68b8      	ldr	r0, [r7, #8]
 80153c0:	f000 fde8 	bl	8015f94 <TimerLeftMS>
 80153c4:	4602      	mov	r2, r0
 80153c6:	f107 0310 	add.w	r3, r7, #16
 80153ca:	4619      	mov	r1, r3
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff ff92 	bl	80152f6 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	695b      	ldr	r3, [r3, #20]
 80153d6:	3301      	adds	r3, #1
 80153d8:	693a      	ldr	r2, [r7, #16]
 80153da:	4611      	mov	r1, r2
 80153dc:	4618      	mov	r0, r3
 80153de:	f001 f963 	bl	80166a8 <MQTTPacket_encode>
 80153e2:	4602      	mov	r2, r0
 80153e4:	69bb      	ldr	r3, [r7, #24]
 80153e6:	4413      	add	r3, r2
 80153e8:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	68da      	ldr	r2, [r3, #12]
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	1ad3      	subs	r3, r2, r3
 80153f2:	693a      	ldr	r2, [r7, #16]
 80153f4:	4293      	cmp	r3, r2
 80153f6:	d203      	bcs.n	8015400 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 80153f8:	f06f 0301 	mvn.w	r3, #1
 80153fc:	61fb      	str	r3, [r7, #28]
        goto exit;
 80153fe:	e03d      	b.n	801547c <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	2b00      	cmp	r3, #0
 8015404:	dd20      	ble.n	8015448 <readPacket+0xca>
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801540a:	685c      	ldr	r4, [r3, #4]
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	695a      	ldr	r2, [r3, #20]
 8015414:	69bb      	ldr	r3, [r7, #24]
 8015416:	18d6      	adds	r6, r2, r3
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	607b      	str	r3, [r7, #4]
 801541c:	68b8      	ldr	r0, [r7, #8]
 801541e:	f000 fdb9 	bl	8015f94 <TimerLeftMS>
 8015422:	4603      	mov	r3, r0
 8015424:	687a      	ldr	r2, [r7, #4]
 8015426:	4631      	mov	r1, r6
 8015428:	4628      	mov	r0, r5
 801542a:	47a0      	blx	r4
 801542c:	4602      	mov	r2, r0
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	429a      	cmp	r2, r3
 8015432:	bf14      	ite	ne
 8015434:	2301      	movne	r3, #1
 8015436:	2300      	moveq	r3, #0
 8015438:	b2db      	uxtb	r3, r3
 801543a:	61fb      	str	r3, [r7, #28]
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d002      	beq.n	8015448 <readPacket+0xca>
        rc = 0;
 8015442:	2300      	movs	r3, #0
 8015444:	61fb      	str	r3, [r7, #28]
        goto exit;
 8015446:	e019      	b.n	801547c <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	695b      	ldr	r3, [r3, #20]
 801544c:	781b      	ldrb	r3, [r3, #0]
 801544e:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8015450:	7d3b      	ldrb	r3, [r7, #20]
 8015452:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015456:	b2db      	uxtb	r3, r3
 8015458:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	699b      	ldr	r3, [r3, #24]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00b      	beq.n	801547a <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCCESSfully received a packet
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	699b      	ldr	r3, [r3, #24]
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	f000 fd7a 	bl	8015f68 <TimerCountdown>
 8015474:	e002      	b.n	801547c <readPacket+0xfe>
        goto exit;
 8015476:	bf00      	nop
 8015478:	e000      	b.n	801547c <readPacket+0xfe>
exit:
 801547a:	bf00      	nop
    return rc;
 801547c:	69fb      	ldr	r3, [r7, #28]
}
 801547e:	4618      	mov	r0, r3
 8015480:	3724      	adds	r7, #36	@ 0x24
 8015482:	46bd      	mov	sp, r7
 8015484:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015486 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8015486:	b480      	push	{r7}
 8015488:	b087      	sub	sp, #28
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
 801548e:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	689b      	ldr	r3, [r3, #8]
 8015498:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	461a      	mov	r2, r3
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	4413      	add	r3, r2
 80154a4:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 80154a6:	e039      	b.n	801551c <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	781b      	ldrb	r3, [r3, #0]
 80154ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80154ae:	d103      	bne.n	80154b8 <isTopicMatched+0x32>
 80154b0:	697b      	ldr	r3, [r7, #20]
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80154b6:	d13a      	bne.n	801552e <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80154be:	d009      	beq.n	80154d4 <isTopicMatched+0x4e>
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b23      	cmp	r3, #35	@ 0x23
 80154c6:	d005      	beq.n	80154d4 <isTopicMatched+0x4e>
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	781a      	ldrb	r2, [r3, #0]
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	781b      	ldrb	r3, [r3, #0]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d12e      	bne.n	8015532 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 80154d4:	697b      	ldr	r3, [r7, #20]
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	2b2b      	cmp	r3, #43	@ 0x2b
 80154da:	d112      	bne.n	8015502 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	3301      	adds	r3, #1
 80154e0:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80154e2:	e005      	b.n	80154f0 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	3301      	adds	r3, #1
 80154e8:	613b      	str	r3, [r7, #16]
 80154ea:	693b      	ldr	r3, [r7, #16]
 80154ec:	3301      	adds	r3, #1
 80154ee:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80154f0:	68fa      	ldr	r2, [r7, #12]
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d20b      	bcs.n	8015510 <isTopicMatched+0x8a>
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	781b      	ldrb	r3, [r3, #0]
 80154fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80154fe:	d1f1      	bne.n	80154e4 <isTopicMatched+0x5e>
 8015500:	e006      	b.n	8015510 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	2b23      	cmp	r3, #35	@ 0x23
 8015508:	d102      	bne.n	8015510 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	3b01      	subs	r3, #1
 801550e:	613b      	str	r3, [r7, #16]
        curf++;
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	3301      	adds	r3, #1
 8015514:	617b      	str	r3, [r7, #20]
        curn++;
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	3301      	adds	r3, #1
 801551a:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d007      	beq.n	8015534 <isTopicMatched+0xae>
 8015524:	693a      	ldr	r2, [r7, #16]
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	429a      	cmp	r2, r3
 801552a:	d3bd      	bcc.n	80154a8 <isTopicMatched+0x22>
 801552c:	e002      	b.n	8015534 <isTopicMatched+0xae>
            break;
 801552e:	bf00      	nop
 8015530:	e000      	b.n	8015534 <isTopicMatched+0xae>
            break;
 8015532:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8015534:	693a      	ldr	r2, [r7, #16]
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	429a      	cmp	r2, r3
 801553a:	d105      	bne.n	8015548 <isTopicMatched+0xc2>
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d101      	bne.n	8015548 <isTopicMatched+0xc2>
 8015544:	2301      	movs	r3, #1
 8015546:	e000      	b.n	801554a <isTopicMatched+0xc4>
 8015548:	2300      	movs	r3, #0
 801554a:	b2db      	uxtb	r3, r3
}
 801554c:	4618      	mov	r0, r3
 801554e:	371c      	adds	r7, #28
 8015550:	46bd      	mov	sp, r7
 8015552:	bc80      	pop	{r7}
 8015554:	4770      	bx	lr

08015556 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8015556:	b580      	push	{r7, lr}
 8015558:	b08a      	sub	sp, #40	@ 0x28
 801555a:	af00      	add	r7, sp, #0
 801555c:	60f8      	str	r0, [r7, #12]
 801555e:	60b9      	str	r1, [r7, #8]
 8015560:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8015562:	f04f 33ff 	mov.w	r3, #4294967295
 8015566:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015568:	2300      	movs	r3, #0
 801556a:	627b      	str	r3, [r7, #36]	@ 0x24
 801556c:	e03c      	b.n	80155e8 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015572:	3205      	adds	r2, #5
 8015574:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d032      	beq.n	80155e2 <deliverMessage+0x8c>
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015580:	3205      	adds	r2, #5
 8015582:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015586:	4619      	mov	r1, r3
 8015588:	68b8      	ldr	r0, [r7, #8]
 801558a:	f001 fa57 	bl	8016a3c <MQTTPacket_equals>
 801558e:	4603      	mov	r3, r0
 8015590:	2b00      	cmp	r3, #0
 8015592:	d10b      	bne.n	80155ac <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015598:	3205      	adds	r2, #5
 801559a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801559e:	68b9      	ldr	r1, [r7, #8]
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff ff70 	bl	8015486 <isTopicMatched>
 80155a6:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d01a      	beq.n	80155e2 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 80155ac:	68fa      	ldr	r2, [r7, #12]
 80155ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155b0:	3305      	adds	r3, #5
 80155b2:	00db      	lsls	r3, r3, #3
 80155b4:	4413      	add	r3, r2
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d012      	beq.n	80155e2 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 80155bc:	f107 0318 	add.w	r3, r7, #24
 80155c0:	687a      	ldr	r2, [r7, #4]
 80155c2:	68b9      	ldr	r1, [r7, #8]
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7ff fddf 	bl	8015188 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 80155ca:	68fa      	ldr	r2, [r7, #12]
 80155cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ce:	3305      	adds	r3, #5
 80155d0:	00db      	lsls	r3, r3, #3
 80155d2:	4413      	add	r3, r2
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	f107 0218 	add.w	r2, r7, #24
 80155da:	4610      	mov	r0, r2
 80155dc:	4798      	blx	r3
                rc = MQTT_SUCCESS;
 80155de:	2300      	movs	r3, #0
 80155e0:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80155e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155e4:	3301      	adds	r3, #1
 80155e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80155e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ea:	2b04      	cmp	r3, #4
 80155ec:	ddbf      	ble.n	801556e <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80155ee:	6a3b      	ldr	r3, [r7, #32]
 80155f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f4:	d112      	bne.n	801561c <deliverMessage+0xc6>
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00e      	beq.n	801561c <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80155fe:	f107 0310 	add.w	r3, r7, #16
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	68b9      	ldr	r1, [r7, #8]
 8015606:	4618      	mov	r0, r3
 8015608:	f7ff fdbe 	bl	8015188 <NewMessageData>
        c->defaultMessageHandler(&md);
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015610:	f107 0210 	add.w	r2, r7, #16
 8015614:	4610      	mov	r0, r2
 8015616:	4798      	blx	r3
        rc = MQTT_SUCCESS;
 8015618:	2300      	movs	r3, #0
 801561a:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801561c:	6a3b      	ldr	r3, [r7, #32]
}
 801561e:	4618      	mov	r0, r3
 8015620:	3728      	adds	r7, #40	@ 0x28
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}

08015626 <keepalive>:


int keepalive(MQTTClient* c)
{
 8015626:	b580      	push	{r7, lr}
 8015628:	b086      	sub	sp, #24
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCCESS;
 801562e:	2300      	movs	r3, #0
 8015630:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	699b      	ldr	r3, [r3, #24]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d03e      	beq.n	80156b8 <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	3358      	adds	r3, #88	@ 0x58
 801563e:	4618      	mov	r0, r3
 8015640:	f000 fc6c 	bl	8015f1c <TimerIsExpired>
 8015644:	4603      	mov	r3, r0
 8015646:	2b00      	cmp	r3, #0
 8015648:	d107      	bne.n	801565a <keepalive+0x34>
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	3360      	adds	r3, #96	@ 0x60
 801564e:	4618      	mov	r0, r3
 8015650:	f000 fc64 	bl	8015f1c <TimerIsExpired>
 8015654:	4603      	mov	r3, r0
 8015656:	2b00      	cmp	r3, #0
 8015658:	d030      	beq.n	80156bc <keepalive+0x96>
    {
        if (c->ping_outstanding)
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	7f1b      	ldrb	r3, [r3, #28]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d003      	beq.n	801566a <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8015662:	f04f 33ff 	mov.w	r3, #4294967295
 8015666:	617b      	str	r3, [r7, #20]
 8015668:	e029      	b.n	80156be <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 801566a:	f107 0308 	add.w	r3, r7, #8
 801566e:	4618      	mov	r0, r3
 8015670:	f000 fca4 	bl	8015fbc <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8015674:	f107 0308 	add.w	r3, r7, #8
 8015678:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801567c:	4618      	mov	r0, r3
 801567e:	f000 fc61 	bl	8015f44 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	691a      	ldr	r2, [r3, #16]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	689b      	ldr	r3, [r3, #8]
 801568a:	4619      	mov	r1, r3
 801568c:	4610      	mov	r0, r2
 801568e:	f000 ff3f 	bl	8016510 <MQTTSerialize_pingreq>
 8015692:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCCESS) // send the ping packet
 8015694:	693b      	ldr	r3, [r7, #16]
 8015696:	2b00      	cmp	r3, #0
 8015698:	dd11      	ble.n	80156be <keepalive+0x98>
 801569a:	f107 0308 	add.w	r3, r7, #8
 801569e:	461a      	mov	r2, r3
 80156a0:	6939      	ldr	r1, [r7, #16]
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7ff fd99 	bl	80151da <sendPacket>
 80156a8:	6178      	str	r0, [r7, #20]
 80156aa:	697b      	ldr	r3, [r7, #20]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d106      	bne.n	80156be <keepalive+0x98>
                c->ping_outstanding = 1;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2201      	movs	r2, #1
 80156b4:	771a      	strb	r2, [r3, #28]
 80156b6:	e002      	b.n	80156be <keepalive+0x98>
        goto exit;
 80156b8:	bf00      	nop
 80156ba:	e000      	b.n	80156be <keepalive+0x98>
        }
    }

exit:
 80156bc:	bf00      	nop
    return rc;
 80156be:	697b      	ldr	r3, [r7, #20]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3718      	adds	r7, #24
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 80156c8:	b480      	push	{r7}
 80156ca:	b085      	sub	sp, #20
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
    int i = 0;
 80156d0:	2300      	movs	r3, #0
 80156d2:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80156d4:	2300      	movs	r3, #0
 80156d6:	60fb      	str	r3, [r7, #12]
 80156d8:	e008      	b.n	80156ec <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	68fa      	ldr	r2, [r7, #12]
 80156de:	3205      	adds	r2, #5
 80156e0:	2100      	movs	r1, #0
 80156e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	3301      	adds	r3, #1
 80156ea:	60fb      	str	r3, [r7, #12]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2b04      	cmp	r3, #4
 80156f0:	ddf3      	ble.n	80156da <MQTTCleanSession+0x12>
}
 80156f2:	bf00      	nop
 80156f4:	bf00      	nop
 80156f6:	3714      	adds	r7, #20
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bc80      	pop	{r7}
 80156fc:	4770      	bx	lr

080156fe <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 80156fe:	b580      	push	{r7, lr}
 8015700:	b082      	sub	sp, #8
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	2200      	movs	r2, #0
 801570a:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	2200      	movs	r2, #0
 8015710:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015716:	2b00      	cmp	r3, #0
 8015718:	d002      	beq.n	8015720 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f7ff ffd4 	bl	80156c8 <MQTTCleanSession>
}
 8015720:	bf00      	nop
 8015722:	3708      	adds	r7, #8
 8015724:	46bd      	mov	sp, r7
 8015726:	bd80      	pop	{r7, pc}

08015728 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8015728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801572a:	b095      	sub	sp, #84	@ 0x54
 801572c:	af06      	add	r7, sp, #24
 801572e:	6078      	str	r0, [r7, #4]
 8015730:	6039      	str	r1, [r7, #0]
    int len = 0,
 8015732:	2300      	movs	r3, #0
 8015734:	637b      	str	r3, [r7, #52]	@ 0x34
        rc = MQTT_SUCCESS;
 8015736:	2300      	movs	r3, #0
 8015738:	633b      	str	r3, [r7, #48]	@ 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 801573a:	6839      	ldr	r1, [r7, #0]
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7ff fe1e 	bl	801537e <readPacket>
 8015742:	62f8      	str	r0, [r7, #44]	@ 0x2c

    switch (packet_type)
 8015744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015746:	2b0d      	cmp	r3, #13
 8015748:	d81e      	bhi.n	8015788 <cycle+0x60>
 801574a:	a201      	add	r2, pc, #4	@ (adr r2, 8015750 <cycle+0x28>)
 801574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015750:	080158df 	.word	0x080158df
 8015754:	08015789 	.word	0x08015789
 8015758:	080158df 	.word	0x080158df
 801575c:	0801578f 	.word	0x0801578f
 8015760:	080158df 	.word	0x080158df
 8015764:	0801585b 	.word	0x0801585b
 8015768:	0801585b 	.word	0x0801585b
 801576c:	080158df 	.word	0x080158df
 8015770:	08015789 	.word	0x08015789
 8015774:	080158df 	.word	0x080158df
 8015778:	08015789 	.word	0x08015789
 801577c:	080158df 	.word	0x080158df
 8015780:	08015789 	.word	0x08015789
 8015784:	080158d7 	.word	0x080158d7
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8015788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801578a:	633b      	str	r3, [r7, #48]	@ 0x30
            goto exit;
 801578c:	e0b9      	b.n	8015902 <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 801578e:	2300      	movs	r3, #0
 8015790:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8015796:	687a      	ldr	r2, [r7, #4]
 8015798:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801579a:	4616      	mov	r6, r2
 801579c:	f107 0210 	add.w	r2, r7, #16
 80157a0:	1d15      	adds	r5, r2, #4
 80157a2:	f107 0210 	add.w	r2, r7, #16
 80157a6:	1c54      	adds	r4, r2, #1
 80157a8:	f107 010c 	add.w	r1, r7, #12
 80157ac:	f107 0210 	add.w	r2, r7, #16
 80157b0:	1c90      	adds	r0, r2, #2
 80157b2:	9604      	str	r6, [sp, #16]
 80157b4:	9303      	str	r3, [sp, #12]
 80157b6:	f107 0310 	add.w	r3, r7, #16
 80157ba:	330c      	adds	r3, #12
 80157bc:	9302      	str	r3, [sp, #8]
 80157be:	f107 0310 	add.w	r3, r7, #16
 80157c2:	3308      	adds	r3, #8
 80157c4:	9301      	str	r3, [sp, #4]
 80157c6:	f107 0320 	add.w	r3, r7, #32
 80157ca:	9300      	str	r3, [sp, #0]
 80157cc:	462b      	mov	r3, r5
 80157ce:	4622      	mov	r2, r4
 80157d0:	f000 fead 	bl	801652e <MQTTDeserialize_publish>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b01      	cmp	r3, #1
 80157d8:	f040 8090 	bne.w	80158fc <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80157e2:	f107 0210 	add.w	r2, r7, #16
 80157e6:	f107 0320 	add.w	r3, r7, #32
 80157ea:	4619      	mov	r1, r3
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7ff feb2 	bl	8015556 <deliverMessage>
            if (msg.qos != QOS0)
 80157f2:	7c3b      	ldrb	r3, [r7, #16]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d074      	beq.n	80158e2 <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 80157f8:	7c3b      	ldrb	r3, [r7, #16]
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d10c      	bne.n	8015818 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6918      	ldr	r0, [r3, #16]
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	689b      	ldr	r3, [r3, #8]
 8015806:	4619      	mov	r1, r3
 8015808:	8abb      	ldrh	r3, [r7, #20]
 801580a:	9300      	str	r3, [sp, #0]
 801580c:	2300      	movs	r3, #0
 801580e:	2204      	movs	r2, #4
 8015810:	f001 f9e1 	bl	8016bd6 <MQTTSerialize_ack>
 8015814:	6378      	str	r0, [r7, #52]	@ 0x34
 8015816:	e00e      	b.n	8015836 <cycle+0x10e>
                else if (msg.qos == QOS2)
 8015818:	7c3b      	ldrb	r3, [r7, #16]
 801581a:	2b02      	cmp	r3, #2
 801581c:	d10b      	bne.n	8015836 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6918      	ldr	r0, [r3, #16]
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	689b      	ldr	r3, [r3, #8]
 8015826:	4619      	mov	r1, r3
 8015828:	8abb      	ldrh	r3, [r7, #20]
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	2300      	movs	r3, #0
 801582e:	2205      	movs	r2, #5
 8015830:	f001 f9d1 	bl	8016bd6 <MQTTSerialize_ack>
 8015834:	6378      	str	r0, [r7, #52]	@ 0x34
                if (len <= 0)
 8015836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015838:	2b00      	cmp	r3, #0
 801583a:	dc03      	bgt.n	8015844 <cycle+0x11c>
                    rc = FAILURE;
 801583c:	f04f 33ff 	mov.w	r3, #4294967295
 8015840:	633b      	str	r3, [r7, #48]	@ 0x30
 8015842:	e005      	b.n	8015850 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8015844:	683a      	ldr	r2, [r7, #0]
 8015846:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f7ff fcc6 	bl	80151da <sendPacket>
 801584e:	6338      	str	r0, [r7, #48]	@ 0x30
                if (rc == FAILURE)
 8015850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015856:	d144      	bne.n	80158e2 <cycle+0x1ba>
                    goto exit; // there was a problem
 8015858:	e053      	b.n	8015902 <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801585a:	687b      	ldr	r3, [r7, #4]
 801585c:	695c      	ldr	r4, [r3, #20]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	f107 020a 	add.w	r2, r7, #10
 8015866:	f107 0109 	add.w	r1, r7, #9
 801586a:	f107 0008 	add.w	r0, r7, #8
 801586e:	9300      	str	r3, [sp, #0]
 8015870:	4623      	mov	r3, r4
 8015872:	f000 fece 	bl	8016612 <MQTTDeserialize_ack>
 8015876:	4603      	mov	r3, r0
 8015878:	2b01      	cmp	r3, #1
 801587a:	d003      	beq.n	8015884 <cycle+0x15c>
                rc = FAILURE;
 801587c:	f04f 33ff 	mov.w	r3, #4294967295
 8015880:	633b      	str	r3, [r7, #48]	@ 0x30
 8015882:	e023      	b.n	80158cc <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6918      	ldr	r0, [r3, #16]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	4619      	mov	r1, r3
 801588e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015890:	2b05      	cmp	r3, #5
 8015892:	d101      	bne.n	8015898 <cycle+0x170>
 8015894:	2206      	movs	r2, #6
 8015896:	e000      	b.n	801589a <cycle+0x172>
 8015898:	2207      	movs	r2, #7
 801589a:	897b      	ldrh	r3, [r7, #10]
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	2300      	movs	r3, #0
 80158a0:	f001 f999 	bl	8016bd6 <MQTTSerialize_ack>
 80158a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80158a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	dc03      	bgt.n	80158b4 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 80158ac:	f04f 33ff 	mov.w	r3, #4294967295
 80158b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80158b2:	e00b      	b.n	80158cc <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCCESS) // send the PUBREL packet
 80158b4:	683a      	ldr	r2, [r7, #0]
 80158b6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f7ff fc8e 	bl	80151da <sendPacket>
 80158be:	6338      	str	r0, [r7, #48]	@ 0x30
 80158c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d002      	beq.n	80158cc <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 80158c6:	f04f 33ff 	mov.w	r3, #4294967295
 80158ca:	633b      	str	r3, [r7, #48]	@ 0x30
            if (rc == FAILURE)
 80158cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158d2:	d108      	bne.n	80158e6 <cycle+0x1be>
                goto exit; // there was a problem
 80158d4:	e015      	b.n	8015902 <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2200      	movs	r2, #0
 80158da:	771a      	strb	r2, [r3, #28]
            break;
 80158dc:	e004      	b.n	80158e8 <cycle+0x1c0>
            break;
 80158de:	bf00      	nop
 80158e0:	e002      	b.n	80158e8 <cycle+0x1c0>
            break;
 80158e2:	bf00      	nop
 80158e4:	e000      	b.n	80158e8 <cycle+0x1c0>
            break;
 80158e6:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCCESS) {
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff fe9c 	bl	8015626 <keepalive>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d005      	beq.n	8015900 <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 80158f4:	f04f 33ff 	mov.w	r3, #4294967295
 80158f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80158fa:	e002      	b.n	8015902 <cycle+0x1da>
                goto exit;
 80158fc:	bf00      	nop
 80158fe:	e000      	b.n	8015902 <cycle+0x1da>
    }

exit:
 8015900:	bf00      	nop
    if (rc == MQTT_SUCCESS)
 8015902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015904:	2b00      	cmp	r3, #0
 8015906:	d102      	bne.n	801590e <cycle+0x1e6>
        rc = packet_type;
 8015908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801590a:	633b      	str	r3, [r7, #48]	@ 0x30
 801590c:	e006      	b.n	801591c <cycle+0x1f4>
    else if (c->isconnected)
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6a1b      	ldr	r3, [r3, #32]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d002      	beq.n	801591c <cycle+0x1f4>
        MQTTCloseSession(c);
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7ff fef1 	bl	80156fe <MQTTCloseSession>
    return rc;
 801591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801591e:	4618      	mov	r0, r3
 8015920:	373c      	adds	r7, #60	@ 0x3c
 8015922:	46bd      	mov	sp, r7
 8015924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015926:	bf00      	nop

08015928 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b086      	sub	sp, #24
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCCESS;
 8015932:	2300      	movs	r3, #0
 8015934:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8015936:	f107 030c 	add.w	r3, r7, #12
 801593a:	4618      	mov	r0, r3
 801593c:	f000 fb3e 	bl	8015fbc <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8015940:	683a      	ldr	r2, [r7, #0]
 8015942:	f107 030c 	add.w	r3, r7, #12
 8015946:	4611      	mov	r1, r2
 8015948:	4618      	mov	r0, r3
 801594a:	f000 fafb 	bl	8015f44 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 801594e:	f107 030c 	add.w	r3, r7, #12
 8015952:	4619      	mov	r1, r3
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f7ff fee7 	bl	8015728 <cycle>
 801595a:	4603      	mov	r3, r0
 801595c:	2b00      	cmp	r3, #0
 801595e:	da03      	bge.n	8015968 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8015960:	f04f 33ff 	mov.w	r3, #4294967295
 8015964:	617b      	str	r3, [r7, #20]
            break;
 8015966:	e007      	b.n	8015978 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8015968:	f107 030c 	add.w	r3, r7, #12
 801596c:	4618      	mov	r0, r3
 801596e:	f000 fad5 	bl	8015f1c <TimerIsExpired>
 8015972:	4603      	mov	r3, r0
 8015974:	2b00      	cmp	r3, #0
 8015976:	d0ea      	beq.n	801594e <MQTTYield+0x26>

    return rc;
 8015978:	697b      	ldr	r3, [r7, #20]
}
 801597a:	4618      	mov	r0, r3
 801597c:	3718      	adds	r7, #24
 801597e:	46bd      	mov	sp, r7
 8015980:	bd80      	pop	{r7, pc}

08015982 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8015982:	b580      	push	{r7, lr}
 8015984:	b086      	sub	sp, #24
 8015986:	af00      	add	r7, sp, #0
 8015988:	60f8      	str	r0, [r7, #12]
 801598a:	60b9      	str	r1, [r7, #8]
 801598c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801598e:	f04f 33ff 	mov.w	r3, #4294967295
 8015992:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f000 fac1 	bl	8015f1c <TimerIsExpired>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	d10c      	bne.n	80159ba <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 80159a0:	6879      	ldr	r1, [r7, #4]
 80159a2:	68f8      	ldr	r0, [r7, #12]
 80159a4:	f7ff fec0 	bl	8015728 <cycle>
 80159a8:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 80159aa:	697a      	ldr	r2, [r7, #20]
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d004      	beq.n	80159bc <waitfor+0x3a>
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	daed      	bge.n	8015994 <waitfor+0x12>
 80159b8:	e000      	b.n	80159bc <waitfor+0x3a>
            break; // we timed out
 80159ba:	bf00      	nop

    return rc;
 80159bc:	697b      	ldr	r3, [r7, #20]
}
 80159be:	4618      	mov	r0, r3
 80159c0:	3718      	adds	r7, #24
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
	...

080159c8 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b09e      	sub	sp, #120	@ 0x78
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 80159d4:	f04f 33ff 	mov.w	r3, #4294967295
 80159d8:	677b      	str	r3, [r7, #116]	@ 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 80159da:	4a43      	ldr	r2, [pc, #268]	@ (8015ae8 <MQTTConnectWithResults+0x120>)
 80159dc:	f107 0310 	add.w	r3, r7, #16
 80159e0:	4611      	mov	r1, r2
 80159e2:	2258      	movs	r2, #88	@ 0x58
 80159e4:	4618      	mov	r0, r3
 80159e6:	f001 fe1a 	bl	801761e <memcpy>
    int len = 0;
 80159ea:	2300      	movs	r3, #0
 80159ec:	673b      	str	r3, [r7, #112]	@ 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	6a1b      	ldr	r3, [r3, #32]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d164      	bne.n	8015ac0 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 80159f6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80159fa:	4618      	mov	r0, r3
 80159fc:	f000 fade 	bl	8015fbc <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	685a      	ldr	r2, [r3, #4]
 8015a04:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8015a08:	4611      	mov	r1, r2
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f000 fa9a 	bl	8015f44 <TimerCountdownMS>

    if (options == 0)
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d102      	bne.n	8015a1c <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8015a16:	f107 0310 	add.w	r3, r7, #16
 8015a1a:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8015a1c:	68bb      	ldr	r3, [r7, #8]
 8015a1e:	8b1b      	ldrh	r3, [r3, #24]
 8015a20:	461a      	mov	r2, r3
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	7e9b      	ldrb	r3, [r3, #26]
 8015a2a:	461a      	mov	r2, r3
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	699b      	ldr	r3, [r3, #24]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	f000 fa93 	bl	8015f68 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	6918      	ldr	r0, [r3, #16]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	689b      	ldr	r3, [r3, #8]
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	f000 fbd7 	bl	8016200 <MQTTSerialize_connect>
 8015a52:	6738      	str	r0, [r7, #112]	@ 0x70
 8015a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	dd34      	ble.n	8015ac4 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCCESS)  // send the connect packet
 8015a5a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8015a5e:	461a      	mov	r2, r3
 8015a60:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8015a62:	68f8      	ldr	r0, [r7, #12]
 8015a64:	f7ff fbb9 	bl	80151da <sendPacket>
 8015a68:	6778      	str	r0, [r7, #116]	@ 0x74
 8015a6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d12b      	bne.n	8015ac8 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8015a70:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8015a74:	461a      	mov	r2, r3
 8015a76:	2102      	movs	r1, #2
 8015a78:	68f8      	ldr	r0, [r7, #12]
 8015a7a:	f7ff ff82 	bl	8015982 <waitfor>
 8015a7e:	4603      	mov	r3, r0
 8015a80:	2b02      	cmp	r3, #2
 8015a82:	d119      	bne.n	8015ab8 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	2200      	movs	r2, #0
 8015a88:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2200      	movs	r2, #0
 8015a8e:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	1c58      	adds	r0, r3, #1
 8015a94:	6879      	ldr	r1, [r7, #4]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	695a      	ldr	r2, [r3, #20]
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	68db      	ldr	r3, [r3, #12]
 8015a9e:	f000 fc9b 	bl	80163d8 <MQTTDeserialize_connack>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	2b01      	cmp	r3, #1
 8015aa6:	d103      	bne.n	8015ab0 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	781b      	ldrb	r3, [r3, #0]
 8015aac:	677b      	str	r3, [r7, #116]	@ 0x74
 8015aae:	e00c      	b.n	8015aca <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8015ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ab4:	677b      	str	r3, [r7, #116]	@ 0x74
 8015ab6:	e008      	b.n	8015aca <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8015ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8015abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8015abe:	e004      	b.n	8015aca <MQTTConnectWithResults+0x102>
		  goto exit;
 8015ac0:	bf00      	nop
 8015ac2:	e002      	b.n	8015aca <MQTTConnectWithResults+0x102>
        goto exit;
 8015ac4:	bf00      	nop
 8015ac6:	e000      	b.n	8015aca <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8015ac8:	bf00      	nop

exit:
    if (rc == MQTT_SUCCESS)
 8015aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d105      	bne.n	8015adc <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	2201      	movs	r2, #1
 8015ad4:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8015adc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3778      	adds	r7, #120	@ 0x78
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	0801aac4 	.word	0x0801aac4

08015aec <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b084      	sub	sp, #16
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
 8015af4:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8015af6:	f107 030c 	add.w	r3, r7, #12
 8015afa:	461a      	mov	r2, r3
 8015afc:	6839      	ldr	r1, [r7, #0]
 8015afe:	6878      	ldr	r0, [r7, #4]
 8015b00:	f7ff ff62 	bl	80159c8 <MQTTConnectWithResults>
 8015b04:	4603      	mov	r3, r0
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3710      	adds	r7, #16
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}

08015b0e <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8015b0e:	b580      	push	{r7, lr}
 8015b10:	b086      	sub	sp, #24
 8015b12:	af00      	add	r7, sp, #0
 8015b14:	60f8      	str	r0, [r7, #12]
 8015b16:	60b9      	str	r1, [r7, #8]
 8015b18:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8015b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8015b1e:	617b      	str	r3, [r7, #20]
    int i = -1;
 8015b20:	f04f 33ff 	mov.w	r3, #4294967295
 8015b24:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015b26:	2300      	movs	r3, #0
 8015b28:	613b      	str	r3, [r7, #16]
 8015b2a:	e028      	b.n	8015b7e <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	693a      	ldr	r2, [r7, #16]
 8015b30:	3205      	adds	r2, #5
 8015b32:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d01e      	beq.n	8015b78 <MQTTSetMessageHandler+0x6a>
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	693a      	ldr	r2, [r7, #16]
 8015b3e:	3205      	adds	r2, #5
 8015b40:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015b44:	68b9      	ldr	r1, [r7, #8]
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7ea fb72 	bl	8000230 <strcmp>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d112      	bne.n	8015b78 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d10c      	bne.n	8015b72 <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	693a      	ldr	r2, [r7, #16]
 8015b5c:	3205      	adds	r2, #5
 8015b5e:	2100      	movs	r1, #0
 8015b60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	3305      	adds	r3, #5
 8015b6a:	00db      	lsls	r3, r3, #3
 8015b6c:	4413      	add	r3, r2
 8015b6e:	2200      	movs	r2, #0
 8015b70:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCCESS; /* return i when adding new subscription */
 8015b72:	2300      	movs	r3, #0
 8015b74:	617b      	str	r3, [r7, #20]
            break;
 8015b76:	e005      	b.n	8015b84 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015b78:	693b      	ldr	r3, [r7, #16]
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	613b      	str	r3, [r7, #16]
 8015b7e:	693b      	ldr	r3, [r7, #16]
 8015b80:	2b04      	cmp	r3, #4
 8015b82:	ddd3      	ble.n	8015b2c <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d026      	beq.n	8015bd8 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b90:	d112      	bne.n	8015bb8 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015b92:	2300      	movs	r3, #0
 8015b94:	613b      	str	r3, [r7, #16]
 8015b96:	e00c      	b.n	8015bb2 <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	693a      	ldr	r2, [r7, #16]
 8015b9c:	3205      	adds	r2, #5
 8015b9e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d102      	bne.n	8015bac <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCCESS;
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	617b      	str	r3, [r7, #20]
                    break;
 8015baa:	e005      	b.n	8015bb8 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	3301      	adds	r3, #1
 8015bb0:	613b      	str	r3, [r7, #16]
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	2b04      	cmp	r3, #4
 8015bb6:	ddef      	ble.n	8015b98 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8015bb8:	693b      	ldr	r3, [r7, #16]
 8015bba:	2b04      	cmp	r3, #4
 8015bbc:	dc0c      	bgt.n	8015bd8 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	693a      	ldr	r2, [r7, #16]
 8015bc2:	3205      	adds	r2, #5
 8015bc4:	68b9      	ldr	r1, [r7, #8]
 8015bc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8015bca:	68fa      	ldr	r2, [r7, #12]
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	3305      	adds	r3, #5
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	4413      	add	r3, r2
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8015bd8:	697b      	ldr	r3, [r7, #20]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3718      	adds	r7, #24
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}

08015be2 <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8015be2:	b5b0      	push	{r4, r5, r7, lr}
 8015be4:	b092      	sub	sp, #72	@ 0x48
 8015be6:	af04      	add	r7, sp, #16
 8015be8:	60f8      	str	r0, [r7, #12]
 8015bea:	60b9      	str	r1, [r7, #8]
 8015bec:	603b      	str	r3, [r7, #0]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8015bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf6:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    int len = 0;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    MQTTString topic = MQTTString_initializer;
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	61fb      	str	r3, [r7, #28]
 8015c00:	2300      	movs	r3, #0
 8015c02:	623b      	str	r3, [r7, #32]
 8015c04:	2300      	movs	r3, #0
 8015c06:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicFilter;
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	6a1b      	ldr	r3, [r3, #32]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d063      	beq.n	8015cdc <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 8015c14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f000 f9cf 	bl	8015fbc <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	685a      	ldr	r2, [r3, #4]
 8015c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015c26:	4611      	mov	r1, r2
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f000 f98b 	bl	8015f44 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	691c      	ldr	r4, [r3, #16]
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	689b      	ldr	r3, [r3, #8]
 8015c36:	461d      	mov	r5, r3
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f7ff fab6 	bl	80151aa <getNextPacketId>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	1dfb      	adds	r3, r7, #7
 8015c44:	9302      	str	r3, [sp, #8]
 8015c46:	f107 031c 	add.w	r3, r7, #28
 8015c4a:	9301      	str	r3, [sp, #4]
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	9300      	str	r3, [sp, #0]
 8015c50:	4613      	mov	r3, r2
 8015c52:	2200      	movs	r2, #0
 8015c54:	4629      	mov	r1, r5
 8015c56:	4620      	mov	r0, r4
 8015c58:	f001 f839 	bl	8016cce <MQTTSerialize_subscribe>
 8015c5c:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8015c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	dd3d      	ble.n	8015ce0 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8015c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015c68:	461a      	mov	r2, r3
 8015c6a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015c6c:	68f8      	ldr	r0, [r7, #12]
 8015c6e:	f7ff fab4 	bl	80151da <sendPacket>
 8015c72:	6378      	str	r0, [r7, #52]	@ 0x34
 8015c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d134      	bne.n	8015ce4 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8015c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015c7e:	461a      	mov	r2, r3
 8015c80:	2109      	movs	r1, #9
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f7ff fe7d 	bl	8015982 <waitfor>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	2b09      	cmp	r3, #9
 8015c8c:	d122      	bne.n	8015cd4 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8015c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015c94:	2200      	movs	r2, #0
 8015c96:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8015c98:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	695b      	ldr	r3, [r3, #20]
 8015c9e:	68fa      	ldr	r2, [r7, #12]
 8015ca0:	68d2      	ldr	r2, [r2, #12]
 8015ca2:	4614      	mov	r4, r2
 8015ca4:	f107 0218 	add.w	r2, r7, #24
 8015ca8:	f107 0016 	add.w	r0, r7, #22
 8015cac:	9401      	str	r4, [sp, #4]
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	460b      	mov	r3, r1
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	f001 f887 	bl	8016dc6 <MQTTDeserialize_suback>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d113      	bne.n	8015ce6 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8015cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015cc0:	781b      	ldrb	r3, [r3, #0]
 8015cc2:	2b80      	cmp	r3, #128	@ 0x80
 8015cc4:	d00f      	beq.n	8015ce6 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8015cc6:	683a      	ldr	r2, [r7, #0]
 8015cc8:	68b9      	ldr	r1, [r7, #8]
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	f7ff ff1f 	bl	8015b0e <MQTTSetMessageHandler>
 8015cd0:	6378      	str	r0, [r7, #52]	@ 0x34
 8015cd2:	e008      	b.n	8015ce6 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 8015cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8015cda:	e004      	b.n	8015ce6 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 8015cdc:	bf00      	nop
 8015cde:	e002      	b.n	8015ce6 <MQTTSubscribeWithResults+0x104>
        goto exit;
 8015ce0:	bf00      	nop
 8015ce2:	e000      	b.n	8015ce6 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 8015ce4:	bf00      	nop

exit:
    if (rc == FAILURE)
 8015ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cec:	d102      	bne.n	8015cf4 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f7ff fd05 	bl	80156fe <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8015cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3738      	adds	r7, #56	@ 0x38
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bdb0      	pop	{r4, r5, r7, pc}

08015cfe <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	b088      	sub	sp, #32
 8015d02:	af02      	add	r7, sp, #8
 8015d04:	60f8      	str	r0, [r7, #12]
 8015d06:	60b9      	str	r1, [r7, #8]
 8015d08:	603b      	str	r3, [r7, #0]
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8015d0e:	79fa      	ldrb	r2, [r7, #7]
 8015d10:	f107 0314 	add.w	r3, r7, #20
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	68b9      	ldr	r1, [r7, #8]
 8015d1a:	68f8      	ldr	r0, [r7, #12]
 8015d1c:	f7ff ff61 	bl	8015be2 <MQTTSubscribeWithResults>
 8015d20:	4603      	mov	r3, r0
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3718      	adds	r7, #24
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}

08015d2a <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 8015d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d2c:	b097      	sub	sp, #92	@ 0x5c
 8015d2e:	af08      	add	r7, sp, #32
 8015d30:	60f8      	str	r0, [r7, #12]
 8015d32:	60b9      	str	r1, [r7, #8]
 8015d34:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8015d36:	f04f 33ff 	mov.w	r3, #4294967295
 8015d3a:	637b      	str	r3, [r7, #52]	@ 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	61fb      	str	r3, [r7, #28]
 8015d40:	2300      	movs	r3, #0
 8015d42:	623b      	str	r3, [r7, #32]
 8015d44:	2300      	movs	r3, #0
 8015d46:	627b      	str	r3, [r7, #36]	@ 0x24
    topic.cstring = (char *)topicName;
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	61fb      	str	r3, [r7, #28]
    int len = 0;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	6a1b      	ldr	r3, [r3, #32]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	f000 809b 	beq.w	8015e90 <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 8015d5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f000 f92c 	bl	8015fbc <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	685a      	ldr	r2, [r3, #4]
 8015d68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015d6c:	4611      	mov	r1, r2
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f000 f8e8 	bl	8015f44 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	781b      	ldrb	r3, [r3, #0]
 8015d78:	2b01      	cmp	r3, #1
 8015d7a:	d003      	beq.n	8015d84 <MQTTPublish+0x5a>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	2b02      	cmp	r3, #2
 8015d82:	d106      	bne.n	8015d92 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8015d84:	68f8      	ldr	r0, [r7, #12]
 8015d86:	f7ff fa10 	bl	80151aa <getNextPacketId>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	b29a      	uxth	r2, r3
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	691b      	ldr	r3, [r3, #16]
 8015d96:	603b      	str	r3, [r7, #0]
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	469c      	mov	ip, r3
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	469e      	mov	lr, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	785d      	ldrb	r5, [r3, #1]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	689b      	ldr	r3, [r3, #8]
 8015db0:	687a      	ldr	r2, [r7, #4]
 8015db2:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8015db4:	9206      	str	r2, [sp, #24]
 8015db6:	9305      	str	r3, [sp, #20]
 8015db8:	ac02      	add	r4, sp, #8
 8015dba:	f107 031c 	add.w	r3, r7, #28
 8015dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015dc6:	9601      	str	r6, [sp, #4]
 8015dc8:	9500      	str	r5, [sp, #0]
 8015dca:	4673      	mov	r3, lr
 8015dcc:	2200      	movs	r2, #0
 8015dce:	4661      	mov	r1, ip
 8015dd0:	6838      	ldr	r0, [r7, #0]
 8015dd2:	f000 fe8a 	bl	8016aea <MQTTSerialize_publish>
 8015dd6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (len <= 0)
 8015dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	dd5a      	ble.n	8015e94 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCCESS) // send the subscribe packet
 8015dde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015de2:	461a      	mov	r2, r3
 8015de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	f7ff f9f7 	bl	80151da <sendPacket>
 8015dec:	6378      	str	r0, [r7, #52]	@ 0x34
 8015dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d151      	bne.n	8015e98 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	2b01      	cmp	r3, #1
 8015dfa:	d122      	bne.n	8015e42 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 8015dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015e00:	461a      	mov	r2, r3
 8015e02:	2104      	movs	r1, #4
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f7ff fdbc 	bl	8015982 <waitfor>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b04      	cmp	r3, #4
 8015e0e:	d114      	bne.n	8015e3a <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	695c      	ldr	r4, [r3, #20]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	68db      	ldr	r3, [r3, #12]
 8015e18:	f107 021a 	add.w	r2, r7, #26
 8015e1c:	f107 0119 	add.w	r1, r7, #25
 8015e20:	f107 0018 	add.w	r0, r7, #24
 8015e24:	9300      	str	r3, [sp, #0]
 8015e26:	4623      	mov	r3, r4
 8015e28:	f000 fbf3 	bl	8016612 <MQTTDeserialize_ack>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d035      	beq.n	8015e9e <MQTTPublish+0x174>
                rc = FAILURE;
 8015e32:	f04f 33ff 	mov.w	r3, #4294967295
 8015e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e38:	e031      	b.n	8015e9e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8015e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8015e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e40:	e02d      	b.n	8015e9e <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	2b02      	cmp	r3, #2
 8015e48:	d128      	bne.n	8015e9c <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 8015e4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015e4e:	461a      	mov	r2, r3
 8015e50:	2107      	movs	r1, #7
 8015e52:	68f8      	ldr	r0, [r7, #12]
 8015e54:	f7ff fd95 	bl	8015982 <waitfor>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b07      	cmp	r3, #7
 8015e5c:	d114      	bne.n	8015e88 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	695c      	ldr	r4, [r3, #20]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	68db      	ldr	r3, [r3, #12]
 8015e66:	f107 0216 	add.w	r2, r7, #22
 8015e6a:	f107 0115 	add.w	r1, r7, #21
 8015e6e:	f107 0014 	add.w	r0, r7, #20
 8015e72:	9300      	str	r3, [sp, #0]
 8015e74:	4623      	mov	r3, r4
 8015e76:	f000 fbcc 	bl	8016612 <MQTTDeserialize_ack>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	2b01      	cmp	r3, #1
 8015e7e:	d00e      	beq.n	8015e9e <MQTTPublish+0x174>
                rc = FAILURE;
 8015e80:	f04f 33ff 	mov.w	r3, #4294967295
 8015e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e86:	e00a      	b.n	8015e9e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8015e88:	f04f 33ff 	mov.w	r3, #4294967295
 8015e8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8015e8e:	e006      	b.n	8015e9e <MQTTPublish+0x174>
		    goto exit;
 8015e90:	bf00      	nop
 8015e92:	e004      	b.n	8015e9e <MQTTPublish+0x174>
        goto exit;
 8015e94:	bf00      	nop
 8015e96:	e002      	b.n	8015e9e <MQTTPublish+0x174>
        goto exit; // there was a problem
 8015e98:	bf00      	nop
 8015e9a:	e000      	b.n	8015e9e <MQTTPublish+0x174>
    }

exit:
 8015e9c:	bf00      	nop
    if (rc == FAILURE)
 8015e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ea4:	d102      	bne.n	8015eac <MQTTPublish+0x182>
        MQTTCloseSession(c);
 8015ea6:	68f8      	ldr	r0, [r7, #12]
 8015ea8:	f7ff fc29 	bl	80156fe <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8015eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	373c      	adds	r7, #60	@ 0x3c
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015eb6 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b086      	sub	sp, #24
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8015ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8015ec2:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 8015ec8:	f107 0308 	add.w	r3, r7, #8
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f000 f875 	bl	8015fbc <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	685a      	ldr	r2, [r3, #4]
 8015ed6:	f107 0308 	add.w	r3, r7, #8
 8015eda:	4611      	mov	r1, r2
 8015edc:	4618      	mov	r0, r3
 8015ede:	f000 f831 	bl	8015f44 <TimerCountdownMS>

	  len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	691a      	ldr	r2, [r3, #16]
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	4619      	mov	r1, r3
 8015eec:	4610      	mov	r0, r2
 8015eee:	f000 fb00 	bl	80164f2 <MQTTSerialize_disconnect>
 8015ef2:	6138      	str	r0, [r7, #16]
    if (len > 0)
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	dd07      	ble.n	8015f0a <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 8015efa:	f107 0308 	add.w	r3, r7, #8
 8015efe:	461a      	mov	r2, r3
 8015f00:	6939      	ldr	r1, [r7, #16]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f7ff f969 	bl	80151da <sendPacket>
 8015f08:	6178      	str	r0, [r7, #20]
    MQTTCloseSession(c);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f7ff fbf7 	bl	80156fe <MQTTCloseSession>

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8015f10:	697b      	ldr	r3, [r7, #20]
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3718      	adds	r7, #24
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
	...

08015f1c <TimerIsExpired>:
#define SERVER_IP4	117

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
 8015f1c:	b480      	push	{r7}
 8015f1e:	b085      	sub	sp, #20
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	685a      	ldr	r2, [r3, #4]
 8015f28:	4b05      	ldr	r3, [pc, #20]	@ (8015f40 <TimerIsExpired+0x24>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	1ad3      	subs	r3, r2, r3
 8015f2e:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	0fdb      	lsrs	r3, r3, #31
 8015f34:	b2db      	uxtb	r3, r3
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3714      	adds	r7, #20
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bc80      	pop	{r7}
 8015f3e:	4770      	bx	lr
 8015f40:	200099d4 	.word	0x200099d4

08015f44 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8015f44:	b480      	push	{r7}
 8015f46:	b083      	sub	sp, #12
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
 8015f4c:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 8015f4e:	4b05      	ldr	r3, [pc, #20]	@ (8015f64 <TimerCountdownMS+0x20>)
 8015f50:	681a      	ldr	r2, [r3, #0]
 8015f52:	683b      	ldr	r3, [r7, #0]
 8015f54:	441a      	add	r2, r3
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	605a      	str	r2, [r3, #4]
}
 8015f5a:	bf00      	nop
 8015f5c:	370c      	adds	r7, #12
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bc80      	pop	{r7}
 8015f62:	4770      	bx	lr
 8015f64:	200099d4 	.word	0x200099d4

08015f68 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015f78:	fb03 f202 	mul.w	r2, r3, r2
 8015f7c:	4b04      	ldr	r3, [pc, #16]	@ (8015f90 <TimerCountdown+0x28>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	441a      	add	r2, r3
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	605a      	str	r2, [r3, #4]
}
 8015f86:	bf00      	nop
 8015f88:	370c      	adds	r7, #12
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bc80      	pop	{r7}
 8015f8e:	4770      	bx	lr
 8015f90:	200099d4 	.word	0x200099d4

08015f94 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 8015f94:	b480      	push	{r7}
 8015f96:	b085      	sub	sp, #20
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	685a      	ldr	r2, [r3, #4]
 8015fa0:	4b05      	ldr	r3, [pc, #20]	@ (8015fb8 <TimerLeftMS+0x24>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3714      	adds	r7, #20
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bc80      	pop	{r7}
 8015fb6:	4770      	bx	lr
 8015fb8:	200099d4 	.word	0x200099d4

08015fbc <TimerInit>:

void TimerInit(Timer *timer) {
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	2200      	movs	r2, #0
 8015fc8:	605a      	str	r2, [r3, #4]
}
 8015fca:	bf00      	nop
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	bc80      	pop	{r7}
 8015fd2:	4770      	bx	lr

08015fd4 <NewNetwork>:

#ifdef MQTT_LWIP_SOCKET
void NewNetwork(Network *n) {
 8015fd4:	b480      	push	{r7}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
	n->socket = 0; //clear
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2200      	movs	r2, #0
 8015fe0:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read; //receive function
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4a06      	ldr	r2, [pc, #24]	@ (8016000 <NewNetwork+0x2c>)
 8015fe6:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write; //send function
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	4a06      	ldr	r2, [pc, #24]	@ (8016004 <NewNetwork+0x30>)
 8015fec:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect; //disconnection function
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	4a05      	ldr	r2, [pc, #20]	@ (8016008 <NewNetwork+0x34>)
 8015ff2:	60da      	str	r2, [r3, #12]
}
 8015ff4:	bf00      	nop
 8015ff6:	370c      	adds	r7, #12
 8015ff8:	46bd      	mov	sp, r7
 8015ffa:	bc80      	pop	{r7}
 8015ffc:	4770      	bx	lr
 8015ffe:	bf00      	nop
 8016000:	080160a9 	.word	0x080160a9
 8016004:	080160f9 	.word	0x080160f9
 8016008:	0801611f 	.word	0x0801611f

0801600c <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 801600c:	b580      	push	{r7, lr}
 801600e:	b088      	sub	sp, #32
 8016010:	af00      	add	r7, sp, #0
 8016012:	60f8      	str	r0, [r7, #12]
 8016014:	60b9      	str	r1, [r7, #8]
 8016016:	607a      	str	r2, [r7, #4]
	struct sockaddr_in server_addr;

	if(n->socket)
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d004      	beq.n	801602a <ConnectNetwork+0x1e>
	{
		close(n->socket);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	4618      	mov	r0, r3
 8016026:	f7f4 f87b 	bl	800a120 <lwip_close>
	}

	n->socket = socket(PF_INET, SOCK_STREAM, 0); //create socket
 801602a:	2200      	movs	r2, #0
 801602c:	2101      	movs	r1, #1
 801602e:	2002      	movs	r0, #2
 8016030:	f7f4 fc44 	bl	800a8bc <lwip_socket>
 8016034:	4602      	mov	r2, r0
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	601a      	str	r2, [r3, #0]
	if(n->socket < 0)
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	da05      	bge.n	801604e <ConnectNetwork+0x42>
	{
		n->socket = 0;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	2200      	movs	r2, #0
 8016046:	601a      	str	r2, [r3, #0]
		return -1;
 8016048:	f04f 33ff 	mov.w	r3, #4294967295
 801604c:	e028      	b.n	80160a0 <ConnectNetwork+0x94>
	}

	memset(&server_addr, 0, sizeof(struct sockaddr_in)); //broker address info
 801604e:	f107 0310 	add.w	r3, r7, #16
 8016052:	2210      	movs	r2, #16
 8016054:	2100      	movs	r1, #0
 8016056:	4618      	mov	r0, r3
 8016058:	f001 f9f4 	bl	8017444 <memset>
	server_addr.sin_family = AF_INET;
 801605c:	2302      	movs	r3, #2
 801605e:	747b      	strb	r3, [r7, #17]
	server_addr.sin_addr.s_addr = inet_addr(ip);
 8016060:	68b8      	ldr	r0, [r7, #8]
 8016062:	f7fd fe9d 	bl	8013da0 <ipaddr_addr>
 8016066:	4603      	mov	r3, r0
 8016068:	617b      	str	r3, [r7, #20]
	server_addr.sin_port = htons(port);
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	b29b      	uxth	r3, r3
 801606e:	4618      	mov	r0, r3
 8016070:	f7f4 ffca 	bl	800b008 <lwip_htons>
 8016074:	4603      	mov	r3, r0
 8016076:	827b      	strh	r3, [r7, #18]

	if(connect(n->socket, (struct sockaddr*)&server_addr, sizeof(struct sockaddr_in)) < 0) //connect to the broker
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f107 0110 	add.w	r1, r7, #16
 8016080:	2210      	movs	r2, #16
 8016082:	4618      	mov	r0, r3
 8016084:	f7f4 f8a6 	bl	800a1d4 <lwip_connect>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	da07      	bge.n	801609e <ConnectNetwork+0x92>
	{
		close(n->socket);
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	4618      	mov	r0, r3
 8016094:	f7f4 f844 	bl	800a120 <lwip_close>
		return -1;
 8016098:	f04f 33ff 	mov.w	r3, #4294967295
 801609c:	e000      	b.n	80160a0 <ConnectNetwork+0x94>
	}
	return 0;
 801609e:	2300      	movs	r3, #0
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3720      	adds	r7, #32
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b086      	sub	sp, #24
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	607a      	str	r2, [r7, #4]
 80160b4:	603b      	str	r3, [r7, #0]
	int available;

	/* !!! LWIP_SO_RCVBUF must be enabled !!! */
	if(ioctl(n->socket, FIONREAD, &available) < 0) return -1; //check receive buffer
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	f107 0214 	add.w	r2, r7, #20
 80160be:	490d      	ldr	r1, [pc, #52]	@ (80160f4 <net_read+0x4c>)
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7f4 fd6b 	bl	800ab9c <lwip_ioctl>
 80160c6:	4603      	mov	r3, r0
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	da02      	bge.n	80160d2 <net_read+0x2a>
 80160cc:	f04f 33ff 	mov.w	r3, #4294967295
 80160d0:	e00c      	b.n	80160ec <net_read+0x44>

	if(available > 0)
 80160d2:	697b      	ldr	r3, [r7, #20]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	dd08      	ble.n	80160ea <net_read+0x42>
	{
		return recv(n->socket, buffer, len, 0);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6818      	ldr	r0, [r3, #0]
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	2300      	movs	r3, #0
 80160e0:	68b9      	ldr	r1, [r7, #8]
 80160e2:	f7f4 fabd 	bl	800a660 <lwip_recv>
 80160e6:	4603      	mov	r3, r0
 80160e8:	e000      	b.n	80160ec <net_read+0x44>
	}

	return 0;
 80160ea:	2300      	movs	r3, #0
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	3718      	adds	r7, #24
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}
 80160f4:	4004667f 	.word	0x4004667f

080160f8 <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b084      	sub	sp, #16
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	603b      	str	r3, [r7, #0]
	return send(n->socket, buffer, len, 0);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	6818      	ldr	r0, [r3, #0]
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	2300      	movs	r3, #0
 801610e:	68b9      	ldr	r1, [r7, #8]
 8016110:	f7f4 fabc 	bl	800a68c <lwip_send>
 8016114:	4603      	mov	r3, r0
}
 8016116:	4618      	mov	r0, r3
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}

0801611e <net_disconnect>:

void net_disconnect(Network *n) {
 801611e:	b580      	push	{r7, lr}
 8016120:	b082      	sub	sp, #8
 8016122:	af00      	add	r7, sp, #0
 8016124:	6078      	str	r0, [r7, #4]
	close(n->socket);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	4618      	mov	r0, r3
 801612c:	f7f3 fff8 	bl	800a120 <lwip_close>
	n->socket = 0;
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	2200      	movs	r2, #0
 8016134:	601a      	str	r2, [r3, #0]
}
 8016136:	bf00      	nop
 8016138:	3708      	adds	r7, #8
 801613a:	46bd      	mov	sp, r7
 801613c:	bd80      	pop	{r7, pc}

0801613e <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801613e:	b590      	push	{r4, r7, lr}
 8016140:	b085      	sub	sp, #20
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
	int len = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	7a1b      	ldrb	r3, [r3, #8]
 801614e:	2b03      	cmp	r3, #3
 8016150:	d102      	bne.n	8016158 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8016152:	230c      	movs	r3, #12
 8016154:	60fb      	str	r3, [r7, #12]
 8016156:	e005      	b.n	8016164 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	7a1b      	ldrb	r3, [r3, #8]
 801615c:	2b04      	cmp	r3, #4
 801615e:	d101      	bne.n	8016164 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8016160:	230a      	movs	r3, #10
 8016162:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	330c      	adds	r3, #12
 8016168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801616c:	f000 fc4d 	bl	8016a0a <MQTTstrlen>
 8016170:	4603      	mov	r3, r0
 8016172:	3302      	adds	r3, #2
 8016174:	68fa      	ldr	r2, [r7, #12]
 8016176:	4413      	add	r3, r2
 8016178:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	7edb      	ldrb	r3, [r3, #27]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d013      	beq.n	80161aa <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	3324      	adds	r3, #36	@ 0x24
 8016186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801618a:	f000 fc3e 	bl	8016a0a <MQTTstrlen>
 801618e:	4603      	mov	r3, r0
 8016190:	1c9c      	adds	r4, r3, #2
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	3330      	adds	r3, #48	@ 0x30
 8016196:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801619a:	f000 fc36 	bl	8016a0a <MQTTstrlen>
 801619e:	4603      	mov	r3, r0
 80161a0:	4423      	add	r3, r4
 80161a2:	3302      	adds	r3, #2
 80161a4:	68fa      	ldr	r2, [r7, #12]
 80161a6:	4413      	add	r3, r2
 80161a8:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d103      	bne.n	80161ba <MQTTSerialize_connectLength+0x7c>
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d00a      	beq.n	80161d0 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	3340      	adds	r3, #64	@ 0x40
 80161be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80161c2:	f000 fc22 	bl	8016a0a <MQTTstrlen>
 80161c6:	4603      	mov	r3, r0
 80161c8:	3302      	adds	r3, #2
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	4413      	add	r3, r2
 80161ce:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d103      	bne.n	80161e0 <MQTTSerialize_connectLength+0xa2>
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d00a      	beq.n	80161f6 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	334c      	adds	r3, #76	@ 0x4c
 80161e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80161e8:	f000 fc0f 	bl	8016a0a <MQTTstrlen>
 80161ec:	4603      	mov	r3, r0
 80161ee:	3302      	adds	r3, #2
 80161f0:	68fa      	ldr	r2, [r7, #12]
 80161f2:	4413      	add	r3, r2
 80161f4:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 80161f6:	68fb      	ldr	r3, [r7, #12]
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3714      	adds	r7, #20
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd90      	pop	{r4, r7, pc}

08016200 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b08a      	sub	sp, #40	@ 0x28
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8016210:	2300      	movs	r3, #0
 8016212:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8016214:	2300      	movs	r3, #0
 8016216:	617b      	str	r3, [r7, #20]
	int len = 0;
 8016218:	2300      	movs	r3, #0
 801621a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801621c:	f04f 33ff 	mov.w	r3, #4294967295
 8016220:	627b      	str	r3, [r7, #36]	@ 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f7ff ff8b 	bl	801613e <MQTTSerialize_connectLength>
 8016228:	6238      	str	r0, [r7, #32]
 801622a:	6a38      	ldr	r0, [r7, #32]
 801622c:	f000 faa6 	bl	801677c <MQTTPacket_len>
 8016230:	4602      	mov	r2, r0
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	4293      	cmp	r3, r2
 8016236:	da03      	bge.n	8016240 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016238:	f06f 0301 	mvn.w	r3, #1
 801623c:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 801623e:	e0c2      	b.n	80163c6 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 8016240:	2300      	movs	r3, #0
 8016242:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8016244:	7e3b      	ldrb	r3, [r7, #24]
 8016246:	2201      	movs	r2, #1
 8016248:	f362 1307 	bfi	r3, r2, #4, #4
 801624c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801624e:	7e3a      	ldrb	r2, [r7, #24]
 8016250:	f107 031c 	add.w	r3, r7, #28
 8016254:	4611      	mov	r1, r2
 8016256:	4618      	mov	r0, r3
 8016258:	f000 fb1d 	bl	8016896 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801625c:	69fb      	ldr	r3, [r7, #28]
 801625e:	6a39      	ldr	r1, [r7, #32]
 8016260:	4618      	mov	r0, r3
 8016262:	f000 fa21 	bl	80166a8 <MQTTPacket_encode>
 8016266:	4602      	mov	r2, r0
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	4413      	add	r3, r2
 801626c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	7a1b      	ldrb	r3, [r3, #8]
 8016272:	2b04      	cmp	r3, #4
 8016274:	d10c      	bne.n	8016290 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8016276:	f107 031c 	add.w	r3, r7, #28
 801627a:	4955      	ldr	r1, [pc, #340]	@ (80163d0 <MQTTSerialize_connect+0x1d0>)
 801627c:	4618      	mov	r0, r3
 801627e:	f000 fb46 	bl	801690e <writeCString>
		writeChar(&ptr, (char) 4);
 8016282:	f107 031c 	add.w	r3, r7, #28
 8016286:	2104      	movs	r1, #4
 8016288:	4618      	mov	r0, r3
 801628a:	f000 fb04 	bl	8016896 <writeChar>
 801628e:	e00b      	b.n	80162a8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8016290:	f107 031c 	add.w	r3, r7, #28
 8016294:	494f      	ldr	r1, [pc, #316]	@ (80163d4 <MQTTSerialize_connect+0x1d4>)
 8016296:	4618      	mov	r0, r3
 8016298:	f000 fb39 	bl	801690e <writeCString>
		writeChar(&ptr, (char) 3);
 801629c:	f107 031c 	add.w	r3, r7, #28
 80162a0:	2103      	movs	r1, #3
 80162a2:	4618      	mov	r0, r3
 80162a4:	f000 faf7 	bl	8016896 <writeChar>
	}

	flags.all = 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7e9b      	ldrb	r3, [r3, #26]
 80162b0:	f003 0301 	and.w	r3, r3, #1
 80162b4:	b2da      	uxtb	r2, r3
 80162b6:	7d3b      	ldrb	r3, [r7, #20]
 80162b8:	f362 0341 	bfi	r3, r2, #1, #1
 80162bc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	7edb      	ldrb	r3, [r3, #27]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	bf14      	ite	ne
 80162c6:	2301      	movne	r3, #1
 80162c8:	2300      	moveq	r3, #0
 80162ca:	b2da      	uxtb	r2, r3
 80162cc:	7d3b      	ldrb	r3, [r7, #20]
 80162ce:	f362 0382 	bfi	r3, r2, #2, #1
 80162d2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80162d4:	7d3b      	ldrb	r3, [r7, #20]
 80162d6:	f003 0304 	and.w	r3, r3, #4
 80162da:	b2db      	uxtb	r3, r3
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d013      	beq.n	8016308 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80162e6:	f003 0303 	and.w	r3, r3, #3
 80162ea:	b2da      	uxtb	r2, r3
 80162ec:	7d3b      	ldrb	r3, [r7, #20]
 80162ee:	f362 03c4 	bfi	r3, r2, #3, #2
 80162f2:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80162fa:	f003 0301 	and.w	r3, r3, #1
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	7d3b      	ldrb	r3, [r7, #20]
 8016302:	f362 1345 	bfi	r3, r2, #5, #1
 8016306:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801630c:	2b00      	cmp	r3, #0
 801630e:	d103      	bne.n	8016318 <MQTTSerialize_connect+0x118>
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016314:	2b00      	cmp	r3, #0
 8016316:	d003      	beq.n	8016320 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8016318:	7d3b      	ldrb	r3, [r7, #20]
 801631a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801631e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016324:	2b00      	cmp	r3, #0
 8016326:	d103      	bne.n	8016330 <MQTTSerialize_connect+0x130>
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801632c:	2b00      	cmp	r3, #0
 801632e:	d003      	beq.n	8016338 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8016330:	7d3b      	ldrb	r3, [r7, #20]
 8016332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016336:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8016338:	7d3a      	ldrb	r2, [r7, #20]
 801633a:	f107 031c 	add.w	r3, r7, #28
 801633e:	4611      	mov	r1, r2
 8016340:	4618      	mov	r0, r3
 8016342:	f000 faa8 	bl	8016896 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	8b1b      	ldrh	r3, [r3, #24]
 801634a:	461a      	mov	r2, r3
 801634c:	f107 031c 	add.w	r3, r7, #28
 8016350:	4611      	mov	r1, r2
 8016352:	4618      	mov	r0, r3
 8016354:	f000 fab3 	bl	80168be <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f107 001c 	add.w	r0, r7, #28
 801635e:	330c      	adds	r3, #12
 8016360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016362:	f000 faf3 	bl	801694c <writeMQTTString>
	if (options->willFlag)
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	7edb      	ldrb	r3, [r3, #27]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d00d      	beq.n	801638a <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	f107 001c 	add.w	r0, r7, #28
 8016374:	3324      	adds	r3, #36	@ 0x24
 8016376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016378:	f000 fae8 	bl	801694c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f107 001c 	add.w	r0, r7, #28
 8016382:	3330      	adds	r3, #48	@ 0x30
 8016384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016386:	f000 fae1 	bl	801694c <writeMQTTString>
	}
	if (flags.bits.username)
 801638a:	7d3b      	ldrb	r3, [r7, #20]
 801638c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016390:	b2db      	uxtb	r3, r3
 8016392:	2b00      	cmp	r3, #0
 8016394:	d006      	beq.n	80163a4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f107 001c 	add.w	r0, r7, #28
 801639c:	3340      	adds	r3, #64	@ 0x40
 801639e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80163a0:	f000 fad4 	bl	801694c <writeMQTTString>
	if (flags.bits.password)
 80163a4:	7d3b      	ldrb	r3, [r7, #20]
 80163a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d006      	beq.n	80163be <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	f107 001c 	add.w	r0, r7, #28
 80163b6:	334c      	adds	r3, #76	@ 0x4c
 80163b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80163ba:	f000 fac7 	bl	801694c <writeMQTTString>

	rc = ptr - buf;
 80163be:	69fa      	ldr	r2, [r7, #28]
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	1ad3      	subs	r3, r2, r3
 80163c4:	627b      	str	r3, [r7, #36]	@ 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80163c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3728      	adds	r7, #40	@ 0x28
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	0801ab1c 	.word	0x0801ab1c
 80163d4:	0801ab24 	.word	0x0801ab24

080163d8 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	b08a      	sub	sp, #40	@ 0x28
 80163dc:	af00      	add	r7, sp, #0
 80163de:	60f8      	str	r0, [r7, #12]
 80163e0:	60b9      	str	r1, [r7, #8]
 80163e2:	607a      	str	r2, [r7, #4]
 80163e4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80163e6:	2300      	movs	r3, #0
 80163e8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80163ee:	2300      	movs	r3, #0
 80163f0:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80163f6:	2300      	movs	r3, #0
 80163f8:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80163fa:	f107 0318 	add.w	r3, r7, #24
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 fa36 	bl	8016870 <readChar>
 8016404:	4603      	mov	r3, r0
 8016406:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8016408:	7f3b      	ldrb	r3, [r7, #28]
 801640a:	f023 030f 	bic.w	r3, r3, #15
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b20      	cmp	r3, #32
 8016412:	d12e      	bne.n	8016472 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8016414:	69bb      	ldr	r3, [r7, #24]
 8016416:	f107 0214 	add.w	r2, r7, #20
 801641a:	4611      	mov	r1, r2
 801641c:	4618      	mov	r0, r3
 801641e:	f000 f9f7 	bl	8016810 <MQTTPacket_decodeBuf>
 8016422:	6278      	str	r0, [r7, #36]	@ 0x24
 8016424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016426:	69bb      	ldr	r3, [r7, #24]
 8016428:	4413      	add	r3, r2
 801642a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801642c:	69bb      	ldr	r3, [r7, #24]
 801642e:	697a      	ldr	r2, [r7, #20]
 8016430:	4413      	add	r3, r2
 8016432:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	6a3a      	ldr	r2, [r7, #32]
 8016438:	1ad3      	subs	r3, r2, r3
 801643a:	2b01      	cmp	r3, #1
 801643c:	dd1b      	ble.n	8016476 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801643e:	f107 0318 	add.w	r3, r7, #24
 8016442:	4618      	mov	r0, r3
 8016444:	f000 fa14 	bl	8016870 <readChar>
 8016448:	4603      	mov	r3, r0
 801644a:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801644c:	7c3b      	ldrb	r3, [r7, #16]
 801644e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016452:	b2db      	uxtb	r3, r3
 8016454:	461a      	mov	r2, r3
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801645a:	f107 0318 	add.w	r3, r7, #24
 801645e:	4618      	mov	r0, r3
 8016460:	f000 fa06 	bl	8016870 <readChar>
 8016464:	4603      	mov	r3, r0
 8016466:	461a      	mov	r2, r3
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801646c:	2301      	movs	r3, #1
 801646e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016470:	e002      	b.n	8016478 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8016472:	bf00      	nop
 8016474:	e000      	b.n	8016478 <MQTTDeserialize_connack+0xa0>
		goto exit;
 8016476:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801647a:	4618      	mov	r0, r3
 801647c:	3728      	adds	r7, #40	@ 0x28
 801647e:	46bd      	mov	sp, r7
 8016480:	bd80      	pop	{r7, pc}

08016482 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 8016482:	b580      	push	{r7, lr}
 8016484:	b088      	sub	sp, #32
 8016486:	af00      	add	r7, sp, #0
 8016488:	60f8      	str	r0, [r7, #12]
 801648a:	60b9      	str	r1, [r7, #8]
 801648c:	4613      	mov	r3, r2
 801648e:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8016490:	2300      	movs	r3, #0
 8016492:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 8016494:	f04f 33ff 	mov.w	r3, #4294967295
 8016498:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	dc03      	bgt.n	80164ac <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80164a4:	f06f 0301 	mvn.w	r3, #1
 80164a8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80164aa:	e01d      	b.n	80164e8 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80164b0:	79fb      	ldrb	r3, [r7, #7]
 80164b2:	f003 030f 	and.w	r3, r3, #15
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	7e3b      	ldrb	r3, [r7, #24]
 80164ba:	f362 1307 	bfi	r3, r2, #4, #4
 80164be:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 80164c0:	7e3a      	ldrb	r2, [r7, #24]
 80164c2:	f107 0314 	add.w	r3, r7, #20
 80164c6:	4611      	mov	r1, r2
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 f9e4 	bl	8016896 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	2100      	movs	r1, #0
 80164d2:	4618      	mov	r0, r3
 80164d4:	f000 f8e8 	bl	80166a8 <MQTTPacket_encode>
 80164d8:	4602      	mov	r2, r0
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	4413      	add	r3, r2
 80164de:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 80164e0:	697a      	ldr	r2, [r7, #20]
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80164e8:	69fb      	ldr	r3, [r7, #28]
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3720      	adds	r7, #32
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}

080164f2 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 80164f2:	b580      	push	{r7, lr}
 80164f4:	b082      	sub	sp, #8
 80164f6:	af00      	add	r7, sp, #0
 80164f8:	6078      	str	r0, [r7, #4]
 80164fa:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 80164fc:	220e      	movs	r2, #14
 80164fe:	6839      	ldr	r1, [r7, #0]
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f7ff ffbe 	bl	8016482 <MQTTSerialize_zero>
 8016506:	4603      	mov	r3, r0
}
 8016508:	4618      	mov	r0, r3
 801650a:	3708      	adds	r7, #8
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}

08016510 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801651a:	220c      	movs	r2, #12
 801651c:	6839      	ldr	r1, [r7, #0]
 801651e:	6878      	ldr	r0, [r7, #4]
 8016520:	f7ff ffaf 	bl	8016482 <MQTTSerialize_zero>
 8016524:	4603      	mov	r3, r0
}
 8016526:	4618      	mov	r0, r3
 8016528:	3708      	adds	r7, #8
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801652e:	b580      	push	{r7, lr}
 8016530:	b08a      	sub	sp, #40	@ 0x28
 8016532:	af00      	add	r7, sp, #0
 8016534:	60f8      	str	r0, [r7, #12]
 8016536:	60b9      	str	r1, [r7, #8]
 8016538:	607a      	str	r2, [r7, #4]
 801653a:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801653c:	2300      	movs	r3, #0
 801653e:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8016540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016542:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8016544:	2300      	movs	r3, #0
 8016546:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8016548:	2300      	movs	r3, #0
 801654a:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen = 0;
 801654c:	2300      	movs	r3, #0
 801654e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8016550:	f107 0318 	add.w	r3, r7, #24
 8016554:	4618      	mov	r0, r3
 8016556:	f000 f98b 	bl	8016870 <readChar>
 801655a:	4603      	mov	r3, r0
 801655c:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801655e:	7f3b      	ldrb	r3, [r7, #28]
 8016560:	f023 030f 	bic.w	r3, r3, #15
 8016564:	b2db      	uxtb	r3, r3
 8016566:	2b30      	cmp	r3, #48	@ 0x30
 8016568:	d14b      	bne.n	8016602 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801656a:	7f3b      	ldrb	r3, [r7, #28]
 801656c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016570:	b2db      	uxtb	r3, r3
 8016572:	461a      	mov	r2, r3
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8016578:	7f3b      	ldrb	r3, [r7, #28]
 801657a:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801657e:	b2db      	uxtb	r3, r3
 8016580:	461a      	mov	r2, r3
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8016586:	7f3b      	ldrb	r3, [r7, #28]
 8016588:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801658c:	b2db      	uxtb	r3, r3
 801658e:	461a      	mov	r2, r3
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8016594:	69bb      	ldr	r3, [r7, #24]
 8016596:	f107 0214 	add.w	r2, r7, #20
 801659a:	4611      	mov	r1, r2
 801659c:	4618      	mov	r0, r3
 801659e:	f000 f937 	bl	8016810 <MQTTPacket_decodeBuf>
 80165a2:	6278      	str	r0, [r7, #36]	@ 0x24
 80165a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165a6:	69bb      	ldr	r3, [r7, #24]
 80165a8:	4413      	add	r3, r2
 80165aa:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	697a      	ldr	r2, [r7, #20]
 80165b0:	4413      	add	r3, r2
 80165b2:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80165b4:	f107 0318 	add.w	r3, r7, #24
 80165b8:	6a3a      	ldr	r2, [r7, #32]
 80165ba:	4619      	mov	r1, r3
 80165bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165be:	f000 f9f3 	bl	80169a8 <readMQTTLenString>
 80165c2:	4603      	mov	r3, r0
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d01e      	beq.n	8016606 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 80165c8:	69bb      	ldr	r3, [r7, #24]
 80165ca:	6a3a      	ldr	r2, [r7, #32]
 80165cc:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	db19      	blt.n	8016606 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	dd08      	ble.n	80165ec <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80165da:	f107 0318 	add.w	r3, r7, #24
 80165de:	4618      	mov	r0, r3
 80165e0:	f000 f92c 	bl	801683c <readInt>
 80165e4:	4603      	mov	r3, r0
 80165e6:	b29a      	uxth	r2, r3
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	6a3a      	ldr	r2, [r7, #32]
 80165f0:	1ad2      	subs	r2, r2, r3
 80165f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165f4:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80165f6:	69ba      	ldr	r2, [r7, #24]
 80165f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165fa:	601a      	str	r2, [r3, #0]
	rc = 1;
 80165fc:	2301      	movs	r3, #1
 80165fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8016600:	e002      	b.n	8016608 <MQTTDeserialize_publish+0xda>
		goto exit;
 8016602:	bf00      	nop
 8016604:	e000      	b.n	8016608 <MQTTDeserialize_publish+0xda>
		goto exit;
 8016606:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801660a:	4618      	mov	r0, r3
 801660c:	3728      	adds	r7, #40	@ 0x28
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}

08016612 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8016612:	b580      	push	{r7, lr}
 8016614:	b08a      	sub	sp, #40	@ 0x28
 8016616:	af00      	add	r7, sp, #0
 8016618:	60f8      	str	r0, [r7, #12]
 801661a:	60b9      	str	r1, [r7, #8]
 801661c:	607a      	str	r2, [r7, #4]
 801661e:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8016620:	2300      	movs	r3, #0
 8016622:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8016624:	683b      	ldr	r3, [r7, #0]
 8016626:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8016628:	2300      	movs	r3, #0
 801662a:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801662c:	2300      	movs	r3, #0
 801662e:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8016630:	f107 0318 	add.w	r3, r7, #24
 8016634:	4618      	mov	r0, r3
 8016636:	f000 f91b 	bl	8016870 <readChar>
 801663a:	4603      	mov	r3, r0
 801663c:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801663e:	7f3b      	ldrb	r3, [r7, #28]
 8016640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016644:	b2db      	uxtb	r3, r3
 8016646:	461a      	mov	r2, r3
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801664c:	7f3b      	ldrb	r3, [r7, #28]
 801664e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8016652:	b2db      	uxtb	r3, r3
 8016654:	461a      	mov	r2, r3
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801665a:	69bb      	ldr	r3, [r7, #24]
 801665c:	f107 0214 	add.w	r2, r7, #20
 8016660:	4611      	mov	r1, r2
 8016662:	4618      	mov	r0, r3
 8016664:	f000 f8d4 	bl	8016810 <MQTTPacket_decodeBuf>
 8016668:	6278      	str	r0, [r7, #36]	@ 0x24
 801666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801666c:	69bb      	ldr	r3, [r7, #24]
 801666e:	4413      	add	r3, r2
 8016670:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8016672:	69bb      	ldr	r3, [r7, #24]
 8016674:	697a      	ldr	r2, [r7, #20]
 8016676:	4413      	add	r3, r2
 8016678:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801667a:	69bb      	ldr	r3, [r7, #24]
 801667c:	6a3a      	ldr	r2, [r7, #32]
 801667e:	1ad3      	subs	r3, r2, r3
 8016680:	2b01      	cmp	r3, #1
 8016682:	dd0b      	ble.n	801669c <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8016684:	f107 0318 	add.w	r3, r7, #24
 8016688:	4618      	mov	r0, r3
 801668a:	f000 f8d7 	bl	801683c <readInt>
 801668e:	4603      	mov	r3, r0
 8016690:	b29a      	uxth	r2, r3
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8016696:	2301      	movs	r3, #1
 8016698:	627b      	str	r3, [r7, #36]	@ 0x24
 801669a:	e000      	b.n	801669e <MQTTDeserialize_ack+0x8c>
		goto exit;
 801669c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3728      	adds	r7, #40	@ 0x28
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b085      	sub	sp, #20
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	6078      	str	r0, [r7, #4]
 80166b0:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80166b2:	2300      	movs	r3, #0
 80166b4:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80166b6:	683b      	ldr	r3, [r7, #0]
 80166b8:	425a      	negs	r2, r3
 80166ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80166be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80166c2:	bf58      	it	pl
 80166c4:	4253      	negpl	r3, r2
 80166c6:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80166c8:	683b      	ldr	r3, [r7, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	da00      	bge.n	80166d0 <MQTTPacket_encode+0x28>
 80166ce:	337f      	adds	r3, #127	@ 0x7f
 80166d0:	11db      	asrs	r3, r3, #7
 80166d2:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	dd03      	ble.n	80166e2 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80166da:	7afb      	ldrb	r3, [r7, #11]
 80166dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80166e0:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	1c5a      	adds	r2, r3, #1
 80166e6:	60fa      	str	r2, [r7, #12]
 80166e8:	461a      	mov	r2, r3
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	4413      	add	r3, r2
 80166ee:	7afa      	ldrb	r2, [r7, #11]
 80166f0:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	dcde      	bgt.n	80166b6 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80166f8:	68fb      	ldr	r3, [r7, #12]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3714      	adds	r7, #20
 80166fe:	46bd      	mov	sp, r7
 8016700:	bc80      	pop	{r7}
 8016702:	4770      	bx	lr

08016704 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b086      	sub	sp, #24
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801670e:	2301      	movs	r3, #1
 8016710:	617b      	str	r3, [r7, #20]
	int len = 0;
 8016712:	2300      	movs	r3, #0
 8016714:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	2200      	movs	r2, #0
 801671a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801671c:	f04f 33ff 	mov.w	r3, #4294967295
 8016720:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	3301      	adds	r3, #1
 8016726:	613b      	str	r3, [r7, #16]
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	2b04      	cmp	r3, #4
 801672c:	dd03      	ble.n	8016736 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801672e:	f04f 33ff 	mov.w	r3, #4294967295
 8016732:	60fb      	str	r3, [r7, #12]
			goto exit;
 8016734:	e01d      	b.n	8016772 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8016736:	f107 020b 	add.w	r2, r7, #11
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	2101      	movs	r1, #1
 801673e:	4610      	mov	r0, r2
 8016740:	4798      	blx	r3
 8016742:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8016744:	68fb      	ldr	r3, [r7, #12]
 8016746:	2b01      	cmp	r3, #1
 8016748:	d112      	bne.n	8016770 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801674a:	683b      	ldr	r3, [r7, #0]
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	7afb      	ldrb	r3, [r7, #11]
 8016750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016754:	6979      	ldr	r1, [r7, #20]
 8016756:	fb01 f303 	mul.w	r3, r1, r3
 801675a:	441a      	add	r2, r3
 801675c:	683b      	ldr	r3, [r7, #0]
 801675e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	01db      	lsls	r3, r3, #7
 8016764:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8016766:	7afb      	ldrb	r3, [r7, #11]
 8016768:	b25b      	sxtb	r3, r3
 801676a:	2b00      	cmp	r3, #0
 801676c:	dbd6      	blt.n	801671c <MQTTPacket_decode+0x18>
exit:
 801676e:	e000      	b.n	8016772 <MQTTPacket_decode+0x6e>
			goto exit;
 8016770:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8016772:	693b      	ldr	r3, [r7, #16]
}
 8016774:	4618      	mov	r0, r3
 8016776:	3718      	adds	r7, #24
 8016778:	46bd      	mov	sp, r7
 801677a:	bd80      	pop	{r7, pc}

0801677c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801677c:	b480      	push	{r7}
 801677e:	b083      	sub	sp, #12
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	3301      	adds	r3, #1
 8016788:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2b7f      	cmp	r3, #127	@ 0x7f
 801678e:	dc03      	bgt.n	8016798 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3301      	adds	r3, #1
 8016794:	607b      	str	r3, [r7, #4]
 8016796:	e012      	b.n	80167be <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801679e:	da03      	bge.n	80167a8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3302      	adds	r3, #2
 80167a4:	607b      	str	r3, [r7, #4]
 80167a6:	e00a      	b.n	80167be <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4a08      	ldr	r2, [pc, #32]	@ (80167cc <MQTTPacket_len+0x50>)
 80167ac:	4293      	cmp	r3, r2
 80167ae:	dc03      	bgt.n	80167b8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	3303      	adds	r3, #3
 80167b4:	607b      	str	r3, [r7, #4]
 80167b6:	e002      	b.n	80167be <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3304      	adds	r3, #4
 80167bc:	607b      	str	r3, [r7, #4]
	return rem_len;
 80167be:	687b      	ldr	r3, [r7, #4]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	bc80      	pop	{r7}
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	001ffffe 	.word	0x001ffffe

080167d0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80167da:	2300      	movs	r3, #0
 80167dc:	60fb      	str	r3, [r7, #12]
 80167de:	e00a      	b.n	80167f6 <bufchar+0x26>
		*c = *bufptr++;
 80167e0:	4b0a      	ldr	r3, [pc, #40]	@ (801680c <bufchar+0x3c>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	1c5a      	adds	r2, r3, #1
 80167e6:	4909      	ldr	r1, [pc, #36]	@ (801680c <bufchar+0x3c>)
 80167e8:	600a      	str	r2, [r1, #0]
 80167ea:	781a      	ldrb	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	3301      	adds	r3, #1
 80167f4:	60fb      	str	r3, [r7, #12]
 80167f6:	68fa      	ldr	r2, [r7, #12]
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	dbf0      	blt.n	80167e0 <bufchar+0x10>
	return count;
 80167fe:	683b      	ldr	r3, [r7, #0]
}
 8016800:	4618      	mov	r0, r3
 8016802:	3714      	adds	r7, #20
 8016804:	46bd      	mov	sp, r7
 8016806:	bc80      	pop	{r7}
 8016808:	4770      	bx	lr
 801680a:	bf00      	nop
 801680c:	200099d8 	.word	0x200099d8

08016810 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801681a:	4a06      	ldr	r2, [pc, #24]	@ (8016834 <MQTTPacket_decodeBuf+0x24>)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8016820:	6839      	ldr	r1, [r7, #0]
 8016822:	4805      	ldr	r0, [pc, #20]	@ (8016838 <MQTTPacket_decodeBuf+0x28>)
 8016824:	f7ff ff6e 	bl	8016704 <MQTTPacket_decode>
 8016828:	4603      	mov	r3, r0
}
 801682a:	4618      	mov	r0, r3
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
 8016832:	bf00      	nop
 8016834:	200099d8 	.word	0x200099d8
 8016838:	080167d1 	.word	0x080167d1

0801683c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	021b      	lsls	r3, r3, #8
 8016850:	68fa      	ldr	r2, [r7, #12]
 8016852:	3201      	adds	r2, #1
 8016854:	7812      	ldrb	r2, [r2, #0]
 8016856:	4413      	add	r3, r2
 8016858:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	1c9a      	adds	r2, r3, #2
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	601a      	str	r2, [r3, #0]
	return len;
 8016864:	68bb      	ldr	r3, [r7, #8]
}
 8016866:	4618      	mov	r0, r3
 8016868:	3714      	adds	r7, #20
 801686a:	46bd      	mov	sp, r7
 801686c:	bc80      	pop	{r7}
 801686e:	4770      	bx	lr

08016870 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	1c5a      	adds	r2, r3, #1
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	601a      	str	r2, [r3, #0]
	return c;
 801688a:	7bfb      	ldrb	r3, [r7, #15]
}
 801688c:	4618      	mov	r0, r3
 801688e:	3714      	adds	r7, #20
 8016890:	46bd      	mov	sp, r7
 8016892:	bc80      	pop	{r7}
 8016894:	4770      	bx	lr

08016896 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8016896:	b480      	push	{r7}
 8016898:	b083      	sub	sp, #12
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
 801689e:	460b      	mov	r3, r1
 80168a0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	78fa      	ldrb	r2, [r7, #3]
 80168a8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	1c5a      	adds	r2, r3, #1
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	601a      	str	r2, [r3, #0]
}
 80168b4:	bf00      	nop
 80168b6:	370c      	adds	r7, #12
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bc80      	pop	{r7}
 80168bc:	4770      	bx	lr

080168be <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80168be:	b480      	push	{r7}
 80168c0:	b083      	sub	sp, #12
 80168c2:	af00      	add	r7, sp, #0
 80168c4:	6078      	str	r0, [r7, #4]
 80168c6:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	da00      	bge.n	80168d0 <writeInt+0x12>
 80168ce:	33ff      	adds	r3, #255	@ 0xff
 80168d0:	121b      	asrs	r3, r3, #8
 80168d2:	461a      	mov	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	b2d2      	uxtb	r2, r2
 80168da:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	1c5a      	adds	r2, r3, #1
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80168e6:	683b      	ldr	r3, [r7, #0]
 80168e8:	425a      	negs	r2, r3
 80168ea:	b2db      	uxtb	r3, r3
 80168ec:	b2d2      	uxtb	r2, r2
 80168ee:	bf58      	it	pl
 80168f0:	4253      	negpl	r3, r2
 80168f2:	687a      	ldr	r2, [r7, #4]
 80168f4:	6812      	ldr	r2, [r2, #0]
 80168f6:	b2db      	uxtb	r3, r3
 80168f8:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	1c5a      	adds	r2, r3, #1
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	601a      	str	r2, [r3, #0]
}
 8016904:	bf00      	nop
 8016906:	370c      	adds	r7, #12
 8016908:	46bd      	mov	sp, r7
 801690a:	bc80      	pop	{r7}
 801690c:	4770      	bx	lr

0801690e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801690e:	b580      	push	{r7, lr}
 8016910:	b084      	sub	sp, #16
 8016912:	af00      	add	r7, sp, #0
 8016914:	6078      	str	r0, [r7, #4]
 8016916:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8016918:	6838      	ldr	r0, [r7, #0]
 801691a:	f7e9 fc93 	bl	8000244 <strlen>
 801691e:	4603      	mov	r3, r0
 8016920:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8016922:	68f9      	ldr	r1, [r7, #12]
 8016924:	6878      	ldr	r0, [r7, #4]
 8016926:	f7ff ffca 	bl	80168be <writeInt>
	memcpy(*pptr, string, len);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	68fa      	ldr	r2, [r7, #12]
 8016930:	6839      	ldr	r1, [r7, #0]
 8016932:	4618      	mov	r0, r3
 8016934:	f000 fe73 	bl	801761e <memcpy>
	*pptr += len;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	441a      	add	r2, r3
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	601a      	str	r2, [r3, #0]
}
 8016944:	bf00      	nop
 8016946:	3710      	adds	r7, #16
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b084      	sub	sp, #16
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	4638      	mov	r0, r7
 8016956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2b00      	cmp	r3, #0
 801695e:	dd12      	ble.n	8016986 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	4619      	mov	r1, r3
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f7ff ffaa 	bl	80168be <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	68b9      	ldr	r1, [r7, #8]
 8016970:	687a      	ldr	r2, [r7, #4]
 8016972:	4618      	mov	r0, r3
 8016974:	f000 fe53 	bl	801761e <memcpy>
		*pptr += mqttstring.lenstring.len;
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	687a      	ldr	r2, [r7, #4]
 801697e:	441a      	add	r2, r3
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8016984:	e00c      	b.n	80169a0 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d005      	beq.n	8016998 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	4619      	mov	r1, r3
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	f7ff ffbc 	bl	801690e <writeCString>
}
 8016996:	e003      	b.n	80169a0 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8016998:	2100      	movs	r1, #0
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	f7ff ff8f 	bl	80168be <writeInt>
}
 80169a0:	bf00      	nop
 80169a2:	3710      	adds	r7, #16
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}

080169a8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b086      	sub	sp, #24
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	60b9      	str	r1, [r7, #8]
 80169b2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80169b4:	2300      	movs	r3, #0
 80169b6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80169b8:	68bb      	ldr	r3, [r7, #8]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	687a      	ldr	r2, [r7, #4]
 80169be:	1ad3      	subs	r3, r2, r3
 80169c0:	2b01      	cmp	r3, #1
 80169c2:	dd1a      	ble.n	80169fa <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80169c4:	68b8      	ldr	r0, [r7, #8]
 80169c6:	f7ff ff39 	bl	801683c <readInt>
 80169ca:	4602      	mov	r2, r0
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80169d0:	68bb      	ldr	r3, [r7, #8]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	68fa      	ldr	r2, [r7, #12]
 80169d6:	6852      	ldr	r2, [r2, #4]
 80169d8:	4413      	add	r3, r2
 80169da:	687a      	ldr	r2, [r7, #4]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d30c      	bcc.n	80169fa <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80169e0:	68bb      	ldr	r3, [r7, #8]
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	68fa      	ldr	r2, [r7, #12]
 80169ee:	6852      	ldr	r2, [r2, #4]
 80169f0:	441a      	add	r2, r3
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	601a      	str	r2, [r3, #0]
			rc = 1;
 80169f6:	2301      	movs	r3, #1
 80169f8:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2200      	movs	r2, #0
 80169fe:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8016a00:	697b      	ldr	r3, [r7, #20]
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3718      	adds	r7, #24
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8016a0a:	b580      	push	{r7, lr}
 8016a0c:	b086      	sub	sp, #24
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	1d3b      	adds	r3, r7, #4
 8016a12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8016a16:	2300      	movs	r3, #0
 8016a18:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d006      	beq.n	8016a2e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7e9 fc0e 	bl	8000244 <strlen>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	617b      	str	r3, [r7, #20]
 8016a2c:	e001      	b.n	8016a32 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	617b      	str	r3, [r7, #20]
	return rc;
 8016a32:	697b      	ldr	r3, [r7, #20]
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3718      	adds	r7, #24
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b086      	sub	sp, #24
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8016a46:	2300      	movs	r3, #0
 8016a48:	617b      	str	r3, [r7, #20]
		blen = 0;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d00a      	beq.n	8016a6c <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7e9 fbef 	bl	8000244 <strlen>
 8016a66:	4603      	mov	r3, r0
 8016a68:	617b      	str	r3, [r7, #20]
 8016a6a:	e005      	b.n	8016a78 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	689b      	ldr	r3, [r3, #8]
 8016a70:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	685b      	ldr	r3, [r3, #4]
 8016a76:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8016a78:	6838      	ldr	r0, [r7, #0]
 8016a7a:	f7e9 fbe3 	bl	8000244 <strlen>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8016a82:	697a      	ldr	r2, [r7, #20]
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	429a      	cmp	r2, r3
 8016a88:	d10a      	bne.n	8016aa0 <MQTTPacket_equals+0x64>
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	6839      	ldr	r1, [r7, #0]
 8016a90:	6938      	ldr	r0, [r7, #16]
 8016a92:	f000 fcdf 	bl	8017454 <strncmp>
 8016a96:	4603      	mov	r3, r0
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d101      	bne.n	8016aa0 <MQTTPacket_equals+0x64>
 8016a9c:	2301      	movs	r3, #1
 8016a9e:	e000      	b.n	8016aa2 <MQTTPacket_equals+0x66>
 8016aa0:	2300      	movs	r3, #0
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	3718      	adds	r7, #24
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}

08016aaa <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8016aaa:	b580      	push	{r7, lr}
 8016aac:	b086      	sub	sp, #24
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	60f8      	str	r0, [r7, #12]
 8016ab2:	4638      	mov	r0, r7
 8016ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8016abc:	463b      	mov	r3, r7
 8016abe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ac2:	f7ff ffa2 	bl	8016a0a <MQTTstrlen>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	1c9a      	adds	r2, r3, #2
 8016aca:	6a3b      	ldr	r3, [r7, #32]
 8016acc:	4413      	add	r3, r2
 8016ace:	697a      	ldr	r2, [r7, #20]
 8016ad0:	4413      	add	r3, r2
 8016ad2:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	dd02      	ble.n	8016ae0 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	3302      	adds	r3, #2
 8016ade:	617b      	str	r3, [r7, #20]
	return len;
 8016ae0:	697b      	ldr	r3, [r7, #20]
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3718      	adds	r7, #24
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	bd80      	pop	{r7, pc}

08016aea <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8016aea:	b580      	push	{r7, lr}
 8016aec:	b08a      	sub	sp, #40	@ 0x28
 8016aee:	af02      	add	r7, sp, #8
 8016af0:	60f8      	str	r0, [r7, #12]
 8016af2:	60b9      	str	r1, [r7, #8]
 8016af4:	603b      	str	r3, [r7, #0]
 8016af6:	4613      	mov	r3, r2
 8016af8:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8016afe:	2300      	movs	r3, #0
 8016b00:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 8016b02:	2300      	movs	r3, #0
 8016b04:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8016b06:	2300      	movs	r3, #0
 8016b08:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8016b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016b0c:	9300      	str	r3, [sp, #0]
 8016b0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016b12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016b14:	6838      	ldr	r0, [r7, #0]
 8016b16:	f7ff ffc8 	bl	8016aaa <MQTTSerialize_publishLength>
 8016b1a:	61b8      	str	r0, [r7, #24]
 8016b1c:	69b8      	ldr	r0, [r7, #24]
 8016b1e:	f7ff fe2d 	bl	801677c <MQTTPacket_len>
 8016b22:	4602      	mov	r2, r0
 8016b24:	68bb      	ldr	r3, [r7, #8]
 8016b26:	4293      	cmp	r3, r2
 8016b28:	da03      	bge.n	8016b32 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016b2a:	f06f 0301 	mvn.w	r3, #1
 8016b2e:	61fb      	str	r3, [r7, #28]
		goto exit;
 8016b30:	e04c      	b.n	8016bcc <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 8016b32:	7c3b      	ldrb	r3, [r7, #16]
 8016b34:	2203      	movs	r2, #3
 8016b36:	f362 1307 	bfi	r3, r2, #4, #4
 8016b3a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8016b3c:	79fb      	ldrb	r3, [r7, #7]
 8016b3e:	f003 0301 	and.w	r3, r3, #1
 8016b42:	b2da      	uxtb	r2, r3
 8016b44:	7c3b      	ldrb	r3, [r7, #16]
 8016b46:	f362 03c3 	bfi	r3, r2, #3, #1
 8016b4a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	f003 0303 	and.w	r3, r3, #3
 8016b52:	b2da      	uxtb	r2, r3
 8016b54:	7c3b      	ldrb	r3, [r7, #16]
 8016b56:	f362 0342 	bfi	r3, r2, #1, #2
 8016b5a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8016b5c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016b60:	f003 0301 	and.w	r3, r3, #1
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	7c3b      	ldrb	r3, [r7, #16]
 8016b68:	f362 0300 	bfi	r3, r2, #0, #1
 8016b6c:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8016b6e:	7c3a      	ldrb	r2, [r7, #16]
 8016b70:	f107 0314 	add.w	r3, r7, #20
 8016b74:	4611      	mov	r1, r2
 8016b76:	4618      	mov	r0, r3
 8016b78:	f7ff fe8d 	bl	8016896 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8016b7c:	697b      	ldr	r3, [r7, #20]
 8016b7e:	69b9      	ldr	r1, [r7, #24]
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7ff fd91 	bl	80166a8 <MQTTPacket_encode>
 8016b86:	4602      	mov	r2, r0
 8016b88:	697b      	ldr	r3, [r7, #20]
 8016b8a:	4413      	add	r3, r2
 8016b8c:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8016b8e:	f107 0014 	add.w	r0, r7, #20
 8016b92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016b96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016b98:	f7ff fed8 	bl	801694c <writeMQTTString>

	if (qos > 0)
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	dd06      	ble.n	8016bb0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 8016ba2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8016ba4:	f107 0314 	add.w	r3, r7, #20
 8016ba8:	4611      	mov	r1, r2
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7ff fe87 	bl	80168be <writeInt>

	memcpy(ptr, payload, payloadlen);
 8016bb0:	697b      	ldr	r3, [r7, #20]
 8016bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016bb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f000 fd31 	bl	801761e <memcpy>
	ptr += payloadlen;
 8016bbc:	697a      	ldr	r2, [r7, #20]
 8016bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016bc0:	4413      	add	r3, r2
 8016bc2:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 8016bc4:	697a      	ldr	r2, [r7, #20]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	1ad3      	subs	r3, r2, r3
 8016bca:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016bcc:	69fb      	ldr	r3, [r7, #28]
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	3720      	adds	r7, #32
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b088      	sub	sp, #32
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	60f8      	str	r0, [r7, #12]
 8016bde:	60b9      	str	r1, [r7, #8]
 8016be0:	4611      	mov	r1, r2
 8016be2:	461a      	mov	r2, r3
 8016be4:	460b      	mov	r3, r1
 8016be6:	71fb      	strb	r3, [r7, #7]
 8016be8:	4613      	mov	r3, r2
 8016bea:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8016bec:	2300      	movs	r3, #0
 8016bee:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	2b03      	cmp	r3, #3
 8016bfc:	dc03      	bgt.n	8016c06 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016bfe:	f06f 0301 	mvn.w	r3, #1
 8016c02:	61fb      	str	r3, [r7, #28]
		goto exit;
 8016c04:	e037      	b.n	8016c76 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 8016c06:	79fb      	ldrb	r3, [r7, #7]
 8016c08:	f003 030f 	and.w	r3, r3, #15
 8016c0c:	b2da      	uxtb	r2, r3
 8016c0e:	7e3b      	ldrb	r3, [r7, #24]
 8016c10:	f362 1307 	bfi	r3, r2, #4, #4
 8016c14:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8016c16:	79bb      	ldrb	r3, [r7, #6]
 8016c18:	f003 0301 	and.w	r3, r3, #1
 8016c1c:	b2da      	uxtb	r2, r3
 8016c1e:	7e3b      	ldrb	r3, [r7, #24]
 8016c20:	f362 03c3 	bfi	r3, r2, #3, #1
 8016c24:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8016c26:	79fb      	ldrb	r3, [r7, #7]
 8016c28:	2b06      	cmp	r3, #6
 8016c2a:	bf0c      	ite	eq
 8016c2c:	2301      	moveq	r3, #1
 8016c2e:	2300      	movne	r3, #0
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	f003 0303 	and.w	r3, r3, #3
 8016c36:	b2da      	uxtb	r2, r3
 8016c38:	7e3b      	ldrb	r3, [r7, #24]
 8016c3a:	f362 0342 	bfi	r3, r2, #1, #2
 8016c3e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8016c40:	7e3a      	ldrb	r2, [r7, #24]
 8016c42:	f107 0314 	add.w	r3, r7, #20
 8016c46:	4611      	mov	r1, r2
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ff fe24 	bl	8016896 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8016c4e:	697b      	ldr	r3, [r7, #20]
 8016c50:	2102      	movs	r1, #2
 8016c52:	4618      	mov	r0, r3
 8016c54:	f7ff fd28 	bl	80166a8 <MQTTPacket_encode>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	697b      	ldr	r3, [r7, #20]
 8016c5c:	4413      	add	r3, r2
 8016c5e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8016c60:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8016c62:	f107 0314 	add.w	r3, r7, #20
 8016c66:	4611      	mov	r1, r2
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f7ff fe28 	bl	80168be <writeInt>
	rc = ptr - buf;
 8016c6e:	697a      	ldr	r2, [r7, #20]
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	1ad3      	subs	r3, r2, r3
 8016c74:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016c76:	69fb      	ldr	r3, [r7, #28]
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	3720      	adds	r7, #32
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b084      	sub	sp, #16
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8016c8a:	2302      	movs	r3, #2
 8016c8c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8016c8e:	2300      	movs	r3, #0
 8016c90:	60fb      	str	r3, [r7, #12]
 8016c92:	e013      	b.n	8016cbc <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8016c94:	68fa      	ldr	r2, [r7, #12]
 8016c96:	4613      	mov	r3, r2
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	4413      	add	r3, r2
 8016c9c:	009b      	lsls	r3, r3, #2
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	683b      	ldr	r3, [r7, #0]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ca8:	f7ff feaf 	bl	8016a0a <MQTTstrlen>
 8016cac:	4603      	mov	r3, r0
 8016cae:	3303      	adds	r3, #3
 8016cb0:	68ba      	ldr	r2, [r7, #8]
 8016cb2:	4413      	add	r3, r2
 8016cb4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	60fb      	str	r3, [r7, #12]
 8016cbc:	68fa      	ldr	r2, [r7, #12]
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	dbe7      	blt.n	8016c94 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8016cc4:	68bb      	ldr	r3, [r7, #8]
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3710      	adds	r7, #16
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}

08016cce <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8016cce:	b580      	push	{r7, lr}
 8016cd0:	b08a      	sub	sp, #40	@ 0x28
 8016cd2:	af00      	add	r7, sp, #0
 8016cd4:	60f8      	str	r0, [r7, #12]
 8016cd6:	60b9      	str	r1, [r7, #8]
 8016cd8:	4611      	mov	r1, r2
 8016cda:	461a      	mov	r2, r3
 8016cdc:	460b      	mov	r3, r1
 8016cde:	71fb      	strb	r3, [r7, #7]
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8016ce4:	68fb      	ldr	r3, [r7, #12]
 8016ce6:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8016ce8:	2300      	movs	r3, #0
 8016cea:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8016cec:	2300      	movs	r3, #0
 8016cee:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = 0;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8016cf8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016cfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016cfc:	f7ff ffc0 	bl	8016c80 <MQTTSerialize_subscribeLength>
 8016d00:	61f8      	str	r0, [r7, #28]
 8016d02:	69f8      	ldr	r0, [r7, #28]
 8016d04:	f7ff fd3a 	bl	801677c <MQTTPacket_len>
 8016d08:	4602      	mov	r2, r0
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	4293      	cmp	r3, r2
 8016d0e:	da03      	bge.n	8016d18 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016d10:	f06f 0301 	mvn.w	r3, #1
 8016d14:	627b      	str	r3, [r7, #36]	@ 0x24
		goto exit;
 8016d16:	e051      	b.n	8016dbc <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 8016d18:	2300      	movs	r3, #0
 8016d1a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8016d1c:	7d3b      	ldrb	r3, [r7, #20]
 8016d1e:	2208      	movs	r2, #8
 8016d20:	f362 1307 	bfi	r3, r2, #4, #4
 8016d24:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8016d26:	79fb      	ldrb	r3, [r7, #7]
 8016d28:	f003 0301 	and.w	r3, r3, #1
 8016d2c:	b2da      	uxtb	r2, r3
 8016d2e:	7d3b      	ldrb	r3, [r7, #20]
 8016d30:	f362 03c3 	bfi	r3, r2, #3, #1
 8016d34:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8016d36:	7d3b      	ldrb	r3, [r7, #20]
 8016d38:	2201      	movs	r2, #1
 8016d3a:	f362 0342 	bfi	r3, r2, #1, #2
 8016d3e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8016d40:	7d3a      	ldrb	r2, [r7, #20]
 8016d42:	f107 0318 	add.w	r3, r7, #24
 8016d46:	4611      	mov	r1, r2
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7ff fda4 	bl	8016896 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	69f9      	ldr	r1, [r7, #28]
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7ff fca8 	bl	80166a8 <MQTTPacket_encode>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8016d60:	88ba      	ldrh	r2, [r7, #4]
 8016d62:	f107 0318 	add.w	r3, r7, #24
 8016d66:	4611      	mov	r1, r2
 8016d68:	4618      	mov	r0, r3
 8016d6a:	f7ff fda8 	bl	80168be <writeInt>

	for (i = 0; i < count; ++i)
 8016d6e:	2300      	movs	r3, #0
 8016d70:	623b      	str	r3, [r7, #32]
 8016d72:	e01b      	b.n	8016dac <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8016d74:	6a3a      	ldr	r2, [r7, #32]
 8016d76:	4613      	mov	r3, r2
 8016d78:	005b      	lsls	r3, r3, #1
 8016d7a:	4413      	add	r3, r2
 8016d7c:	009b      	lsls	r3, r3, #2
 8016d7e:	461a      	mov	r2, r3
 8016d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d82:	4413      	add	r3, r2
 8016d84:	f107 0018 	add.w	r0, r7, #24
 8016d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016d8a:	f7ff fddf 	bl	801694c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8016d8e:	6a3b      	ldr	r3, [r7, #32]
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016d94:	4413      	add	r3, r2
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	b2da      	uxtb	r2, r3
 8016d9a:	f107 0318 	add.w	r3, r7, #24
 8016d9e:	4611      	mov	r1, r2
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7ff fd78 	bl	8016896 <writeChar>
	for (i = 0; i < count; ++i)
 8016da6:	6a3b      	ldr	r3, [r7, #32]
 8016da8:	3301      	adds	r3, #1
 8016daa:	623b      	str	r3, [r7, #32]
 8016dac:	6a3a      	ldr	r2, [r7, #32]
 8016dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016db0:	429a      	cmp	r2, r3
 8016db2:	dbdf      	blt.n	8016d74 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8016db4:	69ba      	ldr	r2, [r7, #24]
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	1ad3      	subs	r3, r2, r3
 8016dba:	627b      	str	r3, [r7, #36]	@ 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3728      	adds	r7, #40	@ 0x28
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}

08016dc6 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8016dc6:	b580      	push	{r7, lr}
 8016dc8:	b08a      	sub	sp, #40	@ 0x28
 8016dca:	af00      	add	r7, sp, #0
 8016dcc:	60f8      	str	r0, [r7, #12]
 8016dce:	60b9      	str	r1, [r7, #8]
 8016dd0:	607a      	str	r2, [r7, #4]
 8016dd2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8016dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dda:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8016de0:	2300      	movs	r3, #0
 8016de2:	627b      	str	r3, [r7, #36]	@ 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8016de4:	f107 0318 	add.w	r3, r7, #24
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7ff fd41 	bl	8016870 <readChar>
 8016dee:	4603      	mov	r3, r0
 8016df0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8016df2:	7f3b      	ldrb	r3, [r7, #28]
 8016df4:	f023 030f 	bic.w	r3, r3, #15
 8016df8:	b2db      	uxtb	r3, r3
 8016dfa:	2b90      	cmp	r3, #144	@ 0x90
 8016dfc:	d142      	bne.n	8016e84 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8016dfe:	69bb      	ldr	r3, [r7, #24]
 8016e00:	f107 0214 	add.w	r2, r7, #20
 8016e04:	4611      	mov	r1, r2
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7ff fd02 	bl	8016810 <MQTTPacket_decodeBuf>
 8016e0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8016e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	4413      	add	r3, r2
 8016e14:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8016e16:	69bb      	ldr	r3, [r7, #24]
 8016e18:	697a      	ldr	r2, [r7, #20]
 8016e1a:	4413      	add	r3, r2
 8016e1c:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	6a3a      	ldr	r2, [r7, #32]
 8016e22:	1ad3      	subs	r3, r2, r3
 8016e24:	2b01      	cmp	r3, #1
 8016e26:	dd2f      	ble.n	8016e88 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8016e28:	f107 0318 	add.w	r3, r7, #24
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7ff fd05 	bl	801683c <readInt>
 8016e32:	4603      	mov	r3, r0
 8016e34:	b29a      	uxth	r2, r3
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8016e40:	e019      	b.n	8016e76 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	68ba      	ldr	r2, [r7, #8]
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	da03      	bge.n	8016e54 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8016e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e50:	627b      	str	r3, [r7, #36]	@ 0x24
			goto exit;
 8016e52:	e01a      	b.n	8016e8a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8016e54:	f107 0318 	add.w	r3, r7, #24
 8016e58:	4618      	mov	r0, r3
 8016e5a:	f7ff fd09 	bl	8016870 <readChar>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	4618      	mov	r0, r3
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	1c59      	adds	r1, r3, #1
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	6011      	str	r1, [r2, #0]
 8016e6c:	009b      	lsls	r3, r3, #2
 8016e6e:	683a      	ldr	r2, [r7, #0]
 8016e70:	4413      	add	r3, r2
 8016e72:	4602      	mov	r2, r0
 8016e74:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8016e76:	69bb      	ldr	r3, [r7, #24]
 8016e78:	6a3a      	ldr	r2, [r7, #32]
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d8e1      	bhi.n	8016e42 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8016e7e:	2301      	movs	r3, #1
 8016e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e82:	e002      	b.n	8016e8a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8016e84:	bf00      	nop
 8016e86:	e000      	b.n	8016e8a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8016e88:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3728      	adds	r7, #40	@ 0x28
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <malloc>:
 8016e94:	4b02      	ldr	r3, [pc, #8]	@ (8016ea0 <malloc+0xc>)
 8016e96:	4601      	mov	r1, r0
 8016e98:	6818      	ldr	r0, [r3, #0]
 8016e9a:	f000 b82d 	b.w	8016ef8 <_malloc_r>
 8016e9e:	bf00      	nop
 8016ea0:	20000028 	.word	0x20000028

08016ea4 <free>:
 8016ea4:	4b02      	ldr	r3, [pc, #8]	@ (8016eb0 <free+0xc>)
 8016ea6:	4601      	mov	r1, r0
 8016ea8:	6818      	ldr	r0, [r3, #0]
 8016eaa:	f000 bbc7 	b.w	801763c <_free_r>
 8016eae:	bf00      	nop
 8016eb0:	20000028 	.word	0x20000028

08016eb4 <sbrk_aligned>:
 8016eb4:	b570      	push	{r4, r5, r6, lr}
 8016eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8016ef4 <sbrk_aligned+0x40>)
 8016eb8:	460c      	mov	r4, r1
 8016eba:	6831      	ldr	r1, [r6, #0]
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	b911      	cbnz	r1, 8016ec6 <sbrk_aligned+0x12>
 8016ec0:	f000 fb64 	bl	801758c <_sbrk_r>
 8016ec4:	6030      	str	r0, [r6, #0]
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	4628      	mov	r0, r5
 8016eca:	f000 fb5f 	bl	801758c <_sbrk_r>
 8016ece:	1c43      	adds	r3, r0, #1
 8016ed0:	d103      	bne.n	8016eda <sbrk_aligned+0x26>
 8016ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	bd70      	pop	{r4, r5, r6, pc}
 8016eda:	1cc4      	adds	r4, r0, #3
 8016edc:	f024 0403 	bic.w	r4, r4, #3
 8016ee0:	42a0      	cmp	r0, r4
 8016ee2:	d0f8      	beq.n	8016ed6 <sbrk_aligned+0x22>
 8016ee4:	1a21      	subs	r1, r4, r0
 8016ee6:	4628      	mov	r0, r5
 8016ee8:	f000 fb50 	bl	801758c <_sbrk_r>
 8016eec:	3001      	adds	r0, #1
 8016eee:	d1f2      	bne.n	8016ed6 <sbrk_aligned+0x22>
 8016ef0:	e7ef      	b.n	8016ed2 <sbrk_aligned+0x1e>
 8016ef2:	bf00      	nop
 8016ef4:	200099dc 	.word	0x200099dc

08016ef8 <_malloc_r>:
 8016ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016efc:	1ccd      	adds	r5, r1, #3
 8016efe:	f025 0503 	bic.w	r5, r5, #3
 8016f02:	3508      	adds	r5, #8
 8016f04:	2d0c      	cmp	r5, #12
 8016f06:	bf38      	it	cc
 8016f08:	250c      	movcc	r5, #12
 8016f0a:	2d00      	cmp	r5, #0
 8016f0c:	4606      	mov	r6, r0
 8016f0e:	db01      	blt.n	8016f14 <_malloc_r+0x1c>
 8016f10:	42a9      	cmp	r1, r5
 8016f12:	d904      	bls.n	8016f1e <_malloc_r+0x26>
 8016f14:	230c      	movs	r3, #12
 8016f16:	6033      	str	r3, [r6, #0]
 8016f18:	2000      	movs	r0, #0
 8016f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016ff4 <_malloc_r+0xfc>
 8016f22:	f000 f869 	bl	8016ff8 <__malloc_lock>
 8016f26:	f8d8 3000 	ldr.w	r3, [r8]
 8016f2a:	461c      	mov	r4, r3
 8016f2c:	bb44      	cbnz	r4, 8016f80 <_malloc_r+0x88>
 8016f2e:	4629      	mov	r1, r5
 8016f30:	4630      	mov	r0, r6
 8016f32:	f7ff ffbf 	bl	8016eb4 <sbrk_aligned>
 8016f36:	1c43      	adds	r3, r0, #1
 8016f38:	4604      	mov	r4, r0
 8016f3a:	d158      	bne.n	8016fee <_malloc_r+0xf6>
 8016f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8016f40:	4627      	mov	r7, r4
 8016f42:	2f00      	cmp	r7, #0
 8016f44:	d143      	bne.n	8016fce <_malloc_r+0xd6>
 8016f46:	2c00      	cmp	r4, #0
 8016f48:	d04b      	beq.n	8016fe2 <_malloc_r+0xea>
 8016f4a:	6823      	ldr	r3, [r4, #0]
 8016f4c:	4639      	mov	r1, r7
 8016f4e:	4630      	mov	r0, r6
 8016f50:	eb04 0903 	add.w	r9, r4, r3
 8016f54:	f000 fb1a 	bl	801758c <_sbrk_r>
 8016f58:	4581      	cmp	r9, r0
 8016f5a:	d142      	bne.n	8016fe2 <_malloc_r+0xea>
 8016f5c:	6821      	ldr	r1, [r4, #0]
 8016f5e:	4630      	mov	r0, r6
 8016f60:	1a6d      	subs	r5, r5, r1
 8016f62:	4629      	mov	r1, r5
 8016f64:	f7ff ffa6 	bl	8016eb4 <sbrk_aligned>
 8016f68:	3001      	adds	r0, #1
 8016f6a:	d03a      	beq.n	8016fe2 <_malloc_r+0xea>
 8016f6c:	6823      	ldr	r3, [r4, #0]
 8016f6e:	442b      	add	r3, r5
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	f8d8 3000 	ldr.w	r3, [r8]
 8016f76:	685a      	ldr	r2, [r3, #4]
 8016f78:	bb62      	cbnz	r2, 8016fd4 <_malloc_r+0xdc>
 8016f7a:	f8c8 7000 	str.w	r7, [r8]
 8016f7e:	e00f      	b.n	8016fa0 <_malloc_r+0xa8>
 8016f80:	6822      	ldr	r2, [r4, #0]
 8016f82:	1b52      	subs	r2, r2, r5
 8016f84:	d420      	bmi.n	8016fc8 <_malloc_r+0xd0>
 8016f86:	2a0b      	cmp	r2, #11
 8016f88:	d917      	bls.n	8016fba <_malloc_r+0xc2>
 8016f8a:	1961      	adds	r1, r4, r5
 8016f8c:	42a3      	cmp	r3, r4
 8016f8e:	6025      	str	r5, [r4, #0]
 8016f90:	bf18      	it	ne
 8016f92:	6059      	strne	r1, [r3, #4]
 8016f94:	6863      	ldr	r3, [r4, #4]
 8016f96:	bf08      	it	eq
 8016f98:	f8c8 1000 	streq.w	r1, [r8]
 8016f9c:	5162      	str	r2, [r4, r5]
 8016f9e:	604b      	str	r3, [r1, #4]
 8016fa0:	4630      	mov	r0, r6
 8016fa2:	f000 f82f 	bl	8017004 <__malloc_unlock>
 8016fa6:	f104 000b 	add.w	r0, r4, #11
 8016faa:	1d23      	adds	r3, r4, #4
 8016fac:	f020 0007 	bic.w	r0, r0, #7
 8016fb0:	1ac2      	subs	r2, r0, r3
 8016fb2:	bf1c      	itt	ne
 8016fb4:	1a1b      	subne	r3, r3, r0
 8016fb6:	50a3      	strne	r3, [r4, r2]
 8016fb8:	e7af      	b.n	8016f1a <_malloc_r+0x22>
 8016fba:	6862      	ldr	r2, [r4, #4]
 8016fbc:	42a3      	cmp	r3, r4
 8016fbe:	bf0c      	ite	eq
 8016fc0:	f8c8 2000 	streq.w	r2, [r8]
 8016fc4:	605a      	strne	r2, [r3, #4]
 8016fc6:	e7eb      	b.n	8016fa0 <_malloc_r+0xa8>
 8016fc8:	4623      	mov	r3, r4
 8016fca:	6864      	ldr	r4, [r4, #4]
 8016fcc:	e7ae      	b.n	8016f2c <_malloc_r+0x34>
 8016fce:	463c      	mov	r4, r7
 8016fd0:	687f      	ldr	r7, [r7, #4]
 8016fd2:	e7b6      	b.n	8016f42 <_malloc_r+0x4a>
 8016fd4:	461a      	mov	r2, r3
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	42a3      	cmp	r3, r4
 8016fda:	d1fb      	bne.n	8016fd4 <_malloc_r+0xdc>
 8016fdc:	2300      	movs	r3, #0
 8016fde:	6053      	str	r3, [r2, #4]
 8016fe0:	e7de      	b.n	8016fa0 <_malloc_r+0xa8>
 8016fe2:	230c      	movs	r3, #12
 8016fe4:	4630      	mov	r0, r6
 8016fe6:	6033      	str	r3, [r6, #0]
 8016fe8:	f000 f80c 	bl	8017004 <__malloc_unlock>
 8016fec:	e794      	b.n	8016f18 <_malloc_r+0x20>
 8016fee:	6005      	str	r5, [r0, #0]
 8016ff0:	e7d6      	b.n	8016fa0 <_malloc_r+0xa8>
 8016ff2:	bf00      	nop
 8016ff4:	200099e0 	.word	0x200099e0

08016ff8 <__malloc_lock>:
 8016ff8:	4801      	ldr	r0, [pc, #4]	@ (8017000 <__malloc_lock+0x8>)
 8016ffa:	f000 bb0e 	b.w	801761a <__retarget_lock_acquire_recursive>
 8016ffe:	bf00      	nop
 8017000:	20009b24 	.word	0x20009b24

08017004 <__malloc_unlock>:
 8017004:	4801      	ldr	r0, [pc, #4]	@ (801700c <__malloc_unlock+0x8>)
 8017006:	f000 bb09 	b.w	801761c <__retarget_lock_release_recursive>
 801700a:	bf00      	nop
 801700c:	20009b24 	.word	0x20009b24

08017010 <std>:
 8017010:	2300      	movs	r3, #0
 8017012:	b510      	push	{r4, lr}
 8017014:	4604      	mov	r4, r0
 8017016:	e9c0 3300 	strd	r3, r3, [r0]
 801701a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801701e:	6083      	str	r3, [r0, #8]
 8017020:	8181      	strh	r1, [r0, #12]
 8017022:	6643      	str	r3, [r0, #100]	@ 0x64
 8017024:	81c2      	strh	r2, [r0, #14]
 8017026:	6183      	str	r3, [r0, #24]
 8017028:	4619      	mov	r1, r3
 801702a:	2208      	movs	r2, #8
 801702c:	305c      	adds	r0, #92	@ 0x5c
 801702e:	f000 fa09 	bl	8017444 <memset>
 8017032:	4b0d      	ldr	r3, [pc, #52]	@ (8017068 <std+0x58>)
 8017034:	6224      	str	r4, [r4, #32]
 8017036:	6263      	str	r3, [r4, #36]	@ 0x24
 8017038:	4b0c      	ldr	r3, [pc, #48]	@ (801706c <std+0x5c>)
 801703a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801703c:	4b0c      	ldr	r3, [pc, #48]	@ (8017070 <std+0x60>)
 801703e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017040:	4b0c      	ldr	r3, [pc, #48]	@ (8017074 <std+0x64>)
 8017042:	6323      	str	r3, [r4, #48]	@ 0x30
 8017044:	4b0c      	ldr	r3, [pc, #48]	@ (8017078 <std+0x68>)
 8017046:	429c      	cmp	r4, r3
 8017048:	d006      	beq.n	8017058 <std+0x48>
 801704a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801704e:	4294      	cmp	r4, r2
 8017050:	d002      	beq.n	8017058 <std+0x48>
 8017052:	33d0      	adds	r3, #208	@ 0xd0
 8017054:	429c      	cmp	r4, r3
 8017056:	d105      	bne.n	8017064 <std+0x54>
 8017058:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801705c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017060:	f000 bada 	b.w	8017618 <__retarget_lock_init_recursive>
 8017064:	bd10      	pop	{r4, pc}
 8017066:	bf00      	nop
 8017068:	08017275 	.word	0x08017275
 801706c:	08017297 	.word	0x08017297
 8017070:	080172cf 	.word	0x080172cf
 8017074:	080172f3 	.word	0x080172f3
 8017078:	200099e4 	.word	0x200099e4

0801707c <stdio_exit_handler>:
 801707c:	4a02      	ldr	r2, [pc, #8]	@ (8017088 <stdio_exit_handler+0xc>)
 801707e:	4903      	ldr	r1, [pc, #12]	@ (801708c <stdio_exit_handler+0x10>)
 8017080:	4803      	ldr	r0, [pc, #12]	@ (8017090 <stdio_exit_handler+0x14>)
 8017082:	f000 b869 	b.w	8017158 <_fwalk_sglue>
 8017086:	bf00      	nop
 8017088:	2000001c 	.word	0x2000001c
 801708c:	08017d71 	.word	0x08017d71
 8017090:	2000002c 	.word	0x2000002c

08017094 <cleanup_stdio>:
 8017094:	6841      	ldr	r1, [r0, #4]
 8017096:	4b0c      	ldr	r3, [pc, #48]	@ (80170c8 <cleanup_stdio+0x34>)
 8017098:	b510      	push	{r4, lr}
 801709a:	4299      	cmp	r1, r3
 801709c:	4604      	mov	r4, r0
 801709e:	d001      	beq.n	80170a4 <cleanup_stdio+0x10>
 80170a0:	f000 fe66 	bl	8017d70 <_fflush_r>
 80170a4:	68a1      	ldr	r1, [r4, #8]
 80170a6:	4b09      	ldr	r3, [pc, #36]	@ (80170cc <cleanup_stdio+0x38>)
 80170a8:	4299      	cmp	r1, r3
 80170aa:	d002      	beq.n	80170b2 <cleanup_stdio+0x1e>
 80170ac:	4620      	mov	r0, r4
 80170ae:	f000 fe5f 	bl	8017d70 <_fflush_r>
 80170b2:	68e1      	ldr	r1, [r4, #12]
 80170b4:	4b06      	ldr	r3, [pc, #24]	@ (80170d0 <cleanup_stdio+0x3c>)
 80170b6:	4299      	cmp	r1, r3
 80170b8:	d004      	beq.n	80170c4 <cleanup_stdio+0x30>
 80170ba:	4620      	mov	r0, r4
 80170bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170c0:	f000 be56 	b.w	8017d70 <_fflush_r>
 80170c4:	bd10      	pop	{r4, pc}
 80170c6:	bf00      	nop
 80170c8:	200099e4 	.word	0x200099e4
 80170cc:	20009a4c 	.word	0x20009a4c
 80170d0:	20009ab4 	.word	0x20009ab4

080170d4 <global_stdio_init.part.0>:
 80170d4:	b510      	push	{r4, lr}
 80170d6:	4b0b      	ldr	r3, [pc, #44]	@ (8017104 <global_stdio_init.part.0+0x30>)
 80170d8:	4c0b      	ldr	r4, [pc, #44]	@ (8017108 <global_stdio_init.part.0+0x34>)
 80170da:	4a0c      	ldr	r2, [pc, #48]	@ (801710c <global_stdio_init.part.0+0x38>)
 80170dc:	4620      	mov	r0, r4
 80170de:	601a      	str	r2, [r3, #0]
 80170e0:	2104      	movs	r1, #4
 80170e2:	2200      	movs	r2, #0
 80170e4:	f7ff ff94 	bl	8017010 <std>
 80170e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80170ec:	2201      	movs	r2, #1
 80170ee:	2109      	movs	r1, #9
 80170f0:	f7ff ff8e 	bl	8017010 <std>
 80170f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80170f8:	2202      	movs	r2, #2
 80170fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170fe:	2112      	movs	r1, #18
 8017100:	f7ff bf86 	b.w	8017010 <std>
 8017104:	20009b1c 	.word	0x20009b1c
 8017108:	200099e4 	.word	0x200099e4
 801710c:	0801707d 	.word	0x0801707d

08017110 <__sfp_lock_acquire>:
 8017110:	4801      	ldr	r0, [pc, #4]	@ (8017118 <__sfp_lock_acquire+0x8>)
 8017112:	f000 ba82 	b.w	801761a <__retarget_lock_acquire_recursive>
 8017116:	bf00      	nop
 8017118:	20009b25 	.word	0x20009b25

0801711c <__sfp_lock_release>:
 801711c:	4801      	ldr	r0, [pc, #4]	@ (8017124 <__sfp_lock_release+0x8>)
 801711e:	f000 ba7d 	b.w	801761c <__retarget_lock_release_recursive>
 8017122:	bf00      	nop
 8017124:	20009b25 	.word	0x20009b25

08017128 <__sinit>:
 8017128:	b510      	push	{r4, lr}
 801712a:	4604      	mov	r4, r0
 801712c:	f7ff fff0 	bl	8017110 <__sfp_lock_acquire>
 8017130:	6a23      	ldr	r3, [r4, #32]
 8017132:	b11b      	cbz	r3, 801713c <__sinit+0x14>
 8017134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017138:	f7ff bff0 	b.w	801711c <__sfp_lock_release>
 801713c:	4b04      	ldr	r3, [pc, #16]	@ (8017150 <__sinit+0x28>)
 801713e:	6223      	str	r3, [r4, #32]
 8017140:	4b04      	ldr	r3, [pc, #16]	@ (8017154 <__sinit+0x2c>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d1f5      	bne.n	8017134 <__sinit+0xc>
 8017148:	f7ff ffc4 	bl	80170d4 <global_stdio_init.part.0>
 801714c:	e7f2      	b.n	8017134 <__sinit+0xc>
 801714e:	bf00      	nop
 8017150:	08017095 	.word	0x08017095
 8017154:	20009b1c 	.word	0x20009b1c

08017158 <_fwalk_sglue>:
 8017158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801715c:	4607      	mov	r7, r0
 801715e:	4688      	mov	r8, r1
 8017160:	4614      	mov	r4, r2
 8017162:	2600      	movs	r6, #0
 8017164:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017168:	f1b9 0901 	subs.w	r9, r9, #1
 801716c:	d505      	bpl.n	801717a <_fwalk_sglue+0x22>
 801716e:	6824      	ldr	r4, [r4, #0]
 8017170:	2c00      	cmp	r4, #0
 8017172:	d1f7      	bne.n	8017164 <_fwalk_sglue+0xc>
 8017174:	4630      	mov	r0, r6
 8017176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801717a:	89ab      	ldrh	r3, [r5, #12]
 801717c:	2b01      	cmp	r3, #1
 801717e:	d907      	bls.n	8017190 <_fwalk_sglue+0x38>
 8017180:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017184:	3301      	adds	r3, #1
 8017186:	d003      	beq.n	8017190 <_fwalk_sglue+0x38>
 8017188:	4629      	mov	r1, r5
 801718a:	4638      	mov	r0, r7
 801718c:	47c0      	blx	r8
 801718e:	4306      	orrs	r6, r0
 8017190:	3568      	adds	r5, #104	@ 0x68
 8017192:	e7e9      	b.n	8017168 <_fwalk_sglue+0x10>

08017194 <iprintf>:
 8017194:	b40f      	push	{r0, r1, r2, r3}
 8017196:	b507      	push	{r0, r1, r2, lr}
 8017198:	4906      	ldr	r1, [pc, #24]	@ (80171b4 <iprintf+0x20>)
 801719a:	ab04      	add	r3, sp, #16
 801719c:	6808      	ldr	r0, [r1, #0]
 801719e:	f853 2b04 	ldr.w	r2, [r3], #4
 80171a2:	6881      	ldr	r1, [r0, #8]
 80171a4:	9301      	str	r3, [sp, #4]
 80171a6:	f000 fab9 	bl	801771c <_vfiprintf_r>
 80171aa:	b003      	add	sp, #12
 80171ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80171b0:	b004      	add	sp, #16
 80171b2:	4770      	bx	lr
 80171b4:	20000028 	.word	0x20000028

080171b8 <_puts_r>:
 80171b8:	6a03      	ldr	r3, [r0, #32]
 80171ba:	b570      	push	{r4, r5, r6, lr}
 80171bc:	4605      	mov	r5, r0
 80171be:	460e      	mov	r6, r1
 80171c0:	6884      	ldr	r4, [r0, #8]
 80171c2:	b90b      	cbnz	r3, 80171c8 <_puts_r+0x10>
 80171c4:	f7ff ffb0 	bl	8017128 <__sinit>
 80171c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171ca:	07db      	lsls	r3, r3, #31
 80171cc:	d405      	bmi.n	80171da <_puts_r+0x22>
 80171ce:	89a3      	ldrh	r3, [r4, #12]
 80171d0:	0598      	lsls	r0, r3, #22
 80171d2:	d402      	bmi.n	80171da <_puts_r+0x22>
 80171d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80171d6:	f000 fa20 	bl	801761a <__retarget_lock_acquire_recursive>
 80171da:	89a3      	ldrh	r3, [r4, #12]
 80171dc:	0719      	lsls	r1, r3, #28
 80171de:	d502      	bpl.n	80171e6 <_puts_r+0x2e>
 80171e0:	6923      	ldr	r3, [r4, #16]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d135      	bne.n	8017252 <_puts_r+0x9a>
 80171e6:	4621      	mov	r1, r4
 80171e8:	4628      	mov	r0, r5
 80171ea:	f000 f8c5 	bl	8017378 <__swsetup_r>
 80171ee:	b380      	cbz	r0, 8017252 <_puts_r+0x9a>
 80171f0:	f04f 35ff 	mov.w	r5, #4294967295
 80171f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80171f6:	07da      	lsls	r2, r3, #31
 80171f8:	d405      	bmi.n	8017206 <_puts_r+0x4e>
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	059b      	lsls	r3, r3, #22
 80171fe:	d402      	bmi.n	8017206 <_puts_r+0x4e>
 8017200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017202:	f000 fa0b 	bl	801761c <__retarget_lock_release_recursive>
 8017206:	4628      	mov	r0, r5
 8017208:	bd70      	pop	{r4, r5, r6, pc}
 801720a:	2b00      	cmp	r3, #0
 801720c:	da04      	bge.n	8017218 <_puts_r+0x60>
 801720e:	69a2      	ldr	r2, [r4, #24]
 8017210:	429a      	cmp	r2, r3
 8017212:	dc17      	bgt.n	8017244 <_puts_r+0x8c>
 8017214:	290a      	cmp	r1, #10
 8017216:	d015      	beq.n	8017244 <_puts_r+0x8c>
 8017218:	6823      	ldr	r3, [r4, #0]
 801721a:	1c5a      	adds	r2, r3, #1
 801721c:	6022      	str	r2, [r4, #0]
 801721e:	7019      	strb	r1, [r3, #0]
 8017220:	68a3      	ldr	r3, [r4, #8]
 8017222:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017226:	3b01      	subs	r3, #1
 8017228:	60a3      	str	r3, [r4, #8]
 801722a:	2900      	cmp	r1, #0
 801722c:	d1ed      	bne.n	801720a <_puts_r+0x52>
 801722e:	2b00      	cmp	r3, #0
 8017230:	da11      	bge.n	8017256 <_puts_r+0x9e>
 8017232:	4622      	mov	r2, r4
 8017234:	210a      	movs	r1, #10
 8017236:	4628      	mov	r0, r5
 8017238:	f000 f85f 	bl	80172fa <__swbuf_r>
 801723c:	3001      	adds	r0, #1
 801723e:	d0d7      	beq.n	80171f0 <_puts_r+0x38>
 8017240:	250a      	movs	r5, #10
 8017242:	e7d7      	b.n	80171f4 <_puts_r+0x3c>
 8017244:	4622      	mov	r2, r4
 8017246:	4628      	mov	r0, r5
 8017248:	f000 f857 	bl	80172fa <__swbuf_r>
 801724c:	3001      	adds	r0, #1
 801724e:	d1e7      	bne.n	8017220 <_puts_r+0x68>
 8017250:	e7ce      	b.n	80171f0 <_puts_r+0x38>
 8017252:	3e01      	subs	r6, #1
 8017254:	e7e4      	b.n	8017220 <_puts_r+0x68>
 8017256:	6823      	ldr	r3, [r4, #0]
 8017258:	1c5a      	adds	r2, r3, #1
 801725a:	6022      	str	r2, [r4, #0]
 801725c:	220a      	movs	r2, #10
 801725e:	701a      	strb	r2, [r3, #0]
 8017260:	e7ee      	b.n	8017240 <_puts_r+0x88>
	...

08017264 <puts>:
 8017264:	4b02      	ldr	r3, [pc, #8]	@ (8017270 <puts+0xc>)
 8017266:	4601      	mov	r1, r0
 8017268:	6818      	ldr	r0, [r3, #0]
 801726a:	f7ff bfa5 	b.w	80171b8 <_puts_r>
 801726e:	bf00      	nop
 8017270:	20000028 	.word	0x20000028

08017274 <__sread>:
 8017274:	b510      	push	{r4, lr}
 8017276:	460c      	mov	r4, r1
 8017278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801727c:	f000 f974 	bl	8017568 <_read_r>
 8017280:	2800      	cmp	r0, #0
 8017282:	bfab      	itete	ge
 8017284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017286:	89a3      	ldrhlt	r3, [r4, #12]
 8017288:	181b      	addge	r3, r3, r0
 801728a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801728e:	bfac      	ite	ge
 8017290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017292:	81a3      	strhlt	r3, [r4, #12]
 8017294:	bd10      	pop	{r4, pc}

08017296 <__swrite>:
 8017296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801729a:	461f      	mov	r7, r3
 801729c:	898b      	ldrh	r3, [r1, #12]
 801729e:	4605      	mov	r5, r0
 80172a0:	05db      	lsls	r3, r3, #23
 80172a2:	460c      	mov	r4, r1
 80172a4:	4616      	mov	r6, r2
 80172a6:	d505      	bpl.n	80172b4 <__swrite+0x1e>
 80172a8:	2302      	movs	r3, #2
 80172aa:	2200      	movs	r2, #0
 80172ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b0:	f000 f948 	bl	8017544 <_lseek_r>
 80172b4:	89a3      	ldrh	r3, [r4, #12]
 80172b6:	4632      	mov	r2, r6
 80172b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80172bc:	81a3      	strh	r3, [r4, #12]
 80172be:	4628      	mov	r0, r5
 80172c0:	463b      	mov	r3, r7
 80172c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172ca:	f000 b96f 	b.w	80175ac <_write_r>

080172ce <__sseek>:
 80172ce:	b510      	push	{r4, lr}
 80172d0:	460c      	mov	r4, r1
 80172d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172d6:	f000 f935 	bl	8017544 <_lseek_r>
 80172da:	1c43      	adds	r3, r0, #1
 80172dc:	89a3      	ldrh	r3, [r4, #12]
 80172de:	bf15      	itete	ne
 80172e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80172e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80172e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80172ea:	81a3      	strheq	r3, [r4, #12]
 80172ec:	bf18      	it	ne
 80172ee:	81a3      	strhne	r3, [r4, #12]
 80172f0:	bd10      	pop	{r4, pc}

080172f2 <__sclose>:
 80172f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172f6:	f000 b8bf 	b.w	8017478 <_close_r>

080172fa <__swbuf_r>:
 80172fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172fc:	460e      	mov	r6, r1
 80172fe:	4614      	mov	r4, r2
 8017300:	4605      	mov	r5, r0
 8017302:	b118      	cbz	r0, 801730c <__swbuf_r+0x12>
 8017304:	6a03      	ldr	r3, [r0, #32]
 8017306:	b90b      	cbnz	r3, 801730c <__swbuf_r+0x12>
 8017308:	f7ff ff0e 	bl	8017128 <__sinit>
 801730c:	69a3      	ldr	r3, [r4, #24]
 801730e:	60a3      	str	r3, [r4, #8]
 8017310:	89a3      	ldrh	r3, [r4, #12]
 8017312:	071a      	lsls	r2, r3, #28
 8017314:	d501      	bpl.n	801731a <__swbuf_r+0x20>
 8017316:	6923      	ldr	r3, [r4, #16]
 8017318:	b943      	cbnz	r3, 801732c <__swbuf_r+0x32>
 801731a:	4621      	mov	r1, r4
 801731c:	4628      	mov	r0, r5
 801731e:	f000 f82b 	bl	8017378 <__swsetup_r>
 8017322:	b118      	cbz	r0, 801732c <__swbuf_r+0x32>
 8017324:	f04f 37ff 	mov.w	r7, #4294967295
 8017328:	4638      	mov	r0, r7
 801732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801732c:	6823      	ldr	r3, [r4, #0]
 801732e:	6922      	ldr	r2, [r4, #16]
 8017330:	b2f6      	uxtb	r6, r6
 8017332:	1a98      	subs	r0, r3, r2
 8017334:	6963      	ldr	r3, [r4, #20]
 8017336:	4637      	mov	r7, r6
 8017338:	4283      	cmp	r3, r0
 801733a:	dc05      	bgt.n	8017348 <__swbuf_r+0x4e>
 801733c:	4621      	mov	r1, r4
 801733e:	4628      	mov	r0, r5
 8017340:	f000 fd16 	bl	8017d70 <_fflush_r>
 8017344:	2800      	cmp	r0, #0
 8017346:	d1ed      	bne.n	8017324 <__swbuf_r+0x2a>
 8017348:	68a3      	ldr	r3, [r4, #8]
 801734a:	3b01      	subs	r3, #1
 801734c:	60a3      	str	r3, [r4, #8]
 801734e:	6823      	ldr	r3, [r4, #0]
 8017350:	1c5a      	adds	r2, r3, #1
 8017352:	6022      	str	r2, [r4, #0]
 8017354:	701e      	strb	r6, [r3, #0]
 8017356:	6962      	ldr	r2, [r4, #20]
 8017358:	1c43      	adds	r3, r0, #1
 801735a:	429a      	cmp	r2, r3
 801735c:	d004      	beq.n	8017368 <__swbuf_r+0x6e>
 801735e:	89a3      	ldrh	r3, [r4, #12]
 8017360:	07db      	lsls	r3, r3, #31
 8017362:	d5e1      	bpl.n	8017328 <__swbuf_r+0x2e>
 8017364:	2e0a      	cmp	r6, #10
 8017366:	d1df      	bne.n	8017328 <__swbuf_r+0x2e>
 8017368:	4621      	mov	r1, r4
 801736a:	4628      	mov	r0, r5
 801736c:	f000 fd00 	bl	8017d70 <_fflush_r>
 8017370:	2800      	cmp	r0, #0
 8017372:	d0d9      	beq.n	8017328 <__swbuf_r+0x2e>
 8017374:	e7d6      	b.n	8017324 <__swbuf_r+0x2a>
	...

08017378 <__swsetup_r>:
 8017378:	b538      	push	{r3, r4, r5, lr}
 801737a:	4b29      	ldr	r3, [pc, #164]	@ (8017420 <__swsetup_r+0xa8>)
 801737c:	4605      	mov	r5, r0
 801737e:	6818      	ldr	r0, [r3, #0]
 8017380:	460c      	mov	r4, r1
 8017382:	b118      	cbz	r0, 801738c <__swsetup_r+0x14>
 8017384:	6a03      	ldr	r3, [r0, #32]
 8017386:	b90b      	cbnz	r3, 801738c <__swsetup_r+0x14>
 8017388:	f7ff fece 	bl	8017128 <__sinit>
 801738c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017390:	0719      	lsls	r1, r3, #28
 8017392:	d422      	bmi.n	80173da <__swsetup_r+0x62>
 8017394:	06da      	lsls	r2, r3, #27
 8017396:	d407      	bmi.n	80173a8 <__swsetup_r+0x30>
 8017398:	2209      	movs	r2, #9
 801739a:	602a      	str	r2, [r5, #0]
 801739c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80173a0:	f04f 30ff 	mov.w	r0, #4294967295
 80173a4:	81a3      	strh	r3, [r4, #12]
 80173a6:	e033      	b.n	8017410 <__swsetup_r+0x98>
 80173a8:	0758      	lsls	r0, r3, #29
 80173aa:	d512      	bpl.n	80173d2 <__swsetup_r+0x5a>
 80173ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80173ae:	b141      	cbz	r1, 80173c2 <__swsetup_r+0x4a>
 80173b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80173b4:	4299      	cmp	r1, r3
 80173b6:	d002      	beq.n	80173be <__swsetup_r+0x46>
 80173b8:	4628      	mov	r0, r5
 80173ba:	f000 f93f 	bl	801763c <_free_r>
 80173be:	2300      	movs	r3, #0
 80173c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80173c2:	89a3      	ldrh	r3, [r4, #12]
 80173c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80173c8:	81a3      	strh	r3, [r4, #12]
 80173ca:	2300      	movs	r3, #0
 80173cc:	6063      	str	r3, [r4, #4]
 80173ce:	6923      	ldr	r3, [r4, #16]
 80173d0:	6023      	str	r3, [r4, #0]
 80173d2:	89a3      	ldrh	r3, [r4, #12]
 80173d4:	f043 0308 	orr.w	r3, r3, #8
 80173d8:	81a3      	strh	r3, [r4, #12]
 80173da:	6923      	ldr	r3, [r4, #16]
 80173dc:	b94b      	cbnz	r3, 80173f2 <__swsetup_r+0x7a>
 80173de:	89a3      	ldrh	r3, [r4, #12]
 80173e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80173e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80173e8:	d003      	beq.n	80173f2 <__swsetup_r+0x7a>
 80173ea:	4621      	mov	r1, r4
 80173ec:	4628      	mov	r0, r5
 80173ee:	f000 fd0c 	bl	8017e0a <__smakebuf_r>
 80173f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173f6:	f013 0201 	ands.w	r2, r3, #1
 80173fa:	d00a      	beq.n	8017412 <__swsetup_r+0x9a>
 80173fc:	2200      	movs	r2, #0
 80173fe:	60a2      	str	r2, [r4, #8]
 8017400:	6962      	ldr	r2, [r4, #20]
 8017402:	4252      	negs	r2, r2
 8017404:	61a2      	str	r2, [r4, #24]
 8017406:	6922      	ldr	r2, [r4, #16]
 8017408:	b942      	cbnz	r2, 801741c <__swsetup_r+0xa4>
 801740a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801740e:	d1c5      	bne.n	801739c <__swsetup_r+0x24>
 8017410:	bd38      	pop	{r3, r4, r5, pc}
 8017412:	0799      	lsls	r1, r3, #30
 8017414:	bf58      	it	pl
 8017416:	6962      	ldrpl	r2, [r4, #20]
 8017418:	60a2      	str	r2, [r4, #8]
 801741a:	e7f4      	b.n	8017406 <__swsetup_r+0x8e>
 801741c:	2000      	movs	r0, #0
 801741e:	e7f7      	b.n	8017410 <__swsetup_r+0x98>
 8017420:	20000028 	.word	0x20000028

08017424 <memcmp>:
 8017424:	b510      	push	{r4, lr}
 8017426:	3901      	subs	r1, #1
 8017428:	4402      	add	r2, r0
 801742a:	4290      	cmp	r0, r2
 801742c:	d101      	bne.n	8017432 <memcmp+0xe>
 801742e:	2000      	movs	r0, #0
 8017430:	e005      	b.n	801743e <memcmp+0x1a>
 8017432:	7803      	ldrb	r3, [r0, #0]
 8017434:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017438:	42a3      	cmp	r3, r4
 801743a:	d001      	beq.n	8017440 <memcmp+0x1c>
 801743c:	1b18      	subs	r0, r3, r4
 801743e:	bd10      	pop	{r4, pc}
 8017440:	3001      	adds	r0, #1
 8017442:	e7f2      	b.n	801742a <memcmp+0x6>

08017444 <memset>:
 8017444:	4603      	mov	r3, r0
 8017446:	4402      	add	r2, r0
 8017448:	4293      	cmp	r3, r2
 801744a:	d100      	bne.n	801744e <memset+0xa>
 801744c:	4770      	bx	lr
 801744e:	f803 1b01 	strb.w	r1, [r3], #1
 8017452:	e7f9      	b.n	8017448 <memset+0x4>

08017454 <strncmp>:
 8017454:	b510      	push	{r4, lr}
 8017456:	b16a      	cbz	r2, 8017474 <strncmp+0x20>
 8017458:	3901      	subs	r1, #1
 801745a:	1884      	adds	r4, r0, r2
 801745c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017460:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017464:	429a      	cmp	r2, r3
 8017466:	d103      	bne.n	8017470 <strncmp+0x1c>
 8017468:	42a0      	cmp	r0, r4
 801746a:	d001      	beq.n	8017470 <strncmp+0x1c>
 801746c:	2a00      	cmp	r2, #0
 801746e:	d1f5      	bne.n	801745c <strncmp+0x8>
 8017470:	1ad0      	subs	r0, r2, r3
 8017472:	bd10      	pop	{r4, pc}
 8017474:	4610      	mov	r0, r2
 8017476:	e7fc      	b.n	8017472 <strncmp+0x1e>

08017478 <_close_r>:
 8017478:	b538      	push	{r3, r4, r5, lr}
 801747a:	2300      	movs	r3, #0
 801747c:	4d05      	ldr	r5, [pc, #20]	@ (8017494 <_close_r+0x1c>)
 801747e:	4604      	mov	r4, r0
 8017480:	4608      	mov	r0, r1
 8017482:	602b      	str	r3, [r5, #0]
 8017484:	f7e9 fcad 	bl	8000de2 <_close>
 8017488:	1c43      	adds	r3, r0, #1
 801748a:	d102      	bne.n	8017492 <_close_r+0x1a>
 801748c:	682b      	ldr	r3, [r5, #0]
 801748e:	b103      	cbz	r3, 8017492 <_close_r+0x1a>
 8017490:	6023      	str	r3, [r4, #0]
 8017492:	bd38      	pop	{r3, r4, r5, pc}
 8017494:	20009b20 	.word	0x20009b20

08017498 <_reclaim_reent>:
 8017498:	4b29      	ldr	r3, [pc, #164]	@ (8017540 <_reclaim_reent+0xa8>)
 801749a:	b570      	push	{r4, r5, r6, lr}
 801749c:	681b      	ldr	r3, [r3, #0]
 801749e:	4604      	mov	r4, r0
 80174a0:	4283      	cmp	r3, r0
 80174a2:	d04b      	beq.n	801753c <_reclaim_reent+0xa4>
 80174a4:	69c3      	ldr	r3, [r0, #28]
 80174a6:	b1ab      	cbz	r3, 80174d4 <_reclaim_reent+0x3c>
 80174a8:	68db      	ldr	r3, [r3, #12]
 80174aa:	b16b      	cbz	r3, 80174c8 <_reclaim_reent+0x30>
 80174ac:	2500      	movs	r5, #0
 80174ae:	69e3      	ldr	r3, [r4, #28]
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	5959      	ldr	r1, [r3, r5]
 80174b4:	2900      	cmp	r1, #0
 80174b6:	d13b      	bne.n	8017530 <_reclaim_reent+0x98>
 80174b8:	3504      	adds	r5, #4
 80174ba:	2d80      	cmp	r5, #128	@ 0x80
 80174bc:	d1f7      	bne.n	80174ae <_reclaim_reent+0x16>
 80174be:	69e3      	ldr	r3, [r4, #28]
 80174c0:	4620      	mov	r0, r4
 80174c2:	68d9      	ldr	r1, [r3, #12]
 80174c4:	f000 f8ba 	bl	801763c <_free_r>
 80174c8:	69e3      	ldr	r3, [r4, #28]
 80174ca:	6819      	ldr	r1, [r3, #0]
 80174cc:	b111      	cbz	r1, 80174d4 <_reclaim_reent+0x3c>
 80174ce:	4620      	mov	r0, r4
 80174d0:	f000 f8b4 	bl	801763c <_free_r>
 80174d4:	6961      	ldr	r1, [r4, #20]
 80174d6:	b111      	cbz	r1, 80174de <_reclaim_reent+0x46>
 80174d8:	4620      	mov	r0, r4
 80174da:	f000 f8af 	bl	801763c <_free_r>
 80174de:	69e1      	ldr	r1, [r4, #28]
 80174e0:	b111      	cbz	r1, 80174e8 <_reclaim_reent+0x50>
 80174e2:	4620      	mov	r0, r4
 80174e4:	f000 f8aa 	bl	801763c <_free_r>
 80174e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80174ea:	b111      	cbz	r1, 80174f2 <_reclaim_reent+0x5a>
 80174ec:	4620      	mov	r0, r4
 80174ee:	f000 f8a5 	bl	801763c <_free_r>
 80174f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80174f4:	b111      	cbz	r1, 80174fc <_reclaim_reent+0x64>
 80174f6:	4620      	mov	r0, r4
 80174f8:	f000 f8a0 	bl	801763c <_free_r>
 80174fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80174fe:	b111      	cbz	r1, 8017506 <_reclaim_reent+0x6e>
 8017500:	4620      	mov	r0, r4
 8017502:	f000 f89b 	bl	801763c <_free_r>
 8017506:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8017508:	b111      	cbz	r1, 8017510 <_reclaim_reent+0x78>
 801750a:	4620      	mov	r0, r4
 801750c:	f000 f896 	bl	801763c <_free_r>
 8017510:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017512:	b111      	cbz	r1, 801751a <_reclaim_reent+0x82>
 8017514:	4620      	mov	r0, r4
 8017516:	f000 f891 	bl	801763c <_free_r>
 801751a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801751c:	b111      	cbz	r1, 8017524 <_reclaim_reent+0x8c>
 801751e:	4620      	mov	r0, r4
 8017520:	f000 f88c 	bl	801763c <_free_r>
 8017524:	6a23      	ldr	r3, [r4, #32]
 8017526:	b14b      	cbz	r3, 801753c <_reclaim_reent+0xa4>
 8017528:	4620      	mov	r0, r4
 801752a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801752e:	4718      	bx	r3
 8017530:	680e      	ldr	r6, [r1, #0]
 8017532:	4620      	mov	r0, r4
 8017534:	f000 f882 	bl	801763c <_free_r>
 8017538:	4631      	mov	r1, r6
 801753a:	e7bb      	b.n	80174b4 <_reclaim_reent+0x1c>
 801753c:	bd70      	pop	{r4, r5, r6, pc}
 801753e:	bf00      	nop
 8017540:	20000028 	.word	0x20000028

08017544 <_lseek_r>:
 8017544:	b538      	push	{r3, r4, r5, lr}
 8017546:	4604      	mov	r4, r0
 8017548:	4608      	mov	r0, r1
 801754a:	4611      	mov	r1, r2
 801754c:	2200      	movs	r2, #0
 801754e:	4d05      	ldr	r5, [pc, #20]	@ (8017564 <_lseek_r+0x20>)
 8017550:	602a      	str	r2, [r5, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	f7e9 fc69 	bl	8000e2a <_lseek>
 8017558:	1c43      	adds	r3, r0, #1
 801755a:	d102      	bne.n	8017562 <_lseek_r+0x1e>
 801755c:	682b      	ldr	r3, [r5, #0]
 801755e:	b103      	cbz	r3, 8017562 <_lseek_r+0x1e>
 8017560:	6023      	str	r3, [r4, #0]
 8017562:	bd38      	pop	{r3, r4, r5, pc}
 8017564:	20009b20 	.word	0x20009b20

08017568 <_read_r>:
 8017568:	b538      	push	{r3, r4, r5, lr}
 801756a:	4604      	mov	r4, r0
 801756c:	4608      	mov	r0, r1
 801756e:	4611      	mov	r1, r2
 8017570:	2200      	movs	r2, #0
 8017572:	4d05      	ldr	r5, [pc, #20]	@ (8017588 <_read_r+0x20>)
 8017574:	602a      	str	r2, [r5, #0]
 8017576:	461a      	mov	r2, r3
 8017578:	f7e9 fc16 	bl	8000da8 <_read>
 801757c:	1c43      	adds	r3, r0, #1
 801757e:	d102      	bne.n	8017586 <_read_r+0x1e>
 8017580:	682b      	ldr	r3, [r5, #0]
 8017582:	b103      	cbz	r3, 8017586 <_read_r+0x1e>
 8017584:	6023      	str	r3, [r4, #0]
 8017586:	bd38      	pop	{r3, r4, r5, pc}
 8017588:	20009b20 	.word	0x20009b20

0801758c <_sbrk_r>:
 801758c:	b538      	push	{r3, r4, r5, lr}
 801758e:	2300      	movs	r3, #0
 8017590:	4d05      	ldr	r5, [pc, #20]	@ (80175a8 <_sbrk_r+0x1c>)
 8017592:	4604      	mov	r4, r0
 8017594:	4608      	mov	r0, r1
 8017596:	602b      	str	r3, [r5, #0]
 8017598:	f7e9 fc54 	bl	8000e44 <_sbrk>
 801759c:	1c43      	adds	r3, r0, #1
 801759e:	d102      	bne.n	80175a6 <_sbrk_r+0x1a>
 80175a0:	682b      	ldr	r3, [r5, #0]
 80175a2:	b103      	cbz	r3, 80175a6 <_sbrk_r+0x1a>
 80175a4:	6023      	str	r3, [r4, #0]
 80175a6:	bd38      	pop	{r3, r4, r5, pc}
 80175a8:	20009b20 	.word	0x20009b20

080175ac <_write_r>:
 80175ac:	b538      	push	{r3, r4, r5, lr}
 80175ae:	4604      	mov	r4, r0
 80175b0:	4608      	mov	r0, r1
 80175b2:	4611      	mov	r1, r2
 80175b4:	2200      	movs	r2, #0
 80175b6:	4d05      	ldr	r5, [pc, #20]	@ (80175cc <_write_r+0x20>)
 80175b8:	602a      	str	r2, [r5, #0]
 80175ba:	461a      	mov	r2, r3
 80175bc:	f7e9 f80a 	bl	80005d4 <_write>
 80175c0:	1c43      	adds	r3, r0, #1
 80175c2:	d102      	bne.n	80175ca <_write_r+0x1e>
 80175c4:	682b      	ldr	r3, [r5, #0]
 80175c6:	b103      	cbz	r3, 80175ca <_write_r+0x1e>
 80175c8:	6023      	str	r3, [r4, #0]
 80175ca:	bd38      	pop	{r3, r4, r5, pc}
 80175cc:	20009b20 	.word	0x20009b20

080175d0 <__libc_init_array>:
 80175d0:	b570      	push	{r4, r5, r6, lr}
 80175d2:	2600      	movs	r6, #0
 80175d4:	4d0c      	ldr	r5, [pc, #48]	@ (8017608 <__libc_init_array+0x38>)
 80175d6:	4c0d      	ldr	r4, [pc, #52]	@ (801760c <__libc_init_array+0x3c>)
 80175d8:	1b64      	subs	r4, r4, r5
 80175da:	10a4      	asrs	r4, r4, #2
 80175dc:	42a6      	cmp	r6, r4
 80175de:	d109      	bne.n	80175f4 <__libc_init_array+0x24>
 80175e0:	f000 fc80 	bl	8017ee4 <_init>
 80175e4:	2600      	movs	r6, #0
 80175e6:	4d0a      	ldr	r5, [pc, #40]	@ (8017610 <__libc_init_array+0x40>)
 80175e8:	4c0a      	ldr	r4, [pc, #40]	@ (8017614 <__libc_init_array+0x44>)
 80175ea:	1b64      	subs	r4, r4, r5
 80175ec:	10a4      	asrs	r4, r4, #2
 80175ee:	42a6      	cmp	r6, r4
 80175f0:	d105      	bne.n	80175fe <__libc_init_array+0x2e>
 80175f2:	bd70      	pop	{r4, r5, r6, pc}
 80175f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80175f8:	4798      	blx	r3
 80175fa:	3601      	adds	r6, #1
 80175fc:	e7ee      	b.n	80175dc <__libc_init_array+0xc>
 80175fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017602:	4798      	blx	r3
 8017604:	3601      	adds	r6, #1
 8017606:	e7f2      	b.n	80175ee <__libc_init_array+0x1e>
 8017608:	0801ad10 	.word	0x0801ad10
 801760c:	0801ad10 	.word	0x0801ad10
 8017610:	0801ad10 	.word	0x0801ad10
 8017614:	0801ad14 	.word	0x0801ad14

08017618 <__retarget_lock_init_recursive>:
 8017618:	4770      	bx	lr

0801761a <__retarget_lock_acquire_recursive>:
 801761a:	4770      	bx	lr

0801761c <__retarget_lock_release_recursive>:
 801761c:	4770      	bx	lr

0801761e <memcpy>:
 801761e:	440a      	add	r2, r1
 8017620:	4291      	cmp	r1, r2
 8017622:	f100 33ff 	add.w	r3, r0, #4294967295
 8017626:	d100      	bne.n	801762a <memcpy+0xc>
 8017628:	4770      	bx	lr
 801762a:	b510      	push	{r4, lr}
 801762c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017630:	4291      	cmp	r1, r2
 8017632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017636:	d1f9      	bne.n	801762c <memcpy+0xe>
 8017638:	bd10      	pop	{r4, pc}
	...

0801763c <_free_r>:
 801763c:	b538      	push	{r3, r4, r5, lr}
 801763e:	4605      	mov	r5, r0
 8017640:	2900      	cmp	r1, #0
 8017642:	d040      	beq.n	80176c6 <_free_r+0x8a>
 8017644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017648:	1f0c      	subs	r4, r1, #4
 801764a:	2b00      	cmp	r3, #0
 801764c:	bfb8      	it	lt
 801764e:	18e4      	addlt	r4, r4, r3
 8017650:	f7ff fcd2 	bl	8016ff8 <__malloc_lock>
 8017654:	4a1c      	ldr	r2, [pc, #112]	@ (80176c8 <_free_r+0x8c>)
 8017656:	6813      	ldr	r3, [r2, #0]
 8017658:	b933      	cbnz	r3, 8017668 <_free_r+0x2c>
 801765a:	6063      	str	r3, [r4, #4]
 801765c:	6014      	str	r4, [r2, #0]
 801765e:	4628      	mov	r0, r5
 8017660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017664:	f7ff bcce 	b.w	8017004 <__malloc_unlock>
 8017668:	42a3      	cmp	r3, r4
 801766a:	d908      	bls.n	801767e <_free_r+0x42>
 801766c:	6820      	ldr	r0, [r4, #0]
 801766e:	1821      	adds	r1, r4, r0
 8017670:	428b      	cmp	r3, r1
 8017672:	bf01      	itttt	eq
 8017674:	6819      	ldreq	r1, [r3, #0]
 8017676:	685b      	ldreq	r3, [r3, #4]
 8017678:	1809      	addeq	r1, r1, r0
 801767a:	6021      	streq	r1, [r4, #0]
 801767c:	e7ed      	b.n	801765a <_free_r+0x1e>
 801767e:	461a      	mov	r2, r3
 8017680:	685b      	ldr	r3, [r3, #4]
 8017682:	b10b      	cbz	r3, 8017688 <_free_r+0x4c>
 8017684:	42a3      	cmp	r3, r4
 8017686:	d9fa      	bls.n	801767e <_free_r+0x42>
 8017688:	6811      	ldr	r1, [r2, #0]
 801768a:	1850      	adds	r0, r2, r1
 801768c:	42a0      	cmp	r0, r4
 801768e:	d10b      	bne.n	80176a8 <_free_r+0x6c>
 8017690:	6820      	ldr	r0, [r4, #0]
 8017692:	4401      	add	r1, r0
 8017694:	1850      	adds	r0, r2, r1
 8017696:	4283      	cmp	r3, r0
 8017698:	6011      	str	r1, [r2, #0]
 801769a:	d1e0      	bne.n	801765e <_free_r+0x22>
 801769c:	6818      	ldr	r0, [r3, #0]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	4408      	add	r0, r1
 80176a2:	6010      	str	r0, [r2, #0]
 80176a4:	6053      	str	r3, [r2, #4]
 80176a6:	e7da      	b.n	801765e <_free_r+0x22>
 80176a8:	d902      	bls.n	80176b0 <_free_r+0x74>
 80176aa:	230c      	movs	r3, #12
 80176ac:	602b      	str	r3, [r5, #0]
 80176ae:	e7d6      	b.n	801765e <_free_r+0x22>
 80176b0:	6820      	ldr	r0, [r4, #0]
 80176b2:	1821      	adds	r1, r4, r0
 80176b4:	428b      	cmp	r3, r1
 80176b6:	bf01      	itttt	eq
 80176b8:	6819      	ldreq	r1, [r3, #0]
 80176ba:	685b      	ldreq	r3, [r3, #4]
 80176bc:	1809      	addeq	r1, r1, r0
 80176be:	6021      	streq	r1, [r4, #0]
 80176c0:	6063      	str	r3, [r4, #4]
 80176c2:	6054      	str	r4, [r2, #4]
 80176c4:	e7cb      	b.n	801765e <_free_r+0x22>
 80176c6:	bd38      	pop	{r3, r4, r5, pc}
 80176c8:	200099e0 	.word	0x200099e0

080176cc <__sfputc_r>:
 80176cc:	6893      	ldr	r3, [r2, #8]
 80176ce:	b410      	push	{r4}
 80176d0:	3b01      	subs	r3, #1
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	6093      	str	r3, [r2, #8]
 80176d6:	da07      	bge.n	80176e8 <__sfputc_r+0x1c>
 80176d8:	6994      	ldr	r4, [r2, #24]
 80176da:	42a3      	cmp	r3, r4
 80176dc:	db01      	blt.n	80176e2 <__sfputc_r+0x16>
 80176de:	290a      	cmp	r1, #10
 80176e0:	d102      	bne.n	80176e8 <__sfputc_r+0x1c>
 80176e2:	bc10      	pop	{r4}
 80176e4:	f7ff be09 	b.w	80172fa <__swbuf_r>
 80176e8:	6813      	ldr	r3, [r2, #0]
 80176ea:	1c58      	adds	r0, r3, #1
 80176ec:	6010      	str	r0, [r2, #0]
 80176ee:	7019      	strb	r1, [r3, #0]
 80176f0:	4608      	mov	r0, r1
 80176f2:	bc10      	pop	{r4}
 80176f4:	4770      	bx	lr

080176f6 <__sfputs_r>:
 80176f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f8:	4606      	mov	r6, r0
 80176fa:	460f      	mov	r7, r1
 80176fc:	4614      	mov	r4, r2
 80176fe:	18d5      	adds	r5, r2, r3
 8017700:	42ac      	cmp	r4, r5
 8017702:	d101      	bne.n	8017708 <__sfputs_r+0x12>
 8017704:	2000      	movs	r0, #0
 8017706:	e007      	b.n	8017718 <__sfputs_r+0x22>
 8017708:	463a      	mov	r2, r7
 801770a:	4630      	mov	r0, r6
 801770c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017710:	f7ff ffdc 	bl	80176cc <__sfputc_r>
 8017714:	1c43      	adds	r3, r0, #1
 8017716:	d1f3      	bne.n	8017700 <__sfputs_r+0xa>
 8017718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801771c <_vfiprintf_r>:
 801771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017720:	460d      	mov	r5, r1
 8017722:	4614      	mov	r4, r2
 8017724:	4698      	mov	r8, r3
 8017726:	4606      	mov	r6, r0
 8017728:	b09d      	sub	sp, #116	@ 0x74
 801772a:	b118      	cbz	r0, 8017734 <_vfiprintf_r+0x18>
 801772c:	6a03      	ldr	r3, [r0, #32]
 801772e:	b90b      	cbnz	r3, 8017734 <_vfiprintf_r+0x18>
 8017730:	f7ff fcfa 	bl	8017128 <__sinit>
 8017734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017736:	07d9      	lsls	r1, r3, #31
 8017738:	d405      	bmi.n	8017746 <_vfiprintf_r+0x2a>
 801773a:	89ab      	ldrh	r3, [r5, #12]
 801773c:	059a      	lsls	r2, r3, #22
 801773e:	d402      	bmi.n	8017746 <_vfiprintf_r+0x2a>
 8017740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017742:	f7ff ff6a 	bl	801761a <__retarget_lock_acquire_recursive>
 8017746:	89ab      	ldrh	r3, [r5, #12]
 8017748:	071b      	lsls	r3, r3, #28
 801774a:	d501      	bpl.n	8017750 <_vfiprintf_r+0x34>
 801774c:	692b      	ldr	r3, [r5, #16]
 801774e:	b99b      	cbnz	r3, 8017778 <_vfiprintf_r+0x5c>
 8017750:	4629      	mov	r1, r5
 8017752:	4630      	mov	r0, r6
 8017754:	f7ff fe10 	bl	8017378 <__swsetup_r>
 8017758:	b170      	cbz	r0, 8017778 <_vfiprintf_r+0x5c>
 801775a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801775c:	07dc      	lsls	r4, r3, #31
 801775e:	d504      	bpl.n	801776a <_vfiprintf_r+0x4e>
 8017760:	f04f 30ff 	mov.w	r0, #4294967295
 8017764:	b01d      	add	sp, #116	@ 0x74
 8017766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801776a:	89ab      	ldrh	r3, [r5, #12]
 801776c:	0598      	lsls	r0, r3, #22
 801776e:	d4f7      	bmi.n	8017760 <_vfiprintf_r+0x44>
 8017770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017772:	f7ff ff53 	bl	801761c <__retarget_lock_release_recursive>
 8017776:	e7f3      	b.n	8017760 <_vfiprintf_r+0x44>
 8017778:	2300      	movs	r3, #0
 801777a:	9309      	str	r3, [sp, #36]	@ 0x24
 801777c:	2320      	movs	r3, #32
 801777e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017782:	2330      	movs	r3, #48	@ 0x30
 8017784:	f04f 0901 	mov.w	r9, #1
 8017788:	f8cd 800c 	str.w	r8, [sp, #12]
 801778c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8017938 <_vfiprintf_r+0x21c>
 8017790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017794:	4623      	mov	r3, r4
 8017796:	469a      	mov	sl, r3
 8017798:	f813 2b01 	ldrb.w	r2, [r3], #1
 801779c:	b10a      	cbz	r2, 80177a2 <_vfiprintf_r+0x86>
 801779e:	2a25      	cmp	r2, #37	@ 0x25
 80177a0:	d1f9      	bne.n	8017796 <_vfiprintf_r+0x7a>
 80177a2:	ebba 0b04 	subs.w	fp, sl, r4
 80177a6:	d00b      	beq.n	80177c0 <_vfiprintf_r+0xa4>
 80177a8:	465b      	mov	r3, fp
 80177aa:	4622      	mov	r2, r4
 80177ac:	4629      	mov	r1, r5
 80177ae:	4630      	mov	r0, r6
 80177b0:	f7ff ffa1 	bl	80176f6 <__sfputs_r>
 80177b4:	3001      	adds	r0, #1
 80177b6:	f000 80a7 	beq.w	8017908 <_vfiprintf_r+0x1ec>
 80177ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80177bc:	445a      	add	r2, fp
 80177be:	9209      	str	r2, [sp, #36]	@ 0x24
 80177c0:	f89a 3000 	ldrb.w	r3, [sl]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	f000 809f 	beq.w	8017908 <_vfiprintf_r+0x1ec>
 80177ca:	2300      	movs	r3, #0
 80177cc:	f04f 32ff 	mov.w	r2, #4294967295
 80177d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177d4:	f10a 0a01 	add.w	sl, sl, #1
 80177d8:	9304      	str	r3, [sp, #16]
 80177da:	9307      	str	r3, [sp, #28]
 80177dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80177e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80177e2:	4654      	mov	r4, sl
 80177e4:	2205      	movs	r2, #5
 80177e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177ea:	4853      	ldr	r0, [pc, #332]	@ (8017938 <_vfiprintf_r+0x21c>)
 80177ec:	f000 fb6c 	bl	8017ec8 <memchr>
 80177f0:	9a04      	ldr	r2, [sp, #16]
 80177f2:	b9d8      	cbnz	r0, 801782c <_vfiprintf_r+0x110>
 80177f4:	06d1      	lsls	r1, r2, #27
 80177f6:	bf44      	itt	mi
 80177f8:	2320      	movmi	r3, #32
 80177fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80177fe:	0713      	lsls	r3, r2, #28
 8017800:	bf44      	itt	mi
 8017802:	232b      	movmi	r3, #43	@ 0x2b
 8017804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017808:	f89a 3000 	ldrb.w	r3, [sl]
 801780c:	2b2a      	cmp	r3, #42	@ 0x2a
 801780e:	d015      	beq.n	801783c <_vfiprintf_r+0x120>
 8017810:	4654      	mov	r4, sl
 8017812:	2000      	movs	r0, #0
 8017814:	f04f 0c0a 	mov.w	ip, #10
 8017818:	9a07      	ldr	r2, [sp, #28]
 801781a:	4621      	mov	r1, r4
 801781c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017820:	3b30      	subs	r3, #48	@ 0x30
 8017822:	2b09      	cmp	r3, #9
 8017824:	d94b      	bls.n	80178be <_vfiprintf_r+0x1a2>
 8017826:	b1b0      	cbz	r0, 8017856 <_vfiprintf_r+0x13a>
 8017828:	9207      	str	r2, [sp, #28]
 801782a:	e014      	b.n	8017856 <_vfiprintf_r+0x13a>
 801782c:	eba0 0308 	sub.w	r3, r0, r8
 8017830:	fa09 f303 	lsl.w	r3, r9, r3
 8017834:	4313      	orrs	r3, r2
 8017836:	46a2      	mov	sl, r4
 8017838:	9304      	str	r3, [sp, #16]
 801783a:	e7d2      	b.n	80177e2 <_vfiprintf_r+0xc6>
 801783c:	9b03      	ldr	r3, [sp, #12]
 801783e:	1d19      	adds	r1, r3, #4
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	9103      	str	r1, [sp, #12]
 8017844:	2b00      	cmp	r3, #0
 8017846:	bfbb      	ittet	lt
 8017848:	425b      	neglt	r3, r3
 801784a:	f042 0202 	orrlt.w	r2, r2, #2
 801784e:	9307      	strge	r3, [sp, #28]
 8017850:	9307      	strlt	r3, [sp, #28]
 8017852:	bfb8      	it	lt
 8017854:	9204      	strlt	r2, [sp, #16]
 8017856:	7823      	ldrb	r3, [r4, #0]
 8017858:	2b2e      	cmp	r3, #46	@ 0x2e
 801785a:	d10a      	bne.n	8017872 <_vfiprintf_r+0x156>
 801785c:	7863      	ldrb	r3, [r4, #1]
 801785e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017860:	d132      	bne.n	80178c8 <_vfiprintf_r+0x1ac>
 8017862:	9b03      	ldr	r3, [sp, #12]
 8017864:	3402      	adds	r4, #2
 8017866:	1d1a      	adds	r2, r3, #4
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	9203      	str	r2, [sp, #12]
 801786c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017870:	9305      	str	r3, [sp, #20]
 8017872:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801793c <_vfiprintf_r+0x220>
 8017876:	2203      	movs	r2, #3
 8017878:	4650      	mov	r0, sl
 801787a:	7821      	ldrb	r1, [r4, #0]
 801787c:	f000 fb24 	bl	8017ec8 <memchr>
 8017880:	b138      	cbz	r0, 8017892 <_vfiprintf_r+0x176>
 8017882:	2240      	movs	r2, #64	@ 0x40
 8017884:	9b04      	ldr	r3, [sp, #16]
 8017886:	eba0 000a 	sub.w	r0, r0, sl
 801788a:	4082      	lsls	r2, r0
 801788c:	4313      	orrs	r3, r2
 801788e:	3401      	adds	r4, #1
 8017890:	9304      	str	r3, [sp, #16]
 8017892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017896:	2206      	movs	r2, #6
 8017898:	4829      	ldr	r0, [pc, #164]	@ (8017940 <_vfiprintf_r+0x224>)
 801789a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801789e:	f000 fb13 	bl	8017ec8 <memchr>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d03f      	beq.n	8017926 <_vfiprintf_r+0x20a>
 80178a6:	4b27      	ldr	r3, [pc, #156]	@ (8017944 <_vfiprintf_r+0x228>)
 80178a8:	bb1b      	cbnz	r3, 80178f2 <_vfiprintf_r+0x1d6>
 80178aa:	9b03      	ldr	r3, [sp, #12]
 80178ac:	3307      	adds	r3, #7
 80178ae:	f023 0307 	bic.w	r3, r3, #7
 80178b2:	3308      	adds	r3, #8
 80178b4:	9303      	str	r3, [sp, #12]
 80178b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178b8:	443b      	add	r3, r7
 80178ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80178bc:	e76a      	b.n	8017794 <_vfiprintf_r+0x78>
 80178be:	460c      	mov	r4, r1
 80178c0:	2001      	movs	r0, #1
 80178c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80178c6:	e7a8      	b.n	801781a <_vfiprintf_r+0xfe>
 80178c8:	2300      	movs	r3, #0
 80178ca:	f04f 0c0a 	mov.w	ip, #10
 80178ce:	4619      	mov	r1, r3
 80178d0:	3401      	adds	r4, #1
 80178d2:	9305      	str	r3, [sp, #20]
 80178d4:	4620      	mov	r0, r4
 80178d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178da:	3a30      	subs	r2, #48	@ 0x30
 80178dc:	2a09      	cmp	r2, #9
 80178de:	d903      	bls.n	80178e8 <_vfiprintf_r+0x1cc>
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d0c6      	beq.n	8017872 <_vfiprintf_r+0x156>
 80178e4:	9105      	str	r1, [sp, #20]
 80178e6:	e7c4      	b.n	8017872 <_vfiprintf_r+0x156>
 80178e8:	4604      	mov	r4, r0
 80178ea:	2301      	movs	r3, #1
 80178ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80178f0:	e7f0      	b.n	80178d4 <_vfiprintf_r+0x1b8>
 80178f2:	ab03      	add	r3, sp, #12
 80178f4:	9300      	str	r3, [sp, #0]
 80178f6:	462a      	mov	r2, r5
 80178f8:	4630      	mov	r0, r6
 80178fa:	4b13      	ldr	r3, [pc, #76]	@ (8017948 <_vfiprintf_r+0x22c>)
 80178fc:	a904      	add	r1, sp, #16
 80178fe:	f3af 8000 	nop.w
 8017902:	4607      	mov	r7, r0
 8017904:	1c78      	adds	r0, r7, #1
 8017906:	d1d6      	bne.n	80178b6 <_vfiprintf_r+0x19a>
 8017908:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801790a:	07d9      	lsls	r1, r3, #31
 801790c:	d405      	bmi.n	801791a <_vfiprintf_r+0x1fe>
 801790e:	89ab      	ldrh	r3, [r5, #12]
 8017910:	059a      	lsls	r2, r3, #22
 8017912:	d402      	bmi.n	801791a <_vfiprintf_r+0x1fe>
 8017914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017916:	f7ff fe81 	bl	801761c <__retarget_lock_release_recursive>
 801791a:	89ab      	ldrh	r3, [r5, #12]
 801791c:	065b      	lsls	r3, r3, #25
 801791e:	f53f af1f 	bmi.w	8017760 <_vfiprintf_r+0x44>
 8017922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017924:	e71e      	b.n	8017764 <_vfiprintf_r+0x48>
 8017926:	ab03      	add	r3, sp, #12
 8017928:	9300      	str	r3, [sp, #0]
 801792a:	462a      	mov	r2, r5
 801792c:	4630      	mov	r0, r6
 801792e:	4b06      	ldr	r3, [pc, #24]	@ (8017948 <_vfiprintf_r+0x22c>)
 8017930:	a904      	add	r1, sp, #16
 8017932:	f000 f87d 	bl	8017a30 <_printf_i>
 8017936:	e7e4      	b.n	8017902 <_vfiprintf_r+0x1e6>
 8017938:	0801acd4 	.word	0x0801acd4
 801793c:	0801acda 	.word	0x0801acda
 8017940:	0801acde 	.word	0x0801acde
 8017944:	00000000 	.word	0x00000000
 8017948:	080176f7 	.word	0x080176f7

0801794c <_printf_common>:
 801794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017950:	4616      	mov	r6, r2
 8017952:	4698      	mov	r8, r3
 8017954:	688a      	ldr	r2, [r1, #8]
 8017956:	690b      	ldr	r3, [r1, #16]
 8017958:	4607      	mov	r7, r0
 801795a:	4293      	cmp	r3, r2
 801795c:	bfb8      	it	lt
 801795e:	4613      	movlt	r3, r2
 8017960:	6033      	str	r3, [r6, #0]
 8017962:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017966:	460c      	mov	r4, r1
 8017968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801796c:	b10a      	cbz	r2, 8017972 <_printf_common+0x26>
 801796e:	3301      	adds	r3, #1
 8017970:	6033      	str	r3, [r6, #0]
 8017972:	6823      	ldr	r3, [r4, #0]
 8017974:	0699      	lsls	r1, r3, #26
 8017976:	bf42      	ittt	mi
 8017978:	6833      	ldrmi	r3, [r6, #0]
 801797a:	3302      	addmi	r3, #2
 801797c:	6033      	strmi	r3, [r6, #0]
 801797e:	6825      	ldr	r5, [r4, #0]
 8017980:	f015 0506 	ands.w	r5, r5, #6
 8017984:	d106      	bne.n	8017994 <_printf_common+0x48>
 8017986:	f104 0a19 	add.w	sl, r4, #25
 801798a:	68e3      	ldr	r3, [r4, #12]
 801798c:	6832      	ldr	r2, [r6, #0]
 801798e:	1a9b      	subs	r3, r3, r2
 8017990:	42ab      	cmp	r3, r5
 8017992:	dc2b      	bgt.n	80179ec <_printf_common+0xa0>
 8017994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017998:	6822      	ldr	r2, [r4, #0]
 801799a:	3b00      	subs	r3, #0
 801799c:	bf18      	it	ne
 801799e:	2301      	movne	r3, #1
 80179a0:	0692      	lsls	r2, r2, #26
 80179a2:	d430      	bmi.n	8017a06 <_printf_common+0xba>
 80179a4:	4641      	mov	r1, r8
 80179a6:	4638      	mov	r0, r7
 80179a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80179ac:	47c8      	blx	r9
 80179ae:	3001      	adds	r0, #1
 80179b0:	d023      	beq.n	80179fa <_printf_common+0xae>
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	6922      	ldr	r2, [r4, #16]
 80179b6:	f003 0306 	and.w	r3, r3, #6
 80179ba:	2b04      	cmp	r3, #4
 80179bc:	bf14      	ite	ne
 80179be:	2500      	movne	r5, #0
 80179c0:	6833      	ldreq	r3, [r6, #0]
 80179c2:	f04f 0600 	mov.w	r6, #0
 80179c6:	bf08      	it	eq
 80179c8:	68e5      	ldreq	r5, [r4, #12]
 80179ca:	f104 041a 	add.w	r4, r4, #26
 80179ce:	bf08      	it	eq
 80179d0:	1aed      	subeq	r5, r5, r3
 80179d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80179d6:	bf08      	it	eq
 80179d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179dc:	4293      	cmp	r3, r2
 80179de:	bfc4      	itt	gt
 80179e0:	1a9b      	subgt	r3, r3, r2
 80179e2:	18ed      	addgt	r5, r5, r3
 80179e4:	42b5      	cmp	r5, r6
 80179e6:	d11a      	bne.n	8017a1e <_printf_common+0xd2>
 80179e8:	2000      	movs	r0, #0
 80179ea:	e008      	b.n	80179fe <_printf_common+0xb2>
 80179ec:	2301      	movs	r3, #1
 80179ee:	4652      	mov	r2, sl
 80179f0:	4641      	mov	r1, r8
 80179f2:	4638      	mov	r0, r7
 80179f4:	47c8      	blx	r9
 80179f6:	3001      	adds	r0, #1
 80179f8:	d103      	bne.n	8017a02 <_printf_common+0xb6>
 80179fa:	f04f 30ff 	mov.w	r0, #4294967295
 80179fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a02:	3501      	adds	r5, #1
 8017a04:	e7c1      	b.n	801798a <_printf_common+0x3e>
 8017a06:	2030      	movs	r0, #48	@ 0x30
 8017a08:	18e1      	adds	r1, r4, r3
 8017a0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017a0e:	1c5a      	adds	r2, r3, #1
 8017a10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017a14:	4422      	add	r2, r4
 8017a16:	3302      	adds	r3, #2
 8017a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017a1c:	e7c2      	b.n	80179a4 <_printf_common+0x58>
 8017a1e:	2301      	movs	r3, #1
 8017a20:	4622      	mov	r2, r4
 8017a22:	4641      	mov	r1, r8
 8017a24:	4638      	mov	r0, r7
 8017a26:	47c8      	blx	r9
 8017a28:	3001      	adds	r0, #1
 8017a2a:	d0e6      	beq.n	80179fa <_printf_common+0xae>
 8017a2c:	3601      	adds	r6, #1
 8017a2e:	e7d9      	b.n	80179e4 <_printf_common+0x98>

08017a30 <_printf_i>:
 8017a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a34:	7e0f      	ldrb	r7, [r1, #24]
 8017a36:	4691      	mov	r9, r2
 8017a38:	2f78      	cmp	r7, #120	@ 0x78
 8017a3a:	4680      	mov	r8, r0
 8017a3c:	460c      	mov	r4, r1
 8017a3e:	469a      	mov	sl, r3
 8017a40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017a42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017a46:	d807      	bhi.n	8017a58 <_printf_i+0x28>
 8017a48:	2f62      	cmp	r7, #98	@ 0x62
 8017a4a:	d80a      	bhi.n	8017a62 <_printf_i+0x32>
 8017a4c:	2f00      	cmp	r7, #0
 8017a4e:	f000 80d3 	beq.w	8017bf8 <_printf_i+0x1c8>
 8017a52:	2f58      	cmp	r7, #88	@ 0x58
 8017a54:	f000 80ba 	beq.w	8017bcc <_printf_i+0x19c>
 8017a58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017a5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017a60:	e03a      	b.n	8017ad8 <_printf_i+0xa8>
 8017a62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017a66:	2b15      	cmp	r3, #21
 8017a68:	d8f6      	bhi.n	8017a58 <_printf_i+0x28>
 8017a6a:	a101      	add	r1, pc, #4	@ (adr r1, 8017a70 <_printf_i+0x40>)
 8017a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a70:	08017ac9 	.word	0x08017ac9
 8017a74:	08017add 	.word	0x08017add
 8017a78:	08017a59 	.word	0x08017a59
 8017a7c:	08017a59 	.word	0x08017a59
 8017a80:	08017a59 	.word	0x08017a59
 8017a84:	08017a59 	.word	0x08017a59
 8017a88:	08017add 	.word	0x08017add
 8017a8c:	08017a59 	.word	0x08017a59
 8017a90:	08017a59 	.word	0x08017a59
 8017a94:	08017a59 	.word	0x08017a59
 8017a98:	08017a59 	.word	0x08017a59
 8017a9c:	08017bdf 	.word	0x08017bdf
 8017aa0:	08017b07 	.word	0x08017b07
 8017aa4:	08017b99 	.word	0x08017b99
 8017aa8:	08017a59 	.word	0x08017a59
 8017aac:	08017a59 	.word	0x08017a59
 8017ab0:	08017c01 	.word	0x08017c01
 8017ab4:	08017a59 	.word	0x08017a59
 8017ab8:	08017b07 	.word	0x08017b07
 8017abc:	08017a59 	.word	0x08017a59
 8017ac0:	08017a59 	.word	0x08017a59
 8017ac4:	08017ba1 	.word	0x08017ba1
 8017ac8:	6833      	ldr	r3, [r6, #0]
 8017aca:	1d1a      	adds	r2, r3, #4
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	6032      	str	r2, [r6, #0]
 8017ad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017ad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e09e      	b.n	8017c1a <_printf_i+0x1ea>
 8017adc:	6833      	ldr	r3, [r6, #0]
 8017ade:	6820      	ldr	r0, [r4, #0]
 8017ae0:	1d19      	adds	r1, r3, #4
 8017ae2:	6031      	str	r1, [r6, #0]
 8017ae4:	0606      	lsls	r6, r0, #24
 8017ae6:	d501      	bpl.n	8017aec <_printf_i+0xbc>
 8017ae8:	681d      	ldr	r5, [r3, #0]
 8017aea:	e003      	b.n	8017af4 <_printf_i+0xc4>
 8017aec:	0645      	lsls	r5, r0, #25
 8017aee:	d5fb      	bpl.n	8017ae8 <_printf_i+0xb8>
 8017af0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017af4:	2d00      	cmp	r5, #0
 8017af6:	da03      	bge.n	8017b00 <_printf_i+0xd0>
 8017af8:	232d      	movs	r3, #45	@ 0x2d
 8017afa:	426d      	negs	r5, r5
 8017afc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b00:	230a      	movs	r3, #10
 8017b02:	4859      	ldr	r0, [pc, #356]	@ (8017c68 <_printf_i+0x238>)
 8017b04:	e011      	b.n	8017b2a <_printf_i+0xfa>
 8017b06:	6821      	ldr	r1, [r4, #0]
 8017b08:	6833      	ldr	r3, [r6, #0]
 8017b0a:	0608      	lsls	r0, r1, #24
 8017b0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017b10:	d402      	bmi.n	8017b18 <_printf_i+0xe8>
 8017b12:	0649      	lsls	r1, r1, #25
 8017b14:	bf48      	it	mi
 8017b16:	b2ad      	uxthmi	r5, r5
 8017b18:	2f6f      	cmp	r7, #111	@ 0x6f
 8017b1a:	6033      	str	r3, [r6, #0]
 8017b1c:	bf14      	ite	ne
 8017b1e:	230a      	movne	r3, #10
 8017b20:	2308      	moveq	r3, #8
 8017b22:	4851      	ldr	r0, [pc, #324]	@ (8017c68 <_printf_i+0x238>)
 8017b24:	2100      	movs	r1, #0
 8017b26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017b2a:	6866      	ldr	r6, [r4, #4]
 8017b2c:	2e00      	cmp	r6, #0
 8017b2e:	bfa8      	it	ge
 8017b30:	6821      	ldrge	r1, [r4, #0]
 8017b32:	60a6      	str	r6, [r4, #8]
 8017b34:	bfa4      	itt	ge
 8017b36:	f021 0104 	bicge.w	r1, r1, #4
 8017b3a:	6021      	strge	r1, [r4, #0]
 8017b3c:	b90d      	cbnz	r5, 8017b42 <_printf_i+0x112>
 8017b3e:	2e00      	cmp	r6, #0
 8017b40:	d04b      	beq.n	8017bda <_printf_i+0x1aa>
 8017b42:	4616      	mov	r6, r2
 8017b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b48:	fb03 5711 	mls	r7, r3, r1, r5
 8017b4c:	5dc7      	ldrb	r7, [r0, r7]
 8017b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b52:	462f      	mov	r7, r5
 8017b54:	42bb      	cmp	r3, r7
 8017b56:	460d      	mov	r5, r1
 8017b58:	d9f4      	bls.n	8017b44 <_printf_i+0x114>
 8017b5a:	2b08      	cmp	r3, #8
 8017b5c:	d10b      	bne.n	8017b76 <_printf_i+0x146>
 8017b5e:	6823      	ldr	r3, [r4, #0]
 8017b60:	07df      	lsls	r7, r3, #31
 8017b62:	d508      	bpl.n	8017b76 <_printf_i+0x146>
 8017b64:	6923      	ldr	r3, [r4, #16]
 8017b66:	6861      	ldr	r1, [r4, #4]
 8017b68:	4299      	cmp	r1, r3
 8017b6a:	bfde      	ittt	le
 8017b6c:	2330      	movle	r3, #48	@ 0x30
 8017b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b76:	1b92      	subs	r2, r2, r6
 8017b78:	6122      	str	r2, [r4, #16]
 8017b7a:	464b      	mov	r3, r9
 8017b7c:	4621      	mov	r1, r4
 8017b7e:	4640      	mov	r0, r8
 8017b80:	f8cd a000 	str.w	sl, [sp]
 8017b84:	aa03      	add	r2, sp, #12
 8017b86:	f7ff fee1 	bl	801794c <_printf_common>
 8017b8a:	3001      	adds	r0, #1
 8017b8c:	d14a      	bne.n	8017c24 <_printf_i+0x1f4>
 8017b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b92:	b004      	add	sp, #16
 8017b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b98:	6823      	ldr	r3, [r4, #0]
 8017b9a:	f043 0320 	orr.w	r3, r3, #32
 8017b9e:	6023      	str	r3, [r4, #0]
 8017ba0:	2778      	movs	r7, #120	@ 0x78
 8017ba2:	4832      	ldr	r0, [pc, #200]	@ (8017c6c <_printf_i+0x23c>)
 8017ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017ba8:	6823      	ldr	r3, [r4, #0]
 8017baa:	6831      	ldr	r1, [r6, #0]
 8017bac:	061f      	lsls	r7, r3, #24
 8017bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8017bb2:	d402      	bmi.n	8017bba <_printf_i+0x18a>
 8017bb4:	065f      	lsls	r7, r3, #25
 8017bb6:	bf48      	it	mi
 8017bb8:	b2ad      	uxthmi	r5, r5
 8017bba:	6031      	str	r1, [r6, #0]
 8017bbc:	07d9      	lsls	r1, r3, #31
 8017bbe:	bf44      	itt	mi
 8017bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8017bc4:	6023      	strmi	r3, [r4, #0]
 8017bc6:	b11d      	cbz	r5, 8017bd0 <_printf_i+0x1a0>
 8017bc8:	2310      	movs	r3, #16
 8017bca:	e7ab      	b.n	8017b24 <_printf_i+0xf4>
 8017bcc:	4826      	ldr	r0, [pc, #152]	@ (8017c68 <_printf_i+0x238>)
 8017bce:	e7e9      	b.n	8017ba4 <_printf_i+0x174>
 8017bd0:	6823      	ldr	r3, [r4, #0]
 8017bd2:	f023 0320 	bic.w	r3, r3, #32
 8017bd6:	6023      	str	r3, [r4, #0]
 8017bd8:	e7f6      	b.n	8017bc8 <_printf_i+0x198>
 8017bda:	4616      	mov	r6, r2
 8017bdc:	e7bd      	b.n	8017b5a <_printf_i+0x12a>
 8017bde:	6833      	ldr	r3, [r6, #0]
 8017be0:	6825      	ldr	r5, [r4, #0]
 8017be2:	1d18      	adds	r0, r3, #4
 8017be4:	6961      	ldr	r1, [r4, #20]
 8017be6:	6030      	str	r0, [r6, #0]
 8017be8:	062e      	lsls	r6, r5, #24
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	d501      	bpl.n	8017bf2 <_printf_i+0x1c2>
 8017bee:	6019      	str	r1, [r3, #0]
 8017bf0:	e002      	b.n	8017bf8 <_printf_i+0x1c8>
 8017bf2:	0668      	lsls	r0, r5, #25
 8017bf4:	d5fb      	bpl.n	8017bee <_printf_i+0x1be>
 8017bf6:	8019      	strh	r1, [r3, #0]
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	4616      	mov	r6, r2
 8017bfc:	6123      	str	r3, [r4, #16]
 8017bfe:	e7bc      	b.n	8017b7a <_printf_i+0x14a>
 8017c00:	6833      	ldr	r3, [r6, #0]
 8017c02:	2100      	movs	r1, #0
 8017c04:	1d1a      	adds	r2, r3, #4
 8017c06:	6032      	str	r2, [r6, #0]
 8017c08:	681e      	ldr	r6, [r3, #0]
 8017c0a:	6862      	ldr	r2, [r4, #4]
 8017c0c:	4630      	mov	r0, r6
 8017c0e:	f000 f95b 	bl	8017ec8 <memchr>
 8017c12:	b108      	cbz	r0, 8017c18 <_printf_i+0x1e8>
 8017c14:	1b80      	subs	r0, r0, r6
 8017c16:	6060      	str	r0, [r4, #4]
 8017c18:	6863      	ldr	r3, [r4, #4]
 8017c1a:	6123      	str	r3, [r4, #16]
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c22:	e7aa      	b.n	8017b7a <_printf_i+0x14a>
 8017c24:	4632      	mov	r2, r6
 8017c26:	4649      	mov	r1, r9
 8017c28:	4640      	mov	r0, r8
 8017c2a:	6923      	ldr	r3, [r4, #16]
 8017c2c:	47d0      	blx	sl
 8017c2e:	3001      	adds	r0, #1
 8017c30:	d0ad      	beq.n	8017b8e <_printf_i+0x15e>
 8017c32:	6823      	ldr	r3, [r4, #0]
 8017c34:	079b      	lsls	r3, r3, #30
 8017c36:	d413      	bmi.n	8017c60 <_printf_i+0x230>
 8017c38:	68e0      	ldr	r0, [r4, #12]
 8017c3a:	9b03      	ldr	r3, [sp, #12]
 8017c3c:	4298      	cmp	r0, r3
 8017c3e:	bfb8      	it	lt
 8017c40:	4618      	movlt	r0, r3
 8017c42:	e7a6      	b.n	8017b92 <_printf_i+0x162>
 8017c44:	2301      	movs	r3, #1
 8017c46:	4632      	mov	r2, r6
 8017c48:	4649      	mov	r1, r9
 8017c4a:	4640      	mov	r0, r8
 8017c4c:	47d0      	blx	sl
 8017c4e:	3001      	adds	r0, #1
 8017c50:	d09d      	beq.n	8017b8e <_printf_i+0x15e>
 8017c52:	3501      	adds	r5, #1
 8017c54:	68e3      	ldr	r3, [r4, #12]
 8017c56:	9903      	ldr	r1, [sp, #12]
 8017c58:	1a5b      	subs	r3, r3, r1
 8017c5a:	42ab      	cmp	r3, r5
 8017c5c:	dcf2      	bgt.n	8017c44 <_printf_i+0x214>
 8017c5e:	e7eb      	b.n	8017c38 <_printf_i+0x208>
 8017c60:	2500      	movs	r5, #0
 8017c62:	f104 0619 	add.w	r6, r4, #25
 8017c66:	e7f5      	b.n	8017c54 <_printf_i+0x224>
 8017c68:	0801ace5 	.word	0x0801ace5
 8017c6c:	0801acf6 	.word	0x0801acf6

08017c70 <__sflush_r>:
 8017c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c76:	0716      	lsls	r6, r2, #28
 8017c78:	4605      	mov	r5, r0
 8017c7a:	460c      	mov	r4, r1
 8017c7c:	d454      	bmi.n	8017d28 <__sflush_r+0xb8>
 8017c7e:	684b      	ldr	r3, [r1, #4]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	dc02      	bgt.n	8017c8a <__sflush_r+0x1a>
 8017c84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	dd48      	ble.n	8017d1c <__sflush_r+0xac>
 8017c8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c8c:	2e00      	cmp	r6, #0
 8017c8e:	d045      	beq.n	8017d1c <__sflush_r+0xac>
 8017c90:	2300      	movs	r3, #0
 8017c92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017c96:	682f      	ldr	r7, [r5, #0]
 8017c98:	6a21      	ldr	r1, [r4, #32]
 8017c9a:	602b      	str	r3, [r5, #0]
 8017c9c:	d030      	beq.n	8017d00 <__sflush_r+0x90>
 8017c9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017ca0:	89a3      	ldrh	r3, [r4, #12]
 8017ca2:	0759      	lsls	r1, r3, #29
 8017ca4:	d505      	bpl.n	8017cb2 <__sflush_r+0x42>
 8017ca6:	6863      	ldr	r3, [r4, #4]
 8017ca8:	1ad2      	subs	r2, r2, r3
 8017caa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017cac:	b10b      	cbz	r3, 8017cb2 <__sflush_r+0x42>
 8017cae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017cb0:	1ad2      	subs	r2, r2, r3
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	4628      	mov	r0, r5
 8017cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017cb8:	6a21      	ldr	r1, [r4, #32]
 8017cba:	47b0      	blx	r6
 8017cbc:	1c43      	adds	r3, r0, #1
 8017cbe:	89a3      	ldrh	r3, [r4, #12]
 8017cc0:	d106      	bne.n	8017cd0 <__sflush_r+0x60>
 8017cc2:	6829      	ldr	r1, [r5, #0]
 8017cc4:	291d      	cmp	r1, #29
 8017cc6:	d82b      	bhi.n	8017d20 <__sflush_r+0xb0>
 8017cc8:	4a28      	ldr	r2, [pc, #160]	@ (8017d6c <__sflush_r+0xfc>)
 8017cca:	410a      	asrs	r2, r1
 8017ccc:	07d6      	lsls	r6, r2, #31
 8017cce:	d427      	bmi.n	8017d20 <__sflush_r+0xb0>
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	6062      	str	r2, [r4, #4]
 8017cd4:	6922      	ldr	r2, [r4, #16]
 8017cd6:	04d9      	lsls	r1, r3, #19
 8017cd8:	6022      	str	r2, [r4, #0]
 8017cda:	d504      	bpl.n	8017ce6 <__sflush_r+0x76>
 8017cdc:	1c42      	adds	r2, r0, #1
 8017cde:	d101      	bne.n	8017ce4 <__sflush_r+0x74>
 8017ce0:	682b      	ldr	r3, [r5, #0]
 8017ce2:	b903      	cbnz	r3, 8017ce6 <__sflush_r+0x76>
 8017ce4:	6560      	str	r0, [r4, #84]	@ 0x54
 8017ce6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017ce8:	602f      	str	r7, [r5, #0]
 8017cea:	b1b9      	cbz	r1, 8017d1c <__sflush_r+0xac>
 8017cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017cf0:	4299      	cmp	r1, r3
 8017cf2:	d002      	beq.n	8017cfa <__sflush_r+0x8a>
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	f7ff fca1 	bl	801763c <_free_r>
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8017cfe:	e00d      	b.n	8017d1c <__sflush_r+0xac>
 8017d00:	2301      	movs	r3, #1
 8017d02:	4628      	mov	r0, r5
 8017d04:	47b0      	blx	r6
 8017d06:	4602      	mov	r2, r0
 8017d08:	1c50      	adds	r0, r2, #1
 8017d0a:	d1c9      	bne.n	8017ca0 <__sflush_r+0x30>
 8017d0c:	682b      	ldr	r3, [r5, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d0c6      	beq.n	8017ca0 <__sflush_r+0x30>
 8017d12:	2b1d      	cmp	r3, #29
 8017d14:	d001      	beq.n	8017d1a <__sflush_r+0xaa>
 8017d16:	2b16      	cmp	r3, #22
 8017d18:	d11d      	bne.n	8017d56 <__sflush_r+0xe6>
 8017d1a:	602f      	str	r7, [r5, #0]
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	e021      	b.n	8017d64 <__sflush_r+0xf4>
 8017d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d24:	b21b      	sxth	r3, r3
 8017d26:	e01a      	b.n	8017d5e <__sflush_r+0xee>
 8017d28:	690f      	ldr	r7, [r1, #16]
 8017d2a:	2f00      	cmp	r7, #0
 8017d2c:	d0f6      	beq.n	8017d1c <__sflush_r+0xac>
 8017d2e:	0793      	lsls	r3, r2, #30
 8017d30:	bf18      	it	ne
 8017d32:	2300      	movne	r3, #0
 8017d34:	680e      	ldr	r6, [r1, #0]
 8017d36:	bf08      	it	eq
 8017d38:	694b      	ldreq	r3, [r1, #20]
 8017d3a:	1bf6      	subs	r6, r6, r7
 8017d3c:	600f      	str	r7, [r1, #0]
 8017d3e:	608b      	str	r3, [r1, #8]
 8017d40:	2e00      	cmp	r6, #0
 8017d42:	ddeb      	ble.n	8017d1c <__sflush_r+0xac>
 8017d44:	4633      	mov	r3, r6
 8017d46:	463a      	mov	r2, r7
 8017d48:	4628      	mov	r0, r5
 8017d4a:	6a21      	ldr	r1, [r4, #32]
 8017d4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8017d50:	47e0      	blx	ip
 8017d52:	2800      	cmp	r0, #0
 8017d54:	dc07      	bgt.n	8017d66 <__sflush_r+0xf6>
 8017d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017d62:	81a3      	strh	r3, [r4, #12]
 8017d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d66:	4407      	add	r7, r0
 8017d68:	1a36      	subs	r6, r6, r0
 8017d6a:	e7e9      	b.n	8017d40 <__sflush_r+0xd0>
 8017d6c:	dfbffffe 	.word	0xdfbffffe

08017d70 <_fflush_r>:
 8017d70:	b538      	push	{r3, r4, r5, lr}
 8017d72:	690b      	ldr	r3, [r1, #16]
 8017d74:	4605      	mov	r5, r0
 8017d76:	460c      	mov	r4, r1
 8017d78:	b913      	cbnz	r3, 8017d80 <_fflush_r+0x10>
 8017d7a:	2500      	movs	r5, #0
 8017d7c:	4628      	mov	r0, r5
 8017d7e:	bd38      	pop	{r3, r4, r5, pc}
 8017d80:	b118      	cbz	r0, 8017d8a <_fflush_r+0x1a>
 8017d82:	6a03      	ldr	r3, [r0, #32]
 8017d84:	b90b      	cbnz	r3, 8017d8a <_fflush_r+0x1a>
 8017d86:	f7ff f9cf 	bl	8017128 <__sinit>
 8017d8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d0f3      	beq.n	8017d7a <_fflush_r+0xa>
 8017d92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017d94:	07d0      	lsls	r0, r2, #31
 8017d96:	d404      	bmi.n	8017da2 <_fflush_r+0x32>
 8017d98:	0599      	lsls	r1, r3, #22
 8017d9a:	d402      	bmi.n	8017da2 <_fflush_r+0x32>
 8017d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d9e:	f7ff fc3c 	bl	801761a <__retarget_lock_acquire_recursive>
 8017da2:	4628      	mov	r0, r5
 8017da4:	4621      	mov	r1, r4
 8017da6:	f7ff ff63 	bl	8017c70 <__sflush_r>
 8017daa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017dac:	4605      	mov	r5, r0
 8017dae:	07da      	lsls	r2, r3, #31
 8017db0:	d4e4      	bmi.n	8017d7c <_fflush_r+0xc>
 8017db2:	89a3      	ldrh	r3, [r4, #12]
 8017db4:	059b      	lsls	r3, r3, #22
 8017db6:	d4e1      	bmi.n	8017d7c <_fflush_r+0xc>
 8017db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017dba:	f7ff fc2f 	bl	801761c <__retarget_lock_release_recursive>
 8017dbe:	e7dd      	b.n	8017d7c <_fflush_r+0xc>

08017dc0 <__swhatbuf_r>:
 8017dc0:	b570      	push	{r4, r5, r6, lr}
 8017dc2:	460c      	mov	r4, r1
 8017dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dc8:	4615      	mov	r5, r2
 8017dca:	2900      	cmp	r1, #0
 8017dcc:	461e      	mov	r6, r3
 8017dce:	b096      	sub	sp, #88	@ 0x58
 8017dd0:	da0c      	bge.n	8017dec <__swhatbuf_r+0x2c>
 8017dd2:	89a3      	ldrh	r3, [r4, #12]
 8017dd4:	2100      	movs	r1, #0
 8017dd6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017dda:	bf14      	ite	ne
 8017ddc:	2340      	movne	r3, #64	@ 0x40
 8017dde:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017de2:	2000      	movs	r0, #0
 8017de4:	6031      	str	r1, [r6, #0]
 8017de6:	602b      	str	r3, [r5, #0]
 8017de8:	b016      	add	sp, #88	@ 0x58
 8017dea:	bd70      	pop	{r4, r5, r6, pc}
 8017dec:	466a      	mov	r2, sp
 8017dee:	f000 f849 	bl	8017e84 <_fstat_r>
 8017df2:	2800      	cmp	r0, #0
 8017df4:	dbed      	blt.n	8017dd2 <__swhatbuf_r+0x12>
 8017df6:	9901      	ldr	r1, [sp, #4]
 8017df8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017dfc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017e00:	4259      	negs	r1, r3
 8017e02:	4159      	adcs	r1, r3
 8017e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e08:	e7eb      	b.n	8017de2 <__swhatbuf_r+0x22>

08017e0a <__smakebuf_r>:
 8017e0a:	898b      	ldrh	r3, [r1, #12]
 8017e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e0e:	079d      	lsls	r5, r3, #30
 8017e10:	4606      	mov	r6, r0
 8017e12:	460c      	mov	r4, r1
 8017e14:	d507      	bpl.n	8017e26 <__smakebuf_r+0x1c>
 8017e16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e1a:	6023      	str	r3, [r4, #0]
 8017e1c:	6123      	str	r3, [r4, #16]
 8017e1e:	2301      	movs	r3, #1
 8017e20:	6163      	str	r3, [r4, #20]
 8017e22:	b003      	add	sp, #12
 8017e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e26:	466a      	mov	r2, sp
 8017e28:	ab01      	add	r3, sp, #4
 8017e2a:	f7ff ffc9 	bl	8017dc0 <__swhatbuf_r>
 8017e2e:	9f00      	ldr	r7, [sp, #0]
 8017e30:	4605      	mov	r5, r0
 8017e32:	4639      	mov	r1, r7
 8017e34:	4630      	mov	r0, r6
 8017e36:	f7ff f85f 	bl	8016ef8 <_malloc_r>
 8017e3a:	b948      	cbnz	r0, 8017e50 <__smakebuf_r+0x46>
 8017e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e40:	059a      	lsls	r2, r3, #22
 8017e42:	d4ee      	bmi.n	8017e22 <__smakebuf_r+0x18>
 8017e44:	f023 0303 	bic.w	r3, r3, #3
 8017e48:	f043 0302 	orr.w	r3, r3, #2
 8017e4c:	81a3      	strh	r3, [r4, #12]
 8017e4e:	e7e2      	b.n	8017e16 <__smakebuf_r+0xc>
 8017e50:	89a3      	ldrh	r3, [r4, #12]
 8017e52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e5a:	81a3      	strh	r3, [r4, #12]
 8017e5c:	9b01      	ldr	r3, [sp, #4]
 8017e5e:	6020      	str	r0, [r4, #0]
 8017e60:	b15b      	cbz	r3, 8017e7a <__smakebuf_r+0x70>
 8017e62:	4630      	mov	r0, r6
 8017e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e68:	f000 f81e 	bl	8017ea8 <_isatty_r>
 8017e6c:	b128      	cbz	r0, 8017e7a <__smakebuf_r+0x70>
 8017e6e:	89a3      	ldrh	r3, [r4, #12]
 8017e70:	f023 0303 	bic.w	r3, r3, #3
 8017e74:	f043 0301 	orr.w	r3, r3, #1
 8017e78:	81a3      	strh	r3, [r4, #12]
 8017e7a:	89a3      	ldrh	r3, [r4, #12]
 8017e7c:	431d      	orrs	r5, r3
 8017e7e:	81a5      	strh	r5, [r4, #12]
 8017e80:	e7cf      	b.n	8017e22 <__smakebuf_r+0x18>
	...

08017e84 <_fstat_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	2300      	movs	r3, #0
 8017e88:	4d06      	ldr	r5, [pc, #24]	@ (8017ea4 <_fstat_r+0x20>)
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	4611      	mov	r1, r2
 8017e90:	602b      	str	r3, [r5, #0]
 8017e92:	f7e8 ffb1 	bl	8000df8 <_fstat>
 8017e96:	1c43      	adds	r3, r0, #1
 8017e98:	d102      	bne.n	8017ea0 <_fstat_r+0x1c>
 8017e9a:	682b      	ldr	r3, [r5, #0]
 8017e9c:	b103      	cbz	r3, 8017ea0 <_fstat_r+0x1c>
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	bd38      	pop	{r3, r4, r5, pc}
 8017ea2:	bf00      	nop
 8017ea4:	20009b20 	.word	0x20009b20

08017ea8 <_isatty_r>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	2300      	movs	r3, #0
 8017eac:	4d05      	ldr	r5, [pc, #20]	@ (8017ec4 <_isatty_r+0x1c>)
 8017eae:	4604      	mov	r4, r0
 8017eb0:	4608      	mov	r0, r1
 8017eb2:	602b      	str	r3, [r5, #0]
 8017eb4:	f7e8 ffaf 	bl	8000e16 <_isatty>
 8017eb8:	1c43      	adds	r3, r0, #1
 8017eba:	d102      	bne.n	8017ec2 <_isatty_r+0x1a>
 8017ebc:	682b      	ldr	r3, [r5, #0]
 8017ebe:	b103      	cbz	r3, 8017ec2 <_isatty_r+0x1a>
 8017ec0:	6023      	str	r3, [r4, #0]
 8017ec2:	bd38      	pop	{r3, r4, r5, pc}
 8017ec4:	20009b20 	.word	0x20009b20

08017ec8 <memchr>:
 8017ec8:	4603      	mov	r3, r0
 8017eca:	b510      	push	{r4, lr}
 8017ecc:	b2c9      	uxtb	r1, r1
 8017ece:	4402      	add	r2, r0
 8017ed0:	4293      	cmp	r3, r2
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	d101      	bne.n	8017eda <memchr+0x12>
 8017ed6:	2000      	movs	r0, #0
 8017ed8:	e003      	b.n	8017ee2 <memchr+0x1a>
 8017eda:	7804      	ldrb	r4, [r0, #0]
 8017edc:	3301      	adds	r3, #1
 8017ede:	428c      	cmp	r4, r1
 8017ee0:	d1f6      	bne.n	8017ed0 <memchr+0x8>
 8017ee2:	bd10      	pop	{r4, pc}

08017ee4 <_init>:
 8017ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee6:	bf00      	nop
 8017ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eea:	bc08      	pop	{r3}
 8017eec:	469e      	mov	lr, r3
 8017eee:	4770      	bx	lr

08017ef0 <_fini>:
 8017ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ef2:	bf00      	nop
 8017ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ef6:	bc08      	pop	{r3}
 8017ef8:	469e      	mov	lr, r3
 8017efa:	4770      	bx	lr
