
STM32_Keypad_4x4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08006808  08006808  00007808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006900  08006900  0000817c  2**0
                  CONTENTS
  4 .ARM          00000008  08006900  08006900  00007900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006908  08006908  0000817c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800690c  0800690c  0000790c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08006910  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013e4  2000017c  08006a8c  0000817c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001560  08006a8c  00008560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3c7  00000000  00000000  000081a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3c  00000000  00000000  0001456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00016fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083d  00000000  00000000  00017ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211d8  00000000  00000000  0001831d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ad  00000000  00000000  000394f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3538  00000000  00000000  000489a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbeda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c18  00000000  00000000  000fbf20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000feb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000017c 	.word	0x2000017c
 8000200:	00000000 	.word	0x00000000
 8000204:	080067f0 	.word	0x080067f0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000180 	.word	0x20000180
 8000220:	080067f0 	.word	0x080067f0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b968 	b.w	800051c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	fb07 1114 	mls	r1, r7, r4, r1
 800029e:	fa1f f68c 	uxth.w	r6, ip
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8110 	bcs.w	80004de <__udivmoddi4+0x27a>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810d 	bls.w	80004de <__udivmoddi4+0x27a>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	fb00 f606 	mul.w	r6, r0, r6
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fa 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f7 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b9b      	subs	r3, r3, r6
 80002fc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80ee 	bcc.w	800050c <__udivmoddi4+0x2a8>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 808f 	bne.w	8000466 <__udivmoddi4+0x202>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	2101      	movs	r1, #1
 800034e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	fb07 f006 	mul.w	r0, r7, r6
 8000362:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	fb00 f707 	mul.w	r7, r0, r7
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80ae 	bhi.w	8000506 <__udivmoddi4+0x2a2>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa24 f607 	lsr.w	r6, r4, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbb6 f8f9 	udiv	r8, r6, r9
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fb09 6618 	mls	r6, r9, r8, r6
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	408c      	lsls	r4, r1
 80003dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003e0:	fb08 f00e 	mul.w	r0, r8, lr
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0c23      	lsrs	r3, r4, #16
 80003e8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ec:	4298      	cmp	r0, r3
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	eb1c 0303 	adds.w	r3, ip, r3
 80003f8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003fc:	f080 8081 	bcs.w	8000502 <__udivmoddi4+0x29e>
 8000400:	4298      	cmp	r0, r3
 8000402:	d97e      	bls.n	8000502 <__udivmoddi4+0x29e>
 8000404:	f1a8 0802 	sub.w	r8, r8, #2
 8000408:	4463      	add	r3, ip
 800040a:	1a1e      	subs	r6, r3, r0
 800040c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000410:	fb09 6613 	mls	r6, r9, r3, r6
 8000414:	fb03 fe0e 	mul.w	lr, r3, lr
 8000418:	b2a4      	uxth	r4, r4
 800041a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800041e:	45a6      	cmp	lr, r4
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x1d0>
 8000422:	eb1c 0404 	adds.w	r4, ip, r4
 8000426:	f103 30ff 	add.w	r0, r3, #4294967295
 800042a:	d266      	bcs.n	80004fa <__udivmoddi4+0x296>
 800042c:	45a6      	cmp	lr, r4
 800042e:	d964      	bls.n	80004fa <__udivmoddi4+0x296>
 8000430:	3b02      	subs	r3, #2
 8000432:	4464      	add	r4, ip
 8000434:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000438:	fba0 8302 	umull	r8, r3, r0, r2
 800043c:	eba4 040e 	sub.w	r4, r4, lr
 8000440:	429c      	cmp	r4, r3
 8000442:	46c6      	mov	lr, r8
 8000444:	461e      	mov	r6, r3
 8000446:	d350      	bcc.n	80004ea <__udivmoddi4+0x286>
 8000448:	d04d      	beq.n	80004e6 <__udivmoddi4+0x282>
 800044a:	b155      	cbz	r5, 8000462 <__udivmoddi4+0x1fe>
 800044c:	ebba 030e 	subs.w	r3, sl, lr
 8000450:	eb64 0406 	sbc.w	r4, r4, r6
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	40cb      	lsrs	r3, r1
 800045a:	431f      	orrs	r7, r3
 800045c:	40cc      	lsrs	r4, r1
 800045e:	e9c5 7400 	strd	r7, r4, [r5]
 8000462:	2100      	movs	r1, #0
 8000464:	e751      	b.n	800030a <__udivmoddi4+0xa6>
 8000466:	fa0c fc02 	lsl.w	ip, ip, r2
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d9      	lsrs	r1, r3
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa20 f303 	lsr.w	r3, r0, r3
 8000478:	fa00 fe02 	lsl.w	lr, r0, r2
 800047c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000480:	fb08 1110 	mls	r1, r8, r0, r1
 8000484:	4094      	lsls	r4, r2
 8000486:	431c      	orrs	r4, r3
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x248>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29a>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b2:	fb08 3311 	mls	r3, r8, r1, r3
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x292>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x292>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f2      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e708      	b.n	80002f8 <__udivmoddi4+0x94>
 80004e6:	45c2      	cmp	sl, r8
 80004e8:	d2af      	bcs.n	800044a <__udivmoddi4+0x1e6>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 060c 	sbc.w	r6, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a9      	b.n	800044a <__udivmoddi4+0x1e6>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x272>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e79a      	b.n	8000434 <__udivmoddi4+0x1d0>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x248>
 8000502:	46b0      	mov	r8, r6
 8000504:	e781      	b.n	800040a <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74f      	b.n	80003ac <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e711      	b.n	8000338 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <read_keypad>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void read_keypad (void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b090      	sub	sp, #64	@ 0x40
 8000524:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	@ 0x40
 800052a:	48b7      	ldr	r0, [pc, #732]	@ (8000808 <read_keypad+0x2e8>)
 800052c:	f000 ff25 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000530:	2201      	movs	r2, #1
 8000532:	2102      	movs	r1, #2
 8000534:	48b5      	ldr	r0, [pc, #724]	@ (800080c <read_keypad+0x2ec>)
 8000536:	f000 ff20 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 800053a:	2201      	movs	r2, #1
 800053c:	2101      	movs	r1, #1
 800053e:	48b3      	ldr	r0, [pc, #716]	@ (800080c <read_keypad+0x2ec>)
 8000540:	f000 ff1b 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000544:	2201      	movs	r2, #1
 8000546:	2180      	movs	r1, #128	@ 0x80
 8000548:	48b1      	ldr	r0, [pc, #708]	@ (8000810 <read_keypad+0x2f0>)
 800054a:	f000 ff16 	bl	800137a <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800054e:	2180      	movs	r1, #128	@ 0x80
 8000550:	48ad      	ldr	r0, [pc, #692]	@ (8000808 <read_keypad+0x2e8>)
 8000552:	f000 fefb 	bl	800134c <HAL_GPIO_ReadPin>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d112      	bne.n	8000582 <read_keypad+0x62>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 800055c:	bf00      	nop
 800055e:	2180      	movs	r1, #128	@ 0x80
 8000560:	48a9      	ldr	r0, [pc, #676]	@ (8000808 <read_keypad+0x2e8>)
 8000562:	f000 fef3 	bl	800134c <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f8      	beq.n	800055e <read_keypad+0x3e>
		uint8_t *data = (uint8_t *)"Key: 1\n";
 800056c:	4ba9      	ldr	r3, [pc, #676]	@ (8000814 <read_keypad+0x2f4>)
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000570:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000572:	f7ff fe57 	bl	8000224 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29b      	uxth	r3, r3
 800057a:	4619      	mov	r1, r3
 800057c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800057e:	f005 fd03 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000582:	2110      	movs	r1, #16
 8000584:	48a1      	ldr	r0, [pc, #644]	@ (800080c <read_keypad+0x2ec>)
 8000586:	f000 fee1 	bl	800134c <HAL_GPIO_ReadPin>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d112      	bne.n	80005b6 <read_keypad+0x96>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8000590:	bf00      	nop
 8000592:	2110      	movs	r1, #16
 8000594:	489d      	ldr	r0, [pc, #628]	@ (800080c <read_keypad+0x2ec>)
 8000596:	f000 fed9 	bl	800134c <HAL_GPIO_ReadPin>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d0f8      	beq.n	8000592 <read_keypad+0x72>
		uint8_t *data = (uint8_t *)"Key: 2\n";
 80005a0:	4b9d      	ldr	r3, [pc, #628]	@ (8000818 <read_keypad+0x2f8>)
 80005a2:	63bb      	str	r3, [r7, #56]	@ 0x38
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80005a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80005a6:	f7ff fe3d 	bl	8000224 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	4619      	mov	r1, r3
 80005b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80005b2:	f005 fce9 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80005b6:	2108      	movs	r1, #8
 80005b8:	4894      	ldr	r0, [pc, #592]	@ (800080c <read_keypad+0x2ec>)
 80005ba:	f000 fec7 	bl	800134c <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d112      	bne.n	80005ea <read_keypad+0xca>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80005c4:	bf00      	nop
 80005c6:	2108      	movs	r1, #8
 80005c8:	4890      	ldr	r0, [pc, #576]	@ (800080c <read_keypad+0x2ec>)
 80005ca:	f000 febf 	bl	800134c <HAL_GPIO_ReadPin>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f8      	beq.n	80005c6 <read_keypad+0xa6>
		uint8_t *data = (uint8_t *)"Key: 3\n";
 80005d4:	4b91      	ldr	r3, [pc, #580]	@ (800081c <read_keypad+0x2fc>)
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80005d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80005da:	f7ff fe23 	bl	8000224 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80005e6:	f005 fccf 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80005ea:	2104      	movs	r1, #4
 80005ec:	4887      	ldr	r0, [pc, #540]	@ (800080c <read_keypad+0x2ec>)
 80005ee:	f000 fead 	bl	800134c <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d112      	bne.n	800061e <read_keypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80005f8:	bf00      	nop
 80005fa:	2104      	movs	r1, #4
 80005fc:	4883      	ldr	r0, [pc, #524]	@ (800080c <read_keypad+0x2ec>)
 80005fe:	f000 fea5 	bl	800134c <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <read_keypad+0xda>
		uint8_t *data = (uint8_t *)"Key: A\n";
 8000608:	4b85      	ldr	r3, [pc, #532]	@ (8000820 <read_keypad+0x300>)
 800060a:	633b      	str	r3, [r7, #48]	@ 0x30
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 800060c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800060e:	f7ff fe09 	bl	8000224 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29b      	uxth	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800061a:	f005 fcb5 	bl	8005f88 <CDC_Transmit_FS>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800061e:	2201      	movs	r2, #1
 8000620:	2140      	movs	r1, #64	@ 0x40
 8000622:	4879      	ldr	r0, [pc, #484]	@ (8000808 <read_keypad+0x2e8>)
 8000624:	f000 fea9 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 8000628:	2200      	movs	r2, #0
 800062a:	2102      	movs	r1, #2
 800062c:	4877      	ldr	r0, [pc, #476]	@ (800080c <read_keypad+0x2ec>)
 800062e:	f000 fea4 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000632:	2201      	movs	r2, #1
 8000634:	2101      	movs	r1, #1
 8000636:	4875      	ldr	r0, [pc, #468]	@ (800080c <read_keypad+0x2ec>)
 8000638:	f000 fe9f 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800063c:	2201      	movs	r2, #1
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	4873      	ldr	r0, [pc, #460]	@ (8000810 <read_keypad+0x2f0>)
 8000642:	f000 fe9a 	bl	800137a <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	486f      	ldr	r0, [pc, #444]	@ (8000808 <read_keypad+0x2e8>)
 800064a:	f000 fe7f 	bl	800134c <HAL_GPIO_ReadPin>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d112      	bne.n	800067a <read_keypad+0x15a>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 8000654:	bf00      	nop
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	486b      	ldr	r0, [pc, #428]	@ (8000808 <read_keypad+0x2e8>)
 800065a:	f000 fe77 	bl	800134c <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f8      	beq.n	8000656 <read_keypad+0x136>
		uint8_t *data = (uint8_t *)"Key: 4\n";
 8000664:	4b6f      	ldr	r3, [pc, #444]	@ (8000824 <read_keypad+0x304>)
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000668:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800066a:	f7ff fddb 	bl	8000224 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29b      	uxth	r3, r3
 8000672:	4619      	mov	r1, r3
 8000674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000676:	f005 fc87 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 800067a:	2110      	movs	r1, #16
 800067c:	4863      	ldr	r0, [pc, #396]	@ (800080c <read_keypad+0x2ec>)
 800067e:	f000 fe65 	bl	800134c <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d112      	bne.n	80006ae <read_keypad+0x18e>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8000688:	bf00      	nop
 800068a:	2110      	movs	r1, #16
 800068c:	485f      	ldr	r0, [pc, #380]	@ (800080c <read_keypad+0x2ec>)
 800068e:	f000 fe5d 	bl	800134c <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f8      	beq.n	800068a <read_keypad+0x16a>
		uint8_t *data = (uint8_t *)"Key: 5\n";
 8000698:	4b63      	ldr	r3, [pc, #396]	@ (8000828 <read_keypad+0x308>)
 800069a:	62bb      	str	r3, [r7, #40]	@ 0x28
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 800069c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800069e:	f7ff fdc1 	bl	8000224 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	4619      	mov	r1, r3
 80006a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80006aa:	f005 fc6d 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80006ae:	2108      	movs	r1, #8
 80006b0:	4856      	ldr	r0, [pc, #344]	@ (800080c <read_keypad+0x2ec>)
 80006b2:	f000 fe4b 	bl	800134c <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d112      	bne.n	80006e2 <read_keypad+0x1c2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80006bc:	bf00      	nop
 80006be:	2108      	movs	r1, #8
 80006c0:	4852      	ldr	r0, [pc, #328]	@ (800080c <read_keypad+0x2ec>)
 80006c2:	f000 fe43 	bl	800134c <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0f8      	beq.n	80006be <read_keypad+0x19e>
		uint8_t *data = (uint8_t *)"Key: 6\n";
 80006cc:	4b57      	ldr	r3, [pc, #348]	@ (800082c <read_keypad+0x30c>)
 80006ce:	627b      	str	r3, [r7, #36]	@ 0x24
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80006d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006d2:	f7ff fda7 	bl	8000224 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006de:	f005 fc53 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80006e2:	2104      	movs	r1, #4
 80006e4:	4849      	ldr	r0, [pc, #292]	@ (800080c <read_keypad+0x2ec>)
 80006e6:	f000 fe31 	bl	800134c <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d112      	bne.n	8000716 <read_keypad+0x1f6>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2104      	movs	r1, #4
 80006f4:	4845      	ldr	r0, [pc, #276]	@ (800080c <read_keypad+0x2ec>)
 80006f6:	f000 fe29 	bl	800134c <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f8      	beq.n	80006f2 <read_keypad+0x1d2>
		uint8_t *data = (uint8_t *)"Key: B\n";
 8000700:	4b4b      	ldr	r3, [pc, #300]	@ (8000830 <read_keypad+0x310>)
 8000702:	623b      	str	r3, [r7, #32]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000704:	6a38      	ldr	r0, [r7, #32]
 8000706:	f7ff fd8d 	bl	8000224 <strlen>
 800070a:	4603      	mov	r3, r0
 800070c:	b29b      	uxth	r3, r3
 800070e:	4619      	mov	r1, r3
 8000710:	6a38      	ldr	r0, [r7, #32]
 8000712:	f005 fc39 	bl	8005f88 <CDC_Transmit_FS>
	}


	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000716:	2201      	movs	r2, #1
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	483b      	ldr	r0, [pc, #236]	@ (8000808 <read_keypad+0x2e8>)
 800071c:	f000 fe2d 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000720:	2201      	movs	r2, #1
 8000722:	2102      	movs	r1, #2
 8000724:	4839      	ldr	r0, [pc, #228]	@ (800080c <read_keypad+0x2ec>)
 8000726:	f000 fe28 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	4837      	ldr	r0, [pc, #220]	@ (800080c <read_keypad+0x2ec>)
 8000730:	f000 fe23 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000734:	2201      	movs	r2, #1
 8000736:	2180      	movs	r1, #128	@ 0x80
 8000738:	4835      	ldr	r0, [pc, #212]	@ (8000810 <read_keypad+0x2f0>)
 800073a:	f000 fe1e 	bl	800137a <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4831      	ldr	r0, [pc, #196]	@ (8000808 <read_keypad+0x2e8>)
 8000742:	f000 fe03 	bl	800134c <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d112      	bne.n	8000772 <read_keypad+0x252>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 800074c:	bf00      	nop
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	482d      	ldr	r0, [pc, #180]	@ (8000808 <read_keypad+0x2e8>)
 8000752:	f000 fdfb 	bl	800134c <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0f8      	beq.n	800074e <read_keypad+0x22e>
		uint8_t *data = (uint8_t *)"Key: 7\n";
 800075c:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <read_keypad+0x314>)
 800075e:	61fb      	str	r3, [r7, #28]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000760:	69f8      	ldr	r0, [r7, #28]
 8000762:	f7ff fd5f 	bl	8000224 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29b      	uxth	r3, r3
 800076a:	4619      	mov	r1, r3
 800076c:	69f8      	ldr	r0, [r7, #28]
 800076e:	f005 fc0b 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 8000772:	2110      	movs	r1, #16
 8000774:	4825      	ldr	r0, [pc, #148]	@ (800080c <read_keypad+0x2ec>)
 8000776:	f000 fde9 	bl	800134c <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d112      	bne.n	80007a6 <read_keypad+0x286>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 8000780:	bf00      	nop
 8000782:	2110      	movs	r1, #16
 8000784:	4821      	ldr	r0, [pc, #132]	@ (800080c <read_keypad+0x2ec>)
 8000786:	f000 fde1 	bl	800134c <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d0f8      	beq.n	8000782 <read_keypad+0x262>
		uint8_t *data = (uint8_t *)"Key: 8\n";
 8000790:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <read_keypad+0x318>)
 8000792:	61bb      	str	r3, [r7, #24]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000794:	69b8      	ldr	r0, [r7, #24]
 8000796:	f7ff fd45 	bl	8000224 <strlen>
 800079a:	4603      	mov	r3, r0
 800079c:	b29b      	uxth	r3, r3
 800079e:	4619      	mov	r1, r3
 80007a0:	69b8      	ldr	r0, [r7, #24]
 80007a2:	f005 fbf1 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80007a6:	2108      	movs	r1, #8
 80007a8:	4818      	ldr	r0, [pc, #96]	@ (800080c <read_keypad+0x2ec>)
 80007aa:	f000 fdcf 	bl	800134c <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d112      	bne.n	80007da <read_keypad+0x2ba>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80007b4:	bf00      	nop
 80007b6:	2108      	movs	r1, #8
 80007b8:	4814      	ldr	r0, [pc, #80]	@ (800080c <read_keypad+0x2ec>)
 80007ba:	f000 fdc7 	bl	800134c <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d0f8      	beq.n	80007b6 <read_keypad+0x296>
		uint8_t *data = (uint8_t *)"Key: 9\n";
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <read_keypad+0x31c>)
 80007c6:	617b      	str	r3, [r7, #20]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80007c8:	6978      	ldr	r0, [r7, #20]
 80007ca:	f7ff fd2b 	bl	8000224 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	4619      	mov	r1, r3
 80007d4:	6978      	ldr	r0, [r7, #20]
 80007d6:	f005 fbd7 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 80007da:	2104      	movs	r1, #4
 80007dc:	480b      	ldr	r0, [pc, #44]	@ (800080c <read_keypad+0x2ec>)
 80007de:	f000 fdb5 	bl	800134c <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d132      	bne.n	800084e <read_keypad+0x32e>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 80007e8:	bf00      	nop
 80007ea:	2104      	movs	r1, #4
 80007ec:	4807      	ldr	r0, [pc, #28]	@ (800080c <read_keypad+0x2ec>)
 80007ee:	f000 fdad 	bl	800134c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0f8      	beq.n	80007ea <read_keypad+0x2ca>
		uint8_t *data = (uint8_t *)"Key: C\n";
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <read_keypad+0x320>)
 80007fa:	613b      	str	r3, [r7, #16]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80007fc:	6938      	ldr	r0, [r7, #16]
 80007fe:	f7ff fd11 	bl	8000224 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	e01e      	b.n	8000844 <read_keypad+0x324>
 8000806:	bf00      	nop
 8000808:	40010c00 	.word	0x40010c00
 800080c:	40011800 	.word	0x40011800
 8000810:	40011400 	.word	0x40011400
 8000814:	08006808 	.word	0x08006808
 8000818:	08006810 	.word	0x08006810
 800081c:	08006818 	.word	0x08006818
 8000820:	08006820 	.word	0x08006820
 8000824:	08006828 	.word	0x08006828
 8000828:	08006830 	.word	0x08006830
 800082c:	08006838 	.word	0x08006838
 8000830:	08006840 	.word	0x08006840
 8000834:	08006848 	.word	0x08006848
 8000838:	08006850 	.word	0x08006850
 800083c:	08006858 	.word	0x08006858
 8000840:	08006860 	.word	0x08006860
 8000844:	b29b      	uxth	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	6938      	ldr	r0, [r7, #16]
 800084a:	f005 fb9d 	bl	8005f88 <CDC_Transmit_FS>
	}


	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (R1_GPIO_Port, R1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 800084e:	2201      	movs	r2, #1
 8000850:	2140      	movs	r1, #64	@ 0x40
 8000852:	483f      	ldr	r0, [pc, #252]	@ (8000950 <read_keypad+0x430>)
 8000854:	f000 fd91 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R2_GPIO_Port, R2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	483d      	ldr	r0, [pc, #244]	@ (8000954 <read_keypad+0x434>)
 800085e:	f000 fd8c 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R3_GPIO_Port, R3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000862:	2201      	movs	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	483b      	ldr	r0, [pc, #236]	@ (8000954 <read_keypad+0x434>)
 8000868:	f000 fd87 	bl	800137a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 800086c:	2200      	movs	r2, #0
 800086e:	2180      	movs	r1, #128	@ 0x80
 8000870:	4839      	ldr	r0, [pc, #228]	@ (8000958 <read_keypad+0x438>)
 8000872:	f000 fd82 	bl	800137a <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)))   // if the Col 1 is low
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	4835      	ldr	r0, [pc, #212]	@ (8000950 <read_keypad+0x430>)
 800087a:	f000 fd67 	bl	800134c <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d112      	bne.n	80008aa <read_keypad+0x38a>
	{
		while (!(HAL_GPIO_ReadPin (C1_GPIO_Port, C1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	@ 0x80
 8000888:	4831      	ldr	r0, [pc, #196]	@ (8000950 <read_keypad+0x430>)
 800088a:	f000 fd5f 	bl	800134c <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f8      	beq.n	8000886 <read_keypad+0x366>
		uint8_t *data = (uint8_t *)"Key: *\n";
 8000894:	4b31      	ldr	r3, [pc, #196]	@ (800095c <read_keypad+0x43c>)
 8000896:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff fcc3 	bl	8000224 <strlen>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f005 fb6f 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)))   // if the Col 2 is low
 80008aa:	2110      	movs	r1, #16
 80008ac:	4829      	ldr	r0, [pc, #164]	@ (8000954 <read_keypad+0x434>)
 80008ae:	f000 fd4d 	bl	800134c <HAL_GPIO_ReadPin>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d112      	bne.n	80008de <read_keypad+0x3be>
	{
		while (!(HAL_GPIO_ReadPin (C2_GPIO_Port, C2_Pin)));   // wait till the button is pressed
 80008b8:	bf00      	nop
 80008ba:	2110      	movs	r1, #16
 80008bc:	4825      	ldr	r0, [pc, #148]	@ (8000954 <read_keypad+0x434>)
 80008be:	f000 fd45 	bl	800134c <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d0f8      	beq.n	80008ba <read_keypad+0x39a>
		uint8_t *data = (uint8_t *)"Key: 0\n";
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <read_keypad+0x440>)
 80008ca:	60bb      	str	r3, [r7, #8]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80008cc:	68b8      	ldr	r0, [r7, #8]
 80008ce:	f7ff fca9 	bl	8000224 <strlen>
 80008d2:	4603      	mov	r3, r0
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	68b8      	ldr	r0, [r7, #8]
 80008da:	f005 fb55 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)))   // if the Col 3 is low
 80008de:	2108      	movs	r1, #8
 80008e0:	481c      	ldr	r0, [pc, #112]	@ (8000954 <read_keypad+0x434>)
 80008e2:	f000 fd33 	bl	800134c <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d112      	bne.n	8000912 <read_keypad+0x3f2>
	{
		while (!(HAL_GPIO_ReadPin (C3_GPIO_Port, C3_Pin)));   // wait till the button is pressed
 80008ec:	bf00      	nop
 80008ee:	2108      	movs	r1, #8
 80008f0:	4818      	ldr	r0, [pc, #96]	@ (8000954 <read_keypad+0x434>)
 80008f2:	f000 fd2b 	bl	800134c <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d0f8      	beq.n	80008ee <read_keypad+0x3ce>
		uint8_t *data = (uint8_t *)"Key: #\n";
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <read_keypad+0x444>)
 80008fe:	607b      	str	r3, [r7, #4]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fc8f 	bl	8000224 <strlen>
 8000906:	4603      	mov	r3, r0
 8000908:	b29b      	uxth	r3, r3
 800090a:	4619      	mov	r1, r3
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f005 fb3b 	bl	8005f88 <CDC_Transmit_FS>
	}

	if (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)))   // if the Col 4 is low
 8000912:	2104      	movs	r1, #4
 8000914:	480f      	ldr	r0, [pc, #60]	@ (8000954 <read_keypad+0x434>)
 8000916:	f000 fd19 	bl	800134c <HAL_GPIO_ReadPin>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d112      	bne.n	8000946 <read_keypad+0x426>
	{
		while (!(HAL_GPIO_ReadPin (C4_GPIO_Port, C4_Pin)));   // wait till the button is pressed
 8000920:	bf00      	nop
 8000922:	2104      	movs	r1, #4
 8000924:	480b      	ldr	r0, [pc, #44]	@ (8000954 <read_keypad+0x434>)
 8000926:	f000 fd11 	bl	800134c <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f8      	beq.n	8000922 <read_keypad+0x402>
		uint8_t *data = (uint8_t *)"Key: D\n";
 8000930:	4b0d      	ldr	r3, [pc, #52]	@ (8000968 <read_keypad+0x448>)
 8000932:	603b      	str	r3, [r7, #0]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f7ff fc75 	bl	8000224 <strlen>
 800093a:	4603      	mov	r3, r0
 800093c:	b29b      	uxth	r3, r3
 800093e:	4619      	mov	r1, r3
 8000940:	6838      	ldr	r0, [r7, #0]
 8000942:	f005 fb21 	bl	8005f88 <CDC_Transmit_FS>
	}

}
 8000946:	bf00      	nop
 8000948:	3740      	adds	r7, #64	@ 0x40
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40010c00 	.word	0x40010c00
 8000954:	40011800 	.word	0x40011800
 8000958:	40011400 	.word	0x40011400
 800095c:	08006868 	.word	0x08006868
 8000960:	08006870 	.word	0x08006870
 8000964:	08006878 	.word	0x08006878
 8000968:	08006880 	.word	0x08006880

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f000 f9d4 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f80c 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f000 f890 	bl	8000a9c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800097c:	f005 fa46 	bl	8005e0c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_keypad ();
 8000980:	f7ff fdce 	bl	8000520 <read_keypad>
	  HAL_Delay(100);
 8000984:	2064      	movs	r0, #100	@ 0x64
 8000986:	f000 fa2b 	bl	8000de0 <HAL_Delay>
	  read_keypad ();
 800098a:	bf00      	nop
 800098c:	e7f8      	b.n	8000980 <main+0x14>
	...

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b09c      	sub	sp, #112	@ 0x70
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800099a:	2238      	movs	r2, #56	@ 0x38
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 fefa 	bl	8006798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2220      	movs	r2, #32
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 feec 	bl	8006798 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80009ca:	2304      	movs	r3, #4
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ce:	2301      	movs	r3, #1
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80009d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009e2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009e6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80009ec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80009f2:	2340      	movs	r3, #64	@ 0x40
 80009f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fdf4 	bl	80025e8 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a06:	f000 f8ef 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 f8f4 	bl	8002c14 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a32:	f000 f8d9 	bl	8000be8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000a36:	2310      	movs	r3, #16
 8000a38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLI2S.PLLI2SMUL = RCC_PLLI2S_MUL10;
 8000a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a42:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLI2S.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000a44:	2340      	movs	r3, #64	@ 0x40
 8000a46:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fae8 	bl	8003020 <HAL_RCCEx_PeriphCLKConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a56:	f000 f8c7 	bl	8000be8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 8000a60:	2000      	movs	r0, #0
 8000a62:	f002 f9c1 	bl	8002de8 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <SystemClock_Config+0x104>)
 8000a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000a6e:	4a09      	ldr	r2, [pc, #36]	@ (8000a94 <SystemClock_Config+0x104>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a74:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <SystemClock_Config+0x104>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <SystemClock_Config+0x104>)
 8000a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SystemClock_Config+0x108>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	3770      	adds	r7, #112	@ 0x70
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40021000 	.word	0x40021000
 8000a98:	42420070 	.word	0x42420070

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0310 	add.w	r3, r7, #16
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab0:	4b48      	ldr	r3, [pc, #288]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a47      	ldr	r2, [pc, #284]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b45      	ldr	r3, [pc, #276]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	4b42      	ldr	r3, [pc, #264]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4a41      	ldr	r2, [pc, #260]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6193      	str	r3, [r2, #24]
 8000ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	60bb      	str	r3, [r7, #8]
 8000ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000ae6:	f043 0320 	orr.w	r3, r3, #32
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0320 	and.w	r3, r3, #32
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b36      	ldr	r3, [pc, #216]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a35      	ldr	r2, [pc, #212]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b33      	ldr	r3, [pc, #204]	@ (8000bd4 <MX_GPIO_Init+0x138>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R4_GPIO_Port, R4_Pin, GPIO_PIN_RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2180      	movs	r1, #128	@ 0x80
 8000b14:	4830      	ldr	r0, [pc, #192]	@ (8000bd8 <MX_GPIO_Init+0x13c>)
 8000b16:	f000 fc30 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2140      	movs	r1, #64	@ 0x40
 8000b1e:	482f      	ldr	r0, [pc, #188]	@ (8000bdc <MX_GPIO_Init+0x140>)
 8000b20:	f000 fc2b 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, R3_Pin|R2_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2103      	movs	r1, #3
 8000b28:	482d      	ldr	r0, [pc, #180]	@ (8000be0 <MX_GPIO_Init+0x144>)
 8000b2a:	f000 fc26 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin;
 8000b2e:	231c      	movs	r3, #28
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_GPIO_Init+0x144>)
 8000b42:	f000 fa7f 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4822      	ldr	r0, [pc, #136]	@ (8000be4 <MX_GPIO_Init+0x148>)
 8000b5c:	f000 fa72 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : R4_Pin */
  GPIO_InitStruct.Pin = R4_Pin;
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R4_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0310 	add.w	r3, r7, #16
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	@ (8000bd8 <MX_GPIO_Init+0x13c>)
 8000b78:	f000 fa64 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : R1_Pin */
  GPIO_InitStruct.Pin = R1_Pin;
 8000b7c:	2340      	movs	r3, #64	@ 0x40
 8000b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(R1_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4619      	mov	r1, r3
 8000b92:	4812      	ldr	r0, [pc, #72]	@ (8000bdc <MX_GPIO_Init+0x140>)
 8000b94:	f000 fa56 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : C1_Pin */
  GPIO_InitStruct.Pin = C1_Pin;
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C1_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <MX_GPIO_Init+0x140>)
 8000bac:	f000 fa4a 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R2_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R2_Pin;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <MX_GPIO_Init+0x144>)
 8000bc8:	f000 fa3c 	bl	8001044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40011400 	.word	0x40011400
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011800 	.word	0x40011800
 8000be4:	40010800 	.word	0x40010800

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a14      	ldr	r2, [pc, #80]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_MspInit+0x60>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_MspInit+0x60>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f87e 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cb4:	4802      	ldr	r0, [pc, #8]	@ (8000cc0 <OTG_FS_IRQHandler+0x10>)
 8000cb6:	f000 fca2 	bl	80015fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000e64 	.word	0x20000e64

08000cc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cd0:	f7ff fff8 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd4:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd6:	490c      	ldr	r1, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cec:	4c09      	ldr	r4, [pc, #36]	@ (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f005 fd55 	bl	80067a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff fe35 	bl	800096c <main>
  bx lr
 8000d02:	4770      	bx	lr
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000d0c:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 8000d10:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8000d14:	20001560 	.word	0x20001560

08000d18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_2_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x28>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x28>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f947 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff ff5c 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40022000 	.word	0x40022000

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f95f 	bl	800102a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f927 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a03      	ldr	r2, [pc, #12]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000198 	.word	0x20000198

08000dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	@ (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20000198 	.word	0x20000198

08000de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff fff0 	bl	8000dcc <HAL_GetTick>
 8000dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df8:	d005      	beq.n	8000e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_Delay+0x44>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4413      	add	r3, r2
 8000e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e06:	bf00      	nop
 8000e08:	f7ff ffe0 	bl	8000dcc <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d8f7      	bhi.n	8000e08 <HAL_Delay+0x28>
  {
  }
}
 8000e18:	bf00      	nop
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	@ (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4906      	ldr	r1, [pc, #24]	@ (8000ec0 <__NVIC_EnableIRQ+0x34>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff90 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff2d 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff42 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff90 	bl	8000f18 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5f 	bl	8000ec4 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff35 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001056:	e169      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001058:	2201      	movs	r2, #1
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	69fa      	ldr	r2, [r7, #28]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8158 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a9a      	ldr	r2, [pc, #616]	@ (80012e4 <HAL_GPIO_Init+0x2a0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d05e      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001080:	4a98      	ldr	r2, [pc, #608]	@ (80012e4 <HAL_GPIO_Init+0x2a0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d875      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001086:	4a98      	ldr	r2, [pc, #608]	@ (80012e8 <HAL_GPIO_Init+0x2a4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d058      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 800108c:	4a96      	ldr	r2, [pc, #600]	@ (80012e8 <HAL_GPIO_Init+0x2a4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d86f      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 8001092:	4a96      	ldr	r2, [pc, #600]	@ (80012ec <HAL_GPIO_Init+0x2a8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d052      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 8001098:	4a94      	ldr	r2, [pc, #592]	@ (80012ec <HAL_GPIO_Init+0x2a8>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d869      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 800109e:	4a94      	ldr	r2, [pc, #592]	@ (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d04c      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010a4:	4a92      	ldr	r2, [pc, #584]	@ (80012f0 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d863      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010aa:	4a92      	ldr	r2, [pc, #584]	@ (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d046      	beq.n	800113e <HAL_GPIO_Init+0xfa>
 80010b0:	4a90      	ldr	r2, [pc, #576]	@ (80012f4 <HAL_GPIO_Init+0x2b0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d85d      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d82a      	bhi.n	8001110 <HAL_GPIO_Init+0xcc>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d859      	bhi.n	8001172 <HAL_GPIO_Init+0x12e>
 80010be:	a201      	add	r2, pc, #4	@ (adr r2, 80010c4 <HAL_GPIO_Init+0x80>)
 80010c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	08001119 	.word	0x08001119
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800116d 	.word	0x0800116d
 80010d4:	08001173 	.word	0x08001173
 80010d8:	08001173 	.word	0x08001173
 80010dc:	08001173 	.word	0x08001173
 80010e0:	08001173 	.word	0x08001173
 80010e4:	08001173 	.word	0x08001173
 80010e8:	08001173 	.word	0x08001173
 80010ec:	08001173 	.word	0x08001173
 80010f0:	08001173 	.word	0x08001173
 80010f4:	08001173 	.word	0x08001173
 80010f8:	08001173 	.word	0x08001173
 80010fc:	08001173 	.word	0x08001173
 8001100:	08001173 	.word	0x08001173
 8001104:	08001173 	.word	0x08001173
 8001108:	08001121 	.word	0x08001121
 800110c:	08001135 	.word	0x08001135
 8001110:	4a79      	ldr	r2, [pc, #484]	@ (80012f8 <HAL_GPIO_Init+0x2b4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d013      	beq.n	800113e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001116:	e02c      	b.n	8001172 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e029      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	3304      	adds	r3, #4
 8001126:	623b      	str	r3, [r7, #32]
          break;
 8001128:	e024      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	3308      	adds	r3, #8
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e01f      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	330c      	adds	r3, #12
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e01a      	b.n	8001174 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001146:	2304      	movs	r3, #4
 8001148:	623b      	str	r3, [r7, #32]
          break;
 800114a:	e013      	b.n	8001174 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d105      	bne.n	8001160 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	611a      	str	r2, [r3, #16]
          break;
 800115e:	e009      	b.n	8001174 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001160:	2308      	movs	r3, #8
 8001162:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	615a      	str	r2, [r3, #20]
          break;
 800116a:	e003      	b.n	8001174 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
          break;
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x130>
          break;
 8001172:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	@ 0xff
 8001178:	d801      	bhi.n	800117e <HAL_GPIO_Init+0x13a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_Init+0x13e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3304      	adds	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2bff      	cmp	r3, #255	@ 0xff
 8001188:	d802      	bhi.n	8001190 <HAL_GPIO_Init+0x14c>
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	e002      	b.n	8001196 <HAL_GPIO_Init+0x152>
 8001190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001192:	3b08      	subs	r3, #8
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	210f      	movs	r1, #15
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	6a39      	ldr	r1, [r7, #32]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	431a      	orrs	r2, r3
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80b1 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c4:	4b4d      	ldr	r3, [pc, #308]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b4a      	ldr	r3, [pc, #296]	@ (80012fc <HAL_GPIO_Init+0x2b8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011dc:	4a48      	ldr	r2, [pc, #288]	@ (8001300 <HAL_GPIO_Init+0x2bc>)
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	3302      	adds	r3, #2
 80011e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a40      	ldr	r2, [pc, #256]	@ (8001304 <HAL_GPIO_Init+0x2c0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d013      	beq.n	8001230 <HAL_GPIO_Init+0x1ec>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3f      	ldr	r2, [pc, #252]	@ (8001308 <HAL_GPIO_Init+0x2c4>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d00d      	beq.n	800122c <HAL_GPIO_Init+0x1e8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3e      	ldr	r2, [pc, #248]	@ (800130c <HAL_GPIO_Init+0x2c8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d007      	beq.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a3d      	ldr	r2, [pc, #244]	@ (8001310 <HAL_GPIO_Init+0x2cc>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d101      	bne.n	8001224 <HAL_GPIO_Init+0x1e0>
 8001220:	2303      	movs	r3, #3
 8001222:	e006      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001224:	2304      	movs	r3, #4
 8001226:	e004      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001228:	2302      	movs	r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <HAL_GPIO_Init+0x1ee>
 8001230:	2300      	movs	r3, #0
 8001232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001234:	f002 0203 	and.w	r2, r2, #3
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	4093      	lsls	r3, r2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001242:	492f      	ldr	r1, [pc, #188]	@ (8001300 <HAL_GPIO_Init+0x2bc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800125c:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	492c      	ldr	r1, [pc, #176]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	43db      	mvns	r3, r3
 8001272:	4928      	ldr	r1, [pc, #160]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001274:	4013      	ands	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001284:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	4922      	ldr	r1, [pc, #136]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	60cb      	str	r3, [r1, #12]
 8001290:	e006      	b.n	80012a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	43db      	mvns	r3, r3
 800129a:	491e      	ldr	r1, [pc, #120]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 800129c:	4013      	ands	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4918      	ldr	r1, [pc, #96]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ba:	4b16      	ldr	r3, [pc, #88]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4914      	ldr	r1, [pc, #80]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d021      	beq.n	8001318 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	490e      	ldr	r1, [pc, #56]	@ (8001314 <HAL_GPIO_Init+0x2d0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
 80012e0:	e021      	b.n	8001326 <HAL_GPIO_Init+0x2e2>
 80012e2:	bf00      	nop
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10310000 	.word	0x10310000
 80012ec:	10220000 	.word	0x10220000
 80012f0:	10210000 	.word	0x10210000
 80012f4:	10120000 	.word	0x10120000
 80012f8:	10110000 	.word	0x10110000
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000
 8001304:	40010800 	.word	0x40010800
 8001308:	40010c00 	.word	0x40010c00
 800130c:	40011000 	.word	0x40011000
 8001310:	40011400 	.word	0x40011400
 8001314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001318:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <HAL_GPIO_Init+0x304>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4909      	ldr	r1, [pc, #36]	@ (8001348 <HAL_GPIO_Init+0x304>)
 8001322:	4013      	ands	r3, r2
 8001324:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae8e 	bne.w	8001058 <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	@ 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	041a      	lsls	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af02      	add	r7, sp, #8
 80013b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0fa      	b.n	80015b2 <HAL_PCD_Init+0x208>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f004 ff0d 	bl	80061f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f819 	bl	8003420 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7c1a      	ldrb	r2, [r3, #16]
 80013f6:	f88d 2000 	strb.w	r2, [sp]
 80013fa:	3304      	adds	r3, #4
 80013fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013fe:	f001 ff41 	bl	8003284 <USB_CoreInit>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0ce      	b.n	80015b2 <HAL_PCD_Init+0x208>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f002 f810 	bl	8003440 <USB_SetCurrentMode>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2202      	movs	r2, #2
 800142a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0bf      	b.n	80015b2 <HAL_PCD_Init+0x208>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e04a      	b.n	80014ce <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	3315      	adds	r3, #21
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3314      	adds	r3, #20
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	b298      	uxth	r0, r3
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	332e      	adds	r3, #46	@ 0x2e
 8001474:	4602      	mov	r2, r0
 8001476:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4413      	add	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	3318      	adds	r3, #24
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	331c      	adds	r3, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3320      	adds	r3, #32
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3324      	adds	r3, #36	@ 0x24
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	791b      	ldrb	r3, [r3, #4]
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3af      	bcc.n	8001438 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e044      	b.n	8001568 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4413      	add	r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4413      	add	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	791b      	ldrb	r3, [r3, #4]
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3b5      	bcc.n	80014de <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7c1a      	ldrb	r2, [r3, #16]
 800157a:	f88d 2000 	strb.w	r2, [sp]
 800157e:	3304      	adds	r3, #4
 8001580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001582:	f001 ffa9 	bl	80034d8 <USB_DevInit>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e00c      	b.n	80015b2 <HAL_PCD_Init+0x208>
  }

  hpcd->USB_Address = 0U;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 ff34 	bl	8004418 <USB_DevDisconnect>

  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_PCD_Start+0x16>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e012      	b.n	80015f6 <HAL_PCD_Start+0x3c>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 ff0f 	bl	8003400 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fef6 	bl	80043d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015fe:	b590      	push	{r4, r7, lr}
 8001600:	b08d      	sub	sp, #52	@ 0x34
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f002 ffad 	bl	8004574 <USB_GetMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 8446 	bne.w	8001eae <HAL_PCD_IRQHandler+0x8b0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 ff16 	bl	8004458 <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 843c 	beq.w	8001eac <HAL_PCD_IRQHandler+0x8ae>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f002 ff03 	bl	8004458 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b02      	cmp	r3, #2
 800165a:	d107      	bne.n	800166c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f002 0202 	and.w	r2, r2, #2
 800166a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fef1 	bl	8004458 <USB_ReadInterrupts>
 8001676:	4603      	mov	r3, r0
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b10      	cmp	r3, #16
 800167e:	d161      	bne.n	8001744 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0210 	bic.w	r2, r2, #16
 800168e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	f003 020f 	and.w	r2, r3, #15
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	4413      	add	r3, r2
 80016ac:	3304      	adds	r3, #4
 80016ae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	0c5b      	lsrs	r3, r3, #17
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d124      	bne.n	8001706 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d035      	beq.n	8001734 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	6a38      	ldr	r0, [r7, #32]
 80016dc:	f002 fd2e 	bl	800413c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ec:	441a      	add	r2, r3
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	091b      	lsrs	r3, r3, #4
 80016fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016fe:	441a      	add	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	e016      	b.n	8001734 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	0c5b      	lsrs	r3, r3, #17
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	2b06      	cmp	r3, #6
 8001710:	d110      	bne.n	8001734 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001718:	2208      	movs	r2, #8
 800171a:	4619      	mov	r1, r3
 800171c:	6a38      	ldr	r0, [r7, #32]
 800171e:	f002 fd0d 	bl	800413c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800172e:	441a      	add	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0210 	orr.w	r2, r2, #16
 8001742:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fe85 	bl	8004458 <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001754:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001758:	f040 80a7 	bne.w	80018aa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fe89 	bl	800447c <USB_ReadDevAllOutEpInterrupt>
 800176a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800176c:	e099      	b.n	80018a2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808e 	beq.w	8001896 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f002 feab 	bl	80044e0 <USB_ReadDevOutEPInterrupt>
 800178a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a2:	461a      	mov	r2, r3
 80017a4:	2301      	movs	r3, #1
 80017a6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80017a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 fe44 	bl	8002438 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00c      	beq.n	80017d4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017bc:	015a      	lsls	r2, r3, #5
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	4413      	add	r3, r2
 80017c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017c6:	461a      	mov	r2, r3
 80017c8:	2308      	movs	r3, #8
 80017ca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fe80 	bl	80024d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	015a      	lsls	r2, r3, #5
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	4413      	add	r3, r2
 80017e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017ea:	461a      	mov	r2, r3
 80017ec:	2310      	movs	r3, #16
 80017ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d030      	beq.n	800185c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	2b80      	cmp	r3, #128	@ 0x80
 8001804:	d109      	bne.n	800181a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001814:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001818:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800181a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	4413      	add	r3, r2
 800182c:	3304      	adds	r3, #4
 800182e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	78db      	ldrb	r3, [r3, #3]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d108      	bne.n	800184a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2200      	movs	r2, #0
 800183c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f004 fd9f 	bl	8006388 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	015a      	lsls	r2, r3, #5
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001856:	461a      	mov	r2, r3
 8001858:	2302      	movs	r3, #2
 800185a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001872:	461a      	mov	r2, r3
 8001874:	2320      	movs	r3, #32
 8001876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	015a      	lsls	r2, r3, #5
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800188e:	461a      	mov	r2, r3
 8001890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001894:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	3301      	adds	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800189c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f47f af62 	bne.w	800176e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fdd2 	bl	8004458 <USB_ReadInterrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80018be:	f040 80a4 	bne.w	8001a0a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fdf1 	bl	80044ae <USB_ReadDevAllInEpInterrupt>
 80018cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80018d2:	e096      	b.n	8001a02 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 808b 	beq.w	80019f6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fe15 	bl	800451a <USB_ReadDevInEPInterrupt>
 80018f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	2201      	movs	r2, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	69f9      	ldr	r1, [r7, #28]
 8001918:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800191c:	4013      	ands	r3, r2
 800191e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800192c:	461a      	mov	r2, r3
 800192e:	2301      	movs	r3, #1
 8001930:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f004 fcaa 	bl	8006292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	015a      	lsls	r2, r3, #5
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001954:	461a      	mov	r2, r3
 8001956:	2308      	movs	r3, #8
 8001958:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	015a      	lsls	r2, r3, #5
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001970:	461a      	mov	r2, r3
 8001972:	2310      	movs	r3, #16
 8001974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	015a      	lsls	r2, r3, #5
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	4413      	add	r3, r2
 8001988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800198c:	461a      	mov	r2, r3
 800198e:	2340      	movs	r3, #64	@ 0x40
 8001990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d023      	beq.n	80019e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800199c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800199e:	6a38      	ldr	r0, [r7, #32]
 80019a0:	f001 fec2 	bl	8003728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	3310      	adds	r3, #16
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	78db      	ldrb	r3, [r3, #3]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2200      	movs	r2, #0
 80019c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 fced 	bl	80063ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80019de:	461a      	mov	r2, r3
 80019e0:	2302      	movs	r3, #2
 80019e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fc98 	bl	8002326 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f8:	3301      	adds	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f47f af65 	bne.w	80018d4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fd22 	bl	8004458 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001a1e:	d114      	bne.n	8001a4a <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f004 fc99 	bl	800636c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695a      	ldr	r2, [r3, #20]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fd02 	bl	8004458 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a5e:	d112      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f004 fc55 	bl	8006320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001a84:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fce4 	bl	8004458 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a9a:	f040 80b6 	bne.w	8001c0a <HAL_PCD_IRQHandler+0x60c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fe35 	bl	8003728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ac2:	e046      	b.n	8001b52 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac6:	015a      	lsls	r2, r3, #5
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001ad6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae8:	0151      	lsls	r1, r2, #5
 8001aea:	69fa      	ldr	r2, [r7, #28]
 8001aec:	440a      	add	r2, r1
 8001aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001af2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001af6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001afa:	015a      	lsls	r2, r3, #5
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	4413      	add	r3, r2
 8001b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b04:	461a      	mov	r2, r3
 8001b06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001b0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b1c:	0151      	lsls	r1, r2, #5
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	440a      	add	r2, r1
 8001b22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001b2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b2e:	015a      	lsls	r2, r3, #5
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	4413      	add	r3, r2
 8001b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b3c:	0151      	lsls	r1, r2, #5
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	440a      	add	r2, r1
 8001b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001b46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4e:	3301      	adds	r3, #1
 8001b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	791b      	ldrb	r3, [r3, #4]
 8001b56:	461a      	mov	r2, r3
 8001b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d3b2      	bcc.n	8001ac4 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001b70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7bdb      	ldrb	r3, [r3, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x5aa>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001b8a:	f043 030b 	orr.w	r3, r3, #11
 8001b8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ba0:	f043 030b 	orr.w	r3, r3, #11
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	e015      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x5d6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bae:	695b      	ldr	r3, [r3, #20]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001bbe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bce:	f043 030b 	orr.w	r3, r3, #11
 8001bd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001be2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001be6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f002 fced 	bl	80045d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fc22 	bl	8004458 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c1e:	d123      	bne.n	8001c68 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fcb2 	bl	800458e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 fdf0 	bl	8003814 <USB_GetDevSpeed>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681c      	ldr	r4, [r3, #0]
 8001c40:	f001 f9c6 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8001c44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f001 fb3b 	bl	80032c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f004 fb45 	bl	80062e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695a      	ldr	r2, [r3, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001c66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f002 fbf3 	bl	8004458 <USB_ReadInterrupts>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d10a      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f004 fb22 	bl	80062c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695a      	ldr	r2, [r3, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f002 0208 	and.w	r2, r2, #8
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 fbde 	bl	8004458 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca2:	2b80      	cmp	r3, #128	@ 0x80
 8001ca4:	d123      	bne.n	8001cee <HAL_PCD_IRQHandler+0x6f0>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb6:	e014      	b.n	8001ce2 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d105      	bne.n	8001cdc <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 faf4 	bl	80022c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	3301      	adds	r3, #1
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	791b      	ldrb	r3, [r3, #4]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d3e4      	bcc.n	8001cb8 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fbb0 	bl	8004458 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d02:	d13c      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x780>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d08:	e02b      	b.n	8001d62 <HAL_PCD_IRQHandler+0x764>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	3318      	adds	r3, #24
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d115      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x75e>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da12      	bge.n	8001d5c <HAL_PCD_IRQHandler+0x75e>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	3317      	adds	r3, #23
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fab4 	bl	80022c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	3301      	adds	r3, #1
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	461a      	mov	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d3cd      	bcc.n	8001d0a <HAL_PCD_IRQHandler+0x70c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fb68 	bl	8004458 <USB_ReadInterrupts>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d92:	d156      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x844>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d94:	2301      	movs	r3, #1
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d98:	e045      	b.n	8001e26 <HAL_PCD_IRQHandler+0x828>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d12e      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x822>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dc2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da2b      	bge.n	8001e20 <HAL_PCD_IRQHandler+0x822>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001dd4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d121      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x822>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <HAL_PCD_IRQHandler+0x822>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1c:	6053      	str	r3, [r2, #4]
            break;
 8001e1e:	e008      	b.n	8001e32 <HAL_PCD_IRQHandler+0x834>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e22:	3301      	adds	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d3b3      	bcc.n	8001d9a <HAL_PCD_IRQHandler+0x79c>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f002 fb06 	bl	8004458 <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e56:	d10a      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x870>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f004 fab9 	bl	80063d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 faf0 	bl	8004458 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d115      	bne.n	8001eae <HAL_PCD_IRQHandler+0x8b0>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x89c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f004 faa9 	bl	80063ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e000      	b.n	8001eae <HAL_PCD_IRQHandler+0x8b0>
      return;
 8001eac:	bf00      	nop
    }
  }
}
 8001eae:	3734      	adds	r7, #52	@ 0x34
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}

08001eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_SetAddress+0x1a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e012      	b.n	8001ef4 <HAL_PCD_SetAddress+0x40>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f002 fa52 	bl	800438e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	70fb      	strb	r3, [r7, #3]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	803b      	strh	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	da0f      	bge.n	8001f42 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3310      	adds	r3, #16
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	705a      	strb	r2, [r3, #1]
 8001f40:	e00f      	b.n	8001f62 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f42:	78fb      	ldrb	r3, [r7, #3]
 8001f44:	f003 020f 	and.w	r2, r3, #15
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f6e:	883a      	ldrh	r2, [r7, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	78ba      	ldrb	r2, [r7, #2]
 8001f78:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f8c:	78bb      	ldrb	r3, [r7, #2]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d102      	bne.n	8001f98 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_PCD_EP_Open+0xaa>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e00e      	b.n	8001fc4 <HAL_PCD_EP_Open+0xc8>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68f9      	ldr	r1, [r7, #12]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 fc4b 	bl	8003850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da0f      	bge.n	8002000 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	f003 020f 	and.w	r2, r3, #15
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	3310      	adds	r3, #16
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	705a      	strb	r2, [r3, #1]
 8001ffe:	e00f      	b.n	8002020 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	f003 020f 	and.w	r2, r3, #15
 8002006:	4613      	mov	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_Close+0x6e>
 8002036:	2302      	movs	r3, #2
 8002038:	e00e      	b.n	8002058 <HAL_PCD_EP_Close+0x8c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f001 fc87 	bl	800395c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	f003 020f 	and.w	r2, r3, #15
 8002076:	4613      	mov	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fd2d 	bl	8003b14 <USB_EPStartXfer>

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	f003 020f 	and.w	r2, r3, #15
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr

080020f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
 80020fe:	460b      	mov	r3, r1
 8002100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002102:	7afb      	ldrb	r3, [r7, #11]
 8002104:	f003 020f 	and.w	r2, r3, #15
 8002108:	4613      	mov	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	3310      	adds	r3, #16
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	3304      	adds	r3, #4
 8002118:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2201      	movs	r2, #1
 8002130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002132:	7afb      	ldrb	r3, [r7, #11]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	b2da      	uxtb	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6979      	ldr	r1, [r7, #20]
 8002144:	4618      	mov	r0, r3
 8002146:	f001 fce5 	bl	8003b14 <USB_EPStartXfer>

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	7912      	ldrb	r2, [r2, #4]
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e04e      	b.n	8002210 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	da0f      	bge.n	800219a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	f003 020f 	and.w	r2, r3, #15
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3310      	adds	r3, #16
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2201      	movs	r2, #1
 8002196:	705a      	strb	r2, [r3, #1]
 8002198:	e00d      	b.n	80021b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4413      	add	r3, r2
 80021ac:	3304      	adds	r3, #4
 80021ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_PCD_EP_SetStall+0x82>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e01c      	b.n	8002210 <HAL_PCD_EP_SetStall+0xbc>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 f800 	bl	80041ea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	f003 030f 	and.w	r3, r3, #15
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d108      	bne.n	8002206 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021fe:	4619      	mov	r1, r3
 8002200:	4610      	mov	r0, r2
 8002202:	f002 f9e7 	bl	80045d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7912      	ldrb	r2, [r2, #4]
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e042      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	da0f      	bge.n	800225e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	f003 020f 	and.w	r2, r3, #15
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	3310      	adds	r3, #16
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	3304      	adds	r3, #4
 8002254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2201      	movs	r2, #1
 800225a:	705a      	strb	r2, [r3, #1]
 800225c:	e00f      	b.n	800227e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	f003 020f 	and.w	r2, r3, #15
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	3304      	adds	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	b2da      	uxtb	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_PCD_EP_ClrStall+0x86>
 800229a:	2302      	movs	r3, #2
 800229c:	e00e      	b.n	80022bc <HAL_PCD_EP_ClrStall+0xa4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68f9      	ldr	r1, [r7, #12]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 f809 	bl	80042c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80022d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da0c      	bge.n	80022f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f003 020f 	and.w	r2, r3, #15
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	3310      	adds	r3, #16
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e00c      	b.n	800230c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	f003 020f 	and.w	r2, r3, #15
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	3304      	adds	r3, #4
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68f9      	ldr	r1, [r7, #12]
 8002312:	4618      	mov	r0, r3
 8002314:	f001 fe30 	bl	8003f78 <USB_EPStopXfer>
 8002318:	4603      	mov	r3, r0
 800231a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800231c:	7afb      	ldrb	r3, [r7, #11]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b088      	sub	sp, #32
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3310      	adds	r3, #16
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	3304      	adds	r3, #4
 800234c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	429a      	cmp	r2, r3
 8002358:	d901      	bls.n	800235e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e067      	b.n	800242e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	691a      	ldr	r2, [r3, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	429a      	cmp	r2, r3
 8002372:	d902      	bls.n	800237a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3303      	adds	r3, #3
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002382:	e026      	b.n	80023d2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	429a      	cmp	r2, r3
 8002398:	d902      	bls.n	80023a0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3303      	adds	r3, #3
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68d9      	ldr	r1, [r3, #12]
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f001 fe88 	bl	80040ca <USB_WritePacket>

    ep->xfer_buff  += len;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	441a      	add	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	441a      	add	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d809      	bhi.n	80023fc <PCD_WriteEmptyTxFifo+0xd6>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d203      	bcs.n	80023fc <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1c3      	bne.n	8002384 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	429a      	cmp	r2, r3
 8002406:	d811      	bhi.n	800242c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	2201      	movs	r2, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800241c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	43db      	mvns	r3, r3
 8002422:	6939      	ldr	r1, [r7, #16]
 8002424:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002428:	4013      	ands	r3, r2
 800242a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3720      	adds	r7, #32
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	333c      	adds	r3, #60	@ 0x3c
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a19      	ldr	r2, [pc, #100]	@ (80024d0 <PCD_EP_OutXfrComplete_int+0x98>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d124      	bne.n	80024b8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002484:	461a      	mov	r2, r3
 8002486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800248a:	6093      	str	r3, [r2, #8]
 800248c:	e01a      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024a4:	461a      	mov	r2, r3
 80024a6:	2320      	movs	r3, #32
 80024a8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f003 fed3 	bl	800625c <HAL_PCD_DataOutStageCallback>
 80024b6:	e005      	b.n	80024c4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f003 fecc 	bl	800625c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	4f54310a 	.word	0x4f54310a

080024d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	333c      	adds	r3, #60	@ 0x3c
 80024ec:	3304      	adds	r3, #4
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a0c      	ldr	r2, [pc, #48]	@ (8002538 <PCD_EP_OutSetupPacket_int+0x64>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d90e      	bls.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002520:	461a      	mov	r2, r3
 8002522:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002526:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f003 fe85 	bl	8006238 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	4f54300a 	.word	0x4f54300a

0800253c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	70fb      	strb	r3, [r7, #3]
 8002548:	4613      	mov	r3, r2
 800254a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800255a:	883b      	ldrh	r3, [r7, #0]
 800255c:	0419      	lsls	r1, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	430a      	orrs	r2, r1
 8002566:	629a      	str	r2, [r3, #40]	@ 0x28
 8002568:	e028      	b.n	80025bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4413      	add	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e00d      	b.n	800259a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	3340      	adds	r3, #64	@ 0x40
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3301      	adds	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	3b01      	subs	r3, #1
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d3ec      	bcc.n	800257e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80025a4:	883b      	ldrh	r3, [r7, #0]
 80025a6:	0418      	lsls	r0, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	4302      	orrs	r2, r0
 80025b4:	3340      	adds	r3, #64	@ 0x40
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e304      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8087 	beq.w	8002716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002608:	4b92      	ldr	r3, [pc, #584]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 030c 	and.w	r3, r3, #12
 8002610:	2b04      	cmp	r3, #4
 8002612:	d00c      	beq.n	800262e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002614:	4b8f      	ldr	r3, [pc, #572]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d112      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
 8002620:	4b8c      	ldr	r3, [pc, #560]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262c:	d10b      	bne.n	8002646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	4b89      	ldr	r3, [pc, #548]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06c      	beq.n	8002714 <HAL_RCC_OscConfig+0x12c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d168      	bne.n	8002714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e2de      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x76>
 8002650:	4b80      	ldr	r3, [pc, #512]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a7f      	ldr	r2, [pc, #508]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e02e      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x98>
 8002666:	4b7b      	ldr	r3, [pc, #492]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a7a      	ldr	r2, [pc, #488]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b78      	ldr	r3, [pc, #480]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a77      	ldr	r2, [pc, #476]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e01d      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCC_OscConfig+0xbc>
 800268a:	4b72      	ldr	r3, [pc, #456]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a71      	ldr	r2, [pc, #452]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b6f      	ldr	r3, [pc, #444]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6e      	ldr	r2, [pc, #440]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e00b      	b.n	80026bc <HAL_RCC_OscConfig+0xd4>
 80026a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fb82 	bl	8000dcc <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fb7e 	bl	8000dcc <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	@ 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e292      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b5d      	ldr	r3, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0xe4>
 80026ea:	e014      	b.n	8002716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb6e 	bl	8000dcc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fb6a 	bl	8000dcc <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e27e      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x10c>
 8002712:	e000      	b.n	8002716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d063      	beq.n	80027ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002722:	4b4c      	ldr	r3, [pc, #304]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b08      	cmp	r3, #8
 8002738:	d11c      	bne.n	8002774 <HAL_RCC_OscConfig+0x18c>
 800273a:	4b46      	ldr	r3, [pc, #280]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d116      	bne.n	8002774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x176>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e252      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4939      	ldr	r1, [pc, #228]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002772:	e03a      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d020      	beq.n	80027be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277c:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7fe fb23 	bl	8000dcc <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fb1f 	bl	8000dcc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e233      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	4b2d      	ldr	r3, [pc, #180]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4927      	ldr	r1, [pc, #156]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
 80027bc:	e015      	b.n	80027ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027be:	4b26      	ldr	r3, [pc, #152]	@ (8002858 <HAL_RCC_OscConfig+0x270>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fb02 	bl	8000dcc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fafe 	bl	8000dcc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e212      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	4b1d      	ldr	r3, [pc, #116]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03a      	beq.n	800286c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d019      	beq.n	8002832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fe:	4b17      	ldr	r3, [pc, #92]	@ (800285c <HAL_RCC_OscConfig+0x274>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002804:	f7fe fae2 	bl	8000dcc <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7fe fade 	bl	8000dcc <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e1f2      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	4b0d      	ldr	r3, [pc, #52]	@ (8002854 <HAL_RCC_OscConfig+0x26c>)
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800282a:	2001      	movs	r0, #1
 800282c:	f000 fbda 	bl	8002fe4 <RCC_Delay>
 8002830:	e01c      	b.n	800286c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_RCC_OscConfig+0x274>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002838:	f7fe fac8 	bl	8000dcc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283e:	e00f      	b.n	8002860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fac4 	bl	8000dcc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d908      	bls.n	8002860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e1d8      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000
 8002858:	42420000 	.word	0x42420000
 800285c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002860:	4b9b      	ldr	r3, [pc, #620]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e9      	bne.n	8002840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a6 	beq.w	80029c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b94      	ldr	r3, [pc, #592]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b91      	ldr	r3, [pc, #580]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a90      	ldr	r2, [pc, #576]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b8e      	ldr	r3, [pc, #568]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d118      	bne.n	80028e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028b2:	4b88      	ldr	r3, [pc, #544]	@ (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a87      	ldr	r2, [pc, #540]	@ (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028be:	f7fe fa85 	bl	8000dcc <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fa81 	bl	8000dcc <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	@ 0x64
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e195      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad4 <HAL_RCC_OscConfig+0x4ec>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x312>
 80028ec:	4b78      	ldr	r3, [pc, #480]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	4a77      	ldr	r2, [pc, #476]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6213      	str	r3, [r2, #32]
 80028f8:	e02d      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x334>
 8002902:	4b73      	ldr	r3, [pc, #460]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4a72      	ldr	r2, [pc, #456]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6213      	str	r3, [r2, #32]
 800290e:	4b70      	ldr	r3, [pc, #448]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002914:	f023 0304 	bic.w	r3, r3, #4
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x356>
 8002924:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4a69      	ldr	r2, [pc, #420]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6213      	str	r3, [r2, #32]
 8002930:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	4a66      	ldr	r2, [pc, #408]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6213      	str	r3, [r2, #32]
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x36e>
 800293e:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	4a63      	ldr	r2, [pc, #396]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6213      	str	r3, [r2, #32]
 800294a:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4a60      	ldr	r2, [pc, #384]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe fa35 	bl	8000dcc <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe fa31 	bl	8000dcc <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e143      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b54      	ldr	r3, [pc, #336]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x37e>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fa1f 	bl	8000dcc <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe fa1b 	bl	8000dcc <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e12d      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b49      	ldr	r3, [pc, #292]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b45      	ldr	r3, [pc, #276]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	4a44      	ldr	r2, [pc, #272]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 808c 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80029d0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029dc:	d10e      	bne.n	80029fc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80029de:	4b3c      	ldr	r3, [pc, #240]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80029ea:	4b39      	ldr	r3, [pc, #228]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e103      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d14e      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d009      	beq.n	8002a24 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002a10:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0ef      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002a24:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f0>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f9cf 	bl	8000dcc <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a32:	f7fe f9cb 	bl	8000dcc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b64      	cmp	r3, #100	@ 0x64
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0df      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a44:	4b22      	ldr	r3, [pc, #136]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002a50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5c:	491c      	ldr	r1, [pc, #112]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002a62:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	4918      	ldr	r1, [pc, #96]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f0>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7fe f9a7 	bl	8000dcc <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a82:	f7fe f9a3 	bl	8000dcc <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b64      	cmp	r3, #100	@ 0x64
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0b7      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x49a>
 8002aa0:	e022      	b.n	8002ae8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <HAL_RCC_OscConfig+0x4e8>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_RCC_OscConfig+0x4f0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f98a 	bl	8000dcc <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002aba:	e00f      	b.n	8002adc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002abc:	f7fe f986 	bl	8000dcc <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d908      	bls.n	8002adc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002adc:	4b4b      	ldr	r3, [pc, #300]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e9      	bne.n	8002abc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8088 	beq.w	8002c02 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af2:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d068      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d14d      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b06:	4b42      	ldr	r3, [pc, #264]	@ (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f95e 	bl	8000dcc <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b14:	f7fe f95a 	bl	8000dcc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06e      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b26:	4b39      	ldr	r3, [pc, #228]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3a:	d10f      	bne.n	8002b5c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002b3c:	4b33      	ldr	r3, [pc, #204]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4931      	ldr	r1, [pc, #196]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b4a:	4b30      	ldr	r3, [pc, #192]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	f023 020f 	bic.w	r2, r3, #15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	492d      	ldr	r1, [pc, #180]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	4927      	ldr	r1, [pc, #156]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b74:	4b26      	ldr	r3, [pc, #152]	@ (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fe f927 	bl	8000dcc <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe f923 	bl	8000dcc <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e037      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b94:	4b1d      	ldr	r3, [pc, #116]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f0      	beq.n	8002b82 <HAL_RCC_OscConfig+0x59a>
 8002ba0:	e02f      	b.n	8002c02 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x628>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe f910 	bl	8000dcc <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7fe f90c 	bl	8000dcc <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e020      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c8>
 8002bce:	e018      	b.n	8002c02 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e013      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x624>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d106      	bne.n	8002bfe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	42420060 	.word	0x42420060

08002c14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0d0      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d910      	bls.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 0207 	bic.w	r2, r3, #7
 8002c3e:	4965      	ldr	r1, [pc, #404]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b63      	ldr	r3, [pc, #396]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0b8      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d020      	beq.n	8002ca6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c70:	4b59      	ldr	r3, [pc, #356]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a58      	ldr	r2, [pc, #352]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c88:	4b53      	ldr	r3, [pc, #332]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c94:	4b50      	ldr	r3, [pc, #320]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	494d      	ldr	r1, [pc, #308]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d040      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cba:	4b47      	ldr	r3, [pc, #284]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e07f      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e073      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e06b      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf2:	4b39      	ldr	r3, [pc, #228]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 0203 	bic.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4936      	ldr	r1, [pc, #216]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f862 	bl	8000dcc <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0c:	f7fe f85e 	bl	8000dcc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e053      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 020c 	and.w	r2, r3, #12
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d1eb      	bne.n	8002d0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d210      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b24      	ldr	r3, [pc, #144]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 0207 	bic.w	r2, r3, #7
 8002d4a:	4922      	ldr	r1, [pc, #136]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d52:	4b20      	ldr	r3, [pc, #128]	@ (8002dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e032      	b.n	8002dca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	4916      	ldr	r1, [pc, #88]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	490e      	ldr	r1, [pc, #56]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002da2:	f000 f859 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002da6:	4602      	mov	r2, r0
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	490a      	ldr	r1, [pc, #40]	@ (8002ddc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	5ccb      	ldrb	r3, [r1, r3]
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a09      	ldr	r2, [pc, #36]	@ (8002de0 <HAL_RCC_ClockConfig+0x1cc>)
 8002dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dbe:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_ClockConfig+0x1d0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd ffc0 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	080068d0 	.word	0x080068d0
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b08a      	sub	sp, #40	@ 0x28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e12:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCC_MCOConfig+0x68>)
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	@ (8002e50 <HAL_RCC_MCOConfig+0x68>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6193      	str	r3, [r2, #24]
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <HAL_RCC_MCOConfig+0x68>)
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	4619      	mov	r1, r3
 8002e32:	4808      	ldr	r0, [pc, #32]	@ (8002e54 <HAL_RCC_MCOConfig+0x6c>)
 8002e34:	f7fe f906 	bl	8001044 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_RCC_MCOConfig+0x68>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002e40:	4903      	ldr	r1, [pc, #12]	@ (8002e50 <HAL_RCC_MCOConfig+0x68>)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
}
 8002e48:	bf00      	nop
 8002e4a:	3728      	adds	r7, #40	@ 0x28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010800 	.word	0x40010800

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e5c:	b08e      	sub	sp, #56	@ 0x38
 8002e5e:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e68:	2300      	movs	r3, #0
 8002e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d002      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d003      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e90:	e089      	b.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e92:	4b4a      	ldr	r3, [pc, #296]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e96:	e089      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9a:	0c9b      	lsrs	r3, r3, #18
 8002e9c:	f003 020f 	and.w	r2, r3, #15
 8002ea0:	4b47      	ldr	r3, [pc, #284]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d072      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002eb0:	4b41      	ldr	r3, [pc, #260]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4b42      	ldr	r3, [pc, #264]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d053      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002eca:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002ed8:	4b37      	ldr	r3, [pc, #220]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	4693      	mov	fp, r2
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	617a      	str	r2, [r7, #20]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	fb03 f20b 	mul.w	r2, r3, fp
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fb0a f303 	mul.w	r3, sl, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	fbaa 0102 	umull	r0, r1, sl, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002f10:	fb03 f201 	mul.w	r2, r3, r1
 8002f14:	2300      	movs	r3, #0
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a27      	ldr	r2, [pc, #156]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002f1e:	fba0 4502 	umull	r4, r5, r0, r2
 8002f22:	442b      	add	r3, r5
 8002f24:	461d      	mov	r5, r3
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	60fa      	str	r2, [r7, #12]
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	2200      	movs	r2, #0
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f40:	4652      	mov	r2, sl
 8002f42:	fb02 f203 	mul.w	r2, r2, r3
 8002f46:	465b      	mov	r3, fp
 8002f48:	4684      	mov	ip, r0
 8002f4a:	fb0c f303 	mul.w	r3, ip, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	4602      	mov	r2, r0
 8002f52:	4651      	mov	r1, sl
 8002f54:	fba2 8901 	umull	r8, r9, r2, r1
 8002f58:	444b      	add	r3, r9
 8002f5a:	4699      	mov	r9, r3
 8002f5c:	4642      	mov	r2, r8
 8002f5e:	464b      	mov	r3, r9
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f966 	bl	8000234 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f70:	e007      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x164>)
 8002f76:	fb03 f202 	mul.w	r2, r3, r2
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002f82:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f84:	7b5b      	ldrb	r3, [r3, #13]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f90:	085b      	lsrs	r3, r3, #1
 8002f92:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f94:	e004      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002fa4:	e002      	b.n	8002fac <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fa6:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x174>)
 8002fa8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002faa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3738      	adds	r7, #56	@ 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	017d7840 	.word	0x017d7840
 8002fc0:	080068e0 	.word	0x080068e0
 8002fc4:	080068f0 	.word	0x080068f0
 8002fc8:	003d0900 	.word	0x003d0900
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	20000000 	.word	0x20000000

08002fe4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fec:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <RCC_Delay+0x34>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800301c <RCC_Delay+0x38>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0a5b      	lsrs	r3, r3, #9
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	fb02 f303 	mul.w	r3, r2, r3
 8002ffe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003000:	bf00      	nop
  }
  while (Delay --);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e5a      	subs	r2, r3, #1
 8003006:	60fa      	str	r2, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <RCC_Delay+0x1c>
}
 800300c:	bf00      	nop
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr
 8003018:	20000000 	.word	0x20000000
 800301c:	10624dd3 	.word	0x10624dd3

08003020 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d07d      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003040:	2300      	movs	r3, #0
 8003042:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003044:	4b8b      	ldr	r3, [pc, #556]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b88      	ldr	r3, [pc, #544]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4a87      	ldr	r2, [pc, #540]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305a:	61d3      	str	r3, [r2, #28]
 800305c:	4b85      	ldr	r3, [pc, #532]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003068:	2301      	movs	r3, #1
 800306a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b82      	ldr	r3, [pc, #520]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d118      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003078:	4b7f      	ldr	r3, [pc, #508]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a7e      	ldr	r2, [pc, #504]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003084:	f7fd fea2 	bl	8000dcc <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	e008      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7fd fe9e 	bl	8000dcc <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	@ 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0e5      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309e:	4b76      	ldr	r3, [pc, #472]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030aa:	4b72      	ldr	r3, [pc, #456]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b2:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d02e      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d027      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030d8:	4b68      	ldr	r3, [pc, #416]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030de:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d014      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7fd fe6d 	bl	8000dcc <HAL_GetTick>
 80030f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	e00a      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f6:	f7fd fe69 	bl	8000dcc <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0ae      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0ee      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003118:	4b56      	ldr	r3, [pc, #344]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4953      	ldr	r1, [pc, #332]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003126:	4313      	orrs	r3, r2
 8003128:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800312a:	7efb      	ldrb	r3, [r7, #27]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4a4f      	ldr	r2, [pc, #316]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003148:	4b4a      	ldr	r3, [pc, #296]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4947      	ldr	r1, [pc, #284]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003166:	4b43      	ldr	r3, [pc, #268]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4940      	ldr	r1, [pc, #256]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003174:	4313      	orrs	r3, r2
 8003176:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003184:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003188:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	4938      	ldr	r1, [pc, #224]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003192:	4313      	orrs	r3, r2
 8003194:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80031a2:	4b34      	ldr	r3, [pc, #208]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80031ae:	2301      	movs	r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d148      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 80031b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d138      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80031d0:	4b28      	ldr	r3, [pc, #160]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e042      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80031e4:	4b23      	ldr	r3, [pc, #140]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4920      	ldr	r1, [pc, #128]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80031f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	491c      	ldr	r1, [pc, #112]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003204:	4313      	orrs	r3, r2
 8003206:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003208:	4b1d      	ldr	r3, [pc, #116]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320e:	f7fd fddd 	bl	8000dcc <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003216:	f7fd fdd9 	bl	8000dcc <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	@ 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e020      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003228:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003234:	e009      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003236:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323a:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0310 	and.w	r3, r3, #16
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003264:	4313      	orrs	r3, r2
 8003266:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	42420440 	.word	0x42420440
 8003280:	42420070 	.word	0x42420070

08003284 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003284:	b084      	sub	sp, #16
 8003286:	b580      	push	{r7, lr}
 8003288:	b084      	sub	sp, #16
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	f107 001c 	add.w	r0, r7, #28
 8003292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f001 f9de 	bl	8004664 <USB_CoreReset>
 80032a8:	4603      	mov	r3, r0
 80032aa:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c4:	b004      	add	sp, #16
 80032c6:	4770      	bx	lr

080032c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d165      	bne.n	80033a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4a3e      	ldr	r2, [pc, #248]	@ (80033d8 <USB_SetTurnaroundTime+0x110>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d906      	bls.n	80032f2 <USB_SetTurnaroundTime+0x2a>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4a3d      	ldr	r2, [pc, #244]	@ (80033dc <USB_SetTurnaroundTime+0x114>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d202      	bcs.n	80032f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80032ec:	230f      	movs	r3, #15
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e05c      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4a39      	ldr	r2, [pc, #228]	@ (80033dc <USB_SetTurnaroundTime+0x114>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d306      	bcc.n	8003308 <USB_SetTurnaroundTime+0x40>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4a38      	ldr	r2, [pc, #224]	@ (80033e0 <USB_SetTurnaroundTime+0x118>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d202      	bcs.n	8003308 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003302:	230e      	movs	r3, #14
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	e051      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a35      	ldr	r2, [pc, #212]	@ (80033e0 <USB_SetTurnaroundTime+0x118>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d306      	bcc.n	800331e <USB_SetTurnaroundTime+0x56>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a34      	ldr	r2, [pc, #208]	@ (80033e4 <USB_SetTurnaroundTime+0x11c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d202      	bcs.n	800331e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003318:	230d      	movs	r3, #13
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	e046      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <USB_SetTurnaroundTime+0x11c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d306      	bcc.n	8003334 <USB_SetTurnaroundTime+0x6c>
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	4a2f      	ldr	r2, [pc, #188]	@ (80033e8 <USB_SetTurnaroundTime+0x120>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d802      	bhi.n	8003334 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800332e:	230c      	movs	r3, #12
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e03b      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4a2c      	ldr	r2, [pc, #176]	@ (80033e8 <USB_SetTurnaroundTime+0x120>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d906      	bls.n	800334a <USB_SetTurnaroundTime+0x82>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4a2b      	ldr	r2, [pc, #172]	@ (80033ec <USB_SetTurnaroundTime+0x124>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d802      	bhi.n	800334a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003344:	230b      	movs	r3, #11
 8003346:	617b      	str	r3, [r7, #20]
 8003348:	e030      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4a27      	ldr	r2, [pc, #156]	@ (80033ec <USB_SetTurnaroundTime+0x124>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d906      	bls.n	8003360 <USB_SetTurnaroundTime+0x98>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4a26      	ldr	r2, [pc, #152]	@ (80033f0 <USB_SetTurnaroundTime+0x128>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d802      	bhi.n	8003360 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800335a:	230a      	movs	r3, #10
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e025      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <USB_SetTurnaroundTime+0x128>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d906      	bls.n	8003376 <USB_SetTurnaroundTime+0xae>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4a22      	ldr	r2, [pc, #136]	@ (80033f4 <USB_SetTurnaroundTime+0x12c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d202      	bcs.n	8003376 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003370:	2309      	movs	r3, #9
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e01a      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	4a1e      	ldr	r2, [pc, #120]	@ (80033f4 <USB_SetTurnaroundTime+0x12c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d306      	bcc.n	800338c <USB_SetTurnaroundTime+0xc4>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a1d      	ldr	r2, [pc, #116]	@ (80033f8 <USB_SetTurnaroundTime+0x130>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003386:	2308      	movs	r3, #8
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e00f      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4a1a      	ldr	r2, [pc, #104]	@ (80033f8 <USB_SetTurnaroundTime+0x130>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d906      	bls.n	80033a2 <USB_SetTurnaroundTime+0xda>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4a19      	ldr	r2, [pc, #100]	@ (80033fc <USB_SetTurnaroundTime+0x134>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d202      	bcs.n	80033a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800339c:	2307      	movs	r3, #7
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	e004      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80033a2:	2306      	movs	r3, #6
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e001      	b.n	80033ac <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80033a8:	2309      	movs	r3, #9
 80033aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	029b      	lsls	r3, r3, #10
 80033c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80033c4:	431a      	orrs	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	00d8acbf 	.word	0x00d8acbf
 80033dc:	00e4e1c0 	.word	0x00e4e1c0
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	01067380 	.word	0x01067380
 80033e8:	011a499f 	.word	0x011a499f
 80033ec:	01312cff 	.word	0x01312cff
 80033f0:	014ca43f 	.word	0x014ca43f
 80033f4:	016e3600 	.word	0x016e3600
 80033f8:	01a6ab1f 	.word	0x01a6ab1f
 80033fc:	01e84800 	.word	0x01e84800

08003400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 0201 	bic.w	r2, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d115      	bne.n	800348e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800346e:	200a      	movs	r0, #10
 8003470:	f7fd fcb6 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	330a      	adds	r3, #10
 8003478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f001 f87a 	bl	8004574 <USB_GetMode>
 8003480:	4603      	mov	r3, r0
 8003482:	2b01      	cmp	r3, #1
 8003484:	d01e      	beq.n	80034c4 <USB_SetCurrentMode+0x84>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2bc7      	cmp	r3, #199	@ 0xc7
 800348a:	d9f0      	bls.n	800346e <USB_SetCurrentMode+0x2e>
 800348c:	e01a      	b.n	80034c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d115      	bne.n	80034c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80034a0:	200a      	movs	r0, #10
 80034a2:	f7fd fc9d 	bl	8000de0 <HAL_Delay>
      ms += 10U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	330a      	adds	r3, #10
 80034aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f001 f861 	bl	8004574 <USB_GetMode>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <USB_SetCurrentMode+0x84>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80034bc:	d9f0      	bls.n	80034a0 <USB_SetCurrentMode+0x60>
 80034be:	e001      	b.n	80034c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e005      	b.n	80034d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80034c8:	d101      	bne.n	80034ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034d8:	b084      	sub	sp, #16
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80034e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	e009      	b.n	800350c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3340      	adds	r3, #64	@ 0x40
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	2200      	movs	r2, #0
 8003504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	3301      	adds	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	2b0e      	cmp	r3, #14
 8003510:	d9f2      	bls.n	80034f8 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003524:	461a      	mov	r2, r3
 8003526:	2300      	movs	r3, #0
 8003528:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800352a:	2103      	movs	r1, #3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f959 	bl	80037e4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003532:	2110      	movs	r1, #16
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8f7 	bl	8003728 <USB_FlushTxFifo>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f920 	bl	800378a <USB_FlushRxFifo>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355a:	461a      	mov	r2, r3
 800355c:	2300      	movs	r3, #0
 800355e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003566:	461a      	mov	r2, r3
 8003568:	2300      	movs	r3, #0
 800356a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e043      	b.n	8003606 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003594:	d118      	bne.n	80035c8 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a8:	461a      	mov	r2, r3
 80035aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e013      	b.n	80035da <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035be:	461a      	mov	r2, r3
 80035c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e008      	b.n	80035da <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2300      	movs	r3, #0
 80035d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e6:	461a      	mov	r2, r3
 80035e8:	2300      	movs	r3, #0
 80035ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f8:	461a      	mov	r2, r3
 80035fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3301      	adds	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800360a:	461a      	mov	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4293      	cmp	r3, r2
 8003610:	d3b5      	bcc.n	800357e <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
 8003616:	e043      	b.n	80036a0 <USB_DevInit+0x1c8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800362a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800362e:	d118      	bne.n	8003662 <USB_DevInit+0x18a>
    {
      if (i == 0U)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <USB_DevInit+0x174>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003642:	461a      	mov	r2, r3
 8003644:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e013      	b.n	8003674 <USB_DevInit+0x19c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e008      	b.n	8003674 <USB_DevInit+0x19c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800366e:	461a      	mov	r2, r3
 8003670:	2300      	movs	r3, #0
 8003672:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003680:	461a      	mov	r2, r3
 8003682:	2300      	movs	r3, #0
 8003684:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003698:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3301      	adds	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80036a4:	461a      	mov	r2, r3
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d3b5      	bcc.n	8003618 <USB_DevInit+0x140>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80036cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	4b11      	ldr	r3, [pc, #68]	@ (8003724 <USB_DevInit+0x24c>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80036e6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d005      	beq.n	80036fa <USB_DevInit+0x222>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f043 0208 	orr.w	r2, r3, #8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d107      	bne.n	8003712 <USB_DevInit+0x23a>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800371e:	b004      	add	sp, #16
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	803c3800 	.word	0x803c3800

08003728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	3301      	adds	r3, #1
 800373a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003742:	d901      	bls.n	8003748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e01b      	b.n	8003780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	daf2      	bge.n	8003736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	019b      	lsls	r3, r3, #6
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3301      	adds	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800376c:	d901      	bls.n	8003772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e006      	b.n	8003780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b20      	cmp	r3, #32
 800377c:	d0f0      	beq.n	8003760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003792:	2300      	movs	r3, #0
 8003794:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3301      	adds	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037a2:	d901      	bls.n	80037a8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e018      	b.n	80037da <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	daf2      	bge.n	8003796 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2210      	movs	r2, #16
 80037b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	3301      	adds	r3, #1
 80037be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037c6:	d901      	bls.n	80037cc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e006      	b.n	80037da <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d0f0      	beq.n	80037ba <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	78fb      	ldrb	r3, [r7, #3]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr

08003814 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 0306 	and.w	r3, r3, #6
 800382c:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d002      	beq.n	800383a <USB_GetDevSpeed+0x26>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d102      	bne.n	8003840 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800383a:	2302      	movs	r3, #2
 800383c:	75fb      	strb	r3, [r7, #23]
 800383e:	e001      	b.n	8003844 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003840:	230f      	movs	r3, #15
 8003842:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	785b      	ldrb	r3, [r3, #1]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d13a      	bne.n	80038e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	2101      	movs	r1, #1
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	b29b      	uxth	r3, r3
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800388a:	4313      	orrs	r3, r2
 800388c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d155      	bne.n	8003950 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	791b      	ldrb	r3, [r3, #4]
 80038be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	059b      	lsls	r3, r3, #22
 80038c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80038c8:	4313      	orrs	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	0151      	lsls	r1, r2, #5
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	440a      	add	r2, r1
 80038d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	e036      	b.n	8003950 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	68f9      	ldr	r1, [r7, #12]
 80038fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003900:	4313      	orrs	r3, r2
 8003902:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d11a      	bne.n	8003950 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	791b      	ldrb	r3, [r3, #4]
 8003934:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003936:	430b      	orrs	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	440a      	add	r2, r1
 8003942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800394e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d161      	bne.n	8003a3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800398a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800398e:	d11f      	bne.n	80039d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	0151      	lsls	r1, r2, #5
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	440a      	add	r2, r1
 80039a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	0151      	lsls	r1, r2, #5
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	440a      	add	r2, r1
 80039c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039f0:	4013      	ands	r3, r2
 80039f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	68f9      	ldr	r1, [r7, #12]
 8003a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a14:	4013      	ands	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	0159      	lsls	r1, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a32:	4619      	mov	r1, r3
 8003a34:	4b35      	ldr	r3, [pc, #212]	@ (8003b0c <USB_DeactivateEndpoint+0x1b0>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
 8003a3a:	e060      	b.n	8003afe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a52:	d11f      	bne.n	8003a94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	0151      	lsls	r1, r2, #5
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	440a      	add	r2, r1
 8003a6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003a8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	43db      	mvns	r3, r3
 8003aae:	68f9      	ldr	r1, [r7, #12]
 8003ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	68f9      	ldr	r1, [r7, #12]
 8003ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	0159      	lsls	r1, r3, #5
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	440b      	add	r3, r1
 8003af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003af6:	4619      	mov	r1, r3
 8003af8:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <USB_DeactivateEndpoint+0x1b4>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bc80      	pop	{r7}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	ec337800 	.word	0xec337800
 8003b10:	eff37800 	.word	0xeff37800

08003b14 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 8128 	bne.w	8003d82 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d132      	bne.n	8003ba0 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b54:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003b58:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003b5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	015a      	lsls	r2, r3, #5
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	4413      	add	r3, r2
 8003b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	0151      	lsls	r1, r2, #5
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	440a      	add	r2, r1
 8003b94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b98:	0cdb      	lsrs	r3, r3, #19
 8003b9a:	04db      	lsls	r3, r3, #19
 8003b9c:	6113      	str	r3, [r2, #16]
 8003b9e:	e092      	b.n	8003cc6 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bba:	0cdb      	lsrs	r3, r3, #19
 8003bbc:	04db      	lsls	r3, r3, #19
 8003bbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003bda:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003bde:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003be2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d11a      	bne.n	8003c20 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d903      	bls.n	8003bfe <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	015a      	lsls	r2, r3, #5
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4413      	add	r3, r2
 8003c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	0151      	lsls	r1, r2, #5
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	440a      	add	r2, r1
 8003c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c1c:	6113      	str	r3, [r2, #16]
 8003c1e:	e01b      	b.n	8003c58 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6919      	ldr	r1, [r3, #16]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	440b      	add	r3, r1
 8003c38:	1e59      	subs	r1, r3, #1
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003c44:	4b8d      	ldr	r3, [pc, #564]	@ (8003e7c <USB_EPStartXfer+0x368>)
 8003c46:	400b      	ands	r3, r1
 8003c48:	6939      	ldr	r1, [r7, #16]
 8003c4a:	0148      	lsls	r0, r1, #5
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	4401      	add	r1, r0
 8003c50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c54:	4313      	orrs	r3, r2
 8003c56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c64:	691a      	ldr	r2, [r3, #16]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	6939      	ldr	r1, [r7, #16]
 8003c70:	0148      	lsls	r0, r1, #5
 8003c72:	6979      	ldr	r1, [r7, #20]
 8003c74:	4401      	add	r1, r0
 8003c76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d11f      	bne.n	8003cc6 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	0151      	lsls	r1, r2, #5
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	440a      	add	r2, r1
 8003c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003ca4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	0151      	lsls	r1, r2, #5
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	440a      	add	r2, r1
 8003cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cc0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cc4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	0151      	lsls	r1, r2, #5
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	440a      	add	r2, r1
 8003cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ce0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003ce4:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	791b      	ldrb	r3, [r3, #4]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d015      	beq.n	8003d1a <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8139 	beq.w	8003f6a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	6979      	ldr	r1, [r7, #20]
 8003d10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d14:	4313      	orrs	r3, r2
 8003d16:	634b      	str	r3, [r1, #52]	@ 0x34
 8003d18:	e127      	b.n	8003f6a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d110      	bne.n	8003d4c <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	0151      	lsls	r1, r2, #5
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	440a      	add	r2, r1
 8003d40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00f      	b.n	8003d6c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68d9      	ldr	r1, [r3, #12]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	781a      	ldrb	r2, [r3, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9a5 	bl	80040ca <USB_WritePacket>
 8003d80:	e0f3      	b.n	8003f6a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d9c:	0cdb      	lsrs	r3, r3, #19
 8003d9e:	04db      	lsls	r3, r3, #19
 8003da0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dbc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003dc0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003dc4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d12f      	bne.n	8003e2c <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfa:	6939      	ldr	r1, [r7, #16]
 8003dfc:	0148      	lsls	r0, r1, #5
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	4401      	add	r1, r0
 8003e02:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003e06:	4313      	orrs	r3, r2
 8003e08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	0151      	lsls	r1, r2, #5
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	440a      	add	r2, r1
 8003e20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e28:	6113      	str	r3, [r2, #16]
 8003e2a:	e061      	b.n	8003ef0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d125      	bne.n	8003e80 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	0148      	lsls	r0, r1, #5
 8003e4e:	6979      	ldr	r1, [r7, #20]
 8003e50:	4401      	add	r1, r0
 8003e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	015a      	lsls	r2, r3, #5
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	4413      	add	r3, r2
 8003e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e78:	6113      	str	r3, [r2, #16]
 8003e7a:	e039      	b.n	8003ef0 <USB_EPStartXfer+0x3dc>
 8003e7c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e94:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	89fa      	ldrh	r2, [r7, #14]
 8003e9c:	fb03 f202 	mul.w	r2, r3, r2
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eb0:	691a      	ldr	r2, [r3, #16]
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	04d9      	lsls	r1, r3, #19
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f74 <USB_EPStartXfer+0x460>)
 8003eb8:	400b      	ands	r3, r1
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	0148      	lsls	r0, r1, #5
 8003ebe:	6979      	ldr	r1, [r7, #20]
 8003ec0:	4401      	add	r1, r0
 8003ec2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee0:	6939      	ldr	r1, [r7, #16]
 8003ee2:	0148      	lsls	r0, r1, #5
 8003ee4:	6979      	ldr	r1, [r7, #20]
 8003ee6:	4401      	add	r1, r0
 8003ee8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003eec:	4313      	orrs	r3, r2
 8003eee:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	791b      	ldrb	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d128      	bne.n	8003f4a <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e00f      	b.n	8003f4a <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f64:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003f68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3718      	adds	r7, #24
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	1ff80000 	.word	0x1ff80000

08003f78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d14a      	bne.n	800402c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fae:	f040 8086 	bne.w	80040be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	7812      	ldrb	r2, [r2, #0]
 8003fc6:	0151      	lsls	r1, r2, #5
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	440a      	add	r2, r1
 8003fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004006:	4293      	cmp	r3, r2
 8004008:	d902      	bls.n	8004010 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
          break;
 800400e:	e056      	b.n	80040be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004024:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004028:	d0e7      	beq.n	8003ffa <USB_EPStopXfer+0x82>
 800402a:	e048      	b.n	80040be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004040:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004044:	d13b      	bne.n	80040be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	7812      	ldrb	r2, [r2, #0]
 800405a:	0151      	lsls	r1, r2, #5
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	440a      	add	r2, r1
 8004060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004064:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004068:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	7812      	ldrb	r2, [r2, #0]
 800407e:	0151      	lsls	r1, r2, #5
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	440a      	add	r2, r1
 8004084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004088:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800408c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3301      	adds	r3, #1
 8004092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f242 7210 	movw	r2, #10000	@ 0x2710
 800409a:	4293      	cmp	r3, r2
 800409c:	d902      	bls.n	80040a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
          break;
 80040a2:	e00c      	b.n	80040be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040bc:	d0e7      	beq.n	800408e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr

080040ca <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b089      	sub	sp, #36	@ 0x24
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	4611      	mov	r1, r2
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	4613      	mov	r3, r2
 80040de:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	3303      	adds	r3, #3
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e018      	b.n	8004128 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	031a      	lsls	r2, r3, #12
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004102:	461a      	mov	r2, r3
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6013      	str	r3, [r2, #0]
    pSrc++;
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3301      	adds	r3, #1
 800411a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	3301      	adds	r3, #1
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	429a      	cmp	r2, r3
 800412e:	d3e2      	bcc.n	80040f6 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	@ 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800413c:	b480      	push	{r7}
 800413e:	b08b      	sub	sp, #44	@ 0x2c
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	4613      	mov	r3, r2
 8004148:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	b29b      	uxth	r3, r3
 8004158:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004162:	2300      	movs	r3, #0
 8004164:	623b      	str	r3, [r7, #32]
 8004166:	e014      	b.n	8004192 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	601a      	str	r2, [r3, #0]
    pDest++;
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	3301      	adds	r3, #1
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	3301      	adds	r3, #1
 800417e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	3301      	adds	r3, #1
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	3301      	adds	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	3301      	adds	r3, #1
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	429a      	cmp	r2, r3
 8004198:	d3e6      	bcc.n	8004168 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800419a:	8bfb      	ldrh	r3, [r7, #30]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d01e      	beq.n	80041de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041aa:	461a      	mov	r2, r3
 80041ac:	f107 0310 	add.w	r3, r7, #16
 80041b0:	6812      	ldr	r2, [r2, #0]
 80041b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	fa22 f303 	lsr.w	r3, r2, r3
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	701a      	strb	r2, [r3, #0]
      i++;
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	3301      	adds	r3, #1
 80041ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	3301      	adds	r3, #1
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80041d2:	8bfb      	ldrh	r3, [r7, #30]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80041d8:	8bfb      	ldrh	r3, [r7, #30]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1ea      	bne.n	80041b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	372c      	adds	r7, #44	@ 0x2c
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d12c      	bne.n	8004260 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db12      	blt.n	800423e <USB_EPSetStall+0x54>
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00f      	beq.n	800423e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	0151      	lsls	r1, r2, #5
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	440a      	add	r2, r1
 8004234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004238:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800423c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e02b      	b.n	80042b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db12      	blt.n	8004298 <USB_EPSetStall+0xae>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00f      	beq.n	8004298 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004292:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004296:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d128      	bne.n	8004332 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80042fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	791b      	ldrb	r3, [r3, #4]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d003      	beq.n	8004310 <USB_EPClearStall+0x4c>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	791b      	ldrb	r3, [r3, #4]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d138      	bne.n	8004382 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e027      	b.n	8004382 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	0151      	lsls	r1, r2, #5
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	440a      	add	r2, r1
 8004348:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800434c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004350:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	791b      	ldrb	r3, [r3, #4]
 8004356:	2b03      	cmp	r3, #3
 8004358:	d003      	beq.n	8004362 <USB_EPClearStall+0x9e>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	791b      	ldrb	r3, [r3, #4]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d10f      	bne.n	8004382 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004380:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80043b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80043c2:	68f9      	ldr	r1, [r7, #12]
 80043c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004406:	f023 0302 	bic.w	r3, r3, #2
 800440a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr

08004418 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4013      	ands	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004470:	68fb      	ldr	r3, [r7, #12]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	0c1b      	lsrs	r3, r3, #16
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b085      	sub	sp, #20
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	4013      	ands	r3, r2
 80044d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	b29b      	uxth	r3, r3
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800450e:	68bb      	ldr	r3, [r7, #8]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	fa22 f303 	lsr.w	r3, r2, r3
 800454a:	01db      	lsls	r3, r3, #7
 800454c:	b2db      	uxtb	r3, r3
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4013      	ands	r3, r2
 8004566:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	4618      	mov	r0, r3
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0301 	and.w	r3, r3, #1
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3714      	adds	r7, #20
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
	...

080045d4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, const uint8_t *psetup)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	333c      	adds	r3, #60	@ 0x3c
 80045e6:	3304      	adds	r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004660 <USB_EP0_OutStart+0x8c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d90a      	bls.n	800460a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004604:	d101      	bne.n	800460a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e024      	b.n	8004654 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	2300      	movs	r3, #0
 8004614:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004624:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004628:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004638:	f043 0318 	orr.w	r3, r3, #24
 800463c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800464c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004650:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	4f54300a 	.word	0x4f54300a

08004664 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800467c:	d901      	bls.n	8004682 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e01b      	b.n	80046ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	daf2      	bge.n	8004670 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046a6:	d901      	bls.n	80046ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e006      	b.n	80046ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d0f0      	beq.n	800469a <USB_CoreReset+0x36>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	bc80      	pop	{r7}
 80046c2:	4770      	bx	lr

080046c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	7c1b      	ldrb	r3, [r3, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d115      	bne.n	8004708 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80046dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046e0:	2202      	movs	r2, #2
 80046e2:	2181      	movs	r1, #129	@ 0x81
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f001 feee 	bl	80064c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80046f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046f4:	2202      	movs	r2, #2
 80046f6:	2101      	movs	r1, #1
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fee4 	bl	80064c6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8004706:	e012      	b.n	800472e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004708:	2340      	movs	r3, #64	@ 0x40
 800470a:	2202      	movs	r2, #2
 800470c:	2181      	movs	r1, #129	@ 0x81
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fed9 	bl	80064c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800471a:	2340      	movs	r3, #64	@ 0x40
 800471c:	2202      	movs	r2, #2
 800471e:	2101      	movs	r1, #1
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fed0 	bl	80064c6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800472e:	2308      	movs	r3, #8
 8004730:	2203      	movs	r2, #3
 8004732:	2182      	movs	r1, #130	@ 0x82
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 fec6 	bl	80064c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004740:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004744:	f001 ffe6 	bl	8006714 <USBD_static_malloc>
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e026      	b.n	80047ae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004766:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2200      	movs	r2, #0
 8004776:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	7c1b      	ldrb	r3, [r3, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004794:	2101      	movs	r1, #1
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 ff85 	bl	80066a6 <USBD_LL_PrepareReceive>
 800479c:	e007      	b.n	80047ae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047a4:	2340      	movs	r3, #64	@ 0x40
 80047a6:	2101      	movs	r1, #1
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 ff7c 	bl	80066a6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80047c8:	2181      	movs	r1, #129	@ 0x81
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fea1 	bl	8006512 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80047d6:	2101      	movs	r1, #1
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 fe9a 	bl	8006512 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80047e6:	2182      	movs	r1, #130	@ 0x82
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fe92 	bl	8006512 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800480e:	4618      	mov	r0, r3
 8004810:	f001 ff8c 	bl	800672c <USBD_static_free>
    pdev->pClassData = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004836:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800484c:	2b00      	cmp	r3, #0
 800484e:	d039      	beq.n	80048c4 <USBD_CDC_Setup+0x9e>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d17f      	bne.n	8004954 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	88db      	ldrh	r3, [r3, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d029      	beq.n	80048b0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b25b      	sxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	da11      	bge.n	800488a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004872:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	88d2      	ldrh	r2, [r2, #6]
 8004878:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800487a:	6939      	ldr	r1, [r7, #16]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	88db      	ldrh	r3, [r3, #6]
 8004880:	461a      	mov	r2, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f001 fa3e 	bl	8005d04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004888:	e06b      	b.n	8004962 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	785a      	ldrb	r2, [r3, #1]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	88db      	ldrh	r3, [r3, #6]
 8004898:	b2da      	uxtb	r2, r3
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80048a0:	6939      	ldr	r1, [r7, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	88db      	ldrh	r3, [r3, #6]
 80048a6:	461a      	mov	r2, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f001 fa59 	bl	8005d60 <USBD_CtlPrepareRx>
      break;
 80048ae:	e058      	b.n	8004962 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	7850      	ldrb	r0, [r2, #1]
 80048bc:	2200      	movs	r2, #0
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	4798      	blx	r3
      break;
 80048c2:	e04e      	b.n	8004962 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b0b      	cmp	r3, #11
 80048ca:	d02e      	beq.n	800492a <USBD_CDC_Setup+0x104>
 80048cc:	2b0b      	cmp	r3, #11
 80048ce:	dc38      	bgt.n	8004942 <USBD_CDC_Setup+0x11c>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <USBD_CDC_Setup+0xb4>
 80048d4:	2b0a      	cmp	r3, #10
 80048d6:	d014      	beq.n	8004902 <USBD_CDC_Setup+0xdc>
 80048d8:	e033      	b.n	8004942 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d107      	bne.n	80048f4 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80048e4:	f107 030c 	add.w	r3, r7, #12
 80048e8:	2202      	movs	r2, #2
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fa09 	bl	8005d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048f2:	e02e      	b.n	8004952 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80048f4:	6839      	ldr	r1, [r7, #0]
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f001 f99a 	bl	8005c30 <USBD_CtlError>
            ret = USBD_FAIL;
 80048fc:	2302      	movs	r3, #2
 80048fe:	75fb      	strb	r3, [r7, #23]
          break;
 8004900:	e027      	b.n	8004952 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004908:	2b03      	cmp	r3, #3
 800490a:	d107      	bne.n	800491c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800490c:	f107 030f 	add.w	r3, r7, #15
 8004910:	2201      	movs	r2, #1
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f001 f9f5 	bl	8005d04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800491a:	e01a      	b.n	8004952 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 f986 	bl	8005c30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004924:	2302      	movs	r3, #2
 8004926:	75fb      	strb	r3, [r7, #23]
          break;
 8004928:	e013      	b.n	8004952 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004930:	2b03      	cmp	r3, #3
 8004932:	d00d      	beq.n	8004950 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f001 f97a 	bl	8005c30 <USBD_CtlError>
            ret = USBD_FAIL;
 800493c:	2302      	movs	r3, #2
 800493e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004940:	e006      	b.n	8004950 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f973 	bl	8005c30 <USBD_CtlError>
          ret = USBD_FAIL;
 800494a:	2302      	movs	r3, #2
 800494c:	75fb      	strb	r3, [r7, #23]
          break;
 800494e:	e000      	b.n	8004952 <USBD_CDC_Setup+0x12c>
          break;
 8004950:	bf00      	nop
      }
      break;
 8004952:	e006      	b.n	8004962 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f001 f96a 	bl	8005c30 <USBD_CtlError>
      ret = USBD_FAIL;
 800495c:	2302      	movs	r3, #2
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	bf00      	nop
  }

  return ret;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800497e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8004986:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d03a      	beq.n	8004a08 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	331c      	adds	r3, #28
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d029      	beq.n	80049fc <USBD_CDC_DataIn+0x90>
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	331c      	adds	r3, #28
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	78f9      	ldrb	r1, [r7, #3]
 80049bc:	68b8      	ldr	r0, [r7, #8]
 80049be:	460b      	mov	r3, r1
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	440b      	add	r3, r1
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4403      	add	r3, r0
 80049c8:	331c      	adds	r3, #28
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80049d0:	fb01 f303 	mul.w	r3, r1, r3
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d110      	bne.n	80049fc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80049da:	78fa      	ldrb	r2, [r7, #3]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	331c      	adds	r3, #28
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80049ee:	78f9      	ldrb	r1, [r7, #3]
 80049f0:	2300      	movs	r3, #0
 80049f2:	2200      	movs	r2, #0
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 fe33 	bl	8006660 <USBD_LL_Transmit>
 80049fa:	e003      	b.n	8004a04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e000      	b.n	8004a0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004a08:	2302      	movs	r3, #2
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a26:	78fb      	ldrb	r3, [r7, #3]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fe5e 	bl	80066ec <USBD_LL_GetRxDataSize>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004a56:	4611      	mov	r1, r2
 8004a58:	4798      	blx	r3

    return USBD_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e000      	b.n	8004a60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004a76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d014      	beq.n	8004aac <USBD_CDC_EP0_RxReady+0x44>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004a88:	2bff      	cmp	r3, #255	@ 0xff
 8004a8a:	d00f      	beq.n	8004aac <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004a9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004aa2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	22ff      	movs	r2, #255	@ 0xff
 8004aa8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2243      	movs	r2, #67	@ 0x43
 8004ac4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004ac6:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000094 	.word	0x20000094

08004ad8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2243      	movs	r2, #67	@ 0x43
 8004ae4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004ae6:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	20000050 	.word	0x20000050

08004af8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2243      	movs	r2, #67	@ 0x43
 8004b04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004b06:	4b03      	ldr	r3, [pc, #12]	@ (8004b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bc80      	pop	{r7}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	200000d8 	.word	0x200000d8

08004b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	220a      	movs	r2, #10
 8004b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004b26:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bc80      	pop	{r7}
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c

08004b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004b42:	2302      	movs	r3, #2
 8004b44:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b78:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004ba6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01c      	beq.n	8004c10 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d115      	bne.n	8004c0c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2181      	movs	r1, #129	@ 0x81
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 fd2c 	bl	8006660 <USBD_LL_Transmit>

      return USBD_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e002      	b.n	8004c12 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004c10:	2302      	movs	r3, #2
  }
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	7c1b      	ldrb	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c46:	2101      	movs	r1, #1
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f001 fd2c 	bl	80066a6 <USBD_LL_PrepareReceive>
 8004c4e:	e007      	b.n	8004c60 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004c56:	2340      	movs	r3, #64	@ 0x40
 8004c58:	2101      	movs	r1, #1
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 fd23 	bl	80066a6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c82:	2302      	movs	r3, #2
 8004c84:	e01a      	b.n	8004cbc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	79fa      	ldrb	r2, [r7, #7]
 8004cb2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f001 fba7 	bl	8006408 <USBD_LL_Init>

  return USBD_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d006      	beq.n	8004ce6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	e001      	b.n	8004cea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr

08004cf6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 fbc6 	bl	8006490 <USBD_LL_Start>

  return USBD_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	4611      	mov	r1, r2
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3

  return USBD_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b082      	sub	sp, #8
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 ff10 	bl	8005bbe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d016      	beq.n	8004df0 <USBD_LL_SetupStage+0x6a>
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d81c      	bhi.n	8004e00 <USBD_LL_SetupStage+0x7a>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <USBD_LL_SetupStage+0x4a>
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d008      	beq.n	8004de0 <USBD_LL_SetupStage+0x5a>
 8004dce:	e017      	b.n	8004e00 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fa03 	bl	80051e4 <USBD_StdDevReq>
      break;
 8004dde:	e01a      	b.n	8004e16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004de6:	4619      	mov	r1, r3
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa65 	bl	80052b8 <USBD_StdItfReq>
      break;
 8004dee:	e012      	b.n	8004e16 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004df6:	4619      	mov	r1, r3
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 faa5 	bl	8005348 <USBD_StdEPReq>
      break;
 8004dfe:	e00a      	b.n	8004e16 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004e06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fb9e 	bl	8006550 <USBD_LL_StallEP>
      break;
 8004e14:	bf00      	nop
  }

  return USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d14b      	bne.n	8004ecc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004e3a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d134      	bne.n	8004eb0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d919      	bls.n	8004e86 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	1ad2      	subs	r2, r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d203      	bcs.n	8004e74 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	e002      	b.n	8004e7a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 ff8c 	bl	8005d9c <USBD_CtlContinueRx>
 8004e84:	e038      	b.n	8004ef8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d105      	bne.n	8004ea8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 ff89 	bl	8005dc0 <USBD_CtlSendStatus>
 8004eae:	e023      	b.n	8004ef8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d11e      	bne.n	8004ef8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f001 fb43 	bl	8006550 <USBD_LL_StallEP>
 8004eca:	e015      	b.n	8004ef8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d108      	bne.n	8004ef4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	7afa      	ldrb	r2, [r7, #11]
 8004eec:	4611      	mov	r1, r2
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	4798      	blx	r3
 8004ef2:	e001      	b.n	8004ef8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e000      	b.n	8004efa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	607a      	str	r2, [r7, #4]
 8004f0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004f10:	7afb      	ldrb	r3, [r7, #11]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d17f      	bne.n	8005016 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d15c      	bne.n	8004fe0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d915      	bls.n	8004f5e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	1ad2      	subs	r2, r2, r3
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fef6 	bl	8005d3c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f50:	2300      	movs	r3, #0
 8004f52:	2200      	movs	r2, #0
 8004f54:	2100      	movs	r1, #0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f001 fba5 	bl	80066a6 <USBD_LL_PrepareReceive>
 8004f5c:	e04e      	b.n	8004ffc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	6912      	ldr	r2, [r2, #16]
 8004f66:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f6a:	fb01 f202 	mul.w	r2, r1, r2
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11c      	bne.n	8004fae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d316      	bcc.n	8004fae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20f      	bcs.n	8004fae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2100      	movs	r1, #0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fed2 	bl	8005d3c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f001 fb7d 	bl	80066a6 <USBD_LL_PrepareReceive>
 8004fac:	e026      	b.n	8004ffc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d105      	bne.n	8004fd0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004fd0:	2180      	movs	r1, #128	@ 0x80
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f001 fabc 	bl	8006550 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 ff04 	bl	8005de6 <USBD_CtlReceiveStatus>
 8004fde:	e00d      	b.n	8004ffc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d004      	beq.n	8004ff4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004ff4:	2180      	movs	r1, #128	@ 0x80
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f001 faaa 	bl	8006550 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005002:	2b01      	cmp	r3, #1
 8005004:	d11d      	bne.n	8005042 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f7ff fe81 	bl	8004d0e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005014:	e015      	b.n	8005042 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00d      	beq.n	800503e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005028:	2b03      	cmp	r3, #3
 800502a:	d108      	bne.n	800503e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	7afa      	ldrb	r2, [r7, #11]
 8005036:	4611      	mov	r1, r2
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	4798      	blx	r3
 800503c:	e001      	b.n	8005042 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800503e:	2302      	movs	r3, #2
 8005040:	e000      	b.n	8005044 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005054:	2340      	movs	r3, #64	@ 0x40
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 fa33 	bl	80064c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2240      	movs	r2, #64	@ 0x40
 800506c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005070:	2340      	movs	r3, #64	@ 0x40
 8005072:	2200      	movs	r2, #0
 8005074:	2180      	movs	r1, #128	@ 0x80
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f001 fa25 	bl	80064c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2240      	movs	r2, #64	@ 0x40
 8005086:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6852      	ldr	r2, [r2, #4]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	4611      	mov	r1, r2
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
  }

  return USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	460b      	mov	r3, r1
 80050d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	78fa      	ldrb	r2, [r7, #3]
 80050de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr

080050ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2204      	movs	r2, #4
 8005104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005122:	2b04      	cmp	r3, #4
 8005124:	d105      	bne.n	8005132 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	bc80      	pop	{r7}
 800513c:	4770      	bx	lr

0800513e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800514c:	2b03      	cmp	r3, #3
 800514e:	d10b      	bne.n	8005168 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr

0800518a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bc80      	pop	{r7}
 80051b4:	4770      	bx	lr

080051b6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6852      	ldr	r2, [r2, #4]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	4611      	mov	r1, r2
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3

  return USBD_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d005      	beq.n	800520a <USBD_StdDevReq+0x26>
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d84f      	bhi.n	80052a2 <USBD_StdDevReq+0xbe>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <USBD_StdDevReq+0x36>
 8005206:	2b20      	cmp	r3, #32
 8005208:	d14b      	bne.n	80052a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	6839      	ldr	r1, [r7, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4798      	blx	r3
      break;
 8005218:	e048      	b.n	80052ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b09      	cmp	r3, #9
 8005220:	d839      	bhi.n	8005296 <USBD_StdDevReq+0xb2>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <USBD_StdDevReq+0x44>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005279 	.word	0x08005279
 800522c:	0800528d 	.word	0x0800528d
 8005230:	08005297 	.word	0x08005297
 8005234:	08005283 	.word	0x08005283
 8005238:	08005297 	.word	0x08005297
 800523c:	0800525b 	.word	0x0800525b
 8005240:	08005251 	.word	0x08005251
 8005244:	08005297 	.word	0x08005297
 8005248:	0800526f 	.word	0x0800526f
 800524c:	08005265 	.word	0x08005265
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005250:	6839      	ldr	r1, [r7, #0]
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9dc 	bl	8005610 <USBD_GetDescriptor>
          break;
 8005258:	e022      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800525a:	6839      	ldr	r1, [r7, #0]
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fb3f 	bl	80058e0 <USBD_SetAddress>
          break;
 8005262:	e01d      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb7e 	bl	8005968 <USBD_SetConfig>
          break;
 800526c:	e018      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fc07 	bl	8005a84 <USBD_GetConfig>
          break;
 8005276:	e013      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fc37 	bl	8005aee <USBD_GetStatus>
          break;
 8005280:	e00e      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fc65 	bl	8005b54 <USBD_SetFeature>
          break;
 800528a:	e009      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fc74 	bl	8005b7c <USBD_ClrFeature>
          break;
 8005294:	e004      	b.n	80052a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fcc9 	bl	8005c30 <USBD_CtlError>
          break;
 800529e:	bf00      	nop
      }
      break;
 80052a0:	e004      	b.n	80052ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fcc3 	bl	8005c30 <USBD_CtlError>
      break;
 80052aa:	bf00      	nop
  }

  return ret;
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop

080052b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80052ce:	2b40      	cmp	r3, #64	@ 0x40
 80052d0:	d005      	beq.n	80052de <USBD_StdItfReq+0x26>
 80052d2:	2b40      	cmp	r3, #64	@ 0x40
 80052d4:	d82e      	bhi.n	8005334 <USBD_StdItfReq+0x7c>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <USBD_StdItfReq+0x26>
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d12a      	bne.n	8005334 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052e4:	3b01      	subs	r3, #1
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d81d      	bhi.n	8005326 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	889b      	ldrh	r3, [r3, #4]
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d813      	bhi.n	800531c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	6839      	ldr	r1, [r7, #0]
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	4798      	blx	r3
 8005302:	4603      	mov	r3, r0
 8005304:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	88db      	ldrh	r3, [r3, #6]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d110      	bne.n	8005330 <USBD_StdItfReq+0x78>
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10d      	bne.n	8005330 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fd53 	bl	8005dc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800531a:	e009      	b.n	8005330 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800531c:	6839      	ldr	r1, [r7, #0]
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fc86 	bl	8005c30 <USBD_CtlError>
          break;
 8005324:	e004      	b.n	8005330 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fc81 	bl	8005c30 <USBD_CtlError>
          break;
 800532e:	e000      	b.n	8005332 <USBD_StdItfReq+0x7a>
          break;
 8005330:	bf00      	nop
      }
      break;
 8005332:	e004      	b.n	800533e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005334:	6839      	ldr	r1, [r7, #0]
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fc7a 	bl	8005c30 <USBD_CtlError>
      break;
 800533c:	bf00      	nop
  }

  return USBD_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	889b      	ldrh	r3, [r3, #4]
 800535a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005364:	2b40      	cmp	r3, #64	@ 0x40
 8005366:	d007      	beq.n	8005378 <USBD_StdEPReq+0x30>
 8005368:	2b40      	cmp	r3, #64	@ 0x40
 800536a:	f200 8146 	bhi.w	80055fa <USBD_StdEPReq+0x2b2>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <USBD_StdEPReq+0x40>
 8005372:	2b20      	cmp	r3, #32
 8005374:	f040 8141 	bne.w	80055fa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	6839      	ldr	r1, [r7, #0]
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	4798      	blx	r3
      break;
 8005386:	e13d      	b.n	8005604 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005390:	2b20      	cmp	r3, #32
 8005392:	d10a      	bne.n	80053aa <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]

        return ret;
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	e12d      	b.n	8005606 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d007      	beq.n	80053c2 <USBD_StdEPReq+0x7a>
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	f300 811b 	bgt.w	80055ee <USBD_StdEPReq+0x2a6>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d072      	beq.n	80054a2 <USBD_StdEPReq+0x15a>
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d03a      	beq.n	8005436 <USBD_StdEPReq+0xee>
 80053c0:	e115      	b.n	80055ee <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d002      	beq.n	80053d2 <USBD_StdEPReq+0x8a>
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d015      	beq.n	80053fc <USBD_StdEPReq+0xb4>
 80053d0:	e02b      	b.n	800542a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053d2:	7bbb      	ldrb	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00c      	beq.n	80053f2 <USBD_StdEPReq+0xaa>
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b80      	cmp	r3, #128	@ 0x80
 80053dc:	d009      	beq.n	80053f2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f001 f8b4 	bl	8006550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80053e8:	2180      	movs	r1, #128	@ 0x80
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 f8b0 	bl	8006550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80053f0:	e020      	b.n	8005434 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fc1b 	bl	8005c30 <USBD_CtlError>
              break;
 80053fa:	e01b      	b.n	8005434 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	885b      	ldrh	r3, [r3, #2]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10e      	bne.n	8005422 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00b      	beq.n	8005422 <USBD_StdEPReq+0xda>
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	2b80      	cmp	r3, #128	@ 0x80
 800540e:	d008      	beq.n	8005422 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	88db      	ldrh	r3, [r3, #6]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005418:	7bbb      	ldrb	r3, [r7, #14]
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f001 f897 	bl	8006550 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fccc 	bl	8005dc0 <USBD_CtlSendStatus>

              break;
 8005428:	e004      	b.n	8005434 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800542a:	6839      	ldr	r1, [r7, #0]
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fbff 	bl	8005c30 <USBD_CtlError>
              break;
 8005432:	bf00      	nop
          }
          break;
 8005434:	e0e0      	b.n	80055f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800543c:	2b02      	cmp	r3, #2
 800543e:	d002      	beq.n	8005446 <USBD_StdEPReq+0xfe>
 8005440:	2b03      	cmp	r3, #3
 8005442:	d015      	beq.n	8005470 <USBD_StdEPReq+0x128>
 8005444:	e026      	b.n	8005494 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005446:	7bbb      	ldrb	r3, [r7, #14]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00c      	beq.n	8005466 <USBD_StdEPReq+0x11e>
 800544c:	7bbb      	ldrb	r3, [r7, #14]
 800544e:	2b80      	cmp	r3, #128	@ 0x80
 8005450:	d009      	beq.n	8005466 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005452:	7bbb      	ldrb	r3, [r7, #14]
 8005454:	4619      	mov	r1, r3
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f87a 	bl	8006550 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800545c:	2180      	movs	r1, #128	@ 0x80
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 f876 	bl	8006550 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005464:	e01c      	b.n	80054a0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fbe1 	bl	8005c30 <USBD_CtlError>
              break;
 800546e:	e017      	b.n	80054a0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	885b      	ldrh	r3, [r3, #2]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d112      	bne.n	800549e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005482:	7bbb      	ldrb	r3, [r7, #14]
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 f881 	bl	800658e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fc97 	bl	8005dc0 <USBD_CtlSendStatus>
              }
              break;
 8005492:	e004      	b.n	800549e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fbca 	bl	8005c30 <USBD_CtlError>
              break;
 800549c:	e000      	b.n	80054a0 <USBD_StdEPReq+0x158>
              break;
 800549e:	bf00      	nop
          }
          break;
 80054a0:	e0aa      	b.n	80055f8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d002      	beq.n	80054b2 <USBD_StdEPReq+0x16a>
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d032      	beq.n	8005516 <USBD_StdEPReq+0x1ce>
 80054b0:	e097      	b.n	80055e2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <USBD_StdEPReq+0x180>
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d004      	beq.n	80054c8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80054be:	6839      	ldr	r1, [r7, #0]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fbb5 	bl	8005c30 <USBD_CtlError>
                break;
 80054c6:	e091      	b.n	80055ec <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da0b      	bge.n	80054e8 <USBD_StdEPReq+0x1a0>
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	3310      	adds	r3, #16
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	3304      	adds	r3, #4
 80054e6:	e00b      	b.n	8005500 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2202      	movs	r2, #2
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fbf8 	bl	8005d04 <USBD_CtlSendData>
              break;
 8005514:	e06a      	b.n	80055ec <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005516:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da11      	bge.n	8005542 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	f003 020f 	and.w	r2, r3, #15
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	3318      	adds	r3, #24
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d117      	bne.n	8005568 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005538:	6839      	ldr	r1, [r7, #0]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fb78 	bl	8005c30 <USBD_CtlError>
                  break;
 8005540:	e054      	b.n	80055ec <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800555e:	6839      	ldr	r1, [r7, #0]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fb65 	bl	8005c30 <USBD_CtlError>
                  break;
 8005566:	e041      	b.n	80055ec <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800556c:	2b00      	cmp	r3, #0
 800556e:	da0b      	bge.n	8005588 <USBD_StdEPReq+0x240>
 8005570:	7bbb      	ldrb	r3, [r7, #14]
 8005572:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	3310      	adds	r3, #16
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4413      	add	r3, r2
 8005584:	3304      	adds	r3, #4
 8005586:	e00b      	b.n	80055a0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005588:	7bbb      	ldrb	r3, [r7, #14]
 800558a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <USBD_StdEPReq+0x266>
 80055a8:	7bbb      	ldrb	r3, [r7, #14]
 80055aa:	2b80      	cmp	r3, #128	@ 0x80
 80055ac:	d103      	bne.n	80055b6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	e00e      	b.n	80055d4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 f806 	bl	80065cc <USBD_LL_IsStallEP>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e002      	b.n	80055d4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2202      	movs	r2, #2
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fb92 	bl	8005d04 <USBD_CtlSendData>
              break;
 80055e0:	e004      	b.n	80055ec <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb23 	bl	8005c30 <USBD_CtlError>
              break;
 80055ea:	bf00      	nop
          }
          break;
 80055ec:	e004      	b.n	80055f8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fb1d 	bl	8005c30 <USBD_CtlError>
          break;
 80055f6:	bf00      	nop
      }
      break;
 80055f8:	e004      	b.n	8005604 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fb17 	bl	8005c30 <USBD_CtlError>
      break;
 8005602:	bf00      	nop
  }

  return ret;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	885b      	ldrh	r3, [r3, #2]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	2b06      	cmp	r3, #6
 8005632:	f200 8128 	bhi.w	8005886 <USBD_GetDescriptor+0x276>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <USBD_GetDescriptor+0x2c>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005659 	.word	0x08005659
 8005640:	08005671 	.word	0x08005671
 8005644:	080056b1 	.word	0x080056b1
 8005648:	08005887 	.word	0x08005887
 800564c:	08005887 	.word	0x08005887
 8005650:	08005827 	.word	0x08005827
 8005654:	08005853 	.word	0x08005853
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	7c12      	ldrb	r2, [r2, #16]
 8005664:	f107 0108 	add.w	r1, r7, #8
 8005668:	4610      	mov	r0, r2
 800566a:	4798      	blx	r3
 800566c:	60f8      	str	r0, [r7, #12]
      break;
 800566e:	e112      	b.n	8005896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	7c1b      	ldrb	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800567e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005680:	f107 0208 	add.w	r2, r7, #8
 8005684:	4610      	mov	r0, r2
 8005686:	4798      	blx	r3
 8005688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	2202      	movs	r2, #2
 8005690:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005692:	e100      	b.n	8005896 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800569a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569c:	f107 0208 	add.w	r2, r7, #8
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
 80056a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3301      	adds	r3, #1
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
      break;
 80056ae:	e0f2      	b.n	8005896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	885b      	ldrh	r3, [r3, #2]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	f200 80ac 	bhi.w	8005814 <USBD_GetDescriptor+0x204>
 80056bc:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <USBD_GetDescriptor+0xb4>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	08005711 	.word	0x08005711
 80056cc:	08005745 	.word	0x08005745
 80056d0:	08005779 	.word	0x08005779
 80056d4:	080057ad 	.word	0x080057ad
 80056d8:	080057e1 	.word	0x080057e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	7c12      	ldrb	r2, [r2, #16]
 80056f4:	f107 0108 	add.w	r1, r7, #8
 80056f8:	4610      	mov	r0, r2
 80056fa:	4798      	blx	r3
 80056fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056fe:	e091      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fa94 	bl	8005c30 <USBD_CtlError>
            err++;
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	3301      	adds	r3, #1
 800570c:	72fb      	strb	r3, [r7, #11]
          break;
 800570e:	e089      	b.n	8005824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	7c12      	ldrb	r2, [r2, #16]
 8005728:	f107 0108 	add.w	r1, r7, #8
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005732:	e077      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fa7a 	bl	8005c30 <USBD_CtlError>
            err++;
 800573c:	7afb      	ldrb	r3, [r7, #11]
 800573e:	3301      	adds	r3, #1
 8005740:	72fb      	strb	r3, [r7, #11]
          break;
 8005742:	e06f      	b.n	8005824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	7c12      	ldrb	r2, [r2, #16]
 800575c:	f107 0108 	add.w	r1, r7, #8
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005766:	e05d      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa60 	bl	8005c30 <USBD_CtlError>
            err++;
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	3301      	adds	r3, #1
 8005774:	72fb      	strb	r3, [r7, #11]
          break;
 8005776:	e055      	b.n	8005824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00b      	beq.n	800579c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	7c12      	ldrb	r2, [r2, #16]
 8005790:	f107 0108 	add.w	r1, r7, #8
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800579a:	e043      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa46 	bl	8005c30 <USBD_CtlError>
            err++;
 80057a4:	7afb      	ldrb	r3, [r7, #11]
 80057a6:	3301      	adds	r3, #1
 80057a8:	72fb      	strb	r3, [r7, #11]
          break;
 80057aa:	e03b      	b.n	8005824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	7c12      	ldrb	r2, [r2, #16]
 80057c4:	f107 0108 	add.w	r1, r7, #8
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
 80057cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ce:	e029      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057d0:	6839      	ldr	r1, [r7, #0]
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa2c 	bl	8005c30 <USBD_CtlError>
            err++;
 80057d8:	7afb      	ldrb	r3, [r7, #11]
 80057da:	3301      	adds	r3, #1
 80057dc:	72fb      	strb	r3, [r7, #11]
          break;
 80057de:	e021      	b.n	8005824 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7c12      	ldrb	r2, [r2, #16]
 80057f8:	f107 0108 	add.w	r1, r7, #8
 80057fc:	4610      	mov	r0, r2
 80057fe:	4798      	blx	r3
 8005800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005802:	e00f      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fa12 	bl	8005c30 <USBD_CtlError>
            err++;
 800580c:	7afb      	ldrb	r3, [r7, #11]
 800580e:	3301      	adds	r3, #1
 8005810:	72fb      	strb	r3, [r7, #11]
          break;
 8005812:	e007      	b.n	8005824 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa0a 	bl	8005c30 <USBD_CtlError>
          err++;
 800581c:	7afb      	ldrb	r3, [r7, #11]
 800581e:	3301      	adds	r3, #1
 8005820:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005822:	e038      	b.n	8005896 <USBD_GetDescriptor+0x286>
 8005824:	e037      	b.n	8005896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7c1b      	ldrb	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005836:	f107 0208 	add.w	r2, r7, #8
 800583a:	4610      	mov	r0, r2
 800583c:	4798      	blx	r3
 800583e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005840:	e029      	b.n	8005896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f9f3 	bl	8005c30 <USBD_CtlError>
        err++;
 800584a:	7afb      	ldrb	r3, [r7, #11]
 800584c:	3301      	adds	r3, #1
 800584e:	72fb      	strb	r3, [r7, #11]
      break;
 8005850:	e021      	b.n	8005896 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	7c1b      	ldrb	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10d      	bne.n	8005876 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	f107 0208 	add.w	r2, r7, #8
 8005866:	4610      	mov	r0, r2
 8005868:	4798      	blx	r3
 800586a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	2207      	movs	r2, #7
 8005872:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005874:	e00f      	b.n	8005896 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9d9 	bl	8005c30 <USBD_CtlError>
        err++;
 800587e:	7afb      	ldrb	r3, [r7, #11]
 8005880:	3301      	adds	r3, #1
 8005882:	72fb      	strb	r3, [r7, #11]
      break;
 8005884:	e007      	b.n	8005896 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f9d1 	bl	8005c30 <USBD_CtlError>
      err++;
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	3301      	adds	r3, #1
 8005892:	72fb      	strb	r3, [r7, #11]
      break;
 8005894:	bf00      	nop
  }

  if (err != 0U)
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d11c      	bne.n	80058d6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800589c:	893b      	ldrh	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d011      	beq.n	80058c6 <USBD_GetDescriptor+0x2b6>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	88db      	ldrh	r3, [r3, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00d      	beq.n	80058c6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	88da      	ldrh	r2, [r3, #6]
 80058ae:	893b      	ldrh	r3, [r7, #8]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	bf28      	it	cs
 80058b4:	4613      	movcs	r3, r2
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058ba:	893b      	ldrh	r3, [r7, #8]
 80058bc:	461a      	mov	r2, r3
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fa1f 	bl	8005d04 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	88db      	ldrh	r3, [r3, #6]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa76 	bl	8005dc0 <USBD_CtlSendStatus>
 80058d4:	e000      	b.n	80058d8 <USBD_GetDescriptor+0x2c8>
    return;
 80058d6:	bf00      	nop
    }
  }
}
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop

080058e0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	889b      	ldrh	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d130      	bne.n	8005954 <USBD_SetAddress+0x74>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	88db      	ldrh	r3, [r3, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d12c      	bne.n	8005954 <USBD_SetAddress+0x74>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	885b      	ldrh	r3, [r3, #2]
 80058fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005900:	d828      	bhi.n	8005954 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	885b      	ldrh	r3, [r3, #2]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800590c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005914:	2b03      	cmp	r3, #3
 8005916:	d104      	bne.n	8005922 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f988 	bl	8005c30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005920:	e01d      	b.n	800595e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	7bfa      	ldrb	r2, [r7, #15]
 8005926:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800592a:	7bfb      	ldrb	r3, [r7, #15]
 800592c:	4619      	mov	r1, r3
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fe77 	bl	8006622 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fa43 	bl	8005dc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005948:	e009      	b.n	800595e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005952:	e004      	b.n	800595e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005954:	6839      	ldr	r1, [r7, #0]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f96a 	bl	8005c30 <USBD_CtlError>
  }
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	885b      	ldrh	r3, [r3, #2]
 8005976:	b2da      	uxtb	r2, r3
 8005978:	4b41      	ldr	r3, [pc, #260]	@ (8005a80 <USBD_SetConfig+0x118>)
 800597a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800597c:	4b40      	ldr	r3, [pc, #256]	@ (8005a80 <USBD_SetConfig+0x118>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d904      	bls.n	800598e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005984:	6839      	ldr	r1, [r7, #0]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f952 	bl	8005c30 <USBD_CtlError>
 800598c:	e075      	b.n	8005a7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005994:	2b02      	cmp	r3, #2
 8005996:	d002      	beq.n	800599e <USBD_SetConfig+0x36>
 8005998:	2b03      	cmp	r3, #3
 800599a:	d023      	beq.n	80059e4 <USBD_SetConfig+0x7c>
 800599c:	e062      	b.n	8005a64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800599e:	4b38      	ldr	r3, [pc, #224]	@ (8005a80 <USBD_SetConfig+0x118>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d01a      	beq.n	80059dc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80059a6:	4b36      	ldr	r3, [pc, #216]	@ (8005a80 <USBD_SetConfig+0x118>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2203      	movs	r2, #3
 80059b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80059b8:	4b31      	ldr	r3, [pc, #196]	@ (8005a80 <USBD_SetConfig+0x118>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	4619      	mov	r1, r3
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff f9af 	bl	8004d22 <USBD_SetClassConfig>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d104      	bne.n	80059d4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 f92f 	bl	8005c30 <USBD_CtlError>
            return;
 80059d2:	e052      	b.n	8005a7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f9f3 	bl	8005dc0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80059da:	e04e      	b.n	8005a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f9ef 	bl	8005dc0 <USBD_CtlSendStatus>
        break;
 80059e2:	e04a      	b.n	8005a7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80059e4:	4b26      	ldr	r3, [pc, #152]	@ (8005a80 <USBD_SetConfig+0x118>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d112      	bne.n	8005a12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80059f4:	4b22      	ldr	r3, [pc, #136]	@ (8005a80 <USBD_SetConfig+0x118>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80059fe:	4b20      	ldr	r3, [pc, #128]	@ (8005a80 <USBD_SetConfig+0x118>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	4619      	mov	r1, r3
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff f9ab 	bl	8004d60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9d8 	bl	8005dc0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a10:	e033      	b.n	8005a7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005a12:	4b1b      	ldr	r3, [pc, #108]	@ (8005a80 <USBD_SetConfig+0x118>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	461a      	mov	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d01d      	beq.n	8005a5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4619      	mov	r1, r3
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff f999 	bl	8004d60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005a2e:	4b14      	ldr	r3, [pc, #80]	@ (8005a80 <USBD_SetConfig+0x118>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a38:	4b11      	ldr	r3, [pc, #68]	@ (8005a80 <USBD_SetConfig+0x118>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff f96f 	bl	8004d22 <USBD_SetClassConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f8ef 	bl	8005c30 <USBD_CtlError>
            return;
 8005a52:	e012      	b.n	8005a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9b3 	bl	8005dc0 <USBD_CtlSendStatus>
        break;
 8005a5a:	e00e      	b.n	8005a7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f9af 	bl	8005dc0 <USBD_CtlSendStatus>
        break;
 8005a62:	e00a      	b.n	8005a7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005a64:	6839      	ldr	r1, [r7, #0]
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8e2 	bl	8005c30 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005a6c:	4b04      	ldr	r3, [pc, #16]	@ (8005a80 <USBD_SetConfig+0x118>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	4619      	mov	r1, r3
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f974 	bl	8004d60 <USBD_ClrClassConfig>
        break;
 8005a78:	bf00      	nop
    }
  }
}
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	2000019c 	.word	0x2000019c

08005a84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d004      	beq.n	8005aa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8c9 	bl	8005c30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a9e:	e022      	b.n	8005ae6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	dc02      	bgt.n	8005ab0 <USBD_GetConfig+0x2c>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dc03      	bgt.n	8005ab6 <USBD_GetConfig+0x32>
 8005aae:	e015      	b.n	8005adc <USBD_GetConfig+0x58>
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d00b      	beq.n	8005acc <USBD_GetConfig+0x48>
 8005ab4:	e012      	b.n	8005adc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3308      	adds	r3, #8
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f91d 	bl	8005d04 <USBD_CtlSendData>
        break;
 8005aca:	e00c      	b.n	8005ae6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f915 	bl	8005d04 <USBD_CtlSendData>
        break;
 8005ada:	e004      	b.n	8005ae6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8a6 	bl	8005c30 <USBD_CtlError>
        break;
 8005ae4:	bf00      	nop
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005afe:	3b01      	subs	r3, #1
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d81e      	bhi.n	8005b42 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	88db      	ldrh	r3, [r3, #6]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d004      	beq.n	8005b16 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f88e 	bl	8005c30 <USBD_CtlError>
        break;
 8005b14:	e01a      	b.n	8005b4c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f043 0202 	orr.w	r2, r3, #2
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	330c      	adds	r3, #12
 8005b36:	2202      	movs	r2, #2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8e2 	bl	8005d04 <USBD_CtlSendData>
      break;
 8005b40:	e004      	b.n	8005b4c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f873 	bl	8005c30 <USBD_CtlError>
      break;
 8005b4a:	bf00      	nop
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	885b      	ldrh	r3, [r3, #2]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d106      	bne.n	8005b74 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f926 	bl	8005dc0 <USBD_CtlSendStatus>
  }
}
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d80b      	bhi.n	8005baa <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	885b      	ldrh	r3, [r3, #2]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d10c      	bne.n	8005bb4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f90c 	bl	8005dc0 <USBD_CtlSendStatus>
      }
      break;
 8005ba8:	e004      	b.n	8005bb4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f83f 	bl	8005c30 <USBD_CtlError>
      break;
 8005bb2:	e000      	b.n	8005bb6 <USBD_ClrFeature+0x3a>
      break;
 8005bb4:	bf00      	nop
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	785a      	ldrb	r2, [r3, #1]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	3302      	adds	r3, #2
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	3303      	adds	r3, #3
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4413      	add	r3, r2
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	3305      	adds	r3, #5
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	3306      	adds	r3, #6
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	3307      	adds	r3, #7
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	80da      	strh	r2, [r3, #6]

}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fc87 	bl	8006550 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005c42:	2100      	movs	r1, #0
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fc83 	bl	8006550 <USBD_LL_StallEP>
}
 8005c4a:	bf00      	nop
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b086      	sub	sp, #24
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d032      	beq.n	8005cce <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f834 	bl	8005cd6 <USBD_GetLen>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	3301      	adds	r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	75fa      	strb	r2, [r7, #23]
 8005c82:	461a      	mov	r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	7812      	ldrb	r2, [r2, #0]
 8005c8c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	75fa      	strb	r2, [r7, #23]
 8005c94:	461a      	mov	r2, r3
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4413      	add	r3, r2
 8005c9a:	2203      	movs	r2, #3
 8005c9c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005c9e:	e012      	b.n	8005cc6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	60fa      	str	r2, [r7, #12]
 8005ca6:	7dfa      	ldrb	r2, [r7, #23]
 8005ca8:	1c51      	adds	r1, r2, #1
 8005caa:	75f9      	strb	r1, [r7, #23]
 8005cac:	4611      	mov	r1, r2
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	75fa      	strb	r2, [r7, #23]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e8      	bne.n	8005ca0 <USBD_GetString+0x4e>
    }
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005ce2:	e005      	b.n	8005cf0 <USBD_GetLen+0x1a>
  {
    len++;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3301      	adds	r3, #1
 8005cee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f5      	bne.n	8005ce4 <USBD_GetLen+0xe>
  }

  return len;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fc97 	bl	8006660 <USBD_LL_Transmit>

  return USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	4613      	mov	r3, r2
 8005d48:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	2100      	movs	r1, #0
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fc85 	bl	8006660 <USBD_LL_Transmit>

  return USBD_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2203      	movs	r2, #3
 8005d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fc8a 	bl	80066a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	2100      	movs	r1, #0
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fc78 	bl	80066a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2204      	movs	r2, #4
 8005dcc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fc42 	bl	8006660 <USBD_LL_Transmit>

  return USBD_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2205      	movs	r2, #5
 8005df2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005df6:	2300      	movs	r3, #0
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fc52 	bl	80066a6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e10:	2200      	movs	r2, #0
 8005e12:	4912      	ldr	r1, [pc, #72]	@ (8005e5c <MX_USB_DEVICE_Init+0x50>)
 8005e14:	4812      	ldr	r0, [pc, #72]	@ (8005e60 <MX_USB_DEVICE_Init+0x54>)
 8005e16:	f7fe ff2a 	bl	8004c6e <USBD_Init>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005e20:	f7fa fee2 	bl	8000be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005e24:	490f      	ldr	r1, [pc, #60]	@ (8005e64 <MX_USB_DEVICE_Init+0x58>)
 8005e26:	480e      	ldr	r0, [pc, #56]	@ (8005e60 <MX_USB_DEVICE_Init+0x54>)
 8005e28:	f7fe ff4c 	bl	8004cc4 <USBD_RegisterClass>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005e32:	f7fa fed9 	bl	8000be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005e36:	490c      	ldr	r1, [pc, #48]	@ (8005e68 <MX_USB_DEVICE_Init+0x5c>)
 8005e38:	4809      	ldr	r0, [pc, #36]	@ (8005e60 <MX_USB_DEVICE_Init+0x54>)
 8005e3a:	f7fe fe7d 	bl	8004b38 <USBD_CDC_RegisterInterface>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005e44:	f7fa fed0 	bl	8000be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005e48:	4805      	ldr	r0, [pc, #20]	@ (8005e60 <MX_USB_DEVICE_Init+0x54>)
 8005e4a:	f7fe ff54 	bl	8004cf6 <USBD_Start>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005e54:	f7fa fec8 	bl	8000be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005e58:	bf00      	nop
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	2000012c 	.word	0x2000012c
 8005e60:	200001a0 	.word	0x200001a0
 8005e64:	20000018 	.word	0x20000018
 8005e68:	2000011c 	.word	0x2000011c

08005e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e70:	2200      	movs	r2, #0
 8005e72:	4905      	ldr	r1, [pc, #20]	@ (8005e88 <CDC_Init_FS+0x1c>)
 8005e74:	4805      	ldr	r0, [pc, #20]	@ (8005e8c <CDC_Init_FS+0x20>)
 8005e76:	f7fe fe75 	bl	8004b64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e7a:	4905      	ldr	r1, [pc, #20]	@ (8005e90 <CDC_Init_FS+0x24>)
 8005e7c:	4803      	ldr	r0, [pc, #12]	@ (8005e8c <CDC_Init_FS+0x20>)
 8005e7e:	f7fe fe8a 	bl	8004b96 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	20000864 	.word	0x20000864
 8005e8c:	200001a0 	.word	0x200001a0
 8005e90:	20000464 	.word	0x20000464

08005e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e94:	b480      	push	{r7}
 8005e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
	...

08005ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	6039      	str	r1, [r7, #0]
 8005eae:	71fb      	strb	r3, [r7, #7]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005eb4:	79fb      	ldrb	r3, [r7, #7]
 8005eb6:	2b23      	cmp	r3, #35	@ 0x23
 8005eb8:	d84a      	bhi.n	8005f50 <CDC_Control_FS+0xac>
 8005eba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec0 <CDC_Control_FS+0x1c>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005f51 	.word	0x08005f51
 8005ec4:	08005f51 	.word	0x08005f51
 8005ec8:	08005f51 	.word	0x08005f51
 8005ecc:	08005f51 	.word	0x08005f51
 8005ed0:	08005f51 	.word	0x08005f51
 8005ed4:	08005f51 	.word	0x08005f51
 8005ed8:	08005f51 	.word	0x08005f51
 8005edc:	08005f51 	.word	0x08005f51
 8005ee0:	08005f51 	.word	0x08005f51
 8005ee4:	08005f51 	.word	0x08005f51
 8005ee8:	08005f51 	.word	0x08005f51
 8005eec:	08005f51 	.word	0x08005f51
 8005ef0:	08005f51 	.word	0x08005f51
 8005ef4:	08005f51 	.word	0x08005f51
 8005ef8:	08005f51 	.word	0x08005f51
 8005efc:	08005f51 	.word	0x08005f51
 8005f00:	08005f51 	.word	0x08005f51
 8005f04:	08005f51 	.word	0x08005f51
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f51 	.word	0x08005f51
 8005f10:	08005f51 	.word	0x08005f51
 8005f14:	08005f51 	.word	0x08005f51
 8005f18:	08005f51 	.word	0x08005f51
 8005f1c:	08005f51 	.word	0x08005f51
 8005f20:	08005f51 	.word	0x08005f51
 8005f24:	08005f51 	.word	0x08005f51
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f51 	.word	0x08005f51
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f51 	.word	0x08005f51
 8005f38:	08005f51 	.word	0x08005f51
 8005f3c:	08005f51 	.word	0x08005f51
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f51 	.word	0x08005f51
 8005f48:	08005f51 	.word	0x08005f51
 8005f4c:	08005f51 	.word	0x08005f51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005f50:	bf00      	nop
  }

  return (USBD_OK);
 8005f52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f6a:	6879      	ldr	r1, [r7, #4]
 8005f6c:	4805      	ldr	r0, [pc, #20]	@ (8005f84 <CDC_Receive_FS+0x24>)
 8005f6e:	f7fe fe12 	bl	8004b96 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f72:	4804      	ldr	r0, [pc, #16]	@ (8005f84 <CDC_Receive_FS+0x24>)
 8005f74:	f7fe fe51 	bl	8004c1a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005f78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200001a0 	.word	0x200001a0

08005f88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005f98:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd0 <CDC_Transmit_FS+0x48>)
 8005f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e00b      	b.n	8005fc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005fae:	887b      	ldrh	r3, [r7, #2]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4806      	ldr	r0, [pc, #24]	@ (8005fd0 <CDC_Transmit_FS+0x48>)
 8005fb6:	f7fe fdd5 	bl	8004b64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005fba:	4805      	ldr	r0, [pc, #20]	@ (8005fd0 <CDC_Transmit_FS+0x48>)
 8005fbc:	f7fe fdfe 	bl	8004bbc <USBD_CDC_TransmitPacket>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	200001a0 	.word	0x200001a0

08005fd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	6039      	str	r1, [r7, #0]
 8005fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2212      	movs	r2, #18
 8005fe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fe6:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bc80      	pop	{r7}
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000148 	.word	0x20000148

08005ff8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2204      	movs	r2, #4
 8006008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800600a:	4b03      	ldr	r3, [pc, #12]	@ (8006018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800600c:	4618      	mov	r0, r3
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	2000015c 	.word	0x2000015c

0800601c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	6039      	str	r1, [r7, #0]
 8006026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	4907      	ldr	r1, [pc, #28]	@ (8006050 <USBD_FS_ProductStrDescriptor+0x34>)
 8006032:	4808      	ldr	r0, [pc, #32]	@ (8006054 <USBD_FS_ProductStrDescriptor+0x38>)
 8006034:	f7ff fe0d 	bl	8005c52 <USBD_GetString>
 8006038:	e004      	b.n	8006044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	4904      	ldr	r1, [pc, #16]	@ (8006050 <USBD_FS_ProductStrDescriptor+0x34>)
 800603e:	4805      	ldr	r0, [pc, #20]	@ (8006054 <USBD_FS_ProductStrDescriptor+0x38>)
 8006040:	f7ff fe07 	bl	8005c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006044:	4b02      	ldr	r3, [pc, #8]	@ (8006050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	20000c64 	.word	0x20000c64
 8006054:	08006888 	.word	0x08006888

08006058 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	6039      	str	r1, [r7, #0]
 8006062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4904      	ldr	r1, [pc, #16]	@ (8006078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006068:	4804      	ldr	r0, [pc, #16]	@ (800607c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800606a:	f7ff fdf2 	bl	8005c52 <USBD_GetString>
  return USBD_StrDesc;
 800606e:	4b02      	ldr	r3, [pc, #8]	@ (8006078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006070:	4618      	mov	r0, r3
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000c64 	.word	0x20000c64
 800607c:	080068a0 	.word	0x080068a0

08006080 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	6039      	str	r1, [r7, #0]
 800608a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	221a      	movs	r2, #26
 8006090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006092:	f000 f843 	bl	800611c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006096:	4b02      	ldr	r3, [pc, #8]	@ (80060a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000160 	.word	0x20000160

080060a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	4603      	mov	r3, r0
 80060ac:	6039      	str	r1, [r7, #0]
 80060ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	4907      	ldr	r1, [pc, #28]	@ (80060d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060ba:	4808      	ldr	r0, [pc, #32]	@ (80060dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80060bc:	f7ff fdc9 	bl	8005c52 <USBD_GetString>
 80060c0:	e004      	b.n	80060cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	4904      	ldr	r1, [pc, #16]	@ (80060d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060c6:	4805      	ldr	r0, [pc, #20]	@ (80060dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80060c8:	f7ff fdc3 	bl	8005c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3708      	adds	r7, #8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000c64 	.word	0x20000c64
 80060dc:	080068b4 	.word	0x080068b4

080060e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	4603      	mov	r3, r0
 80060e8:	6039      	str	r1, [r7, #0]
 80060ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060ec:	79fb      	ldrb	r3, [r7, #7]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4907      	ldr	r1, [pc, #28]	@ (8006114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060f6:	4808      	ldr	r0, [pc, #32]	@ (8006118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060f8:	f7ff fdab 	bl	8005c52 <USBD_GetString>
 80060fc:	e004      	b.n	8006108 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	4904      	ldr	r1, [pc, #16]	@ (8006114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006102:	4805      	ldr	r0, [pc, #20]	@ (8006118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006104:	f7ff fda5 	bl	8005c52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006108:	4b02      	ldr	r3, [pc, #8]	@ (8006114 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000c64 	.word	0x20000c64
 8006118:	080068c0 	.word	0x080068c0

0800611c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006122:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <Get_SerialNum+0x44>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <Get_SerialNum+0x48>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800612e:	4b0e      	ldr	r3, [pc, #56]	@ (8006168 <Get_SerialNum+0x4c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006142:	2208      	movs	r2, #8
 8006144:	4909      	ldr	r1, [pc, #36]	@ (800616c <Get_SerialNum+0x50>)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f814 	bl	8006174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800614c:	2204      	movs	r2, #4
 800614e:	4908      	ldr	r1, [pc, #32]	@ (8006170 <Get_SerialNum+0x54>)
 8006150:	68b8      	ldr	r0, [r7, #8]
 8006152:	f000 f80f 	bl	8006174 <IntToUnicode>
  }
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	1ffff7e8 	.word	0x1ffff7e8
 8006164:	1ffff7ec 	.word	0x1ffff7ec
 8006168:	1ffff7f0 	.word	0x1ffff7f0
 800616c:	20000162 	.word	0x20000162
 8006170:	20000172 	.word	0x20000172

08006174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006186:	2300      	movs	r3, #0
 8006188:	75fb      	strb	r3, [r7, #23]
 800618a:	e027      	b.n	80061dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	2b09      	cmp	r3, #9
 8006192:	d80b      	bhi.n	80061ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	0f1b      	lsrs	r3, r3, #28
 8006198:	b2da      	uxtb	r2, r3
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	4619      	mov	r1, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	440b      	add	r3, r1
 80061a4:	3230      	adds	r2, #48	@ 0x30
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	e00a      	b.n	80061c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	0f1b      	lsrs	r3, r3, #28
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	4619      	mov	r1, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	440b      	add	r3, r1
 80061bc:	3237      	adds	r2, #55	@ 0x37
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	3301      	adds	r3, #1
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	3301      	adds	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
 80061dc:	7dfa      	ldrb	r2, [r7, #23]
 80061de:	79fb      	ldrb	r3, [r7, #7]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3d3      	bcc.n	800618c <IntToUnicode+0x18>
  }
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006200:	d113      	bne.n	800622a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006202:	4b0c      	ldr	r3, [pc, #48]	@ (8006234 <HAL_PCD_MspInit+0x44>)
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4a0b      	ldr	r2, [pc, #44]	@ (8006234 <HAL_PCD_MspInit+0x44>)
 8006208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800620c:	6153      	str	r3, [r2, #20]
 800620e:	4b09      	ldr	r3, [pc, #36]	@ (8006234 <HAL_PCD_MspInit+0x44>)
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	2043      	movs	r0, #67	@ 0x43
 8006220:	f7fa fed9 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006224:	2043      	movs	r0, #67	@ 0x43
 8006226:	f7fa fef2 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000

08006238 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 24d8 	ldr.w	r2, [r3, #1240]	@ 0x4d8
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7fe fd99 	bl	8004d86 <USBD_LL_SetupStage>
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	6879      	ldr	r1, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	00db      	lsls	r3, r3, #3
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	440b      	add	r3, r1
 800627c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	4619      	mov	r1, r3
 8006286:	f7fe fdcb 	bl	8004e20 <USBD_LL_DataOutStage>
}
 800628a:	bf00      	nop
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b082      	sub	sp, #8
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 04d8 	ldr.w	r0, [r3, #1240]	@ 0x4d8
 80062a4:	78fa      	ldrb	r2, [r7, #3]
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4613      	mov	r3, r2
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	440b      	add	r3, r1
 80062b2:	3320      	adds	r3, #32
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	4619      	mov	r1, r3
 80062ba:	f7fe fe22 	bl	8004f02 <USBD_LL_DataInStage>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe ff32 	bl	800513e <USBD_LL_SOF>
}
 80062da:	bf00      	nop
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	79db      	ldrb	r3, [r3, #7]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d001      	beq.n	80062fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80062f6:	f7fa fc77 	bl	8000be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	4611      	mov	r1, r2
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fee2 	bl	80050ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe9b 	bl	800504c <USBD_LL_Reset>
}
 8006316:	bf00      	nop
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fedc 	bl	80050ec <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006346:	f043 0301 	orr.w	r3, r3, #1
 800634a:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7adb      	ldrb	r3, [r3, #11]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006354:	4b04      	ldr	r3, [pc, #16]	@ (8006368 <HAL_PCD_SuspendCallback+0x48>)
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	4a03      	ldr	r2, [pc, #12]	@ (8006368 <HAL_PCD_SuspendCallback+0x48>)
 800635a:	f043 0306 	orr.w	r3, r3, #6
 800635e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe feca 	bl	8005114 <USBD_LL_Resume>
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	4611      	mov	r1, r2
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fef3 	bl	800518a <USBD_LL_IsoOUTIncomplete>
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fed5 	bl	8005172 <USBD_LL_IsoINIncomplete>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fedf 	bl	80051a2 <USBD_LL_DevConnected>
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 34d8 	ldr.w	r3, [r3, #1240]	@ 0x4d8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fedb 	bl	80051b6 <USBD_LL_DevDisconnected>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d133      	bne.n	8006480 <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006418:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <USBD_LL_Init+0x84>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8c2 34d8 	str.w	r3, [r2, #1240]	@ 0x4d8
  pdev->pData = &hpcd_USB_OTG_FS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1a      	ldr	r2, [pc, #104]	@ (800648c <USBD_LL_Init+0x84>)
 8006424:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006428:	4b18      	ldr	r3, [pc, #96]	@ (800648c <USBD_LL_Init+0x84>)
 800642a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800642e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006430:	4b16      	ldr	r3, [pc, #88]	@ (800648c <USBD_LL_Init+0x84>)
 8006432:	2204      	movs	r2, #4
 8006434:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006436:	4b15      	ldr	r3, [pc, #84]	@ (800648c <USBD_LL_Init+0x84>)
 8006438:	2202      	movs	r2, #2
 800643a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800643c:	4b13      	ldr	r3, [pc, #76]	@ (800648c <USBD_LL_Init+0x84>)
 800643e:	2202      	movs	r2, #2
 8006440:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006442:	4b12      	ldr	r3, [pc, #72]	@ (800648c <USBD_LL_Init+0x84>)
 8006444:	2200      	movs	r2, #0
 8006446:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006448:	4b10      	ldr	r3, [pc, #64]	@ (800648c <USBD_LL_Init+0x84>)
 800644a:	2200      	movs	r2, #0
 800644c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800644e:	4b0f      	ldr	r3, [pc, #60]	@ (800648c <USBD_LL_Init+0x84>)
 8006450:	2200      	movs	r2, #0
 8006452:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006454:	480d      	ldr	r0, [pc, #52]	@ (800648c <USBD_LL_Init+0x84>)
 8006456:	f7fa ffa8 	bl	80013aa <HAL_PCD_Init>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8006460:	f7fa fbc2 	bl	8000be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006464:	2180      	movs	r1, #128	@ 0x80
 8006466:	4809      	ldr	r0, [pc, #36]	@ (800648c <USBD_LL_Init+0x84>)
 8006468:	f7fc f8ae 	bl	80025c8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800646c:	2240      	movs	r2, #64	@ 0x40
 800646e:	2100      	movs	r1, #0
 8006470:	4806      	ldr	r0, [pc, #24]	@ (800648c <USBD_LL_Init+0x84>)
 8006472:	f7fc f863 	bl	800253c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006476:	2280      	movs	r2, #128	@ 0x80
 8006478:	2101      	movs	r1, #1
 800647a:	4804      	ldr	r0, [pc, #16]	@ (800648c <USBD_LL_Init+0x84>)
 800647c:	f7fc f85e 	bl	800253c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000e64 	.word	0x20000e64

08006490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fb f887 	bl	80015ba <HAL_PCD_Start>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 f944 	bl	8006740 <USBD_Get_USB_Status>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	4608      	mov	r0, r1
 80064d0:	4611      	mov	r1, r2
 80064d2:	461a      	mov	r2, r3
 80064d4:	4603      	mov	r3, r0
 80064d6:	70fb      	strb	r3, [r7, #3]
 80064d8:	460b      	mov	r3, r1
 80064da:	70bb      	strb	r3, [r7, #2]
 80064dc:	4613      	mov	r3, r2
 80064de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80064ee:	78bb      	ldrb	r3, [r7, #2]
 80064f0:	883a      	ldrh	r2, [r7, #0]
 80064f2:	78f9      	ldrb	r1, [r7, #3]
 80064f4:	f7fb fd02 	bl	8001efc <HAL_PCD_EP_Open>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f91e 	bl	8006740 <USBD_Get_USB_Status>
 8006504:	4603      	mov	r3, r0
 8006506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006508:	7bbb      	ldrb	r3, [r7, #14]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b084      	sub	sp, #16
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	460b      	mov	r3, r1
 800651c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800652c:	78fa      	ldrb	r2, [r7, #3]
 800652e:	4611      	mov	r1, r2
 8006530:	4618      	mov	r0, r3
 8006532:	f7fb fd4b 	bl	8001fcc <HAL_PCD_EP_Close>
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800653a:	7bfb      	ldrb	r3, [r7, #15]
 800653c:	4618      	mov	r0, r3
 800653e:	f000 f8ff 	bl	8006740 <USBD_Get_USB_Status>
 8006542:	4603      	mov	r3, r0
 8006544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006546:	7bbb      	ldrb	r3, [r7, #14]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800656a:	78fa      	ldrb	r2, [r7, #3]
 800656c:	4611      	mov	r1, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f7fb fdf0 	bl	8002154 <HAL_PCD_EP_SetStall>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f8e0 	bl	8006740 <USBD_Get_USB_Status>
 8006580:	4603      	mov	r3, r0
 8006582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006584:	7bbb      	ldrb	r3, [r7, #14]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80065a8:	78fa      	ldrb	r2, [r7, #3]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fb fe33 	bl	8002218 <HAL_PCD_EP_ClrStall>
 80065b2:	4603      	mov	r3, r0
 80065b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 f8c1 	bl	8006740 <USBD_Get_USB_Status>
 80065be:	4603      	mov	r3, r0
 80065c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	460b      	mov	r3, r1
 80065d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80065de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80065e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	da0b      	bge.n	8006600 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	3316      	adds	r3, #22
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	e00b      	b.n	8006618 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	4613      	mov	r3, r2
 800660a:	00db      	lsls	r3, r3, #3
 800660c:	4413      	add	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	440b      	add	r3, r1
 8006612:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006616:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	bc80      	pop	{r7}
 8006620:	4770      	bx	lr

08006622 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800663c:	78fa      	ldrb	r2, [r7, #3]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f7fb fc37 	bl	8001eb4 <HAL_PCD_SetAddress>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800664a:	7bfb      	ldrb	r3, [r7, #15]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f877 	bl	8006740 <USBD_Get_USB_Status>
 8006652:	4603      	mov	r3, r0
 8006654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006656:	7bbb      	ldrb	r3, [r7, #14]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	607a      	str	r2, [r7, #4]
 800666a:	461a      	mov	r2, r3
 800666c:	460b      	mov	r3, r1
 800666e:	72fb      	strb	r3, [r7, #11]
 8006670:	4613      	mov	r3, r2
 8006672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006682:	893b      	ldrh	r3, [r7, #8]
 8006684:	7af9      	ldrb	r1, [r7, #11]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	f7fb fd33 	bl	80020f2 <HAL_PCD_EP_Transmit>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f854 	bl	8006740 <USBD_Get_USB_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800669c:	7dbb      	ldrb	r3, [r7, #22]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	461a      	mov	r2, r3
 80066b2:	460b      	mov	r3, r1
 80066b4:	72fb      	strb	r3, [r7, #11]
 80066b6:	4613      	mov	r3, r2
 80066b8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80066c8:	893b      	ldrh	r3, [r7, #8]
 80066ca:	7af9      	ldrb	r1, [r7, #11]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	f7fb fcc7 	bl	8002060 <HAL_PCD_EP_Receive>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 f831 	bl	8006740 <USBD_Get_USB_Status>
 80066de:	4603      	mov	r3, r0
 80066e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3718      	adds	r7, #24
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80066fe:	78fa      	ldrb	r2, [r7, #3]
 8006700:	4611      	mov	r1, r2
 8006702:	4618      	mov	r0, r3
 8006704:	f7fb fcde 	bl	80020c4 <HAL_PCD_EP_GetRxCount>
 8006708:	4603      	mov	r3, r0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800671c:	4b02      	ldr	r3, [pc, #8]	@ (8006728 <USBD_static_malloc+0x14>)
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	20001340 	.word	0x20001340

0800672c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	bc80      	pop	{r7}
 800673c:	4770      	bx	lr
	...

08006740 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	4603      	mov	r3, r0
 8006748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d817      	bhi.n	8006784 <USBD_Get_USB_Status+0x44>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <USBD_Get_USB_Status+0x1c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006773 	.word	0x08006773
 8006764:	08006779 	.word	0x08006779
 8006768:	0800677f 	.word	0x0800677f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]
    break;
 8006770:	e00b      	b.n	800678a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006772:	2302      	movs	r3, #2
 8006774:	73fb      	strb	r3, [r7, #15]
    break;
 8006776:	e008      	b.n	800678a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
    break;
 800677c:	e005      	b.n	800678a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800677e:	2302      	movs	r3, #2
 8006780:	73fb      	strb	r3, [r7, #15]
    break;
 8006782:	e002      	b.n	800678a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006784:	2302      	movs	r3, #2
 8006786:	73fb      	strb	r3, [r7, #15]
    break;
 8006788:	bf00      	nop
  }
  return usb_status;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <memset>:
 8006798:	4603      	mov	r3, r0
 800679a:	4402      	add	r2, r0
 800679c:	4293      	cmp	r3, r2
 800679e:	d100      	bne.n	80067a2 <memset+0xa>
 80067a0:	4770      	bx	lr
 80067a2:	f803 1b01 	strb.w	r1, [r3], #1
 80067a6:	e7f9      	b.n	800679c <memset+0x4>

080067a8 <__libc_init_array>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	2600      	movs	r6, #0
 80067ac:	4d0c      	ldr	r5, [pc, #48]	@ (80067e0 <__libc_init_array+0x38>)
 80067ae:	4c0d      	ldr	r4, [pc, #52]	@ (80067e4 <__libc_init_array+0x3c>)
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	42a6      	cmp	r6, r4
 80067b6:	d109      	bne.n	80067cc <__libc_init_array+0x24>
 80067b8:	f000 f81a 	bl	80067f0 <_init>
 80067bc:	2600      	movs	r6, #0
 80067be:	4d0a      	ldr	r5, [pc, #40]	@ (80067e8 <__libc_init_array+0x40>)
 80067c0:	4c0a      	ldr	r4, [pc, #40]	@ (80067ec <__libc_init_array+0x44>)
 80067c2:	1b64      	subs	r4, r4, r5
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	42a6      	cmp	r6, r4
 80067c8:	d105      	bne.n	80067d6 <__libc_init_array+0x2e>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d0:	4798      	blx	r3
 80067d2:	3601      	adds	r6, #1
 80067d4:	e7ee      	b.n	80067b4 <__libc_init_array+0xc>
 80067d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067da:	4798      	blx	r3
 80067dc:	3601      	adds	r6, #1
 80067de:	e7f2      	b.n	80067c6 <__libc_init_array+0x1e>
 80067e0:	08006908 	.word	0x08006908
 80067e4:	08006908 	.word	0x08006908
 80067e8:	08006908 	.word	0x08006908
 80067ec:	0800690c 	.word	0x0800690c

080067f0 <_init>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	bf00      	nop
 80067f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f6:	bc08      	pop	{r3}
 80067f8:	469e      	mov	lr, r3
 80067fa:	4770      	bx	lr

080067fc <_fini>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	bf00      	nop
 8006800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006802:	bc08      	pop	{r3}
 8006804:	469e      	mov	lr, r3
 8006806:	4770      	bx	lr
