
STM32_Bootloader_Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf0  08003bf0  00004bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bf8  08003bf8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf8  08003bf8  00004bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c00  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000068  08003c68  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003c68  00005268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e53  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001843  00000000  00000000  0000cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0000e728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a3  00000000  00000000  0000ee98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa88  00000000  00000000  0000f43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098e3  00000000  00000000  0002eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3f62  00000000  00000000  000387a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  000ec74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000eec10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08003b18 	.word	0x08003b18

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08003b18 	.word	0x08003b18

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar (int ch)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (const uint8_t*)&ch, 1, 10);
 8000518:	1d39      	adds	r1, r7, #4
 800051a:	230a      	movs	r3, #10
 800051c:	2201      	movs	r2, #1
 800051e:	4804      	ldr	r0, [pc, #16]	@ (8000530 <__io_putchar+0x20>)
 8000520:	f001 fdec 	bl	80020fc <HAL_UART_Transmit>
	return ch;
 8000524:	687b      	ldr	r3, [r7, #4]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000cc 	.word	0x200000cc

08000534 <Read_Flash_Block>:

// Function to read a block of data from flash memory
void Read_Flash_Block(uint32_t address, uint8_t* buffer, uint32_t length) {
 8000534:	b480      	push	{r7}
 8000536:	b087      	sub	sp, #28
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < length; i++) {
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	e00b      	b.n	800055e <Read_Flash_Block+0x2a>
        buffer[i] = *(uint8_t*)(address + i);
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	4413      	add	r3, r2
 800054c:	4619      	mov	r1, r3
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	4413      	add	r3, r2
 8000554:	780a      	ldrb	r2, [r1, #0]
 8000556:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	3301      	adds	r3, #1
 800055c:	617b      	str	r3, [r7, #20]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	429a      	cmp	r2, r3
 8000564:	d3ef      	bcc.n	8000546 <Read_Flash_Block+0x12>
    }
}
 8000566:	bf00      	nop
 8000568:	bf00      	nop
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <Transmit_Data_UART4_Block>:

// Function to transmit data block over UART4
void Transmit_Data_UART4_Block(uint8_t* data, uint32_t length) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(&huart4, data, length, UART4_TIMEOUT);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b29a      	uxth	r2, r3
 8000582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000586:	6879      	ldr	r1, [r7, #4]
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <Transmit_Data_UART4_Block+0x24>)
 800058a:	f001 fdb7 	bl	80020fc <HAL_UART_Transmit>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	20000084 	.word	0x20000084

0800059c <Transmit_Flash_Image>:

// Main function to read from flash and transmit via UART4
void Transmit_Flash_Image(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 80005a2:	af00      	add	r7, sp, #0
    uint8_t buffer[MAX_BLOCK_SIZE];
    uint32_t address = FLASH_START_ADDRESS;
 80005a4:	4b26      	ldr	r3, [pc, #152]	@ (8000640 <Transmit_Flash_Image+0xa4>)
 80005a6:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
    uint32_t remaining = IMAGE_SIZE;
 80005aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ae:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408

    HAL_GPIO_WritePin(UART_EN_GPIO_Port, UART_EN_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2102      	movs	r1, #2
 80005b6:	4823      	ldr	r0, [pc, #140]	@ (8000644 <Transmit_Flash_Image+0xa8>)
 80005b8:	f000 ffda 	bl	8001570 <HAL_GPIO_WritePin>

    while (remaining > 0) {
 80005bc:	e036      	b.n	800062c <Transmit_Flash_Image+0x90>
        uint32_t block_size = (remaining > MAX_BLOCK_SIZE) ? MAX_BLOCK_SIZE : remaining;
 80005be:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80005c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005c6:	bf28      	it	cs
 80005c8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80005cc:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
        Read_Flash_Block(address, buffer, block_size);
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 80005d6:	4619      	mov	r1, r3
 80005d8:	f8d7 040c 	ldr.w	r0, [r7, #1036]	@ 0x40c
 80005dc:	f7ff ffaa 	bl	8000534 <Read_Flash_Block>
        Transmit_Data_UART4_Block(buffer, block_size);
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	f8d7 1404 	ldr.w	r1, [r7, #1028]	@ 0x404
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffc4 	bl	8000574 <Transmit_Data_UART4_Block>
        printf("Transmitted block starting at address: 0x%08lX, block size: %lu, remaining: %lu\n", address, block_size, remaining);
 80005ec:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80005f0:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 80005f4:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <Transmit_Flash_Image+0xac>)
 80005fa:	f002 fc15 	bl	8002e28 <iprintf>
        address += block_size;
 80005fe:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8000602:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000606:	4413      	add	r3, r2
 8000608:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
        remaining -= block_size;
 800060c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 8000610:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
        HAL_GPIO_TogglePin(GPIOC, LED_Pin);
 800061a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <Transmit_Flash_Image+0xb0>)
 8000620:	f000 ffbe 	bl	80015a0 <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8000624:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000628:	f000 fbaa 	bl	8000d80 <HAL_Delay>
    while (remaining > 0) {
 800062c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1c4      	bne.n	80005be <Transmit_Flash_Image+0x22>
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	08020000 	.word	0x08020000
 8000644:	40011400 	.word	0x40011400
 8000648:	08003b30 	.word	0x08003b30
 800064c:	40011000 	.word	0x40011000

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fb32 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f80a 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f8c8 	bl	80007f0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000660:	f000 f872 	bl	8000748 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000664:	f000 f89a 	bl	800079c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Transmit_Flash_Image();
 8000668:	f7ff ff98 	bl	800059c <Transmit_Flash_Image>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x1c>

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	@ 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2238      	movs	r2, #56	@ 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fc27 	bl	8002ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800069c:	2304      	movs	r3, #4
 800069e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006c4:	2340      	movs	r3, #64	@ 0x40
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 ff81 	bl	80015d4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006d8:	f000 f906 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fa82 	bl	8001c00 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000702:	f000 f8f1 	bl	80008e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 8000706:	2200      	movs	r2, #0
 8000708:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 800070c:	2000      	movs	r0, #0
 800070e:	f001 fb61 	bl	8001dd4 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <SystemClock_Config+0xd0>)
 8000714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000716:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800071a:	4a09      	ldr	r2, [pc, #36]	@ (8000740 <SystemClock_Config+0xd0>)
 800071c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000720:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <SystemClock_Config+0xd0>)
 8000724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000726:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800072a:	4a05      	ldr	r2, [pc, #20]	@ (8000740 <SystemClock_Config+0xd0>)
 800072c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000730:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000732:	4b04      	ldr	r3, [pc, #16]	@ (8000744 <SystemClock_Config+0xd4>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	42420070 	.word	0x42420070

08000748 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_UART4_Init+0x4c>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <MX_UART4_Init+0x50>)
 8000750:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_UART4_Init+0x4c>)
 8000754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000758:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_UART4_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_UART4_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_UART4_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_UART4_Init+0x4c>)
 800076e:	220c      	movs	r2, #12
 8000770:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_UART4_Init+0x4c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_UART4_Init+0x4c>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_UART4_Init+0x4c>)
 8000780:	f001 fc6c 	bl	800205c <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800078a:	f000 f8ad 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000084 	.word	0x20000084
 8000798:	40004c00 	.word	0x40004c00

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_USART1_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f001 fc42 	bl	800205c <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f883 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000cc 	.word	0x200000cc
 80007ec:	40013800 	.word	0x40013800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000804:	4b34      	ldr	r3, [pc, #208]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a33      	ldr	r2, [pc, #204]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f003 0310 	and.w	r3, r3, #16
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b2e      	ldr	r3, [pc, #184]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b2b      	ldr	r3, [pc, #172]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000834:	4b28      	ldr	r3, [pc, #160]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a27      	ldr	r2, [pc, #156]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b25      	ldr	r3, [pc, #148]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	4b22      	ldr	r3, [pc, #136]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a21      	ldr	r2, [pc, #132]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 8000852:	f043 0308 	orr.w	r3, r3, #8
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b1f      	ldr	r3, [pc, #124]	@ (80008d8 <MX_GPIO_Init+0xe8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0308 	and.w	r3, r3, #8
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086a:	481c      	ldr	r0, [pc, #112]	@ (80008dc <MX_GPIO_Init+0xec>)
 800086c:	f000 fe80 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_EN_GPIO_Port, UART_EN_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2102      	movs	r1, #2
 8000874:	481a      	ldr	r0, [pc, #104]	@ (80008e0 <MX_GPIO_Init+0xf0>)
 8000876:	f000 fe7b 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2302      	movs	r3, #2
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	4812      	ldr	r0, [pc, #72]	@ (80008dc <MX_GPIO_Init+0xec>)
 8000894:	f000 fce8 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <MX_GPIO_Init+0xf4>)
 80008ae:	f000 fcdb 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_EN_Pin */
  GPIO_InitStruct.Pin = UART_EN_Pin;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2302      	movs	r3, #2
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UART_EN_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_GPIO_Init+0xf0>)
 80008ca:	f000 fccd 	bl	8001268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40011000 	.word	0x40011000
 80008e0:	40011400 	.word	0x40011400
 80008e4:	40010800 	.word	0x40010800

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <HAL_MspInit+0x5c>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a14      	ldr	r2, [pc, #80]	@ (8000950 <HAL_MspInit+0x5c>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <HAL_MspInit+0x5c>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <HAL_MspInit+0x5c>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a0e      	ldr	r2, [pc, #56]	@ (8000950 <HAL_MspInit+0x5c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <HAL_MspInit+0x5c>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_MspInit+0x60>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <HAL_MspInit+0x60>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	@ 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a46      	ldr	r2, [pc, #280]	@ (8000a8c <HAL_UART_MspInit+0x134>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d13a      	bne.n	80009ee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000978:	4b45      	ldr	r3, [pc, #276]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a44      	ldr	r2, [pc, #272]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 800097e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b42      	ldr	r3, [pc, #264]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	4b3f      	ldr	r3, [pc, #252]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a3e      	ldr	r2, [pc, #248]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4835      	ldr	r0, [pc, #212]	@ (8000a94 <HAL_UART_MspInit+0x13c>)
 80009be:	f000 fc53 	bl	8001268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	482f      	ldr	r0, [pc, #188]	@ (8000a94 <HAL_UART_MspInit+0x13c>)
 80009d8:	f000 fc46 	bl	8001268 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2100      	movs	r1, #0
 80009e0:	2034      	movs	r0, #52	@ 0x34
 80009e2:	f000 fac8 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009e6:	2034      	movs	r0, #52	@ 0x34
 80009e8:	f000 fae1 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ec:	e04a      	b.n	8000a84 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a29      	ldr	r2, [pc, #164]	@ (8000a98 <HAL_UART_MspInit+0x140>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d145      	bne.n	8000a84 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART1_CLK_ENABLE();
 80009f8:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a24      	ldr	r2, [pc, #144]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a1e      	ldr	r2, [pc, #120]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_UART_MspInit+0x138>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a28:	2340      	movs	r3, #64	@ 0x40
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4818      	ldr	r0, [pc, #96]	@ (8000a9c <HAL_UART_MspInit+0x144>)
 8000a3c:	f000 fc14 	bl	8001268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a40:	2380      	movs	r3, #128	@ 0x80
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <HAL_UART_MspInit+0x144>)
 8000a54:	f000 fc08 	bl	8001268 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000a58:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_UART_MspInit+0x148>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a60:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa0 <HAL_UART_MspInit+0x148>)
 8000a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a72:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	2025      	movs	r0, #37	@ 0x25
 8000a7a:	f000 fa7c 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a7e:	2025      	movs	r0, #37	@ 0x25
 8000a80:	f000 fa95 	bl	8000fae <HAL_NVIC_EnableIRQ>
}
 8000a84:	bf00      	nop
 8000a86:	3730      	adds	r7, #48	@ 0x30
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40004c00 	.word	0x40004c00
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40010c00 	.word	0x40010c00
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <MemManage_Handler+0x4>

08000abc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f928 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b00:	4802      	ldr	r0, [pc, #8]	@ (8000b0c <USART1_IRQHandler+0x10>)
 8000b02:	f001 fb7f 	bl	8002204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <UART4_IRQHandler+0x10>)
 8000b16:	f001 fb75 	bl	8002204 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000084 	.word	0x20000084

08000b24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fcc9 	bl	8000510 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbc:	605a      	str	r2, [r3, #4]
  return 0;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <_isatty>:

int _isatty(int file)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
	...

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	@ (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 f9a2 	bl	8002f70 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	@ (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20010000 	.word	0x20010000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	20000114 	.word	0x20000114
 8000c60:	20000268 	.word	0x20000268

08000c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff fff8 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c76:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c78:	4a0c      	ldr	r2, [pc, #48]	@ (8000cac <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c8c:	4c09      	ldr	r4, [pc, #36]	@ (8000cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f002 f96f 	bl	8002f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9e:	f7ff fcd7 	bl	8000650 <main>
  bx lr
 8000ca2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cac:	08003c00 	.word	0x08003c00
  ldr r2, =_sbss
 8000cb0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb4:	20000268 	.word	0x20000268

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc0:	4b08      	ldr	r3, [pc, #32]	@ (8000ce4 <HAL_Init+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <HAL_Init+0x28>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ccc:	2003      	movs	r0, #3
 8000cce:	f000 f947 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f000 f808 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd8:	f7ff fe0c 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40022000 	.word	0x40022000

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f95f 	bl	8000fca <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f927 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_IncTick+0x1c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a03      	ldr	r2, [pc, #12]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000118 	.word	0x20000118

08000d6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b02      	ldr	r3, [pc, #8]	@ (8000d7c <HAL_GetTick+0x10>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	20000118 	.word	0x20000118

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff fff0 	bl	8000d6c <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <HAL_Delay+0x44>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffe0 	bl	8000d6c <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
  {
  }
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4906      	ldr	r1, [pc, #24]	@ (8000e60 <__NVIC_EnableIRQ+0x34>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	@ (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	@ (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	@ 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff90 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff2d 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff42 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff35 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b085      	sub	sp, #20
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d008      	beq.n	800100c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e020      	b.n	800104e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 020e 	bic.w	r2, r2, #14
 800101a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001034:	2101      	movs	r1, #1
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2201      	movs	r2, #1
 8001040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d005      	beq.n	800107c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2204      	movs	r2, #4
 8001074:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e0d6      	b.n	800122a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 020e 	bic.w	r2, r2, #14
 800108a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b64      	ldr	r3, [pc, #400]	@ (8001234 <HAL_DMA_Abort_IT+0x1dc>)
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d958      	bls.n	800115a <HAL_DMA_Abort_IT+0x102>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a62      	ldr	r2, [pc, #392]	@ (8001238 <HAL_DMA_Abort_IT+0x1e0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d04f      	beq.n	8001152 <HAL_DMA_Abort_IT+0xfa>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a61      	ldr	r2, [pc, #388]	@ (800123c <HAL_DMA_Abort_IT+0x1e4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d048      	beq.n	800114e <HAL_DMA_Abort_IT+0xf6>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a5f      	ldr	r2, [pc, #380]	@ (8001240 <HAL_DMA_Abort_IT+0x1e8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d040      	beq.n	8001148 <HAL_DMA_Abort_IT+0xf0>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a5e      	ldr	r2, [pc, #376]	@ (8001244 <HAL_DMA_Abort_IT+0x1ec>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d038      	beq.n	8001142 <HAL_DMA_Abort_IT+0xea>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001248 <HAL_DMA_Abort_IT+0x1f0>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d030      	beq.n	800113c <HAL_DMA_Abort_IT+0xe4>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a5b      	ldr	r2, [pc, #364]	@ (800124c <HAL_DMA_Abort_IT+0x1f4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d028      	beq.n	8001136 <HAL_DMA_Abort_IT+0xde>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a52      	ldr	r2, [pc, #328]	@ (8001234 <HAL_DMA_Abort_IT+0x1dc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d020      	beq.n	8001130 <HAL_DMA_Abort_IT+0xd8>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a57      	ldr	r2, [pc, #348]	@ (8001250 <HAL_DMA_Abort_IT+0x1f8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d019      	beq.n	800112c <HAL_DMA_Abort_IT+0xd4>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a55      	ldr	r2, [pc, #340]	@ (8001254 <HAL_DMA_Abort_IT+0x1fc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d012      	beq.n	8001128 <HAL_DMA_Abort_IT+0xd0>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a54      	ldr	r2, [pc, #336]	@ (8001258 <HAL_DMA_Abort_IT+0x200>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d00a      	beq.n	8001122 <HAL_DMA_Abort_IT+0xca>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a52      	ldr	r2, [pc, #328]	@ (800125c <HAL_DMA_Abort_IT+0x204>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d102      	bne.n	800111c <HAL_DMA_Abort_IT+0xc4>
 8001116:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111a:	e01b      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 800111c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001120:	e018      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001126:	e015      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001128:	2310      	movs	r3, #16
 800112a:	e013      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 800112c:	2301      	movs	r3, #1
 800112e:	e011      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001130:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001134:	e00e      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001136:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800113a:	e00b      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 800113c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001140:	e008      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001142:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001146:	e005      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114c:	e002      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 800114e:	2310      	movs	r3, #16
 8001150:	e000      	b.n	8001154 <HAL_DMA_Abort_IT+0xfc>
 8001152:	2301      	movs	r3, #1
 8001154:	4a42      	ldr	r2, [pc, #264]	@ (8001260 <HAL_DMA_Abort_IT+0x208>)
 8001156:	6053      	str	r3, [r2, #4]
 8001158:	e057      	b.n	800120a <HAL_DMA_Abort_IT+0x1b2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a36      	ldr	r2, [pc, #216]	@ (8001238 <HAL_DMA_Abort_IT+0x1e0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04f      	beq.n	8001204 <HAL_DMA_Abort_IT+0x1ac>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a34      	ldr	r2, [pc, #208]	@ (800123c <HAL_DMA_Abort_IT+0x1e4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d048      	beq.n	8001200 <HAL_DMA_Abort_IT+0x1a8>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a33      	ldr	r2, [pc, #204]	@ (8001240 <HAL_DMA_Abort_IT+0x1e8>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d040      	beq.n	80011fa <HAL_DMA_Abort_IT+0x1a2>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a31      	ldr	r2, [pc, #196]	@ (8001244 <HAL_DMA_Abort_IT+0x1ec>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d038      	beq.n	80011f4 <HAL_DMA_Abort_IT+0x19c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a30      	ldr	r2, [pc, #192]	@ (8001248 <HAL_DMA_Abort_IT+0x1f0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d030      	beq.n	80011ee <HAL_DMA_Abort_IT+0x196>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2e      	ldr	r2, [pc, #184]	@ (800124c <HAL_DMA_Abort_IT+0x1f4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d028      	beq.n	80011e8 <HAL_DMA_Abort_IT+0x190>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <HAL_DMA_Abort_IT+0x1dc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d020      	beq.n	80011e2 <HAL_DMA_Abort_IT+0x18a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a2a      	ldr	r2, [pc, #168]	@ (8001250 <HAL_DMA_Abort_IT+0x1f8>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_DMA_Abort_IT+0x186>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a29      	ldr	r2, [pc, #164]	@ (8001254 <HAL_DMA_Abort_IT+0x1fc>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d012      	beq.n	80011da <HAL_DMA_Abort_IT+0x182>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a27      	ldr	r2, [pc, #156]	@ (8001258 <HAL_DMA_Abort_IT+0x200>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00a      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x17c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a26      	ldr	r2, [pc, #152]	@ (800125c <HAL_DMA_Abort_IT+0x204>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d102      	bne.n	80011ce <HAL_DMA_Abort_IT+0x176>
 80011c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011cc:	e01b      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d2:	e018      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d8:	e015      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011da:	2310      	movs	r3, #16
 80011dc:	e013      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011de:	2301      	movs	r3, #1
 80011e0:	e011      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011e6:	e00e      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011ec:	e00b      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f2:	e008      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f8:	e005      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 80011fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fe:	e002      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 8001200:	2310      	movs	r3, #16
 8001202:	e000      	b.n	8001206 <HAL_DMA_Abort_IT+0x1ae>
 8001204:	2301      	movs	r3, #1
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <HAL_DMA_Abort_IT+0x20c>)
 8001208:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	4798      	blx	r3
    } 
  }
  return status;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020080 	.word	0x40020080
 8001238:	40020008 	.word	0x40020008
 800123c:	4002001c 	.word	0x4002001c
 8001240:	40020030 	.word	0x40020030
 8001244:	40020044 	.word	0x40020044
 8001248:	40020058 	.word	0x40020058
 800124c:	4002006c 	.word	0x4002006c
 8001250:	40020408 	.word	0x40020408
 8001254:	4002041c 	.word	0x4002041c
 8001258:	40020430 	.word	0x40020430
 800125c:	40020444 	.word	0x40020444
 8001260:	40020400 	.word	0x40020400
 8001264:	40020000 	.word	0x40020000

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b08b      	sub	sp, #44	@ 0x2c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e169      	b.n	8001550 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800127c:	2201      	movs	r2, #1
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	69fa      	ldr	r2, [r7, #28]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	429a      	cmp	r2, r3
 8001296:	f040 8158 	bne.w	800154a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a9a      	ldr	r2, [pc, #616]	@ (8001508 <HAL_GPIO_Init+0x2a0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d05e      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012a4:	4a98      	ldr	r2, [pc, #608]	@ (8001508 <HAL_GPIO_Init+0x2a0>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d875      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012aa:	4a98      	ldr	r2, [pc, #608]	@ (800150c <HAL_GPIO_Init+0x2a4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d058      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012b0:	4a96      	ldr	r2, [pc, #600]	@ (800150c <HAL_GPIO_Init+0x2a4>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d86f      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012b6:	4a96      	ldr	r2, [pc, #600]	@ (8001510 <HAL_GPIO_Init+0x2a8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d052      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012bc:	4a94      	ldr	r2, [pc, #592]	@ (8001510 <HAL_GPIO_Init+0x2a8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d869      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012c2:	4a94      	ldr	r2, [pc, #592]	@ (8001514 <HAL_GPIO_Init+0x2ac>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d04c      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012c8:	4a92      	ldr	r2, [pc, #584]	@ (8001514 <HAL_GPIO_Init+0x2ac>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d863      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012ce:	4a92      	ldr	r2, [pc, #584]	@ (8001518 <HAL_GPIO_Init+0x2b0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d046      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
 80012d4:	4a90      	ldr	r2, [pc, #576]	@ (8001518 <HAL_GPIO_Init+0x2b0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d85d      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d82a      	bhi.n	8001334 <HAL_GPIO_Init+0xcc>
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d859      	bhi.n	8001396 <HAL_GPIO_Init+0x12e>
 80012e2:	a201      	add	r2, pc, #4	@ (adr r2, 80012e8 <HAL_GPIO_Init+0x80>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001363 	.word	0x08001363
 80012ec:	0800133d 	.word	0x0800133d
 80012f0:	0800134f 	.word	0x0800134f
 80012f4:	08001391 	.word	0x08001391
 80012f8:	08001397 	.word	0x08001397
 80012fc:	08001397 	.word	0x08001397
 8001300:	08001397 	.word	0x08001397
 8001304:	08001397 	.word	0x08001397
 8001308:	08001397 	.word	0x08001397
 800130c:	08001397 	.word	0x08001397
 8001310:	08001397 	.word	0x08001397
 8001314:	08001397 	.word	0x08001397
 8001318:	08001397 	.word	0x08001397
 800131c:	08001397 	.word	0x08001397
 8001320:	08001397 	.word	0x08001397
 8001324:	08001397 	.word	0x08001397
 8001328:	08001397 	.word	0x08001397
 800132c:	08001345 	.word	0x08001345
 8001330:	08001359 	.word	0x08001359
 8001334:	4a79      	ldr	r2, [pc, #484]	@ (800151c <HAL_GPIO_Init+0x2b4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800133a:	e02c      	b.n	8001396 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e029      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	3304      	adds	r3, #4
 800134a:	623b      	str	r3, [r7, #32]
          break;
 800134c:	e024      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	3308      	adds	r3, #8
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e01f      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	330c      	adds	r3, #12
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	e01a      	b.n	8001398 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800136a:	2304      	movs	r3, #4
 800136c:	623b      	str	r3, [r7, #32]
          break;
 800136e:	e013      	b.n	8001398 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d105      	bne.n	8001384 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	611a      	str	r2, [r3, #16]
          break;
 8001382:	e009      	b.n	8001398 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001384:	2308      	movs	r3, #8
 8001386:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	615a      	str	r2, [r3, #20]
          break;
 800138e:	e003      	b.n	8001398 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
          break;
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x130>
          break;
 8001396:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	2bff      	cmp	r3, #255	@ 0xff
 800139c:	d801      	bhi.n	80013a2 <HAL_GPIO_Init+0x13a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	e001      	b.n	80013a6 <HAL_GPIO_Init+0x13e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3304      	adds	r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	@ 0xff
 80013ac:	d802      	bhi.n	80013b4 <HAL_GPIO_Init+0x14c>
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	e002      	b.n	80013ba <HAL_GPIO_Init+0x152>
 80013b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b6:	3b08      	subs	r3, #8
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	210f      	movs	r1, #15
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	401a      	ands	r2, r3
 80013cc:	6a39      	ldr	r1, [r7, #32]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	fa01 f303 	lsl.w	r3, r1, r3
 80013d4:	431a      	orrs	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80b1 	beq.w	800154a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001520 <HAL_GPIO_Init+0x2b8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001520 <HAL_GPIO_Init+0x2b8>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001520 <HAL_GPIO_Init+0x2b8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001400:	4a48      	ldr	r2, [pc, #288]	@ (8001524 <HAL_GPIO_Init+0x2bc>)
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a40      	ldr	r2, [pc, #256]	@ (8001528 <HAL_GPIO_Init+0x2c0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d013      	beq.n	8001454 <HAL_GPIO_Init+0x1ec>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a3f      	ldr	r2, [pc, #252]	@ (800152c <HAL_GPIO_Init+0x2c4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d00d      	beq.n	8001450 <HAL_GPIO_Init+0x1e8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3e      	ldr	r2, [pc, #248]	@ (8001530 <HAL_GPIO_Init+0x2c8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d007      	beq.n	800144c <HAL_GPIO_Init+0x1e4>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3d      	ldr	r2, [pc, #244]	@ (8001534 <HAL_GPIO_Init+0x2cc>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_GPIO_Init+0x1e0>
 8001444:	2303      	movs	r3, #3
 8001446:	e006      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001448:	2304      	movs	r3, #4
 800144a:	e004      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 800144c:	2302      	movs	r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <HAL_GPIO_Init+0x1ee>
 8001454:	2300      	movs	r3, #0
 8001456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001458:	f002 0203 	and.w	r2, r2, #3
 800145c:	0092      	lsls	r2, r2, #2
 800145e:	4093      	lsls	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001466:	492f      	ldr	r1, [pc, #188]	@ (8001524 <HAL_GPIO_Init+0x2bc>)
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d006      	beq.n	800148e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001480:	4b2d      	ldr	r3, [pc, #180]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	492c      	ldr	r1, [pc, #176]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	4313      	orrs	r3, r2
 800148a:	608b      	str	r3, [r1, #8]
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800148e:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	43db      	mvns	r3, r3
 8001496:	4928      	ldr	r1, [pc, #160]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 8001498:	4013      	ands	r3, r2
 800149a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014a8:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	4922      	ldr	r1, [pc, #136]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	60cb      	str	r3, [r1, #12]
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	43db      	mvns	r3, r3
 80014be:	491e      	ldr	r1, [pc, #120]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014c0:	4013      	ands	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d006      	beq.n	80014de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	4918      	ldr	r1, [pc, #96]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
 80014dc:	e006      	b.n	80014ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014de:	4b16      	ldr	r3, [pc, #88]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4914      	ldr	r1, [pc, #80]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014e8:	4013      	ands	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d021      	beq.n	800153c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	490e      	ldr	r1, [pc, #56]	@ (8001538 <HAL_GPIO_Init+0x2d0>)
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e021      	b.n	800154a <HAL_GPIO_Init+0x2e2>
 8001506:	bf00      	nop
 8001508:	10320000 	.word	0x10320000
 800150c:	10310000 	.word	0x10310000
 8001510:	10220000 	.word	0x10220000
 8001514:	10210000 	.word	0x10210000
 8001518:	10120000 	.word	0x10120000
 800151c:	10110000 	.word	0x10110000
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000
 8001528:	40010800 	.word	0x40010800
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40011000 	.word	0x40011000
 8001534:	40011400 	.word	0x40011400
 8001538:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800153c:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <HAL_GPIO_Init+0x304>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	43db      	mvns	r3, r3
 8001544:	4909      	ldr	r1, [pc, #36]	@ (800156c <HAL_GPIO_Init+0x304>)
 8001546:	4013      	ands	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	3301      	adds	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	fa22 f303 	lsr.w	r3, r2, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	f47f ae8e 	bne.w	800127c <HAL_GPIO_Init+0x14>
  }
}
 8001560:	bf00      	nop
 8001562:	bf00      	nop
 8001564:	372c      	adds	r7, #44	@ 0x2c
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	611a      	str	r2, [r3, #16]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4013      	ands	r3, r2
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43d9      	mvns	r1, r3
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	400b      	ands	r3, r1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	611a      	str	r2, [r3, #16]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e304      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8087 	beq.w	8001702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f4:	4b92      	ldr	r3, [pc, #584]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d00c      	beq.n	800161a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001600:	4b8f      	ldr	r3, [pc, #572]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d112      	bne.n	8001632 <HAL_RCC_OscConfig+0x5e>
 800160c:	4b8c      	ldr	r3, [pc, #560]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001618:	d10b      	bne.n	8001632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d06c      	beq.n	8001700 <HAL_RCC_OscConfig+0x12c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d168      	bne.n	8001700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e2de      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x76>
 800163c:	4b80      	ldr	r3, [pc, #512]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a7f      	ldr	r2, [pc, #508]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e02e      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b7b      	ldr	r3, [pc, #492]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7a      	ldr	r2, [pc, #488]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b78      	ldr	r3, [pc, #480]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a77      	ldr	r2, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0xbc>
 8001676:	4b72      	ldr	r3, [pc, #456]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a71      	ldr	r2, [pc, #452]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6f      	ldr	r3, [pc, #444]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6e      	ldr	r2, [pc, #440]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 8001690:	4b6b      	ldr	r3, [pc, #428]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a67      	ldr	r2, [pc, #412]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb5c 	bl	8000d6c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb58 	bl	8000d6c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e292      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe4>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fb48 	bl	8000d6c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fb44 	bl	8000d6c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e27e      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x10c>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x18c>
 8001726:	4b46      	ldr	r3, [pc, #280]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x176>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e252      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4939      	ldr	r1, [pc, #228]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <HAL_RCC_OscConfig+0x270>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fafd 	bl	8000d6c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff faf9 	bl	8000d6c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e233      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4927      	ldr	r1, [pc, #156]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <HAL_RCC_OscConfig+0x270>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fadc 	bl	8000d6c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fad8 	bl	8000d6c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e212      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d03a      	beq.n	8001858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d019      	beq.n	800181e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fabc 	bl	8000d6c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fab8 	bl	8000d6c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1f2      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f000 fc02 	bl	8002020 <RCC_Delay>
 800181c:	e01c      	b.n	8001858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff faa2 	bl	8000d6c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182a:	e00f      	b.n	800184c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fa9e 	bl	8000d6c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d908      	bls.n	800184c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e1d8      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	42420000 	.word	0x42420000
 8001848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b9b      	ldr	r3, [pc, #620]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e9      	bne.n	800182c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a6 	beq.w	80019b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b94      	ldr	r3, [pc, #592]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b91      	ldr	r3, [pc, #580]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a90      	ldr	r2, [pc, #576]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b8e      	ldr	r3, [pc, #568]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188e:	2301      	movs	r3, #1
 8001890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b8b      	ldr	r3, [pc, #556]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d118      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189e:	4b88      	ldr	r3, [pc, #544]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a87      	ldr	r2, [pc, #540]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa5f 	bl	8000d6c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff fa5b 	bl	8000d6c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	@ 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e195      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ac0 <HAL_RCC_OscConfig+0x4ec>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x312>
 80018d8:	4b78      	ldr	r3, [pc, #480]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a77      	ldr	r2, [pc, #476]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e02d      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x334>
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a72      	ldr	r2, [pc, #456]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b70      	ldr	r3, [pc, #448]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a6f      	ldr	r2, [pc, #444]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	e01c      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x356>
 8001910:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a69      	ldr	r2, [pc, #420]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	4b67      	ldr	r3, [pc, #412]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a66      	ldr	r2, [pc, #408]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e00b      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 800192a:	4b64      	ldr	r3, [pc, #400]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a63      	ldr	r2, [pc, #396]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b61      	ldr	r3, [pc, #388]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a60      	ldr	r2, [pc, #384]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d015      	beq.n	8001976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fa0f 	bl	8000d6c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fa0b 	bl	8000d6c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e143      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001968:	4b54      	ldr	r3, [pc, #336]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ee      	beq.n	8001952 <HAL_RCC_OscConfig+0x37e>
 8001974:	e014      	b.n	80019a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7ff f9f9 	bl	8000d6c <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff f9f5 	bl	8000d6c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e12d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a6:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a44      	ldr	r2, [pc, #272]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 808c 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80019bc:	4b3f      	ldr	r3, [pc, #252]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c8:	d10e      	bne.n	80019e8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80019ca:	4b3c      	ldr	r3, [pc, #240]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80019d6:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e103      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d14e      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80019f0:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80019fc:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 80019fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d001      	beq.n	8001a10 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0ef      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001a10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <HAL_RCC_OscConfig+0x4f0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff f9a9 	bl	8000d6c <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001a1e:	f7ff f9a5 	bl	8000d6c <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b64      	cmp	r3, #100	@ 0x64
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0df      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a48:	491c      	ldr	r1, [pc, #112]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a52:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4918      	ldr	r1, [pc, #96]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_RCC_OscConfig+0x4f0>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7ff f981 	bl	8000d6c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001a6e:	f7ff f97d 	bl	8000d6c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b64      	cmp	r3, #100	@ 0x64
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e0b7      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x49a>
 8001a8c:	e022      	b.n	8001ad4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_RCC_OscConfig+0x4e8>)
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_RCC_OscConfig+0x4f0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f964 	bl	8000d6c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001aa6:	e00f      	b.n	8001ac8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001aa8:	f7ff f960 	bl	8000d6c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d908      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e09a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
 8001aba:	bf00      	nop
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1e9      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8088 	beq.w	8001bee <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ade:	4b46      	ldr	r3, [pc, #280]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d068      	beq.n	8001bbc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a1b      	ldr	r3, [r3, #32]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d14d      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af2:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <HAL_RCC_OscConfig+0x628>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f938 	bl	8000d6c <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff f934 	bl	8000d6c <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e06e      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	4b39      	ldr	r3, [pc, #228]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b26:	d10f      	bne.n	8001b48 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001b28:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4931      	ldr	r1, [pc, #196]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b36:	4b30      	ldr	r3, [pc, #192]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b3a:	f023 020f 	bic.w	r2, r3, #15
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	492d      	ldr	r1, [pc, #180]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b48:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	4927      	ldr	r1, [pc, #156]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <HAL_RCC_OscConfig+0x628>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff f901 	bl	8000d6c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff f8fd 	bl	8000d6c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e037      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x59a>
 8001b8c:	e02f      	b.n	8001bee <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x628>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f8ea 	bl	8000d6c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff f8e6 	bl	8000d6c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e020      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bae:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x5c8>
 8001bba:	e018      	b.n	8001bee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e013      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	42420060 	.word	0x42420060

08001c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0d0      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d910      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c22:	4b67      	ldr	r3, [pc, #412]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 0207 	bic.w	r2, r3, #7
 8001c2a:	4965      	ldr	r1, [pc, #404]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c32:	4b63      	ldr	r3, [pc, #396]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0b8      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d020      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c5c:	4b59      	ldr	r3, [pc, #356]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4a58      	ldr	r2, [pc, #352]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c74:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c80:	4b50      	ldr	r3, [pc, #320]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	494d      	ldr	r1, [pc, #308]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d115      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e07f      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbe:	4b41      	ldr	r3, [pc, #260]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e073      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06b      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cde:	4b39      	ldr	r3, [pc, #228]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f023 0203 	bic.w	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4936      	ldr	r1, [pc, #216]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f83c 	bl	8000d6c <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	e00a      	b.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f838 	bl	8000d6c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e053      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 020c 	and.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d1eb      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d20:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d210      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 0207 	bic.w	r2, r3, #7
 8001d36:	4922      	ldr	r1, [pc, #136]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e032      	b.n	8001db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4916      	ldr	r1, [pc, #88]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d009      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	490e      	ldr	r1, [pc, #56]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8e:	f000 f859 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001d92:	4602      	mov	r2, r0
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	490a      	ldr	r1, [pc, #40]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	5ccb      	ldrb	r3, [r1, r3]
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HAL_RCC_ClockConfig+0x1cc>)
 8001da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001daa:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe ff9a 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40022000 	.word	0x40022000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003b84 	.word	0x08003b84
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfe:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_RCC_MCOConfig+0x68>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_RCC_MCOConfig+0x68>)
 8001e06:	f043 0304 	orr.w	r3, r3, #4
 8001e0a:	6193      	str	r3, [r2, #24]
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_MCOConfig+0x68>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4808      	ldr	r0, [pc, #32]	@ (8001e40 <HAL_RCC_MCOConfig+0x6c>)
 8001e20:	f7ff fa22 	bl	8001268 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_RCC_MCOConfig+0x68>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001e2c:	4903      	ldr	r1, [pc, #12]	@ (8001e3c <HAL_RCC_MCOConfig+0x68>)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	@ 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010800 	.word	0x40010800

08001e44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b08e      	sub	sp, #56	@ 0x38
 8001e4a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e54:	2300      	movs	r3, #0
 8001e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e68:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d002      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d003      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e7c:	e089      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e80:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e82:	e089      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x168>)
 8001e8e:	5c9b      	ldrb	r3, [r3, r2]
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d072      	beq.n	8001f82 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001e9c:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea0:	f003 020f 	and.w	r2, r3, #15
 8001ea4:	4b42      	ldr	r3, [pc, #264]	@ (8001fb0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d053      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001ec4:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3302      	adds	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	469a      	mov	sl, r3
 8001ed8:	4693      	mov	fp, r2
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	2200      	movs	r2, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	617a      	str	r2, [r7, #20]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	fb03 f20b 	mul.w	r2, r3, fp
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fb0a f303 	mul.w	r3, sl, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	fbaa 0102 	umull	r0, r1, sl, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001efc:	fb03 f201 	mul.w	r2, r3, r1
 8001f00:	2300      	movs	r3, #0
 8001f02:	fb00 f303 	mul.w	r3, r0, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f0a:	fba0 4502 	umull	r4, r5, r0, r2
 8001f0e:	442b      	add	r3, r5
 8001f10:	461d      	mov	r5, r3
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2200      	movs	r2, #0
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	60fa      	str	r2, [r7, #12]
 8001f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f26:	460b      	mov	r3, r1
 8001f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	fb02 f203 	mul.w	r2, r2, r3
 8001f32:	465b      	mov	r3, fp
 8001f34:	4684      	mov	ip, r0
 8001f36:	fb0c f303 	mul.w	r3, ip, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4651      	mov	r1, sl
 8001f40:	fba2 8901 	umull	r8, r9, r2, r1
 8001f44:	444b      	add	r3, r9
 8001f46:	4699      	mov	r9, r3
 8001f48:	4642      	mov	r2, r8
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	4629      	mov	r1, r5
 8001f50:	f7fe f968 	bl	8000224 <__aeabi_uldivmod>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4613      	mov	r3, r2
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f5c:	e007      	b.n	8001f6e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f62:	fb03 f202 	mul.w	r2, r3, r2
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x168>)
 8001f70:	7b5b      	ldrb	r3, [r3, #13]
 8001f72:	461a      	mov	r2, r3
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7c:	085b      	lsrs	r3, r3, #1
 8001f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f80:	e004      	b.n	8001f8c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	4a0b      	ldr	r2, [pc, #44]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x170>)
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8001f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x174>)
 8001f94:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3738      	adds	r7, #56	@ 0x38
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	017d7840 	.word	0x017d7840
 8001fac:	08003b9c 	.word	0x08003b9c
 8001fb0:	08003bac 	.word	0x08003bac
 8001fb4:	003d0900 	.word	0x003d0900
 8001fb8:	007a1200 	.word	0x007a1200

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	@ (8001fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff2 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	@ (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4903      	ldr	r1, [pc, #12]	@ (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08003b94 	.word	0x08003b94

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	@ (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08003b94 	.word	0x08003b94

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	20000000 	.word	0x20000000
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e042      	b.n	80020f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fc68 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	@ 0x24
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800209e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fd71 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b20      	cmp	r3, #32
 800211a:	d16d      	bne.n	80021f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_UART_Transmit+0x2c>
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e066      	b.n	80021fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2221      	movs	r2, #33	@ 0x21
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800213a:	f7fe fe17 	bl	8000d6c <HAL_GetTick>
 800213e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	88fa      	ldrh	r2, [r7, #6]
 8002144:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002154:	d108      	bne.n	8002168 <HAL_UART_Transmit+0x6c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d104      	bne.n	8002168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e003      	b.n	8002170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002170:	e02a      	b.n	80021c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 faf9 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e036      	b.n	80021fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3302      	adds	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e007      	b.n	80021ba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1cf      	bne.n	8002172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2140      	movs	r1, #64	@ 0x40
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 fac9 	bl	8002774 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e006      	b.n	80021fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e000      	b.n	80021fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80021f8:	2302      	movs	r3, #2
  }
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3720      	adds	r7, #32
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b0ba      	sub	sp, #232	@ 0xe8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002242:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
 8002256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 fbd1 	bl	8002a0a <UART_Receive_IT>
      return;
 8002268:	e25b      	b.n	8002722 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800226a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80de 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
 8002274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002284:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80d1 	beq.w	8002430 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800228e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00b      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
 800229a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d005      	beq.n	80022b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00b      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
 80022be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
 80022e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
 8002306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f043 0208 	orr.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 81f2 	beq.w	8002718 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
 8002340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d002      	beq.n	8002352 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 fb5c 	bl	8002a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_UART_IRQHandler+0x17a>
 8002376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04f      	beq.n	800241e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fa66 	bl	8002850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d041      	beq.n	8002416 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3314      	adds	r3, #20
 8002398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	3314      	adds	r3, #20
 80023ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023ce:	e841 2300 	strex	r3, r2, [r1]
 80023d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1d9      	bne.n	8002392 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d013      	beq.n	800240e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ea:	4a7e      	ldr	r2, [pc, #504]	@ (80025e4 <HAL_UART_IRQHandler+0x3e0>)
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fe30 	bl	8001058 <HAL_DMA_Abort_IT>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002408:	4610      	mov	r0, r2
 800240a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	e00e      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f99c 	bl	800274c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002414:	e00a      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f998 	bl	800274c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	e006      	b.n	800242c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f994 	bl	800274c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800242a:	e175      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	bf00      	nop
    return;
 800242e:	e173      	b.n	8002718 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	2b01      	cmp	r3, #1
 8002436:	f040 814f 	bne.w	80026d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800243a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8148 	beq.w	80026d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8141 	beq.w	80026d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80b6 	beq.w	80025e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8145 	beq.w	800271c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800249a:	429a      	cmp	r2, r3
 800249c:	f080 813e 	bcs.w	800271c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f000 8088 	beq.w	80025c4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024c2:	e853 3f00 	ldrex	r3, [r3]
 80024c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80024e0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1d9      	bne.n	80024b4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002508:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800250a:	e853 3f00 	ldrex	r3, [r3]
 800250e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002510:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002524:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002528:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800252c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002530:	e841 2300 	strex	r3, r2, [r1]
 8002534:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1e1      	bne.n	8002500 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3314      	adds	r3, #20
 8002542:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002546:	e853 3f00 	ldrex	r3, [r3]
 800254a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800254c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800254e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002552:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002560:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002562:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002564:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002566:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002568:	e841 2300 	strex	r3, r2, [r1]
 800256c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800256e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e3      	bne.n	800253c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002594:	f023 0310 	bic.w	r3, r3, #16
 8002598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e3      	bne.n	8002582 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fd0f 	bl	8000fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8bf 	bl	800275e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025e0:	e09c      	b.n	800271c <HAL_UART_IRQHandler+0x518>
 80025e2:	bf00      	nop
 80025e4:	08002915 	.word	0x08002915
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 808e 	beq.w	8002720 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002604:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8089 	beq.w	8002720 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002624:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	330c      	adds	r3, #12
 800262e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002632:	647a      	str	r2, [r7, #68]	@ 0x44
 8002634:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e3      	bne.n	800260e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3314      	adds	r3, #20
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	623b      	str	r3, [r7, #32]
   return(result);
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3314      	adds	r3, #20
 8002666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800266a:	633a      	str	r2, [r7, #48]	@ 0x30
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002672:	e841 2300 	strex	r3, r2, [r1]
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1e3      	bne.n	8002646 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2220      	movs	r2, #32
 8002682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	330c      	adds	r3, #12
 8002692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	e853 3f00 	ldrex	r3, [r3]
 800269a:	60fb      	str	r3, [r7, #12]
   return(result);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0310 	bic.w	r3, r3, #16
 80026a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80026b0:	61fa      	str	r2, [r7, #28]
 80026b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b4:	69b9      	ldr	r1, [r7, #24]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	e841 2300 	strex	r3, r2, [r1]
 80026bc:	617b      	str	r3, [r7, #20]
   return(result);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e3      	bne.n	800268c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026ce:	4619      	mov	r1, r3
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f844 	bl	800275e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026d6:	e023      	b.n	8002720 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_UART_IRQHandler+0x4f4>
 80026e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f923 	bl	800293c <UART_Transmit_IT>
    return;
 80026f6:	e014      	b.n	8002722 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00e      	beq.n	8002722 <HAL_UART_IRQHandler+0x51e>
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f962 	bl	80029da <UART_EndTransmit_IT>
    return;
 8002716:	e004      	b.n	8002722 <HAL_UART_IRQHandler+0x51e>
    return;
 8002718:	bf00      	nop
 800271a:	e002      	b.n	8002722 <HAL_UART_IRQHandler+0x51e>
      return;
 800271c:	bf00      	nop
 800271e:	e000      	b.n	8002722 <HAL_UART_IRQHandler+0x51e>
      return;
 8002720:	bf00      	nop
  }
}
 8002722:	37e8      	adds	r7, #232	@ 0xe8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	460b      	mov	r3, r1
 8002768:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b090      	sub	sp, #64	@ 0x40
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002784:	e050      	b.n	8002828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d04c      	beq.n	8002828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800278e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002794:	f7fe faea 	bl	8000d6c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d241      	bcs.n	8002828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	330c      	adds	r3, #12
 80027aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	e853 3f00 	ldrex	r3, [r3]
 80027b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	330c      	adds	r3, #12
 80027c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027cc:	e841 2300 	strex	r3, r2, [r1]
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e5      	bne.n	80027a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	613b      	str	r3, [r7, #16]
   return(result);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	3314      	adds	r3, #20
 80027f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027f8:	623a      	str	r2, [r7, #32]
 80027fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	69f9      	ldr	r1, [r7, #28]
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	61bb      	str	r3, [r7, #24]
   return(result);
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e5      	bne.n	80027d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e00f      	b.n	8002848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	429a      	cmp	r2, r3
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d09f      	beq.n	8002786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3740      	adds	r7, #64	@ 0x40
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b095      	sub	sp, #84	@ 0x54
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002878:	643a      	str	r2, [r7, #64]	@ 0x40
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800287e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	61fb      	str	r3, [r7, #28]
   return(result);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	647b      	str	r3, [r7, #68]	@ 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028e8:	61ba      	str	r2, [r7, #24]
 80028ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	613b      	str	r3, [r7, #16]
   return(result);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e5      	bne.n	80028c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800290a:	bf00      	nop
 800290c:	3754      	adds	r7, #84	@ 0x54
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff ff0c 	bl	800274c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b21      	cmp	r3, #33	@ 0x21
 800294e:	d13e      	bne.n	80029ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002958:	d114      	bne.n	8002984 <UART_Transmit_IT+0x48>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d110      	bne.n	8002984 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002976:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	621a      	str	r2, [r3, #32]
 8002982:	e008      	b.n	8002996 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6211      	str	r1, [r2, #32]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4619      	mov	r1, r3
 80029a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fe94 	bl	8002728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b08c      	sub	sp, #48	@ 0x30
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b22      	cmp	r3, #34	@ 0x22
 8002a1c:	f040 80ae 	bne.w	8002b7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a28:	d117      	bne.n	8002a5a <UART_Receive_IT+0x50>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d113      	bne.n	8002a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a58:	e026      	b.n	8002aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d007      	beq.n	8002a7e <UART_Receive_IT+0x74>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <UART_Receive_IT+0x82>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e008      	b.n	8002a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d15d      	bne.n	8002b78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0220 	bic.w	r2, r2, #32
 8002aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d135      	bne.n	8002b6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	613b      	str	r3, [r7, #16]
   return(result);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f023 0310 	bic.w	r3, r3, #16
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	623a      	str	r2, [r7, #32]
 8002b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	69f9      	ldr	r1, [r7, #28]
 8002b2e:	6a3a      	ldr	r2, [r7, #32]
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e5      	bne.n	8002b08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d10a      	bne.n	8002b60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fdf9 	bl	800275e <HAL_UARTEx_RxEventCallback>
 8002b6c:	e002      	b.n	8002b74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fde3 	bl	800273a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e002      	b.n	8002b7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3730      	adds	r7, #48	@ 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002bc2:	f023 030c 	bic.w	r3, r3, #12
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <UART_SetConfig+0x114>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff fa02 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff f9ea 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a22      	ldr	r2, [pc, #136]	@ (8002ca0 <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	0119      	lsls	r1, r3, #4
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ca0 <UART_SetConfig+0x118>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	@ 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	@ 0x32
 8002c48:	4a15      	ldr	r2, [pc, #84]	@ (8002ca0 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c54:	4419      	add	r1, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <UART_SetConfig+0x118>)
 8002c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2064      	movs	r0, #100	@ 0x64
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	@ 0x32
 8002c80:	4a07      	ldr	r2, [pc, #28]	@ (8002ca0 <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	440a      	add	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <std>:
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	b510      	push	{r4, lr}
 8002ca8:	4604      	mov	r4, r0
 8002caa:	e9c0 3300 	strd	r3, r3, [r0]
 8002cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cb2:	6083      	str	r3, [r0, #8]
 8002cb4:	8181      	strh	r1, [r0, #12]
 8002cb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002cb8:	81c2      	strh	r2, [r0, #14]
 8002cba:	6183      	str	r3, [r0, #24]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	305c      	adds	r0, #92	@ 0x5c
 8002cc2:	f000 f906 	bl	8002ed2 <memset>
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <std+0x58>)
 8002cc8:	6224      	str	r4, [r4, #32]
 8002cca:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <std+0x5c>)
 8002cce:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <std+0x60>)
 8002cd2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <std+0x64>)
 8002cd6:	6323      	str	r3, [r4, #48]	@ 0x30
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <std+0x68>)
 8002cda:	429c      	cmp	r4, r3
 8002cdc:	d006      	beq.n	8002cec <std+0x48>
 8002cde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ce2:	4294      	cmp	r4, r2
 8002ce4:	d002      	beq.n	8002cec <std+0x48>
 8002ce6:	33d0      	adds	r3, #208	@ 0xd0
 8002ce8:	429c      	cmp	r4, r3
 8002cea:	d105      	bne.n	8002cf8 <std+0x54>
 8002cec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf4:	f000 b966 	b.w	8002fc4 <__retarget_lock_init_recursive>
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08002e4d 	.word	0x08002e4d
 8002d00:	08002e6f 	.word	0x08002e6f
 8002d04:	08002ea7 	.word	0x08002ea7
 8002d08:	08002ecb 	.word	0x08002ecb
 8002d0c:	2000011c 	.word	0x2000011c

08002d10 <stdio_exit_handler>:
 8002d10:	4a02      	ldr	r2, [pc, #8]	@ (8002d1c <stdio_exit_handler+0xc>)
 8002d12:	4903      	ldr	r1, [pc, #12]	@ (8002d20 <stdio_exit_handler+0x10>)
 8002d14:	4803      	ldr	r0, [pc, #12]	@ (8002d24 <stdio_exit_handler+0x14>)
 8002d16:	f000 b869 	b.w	8002dec <_fwalk_sglue>
 8002d1a:	bf00      	nop
 8002d1c:	2000000c 	.word	0x2000000c
 8002d20:	0800385d 	.word	0x0800385d
 8002d24:	2000001c 	.word	0x2000001c

08002d28 <cleanup_stdio>:
 8002d28:	6841      	ldr	r1, [r0, #4]
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <cleanup_stdio+0x34>)
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	4299      	cmp	r1, r3
 8002d30:	4604      	mov	r4, r0
 8002d32:	d001      	beq.n	8002d38 <cleanup_stdio+0x10>
 8002d34:	f000 fd92 	bl	800385c <_fflush_r>
 8002d38:	68a1      	ldr	r1, [r4, #8]
 8002d3a:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <cleanup_stdio+0x38>)
 8002d3c:	4299      	cmp	r1, r3
 8002d3e:	d002      	beq.n	8002d46 <cleanup_stdio+0x1e>
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 fd8b 	bl	800385c <_fflush_r>
 8002d46:	68e1      	ldr	r1, [r4, #12]
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <cleanup_stdio+0x3c>)
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	d004      	beq.n	8002d58 <cleanup_stdio+0x30>
 8002d4e:	4620      	mov	r0, r4
 8002d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d54:	f000 bd82 	b.w	800385c <_fflush_r>
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000011c 	.word	0x2000011c
 8002d60:	20000184 	.word	0x20000184
 8002d64:	200001ec 	.word	0x200001ec

08002d68 <global_stdio_init.part.0>:
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <global_stdio_init.part.0+0x30>)
 8002d6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002d9c <global_stdio_init.part.0+0x34>)
 8002d6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002da0 <global_stdio_init.part.0+0x38>)
 8002d70:	4620      	mov	r0, r4
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	2104      	movs	r1, #4
 8002d76:	2200      	movs	r2, #0
 8002d78:	f7ff ff94 	bl	8002ca4 <std>
 8002d7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d80:	2201      	movs	r2, #1
 8002d82:	2109      	movs	r1, #9
 8002d84:	f7ff ff8e 	bl	8002ca4 <std>
 8002d88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d92:	2112      	movs	r1, #18
 8002d94:	f7ff bf86 	b.w	8002ca4 <std>
 8002d98:	20000254 	.word	0x20000254
 8002d9c:	2000011c 	.word	0x2000011c
 8002da0:	08002d11 	.word	0x08002d11

08002da4 <__sfp_lock_acquire>:
 8002da4:	4801      	ldr	r0, [pc, #4]	@ (8002dac <__sfp_lock_acquire+0x8>)
 8002da6:	f000 b90e 	b.w	8002fc6 <__retarget_lock_acquire_recursive>
 8002daa:	bf00      	nop
 8002dac:	2000025d 	.word	0x2000025d

08002db0 <__sfp_lock_release>:
 8002db0:	4801      	ldr	r0, [pc, #4]	@ (8002db8 <__sfp_lock_release+0x8>)
 8002db2:	f000 b909 	b.w	8002fc8 <__retarget_lock_release_recursive>
 8002db6:	bf00      	nop
 8002db8:	2000025d 	.word	0x2000025d

08002dbc <__sinit>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	f7ff fff0 	bl	8002da4 <__sfp_lock_acquire>
 8002dc4:	6a23      	ldr	r3, [r4, #32]
 8002dc6:	b11b      	cbz	r3, 8002dd0 <__sinit+0x14>
 8002dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dcc:	f7ff bff0 	b.w	8002db0 <__sfp_lock_release>
 8002dd0:	4b04      	ldr	r3, [pc, #16]	@ (8002de4 <__sinit+0x28>)
 8002dd2:	6223      	str	r3, [r4, #32]
 8002dd4:	4b04      	ldr	r3, [pc, #16]	@ (8002de8 <__sinit+0x2c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f5      	bne.n	8002dc8 <__sinit+0xc>
 8002ddc:	f7ff ffc4 	bl	8002d68 <global_stdio_init.part.0>
 8002de0:	e7f2      	b.n	8002dc8 <__sinit+0xc>
 8002de2:	bf00      	nop
 8002de4:	08002d29 	.word	0x08002d29
 8002de8:	20000254 	.word	0x20000254

08002dec <_fwalk_sglue>:
 8002dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df0:	4607      	mov	r7, r0
 8002df2:	4688      	mov	r8, r1
 8002df4:	4614      	mov	r4, r2
 8002df6:	2600      	movs	r6, #0
 8002df8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002e00:	d505      	bpl.n	8002e0e <_fwalk_sglue+0x22>
 8002e02:	6824      	ldr	r4, [r4, #0]
 8002e04:	2c00      	cmp	r4, #0
 8002e06:	d1f7      	bne.n	8002df8 <_fwalk_sglue+0xc>
 8002e08:	4630      	mov	r0, r6
 8002e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e0e:	89ab      	ldrh	r3, [r5, #12]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d907      	bls.n	8002e24 <_fwalk_sglue+0x38>
 8002e14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	d003      	beq.n	8002e24 <_fwalk_sglue+0x38>
 8002e1c:	4629      	mov	r1, r5
 8002e1e:	4638      	mov	r0, r7
 8002e20:	47c0      	blx	r8
 8002e22:	4306      	orrs	r6, r0
 8002e24:	3568      	adds	r5, #104	@ 0x68
 8002e26:	e7e9      	b.n	8002dfc <_fwalk_sglue+0x10>

08002e28 <iprintf>:
 8002e28:	b40f      	push	{r0, r1, r2, r3}
 8002e2a:	b507      	push	{r0, r1, r2, lr}
 8002e2c:	4906      	ldr	r1, [pc, #24]	@ (8002e48 <iprintf+0x20>)
 8002e2e:	ab04      	add	r3, sp, #16
 8002e30:	6808      	ldr	r0, [r1, #0]
 8002e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e36:	6881      	ldr	r1, [r0, #8]
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	f000 f9e5 	bl	8003208 <_vfiprintf_r>
 8002e3e:	b003      	add	sp, #12
 8002e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e44:	b004      	add	sp, #16
 8002e46:	4770      	bx	lr
 8002e48:	20000018 	.word	0x20000018

08002e4c <__sread>:
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	460c      	mov	r4, r1
 8002e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e54:	f000 f868 	bl	8002f28 <_read_r>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	bfab      	itete	ge
 8002e5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002e60:	181b      	addge	r3, r3, r0
 8002e62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e66:	bfac      	ite	ge
 8002e68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e6a:	81a3      	strhlt	r3, [r4, #12]
 8002e6c:	bd10      	pop	{r4, pc}

08002e6e <__swrite>:
 8002e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e72:	461f      	mov	r7, r3
 8002e74:	898b      	ldrh	r3, [r1, #12]
 8002e76:	4605      	mov	r5, r0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	4616      	mov	r6, r2
 8002e7e:	d505      	bpl.n	8002e8c <__swrite+0x1e>
 8002e80:	2302      	movs	r3, #2
 8002e82:	2200      	movs	r2, #0
 8002e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e88:	f000 f83c 	bl	8002f04 <_lseek_r>
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	4632      	mov	r2, r6
 8002e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e94:	81a3      	strh	r3, [r4, #12]
 8002e96:	4628      	mov	r0, r5
 8002e98:	463b      	mov	r3, r7
 8002e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ea2:	f000 b853 	b.w	8002f4c <_write_r>

08002ea6 <__sseek>:
 8002ea6:	b510      	push	{r4, lr}
 8002ea8:	460c      	mov	r4, r1
 8002eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eae:	f000 f829 	bl	8002f04 <_lseek_r>
 8002eb2:	1c43      	adds	r3, r0, #1
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	bf15      	itete	ne
 8002eb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002eba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ec2:	81a3      	strheq	r3, [r4, #12]
 8002ec4:	bf18      	it	ne
 8002ec6:	81a3      	strhne	r3, [r4, #12]
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <__sclose>:
 8002eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ece:	f000 b809 	b.w	8002ee4 <_close_r>

08002ed2 <memset>:
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4402      	add	r2, r0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d100      	bne.n	8002edc <memset+0xa>
 8002eda:	4770      	bx	lr
 8002edc:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee0:	e7f9      	b.n	8002ed6 <memset+0x4>
	...

08002ee4 <_close_r>:
 8002ee4:	b538      	push	{r3, r4, r5, lr}
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	4d05      	ldr	r5, [pc, #20]	@ (8002f00 <_close_r+0x1c>)
 8002eea:	4604      	mov	r4, r0
 8002eec:	4608      	mov	r0, r1
 8002eee:	602b      	str	r3, [r5, #0]
 8002ef0:	f7fd fe51 	bl	8000b96 <_close>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d102      	bne.n	8002efe <_close_r+0x1a>
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	b103      	cbz	r3, 8002efe <_close_r+0x1a>
 8002efc:	6023      	str	r3, [r4, #0]
 8002efe:	bd38      	pop	{r3, r4, r5, pc}
 8002f00:	20000258 	.word	0x20000258

08002f04 <_lseek_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4604      	mov	r4, r0
 8002f08:	4608      	mov	r0, r1
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	4d05      	ldr	r5, [pc, #20]	@ (8002f24 <_lseek_r+0x20>)
 8002f10:	602a      	str	r2, [r5, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7fd fe63 	bl	8000bde <_lseek>
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	d102      	bne.n	8002f22 <_lseek_r+0x1e>
 8002f1c:	682b      	ldr	r3, [r5, #0]
 8002f1e:	b103      	cbz	r3, 8002f22 <_lseek_r+0x1e>
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
 8002f24:	20000258 	.word	0x20000258

08002f28 <_read_r>:
 8002f28:	b538      	push	{r3, r4, r5, lr}
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	2200      	movs	r2, #0
 8002f32:	4d05      	ldr	r5, [pc, #20]	@ (8002f48 <_read_r+0x20>)
 8002f34:	602a      	str	r2, [r5, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	f7fd fdf4 	bl	8000b24 <_read>
 8002f3c:	1c43      	adds	r3, r0, #1
 8002f3e:	d102      	bne.n	8002f46 <_read_r+0x1e>
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	b103      	cbz	r3, 8002f46 <_read_r+0x1e>
 8002f44:	6023      	str	r3, [r4, #0]
 8002f46:	bd38      	pop	{r3, r4, r5, pc}
 8002f48:	20000258 	.word	0x20000258

08002f4c <_write_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	4608      	mov	r0, r1
 8002f52:	4611      	mov	r1, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	4d05      	ldr	r5, [pc, #20]	@ (8002f6c <_write_r+0x20>)
 8002f58:	602a      	str	r2, [r5, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f7fd fdff 	bl	8000b5e <_write>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d102      	bne.n	8002f6a <_write_r+0x1e>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	b103      	cbz	r3, 8002f6a <_write_r+0x1e>
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	20000258 	.word	0x20000258

08002f70 <__errno>:
 8002f70:	4b01      	ldr	r3, [pc, #4]	@ (8002f78 <__errno+0x8>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	20000018 	.word	0x20000018

08002f7c <__libc_init_array>:
 8002f7c:	b570      	push	{r4, r5, r6, lr}
 8002f7e:	2600      	movs	r6, #0
 8002f80:	4d0c      	ldr	r5, [pc, #48]	@ (8002fb4 <__libc_init_array+0x38>)
 8002f82:	4c0d      	ldr	r4, [pc, #52]	@ (8002fb8 <__libc_init_array+0x3c>)
 8002f84:	1b64      	subs	r4, r4, r5
 8002f86:	10a4      	asrs	r4, r4, #2
 8002f88:	42a6      	cmp	r6, r4
 8002f8a:	d109      	bne.n	8002fa0 <__libc_init_array+0x24>
 8002f8c:	f000 fdc4 	bl	8003b18 <_init>
 8002f90:	2600      	movs	r6, #0
 8002f92:	4d0a      	ldr	r5, [pc, #40]	@ (8002fbc <__libc_init_array+0x40>)
 8002f94:	4c0a      	ldr	r4, [pc, #40]	@ (8002fc0 <__libc_init_array+0x44>)
 8002f96:	1b64      	subs	r4, r4, r5
 8002f98:	10a4      	asrs	r4, r4, #2
 8002f9a:	42a6      	cmp	r6, r4
 8002f9c:	d105      	bne.n	8002faa <__libc_init_array+0x2e>
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa4:	4798      	blx	r3
 8002fa6:	3601      	adds	r6, #1
 8002fa8:	e7ee      	b.n	8002f88 <__libc_init_array+0xc>
 8002faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fae:	4798      	blx	r3
 8002fb0:	3601      	adds	r6, #1
 8002fb2:	e7f2      	b.n	8002f9a <__libc_init_array+0x1e>
 8002fb4:	08003bf8 	.word	0x08003bf8
 8002fb8:	08003bf8 	.word	0x08003bf8
 8002fbc:	08003bf8 	.word	0x08003bf8
 8002fc0:	08003bfc 	.word	0x08003bfc

08002fc4 <__retarget_lock_init_recursive>:
 8002fc4:	4770      	bx	lr

08002fc6 <__retarget_lock_acquire_recursive>:
 8002fc6:	4770      	bx	lr

08002fc8 <__retarget_lock_release_recursive>:
 8002fc8:	4770      	bx	lr
	...

08002fcc <_free_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d040      	beq.n	8003056 <_free_r+0x8a>
 8002fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd8:	1f0c      	subs	r4, r1, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfb8      	it	lt
 8002fde:	18e4      	addlt	r4, r4, r3
 8002fe0:	f000 f8de 	bl	80031a0 <__malloc_lock>
 8002fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8003058 <_free_r+0x8c>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	b933      	cbnz	r3, 8002ff8 <_free_r+0x2c>
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6014      	str	r4, [r2, #0]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff4:	f000 b8da 	b.w	80031ac <__malloc_unlock>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d908      	bls.n	800300e <_free_r+0x42>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	1821      	adds	r1, r4, r0
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	e7ed      	b.n	8002fea <_free_r+0x1e>
 800300e:	461a      	mov	r2, r3
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b10b      	cbz	r3, 8003018 <_free_r+0x4c>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d9fa      	bls.n	800300e <_free_r+0x42>
 8003018:	6811      	ldr	r1, [r2, #0]
 800301a:	1850      	adds	r0, r2, r1
 800301c:	42a0      	cmp	r0, r4
 800301e:	d10b      	bne.n	8003038 <_free_r+0x6c>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	4401      	add	r1, r0
 8003024:	1850      	adds	r0, r2, r1
 8003026:	4283      	cmp	r3, r0
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	d1e0      	bne.n	8002fee <_free_r+0x22>
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4408      	add	r0, r1
 8003032:	6010      	str	r0, [r2, #0]
 8003034:	6053      	str	r3, [r2, #4]
 8003036:	e7da      	b.n	8002fee <_free_r+0x22>
 8003038:	d902      	bls.n	8003040 <_free_r+0x74>
 800303a:	230c      	movs	r3, #12
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	e7d6      	b.n	8002fee <_free_r+0x22>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf01      	itttt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	1809      	addeq	r1, r1, r0
 800304e:	6021      	streq	r1, [r4, #0]
 8003050:	6063      	str	r3, [r4, #4]
 8003052:	6054      	str	r4, [r2, #4]
 8003054:	e7cb      	b.n	8002fee <_free_r+0x22>
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	20000264 	.word	0x20000264

0800305c <sbrk_aligned>:
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4e0f      	ldr	r6, [pc, #60]	@ (800309c <sbrk_aligned+0x40>)
 8003060:	460c      	mov	r4, r1
 8003062:	6831      	ldr	r1, [r6, #0]
 8003064:	4605      	mov	r5, r0
 8003066:	b911      	cbnz	r1, 800306e <sbrk_aligned+0x12>
 8003068:	f000 fcb4 	bl	80039d4 <_sbrk_r>
 800306c:	6030      	str	r0, [r6, #0]
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f000 fcaf 	bl	80039d4 <_sbrk_r>
 8003076:	1c43      	adds	r3, r0, #1
 8003078:	d103      	bne.n	8003082 <sbrk_aligned+0x26>
 800307a:	f04f 34ff 	mov.w	r4, #4294967295
 800307e:	4620      	mov	r0, r4
 8003080:	bd70      	pop	{r4, r5, r6, pc}
 8003082:	1cc4      	adds	r4, r0, #3
 8003084:	f024 0403 	bic.w	r4, r4, #3
 8003088:	42a0      	cmp	r0, r4
 800308a:	d0f8      	beq.n	800307e <sbrk_aligned+0x22>
 800308c:	1a21      	subs	r1, r4, r0
 800308e:	4628      	mov	r0, r5
 8003090:	f000 fca0 	bl	80039d4 <_sbrk_r>
 8003094:	3001      	adds	r0, #1
 8003096:	d1f2      	bne.n	800307e <sbrk_aligned+0x22>
 8003098:	e7ef      	b.n	800307a <sbrk_aligned+0x1e>
 800309a:	bf00      	nop
 800309c:	20000260 	.word	0x20000260

080030a0 <_malloc_r>:
 80030a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030a4:	1ccd      	adds	r5, r1, #3
 80030a6:	f025 0503 	bic.w	r5, r5, #3
 80030aa:	3508      	adds	r5, #8
 80030ac:	2d0c      	cmp	r5, #12
 80030ae:	bf38      	it	cc
 80030b0:	250c      	movcc	r5, #12
 80030b2:	2d00      	cmp	r5, #0
 80030b4:	4606      	mov	r6, r0
 80030b6:	db01      	blt.n	80030bc <_malloc_r+0x1c>
 80030b8:	42a9      	cmp	r1, r5
 80030ba:	d904      	bls.n	80030c6 <_malloc_r+0x26>
 80030bc:	230c      	movs	r3, #12
 80030be:	6033      	str	r3, [r6, #0]
 80030c0:	2000      	movs	r0, #0
 80030c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800319c <_malloc_r+0xfc>
 80030ca:	f000 f869 	bl	80031a0 <__malloc_lock>
 80030ce:	f8d8 3000 	ldr.w	r3, [r8]
 80030d2:	461c      	mov	r4, r3
 80030d4:	bb44      	cbnz	r4, 8003128 <_malloc_r+0x88>
 80030d6:	4629      	mov	r1, r5
 80030d8:	4630      	mov	r0, r6
 80030da:	f7ff ffbf 	bl	800305c <sbrk_aligned>
 80030de:	1c43      	adds	r3, r0, #1
 80030e0:	4604      	mov	r4, r0
 80030e2:	d158      	bne.n	8003196 <_malloc_r+0xf6>
 80030e4:	f8d8 4000 	ldr.w	r4, [r8]
 80030e8:	4627      	mov	r7, r4
 80030ea:	2f00      	cmp	r7, #0
 80030ec:	d143      	bne.n	8003176 <_malloc_r+0xd6>
 80030ee:	2c00      	cmp	r4, #0
 80030f0:	d04b      	beq.n	800318a <_malloc_r+0xea>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	4639      	mov	r1, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	eb04 0903 	add.w	r9, r4, r3
 80030fc:	f000 fc6a 	bl	80039d4 <_sbrk_r>
 8003100:	4581      	cmp	r9, r0
 8003102:	d142      	bne.n	800318a <_malloc_r+0xea>
 8003104:	6821      	ldr	r1, [r4, #0]
 8003106:	4630      	mov	r0, r6
 8003108:	1a6d      	subs	r5, r5, r1
 800310a:	4629      	mov	r1, r5
 800310c:	f7ff ffa6 	bl	800305c <sbrk_aligned>
 8003110:	3001      	adds	r0, #1
 8003112:	d03a      	beq.n	800318a <_malloc_r+0xea>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	442b      	add	r3, r5
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	f8d8 3000 	ldr.w	r3, [r8]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	bb62      	cbnz	r2, 800317c <_malloc_r+0xdc>
 8003122:	f8c8 7000 	str.w	r7, [r8]
 8003126:	e00f      	b.n	8003148 <_malloc_r+0xa8>
 8003128:	6822      	ldr	r2, [r4, #0]
 800312a:	1b52      	subs	r2, r2, r5
 800312c:	d420      	bmi.n	8003170 <_malloc_r+0xd0>
 800312e:	2a0b      	cmp	r2, #11
 8003130:	d917      	bls.n	8003162 <_malloc_r+0xc2>
 8003132:	1961      	adds	r1, r4, r5
 8003134:	42a3      	cmp	r3, r4
 8003136:	6025      	str	r5, [r4, #0]
 8003138:	bf18      	it	ne
 800313a:	6059      	strne	r1, [r3, #4]
 800313c:	6863      	ldr	r3, [r4, #4]
 800313e:	bf08      	it	eq
 8003140:	f8c8 1000 	streq.w	r1, [r8]
 8003144:	5162      	str	r2, [r4, r5]
 8003146:	604b      	str	r3, [r1, #4]
 8003148:	4630      	mov	r0, r6
 800314a:	f000 f82f 	bl	80031ac <__malloc_unlock>
 800314e:	f104 000b 	add.w	r0, r4, #11
 8003152:	1d23      	adds	r3, r4, #4
 8003154:	f020 0007 	bic.w	r0, r0, #7
 8003158:	1ac2      	subs	r2, r0, r3
 800315a:	bf1c      	itt	ne
 800315c:	1a1b      	subne	r3, r3, r0
 800315e:	50a3      	strne	r3, [r4, r2]
 8003160:	e7af      	b.n	80030c2 <_malloc_r+0x22>
 8003162:	6862      	ldr	r2, [r4, #4]
 8003164:	42a3      	cmp	r3, r4
 8003166:	bf0c      	ite	eq
 8003168:	f8c8 2000 	streq.w	r2, [r8]
 800316c:	605a      	strne	r2, [r3, #4]
 800316e:	e7eb      	b.n	8003148 <_malloc_r+0xa8>
 8003170:	4623      	mov	r3, r4
 8003172:	6864      	ldr	r4, [r4, #4]
 8003174:	e7ae      	b.n	80030d4 <_malloc_r+0x34>
 8003176:	463c      	mov	r4, r7
 8003178:	687f      	ldr	r7, [r7, #4]
 800317a:	e7b6      	b.n	80030ea <_malloc_r+0x4a>
 800317c:	461a      	mov	r2, r3
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	42a3      	cmp	r3, r4
 8003182:	d1fb      	bne.n	800317c <_malloc_r+0xdc>
 8003184:	2300      	movs	r3, #0
 8003186:	6053      	str	r3, [r2, #4]
 8003188:	e7de      	b.n	8003148 <_malloc_r+0xa8>
 800318a:	230c      	movs	r3, #12
 800318c:	4630      	mov	r0, r6
 800318e:	6033      	str	r3, [r6, #0]
 8003190:	f000 f80c 	bl	80031ac <__malloc_unlock>
 8003194:	e794      	b.n	80030c0 <_malloc_r+0x20>
 8003196:	6005      	str	r5, [r0, #0]
 8003198:	e7d6      	b.n	8003148 <_malloc_r+0xa8>
 800319a:	bf00      	nop
 800319c:	20000264 	.word	0x20000264

080031a0 <__malloc_lock>:
 80031a0:	4801      	ldr	r0, [pc, #4]	@ (80031a8 <__malloc_lock+0x8>)
 80031a2:	f7ff bf10 	b.w	8002fc6 <__retarget_lock_acquire_recursive>
 80031a6:	bf00      	nop
 80031a8:	2000025c 	.word	0x2000025c

080031ac <__malloc_unlock>:
 80031ac:	4801      	ldr	r0, [pc, #4]	@ (80031b4 <__malloc_unlock+0x8>)
 80031ae:	f7ff bf0b 	b.w	8002fc8 <__retarget_lock_release_recursive>
 80031b2:	bf00      	nop
 80031b4:	2000025c 	.word	0x2000025c

080031b8 <__sfputc_r>:
 80031b8:	6893      	ldr	r3, [r2, #8]
 80031ba:	b410      	push	{r4}
 80031bc:	3b01      	subs	r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	6093      	str	r3, [r2, #8]
 80031c2:	da07      	bge.n	80031d4 <__sfputc_r+0x1c>
 80031c4:	6994      	ldr	r4, [r2, #24]
 80031c6:	42a3      	cmp	r3, r4
 80031c8:	db01      	blt.n	80031ce <__sfputc_r+0x16>
 80031ca:	290a      	cmp	r1, #10
 80031cc:	d102      	bne.n	80031d4 <__sfputc_r+0x1c>
 80031ce:	bc10      	pop	{r4}
 80031d0:	f000 bb6c 	b.w	80038ac <__swbuf_r>
 80031d4:	6813      	ldr	r3, [r2, #0]
 80031d6:	1c58      	adds	r0, r3, #1
 80031d8:	6010      	str	r0, [r2, #0]
 80031da:	7019      	strb	r1, [r3, #0]
 80031dc:	4608      	mov	r0, r1
 80031de:	bc10      	pop	{r4}
 80031e0:	4770      	bx	lr

080031e2 <__sfputs_r>:
 80031e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e4:	4606      	mov	r6, r0
 80031e6:	460f      	mov	r7, r1
 80031e8:	4614      	mov	r4, r2
 80031ea:	18d5      	adds	r5, r2, r3
 80031ec:	42ac      	cmp	r4, r5
 80031ee:	d101      	bne.n	80031f4 <__sfputs_r+0x12>
 80031f0:	2000      	movs	r0, #0
 80031f2:	e007      	b.n	8003204 <__sfputs_r+0x22>
 80031f4:	463a      	mov	r2, r7
 80031f6:	4630      	mov	r0, r6
 80031f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031fc:	f7ff ffdc 	bl	80031b8 <__sfputc_r>
 8003200:	1c43      	adds	r3, r0, #1
 8003202:	d1f3      	bne.n	80031ec <__sfputs_r+0xa>
 8003204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003208 <_vfiprintf_r>:
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	460d      	mov	r5, r1
 800320e:	4614      	mov	r4, r2
 8003210:	4698      	mov	r8, r3
 8003212:	4606      	mov	r6, r0
 8003214:	b09d      	sub	sp, #116	@ 0x74
 8003216:	b118      	cbz	r0, 8003220 <_vfiprintf_r+0x18>
 8003218:	6a03      	ldr	r3, [r0, #32]
 800321a:	b90b      	cbnz	r3, 8003220 <_vfiprintf_r+0x18>
 800321c:	f7ff fdce 	bl	8002dbc <__sinit>
 8003220:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003222:	07d9      	lsls	r1, r3, #31
 8003224:	d405      	bmi.n	8003232 <_vfiprintf_r+0x2a>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	059a      	lsls	r2, r3, #22
 800322a:	d402      	bmi.n	8003232 <_vfiprintf_r+0x2a>
 800322c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800322e:	f7ff feca 	bl	8002fc6 <__retarget_lock_acquire_recursive>
 8003232:	89ab      	ldrh	r3, [r5, #12]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	d501      	bpl.n	800323c <_vfiprintf_r+0x34>
 8003238:	692b      	ldr	r3, [r5, #16]
 800323a:	b99b      	cbnz	r3, 8003264 <_vfiprintf_r+0x5c>
 800323c:	4629      	mov	r1, r5
 800323e:	4630      	mov	r0, r6
 8003240:	f000 fb72 	bl	8003928 <__swsetup_r>
 8003244:	b170      	cbz	r0, 8003264 <_vfiprintf_r+0x5c>
 8003246:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003248:	07dc      	lsls	r4, r3, #31
 800324a:	d504      	bpl.n	8003256 <_vfiprintf_r+0x4e>
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	b01d      	add	sp, #116	@ 0x74
 8003252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	0598      	lsls	r0, r3, #22
 800325a:	d4f7      	bmi.n	800324c <_vfiprintf_r+0x44>
 800325c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800325e:	f7ff feb3 	bl	8002fc8 <__retarget_lock_release_recursive>
 8003262:	e7f3      	b.n	800324c <_vfiprintf_r+0x44>
 8003264:	2300      	movs	r3, #0
 8003266:	9309      	str	r3, [sp, #36]	@ 0x24
 8003268:	2320      	movs	r3, #32
 800326a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800326e:	2330      	movs	r3, #48	@ 0x30
 8003270:	f04f 0901 	mov.w	r9, #1
 8003274:	f8cd 800c 	str.w	r8, [sp, #12]
 8003278:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003424 <_vfiprintf_r+0x21c>
 800327c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003280:	4623      	mov	r3, r4
 8003282:	469a      	mov	sl, r3
 8003284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003288:	b10a      	cbz	r2, 800328e <_vfiprintf_r+0x86>
 800328a:	2a25      	cmp	r2, #37	@ 0x25
 800328c:	d1f9      	bne.n	8003282 <_vfiprintf_r+0x7a>
 800328e:	ebba 0b04 	subs.w	fp, sl, r4
 8003292:	d00b      	beq.n	80032ac <_vfiprintf_r+0xa4>
 8003294:	465b      	mov	r3, fp
 8003296:	4622      	mov	r2, r4
 8003298:	4629      	mov	r1, r5
 800329a:	4630      	mov	r0, r6
 800329c:	f7ff ffa1 	bl	80031e2 <__sfputs_r>
 80032a0:	3001      	adds	r0, #1
 80032a2:	f000 80a7 	beq.w	80033f4 <_vfiprintf_r+0x1ec>
 80032a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032a8:	445a      	add	r2, fp
 80032aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80032ac:	f89a 3000 	ldrb.w	r3, [sl]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 809f 	beq.w	80033f4 <_vfiprintf_r+0x1ec>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c0:	f10a 0a01 	add.w	sl, sl, #1
 80032c4:	9304      	str	r3, [sp, #16]
 80032c6:	9307      	str	r3, [sp, #28]
 80032c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80032ce:	4654      	mov	r4, sl
 80032d0:	2205      	movs	r2, #5
 80032d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d6:	4853      	ldr	r0, [pc, #332]	@ (8003424 <_vfiprintf_r+0x21c>)
 80032d8:	f000 fb8c 	bl	80039f4 <memchr>
 80032dc:	9a04      	ldr	r2, [sp, #16]
 80032de:	b9d8      	cbnz	r0, 8003318 <_vfiprintf_r+0x110>
 80032e0:	06d1      	lsls	r1, r2, #27
 80032e2:	bf44      	itt	mi
 80032e4:	2320      	movmi	r3, #32
 80032e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ea:	0713      	lsls	r3, r2, #28
 80032ec:	bf44      	itt	mi
 80032ee:	232b      	movmi	r3, #43	@ 0x2b
 80032f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f4:	f89a 3000 	ldrb.w	r3, [sl]
 80032f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032fa:	d015      	beq.n	8003328 <_vfiprintf_r+0x120>
 80032fc:	4654      	mov	r4, sl
 80032fe:	2000      	movs	r0, #0
 8003300:	f04f 0c0a 	mov.w	ip, #10
 8003304:	9a07      	ldr	r2, [sp, #28]
 8003306:	4621      	mov	r1, r4
 8003308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330c:	3b30      	subs	r3, #48	@ 0x30
 800330e:	2b09      	cmp	r3, #9
 8003310:	d94b      	bls.n	80033aa <_vfiprintf_r+0x1a2>
 8003312:	b1b0      	cbz	r0, 8003342 <_vfiprintf_r+0x13a>
 8003314:	9207      	str	r2, [sp, #28]
 8003316:	e014      	b.n	8003342 <_vfiprintf_r+0x13a>
 8003318:	eba0 0308 	sub.w	r3, r0, r8
 800331c:	fa09 f303 	lsl.w	r3, r9, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	46a2      	mov	sl, r4
 8003324:	9304      	str	r3, [sp, #16]
 8003326:	e7d2      	b.n	80032ce <_vfiprintf_r+0xc6>
 8003328:	9b03      	ldr	r3, [sp, #12]
 800332a:	1d19      	adds	r1, r3, #4
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	9103      	str	r1, [sp, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	bfbb      	ittet	lt
 8003334:	425b      	neglt	r3, r3
 8003336:	f042 0202 	orrlt.w	r2, r2, #2
 800333a:	9307      	strge	r3, [sp, #28]
 800333c:	9307      	strlt	r3, [sp, #28]
 800333e:	bfb8      	it	lt
 8003340:	9204      	strlt	r2, [sp, #16]
 8003342:	7823      	ldrb	r3, [r4, #0]
 8003344:	2b2e      	cmp	r3, #46	@ 0x2e
 8003346:	d10a      	bne.n	800335e <_vfiprintf_r+0x156>
 8003348:	7863      	ldrb	r3, [r4, #1]
 800334a:	2b2a      	cmp	r3, #42	@ 0x2a
 800334c:	d132      	bne.n	80033b4 <_vfiprintf_r+0x1ac>
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	3402      	adds	r4, #2
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	9203      	str	r2, [sp, #12]
 8003358:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800335c:	9305      	str	r3, [sp, #20]
 800335e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003428 <_vfiprintf_r+0x220>
 8003362:	2203      	movs	r2, #3
 8003364:	4650      	mov	r0, sl
 8003366:	7821      	ldrb	r1, [r4, #0]
 8003368:	f000 fb44 	bl	80039f4 <memchr>
 800336c:	b138      	cbz	r0, 800337e <_vfiprintf_r+0x176>
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	9b04      	ldr	r3, [sp, #16]
 8003372:	eba0 000a 	sub.w	r0, r0, sl
 8003376:	4082      	lsls	r2, r0
 8003378:	4313      	orrs	r3, r2
 800337a:	3401      	adds	r4, #1
 800337c:	9304      	str	r3, [sp, #16]
 800337e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003382:	2206      	movs	r2, #6
 8003384:	4829      	ldr	r0, [pc, #164]	@ (800342c <_vfiprintf_r+0x224>)
 8003386:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800338a:	f000 fb33 	bl	80039f4 <memchr>
 800338e:	2800      	cmp	r0, #0
 8003390:	d03f      	beq.n	8003412 <_vfiprintf_r+0x20a>
 8003392:	4b27      	ldr	r3, [pc, #156]	@ (8003430 <_vfiprintf_r+0x228>)
 8003394:	bb1b      	cbnz	r3, 80033de <_vfiprintf_r+0x1d6>
 8003396:	9b03      	ldr	r3, [sp, #12]
 8003398:	3307      	adds	r3, #7
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	3308      	adds	r3, #8
 80033a0:	9303      	str	r3, [sp, #12]
 80033a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a4:	443b      	add	r3, r7
 80033a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80033a8:	e76a      	b.n	8003280 <_vfiprintf_r+0x78>
 80033aa:	460c      	mov	r4, r1
 80033ac:	2001      	movs	r0, #1
 80033ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80033b2:	e7a8      	b.n	8003306 <_vfiprintf_r+0xfe>
 80033b4:	2300      	movs	r3, #0
 80033b6:	f04f 0c0a 	mov.w	ip, #10
 80033ba:	4619      	mov	r1, r3
 80033bc:	3401      	adds	r4, #1
 80033be:	9305      	str	r3, [sp, #20]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c6:	3a30      	subs	r2, #48	@ 0x30
 80033c8:	2a09      	cmp	r2, #9
 80033ca:	d903      	bls.n	80033d4 <_vfiprintf_r+0x1cc>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0c6      	beq.n	800335e <_vfiprintf_r+0x156>
 80033d0:	9105      	str	r1, [sp, #20]
 80033d2:	e7c4      	b.n	800335e <_vfiprintf_r+0x156>
 80033d4:	4604      	mov	r4, r0
 80033d6:	2301      	movs	r3, #1
 80033d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80033dc:	e7f0      	b.n	80033c0 <_vfiprintf_r+0x1b8>
 80033de:	ab03      	add	r3, sp, #12
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	462a      	mov	r2, r5
 80033e4:	4630      	mov	r0, r6
 80033e6:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <_vfiprintf_r+0x22c>)
 80033e8:	a904      	add	r1, sp, #16
 80033ea:	f3af 8000 	nop.w
 80033ee:	4607      	mov	r7, r0
 80033f0:	1c78      	adds	r0, r7, #1
 80033f2:	d1d6      	bne.n	80033a2 <_vfiprintf_r+0x19a>
 80033f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033f6:	07d9      	lsls	r1, r3, #31
 80033f8:	d405      	bmi.n	8003406 <_vfiprintf_r+0x1fe>
 80033fa:	89ab      	ldrh	r3, [r5, #12]
 80033fc:	059a      	lsls	r2, r3, #22
 80033fe:	d402      	bmi.n	8003406 <_vfiprintf_r+0x1fe>
 8003400:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003402:	f7ff fde1 	bl	8002fc8 <__retarget_lock_release_recursive>
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	065b      	lsls	r3, r3, #25
 800340a:	f53f af1f 	bmi.w	800324c <_vfiprintf_r+0x44>
 800340e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003410:	e71e      	b.n	8003250 <_vfiprintf_r+0x48>
 8003412:	ab03      	add	r3, sp, #12
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462a      	mov	r2, r5
 8003418:	4630      	mov	r0, r6
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <_vfiprintf_r+0x22c>)
 800341c:	a904      	add	r1, sp, #16
 800341e:	f000 f87d 	bl	800351c <_printf_i>
 8003422:	e7e4      	b.n	80033ee <_vfiprintf_r+0x1e6>
 8003424:	08003bbc 	.word	0x08003bbc
 8003428:	08003bc2 	.word	0x08003bc2
 800342c:	08003bc6 	.word	0x08003bc6
 8003430:	00000000 	.word	0x00000000
 8003434:	080031e3 	.word	0x080031e3

08003438 <_printf_common>:
 8003438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800343c:	4616      	mov	r6, r2
 800343e:	4698      	mov	r8, r3
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4607      	mov	r7, r0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfb8      	it	lt
 800344a:	4613      	movlt	r3, r2
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003452:	460c      	mov	r4, r1
 8003454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003458:	b10a      	cbz	r2, 800345e <_printf_common+0x26>
 800345a:	3301      	adds	r3, #1
 800345c:	6033      	str	r3, [r6, #0]
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	0699      	lsls	r1, r3, #26
 8003462:	bf42      	ittt	mi
 8003464:	6833      	ldrmi	r3, [r6, #0]
 8003466:	3302      	addmi	r3, #2
 8003468:	6033      	strmi	r3, [r6, #0]
 800346a:	6825      	ldr	r5, [r4, #0]
 800346c:	f015 0506 	ands.w	r5, r5, #6
 8003470:	d106      	bne.n	8003480 <_printf_common+0x48>
 8003472:	f104 0a19 	add.w	sl, r4, #25
 8003476:	68e3      	ldr	r3, [r4, #12]
 8003478:	6832      	ldr	r2, [r6, #0]
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	42ab      	cmp	r3, r5
 800347e:	dc2b      	bgt.n	80034d8 <_printf_common+0xa0>
 8003480:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3b00      	subs	r3, #0
 8003488:	bf18      	it	ne
 800348a:	2301      	movne	r3, #1
 800348c:	0692      	lsls	r2, r2, #26
 800348e:	d430      	bmi.n	80034f2 <_printf_common+0xba>
 8003490:	4641      	mov	r1, r8
 8003492:	4638      	mov	r0, r7
 8003494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003498:	47c8      	blx	r9
 800349a:	3001      	adds	r0, #1
 800349c:	d023      	beq.n	80034e6 <_printf_common+0xae>
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	6922      	ldr	r2, [r4, #16]
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf14      	ite	ne
 80034aa:	2500      	movne	r5, #0
 80034ac:	6833      	ldreq	r3, [r6, #0]
 80034ae:	f04f 0600 	mov.w	r6, #0
 80034b2:	bf08      	it	eq
 80034b4:	68e5      	ldreq	r5, [r4, #12]
 80034b6:	f104 041a 	add.w	r4, r4, #26
 80034ba:	bf08      	it	eq
 80034bc:	1aed      	subeq	r5, r5, r3
 80034be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034c2:	bf08      	it	eq
 80034c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bfc4      	itt	gt
 80034cc:	1a9b      	subgt	r3, r3, r2
 80034ce:	18ed      	addgt	r5, r5, r3
 80034d0:	42b5      	cmp	r5, r6
 80034d2:	d11a      	bne.n	800350a <_printf_common+0xd2>
 80034d4:	2000      	movs	r0, #0
 80034d6:	e008      	b.n	80034ea <_printf_common+0xb2>
 80034d8:	2301      	movs	r3, #1
 80034da:	4652      	mov	r2, sl
 80034dc:	4641      	mov	r1, r8
 80034de:	4638      	mov	r0, r7
 80034e0:	47c8      	blx	r9
 80034e2:	3001      	adds	r0, #1
 80034e4:	d103      	bne.n	80034ee <_printf_common+0xb6>
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ee:	3501      	adds	r5, #1
 80034f0:	e7c1      	b.n	8003476 <_printf_common+0x3e>
 80034f2:	2030      	movs	r0, #48	@ 0x30
 80034f4:	18e1      	adds	r1, r4, r3
 80034f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003500:	4422      	add	r2, r4
 8003502:	3302      	adds	r3, #2
 8003504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003508:	e7c2      	b.n	8003490 <_printf_common+0x58>
 800350a:	2301      	movs	r3, #1
 800350c:	4622      	mov	r2, r4
 800350e:	4641      	mov	r1, r8
 8003510:	4638      	mov	r0, r7
 8003512:	47c8      	blx	r9
 8003514:	3001      	adds	r0, #1
 8003516:	d0e6      	beq.n	80034e6 <_printf_common+0xae>
 8003518:	3601      	adds	r6, #1
 800351a:	e7d9      	b.n	80034d0 <_printf_common+0x98>

0800351c <_printf_i>:
 800351c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	7e0f      	ldrb	r7, [r1, #24]
 8003522:	4691      	mov	r9, r2
 8003524:	2f78      	cmp	r7, #120	@ 0x78
 8003526:	4680      	mov	r8, r0
 8003528:	460c      	mov	r4, r1
 800352a:	469a      	mov	sl, r3
 800352c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800352e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003532:	d807      	bhi.n	8003544 <_printf_i+0x28>
 8003534:	2f62      	cmp	r7, #98	@ 0x62
 8003536:	d80a      	bhi.n	800354e <_printf_i+0x32>
 8003538:	2f00      	cmp	r7, #0
 800353a:	f000 80d3 	beq.w	80036e4 <_printf_i+0x1c8>
 800353e:	2f58      	cmp	r7, #88	@ 0x58
 8003540:	f000 80ba 	beq.w	80036b8 <_printf_i+0x19c>
 8003544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003548:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800354c:	e03a      	b.n	80035c4 <_printf_i+0xa8>
 800354e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003552:	2b15      	cmp	r3, #21
 8003554:	d8f6      	bhi.n	8003544 <_printf_i+0x28>
 8003556:	a101      	add	r1, pc, #4	@ (adr r1, 800355c <_printf_i+0x40>)
 8003558:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800355c:	080035b5 	.word	0x080035b5
 8003560:	080035c9 	.word	0x080035c9
 8003564:	08003545 	.word	0x08003545
 8003568:	08003545 	.word	0x08003545
 800356c:	08003545 	.word	0x08003545
 8003570:	08003545 	.word	0x08003545
 8003574:	080035c9 	.word	0x080035c9
 8003578:	08003545 	.word	0x08003545
 800357c:	08003545 	.word	0x08003545
 8003580:	08003545 	.word	0x08003545
 8003584:	08003545 	.word	0x08003545
 8003588:	080036cb 	.word	0x080036cb
 800358c:	080035f3 	.word	0x080035f3
 8003590:	08003685 	.word	0x08003685
 8003594:	08003545 	.word	0x08003545
 8003598:	08003545 	.word	0x08003545
 800359c:	080036ed 	.word	0x080036ed
 80035a0:	08003545 	.word	0x08003545
 80035a4:	080035f3 	.word	0x080035f3
 80035a8:	08003545 	.word	0x08003545
 80035ac:	08003545 	.word	0x08003545
 80035b0:	0800368d 	.word	0x0800368d
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	1d1a      	adds	r2, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6032      	str	r2, [r6, #0]
 80035bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035c4:	2301      	movs	r3, #1
 80035c6:	e09e      	b.n	8003706 <_printf_i+0x1ea>
 80035c8:	6833      	ldr	r3, [r6, #0]
 80035ca:	6820      	ldr	r0, [r4, #0]
 80035cc:	1d19      	adds	r1, r3, #4
 80035ce:	6031      	str	r1, [r6, #0]
 80035d0:	0606      	lsls	r6, r0, #24
 80035d2:	d501      	bpl.n	80035d8 <_printf_i+0xbc>
 80035d4:	681d      	ldr	r5, [r3, #0]
 80035d6:	e003      	b.n	80035e0 <_printf_i+0xc4>
 80035d8:	0645      	lsls	r5, r0, #25
 80035da:	d5fb      	bpl.n	80035d4 <_printf_i+0xb8>
 80035dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	da03      	bge.n	80035ec <_printf_i+0xd0>
 80035e4:	232d      	movs	r3, #45	@ 0x2d
 80035e6:	426d      	negs	r5, r5
 80035e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035ec:	230a      	movs	r3, #10
 80035ee:	4859      	ldr	r0, [pc, #356]	@ (8003754 <_printf_i+0x238>)
 80035f0:	e011      	b.n	8003616 <_printf_i+0xfa>
 80035f2:	6821      	ldr	r1, [r4, #0]
 80035f4:	6833      	ldr	r3, [r6, #0]
 80035f6:	0608      	lsls	r0, r1, #24
 80035f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035fc:	d402      	bmi.n	8003604 <_printf_i+0xe8>
 80035fe:	0649      	lsls	r1, r1, #25
 8003600:	bf48      	it	mi
 8003602:	b2ad      	uxthmi	r5, r5
 8003604:	2f6f      	cmp	r7, #111	@ 0x6f
 8003606:	6033      	str	r3, [r6, #0]
 8003608:	bf14      	ite	ne
 800360a:	230a      	movne	r3, #10
 800360c:	2308      	moveq	r3, #8
 800360e:	4851      	ldr	r0, [pc, #324]	@ (8003754 <_printf_i+0x238>)
 8003610:	2100      	movs	r1, #0
 8003612:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003616:	6866      	ldr	r6, [r4, #4]
 8003618:	2e00      	cmp	r6, #0
 800361a:	bfa8      	it	ge
 800361c:	6821      	ldrge	r1, [r4, #0]
 800361e:	60a6      	str	r6, [r4, #8]
 8003620:	bfa4      	itt	ge
 8003622:	f021 0104 	bicge.w	r1, r1, #4
 8003626:	6021      	strge	r1, [r4, #0]
 8003628:	b90d      	cbnz	r5, 800362e <_printf_i+0x112>
 800362a:	2e00      	cmp	r6, #0
 800362c:	d04b      	beq.n	80036c6 <_printf_i+0x1aa>
 800362e:	4616      	mov	r6, r2
 8003630:	fbb5 f1f3 	udiv	r1, r5, r3
 8003634:	fb03 5711 	mls	r7, r3, r1, r5
 8003638:	5dc7      	ldrb	r7, [r0, r7]
 800363a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800363e:	462f      	mov	r7, r5
 8003640:	42bb      	cmp	r3, r7
 8003642:	460d      	mov	r5, r1
 8003644:	d9f4      	bls.n	8003630 <_printf_i+0x114>
 8003646:	2b08      	cmp	r3, #8
 8003648:	d10b      	bne.n	8003662 <_printf_i+0x146>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	07df      	lsls	r7, r3, #31
 800364e:	d508      	bpl.n	8003662 <_printf_i+0x146>
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	6861      	ldr	r1, [r4, #4]
 8003654:	4299      	cmp	r1, r3
 8003656:	bfde      	ittt	le
 8003658:	2330      	movle	r3, #48	@ 0x30
 800365a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800365e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003662:	1b92      	subs	r2, r2, r6
 8003664:	6122      	str	r2, [r4, #16]
 8003666:	464b      	mov	r3, r9
 8003668:	4621      	mov	r1, r4
 800366a:	4640      	mov	r0, r8
 800366c:	f8cd a000 	str.w	sl, [sp]
 8003670:	aa03      	add	r2, sp, #12
 8003672:	f7ff fee1 	bl	8003438 <_printf_common>
 8003676:	3001      	adds	r0, #1
 8003678:	d14a      	bne.n	8003710 <_printf_i+0x1f4>
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	b004      	add	sp, #16
 8003680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	f043 0320 	orr.w	r3, r3, #32
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	2778      	movs	r7, #120	@ 0x78
 800368e:	4832      	ldr	r0, [pc, #200]	@ (8003758 <_printf_i+0x23c>)
 8003690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	6831      	ldr	r1, [r6, #0]
 8003698:	061f      	lsls	r7, r3, #24
 800369a:	f851 5b04 	ldr.w	r5, [r1], #4
 800369e:	d402      	bmi.n	80036a6 <_printf_i+0x18a>
 80036a0:	065f      	lsls	r7, r3, #25
 80036a2:	bf48      	it	mi
 80036a4:	b2ad      	uxthmi	r5, r5
 80036a6:	6031      	str	r1, [r6, #0]
 80036a8:	07d9      	lsls	r1, r3, #31
 80036aa:	bf44      	itt	mi
 80036ac:	f043 0320 	orrmi.w	r3, r3, #32
 80036b0:	6023      	strmi	r3, [r4, #0]
 80036b2:	b11d      	cbz	r5, 80036bc <_printf_i+0x1a0>
 80036b4:	2310      	movs	r3, #16
 80036b6:	e7ab      	b.n	8003610 <_printf_i+0xf4>
 80036b8:	4826      	ldr	r0, [pc, #152]	@ (8003754 <_printf_i+0x238>)
 80036ba:	e7e9      	b.n	8003690 <_printf_i+0x174>
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f023 0320 	bic.w	r3, r3, #32
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	e7f6      	b.n	80036b4 <_printf_i+0x198>
 80036c6:	4616      	mov	r6, r2
 80036c8:	e7bd      	b.n	8003646 <_printf_i+0x12a>
 80036ca:	6833      	ldr	r3, [r6, #0]
 80036cc:	6825      	ldr	r5, [r4, #0]
 80036ce:	1d18      	adds	r0, r3, #4
 80036d0:	6961      	ldr	r1, [r4, #20]
 80036d2:	6030      	str	r0, [r6, #0]
 80036d4:	062e      	lsls	r6, r5, #24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	d501      	bpl.n	80036de <_printf_i+0x1c2>
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	e002      	b.n	80036e4 <_printf_i+0x1c8>
 80036de:	0668      	lsls	r0, r5, #25
 80036e0:	d5fb      	bpl.n	80036da <_printf_i+0x1be>
 80036e2:	8019      	strh	r1, [r3, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	4616      	mov	r6, r2
 80036e8:	6123      	str	r3, [r4, #16]
 80036ea:	e7bc      	b.n	8003666 <_printf_i+0x14a>
 80036ec:	6833      	ldr	r3, [r6, #0]
 80036ee:	2100      	movs	r1, #0
 80036f0:	1d1a      	adds	r2, r3, #4
 80036f2:	6032      	str	r2, [r6, #0]
 80036f4:	681e      	ldr	r6, [r3, #0]
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	4630      	mov	r0, r6
 80036fa:	f000 f97b 	bl	80039f4 <memchr>
 80036fe:	b108      	cbz	r0, 8003704 <_printf_i+0x1e8>
 8003700:	1b80      	subs	r0, r0, r6
 8003702:	6060      	str	r0, [r4, #4]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6123      	str	r3, [r4, #16]
 8003708:	2300      	movs	r3, #0
 800370a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800370e:	e7aa      	b.n	8003666 <_printf_i+0x14a>
 8003710:	4632      	mov	r2, r6
 8003712:	4649      	mov	r1, r9
 8003714:	4640      	mov	r0, r8
 8003716:	6923      	ldr	r3, [r4, #16]
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d0ad      	beq.n	800367a <_printf_i+0x15e>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	079b      	lsls	r3, r3, #30
 8003722:	d413      	bmi.n	800374c <_printf_i+0x230>
 8003724:	68e0      	ldr	r0, [r4, #12]
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	4298      	cmp	r0, r3
 800372a:	bfb8      	it	lt
 800372c:	4618      	movlt	r0, r3
 800372e:	e7a6      	b.n	800367e <_printf_i+0x162>
 8003730:	2301      	movs	r3, #1
 8003732:	4632      	mov	r2, r6
 8003734:	4649      	mov	r1, r9
 8003736:	4640      	mov	r0, r8
 8003738:	47d0      	blx	sl
 800373a:	3001      	adds	r0, #1
 800373c:	d09d      	beq.n	800367a <_printf_i+0x15e>
 800373e:	3501      	adds	r5, #1
 8003740:	68e3      	ldr	r3, [r4, #12]
 8003742:	9903      	ldr	r1, [sp, #12]
 8003744:	1a5b      	subs	r3, r3, r1
 8003746:	42ab      	cmp	r3, r5
 8003748:	dcf2      	bgt.n	8003730 <_printf_i+0x214>
 800374a:	e7eb      	b.n	8003724 <_printf_i+0x208>
 800374c:	2500      	movs	r5, #0
 800374e:	f104 0619 	add.w	r6, r4, #25
 8003752:	e7f5      	b.n	8003740 <_printf_i+0x224>
 8003754:	08003bcd 	.word	0x08003bcd
 8003758:	08003bde 	.word	0x08003bde

0800375c <__sflush_r>:
 800375c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	0716      	lsls	r6, r2, #28
 8003764:	4605      	mov	r5, r0
 8003766:	460c      	mov	r4, r1
 8003768:	d454      	bmi.n	8003814 <__sflush_r+0xb8>
 800376a:	684b      	ldr	r3, [r1, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	dc02      	bgt.n	8003776 <__sflush_r+0x1a>
 8003770:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	dd48      	ble.n	8003808 <__sflush_r+0xac>
 8003776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003778:	2e00      	cmp	r6, #0
 800377a:	d045      	beq.n	8003808 <__sflush_r+0xac>
 800377c:	2300      	movs	r3, #0
 800377e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003782:	682f      	ldr	r7, [r5, #0]
 8003784:	6a21      	ldr	r1, [r4, #32]
 8003786:	602b      	str	r3, [r5, #0]
 8003788:	d030      	beq.n	80037ec <__sflush_r+0x90>
 800378a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	0759      	lsls	r1, r3, #29
 8003790:	d505      	bpl.n	800379e <__sflush_r+0x42>
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003798:	b10b      	cbz	r3, 800379e <__sflush_r+0x42>
 800379a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800379c:	1ad2      	subs	r2, r2, r3
 800379e:	2300      	movs	r3, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037a4:	6a21      	ldr	r1, [r4, #32]
 80037a6:	47b0      	blx	r6
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	d106      	bne.n	80037bc <__sflush_r+0x60>
 80037ae:	6829      	ldr	r1, [r5, #0]
 80037b0:	291d      	cmp	r1, #29
 80037b2:	d82b      	bhi.n	800380c <__sflush_r+0xb0>
 80037b4:	4a28      	ldr	r2, [pc, #160]	@ (8003858 <__sflush_r+0xfc>)
 80037b6:	410a      	asrs	r2, r1
 80037b8:	07d6      	lsls	r6, r2, #31
 80037ba:	d427      	bmi.n	800380c <__sflush_r+0xb0>
 80037bc:	2200      	movs	r2, #0
 80037be:	6062      	str	r2, [r4, #4]
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	04d9      	lsls	r1, r3, #19
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	d504      	bpl.n	80037d2 <__sflush_r+0x76>
 80037c8:	1c42      	adds	r2, r0, #1
 80037ca:	d101      	bne.n	80037d0 <__sflush_r+0x74>
 80037cc:	682b      	ldr	r3, [r5, #0]
 80037ce:	b903      	cbnz	r3, 80037d2 <__sflush_r+0x76>
 80037d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80037d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037d4:	602f      	str	r7, [r5, #0]
 80037d6:	b1b9      	cbz	r1, 8003808 <__sflush_r+0xac>
 80037d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <__sflush_r+0x8a>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff fbf3 	bl	8002fcc <_free_r>
 80037e6:	2300      	movs	r3, #0
 80037e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037ea:	e00d      	b.n	8003808 <__sflush_r+0xac>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b0      	blx	r6
 80037f2:	4602      	mov	r2, r0
 80037f4:	1c50      	adds	r0, r2, #1
 80037f6:	d1c9      	bne.n	800378c <__sflush_r+0x30>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c6      	beq.n	800378c <__sflush_r+0x30>
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d001      	beq.n	8003806 <__sflush_r+0xaa>
 8003802:	2b16      	cmp	r3, #22
 8003804:	d11d      	bne.n	8003842 <__sflush_r+0xe6>
 8003806:	602f      	str	r7, [r5, #0]
 8003808:	2000      	movs	r0, #0
 800380a:	e021      	b.n	8003850 <__sflush_r+0xf4>
 800380c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003810:	b21b      	sxth	r3, r3
 8003812:	e01a      	b.n	800384a <__sflush_r+0xee>
 8003814:	690f      	ldr	r7, [r1, #16]
 8003816:	2f00      	cmp	r7, #0
 8003818:	d0f6      	beq.n	8003808 <__sflush_r+0xac>
 800381a:	0793      	lsls	r3, r2, #30
 800381c:	bf18      	it	ne
 800381e:	2300      	movne	r3, #0
 8003820:	680e      	ldr	r6, [r1, #0]
 8003822:	bf08      	it	eq
 8003824:	694b      	ldreq	r3, [r1, #20]
 8003826:	1bf6      	subs	r6, r6, r7
 8003828:	600f      	str	r7, [r1, #0]
 800382a:	608b      	str	r3, [r1, #8]
 800382c:	2e00      	cmp	r6, #0
 800382e:	ddeb      	ble.n	8003808 <__sflush_r+0xac>
 8003830:	4633      	mov	r3, r6
 8003832:	463a      	mov	r2, r7
 8003834:	4628      	mov	r0, r5
 8003836:	6a21      	ldr	r1, [r4, #32]
 8003838:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800383c:	47e0      	blx	ip
 800383e:	2800      	cmp	r0, #0
 8003840:	dc07      	bgt.n	8003852 <__sflush_r+0xf6>
 8003842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003852:	4407      	add	r7, r0
 8003854:	1a36      	subs	r6, r6, r0
 8003856:	e7e9      	b.n	800382c <__sflush_r+0xd0>
 8003858:	dfbffffe 	.word	0xdfbffffe

0800385c <_fflush_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4605      	mov	r5, r0
 8003862:	460c      	mov	r4, r1
 8003864:	b913      	cbnz	r3, 800386c <_fflush_r+0x10>
 8003866:	2500      	movs	r5, #0
 8003868:	4628      	mov	r0, r5
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	b118      	cbz	r0, 8003876 <_fflush_r+0x1a>
 800386e:	6a03      	ldr	r3, [r0, #32]
 8003870:	b90b      	cbnz	r3, 8003876 <_fflush_r+0x1a>
 8003872:	f7ff faa3 	bl	8002dbc <__sinit>
 8003876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f3      	beq.n	8003866 <_fflush_r+0xa>
 800387e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003880:	07d0      	lsls	r0, r2, #31
 8003882:	d404      	bmi.n	800388e <_fflush_r+0x32>
 8003884:	0599      	lsls	r1, r3, #22
 8003886:	d402      	bmi.n	800388e <_fflush_r+0x32>
 8003888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800388a:	f7ff fb9c 	bl	8002fc6 <__retarget_lock_acquire_recursive>
 800388e:	4628      	mov	r0, r5
 8003890:	4621      	mov	r1, r4
 8003892:	f7ff ff63 	bl	800375c <__sflush_r>
 8003896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003898:	4605      	mov	r5, r0
 800389a:	07da      	lsls	r2, r3, #31
 800389c:	d4e4      	bmi.n	8003868 <_fflush_r+0xc>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	059b      	lsls	r3, r3, #22
 80038a2:	d4e1      	bmi.n	8003868 <_fflush_r+0xc>
 80038a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038a6:	f7ff fb8f 	bl	8002fc8 <__retarget_lock_release_recursive>
 80038aa:	e7dd      	b.n	8003868 <_fflush_r+0xc>

080038ac <__swbuf_r>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	460e      	mov	r6, r1
 80038b0:	4614      	mov	r4, r2
 80038b2:	4605      	mov	r5, r0
 80038b4:	b118      	cbz	r0, 80038be <__swbuf_r+0x12>
 80038b6:	6a03      	ldr	r3, [r0, #32]
 80038b8:	b90b      	cbnz	r3, 80038be <__swbuf_r+0x12>
 80038ba:	f7ff fa7f 	bl	8002dbc <__sinit>
 80038be:	69a3      	ldr	r3, [r4, #24]
 80038c0:	60a3      	str	r3, [r4, #8]
 80038c2:	89a3      	ldrh	r3, [r4, #12]
 80038c4:	071a      	lsls	r2, r3, #28
 80038c6:	d501      	bpl.n	80038cc <__swbuf_r+0x20>
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	b943      	cbnz	r3, 80038de <__swbuf_r+0x32>
 80038cc:	4621      	mov	r1, r4
 80038ce:	4628      	mov	r0, r5
 80038d0:	f000 f82a 	bl	8003928 <__swsetup_r>
 80038d4:	b118      	cbz	r0, 80038de <__swbuf_r+0x32>
 80038d6:	f04f 37ff 	mov.w	r7, #4294967295
 80038da:	4638      	mov	r0, r7
 80038dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	6922      	ldr	r2, [r4, #16]
 80038e2:	b2f6      	uxtb	r6, r6
 80038e4:	1a98      	subs	r0, r3, r2
 80038e6:	6963      	ldr	r3, [r4, #20]
 80038e8:	4637      	mov	r7, r6
 80038ea:	4283      	cmp	r3, r0
 80038ec:	dc05      	bgt.n	80038fa <__swbuf_r+0x4e>
 80038ee:	4621      	mov	r1, r4
 80038f0:	4628      	mov	r0, r5
 80038f2:	f7ff ffb3 	bl	800385c <_fflush_r>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d1ed      	bne.n	80038d6 <__swbuf_r+0x2a>
 80038fa:	68a3      	ldr	r3, [r4, #8]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	60a3      	str	r3, [r4, #8]
 8003900:	6823      	ldr	r3, [r4, #0]
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	6022      	str	r2, [r4, #0]
 8003906:	701e      	strb	r6, [r3, #0]
 8003908:	6962      	ldr	r2, [r4, #20]
 800390a:	1c43      	adds	r3, r0, #1
 800390c:	429a      	cmp	r2, r3
 800390e:	d004      	beq.n	800391a <__swbuf_r+0x6e>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	07db      	lsls	r3, r3, #31
 8003914:	d5e1      	bpl.n	80038da <__swbuf_r+0x2e>
 8003916:	2e0a      	cmp	r6, #10
 8003918:	d1df      	bne.n	80038da <__swbuf_r+0x2e>
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f7ff ff9d 	bl	800385c <_fflush_r>
 8003922:	2800      	cmp	r0, #0
 8003924:	d0d9      	beq.n	80038da <__swbuf_r+0x2e>
 8003926:	e7d6      	b.n	80038d6 <__swbuf_r+0x2a>

08003928 <__swsetup_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4b29      	ldr	r3, [pc, #164]	@ (80039d0 <__swsetup_r+0xa8>)
 800392c:	4605      	mov	r5, r0
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	460c      	mov	r4, r1
 8003932:	b118      	cbz	r0, 800393c <__swsetup_r+0x14>
 8003934:	6a03      	ldr	r3, [r0, #32]
 8003936:	b90b      	cbnz	r3, 800393c <__swsetup_r+0x14>
 8003938:	f7ff fa40 	bl	8002dbc <__sinit>
 800393c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003940:	0719      	lsls	r1, r3, #28
 8003942:	d422      	bmi.n	800398a <__swsetup_r+0x62>
 8003944:	06da      	lsls	r2, r3, #27
 8003946:	d407      	bmi.n	8003958 <__swsetup_r+0x30>
 8003948:	2209      	movs	r2, #9
 800394a:	602a      	str	r2, [r5, #0]
 800394c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	81a3      	strh	r3, [r4, #12]
 8003956:	e033      	b.n	80039c0 <__swsetup_r+0x98>
 8003958:	0758      	lsls	r0, r3, #29
 800395a:	d512      	bpl.n	8003982 <__swsetup_r+0x5a>
 800395c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800395e:	b141      	cbz	r1, 8003972 <__swsetup_r+0x4a>
 8003960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003964:	4299      	cmp	r1, r3
 8003966:	d002      	beq.n	800396e <__swsetup_r+0x46>
 8003968:	4628      	mov	r0, r5
 800396a:	f7ff fb2f 	bl	8002fcc <_free_r>
 800396e:	2300      	movs	r3, #0
 8003970:	6363      	str	r3, [r4, #52]	@ 0x34
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003978:	81a3      	strh	r3, [r4, #12]
 800397a:	2300      	movs	r3, #0
 800397c:	6063      	str	r3, [r4, #4]
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	6023      	str	r3, [r4, #0]
 8003982:	89a3      	ldrh	r3, [r4, #12]
 8003984:	f043 0308 	orr.w	r3, r3, #8
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	6923      	ldr	r3, [r4, #16]
 800398c:	b94b      	cbnz	r3, 80039a2 <__swsetup_r+0x7a>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003998:	d003      	beq.n	80039a2 <__swsetup_r+0x7a>
 800399a:	4621      	mov	r1, r4
 800399c:	4628      	mov	r0, r5
 800399e:	f000 f85c 	bl	8003a5a <__smakebuf_r>
 80039a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039a6:	f013 0201 	ands.w	r2, r3, #1
 80039aa:	d00a      	beq.n	80039c2 <__swsetup_r+0x9a>
 80039ac:	2200      	movs	r2, #0
 80039ae:	60a2      	str	r2, [r4, #8]
 80039b0:	6962      	ldr	r2, [r4, #20]
 80039b2:	4252      	negs	r2, r2
 80039b4:	61a2      	str	r2, [r4, #24]
 80039b6:	6922      	ldr	r2, [r4, #16]
 80039b8:	b942      	cbnz	r2, 80039cc <__swsetup_r+0xa4>
 80039ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039be:	d1c5      	bne.n	800394c <__swsetup_r+0x24>
 80039c0:	bd38      	pop	{r3, r4, r5, pc}
 80039c2:	0799      	lsls	r1, r3, #30
 80039c4:	bf58      	it	pl
 80039c6:	6962      	ldrpl	r2, [r4, #20]
 80039c8:	60a2      	str	r2, [r4, #8]
 80039ca:	e7f4      	b.n	80039b6 <__swsetup_r+0x8e>
 80039cc:	2000      	movs	r0, #0
 80039ce:	e7f7      	b.n	80039c0 <__swsetup_r+0x98>
 80039d0:	20000018 	.word	0x20000018

080039d4 <_sbrk_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	2300      	movs	r3, #0
 80039d8:	4d05      	ldr	r5, [pc, #20]	@ (80039f0 <_sbrk_r+0x1c>)
 80039da:	4604      	mov	r4, r0
 80039dc:	4608      	mov	r0, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	f7fd f90a 	bl	8000bf8 <_sbrk>
 80039e4:	1c43      	adds	r3, r0, #1
 80039e6:	d102      	bne.n	80039ee <_sbrk_r+0x1a>
 80039e8:	682b      	ldr	r3, [r5, #0]
 80039ea:	b103      	cbz	r3, 80039ee <_sbrk_r+0x1a>
 80039ec:	6023      	str	r3, [r4, #0]
 80039ee:	bd38      	pop	{r3, r4, r5, pc}
 80039f0:	20000258 	.word	0x20000258

080039f4 <memchr>:
 80039f4:	4603      	mov	r3, r0
 80039f6:	b510      	push	{r4, lr}
 80039f8:	b2c9      	uxtb	r1, r1
 80039fa:	4402      	add	r2, r0
 80039fc:	4293      	cmp	r3, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	d101      	bne.n	8003a06 <memchr+0x12>
 8003a02:	2000      	movs	r0, #0
 8003a04:	e003      	b.n	8003a0e <memchr+0x1a>
 8003a06:	7804      	ldrb	r4, [r0, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	428c      	cmp	r4, r1
 8003a0c:	d1f6      	bne.n	80039fc <memchr+0x8>
 8003a0e:	bd10      	pop	{r4, pc}

08003a10 <__swhatbuf_r>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	460c      	mov	r4, r1
 8003a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a18:	4615      	mov	r5, r2
 8003a1a:	2900      	cmp	r1, #0
 8003a1c:	461e      	mov	r6, r3
 8003a1e:	b096      	sub	sp, #88	@ 0x58
 8003a20:	da0c      	bge.n	8003a3c <__swhatbuf_r+0x2c>
 8003a22:	89a3      	ldrh	r3, [r4, #12]
 8003a24:	2100      	movs	r1, #0
 8003a26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a2a:	bf14      	ite	ne
 8003a2c:	2340      	movne	r3, #64	@ 0x40
 8003a2e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a32:	2000      	movs	r0, #0
 8003a34:	6031      	str	r1, [r6, #0]
 8003a36:	602b      	str	r3, [r5, #0]
 8003a38:	b016      	add	sp, #88	@ 0x58
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	466a      	mov	r2, sp
 8003a3e:	f000 f849 	bl	8003ad4 <_fstat_r>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	dbed      	blt.n	8003a22 <__swhatbuf_r+0x12>
 8003a46:	9901      	ldr	r1, [sp, #4]
 8003a48:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a4c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a50:	4259      	negs	r1, r3
 8003a52:	4159      	adcs	r1, r3
 8003a54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a58:	e7eb      	b.n	8003a32 <__swhatbuf_r+0x22>

08003a5a <__smakebuf_r>:
 8003a5a:	898b      	ldrh	r3, [r1, #12]
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	079d      	lsls	r5, r3, #30
 8003a60:	4606      	mov	r6, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	d507      	bpl.n	8003a76 <__smakebuf_r+0x1c>
 8003a66:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a6a:	6023      	str	r3, [r4, #0]
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	2301      	movs	r3, #1
 8003a70:	6163      	str	r3, [r4, #20]
 8003a72:	b003      	add	sp, #12
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	466a      	mov	r2, sp
 8003a78:	ab01      	add	r3, sp, #4
 8003a7a:	f7ff ffc9 	bl	8003a10 <__swhatbuf_r>
 8003a7e:	9f00      	ldr	r7, [sp, #0]
 8003a80:	4605      	mov	r5, r0
 8003a82:	4639      	mov	r1, r7
 8003a84:	4630      	mov	r0, r6
 8003a86:	f7ff fb0b 	bl	80030a0 <_malloc_r>
 8003a8a:	b948      	cbnz	r0, 8003aa0 <__smakebuf_r+0x46>
 8003a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a90:	059a      	lsls	r2, r3, #22
 8003a92:	d4ee      	bmi.n	8003a72 <__smakebuf_r+0x18>
 8003a94:	f023 0303 	bic.w	r3, r3, #3
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	e7e2      	b.n	8003a66 <__smakebuf_r+0xc>
 8003aa0:	89a3      	ldrh	r3, [r4, #12]
 8003aa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003aa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aaa:	81a3      	strh	r3, [r4, #12]
 8003aac:	9b01      	ldr	r3, [sp, #4]
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	b15b      	cbz	r3, 8003aca <__smakebuf_r+0x70>
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab8:	f000 f81e 	bl	8003af8 <_isatty_r>
 8003abc:	b128      	cbz	r0, 8003aca <__smakebuf_r+0x70>
 8003abe:	89a3      	ldrh	r3, [r4, #12]
 8003ac0:	f023 0303 	bic.w	r3, r3, #3
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	81a3      	strh	r3, [r4, #12]
 8003aca:	89a3      	ldrh	r3, [r4, #12]
 8003acc:	431d      	orrs	r5, r3
 8003ace:	81a5      	strh	r5, [r4, #12]
 8003ad0:	e7cf      	b.n	8003a72 <__smakebuf_r+0x18>
	...

08003ad4 <_fstat_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	4d06      	ldr	r5, [pc, #24]	@ (8003af4 <_fstat_r+0x20>)
 8003ada:	4604      	mov	r4, r0
 8003adc:	4608      	mov	r0, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	f7fd f863 	bl	8000bac <_fstat>
 8003ae6:	1c43      	adds	r3, r0, #1
 8003ae8:	d102      	bne.n	8003af0 <_fstat_r+0x1c>
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	b103      	cbz	r3, 8003af0 <_fstat_r+0x1c>
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	20000258 	.word	0x20000258

08003af8 <_isatty_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	2300      	movs	r3, #0
 8003afc:	4d05      	ldr	r5, [pc, #20]	@ (8003b14 <_isatty_r+0x1c>)
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	f7fd f861 	bl	8000bca <_isatty>
 8003b08:	1c43      	adds	r3, r0, #1
 8003b0a:	d102      	bne.n	8003b12 <_isatty_r+0x1a>
 8003b0c:	682b      	ldr	r3, [r5, #0]
 8003b0e:	b103      	cbz	r3, 8003b12 <_isatty_r+0x1a>
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	bd38      	pop	{r3, r4, r5, pc}
 8003b14:	20000258 	.word	0x20000258

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
