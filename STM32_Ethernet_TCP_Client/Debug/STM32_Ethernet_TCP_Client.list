
STM32_Ethernet_TCP_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e840  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e70  0800ea24  0800ea24  0000fa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010894  08010894  0001206c  2**0
                  CONTENTS
  4 .ARM          00000008  08010894  08010894  00011894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801089c  0801089c  0001206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801089c  0801089c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108a0  080108a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080108a4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008150  2000006c  08010910  0001206c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200081bc  08010910  000121bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001206c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b54  00000000  00000000  00012095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c2d  00000000  00000000  0002bbe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc5  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae2f  00000000  00000000  00032bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000240e5  00000000  00000000  0005da24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cef81  00000000  00000000  00081b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150a8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  00150ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00156414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ea0c 	.word	0x0800ea0c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000070 	.word	0x20000070
 8000220:	0800ea0c 	.word	0x0800ea0c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fc7c 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f816 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f8ce 	bl	80006bc <MX_GPIO_Init>
  MX_LWIP_Init();
 8000520:	f003 fa14 	bl	800394c <MX_LWIP_Init>
  MX_TIM3_Init();
 8000524:	f000 f87c 	bl	8000620 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <main+0x30>)
 800052a:	f002 fe47 	bl	80031bc <HAL_TIM_Base_Start_IT>

    tcp_client_init();
 800052e:	f000 fa9b 	bl	8000a68 <tcp_client_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	ethernetif_input(&gnetif);
 8000532:	4804      	ldr	r0, [pc, #16]	@ (8000544 <main+0x34>)
 8000534:	f003 fe04 	bl	8004140 <ethernetif_input>
	sys_check_timeouts();
 8000538:	f00a fd42 	bl	800afc0 <sys_check_timeouts>
	ethernetif_input(&gnetif);
 800053c:	bf00      	nop
 800053e:	e7f8      	b.n	8000532 <main+0x22>
 8000540:	20000088 	.word	0x20000088
 8000544:	200000e4 	.word	0x200000e4

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0318 	add.w	r3, r7, #24
 8000552:	2238      	movs	r2, #56	@ 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f00d fa85 	bl	800da66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000574:	2304      	movs	r3, #4
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800057c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800058c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000590:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000596:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800059a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800059c:	2340      	movs	r3, #64	@ 0x40
 800059e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0318 	add.w	r3, r7, #24
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 f89d 	bl	80026e4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80005b0:	f000 f8d4 	bl	800075c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2102      	movs	r1, #2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fb9e 	bl	8002d10 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f8bf 	bl	800075c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80005de:	2200      	movs	r2, #0
 80005e0:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 80005e4:	2000      	movs	r0, #0
 80005e6:	f002 fc7d 	bl	8002ee4 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <SystemClock_Config+0xd0>)
 80005ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005f2:	4a09      	ldr	r2, [pc, #36]	@ (8000618 <SystemClock_Config+0xd0>)
 80005f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 80005fa:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <SystemClock_Config+0xd0>)
 80005fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000602:	4a05      	ldr	r2, [pc, #20]	@ (8000618 <SystemClock_Config+0xd0>)
 8000604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000608:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800060a:	4b04      	ldr	r3, [pc, #16]	@ (800061c <SystemClock_Config+0xd4>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	42420070 	.word	0x42420070

08000620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	463b      	mov	r3, r7
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_TIM3_Init+0x94>)
 800063e:	4a1e      	ldr	r2, [pc, #120]	@ (80006b8 <MX_TIM3_Init+0x98>)
 8000640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000642:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <MX_TIM3_Init+0x94>)
 8000644:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_TIM3_Init+0x94>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_TIM3_Init+0x94>)
 8000652:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MX_TIM3_Init+0x94>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <MX_TIM3_Init+0x94>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000664:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <MX_TIM3_Init+0x94>)
 8000666:	f002 fd59 	bl	800311c <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000670:	f000 f874 	bl	800075c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <MX_TIM3_Init+0x94>)
 8000682:	f002 fefd 	bl	8003480 <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800068c:	f000 f866 	bl	800075c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_TIM3_Init+0x94>)
 800069e:	f003 f8dd 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f858 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000088 	.word	0x20000088
 80006b8:	40000400 	.word	0x40000400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a19      	ldr	r2, [pc, #100]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_GPIO_Init+0x98>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_GPIO_Init+0x98>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000718:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_GPIO_Init+0x98>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <MX_GPIO_Init+0x98>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_GPIO_Init+0x98>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0320 	and.w	r3, r3, #32
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000736:	2302      	movs	r3, #2
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	@ (8000758 <MX_GPIO_Init+0x9c>)
 8000746:	f001 fe49 	bl	80023dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	40010800 	.word	0x40010800

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <Error_Handler+0x8>

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a14      	ldr	r2, [pc, #80]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6193      	str	r3, [r2, #24]
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <HAL_MspInit+0x5c>)
 800078c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000790:	61d3      	str	r3, [r2, #28]
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <HAL_MspInit+0x60>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_MspInit+0x60>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <HAL_TIM_Base_MspInit+0x44>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d113      	bne.n	8000806 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_TIM_Base_MspInit+0x48>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	201d      	movs	r0, #29
 80007fc:	f000 fc65 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000800:	201d      	movs	r0, #29
 8000802:	f000 fc7e 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40000400 	.word	0x40000400
 8000814:	40021000 	.word	0x40021000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 fb18 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000874:	4802      	ldr	r0, [pc, #8]	@ (8000880 <TIM3_IRQHandler+0x10>)
 8000876:	f002 fcfb 	bl	8003270 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000088 	.word	0x20000088

08000884 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000888:	4802      	ldr	r0, [pc, #8]	@ (8000894 <ETH_IRQHandler+0x10>)
 800088a:	f000 fffe 	bl	800188a <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20004960 	.word	0x20004960

08000898 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e00a      	b.n	80008c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008aa:	f3af 8000 	nop.w
 80008ae:	4601      	mov	r1, r0
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	1c5a      	adds	r2, r3, #1
 80008b4:	60ba      	str	r2, [r7, #8]
 80008b6:	b2ca      	uxtb	r2, r1
 80008b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	3301      	adds	r3, #1
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dbf0      	blt.n	80008aa <_read+0x12>
  }

  return len;
 80008c8:	687b      	ldr	r3, [r7, #4]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e009      	b.n	80008f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	60ba      	str	r2, [r7, #8]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	3301      	adds	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	dbf1      	blt.n	80008e4 <_write+0x12>
  }
  return len;
 8000900:	687b      	ldr	r3, [r7, #4]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <_close>:

int _close(int file)
{
 800090a:	b480      	push	{r7}
 800090c:	b083      	sub	sp, #12
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000930:	605a      	str	r2, [r3, #4]
  return 0;
 8000932:	2300      	movs	r3, #0
}
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <_isatty>:

int _isatty(int file)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr

08000952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
	...

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d205      	bcs.n	80009a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800099c:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <_sbrk+0x6c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e009      	b.n	80009bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <_sbrk+0x64>)
 80009b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	371c      	adds	r7, #28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20010000 	.word	0x20010000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	200000d0 	.word	0x200000d0
 80009d4:	200081c0 	.word	0x200081c0
 80009d8:	200081ac 	.word	0x200081ac

080009dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <HAL_TIM_PeriodElapsedCallback>:
struct tcp_client_struct *esTx = 0;

struct tcp_pcb *pcbTx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b09d      	sub	sp, #116	@ 0x74
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	char buf[100];

	/* Prepare the first message to send to the server */
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 80009f0:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4918      	ldr	r1, [pc, #96]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00c ffc0 	bl	800d980 <siprintf>
 8000a00:	66f8      	str	r0, [r7, #108]	@ 0x6c

	if (counter !=0)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d022      	beq.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		/* allocate pbuf */
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a10:	6814      	ldr	r4, [r2, #0]
 8000a12:	2203      	movs	r2, #3
 8000a14:	4619      	mov	r1, r3
 8000a16:	2000      	movs	r0, #0
 8000a18:	f004 fa06 	bl	8004e28 <pbuf_alloc>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	60a3      	str	r3, [r4, #8]


		/* copy data to pbuf */
		pbuf_take(esTx->p, (char*)buf, len);
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a28:	b292      	uxth	r2, r2
 8000a2a:	f107 0108 	add.w	r1, r7, #8
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 ffda 	bl	80059e8 <pbuf_take>

		tcp_client_send(pcbTx, esTx);
 8000a34:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f925 	bl	8000c8e <tcp_client_send>

		pbuf_free(esTx->p);
 8000a44:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f004 fd64 	bl	8005518 <pbuf_free>
	}

}
 8000a50:	bf00      	nop
 8000a52:	3774      	adds	r7, #116	@ 0x74
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	200000d4 	.word	0x200000d4
 8000a5c:	0800ea24 	.word	0x0800ea24
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	200000dc 	.word	0x200000dc

08000a68 <tcp_client_init>:
2. connect to the server
3. start communicating
*/

void tcp_client_init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000a6e:	f006 fa01 	bl	8006e74 <tcp_new>
 8000a72:	6078      	str	r0, [r7, #4]

	/* 2. Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, 192, 168, 31, 181);
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <tcp_client_init+0x24>)
 8000a76:	603b      	str	r3, [r7, #0]
	tcp_connect(tpcb, &destIPADDR, 86, tcp_client_connected);
 8000a78:	4639      	mov	r1, r7
 8000a7a:	4b05      	ldr	r3, [pc, #20]	@ (8000a90 <tcp_client_init+0x28>)
 8000a7c:	2256      	movs	r2, #86	@ 0x56
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f005 fbca 	bl	8006218 <tcp_connect>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	b51fa8c0 	.word	0xb51fa8c0
 8000a90:	08000a95 	.word	0x08000a95

08000a94 <tcp_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t tcp_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000aa2:	200c      	movs	r0, #12
 8000aa4:	f003 fe74 	bl	8004790 <mem_malloc>
 8000aa8:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d023      	beq.n	8000af8 <tcp_client_connected+0x64>
  {
    es->state = ES_CONNECTED;
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000ac8:	6939      	ldr	r1, [r7, #16]
 8000aca:	68b8      	ldr	r0, [r7, #8]
 8000acc:	f006 f9da 	bl	8006e84 <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_client_recv);
 8000ad0:	490f      	ldr	r1, [pc, #60]	@ (8000b10 <tcp_client_connected+0x7c>)
 8000ad2:	68b8      	ldr	r0, [r7, #8]
 8000ad4:	f006 f9e6 	bl	8006ea4 <tcp_recv>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	490e      	ldr	r1, [pc, #56]	@ (8000b14 <tcp_client_connected+0x80>)
 8000adc:	68b8      	ldr	r0, [r7, #8]
 8000ade:	f006 fa45 	bl	8006f6c <tcp_poll>


    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, tcp_client_sent);
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <tcp_client_connected+0x84>)
 8000ae4:	68b8      	ldr	r0, [r7, #8]
 8000ae6:	f006 f9ff 	bl	8006ee8 <tcp_sent>

    /* handle the TCP data */
    tcp_client_handle(newpcb, es);
 8000aea:	6939      	ldr	r1, [r7, #16]
 8000aec:	68b8      	ldr	r0, [r7, #8]
 8000aee:	f000 f943 	bl	8000d78 <tcp_client_handle>

    ret_err = ERR_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	75fb      	strb	r3, [r7, #23]
 8000af6:	e005      	b.n	8000b04 <tcp_client_connected+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_client_connection_close(newpcb, es);
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	68b8      	ldr	r0, [r7, #8]
 8000afc:	f000 f915 	bl	8000d2a <tcp_client_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000b00:	23ff      	movs	r3, #255	@ 0xff
 8000b02:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08000b1d 	.word	0x08000b1d
 8000b14:	08000c0d 	.word	0x08000c0d
 8000b18:	08000c55 	.word	0x08000c55

08000b1c <tcp_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t tcp_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	70fb      	strb	r3, [r7, #3]
  struct tcp_client_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d105      	bne.n	8000b3c <tcp_client_recv+0x20>
 8000b30:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <tcp_client_recv+0xe4>)
 8000b32:	22e0      	movs	r2, #224	@ 0xe0
 8000b34:	4933      	ldr	r1, [pc, #204]	@ (8000c04 <tcp_client_recv+0xe8>)
 8000b36:	4834      	ldr	r0, [pc, #208]	@ (8000c08 <tcp_client_recv+0xec>)
 8000b38:	f00c ff10 	bl	800d95c <iprintf>

  es = (struct tcp_client_struct *)arg;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d10d      	bne.n	8000b62 <tcp_client_recv+0x46>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	2203      	movs	r2, #3
 8000b4a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d103      	bne.n	8000b5c <tcp_client_recv+0x40>
    {
       /* we're done sending, close connection */
       tcp_client_connection_close(tpcb, es);
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f000 f8e7 	bl	8000d2a <tcp_client_connection_close>
//      tcp_sent(tpcb, tcp_client_sent);

      /* send remaining data*/
//      tcp_client_send(tpcb, es);
    }
    ret_err = ERR_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
 8000b60:	e047      	b.n	8000bf2 <tcp_client_recv+0xd6>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <tcp_client_recv+0x66>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d005      	beq.n	8000b7c <tcp_client_recv+0x60>
    {
      es->p = NULL;
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f004 fcce 	bl	8005518 <pbuf_free>
    }
    ret_err = err;
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	75fb      	strb	r3, [r7, #23]
 8000b80:	e037      	b.n	8000bf2 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CONNECTED)
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d112      	bne.n	8000bb0 <tcp_client_recv+0x94>
  {
   /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, tcp_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	891b      	ldrh	r3, [r3, #8]
 8000b94:	4619      	mov	r1, r3
 8000b96:	68b8      	ldr	r0, [r7, #8]
 8000b98:	f005 faa0 	bl	80060dc <tcp_recved>

    /* handle the received data */
    tcp_client_handle(tpcb, es);
 8000b9c:	6939      	ldr	r1, [r7, #16]
 8000b9e:	68b8      	ldr	r0, [r7, #8]
 8000ba0:	f000 f8ea 	bl	8000d78 <tcp_client_handle>

    pbuf_free(p);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f004 fcb7 	bl	8005518 <pbuf_free>

    ret_err = ERR_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	75fb      	strb	r3, [r7, #23]
 8000bae:	e020      	b.n	8000bf2 <tcp_client_recv+0xd6>
  }
  else if(es->state == ES_CLOSING)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d10e      	bne.n	8000bd6 <tcp_client_recv+0xba>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	891b      	ldrh	r3, [r3, #8]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	68b8      	ldr	r0, [r7, #8]
 8000bc0:	f005 fa8c 	bl	80060dc <tcp_recved>
    es->p = NULL;
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f004 fca4 	bl	8005518 <pbuf_free>
    ret_err = ERR_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	75fb      	strb	r3, [r7, #23]
 8000bd4:	e00d      	b.n	8000bf2 <tcp_client_recv+0xd6>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	891b      	ldrh	r3, [r3, #8]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	68b8      	ldr	r0, [r7, #8]
 8000bde:	f005 fa7d 	bl	80060dc <tcp_recved>
    es->p = NULL;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f004 fc95 	bl	8005518 <pbuf_free>
    ret_err = ERR_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	0800ea44 	.word	0x0800ea44
 8000c04:	0800ea60 	.word	0x0800ea60
 8000c08:	0800ea6c 	.word	0x0800ea6c

08000c0c <tcp_client_poll>:


static err_t tcp_client_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_client_struct *es;

  es = (struct tcp_client_struct *)arg;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d00e      	beq.n	8000c3e <tcp_client_poll+0x32>
  {
    if (es->p != NULL)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d107      	bne.n	8000c38 <tcp_client_poll+0x2c>
//      tcp_client_send(tpcb, es);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d103      	bne.n	8000c38 <tcp_client_poll+0x2c>
      {
        /*  close tcp connection */
        tcp_client_connection_close(tpcb, es);
 8000c30:	68b9      	ldr	r1, [r7, #8]
 8000c32:	6838      	ldr	r0, [r7, #0]
 8000c34:	f000 f879 	bl	8000d2a <tcp_client_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e004      	b.n	8000c48 <tcp_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000c3e:	6838      	ldr	r0, [r7, #0]
 8000c40:	f005 f9f2 	bl	8006028 <tcp_abort>
    ret_err = ERR_ABRT;
 8000c44:	23f3      	movs	r3, #243	@ 0xf3
 8000c46:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <tcp_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t tcp_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	80fb      	strh	r3, [r7, #6]
  struct tcp_client_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_client_struct *)arg;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d107      	bne.n	8000c84 <tcp_client_sent+0x30>
//    tcp_client_send(tpcb, es);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d103      	bne.n	8000c84 <tcp_client_sent+0x30>
      tcp_client_connection_close(tpcb, es);
 8000c7c:	6979      	ldr	r1, [r7, #20]
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f000 f853 	bl	8000d2a <tcp_client_connection_close>
  }
  return ERR_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <tcp_client_send>:


/** A function to send the data to the server
  */
static void tcp_client_send(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000c9c:	e031      	b.n	8000d02 <tcp_client_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	895a      	ldrh	r2, [r3, #10]
 8000cac:	2301      	movs	r3, #1
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f008 ff06 	bl	8009ac0 <tcp_write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d118      	bne.n	8000cf2 <tcp_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	895b      	ldrh	r3, [r3, #10]
 8000cc4:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <tcp_client_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 fcc6 	bl	800566c <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000ce0:	6938      	ldr	r0, [r7, #16]
 8000ce2:	f004 fc19 	bl	8005518 <pbuf_free>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f7      	beq.n	8000ce0 <tcp_client_send+0x52>
 8000cf0:	e007      	b.n	8000d02 <tcp_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
 8000cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d102      	bne.n	8000d02 <tcp_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	609a      	str	r2, [r3, #8]
         (es->p != NULL) &&
 8000d02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10b      	bne.n	8000d22 <tcp_client_send+0x94>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d007      	beq.n	8000d22 <tcp_client_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	895a      	ldrh	r2, [r3, #10]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
         (es->p != NULL) &&
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d9bd      	bls.n	8000c9e <tcp_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <tcp_client_connection_close>:


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000d34:	2100      	movs	r1, #0
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f006 f8a4 	bl	8006e84 <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f006 f8d2 	bl	8006ee8 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000d44:	2100      	movs	r1, #0
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f006 f8ac 	bl	8006ea4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f006 f8ea 	bl	8006f28 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2100      	movs	r1, #0
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f006 f907 	bl	8006f6c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <tcp_client_connection_close+0x40>
  {
    mem_free(es);
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f003 fbd5 	bl	8004514 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f005 f892 	bl	8005e94 <tcp_close>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <tcp_client_handle>:

/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	60fb      	str	r3, [r7, #12]
	uint16_t inPort = tpcb->remote_port;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	8b1b      	ldrh	r3, [r3, #24]
 8000d8c:	82fb      	strh	r3, [r7, #22]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4618      	mov	r0, r3
 8000d94:	f00b fde6 	bl	800c964 <ip4addr_ntoa>
 8000d98:	6138      	str	r0, [r7, #16]

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <tcp_client_handle+0x40>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <tcp_client_handle+0x44>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]

	counter++;
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <tcp_client_handle+0x48>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <tcp_client_handle+0x48>)
 8000dae:	6013      	str	r3, [r2, #0]

}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000d8 	.word	0x200000d8
 8000dbc:	200000dc 	.word	0x200000dc
 8000dc0:	200000d4 	.word	0x200000d4

08000dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc4:	f7ff fe0a 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc8:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dca:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000de0:	4c09      	ldr	r4, [pc, #36]	@ (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000dee:	f00c fe89 	bl	800db04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000df2:	f7ff fb8d 	bl	8000510 <main>
  bx lr
 8000df6:	4770      	bx	lr
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e00:	080108a4 	.word	0x080108a4
  ldr r2, =_sbss
 8000e04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e08:	200081bc 	.word	0x200081bc

08000e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_2_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <HAL_Init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <HAL_Init+0x28>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 f947 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f808 	bl	8000e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e2c:	f7ff fc9c 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40022000 	.word	0x40022000

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x54>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x58>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f95f 	bl	800111e <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f000 f927 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <HAL_InitTick+0x5c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HAL_IncTick+0x20>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a03      	ldr	r2, [pc, #12]	@ (8000ebc <HAL_IncTick+0x20>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200000e0 	.word	0x200000e0

08000ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b02      	ldr	r3, [pc, #8]	@ (8000ed0 <HAL_GetTick+0x10>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr
 8000ed0:	200000e0 	.word	0x200000e0

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff fff0 	bl	8000ec0 <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffe0 	bl	8000ec0 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4906      	ldr	r1, [pc, #24]	@ (8000fb4 <__NVIC_EnableIRQ+0x34>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff90 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff2d 	bl	8000f1c <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff42 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff35 	bl	8000f80 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001148:	4ba4      	ldr	r3, [pc, #656]	@ (80013dc <HAL_ETH_Init+0x2a4>)
 800114a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e153      	b.n	8001406 <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f002 fd10 	bl	8003b98 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8001178:	4b99      	ldr	r3, [pc, #612]	@ (80013e0 <HAL_ETH_Init+0x2a8>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4a98      	ldr	r2, [pc, #608]	@ (80013e0 <HAL_ETH_Init+0x2a8>)
 800117e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001182:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8001184:	4b96      	ldr	r3, [pc, #600]	@ (80013e0 <HAL_ETH_Init+0x2a8>)
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a1b      	ldr	r3, [r3, #32]
 800118c:	4994      	ldr	r1, [pc, #592]	@ (80013e0 <HAL_ETH_Init+0x2a8>)
 800118e:	4313      	orrs	r3, r2
 8001190:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80011a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011aa:	f7ff fe89 	bl	8000ec0 <HAL_GetTick>
 80011ae:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011b0:	e011      	b.n	80011d6 <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80011b2:	f7ff fe85 	bl	8000ec0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80011c0:	d909      	bls.n	80011d6 <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e117      	b.n	8001406 <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e4      	bne.n	80011b2 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f023 031c 	bic.w	r3, r3, #28
 80011f6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011f8:	f001 ff68 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80011fc:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4a78      	ldr	r2, [pc, #480]	@ (80013e4 <HAL_ETH_Init+0x2ac>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d908      	bls.n	8001218 <HAL_ETH_Init+0xe0>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4a77      	ldr	r2, [pc, #476]	@ (80013e8 <HAL_ETH_Init+0x2b0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d804      	bhi.n	8001218 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e00b      	b.n	8001230 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	4a73      	ldr	r2, [pc, #460]	@ (80013e8 <HAL_ETH_Init+0x2b0>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d907      	bls.n	8001230 <HAL_ETH_Init+0xf8>
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	4a6e      	ldr	r2, [pc, #440]	@ (80013dc <HAL_ETH_Init+0x2a4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d203      	bcs.n	8001230 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f043 030c 	orr.w	r3, r3, #12
 800122e:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001238:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fc0a 	bl	8001a58 <HAL_ETH_WritePHYRegister>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fdbf 	bl	8001dd4 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0d1      	b.n	8001406 <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001262:	20ff      	movs	r0, #255	@ 0xff
 8001264:	f7ff fe36 	bl	8000ed4 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8096 	beq.w	800139e <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001272:	f7ff fe25 	bl	8000ec0 <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	461a      	mov	r2, r3
 800127e:	2101      	movs	r1, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb81 	bl	8001988 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001286:	f7ff fe1b 	bl	8000ec0 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d90f      	bls.n	80012b8 <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800129c:	6939      	ldr	r1, [r7, #16]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fd98 	bl	8001dd4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0a6      	b.n	8001406 <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0da      	beq.n	8001278 <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fbc5 	bl	8001a58 <HAL_ETH_WritePHYRegister>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fd7a 	bl	8001dd4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e08c      	b.n	8001406 <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fde8 	bl	8000ec0 <HAL_GetTick>
 80012f0:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	461a      	mov	r2, r3
 80012f8:	2101      	movs	r1, #1
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fb44 	bl	8001988 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001300:	f7ff fdde 	bl	8000ec0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d90f      	bls.n	8001332 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fd5b 	bl	8001dd4 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e069      	b.n	8001406 <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0da      	beq.n	80012f2 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	461a      	mov	r2, r3
 8001342:	2110      	movs	r1, #16
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 fb1f 	bl	8001988 <HAL_ETH_ReadPHYRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fd3c 	bl	8001dd4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e04e      	b.n	8001406 <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	e002      	b.n	8001382 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	e02f      	b.n	80013f4 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e02a      	b.n	80013f4 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013ae:	4313      	orrs	r3, r2
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 fb4e 	bl	8001a58 <HAL_ETH_WritePHYRegister>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d014      	beq.n	80013ec <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013c6:	6939      	ldr	r1, [r7, #16]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fd03 	bl	8001dd4 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e015      	b.n	8001406 <HAL_ETH_Init+0x2ce>
 80013da:	bf00      	nop
 80013dc:	03938700 	.word	0x03938700
 80013e0:	40010000 	.word	0x40010000
 80013e4:	01312cff 	.word	0x01312cff
 80013e8:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013ec:	f640 70ff 	movw	r0, #4095	@ 0xfff
 80013f0:	f7ff fd70 	bl	8000ed4 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013f4:	6939      	ldr	r1, [r7, #16]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fcec 	bl	8001dd4 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop

08001410 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <HAL_ETH_DMATxDescListInit+0x20>
 800142c:	2302      	movs	r3, #2
 800142e:	e051      	b.n	80014d4 <HAL_ETH_DMATxDescListInit+0xc4>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e030      	b.n	80014ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	4413      	add	r3, r2
 8001454:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800145c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001464:	fb02 f303 	mul.w	r3, r2, r3
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	461a      	mov	r2, r3
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d105      	bne.n	8001486 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	d208      	bcs.n	80014a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	461a      	mov	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e002      	b.n	80014a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3301      	adds	r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3ca      	bcc.n	800144c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014c0:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014de:	b480      	push	{r7}
 80014e0:	b087      	sub	sp, #28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_ETH_DMARxDescListInit+0x20>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e055      	b.n	80015aa <HAL_ETH_DMARxDescListInit+0xcc>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2202      	movs	r2, #2
 800150a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e034      	b.n	8001584 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	4413      	add	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800152a:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001532:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800153a:	fb02 f303 	mul.w	r3, r2, r3
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	461a      	mov	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	3b01      	subs	r3, #1
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	429a      	cmp	r2, r3
 8001564:	d208      	bcs.n	8001578 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	461a      	mov	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	e002      	b.n	800157e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3c6      	bcc.n	800151a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001596:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_ETH_TransmitFrame+0x24>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e0cc      	b.n	8001772 <HAL_ETH_TransmitFrame+0x1be>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0b7      	b.n	8001772 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	da09      	bge.n	8001620 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2212      	movs	r2, #18
 8001610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0a8      	b.n	8001772 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001626:	4293      	cmp	r3, r2
 8001628:	d915      	bls.n	8001656 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	4a53      	ldr	r2, [pc, #332]	@ (800177c <HAL_ETH_TransmitFrame+0x1c8>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0a9b      	lsrs	r3, r3, #10
 8001634:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	4b50      	ldr	r3, [pc, #320]	@ (800177c <HAL_ETH_TransmitFrame+0x1c8>)
 800163a:	fba3 1302 	umull	r1, r3, r3, r2
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e001      	b.n	800165a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d11c      	bne.n	800169a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800166e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800167a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800168a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	461a      	mov	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001698:	e04b      	b.n	8001732 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	e044      	b.n	800172a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016aa:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016ae:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016c0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016c4:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80016ce:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d116      	bne.n	8001708 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016e4:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016e8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	4a24      	ldr	r2, [pc, #144]	@ (8001780 <HAL_ETH_TransmitFrame+0x1cc>)
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80016fa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001706:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001716:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	461a      	mov	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	3301      	adds	r3, #1
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	429a      	cmp	r2, r3
 8001730:	d3b6      	bcc.n	80016a0 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174c:	461a      	mov	r2, r3
 800174e:	2304      	movs	r3, #4
 8001750:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800175a:	461a      	mov	r2, r3
 800175c:	2300      	movs	r3, #0
 800175e:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr
 800177c:	ac02b00b 	.word	0xac02b00b
 8001780:	fffffa0c 	.word	0xfffffa0c

08001784 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001796:	2b01      	cmp	r3, #1
 8001798:	d101      	bne.n	800179e <HAL_ETH_GetReceivedFrame+0x1a>
 800179a:	2302      	movs	r3, #2
 800179c:	e070      	b.n	8001880 <HAL_ETH_GetReceivedFrame+0xfc>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db5a      	blt.n	800186e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d030      	beq.n	8001828 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d103      	bne.n	80017e0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017f4:	3b04      	subs	r3, #4
 80017f6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	e02b      	b.n	8001880 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001832:	2b00      	cmp	r3, #0
 8001834:	d010      	beq.n	8001858 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	461a      	mov	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	@ 0x28
 8001856:	e00a      	b.n	800186e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	461a      	mov	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d112      	bne.n	80018ca <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f85d 	bl	8001964 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b2:	461a      	mov	r2, r3
 80018b4:	2340      	movs	r3, #64	@ 0x40
 80018b6:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018c8:	e01a      	b.n	8001900 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d111      	bne.n	8001900 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f838 	bl	8001952 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ea:	461a      	mov	r2, r3
 80018ec:	2301      	movs	r3, #1
 80018ee:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001908:	461a      	mov	r2, r3
 800190a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800190e:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001922:	d112      	bne.n	800194a <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f826 	bl	8001976 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001932:	461a      	mov	r2, r3
 8001934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001938:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	460b      	mov	r3, r1
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b82      	cmp	r3, #130	@ 0x82
 80019a8:	d101      	bne.n	80019ae <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
 80019ac:	e050      	b.n	8001a50 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2282      	movs	r2, #130	@ 0x82
 80019b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 031c 	and.w	r3, r3, #28
 80019c4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8a1b      	ldrh	r3, [r3, #16]
 80019ca:	02db      	lsls	r3, r3, #11
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	019b      	lsls	r3, r3, #6
 80019d8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fa:	f7ff fa61 	bl	8000ec0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a00:	e015      	b.n	8001a2e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a02:	f7ff fa5d 	bl	8000ec0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a10:	d309      	bcc.n	8001a26 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e014      	b.n	8001a50 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e4      	bne.n	8001a02 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	460b      	mov	r3, r1
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b42      	cmp	r3, #66	@ 0x42
 8001a78:	d101      	bne.n	8001a7e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e04e      	b.n	8001b1c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2242      	movs	r2, #66	@ 0x42
 8001a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f003 031c 	and.w	r3, r3, #28
 8001a94:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8a1b      	ldrh	r3, [r3, #16]
 8001a9a:	02db      	lsls	r3, r3, #11
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	019b      	lsls	r3, r3, #6
 8001aa8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad4:	f7ff f9f4 	bl	8000ec0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ada:	e015      	b.n	8001b08 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001adc:	f7ff f9f0 	bl	8000ec0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d309      	bcc.n	8001b00 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e00d      	b.n	8001b1c <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e4      	bne.n	8001adc <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3718      	adds	r7, #24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_ETH_Start+0x16>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e01f      	b.n	8001b7a <HAL_ETH_Start+0x56>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fb3a 	bl	80021c4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fb71 	bl	8002238 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fbfc 	bl	8002354 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fba5 	bl	80022ac <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 fbcc 	bl	8002300 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ETH_Stop+0x16>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e01f      	b.n	8001bd8 <HAL_ETH_Stop+0x56>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fb94 	bl	80022d6 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fbbb 	bl	800232a <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fb5c 	bl	8002272 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fbca 	bl	8002354 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fb1c 	bl	80021fe <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_ETH_ConfigMAC+0x1c>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e0e4      	b.n	8001dc6 <HAL_ETH_ConfigMAC+0x1e6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80b1 	beq.w	8001d76 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001dd0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c2c:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001c32:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001c38:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001c3e:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001c44:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001c4a:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001c50:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001c56:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001c5c:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001c62:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8001c68:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 8001c6e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff f924 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001c9c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8001ca2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8001ca8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 8001cae:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8001cb4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cc6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001cc8:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f7ff f8fe 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cf2:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d10:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 8001d16:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 8001d1c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 8001d22:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 8001d28:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff f8c7 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d66:	2001      	movs	r0, #1
 8001d68:	f7ff f8b4 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	61da      	str	r2, [r3, #28]
 8001d74:	e01e      	b.n	8001db4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001d84:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff f894 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	ff20810f 	.word	0xff20810f

08001dd4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0b0      	sub	sp, #192	@ 0xc0
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001df0:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001df8:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e02:	2300      	movs	r3, #0
 8001e04:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e20:	e001      	b.n	8001e26 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e2a:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e30:	2300      	movs	r3, #0
 8001e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e40:	2340      	movs	r3, #64	@ 0x40
 8001e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ea8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001eac:	4ba8      	ldr	r3, [pc, #672]	@ (8002150 <ETH_MACDMAConfig+0x37c>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8001eb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001eb8:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8001ebc:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8001ec0:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001ec6:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001ec8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8001eca:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8001ece:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001ed4:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001ed6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8001ed8:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8001edc:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8001ee0:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001ee2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001ee4:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001ee6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8001ee8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001eea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001efc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7fe ffe3 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001f16:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f18:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8001f1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f1c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8001f20:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8001f26:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8001f2c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8001f32:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8001f38:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f3c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f44:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001f46:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe ffbe 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001f60:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001f6a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001f74:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001f84:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f88:	4013      	ands	r3, r2
 8001f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f92:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001f98:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8001f9e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8001fa4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8001faa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001fac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8001fb0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001fb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001fc4:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f7fe ff7f 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001fde:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001fe0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8001fe4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7fe ff6a 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002008:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800200e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002012:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002018:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800201c:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800202a:	2300      	movs	r3, #0
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800202e:	2304      	movs	r3, #4
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002032:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800203c:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800203e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002042:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 800204a:	2300      	movs	r3, #0
 800204c:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800204e:	2300      	movs	r3, #0
 8002050:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002064:	4b3b      	ldr	r3, [pc, #236]	@ (8002154 <ETH_MACDMAConfig+0x380>)
 8002066:	4013      	ands	r3, r2
 8002068:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800206c:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 800206e:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002070:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002072:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002074:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002076:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002078:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 800207a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 800207c:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800207e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8002080:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardErrorFrames |
 8002084:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002088:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 800208a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        dmainit.ReceiveThresholdControl |
 800208c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800208e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	461a      	mov	r2, r3
 80020a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020a6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7fe ff0c 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c4:	461a      	mov	r2, r3
 80020c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80020ca:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
                                        dmainit.FixedBurst |
 80020ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020d0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.FixedBurst |
 80020d4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80020d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020d8:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 80020de:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80020e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80020e2:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020f0:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fee7 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800210e:	461a      	mov	r2, r3
 8002110:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002114:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10d      	bne.n	800213a <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6812      	ldr	r2, [r2, #0]
 800212c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002134:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002138:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	461a      	mov	r2, r3
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f808 	bl	8002158 <ETH_MACAddressConfig>
}
 8002148:	bf00      	nop
 800214a:	37c0      	adds	r7, #192	@ 0xc0
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	ff20810f 	.word	0xff20810f
 8002154:	f8de3f23 	.word	0xf8de3f23

08002158 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3305      	adds	r3, #5
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	3204      	adds	r2, #4
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <ETH_MACAddressConfig+0x64>)
 800217a:	4413      	add	r3, r2
 800217c:	461a      	mov	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3303      	adds	r3, #3
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	061a      	lsls	r2, r3, #24
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3302      	adds	r3, #2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	041b      	lsls	r3, r3, #16
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	4313      	orrs	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <ETH_MACAddressConfig+0x68>)
 80021aa:	4413      	add	r3, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	6013      	str	r3, [r2, #0]
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40028040 	.word	0x40028040
 80021c0:	40028044 	.word	0x40028044

080021c4 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f000 f8d9 	bl	80023a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0208 	bic.w	r2, r2, #8
 8002218:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002222:	2001      	movs	r0, #1
 8002224:	f000 f8bc 	bl	80023a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	601a      	str	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0204 	orr.w	r2, r2, #4
 8002252:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f000 f89f 	bl	80023a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0204 	bic.w	r2, r2, #4
 800228c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 f882 	bl	80023a0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022ca:	6193      	str	r3, [r2, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022f4:	6193      	str	r3, [r2, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr

08002300 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	f043 0302 	orr.w	r3, r3, #2
 800231a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800231e:	6193      	str	r3, [r2, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002348:	6193      	str	r3, [r2, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002372:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002376:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002384:	2001      	movs	r0, #1
 8002386:	f000 f80b 	bl	80023a0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002394:	6193      	str	r3, [r2, #24]
}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <ETH_Delay+0x34>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0a      	ldr	r2, [pc, #40]	@ (80023d8 <ETH_Delay+0x38>)
 80023ae:	fba2 2303 	umull	r2, r3, r2, r3
 80023b2:	0a5b      	lsrs	r3, r3, #9
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023bc:	bf00      	nop
  }
  while (Delay --);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	60fa      	str	r2, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f9      	bne.n	80023bc <ETH_Delay+0x1c>
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	20000000 	.word	0x20000000
 80023d8:	10624dd3 	.word	0x10624dd3

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b08b      	sub	sp, #44	@ 0x2c
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ee:	e169      	b.n	80026c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80023f0:	2201      	movs	r2, #1
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	429a      	cmp	r2, r3
 800240a:	f040 8158 	bne.w	80026be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4a9a      	ldr	r2, [pc, #616]	@ (800267c <HAL_GPIO_Init+0x2a0>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d05e      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
 8002418:	4a98      	ldr	r2, [pc, #608]	@ (800267c <HAL_GPIO_Init+0x2a0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d875      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 800241e:	4a98      	ldr	r2, [pc, #608]	@ (8002680 <HAL_GPIO_Init+0x2a4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d058      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
 8002424:	4a96      	ldr	r2, [pc, #600]	@ (8002680 <HAL_GPIO_Init+0x2a4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d86f      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 800242a:	4a96      	ldr	r2, [pc, #600]	@ (8002684 <HAL_GPIO_Init+0x2a8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d052      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
 8002430:	4a94      	ldr	r2, [pc, #592]	@ (8002684 <HAL_GPIO_Init+0x2a8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d869      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 8002436:	4a94      	ldr	r2, [pc, #592]	@ (8002688 <HAL_GPIO_Init+0x2ac>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d04c      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
 800243c:	4a92      	ldr	r2, [pc, #584]	@ (8002688 <HAL_GPIO_Init+0x2ac>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d863      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 8002442:	4a92      	ldr	r2, [pc, #584]	@ (800268c <HAL_GPIO_Init+0x2b0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d046      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
 8002448:	4a90      	ldr	r2, [pc, #576]	@ (800268c <HAL_GPIO_Init+0x2b0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d85d      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 800244e:	2b12      	cmp	r3, #18
 8002450:	d82a      	bhi.n	80024a8 <HAL_GPIO_Init+0xcc>
 8002452:	2b12      	cmp	r3, #18
 8002454:	d859      	bhi.n	800250a <HAL_GPIO_Init+0x12e>
 8002456:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_GPIO_Init+0x80>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	080024d7 	.word	0x080024d7
 8002460:	080024b1 	.word	0x080024b1
 8002464:	080024c3 	.word	0x080024c3
 8002468:	08002505 	.word	0x08002505
 800246c:	0800250b 	.word	0x0800250b
 8002470:	0800250b 	.word	0x0800250b
 8002474:	0800250b 	.word	0x0800250b
 8002478:	0800250b 	.word	0x0800250b
 800247c:	0800250b 	.word	0x0800250b
 8002480:	0800250b 	.word	0x0800250b
 8002484:	0800250b 	.word	0x0800250b
 8002488:	0800250b 	.word	0x0800250b
 800248c:	0800250b 	.word	0x0800250b
 8002490:	0800250b 	.word	0x0800250b
 8002494:	0800250b 	.word	0x0800250b
 8002498:	0800250b 	.word	0x0800250b
 800249c:	0800250b 	.word	0x0800250b
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024cd 	.word	0x080024cd
 80024a8:	4a79      	ldr	r2, [pc, #484]	@ (8002690 <HAL_GPIO_Init+0x2b4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024ae:	e02c      	b.n	800250a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	623b      	str	r3, [r7, #32]
          break;
 80024b6:	e029      	b.n	800250c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	3304      	adds	r3, #4
 80024be:	623b      	str	r3, [r7, #32]
          break;
 80024c0:	e024      	b.n	800250c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	3308      	adds	r3, #8
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e01f      	b.n	800250c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	330c      	adds	r3, #12
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e01a      	b.n	800250c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024de:	2304      	movs	r3, #4
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e013      	b.n	800250c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024ec:	2308      	movs	r3, #8
 80024ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	611a      	str	r2, [r3, #16]
          break;
 80024f6:	e009      	b.n	800250c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024f8:	2308      	movs	r3, #8
 80024fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	615a      	str	r2, [r3, #20]
          break;
 8002502:	e003      	b.n	800250c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
          break;
 8002508:	e000      	b.n	800250c <HAL_GPIO_Init+0x130>
          break;
 800250a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2bff      	cmp	r3, #255	@ 0xff
 8002510:	d801      	bhi.n	8002516 <HAL_GPIO_Init+0x13a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	e001      	b.n	800251a <HAL_GPIO_Init+0x13e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3304      	adds	r3, #4
 800251a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2bff      	cmp	r3, #255	@ 0xff
 8002520:	d802      	bhi.n	8002528 <HAL_GPIO_Init+0x14c>
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	e002      	b.n	800252e <HAL_GPIO_Init+0x152>
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	3b08      	subs	r3, #8
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	210f      	movs	r1, #15
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	401a      	ands	r2, r3
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	431a      	orrs	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80b1 	beq.w	80026be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800255c:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <HAL_GPIO_Init+0x2b8>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a4c      	ldr	r2, [pc, #304]	@ (8002694 <HAL_GPIO_Init+0x2b8>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <HAL_GPIO_Init+0x2b8>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002574:	4a48      	ldr	r2, [pc, #288]	@ (8002698 <HAL_GPIO_Init+0x2bc>)
 8002576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002578:	089b      	lsrs	r3, r3, #2
 800257a:	3302      	adds	r3, #2
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a40      	ldr	r2, [pc, #256]	@ (800269c <HAL_GPIO_Init+0x2c0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d013      	beq.n	80025c8 <HAL_GPIO_Init+0x1ec>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a3f      	ldr	r2, [pc, #252]	@ (80026a0 <HAL_GPIO_Init+0x2c4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x1e8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3e      	ldr	r2, [pc, #248]	@ (80026a4 <HAL_GPIO_Init+0x2c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x1e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3d      	ldr	r2, [pc, #244]	@ (80026a8 <HAL_GPIO_Init+0x2cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x1e0>
 80025b8:	2303      	movs	r3, #3
 80025ba:	e006      	b.n	80025ca <HAL_GPIO_Init+0x1ee>
 80025bc:	2304      	movs	r3, #4
 80025be:	e004      	b.n	80025ca <HAL_GPIO_Init+0x1ee>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e002      	b.n	80025ca <HAL_GPIO_Init+0x1ee>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_GPIO_Init+0x1ee>
 80025c8:	2300      	movs	r3, #0
 80025ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025cc:	f002 0203 	and.w	r2, r2, #3
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	4093      	lsls	r3, r2
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025da:	492f      	ldr	r1, [pc, #188]	@ (8002698 <HAL_GPIO_Init+0x2bc>)
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	492c      	ldr	r1, [pc, #176]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]
 8002600:	e006      	b.n	8002610 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002602:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	43db      	mvns	r3, r3
 800260a:	4928      	ldr	r1, [pc, #160]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800260c:	4013      	ands	r3, r2
 800260e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800261c:	4b23      	ldr	r3, [pc, #140]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	4922      	ldr	r1, [pc, #136]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	60cb      	str	r3, [r1, #12]
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800262a:	4b20      	ldr	r3, [pc, #128]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	491e      	ldr	r1, [pc, #120]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002634:	4013      	ands	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002644:	4b19      	ldr	r3, [pc, #100]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	4918      	ldr	r1, [pc, #96]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002652:	4b16      	ldr	r3, [pc, #88]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	43db      	mvns	r3, r3
 800265a:	4914      	ldr	r1, [pc, #80]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800265c:	4013      	ands	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d021      	beq.n	80026b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	490e      	ldr	r1, [pc, #56]	@ (80026ac <HAL_GPIO_Init+0x2d0>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e021      	b.n	80026be <HAL_GPIO_Init+0x2e2>
 800267a:	bf00      	nop
 800267c:	10320000 	.word	0x10320000
 8002680:	10310000 	.word	0x10310000
 8002684:	10220000 	.word	0x10220000
 8002688:	10210000 	.word	0x10210000
 800268c:	10120000 	.word	0x10120000
 8002690:	10110000 	.word	0x10110000
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	40010800 	.word	0x40010800
 80026a0:	40010c00 	.word	0x40010c00
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	4909      	ldr	r1, [pc, #36]	@ (80026e0 <HAL_GPIO_Init+0x304>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	3301      	adds	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f47f ae8e 	bne.w	80023f0 <HAL_GPIO_Init+0x14>
  }
}
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	372c      	adds	r7, #44	@ 0x2c
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	40010400 	.word	0x40010400

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e304      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8087 	beq.w	8002812 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00c      	beq.n	800272a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002710:	4b8f      	ldr	r3, [pc, #572]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d112      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
 800271c:	4b8c      	ldr	r3, [pc, #560]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	4b89      	ldr	r3, [pc, #548]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d06c      	beq.n	8002810 <HAL_RCC_OscConfig+0x12c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d168      	bne.n	8002810 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e2de      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x76>
 800274c:	4b80      	ldr	r3, [pc, #512]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a7f      	ldr	r2, [pc, #508]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e02e      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b7b      	ldr	r3, [pc, #492]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a7a      	ldr	r2, [pc, #488]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002768:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b78      	ldr	r3, [pc, #480]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a77      	ldr	r2, [pc, #476]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002774:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xbc>
 8002786:	4b72      	ldr	r3, [pc, #456]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a71      	ldr	r2, [pc, #452]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b6f      	ldr	r3, [pc, #444]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xd4>
 80027a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6a      	ldr	r2, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b68      	ldr	r3, [pc, #416]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a67      	ldr	r2, [pc, #412]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fb7e 	bl	8000ec0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7fe fb7a 	bl	8000ec0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e292      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b5d      	ldr	r3, [pc, #372]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe4>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe fb6a 	bl	8000ec0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7fe fb66 	bl	8000ec0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e27e      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x10c>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d063      	beq.n	80028e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800281e:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282a:	4b49      	ldr	r3, [pc, #292]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11c      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
 8002836:	4b46      	ldr	r3, [pc, #280]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d116      	bne.n	8002870 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e252      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4939      	ldr	r1, [pc, #228]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286e:	e03a      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002878:	4b36      	ldr	r3, [pc, #216]	@ (8002954 <HAL_RCC_OscConfig+0x270>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287e:	f7fe fb1f 	bl	8000ec0 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fb1b 	bl	8000ec0 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e233      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002898:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4927      	ldr	r1, [pc, #156]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
 80028b8:	e015      	b.n	80028e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_RCC_OscConfig+0x270>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fafe 	bl	8000ec0 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7fe fafa 	bl	8000ec0 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e212      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028da:	4b1d      	ldr	r3, [pc, #116]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d03a      	beq.n	8002968 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d019      	beq.n	800292e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fa:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <HAL_RCC_OscConfig+0x274>)
 80028fc:	2201      	movs	r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe fade 	bl	8000ec0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7fe fada 	bl	8000ec0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1f2      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <HAL_RCC_OscConfig+0x26c>)
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002926:	2001      	movs	r0, #1
 8002928:	f000 fbda 	bl	80030e0 <RCC_Delay>
 800292c:	e01c      	b.n	8002968 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292e:	4b0a      	ldr	r3, [pc, #40]	@ (8002958 <HAL_RCC_OscConfig+0x274>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe fac4 	bl	8000ec0 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7fe fac0 	bl	8000ec0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d908      	bls.n	800295c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e1d8      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	42420000 	.word	0x42420000
 8002958:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	4b9b      	ldr	r3, [pc, #620]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e9      	bne.n	800293c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a6 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297a:	4b94      	ldr	r3, [pc, #592]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10d      	bne.n	80029a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b91      	ldr	r3, [pc, #580]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a90      	ldr	r2, [pc, #576]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002990:	61d3      	str	r3, [r2, #28]
 8002992:	4b8e      	ldr	r3, [pc, #568]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b8b      	ldr	r3, [pc, #556]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b88      	ldr	r3, [pc, #544]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a87      	ldr	r2, [pc, #540]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fa81 	bl	8000ec0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fa7d 	bl	8000ec0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	@ 0x64
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e195      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d106      	bne.n	80029f6 <HAL_RCC_OscConfig+0x312>
 80029e8:	4b78      	ldr	r3, [pc, #480]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a77      	ldr	r2, [pc, #476]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	6213      	str	r3, [r2, #32]
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0x334>
 80029fe:	4b73      	ldr	r3, [pc, #460]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	4a72      	ldr	r2, [pc, #456]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6213      	str	r3, [r2, #32]
 8002a0a:	4b70      	ldr	r3, [pc, #448]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6213      	str	r3, [r2, #32]
 8002a16:	e01c      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x356>
 8002a20:	4b6a      	ldr	r3, [pc, #424]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4a69      	ldr	r2, [pc, #420]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	4b67      	ldr	r3, [pc, #412]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4a66      	ldr	r2, [pc, #408]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e00b      	b.n	8002a52 <HAL_RCC_OscConfig+0x36e>
 8002a3a:	4b64      	ldr	r3, [pc, #400]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4a63      	ldr	r2, [pc, #396]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	f023 0301 	bic.w	r3, r3, #1
 8002a44:	6213      	str	r3, [r2, #32]
 8002a46:	4b61      	ldr	r3, [pc, #388]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	4a60      	ldr	r2, [pc, #384]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fa31 	bl	8000ec0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe fa2d 	bl	8000ec0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e143      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	4b54      	ldr	r3, [pc, #336]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ee      	beq.n	8002a62 <HAL_RCC_OscConfig+0x37e>
 8002a84:	e014      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fa1b 	bl	8000ec0 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7fe fa17 	bl	8000ec0 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e12d      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	4b49      	ldr	r3, [pc, #292]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1ee      	bne.n	8002a8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d105      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b45      	ldr	r3, [pc, #276]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a44      	ldr	r2, [pc, #272]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 808c 	beq.w	8002be4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002acc:	4b3f      	ldr	r3, [pc, #252]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad8:	d10e      	bne.n	8002af8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d108      	bne.n	8002af8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002ae6:	4b39      	ldr	r3, [pc, #228]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e103      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d14e      	bne.n	8002b9e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b00:	4b32      	ldr	r3, [pc, #200]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0ef      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f0>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7fe f9cb 	bl	8000ec0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b2e:	f7fe f9c7 	bl	8000ec0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b64      	cmp	r3, #100	@ 0x64
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e0df      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f0      	bne.n	8002b2e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b58:	491c      	ldr	r1, [pc, #112]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	4918      	ldr	r1, [pc, #96]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002b70:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7fe f9a3 	bl	8000ec0 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b7e:	f7fe f99f 	bl	8000ec0 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b64      	cmp	r3, #100	@ 0x64
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0b7      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002b90:	4b0e      	ldr	r3, [pc, #56]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x49a>
 8002b9c:	e022      	b.n	8002be4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <HAL_RCC_OscConfig+0x4e8>)
 8002ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd4 <HAL_RCC_OscConfig+0x4f0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f986 	bl	8000ec0 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002bb8:	f7fe f982 	bl	8000ec0 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	@ 0x64
 8002bc4:	d908      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e09a      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1e9      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8088 	beq.w	8002cfe <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bee:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d068      	beq.n	8002ccc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d14d      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c02:	4b42      	ldr	r3, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x628>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe f95a 	bl	8000ec0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c10:	f7fe f956 	bl	8000ec0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e06e      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c22:	4b39      	ldr	r3, [pc, #228]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c36:	d10f      	bne.n	8002c58 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002c38:	4b33      	ldr	r3, [pc, #204]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4931      	ldr	r1, [pc, #196]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c46:	4b30      	ldr	r3, [pc, #192]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	492d      	ldr	r1, [pc, #180]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	4927      	ldr	r1, [pc, #156]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b26      	ldr	r3, [pc, #152]	@ (8002d0c <HAL_RCC_OscConfig+0x628>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe f923 	bl	8000ec0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe f91f 	bl	8000ec0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e037      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x59a>
 8002c9c:	e02f      	b.n	8002cfe <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_RCC_OscConfig+0x628>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f90c 	bl	8000ec0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe f908 	bl	8000ec0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e020      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x5c8>
 8002cca:	e018      	b.n	8002cfe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e013      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_RCC_OscConfig+0x624>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d106      	bne.n	8002cfa <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	42420060 	.word	0x42420060

08002d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0d0      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b67      	ldr	r3, [pc, #412]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4965      	ldr	r1, [pc, #404]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4a58      	ldr	r2, [pc, #352]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d040      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d115      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e073      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dde:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06b      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 0203 	bic.w	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4936      	ldr	r1, [pc, #216]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e00:	f7fe f85e 	bl	8000ec0 <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e08:	f7fe f85a 	bl	8000ec0 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e053      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 020c 	and.w	r2, r3, #12
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1eb      	bne.n	8002e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e30:	4b27      	ldr	r3, [pc, #156]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d210      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	4922      	ldr	r1, [pc, #136]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f859 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_ClockConfig+0x1cc>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd ffbc 	bl	8000e3c <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	0801074c 	.word	0x0801074c
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004

08002ee4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	@ 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002ef0:	f107 0318 	add.w	r3, r7, #24
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002f02:	2303      	movs	r3, #3
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002f0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002f10:	4b0e      	ldr	r3, [pc, #56]	@ (8002f4c <HAL_RCC_MCOConfig+0x68>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <HAL_RCC_MCOConfig+0x68>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_RCC_MCOConfig+0x68>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002f28:	f107 0318 	add.w	r3, r7, #24
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4808      	ldr	r0, [pc, #32]	@ (8002f50 <HAL_RCC_MCOConfig+0x6c>)
 8002f30:	f7ff fa54 	bl	80023dc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_MCOConfig+0x68>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002f3c:	4903      	ldr	r1, [pc, #12]	@ (8002f4c <HAL_RCC_MCOConfig+0x68>)
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	@ 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40010800 	.word	0x40010800

08002f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b08e      	sub	sp, #56	@ 0x38
 8002f5a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f64:	2300      	movs	r3, #0
 8002f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f78:	4b4e      	ldr	r3, [pc, #312]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d002      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f8c:	e089      	b.n	80030a2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f90:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f92:	e089      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f96:	0c9b      	lsrs	r3, r3, #18
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x168>)
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d072      	beq.n	8003092 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002fac:	4b41      	ldr	r3, [pc, #260]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	4b42      	ldr	r3, [pc, #264]	@ (80030c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002fb6:	5c9b      	ldrb	r3, [r3, r2]
 8002fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002fba:	4b3e      	ldr	r3, [pc, #248]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d053      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002fd4:	4b37      	ldr	r3, [pc, #220]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	3302      	adds	r3, #2
 8002fe0:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	469a      	mov	sl, r3
 8002fe8:	4693      	mov	fp, r2
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	2200      	movs	r2, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	617a      	str	r2, [r7, #20]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	fb03 f20b 	mul.w	r2, r3, fp
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	fb0a f303 	mul.w	r3, sl, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	fbaa 0102 	umull	r0, r1, sl, r2
 8003006:	440b      	add	r3, r1
 8003008:	4619      	mov	r1, r3
 800300a:	4b2b      	ldr	r3, [pc, #172]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x164>)
 800300c:	fb03 f201 	mul.w	r2, r3, r1
 8003010:	2300      	movs	r3, #0
 8003012:	fb00 f303 	mul.w	r3, r0, r3
 8003016:	4413      	add	r3, r2
 8003018:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x164>)
 800301a:	fba0 4502 	umull	r4, r5, r0, r2
 800301e:	442b      	add	r3, r5
 8003020:	461d      	mov	r5, r3
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	2200      	movs	r2, #0
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	60fa      	str	r2, [r7, #12]
 800302a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302c:	2200      	movs	r2, #0
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003036:	460b      	mov	r3, r1
 8003038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800303c:	4652      	mov	r2, sl
 800303e:	fb02 f203 	mul.w	r2, r2, r3
 8003042:	465b      	mov	r3, fp
 8003044:	4684      	mov	ip, r0
 8003046:	fb0c f303 	mul.w	r3, ip, r3
 800304a:	4413      	add	r3, r2
 800304c:	4602      	mov	r2, r0
 800304e:	4651      	mov	r1, sl
 8003050:	fba2 8901 	umull	r8, r9, r2, r1
 8003054:	444b      	add	r3, r9
 8003056:	4699      	mov	r9, r3
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	4620      	mov	r0, r4
 800305e:	4629      	mov	r1, r5
 8003060:	f7fd f8e0 	bl	8000224 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	637b      	str	r3, [r7, #52]	@ 0x34
 800306c:	e007      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	4a11      	ldr	r2, [pc, #68]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8003072:	fb03 f202 	mul.w	r2, r3, r2
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800307e:	4b0f      	ldr	r3, [pc, #60]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x168>)
 8003080:	7b5b      	ldrb	r3, [r3, #13]
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800308a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003090:	e004      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	4a0b      	ldr	r2, [pc, #44]	@ (80030c4 <HAL_RCC_GetSysClockFreq+0x170>)
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a2:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_GetSysClockFreq+0x174>)
 80030a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80030a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3738      	adds	r7, #56	@ 0x38
 80030ae:	46bd      	mov	sp, r7
 80030b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	017d7840 	.word	0x017d7840
 80030bc:	0801075c 	.word	0x0801075c
 80030c0:	0801076c 	.word	0x0801076c
 80030c4:	003d0900 	.word	0x003d0900
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d0:	4b02      	ldr	r3, [pc, #8]	@ (80030dc <HAL_RCC_GetHCLKFreq+0x10>)
 80030d2:	681b      	ldr	r3, [r3, #0]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000000 	.word	0x20000000

080030e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003114 <RCC_Delay+0x34>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <RCC_Delay+0x38>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0a5b      	lsrs	r3, r3, #9
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030fc:	bf00      	nop
  }
  while (Delay --);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e5a      	subs	r2, r3, #1
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <RCC_Delay+0x1c>
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	20000000 	.word	0x20000000
 8003118:	10624dd3 	.word	0x10624dd3

0800311c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e041      	b.n	80031b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fb42 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3304      	adds	r3, #4
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f000 fa7c 	bl	8003658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d001      	beq.n	80031d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e03f      	b.n	8003254 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0201 	orr.w	r2, r2, #1
 80031ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003260 <HAL_TIM_Base_Start_IT+0xa4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x62>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031fe:	d00e      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x62>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <HAL_TIM_Base_Start_IT+0xa8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x62>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <HAL_TIM_Base_Start_IT+0xac>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x62>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a14      	ldr	r2, [pc, #80]	@ (800326c <HAL_TIM_Base_Start_IT+0xb0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d111      	bne.n	8003242 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b06      	cmp	r3, #6
 800322e:	d010      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003240:	e007      	b.n	8003252 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00

08003270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b02      	cmp	r3, #2
 8003284:	d122      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b02      	cmp	r3, #2
 8003292:	d11b      	bne.n	80032cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0202 	mvn.w	r2, #2
 800329c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9b4 	bl	8003620 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9a7 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9b6 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d122      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d11b      	bne.n	8003320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f06f 0204 	mvn.w	r2, #4
 80032f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f98a 	bl	8003620 <HAL_TIM_IC_CaptureCallback>
 800330c:	e005      	b.n	800331a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f97d 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f98c 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b08      	cmp	r3, #8
 800332c:	d122      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	2b08      	cmp	r3, #8
 800333a:	d11b      	bne.n	8003374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0208 	mvn.w	r2, #8
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2204      	movs	r2, #4
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f960 	bl	8003620 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f953 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f962 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b10      	cmp	r3, #16
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b10      	cmp	r3, #16
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0210 	mvn.w	r2, #16
 8003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2208      	movs	r2, #8
 800339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f936 	bl	8003620 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f929 	bl	800360e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f938 	bl	8003632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10e      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d107      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fafa 	bl	80009e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d10e      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340c:	2b80      	cmp	r3, #128	@ 0x80
 800340e:	d107      	bne.n	8003420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fa8d 	bl	800393a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d10e      	bne.n	800344c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003438:	2b40      	cmp	r3, #64	@ 0x40
 800343a:	d107      	bne.n	800344c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8fc 	bl	8003644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b20      	cmp	r3, #32
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0220 	mvn.w	r2, #32
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa58 	bl	8003928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIM_ConfigClockSource+0x1c>
 8003498:	2302      	movs	r3, #2
 800349a:	e0b4      	b.n	8003606 <HAL_TIM_ConfigClockSource+0x186>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034d4:	d03e      	beq.n	8003554 <HAL_TIM_ConfigClockSource+0xd4>
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034da:	f200 8087 	bhi.w	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e2:	f000 8086 	beq.w	80035f2 <HAL_TIM_ConfigClockSource+0x172>
 80034e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ea:	d87f      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	2b70      	cmp	r3, #112	@ 0x70
 80034ee:	d01a      	beq.n	8003526 <HAL_TIM_ConfigClockSource+0xa6>
 80034f0:	2b70      	cmp	r3, #112	@ 0x70
 80034f2:	d87b      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b60      	cmp	r3, #96	@ 0x60
 80034f6:	d050      	beq.n	800359a <HAL_TIM_ConfigClockSource+0x11a>
 80034f8:	2b60      	cmp	r3, #96	@ 0x60
 80034fa:	d877      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b50      	cmp	r3, #80	@ 0x50
 80034fe:	d03c      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xfa>
 8003500:	2b50      	cmp	r3, #80	@ 0x50
 8003502:	d873      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b40      	cmp	r3, #64	@ 0x40
 8003506:	d058      	beq.n	80035ba <HAL_TIM_ConfigClockSource+0x13a>
 8003508:	2b40      	cmp	r3, #64	@ 0x40
 800350a:	d86f      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b30      	cmp	r3, #48	@ 0x30
 800350e:	d064      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x15a>
 8003510:	2b30      	cmp	r3, #48	@ 0x30
 8003512:	d86b      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 8003514:	2b20      	cmp	r3, #32
 8003516:	d060      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x15a>
 8003518:	2b20      	cmp	r3, #32
 800351a:	d867      	bhi.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
 800351c:	2b00      	cmp	r3, #0
 800351e:	d05c      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x15a>
 8003520:	2b10      	cmp	r3, #16
 8003522:	d05a      	beq.n	80035da <HAL_TIM_ConfigClockSource+0x15a>
 8003524:	e062      	b.n	80035ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003536:	f000 f972 	bl	800381e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	609a      	str	r2, [r3, #8]
      break;
 8003552:	e04f      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003564:	f000 f95b 	bl	800381e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003576:	609a      	str	r2, [r3, #8]
      break;
 8003578:	e03c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	461a      	mov	r2, r3
 8003588:	f000 f8d2 	bl	8003730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2150      	movs	r1, #80	@ 0x50
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f929 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 8003598:	e02c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a6:	461a      	mov	r2, r3
 80035a8:	f000 f8f0 	bl	800378c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2160      	movs	r1, #96	@ 0x60
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f919 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 80035b8:	e01c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	461a      	mov	r2, r3
 80035c8:	f000 f8b2 	bl	8003730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2140      	movs	r1, #64	@ 0x40
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f909 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 80035d8:	e00c      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f000 f900 	bl	80037ea <TIM_ITRx_SetConfig>
      break;
 80035ea:	e003      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]
      break;
 80035f0:	e000      	b.n	80035f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
	...

08003658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a2d      	ldr	r2, [pc, #180]	@ (8003720 <TIM_Base_SetConfig+0xc8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2a      	ldr	r2, [pc, #168]	@ (8003724 <TIM_Base_SetConfig+0xcc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a29      	ldr	r2, [pc, #164]	@ (8003728 <TIM_Base_SetConfig+0xd0>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x38>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a28      	ldr	r2, [pc, #160]	@ (800372c <TIM_Base_SetConfig+0xd4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003720 <TIM_Base_SetConfig+0xc8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_Base_SetConfig+0x72>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d00b      	beq.n	80036ca <TIM_Base_SetConfig+0x72>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003724 <TIM_Base_SetConfig+0xcc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_Base_SetConfig+0x72>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <TIM_Base_SetConfig+0xd0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_Base_SetConfig+0x72>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a19      	ldr	r2, [pc, #100]	@ (800372c <TIM_Base_SetConfig+0xd4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d108      	bne.n	80036dc <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4313      	orrs	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a07      	ldr	r2, [pc, #28]	@ (8003720 <TIM_Base_SetConfig+0xc8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d103      	bne.n	8003710 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	615a      	str	r2, [r3, #20]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800
 800372c:	40000c00 	.word	0x40000c00

08003730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800375a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f023 030a 	bic.w	r3, r3, #10
 800376c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr

0800378c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f023 0210 	bic.w	r2, r3, #16
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	031b      	lsls	r3, r3, #12
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	621a      	str	r2, [r3, #32]
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b085      	sub	sp, #20
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	f043 0307 	orr.w	r3, r3, #7
 800380c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003838:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	021a      	lsls	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	431a      	orrs	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	609a      	str	r2, [r3, #8]
}
 8003852:	bf00      	nop
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e04b      	b.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c0:	d00e      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a15      	ldr	r2, [pc, #84]	@ (800391c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a13      	ldr	r2, [pc, #76]	@ (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a12      	ldr	r2, [pc, #72]	@ (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10c      	bne.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400
 8003920:	40000800 	.word	0x40000800
 8003924:	40000c00 	.word	0x40000c00

08003928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003952:	4b87      	ldr	r3, [pc, #540]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003954:	22c0      	movs	r2, #192	@ 0xc0
 8003956:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003958:	4b85      	ldr	r3, [pc, #532]	@ (8003b70 <MX_LWIP_Init+0x224>)
 800395a:	22a8      	movs	r2, #168	@ 0xa8
 800395c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 31;
 800395e:	4b84      	ldr	r3, [pc, #528]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003960:	221f      	movs	r2, #31
 8003962:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8003964:	4b82      	ldr	r3, [pc, #520]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003966:	22c9      	movs	r2, #201	@ 0xc9
 8003968:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800396a:	4b82      	ldr	r3, [pc, #520]	@ (8003b74 <MX_LWIP_Init+0x228>)
 800396c:	22ff      	movs	r2, #255	@ 0xff
 800396e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003970:	4b80      	ldr	r3, [pc, #512]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003972:	22ff      	movs	r2, #255	@ 0xff
 8003974:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003976:	4b7f      	ldr	r3, [pc, #508]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003978:	22ff      	movs	r2, #255	@ 0xff
 800397a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800397c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b74 <MX_LWIP_Init+0x228>)
 800397e:	2200      	movs	r2, #0
 8003980:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003982:	4b7d      	ldr	r3, [pc, #500]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003984:	22c0      	movs	r2, #192	@ 0xc0
 8003986:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003988:	4b7b      	ldr	r3, [pc, #492]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 800398a:	22a8      	movs	r2, #168	@ 0xa8
 800398c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 31;
 800398e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003990:	221f      	movs	r2, #31
 8003992:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003994:	4b78      	ldr	r3, [pc, #480]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003996:	2201      	movs	r2, #1
 8003998:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800399a:	f000 fcd1 	bl	8004340 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800399e:	4b74      	ldr	r3, [pc, #464]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	061a      	lsls	r2, r3, #24
 80039a4:	4b72      	ldr	r3, [pc, #456]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	041b      	lsls	r3, r3, #16
 80039aa:	431a      	orrs	r2, r3
 80039ac:	4b70      	ldr	r3, [pc, #448]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039ae:	789b      	ldrb	r3, [r3, #2]
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	4313      	orrs	r3, r2
 80039b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039b6:	78d2      	ldrb	r2, [r2, #3]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	061a      	lsls	r2, r3, #24
 80039bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	0619      	lsls	r1, r3, #24
 80039c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	4319      	orrs	r1, r3
 80039ca:	4b69      	ldr	r3, [pc, #420]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039cc:	789b      	ldrb	r3, [r3, #2]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	430b      	orrs	r3, r1
 80039d2:	4967      	ldr	r1, [pc, #412]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039d4:	78c9      	ldrb	r1, [r1, #3]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80039de:	431a      	orrs	r2, r3
 80039e0:	4b63      	ldr	r3, [pc, #396]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	0619      	lsls	r1, r3, #24
 80039e6:	4b62      	ldr	r3, [pc, #392]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039e8:	785b      	ldrb	r3, [r3, #1]
 80039ea:	041b      	lsls	r3, r3, #16
 80039ec:	4319      	orrs	r1, r3
 80039ee:	4b60      	ldr	r3, [pc, #384]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	430b      	orrs	r3, r1
 80039f6:	495e      	ldr	r1, [pc, #376]	@ (8003b70 <MX_LWIP_Init+0x224>)
 80039f8:	78c9      	ldrb	r1, [r1, #3]
 80039fa:	430b      	orrs	r3, r1
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a02:	431a      	orrs	r2, r3
 8003a04:	4b5a      	ldr	r3, [pc, #360]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	0619      	lsls	r1, r3, #24
 8003a0a:	4b59      	ldr	r3, [pc, #356]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	4319      	orrs	r1, r3
 8003a12:	4b57      	ldr	r3, [pc, #348]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003a14:	789b      	ldrb	r3, [r3, #2]
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	4955      	ldr	r1, [pc, #340]	@ (8003b70 <MX_LWIP_Init+0x224>)
 8003a1c:	78c9      	ldrb	r1, [r1, #3]
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	4313      	orrs	r3, r2
 8003a24:	4a55      	ldr	r2, [pc, #340]	@ (8003b7c <MX_LWIP_Init+0x230>)
 8003a26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003a28:	4b52      	ldr	r3, [pc, #328]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	061a      	lsls	r2, r3, #24
 8003a2e:	4b51      	ldr	r3, [pc, #324]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	041b      	lsls	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	4b4f      	ldr	r3, [pc, #316]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a40:	78d2      	ldrb	r2, [r2, #3]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	061a      	lsls	r2, r3, #24
 8003a46:	4b4b      	ldr	r3, [pc, #300]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	0619      	lsls	r1, r3, #24
 8003a4c:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	4319      	orrs	r1, r3
 8003a54:	4b47      	ldr	r3, [pc, #284]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a56:	789b      	ldrb	r3, [r3, #2]
 8003a58:	021b      	lsls	r3, r3, #8
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	4945      	ldr	r1, [pc, #276]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a5e:	78c9      	ldrb	r1, [r1, #3]
 8003a60:	430b      	orrs	r3, r1
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	4b42      	ldr	r3, [pc, #264]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	0619      	lsls	r1, r3, #24
 8003a70:	4b40      	ldr	r3, [pc, #256]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a72:	785b      	ldrb	r3, [r3, #1]
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	4319      	orrs	r1, r3
 8003a78:	4b3e      	ldr	r3, [pc, #248]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	493c      	ldr	r1, [pc, #240]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a82:	78c9      	ldrb	r1, [r1, #3]
 8003a84:	430b      	orrs	r3, r1
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	0619      	lsls	r1, r3, #24
 8003a94:	4b37      	ldr	r3, [pc, #220]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	4319      	orrs	r1, r3
 8003a9c:	4b35      	ldr	r3, [pc, #212]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003a9e:	789b      	ldrb	r3, [r3, #2]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4933      	ldr	r1, [pc, #204]	@ (8003b74 <MX_LWIP_Init+0x228>)
 8003aa6:	78c9      	ldrb	r1, [r1, #3]
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	0e1b      	lsrs	r3, r3, #24
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4a34      	ldr	r2, [pc, #208]	@ (8003b80 <MX_LWIP_Init+0x234>)
 8003ab0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	061a      	lsls	r2, r3, #24
 8003ab8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003aca:	78d2      	ldrb	r2, [r2, #3]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	061a      	lsls	r2, r3, #24
 8003ad0:	4b29      	ldr	r3, [pc, #164]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	0619      	lsls	r1, r3, #24
 8003ad6:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ad8:	785b      	ldrb	r3, [r3, #1]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	4319      	orrs	r1, r3
 8003ade:	4b26      	ldr	r3, [pc, #152]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ae0:	789b      	ldrb	r3, [r3, #2]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	4924      	ldr	r1, [pc, #144]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003ae8:	78c9      	ldrb	r1, [r1, #3]
 8003aea:	430b      	orrs	r3, r1
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003af2:	431a      	orrs	r2, r3
 8003af4:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	0619      	lsls	r1, r3, #24
 8003afa:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003afc:	785b      	ldrb	r3, [r3, #1]
 8003afe:	041b      	lsls	r3, r3, #16
 8003b00:	4319      	orrs	r1, r3
 8003b02:	4b1d      	ldr	r3, [pc, #116]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b04:	789b      	ldrb	r3, [r3, #2]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	491b      	ldr	r1, [pc, #108]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b0c:	78c9      	ldrb	r1, [r1, #3]
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003b16:	431a      	orrs	r2, r3
 8003b18:	4b17      	ldr	r3, [pc, #92]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	0619      	lsls	r1, r3, #24
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	4319      	orrs	r1, r3
 8003b26:	4b14      	ldr	r3, [pc, #80]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b28:	789b      	ldrb	r3, [r3, #2]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	4912      	ldr	r1, [pc, #72]	@ (8003b78 <MX_LWIP_Init+0x22c>)
 8003b30:	78c9      	ldrb	r1, [r1, #3]
 8003b32:	430b      	orrs	r3, r1
 8003b34:	0e1b      	lsrs	r3, r3, #24
 8003b36:	4313      	orrs	r3, r2
 8003b38:	4a12      	ldr	r2, [pc, #72]	@ (8003b84 <MX_LWIP_Init+0x238>)
 8003b3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <MX_LWIP_Init+0x23c>)
 8003b3e:	9302      	str	r3, [sp, #8]
 8003b40:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <MX_LWIP_Init+0x240>)
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <MX_LWIP_Init+0x238>)
 8003b4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b80 <MX_LWIP_Init+0x234>)
 8003b4c:	490b      	ldr	r1, [pc, #44]	@ (8003b7c <MX_LWIP_Init+0x230>)
 8003b4e:	4810      	ldr	r0, [pc, #64]	@ (8003b90 <MX_LWIP_Init+0x244>)
 8003b50:	f000 fff6 	bl	8004b40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b54:	480e      	ldr	r0, [pc, #56]	@ (8003b90 <MX_LWIP_Init+0x244>)
 8003b56:	f001 f8d5 	bl	8004d04 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003b5a:	480d      	ldr	r0, [pc, #52]	@ (8003b90 <MX_LWIP_Init+0x244>)
 8003b5c:	f001 f8e0 	bl	8004d20 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003b60:	490c      	ldr	r1, [pc, #48]	@ (8003b94 <MX_LWIP_Init+0x248>)
 8003b62:	480b      	ldr	r0, [pc, #44]	@ (8003b90 <MX_LWIP_Init+0x244>)
 8003b64:	f001 f920 	bl	8004da8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000124 	.word	0x20000124
 8003b74:	20000128 	.word	0x20000128
 8003b78:	2000012c 	.word	0x2000012c
 8003b7c:	20000118 	.word	0x20000118
 8003b80:	2000011c 	.word	0x2000011c
 8003b84:	20000120 	.word	0x20000120
 8003b88:	0800d61d 	.word	0x0800d61d
 8003b8c:	08004181 	.word	0x08004181
 8003b90:	200000e4 	.word	0x200000e4
 8003b94:	080041ed 	.word	0x080041ed

08003b98 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08e      	sub	sp, #56	@ 0x38
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a58      	ldr	r2, [pc, #352]	@ (8003d14 <HAL_ETH_MspInit+0x17c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	f040 80a8 	bne.w	8003d0a <HAL_ETH_MspInit+0x172>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003bba:	4b57      	ldr	r3, [pc, #348]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc4:	6153      	str	r3, [r2, #20]
 8003bc6:	4b54      	ldr	r3, [pc, #336]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	4b51      	ldr	r3, [pc, #324]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4a50      	ldr	r2, [pc, #320]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bdc:	6153      	str	r3, [r2, #20]
 8003bde:	4b4e      	ldr	r3, [pc, #312]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	4a4a      	ldr	r2, [pc, #296]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf4:	6153      	str	r3, [r2, #20]
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c02:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	4a44      	ldr	r2, [pc, #272]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c08:	f043 0310 	orr.w	r3, r3, #16
 8003c0c:	6193      	str	r3, [r2, #24]
 8003c0e:	4b42      	ldr	r3, [pc, #264]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	6193      	str	r3, [r2, #24]
 8003c26:	4b3c      	ldr	r3, [pc, #240]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	4b39      	ldr	r3, [pc, #228]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	4a38      	ldr	r2, [pc, #224]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	6193      	str	r3, [r2, #24]
 8003c3e:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c4a:	4b33      	ldr	r3, [pc, #204]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	4a32      	ldr	r2, [pc, #200]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c50:	f043 0320 	orr.w	r3, r3, #32
 8003c54:	6193      	str	r3, [r2, #24]
 8003c56:	4b30      	ldr	r3, [pc, #192]	@ (8003d18 <HAL_ETH_MspInit+0x180>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c62:	2302      	movs	r3, #2
 8003c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c66:	2302      	movs	r3, #2
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c72:	4619      	mov	r1, r3
 8003c74:	4829      	ldr	r0, [pc, #164]	@ (8003d1c <HAL_ETH_MspInit+0x184>)
 8003c76:	f7fe fbb1 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4824      	ldr	r0, [pc, #144]	@ (8003d20 <HAL_ETH_MspInit+0x188>)
 8003c8e:	f7fe fba5 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c92:	2304      	movs	r3, #4
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c96:	2302      	movs	r3, #2
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481e      	ldr	r0, [pc, #120]	@ (8003d20 <HAL_ETH_MspInit+0x188>)
 8003ca6:	f7fe fb99 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003caa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4819      	ldr	r0, [pc, #100]	@ (8003d24 <HAL_ETH_MspInit+0x18c>)
 8003cc0:	f7fe fb8c 	bl	80023dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003cc4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4813      	ldr	r0, [pc, #76]	@ (8003d28 <HAL_ETH_MspInit+0x190>)
 8003cda:	f7fe fb7f 	bl	80023dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 8003cde:	4b13      	ldr	r3, [pc, #76]	@ (8003d2c <HAL_ETH_MspInit+0x194>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d2c <HAL_ETH_MspInit+0x194>)
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	203d      	movs	r0, #61	@ 0x3d
 8003d00:	f7fd f9e3 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003d04:	203d      	movs	r0, #61	@ 0x3d
 8003d06:	f7fd f9fc 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003d0a:	bf00      	nop
 8003d0c:	3738      	adds	r7, #56	@ 0x38
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40028000 	.word	0x40028000
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40011000 	.word	0x40011000
 8003d20:	40010800 	.word	0x40010800
 8003d24:	40010c00 	.word	0x40010c00
 8003d28:	40011400 	.word	0x40011400
 8003d2c:	40010000 	.word	0x40010000

08003d30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003d3c:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <low_level_init+0x158>)
 8003d3e:	4a53      	ldr	r2, [pc, #332]	@ (8003e8c <low_level_init+0x15c>)
 8003d40:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003d42:	4b51      	ldr	r3, [pc, #324]	@ (8003e88 <low_level_init+0x158>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003d48:	4b4f      	ldr	r3, [pc, #316]	@ (8003e88 <low_level_init+0x158>)
 8003d4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d4e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d50:	4b4d      	ldr	r3, [pc, #308]	@ (8003e88 <low_level_init+0x158>)
 8003d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d56:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8003d58:	4b4b      	ldr	r3, [pc, #300]	@ (8003e88 <low_level_init+0x158>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003d66:	23e1      	movs	r3, #225	@ 0xe1
 8003d68:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003d72:	2300      	movs	r3, #0
 8003d74:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003d76:	4a44      	ldr	r2, [pc, #272]	@ (8003e88 <low_level_init+0x158>)
 8003d78:	f107 0308 	add.w	r3, r7, #8
 8003d7c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003d7e:	4b42      	ldr	r3, [pc, #264]	@ (8003e88 <low_level_init+0x158>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003d84:	4b40      	ldr	r3, [pc, #256]	@ (8003e88 <low_level_init+0x158>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e88 <low_level_init+0x158>)
 8003d8c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003d90:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003d92:	483d      	ldr	r0, [pc, #244]	@ (8003e88 <low_level_init+0x158>)
 8003d94:	f7fd f9d0 	bl	8001138 <HAL_ETH_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d108      	bne.n	8003db4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003da8:	f043 0304 	orr.w	r3, r3, #4
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003db4:	2304      	movs	r3, #4
 8003db6:	4a36      	ldr	r2, [pc, #216]	@ (8003e90 <low_level_init+0x160>)
 8003db8:	4936      	ldr	r1, [pc, #216]	@ (8003e94 <low_level_init+0x164>)
 8003dba:	4833      	ldr	r0, [pc, #204]	@ (8003e88 <low_level_init+0x158>)
 8003dbc:	f7fd fb28 	bl	8001410 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	4a35      	ldr	r2, [pc, #212]	@ (8003e98 <low_level_init+0x168>)
 8003dc4:	4935      	ldr	r1, [pc, #212]	@ (8003e9c <low_level_init+0x16c>)
 8003dc6:	4830      	ldr	r0, [pc, #192]	@ (8003e88 <low_level_init+0x158>)
 8003dc8:	f7fd fb89 	bl	80014de <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2206      	movs	r2, #6
 8003dd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003e88 <low_level_init+0x158>)
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003de0:	4b29      	ldr	r3, [pc, #164]	@ (8003e88 <low_level_init+0x158>)
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	785a      	ldrb	r2, [r3, #1]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003dec:	4b26      	ldr	r3, [pc, #152]	@ (8003e88 <low_level_init+0x158>)
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	789a      	ldrb	r2, [r3, #2]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003df8:	4b23      	ldr	r3, [pc, #140]	@ (8003e88 <low_level_init+0x158>)
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	78da      	ldrb	r2, [r3, #3]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003e04:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <low_level_init+0x158>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	791a      	ldrb	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003e10:	4b1d      	ldr	r3, [pc, #116]	@ (8003e88 <low_level_init+0x158>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	795a      	ldrb	r2, [r3, #5]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003e22:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003e2a:	f043 030a 	orr.w	r3, r3, #10
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003e36:	4814      	ldr	r0, [pc, #80]	@ (8003e88 <low_level_init+0x158>)
 8003e38:	f7fd fe74 	bl	8001b24 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	461a      	mov	r2, r3
 8003e42:	2111      	movs	r1, #17
 8003e44:	4810      	ldr	r0, [pc, #64]	@ (8003e88 <low_level_init+0x158>)
 8003e46:	f7fd fd9f 	bl	8001988 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f043 0303 	orr.w	r3, r3, #3
 8003e50:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	461a      	mov	r2, r3
 8003e56:	2111      	movs	r1, #17
 8003e58:	480b      	ldr	r0, [pc, #44]	@ (8003e88 <low_level_init+0x158>)
 8003e5a:	f7fd fdfd 	bl	8001a58 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8003e5e:	f107 0310 	add.w	r3, r7, #16
 8003e62:	461a      	mov	r2, r3
 8003e64:	2112      	movs	r1, #18
 8003e66:	4808      	ldr	r0, [pc, #32]	@ (8003e88 <low_level_init+0x158>)
 8003e68:	f7fd fd8e 	bl	8001988 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f043 0320 	orr.w	r3, r3, #32
 8003e72:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	461a      	mov	r2, r3
 8003e78:	2112      	movs	r1, #18
 8003e7a:	4803      	ldr	r0, [pc, #12]	@ (8003e88 <low_level_init+0x158>)
 8003e7c:	f7fd fdec 	bl	8001a58 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20004960 	.word	0x20004960
 8003e8c:	40028000 	.word	0x40028000
 8003e90:	20003190 	.word	0x20003190
 8003e94:	200001b0 	.word	0x200001b0
 8003e98:	200001f0 	.word	0x200001f0
 8003e9c:	20000130 	.word	0x20000130

08003ea0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <low_level_output+0x138>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003ec2:	4b45      	ldr	r3, [pc, #276]	@ (8003fd8 <low_level_output+0x138>)
 8003ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	e05a      	b.n	8003f88 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da03      	bge.n	8003ee2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003eda:	23f8      	movs	r3, #248	@ 0xf8
 8003edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8003ee0:	e05c      	b.n	8003f9c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	895b      	ldrh	r3, [r3, #10]
 8003ee6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003eec:	e02f      	b.n	8003f4e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	18d0      	adds	r0, r2, r3
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	18d1      	adds	r1, r2, r3
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8003f02:	3304      	adds	r3, #4
 8003f04:	461a      	mov	r2, r3
 8003f06:	f009 fe24 	bl	800db52 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da03      	bge.n	8003f20 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003f18:	23f8      	movs	r3, #248	@ 0xf8
 8003f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8003f1e:	e03d      	b.n	8003f9c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003f30:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003f3c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003f48:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d8c8      	bhi.n	8003eee <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	18d0      	adds	r0, r2, r3
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4413      	add	r3, r2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f009 fdf0 	bl	800db52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1a1      	bne.n	8003ed2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	4811      	ldr	r0, [pc, #68]	@ (8003fd8 <low_level_output+0x138>)
 8003f92:	f7fd fb0f 	bl	80015b4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <low_level_output+0x138>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00d      	beq.n	8003fca <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003fae:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd8 <low_level_output+0x138>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2320      	movs	r3, #32
 8003fba:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003fbc:	4b06      	ldr	r3, [pc, #24]	@ (8003fd8 <low_level_output+0x138>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8003fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3728      	adds	r7, #40	@ 0x28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20004960 	.word	0x20004960

08003fdc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	@ 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8003fec:	2300      	movs	r3, #0
 8003fee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004000:	484e      	ldr	r0, [pc, #312]	@ (800413c <low_level_input+0x160>)
 8004002:	f7fd fbbf 	bl	8001784 <HAL_ETH_GetReceivedFrame>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <low_level_input+0x34>

    return NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	e090      	b.n	8004132 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004010:	4b4a      	ldr	r3, [pc, #296]	@ (800413c <low_level_input+0x160>)
 8004012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004014:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004016:	4b49      	ldr	r3, [pc, #292]	@ (800413c <low_level_input+0x160>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 800401c:	89fb      	ldrh	r3, [r7, #14]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d006      	beq.n	8004030 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004022:	89fb      	ldrh	r3, [r7, #14]
 8004024:	2203      	movs	r2, #3
 8004026:	4619      	mov	r1, r3
 8004028:	2004      	movs	r0, #4
 800402a:	f000 fefd 	bl	8004e28 <pbuf_alloc>
 800402e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8004030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d04b      	beq.n	80040ce <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004036:	4b41      	ldr	r3, [pc, #260]	@ (800413c <low_level_input+0x160>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004044:	e040      	b.n	80040c8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	895b      	ldrh	r3, [r3, #10]
 800404a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004050:	e021      	b.n	8004096 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	18d0      	adds	r0, r2, r3
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	18d1      	adds	r1, r2, r3
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8004066:	3304      	adds	r3, #4
 8004068:	461a      	mov	r2, r3
 800406a:	f009 fd72 	bl	800db52 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8004084:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8004090:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	4413      	add	r3, r2
 800409c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d8d6      	bhi.n	8004052 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	18d0      	adds	r0, r2, r3
 80040ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	4619      	mov	r1, r3
 80040b6:	f009 fd4c 	bl	800db52 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	4413      	add	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1bb      	bne.n	8004046 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80040ce:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <low_level_input+0x160>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80040d4:	2300      	movs	r3, #0
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e00b      	b.n	80040f2 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3301      	adds	r3, #1
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	4b12      	ldr	r3, [pc, #72]	@ (800413c <low_level_input+0x160>)
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d3ee      	bcc.n	80040da <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <low_level_input+0x160>)
 80040fe:	2200      	movs	r2, #0
 8004100:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004102:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <low_level_input+0x160>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <low_level_input+0x160>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800411c:	461a      	mov	r2, r3
 800411e:	2380      	movs	r3, #128	@ 0x80
 8004120:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <low_level_input+0x160>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800412a:	461a      	mov	r2, r3
 800412c:	2300      	movs	r3, #0
 800412e:	6093      	str	r3, [r2, #8]
  }
  return p;
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004132:	4618      	mov	r0, r3
 8004134:	3730      	adds	r7, #48	@ 0x30
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20004960 	.word	0x20004960

08004140 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7ff ff47 	bl	8003fdc <low_level_input>
 800414e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	4798      	blx	r3
 8004160:	4603      	mov	r3, r0
 8004162:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004164:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d006      	beq.n	800417a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f001 f9d3 	bl	8005518 <pbuf_free>
    p = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e000      	b.n	800417a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004178:	bf00      	nop
  }
}
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d106      	bne.n	800419c <ethernetif_init+0x1c>
 800418e:	4b0e      	ldr	r3, [pc, #56]	@ (80041c8 <ethernetif_init+0x48>)
 8004190:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8004194:	490d      	ldr	r1, [pc, #52]	@ (80041cc <ethernetif_init+0x4c>)
 8004196:	480e      	ldr	r0, [pc, #56]	@ (80041d0 <ethernetif_init+0x50>)
 8004198:	f009 fbe0 	bl	800d95c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2273      	movs	r2, #115	@ 0x73
 80041a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2274      	movs	r2, #116	@ 0x74
 80041a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <ethernetif_init+0x54>)
 80041b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a08      	ldr	r2, [pc, #32]	@ (80041d8 <ethernetif_init+0x58>)
 80041b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7ff fdb9 	bl	8003d30 <low_level_init>

  return ERR_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	0800ea94 	.word	0x0800ea94
 80041cc:	0800eab0 	.word	0x0800eab0
 80041d0:	0800eac0 	.word	0x0800eac0
 80041d4:	0800bae9 	.word	0x0800bae9
 80041d8:	08003ea1 	.word	0x08003ea1

080041dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80041e0:	f7fc fe6e 	bl	8000ec0 <HAL_GetTick>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d05d      	beq.n	80042ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800420e:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <ethernetif_update_config+0xf4>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d03f      	beq.n	8004296 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004216:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800421a:	2100      	movs	r1, #0
 800421c:	4830      	ldr	r0, [pc, #192]	@ (80042e0 <ethernetif_update_config+0xf4>)
 800421e:	f7fd fc1b 	bl	8001a58 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004222:	f7fc fe4d 	bl	8000ec0 <HAL_GetTick>
 8004226:	4603      	mov	r3, r0
 8004228:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800422a:	f107 0308 	add.w	r3, r7, #8
 800422e:	461a      	mov	r2, r3
 8004230:	2101      	movs	r1, #1
 8004232:	482b      	ldr	r0, [pc, #172]	@ (80042e0 <ethernetif_update_config+0xf4>)
 8004234:	f7fd fba8 	bl	8001988 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004238:	f7fc fe42 	bl	8000ec0 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004246:	d828      	bhi.n	800429a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0eb      	beq.n	800422a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	461a      	mov	r2, r3
 8004258:	2110      	movs	r1, #16
 800425a:	4821      	ldr	r0, [pc, #132]	@ (80042e0 <ethernetif_update_config+0xf4>)
 800425c:	f7fd fb94 	bl	8001988 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800426a:	4b1d      	ldr	r3, [pc, #116]	@ (80042e0 <ethernetif_update_config+0xf4>)
 800426c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004270:	60da      	str	r2, [r3, #12]
 8004272:	e002      	b.n	800427a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004274:	4b1a      	ldr	r3, [pc, #104]	@ (80042e0 <ethernetif_update_config+0xf4>)
 8004276:	2200      	movs	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004284:	4b16      	ldr	r3, [pc, #88]	@ (80042e0 <ethernetif_update_config+0xf4>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
 800428a:	e016      	b.n	80042ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800428c:	4b14      	ldr	r3, [pc, #80]	@ (80042e0 <ethernetif_update_config+0xf4>)
 800428e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e011      	b.n	80042ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <ethernetif_update_config+0xb0>
          goto error;
 800429a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800429c:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <ethernetif_update_config+0xf4>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	08db      	lsrs	r3, r3, #3
 80042a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80042a4:	4b0e      	ldr	r3, [pc, #56]	@ (80042e0 <ethernetif_update_config+0xf4>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80042ac:	4313      	orrs	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	480a      	ldr	r0, [pc, #40]	@ (80042e0 <ethernetif_update_config+0xf4>)
 80042b6:	f7fd fbcf 	bl	8001a58 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80042ba:	2100      	movs	r1, #0
 80042bc:	4808      	ldr	r0, [pc, #32]	@ (80042e0 <ethernetif_update_config+0xf4>)
 80042be:	f7fd fc8f 	bl	8001be0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80042c2:	4807      	ldr	r0, [pc, #28]	@ (80042e0 <ethernetif_update_config+0xf4>)
 80042c4:	f7fd fc2e 	bl	8001b24 <HAL_ETH_Start>
 80042c8:	e002      	b.n	80042d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80042ca:	4805      	ldr	r0, [pc, #20]	@ (80042e0 <ethernetif_update_config+0xf4>)
 80042cc:	f7fd fc59 	bl	8001b82 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f807 	bl	80042e4 <ethernetif_notify_conn_changed>
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20004960 	.word	0x20004960

080042e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	4603      	mov	r3, r0
 80042fe:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	ba5b      	rev16	r3, r3
 8004304:	b29b      	uxth	r3, r3
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	061a      	lsls	r2, r3, #24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004324:	431a      	orrs	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	0e1b      	lsrs	r3, r3, #24
 8004334:	4313      	orrs	r3, r2
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800434a:	f000 f8a7 	bl	800449c <mem_init>
  memp_init();
 800434e:	f000 fb37 	bl	80049c0 <memp_init>
  pbuf_init();
  netif_init();
 8004352:	f000 fbef 	bl	8004b34 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004356:	f006 fe85 	bl	800b064 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800435a:	f001 fbd7 	bl	8005b0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800435e:	f006 fd63 	bl	800ae28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004374:	4b40      	ldr	r3, [pc, #256]	@ (8004478 <plug_holes+0x10c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d206      	bcs.n	800438c <plug_holes+0x20>
 800437e:	4b3f      	ldr	r3, [pc, #252]	@ (800447c <plug_holes+0x110>)
 8004380:	f240 125d 	movw	r2, #349	@ 0x15d
 8004384:	493e      	ldr	r1, [pc, #248]	@ (8004480 <plug_holes+0x114>)
 8004386:	483f      	ldr	r0, [pc, #252]	@ (8004484 <plug_holes+0x118>)
 8004388:	f009 fae8 	bl	800d95c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800438c:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <plug_holes+0x11c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	d306      	bcc.n	80043a4 <plug_holes+0x38>
 8004396:	4b39      	ldr	r3, [pc, #228]	@ (800447c <plug_holes+0x110>)
 8004398:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800439c:	493b      	ldr	r1, [pc, #236]	@ (800448c <plug_holes+0x120>)
 800439e:	4839      	ldr	r0, [pc, #228]	@ (8004484 <plug_holes+0x118>)
 80043a0:	f009 fadc 	bl	800d95c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <plug_holes+0x4e>
 80043ac:	4b33      	ldr	r3, [pc, #204]	@ (800447c <plug_holes+0x110>)
 80043ae:	f240 125f 	movw	r2, #351	@ 0x15f
 80043b2:	4937      	ldr	r1, [pc, #220]	@ (8004490 <plug_holes+0x124>)
 80043b4:	4833      	ldr	r0, [pc, #204]	@ (8004484 <plug_holes+0x118>)
 80043b6:	f009 fad1 	bl	800d95c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80043c2:	d906      	bls.n	80043d2 <plug_holes+0x66>
 80043c4:	4b2d      	ldr	r3, [pc, #180]	@ (800447c <plug_holes+0x110>)
 80043c6:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 80043ca:	4932      	ldr	r1, [pc, #200]	@ (8004494 <plug_holes+0x128>)
 80043cc:	482d      	ldr	r0, [pc, #180]	@ (8004484 <plug_holes+0x118>)
 80043ce:	f009 fac5 	bl	800d95c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80043d2:	4b29      	ldr	r3, [pc, #164]	@ (8004478 <plug_holes+0x10c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	8812      	ldrh	r2, [r2, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d01f      	beq.n	8004426 <plug_holes+0xba>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	791b      	ldrb	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11b      	bne.n	8004426 <plug_holes+0xba>
 80043ee:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <plug_holes+0x11c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d016      	beq.n	8004426 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80043f8:	4b27      	ldr	r3, [pc, #156]	@ (8004498 <plug_holes+0x12c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d102      	bne.n	8004408 <plug_holes+0x9c>
      lfree = mem;
 8004402:	4a25      	ldr	r2, [pc, #148]	@ (8004498 <plug_holes+0x12c>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8004410:	4b19      	ldr	r3, [pc, #100]	@ (8004478 <plug_holes+0x10c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	1ad1      	subs	r1, r2, r3
 8004418:	4b17      	ldr	r3, [pc, #92]	@ (8004478 <plug_holes+0x10c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	8812      	ldrh	r2, [r2, #0]
 8004420:	4413      	add	r3, r2
 8004422:	b28a      	uxth	r2, r1
 8004424:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8004426:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <plug_holes+0x10c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	8852      	ldrh	r2, [r2, #2]
 800442e:	4413      	add	r3, r2
 8004430:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	429a      	cmp	r2, r3
 8004438:	d01a      	beq.n	8004470 <plug_holes+0x104>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	791b      	ldrb	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004442:	4b15      	ldr	r3, [pc, #84]	@ (8004498 <plug_holes+0x12c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d102      	bne.n	8004452 <plug_holes+0xe6>
      lfree = pmem;
 800444c:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <plug_holes+0x12c>)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	881a      	ldrh	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800445a:	4b07      	ldr	r3, [pc, #28]	@ (8004478 <plug_holes+0x10c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	1ad1      	subs	r1, r2, r3
 8004462:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <plug_holes+0x10c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	8812      	ldrh	r2, [r2, #0]
 800446a:	4413      	add	r3, r2
 800446c:	b28a      	uxth	r2, r1
 800446e:	805a      	strh	r2, [r3, #2]
  }
}
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20005014 	.word	0x20005014
 800447c:	0800eae8 	.word	0x0800eae8
 8004480:	0800eb18 	.word	0x0800eb18
 8004484:	0800eb30 	.word	0x0800eb30
 8004488:	20005018 	.word	0x20005018
 800448c:	0800eb58 	.word	0x0800eb58
 8004490:	0800eb74 	.word	0x0800eb74
 8004494:	0800eb90 	.word	0x0800eb90
 8004498:	2000501c 	.word	0x2000501c

0800449c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80044a2:	4b18      	ldr	r3, [pc, #96]	@ (8004504 <mem_init+0x68>)
 80044a4:	3303      	adds	r3, #3
 80044a6:	f023 0303 	bic.w	r3, r3, #3
 80044aa:	461a      	mov	r2, r3
 80044ac:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <mem_init+0x6c>)
 80044ae:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80044b0:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <mem_init+0x6c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044bc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80044ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004508 <mem_init+0x6c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 80044d2:	4a0e      	ldr	r2, [pc, #56]	@ (800450c <mem_init+0x70>)
 80044d4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80044d6:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <mem_init+0x70>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2201      	movs	r2, #1
 80044dc:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80044de:	4b0b      	ldr	r3, [pc, #44]	@ (800450c <mem_init+0x70>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044e6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80044e8:	4b08      	ldr	r3, [pc, #32]	@ (800450c <mem_init+0x70>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80044f0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80044f2:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <mem_init+0x6c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <mem_init+0x74>)
 80044f8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	200049c0 	.word	0x200049c0
 8004508:	20005014 	.word	0x20005014
 800450c:	20005018 	.word	0x20005018
 8004510:	2000501c 	.word	0x2000501c

08004514 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d043      	beq.n	80045aa <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <mem_free+0x26>
 800452c:	4b22      	ldr	r3, [pc, #136]	@ (80045b8 <mem_free+0xa4>)
 800452e:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8004532:	4922      	ldr	r1, [pc, #136]	@ (80045bc <mem_free+0xa8>)
 8004534:	4822      	ldr	r0, [pc, #136]	@ (80045c0 <mem_free+0xac>)
 8004536:	f009 fa11 	bl	800d95c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800453a:	4b22      	ldr	r3, [pc, #136]	@ (80045c4 <mem_free+0xb0>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d304      	bcc.n	800454e <mem_free+0x3a>
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <mem_free+0xb4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	429a      	cmp	r2, r3
 800454c:	d306      	bcc.n	800455c <mem_free+0x48>
 800454e:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <mem_free+0xa4>)
 8004550:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8004554:	491d      	ldr	r1, [pc, #116]	@ (80045cc <mem_free+0xb8>)
 8004556:	481a      	ldr	r0, [pc, #104]	@ (80045c0 <mem_free+0xac>)
 8004558:	f009 fa00 	bl	800d95c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800455c:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <mem_free+0xb0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	429a      	cmp	r2, r3
 8004564:	d323      	bcc.n	80045ae <mem_free+0x9a>
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <mem_free+0xb4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d21e      	bcs.n	80045ae <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b08      	subs	r3, #8
 8004574:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	791b      	ldrb	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <mem_free+0x78>
 800457e:	4b0e      	ldr	r3, [pc, #56]	@ (80045b8 <mem_free+0xa4>)
 8004580:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8004584:	4912      	ldr	r1, [pc, #72]	@ (80045d0 <mem_free+0xbc>)
 8004586:	480e      	ldr	r0, [pc, #56]	@ (80045c0 <mem_free+0xac>)
 8004588:	f009 f9e8 	bl	800d95c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004592:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <mem_free+0xc0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	429a      	cmp	r2, r3
 800459a:	d202      	bcs.n	80045a2 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800459c:	4a0d      	ldr	r2, [pc, #52]	@ (80045d4 <mem_free+0xc0>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fee2 	bl	800436c <plug_holes>
 80045a8:	e002      	b.n	80045b0 <mem_free+0x9c>
    return;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <mem_free+0x9c>
    return;
 80045ae:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	0800eae8 	.word	0x0800eae8
 80045bc:	0800ebbc 	.word	0x0800ebbc
 80045c0:	0800eb30 	.word	0x0800eb30
 80045c4:	20005014 	.word	0x20005014
 80045c8:	20005018 	.word	0x20005018
 80045cc:	0800ebe0 	.word	0x0800ebe0
 80045d0:	0800ebf8 	.word	0x0800ebf8
 80045d4:	2000501c 	.word	0x2000501c

080045d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	3303      	adds	r3, #3
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f023 0303 	bic.w	r3, r3, #3
 80045ee:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80045f0:	887b      	ldrh	r3, [r7, #2]
 80045f2:	2b0b      	cmp	r3, #11
 80045f4:	d801      	bhi.n	80045fa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80045f6:	230c      	movs	r3, #12
 80045f8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80045fa:	887b      	ldrh	r3, [r7, #2]
 80045fc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004600:	d901      	bls.n	8004606 <mem_trim+0x2e>
    return NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	e0b1      	b.n	800476a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004606:	4b5b      	ldr	r3, [pc, #364]	@ (8004774 <mem_trim+0x19c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d304      	bcc.n	800461a <mem_trim+0x42>
 8004610:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <mem_trim+0x1a0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d306      	bcc.n	8004628 <mem_trim+0x50>
 800461a:	4b58      	ldr	r3, [pc, #352]	@ (800477c <mem_trim+0x1a4>)
 800461c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8004620:	4957      	ldr	r1, [pc, #348]	@ (8004780 <mem_trim+0x1a8>)
 8004622:	4858      	ldr	r0, [pc, #352]	@ (8004784 <mem_trim+0x1ac>)
 8004624:	f009 f99a 	bl	800d95c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004628:	4b52      	ldr	r3, [pc, #328]	@ (8004774 <mem_trim+0x19c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	429a      	cmp	r2, r3
 8004630:	d304      	bcc.n	800463c <mem_trim+0x64>
 8004632:	4b51      	ldr	r3, [pc, #324]	@ (8004778 <mem_trim+0x1a0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d301      	bcc.n	8004640 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	e094      	b.n	800476a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3b08      	subs	r3, #8
 8004644:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8004646:	4b4b      	ldr	r3, [pc, #300]	@ (8004774 <mem_trim+0x19c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	8a7b      	ldrh	r3, [r7, #18]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b08      	subs	r3, #8
 800465c:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	8a3b      	ldrh	r3, [r7, #16]
 8004662:	429a      	cmp	r2, r3
 8004664:	d906      	bls.n	8004674 <mem_trim+0x9c>
 8004666:	4b45      	ldr	r3, [pc, #276]	@ (800477c <mem_trim+0x1a4>)
 8004668:	f240 2206 	movw	r2, #518	@ 0x206
 800466c:	4946      	ldr	r1, [pc, #280]	@ (8004788 <mem_trim+0x1b0>)
 800466e:	4845      	ldr	r0, [pc, #276]	@ (8004784 <mem_trim+0x1ac>)
 8004670:	f009 f974 	bl	800d95c <iprintf>
  if (newsize > size) {
 8004674:	887a      	ldrh	r2, [r7, #2]
 8004676:	8a3b      	ldrh	r3, [r7, #16]
 8004678:	429a      	cmp	r2, r3
 800467a:	d901      	bls.n	8004680 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	e074      	b.n	800476a <mem_trim+0x192>
  }
  if (newsize == size) {
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	8a3b      	ldrh	r3, [r7, #16]
 8004684:	429a      	cmp	r2, r3
 8004686:	d101      	bne.n	800468c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	e06e      	b.n	800476a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800468c:	4b39      	ldr	r3, [pc, #228]	@ (8004774 <mem_trim+0x19c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	8812      	ldrh	r2, [r2, #0]
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d131      	bne.n	8004704 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80046a6:	8a7a      	ldrh	r2, [r7, #18]
 80046a8:	887b      	ldrh	r3, [r7, #2]
 80046aa:	4413      	add	r3, r2
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3308      	adds	r3, #8
 80046b0:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 80046b2:	4b36      	ldr	r3, [pc, #216]	@ (800478c <mem_trim+0x1b4>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d105      	bne.n	80046c8 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <mem_trim+0x19c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	4413      	add	r3, r2
 80046c4:	4a31      	ldr	r2, [pc, #196]	@ (800478c <mem_trim+0x1b4>)
 80046c6:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80046c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004774 <mem_trim+0x19c>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	4413      	add	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	893a      	ldrh	r2, [r7, #8]
 80046dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8a7a      	ldrh	r2, [r7, #18]
 80046e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	897a      	ldrh	r2, [r7, #10]
 80046e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80046f2:	d039      	beq.n	8004768 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80046f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004774 <mem_trim+0x19c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	8812      	ldrh	r2, [r2, #0]
 80046fc:	4413      	add	r3, r2
 80046fe:	897a      	ldrh	r2, [r7, #10]
 8004700:	805a      	strh	r2, [r3, #2]
 8004702:	e031      	b.n	8004768 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	f103 0214 	add.w	r2, r3, #20
 800470a:	8a3b      	ldrh	r3, [r7, #16]
 800470c:	429a      	cmp	r2, r3
 800470e:	d82b      	bhi.n	8004768 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8004710:	8a7a      	ldrh	r2, [r7, #18]
 8004712:	887b      	ldrh	r3, [r7, #2]
 8004714:	4413      	add	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	3308      	adds	r3, #8
 800471a:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800471c:	4b15      	ldr	r3, [pc, #84]	@ (8004774 <mem_trim+0x19c>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	4413      	add	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004726:	4b19      	ldr	r3, [pc, #100]	@ (800478c <mem_trim+0x1b4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d202      	bcs.n	8004736 <mem_trim+0x15e>
      lfree = mem2;
 8004730:	4a16      	ldr	r2, [pc, #88]	@ (800478c <mem_trim+0x1b4>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	881a      	ldrh	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8a7a      	ldrh	r2, [r7, #18]
 8004748:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	897a      	ldrh	r2, [r7, #10]
 800474e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004758:	d006      	beq.n	8004768 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800475a:	4b06      	ldr	r3, [pc, #24]	@ (8004774 <mem_trim+0x19c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	4413      	add	r3, r2
 8004764:	897a      	ldrh	r2, [r7, #10]
 8004766:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004768:	687b      	ldr	r3, [r7, #4]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20005014 	.word	0x20005014
 8004778:	20005018 	.word	0x20005018
 800477c:	0800eae8 	.word	0x0800eae8
 8004780:	0800ec0c 	.word	0x0800ec0c
 8004784:	0800eb30 	.word	0x0800eb30
 8004788:	0800ec24 	.word	0x0800ec24
 800478c:	2000501c 	.word	0x2000501c

08004790 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b088      	sub	sp, #32
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d101      	bne.n	80047a4 <mem_malloc+0x14>
    return NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e0c7      	b.n	8004934 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	3303      	adds	r3, #3
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	f023 0303 	bic.w	r3, r3, #3
 80047ae:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	2b0b      	cmp	r3, #11
 80047b4:	d801      	bhi.n	80047ba <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80047b6:	230c      	movs	r3, #12
 80047b8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80047c0:	d901      	bls.n	80047c6 <mem_malloc+0x36>
    return NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e0b6      	b.n	8004934 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80047c6:	4b5d      	ldr	r3, [pc, #372]	@ (800493c <mem_malloc+0x1ac>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b5d      	ldr	r3, [pc, #372]	@ (8004940 <mem_malloc+0x1b0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	83fb      	strh	r3, [r7, #30]
 80047d2:	e0a7      	b.n	8004924 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80047d4:	4b5a      	ldr	r3, [pc, #360]	@ (8004940 <mem_malloc+0x1b0>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	8bfb      	ldrh	r3, [r7, #30]
 80047da:	4413      	add	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	791b      	ldrb	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 8098 	bne.w	8004918 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	8bfb      	ldrh	r3, [r7, #30]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f1a3 0208 	sub.w	r2, r3, #8
 80047f6:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80047f8:	429a      	cmp	r2, r3
 80047fa:	f0c0 808d 	bcc.w	8004918 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	461a      	mov	r2, r3
 8004804:	8bfb      	ldrh	r3, [r7, #30]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f1a3 0208 	sub.w	r2, r3, #8
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	3314      	adds	r3, #20
 8004810:	429a      	cmp	r2, r3
 8004812:	d327      	bcc.n	8004864 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004814:	8bfa      	ldrh	r2, [r7, #30]
 8004816:	88fb      	ldrh	r3, [r7, #6]
 8004818:	4413      	add	r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	3308      	adds	r3, #8
 800481e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004820:	4b47      	ldr	r3, [pc, #284]	@ (8004940 <mem_malloc+0x1b0>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	8a7b      	ldrh	r3, [r7, #18]
 8004826:	4413      	add	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	881a      	ldrh	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8bfa      	ldrh	r2, [r7, #30]
 800483c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	8a7a      	ldrh	r2, [r7, #18]
 8004842:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2201      	movs	r2, #1
 8004848:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8004852:	d00a      	beq.n	800486a <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004854:	4b3a      	ldr	r3, [pc, #232]	@ (8004940 <mem_malloc+0x1b0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	8812      	ldrh	r2, [r2, #0]
 800485c:	4413      	add	r3, r2
 800485e:	8a7a      	ldrh	r2, [r7, #18]
 8004860:	805a      	strh	r2, [r3, #2]
 8004862:	e002      	b.n	800486a <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2201      	movs	r2, #1
 8004868:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800486a:	4b34      	ldr	r3, [pc, #208]	@ (800493c <mem_malloc+0x1ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	429a      	cmp	r2, r3
 8004872:	d127      	bne.n	80048c4 <mem_malloc+0x134>
          struct mem *cur = lfree;
 8004874:	4b31      	ldr	r3, [pc, #196]	@ (800493c <mem_malloc+0x1ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800487a:	e005      	b.n	8004888 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800487c:	4b30      	ldr	r3, [pc, #192]	@ (8004940 <mem_malloc+0x1b0>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	8812      	ldrh	r2, [r2, #0]
 8004884:	4413      	add	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	791b      	ldrb	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <mem_malloc+0x10a>
 8004890:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <mem_malloc+0x1b4>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d1f0      	bne.n	800487c <mem_malloc+0xec>
          }
          lfree = cur;
 800489a:	4a28      	ldr	r2, [pc, #160]	@ (800493c <mem_malloc+0x1ac>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80048a0:	4b26      	ldr	r3, [pc, #152]	@ (800493c <mem_malloc+0x1ac>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b27      	ldr	r3, [pc, #156]	@ (8004944 <mem_malloc+0x1b4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d00b      	beq.n	80048c4 <mem_malloc+0x134>
 80048ac:	4b23      	ldr	r3, [pc, #140]	@ (800493c <mem_malloc+0x1ac>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	791b      	ldrb	r3, [r3, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <mem_malloc+0x134>
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <mem_malloc+0x1b8>)
 80048b8:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80048bc:	4923      	ldr	r1, [pc, #140]	@ (800494c <mem_malloc+0x1bc>)
 80048be:	4824      	ldr	r0, [pc, #144]	@ (8004950 <mem_malloc+0x1c0>)
 80048c0:	f009 f84c 	bl	800d95c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	4413      	add	r3, r2
 80048ca:	3308      	adds	r3, #8
 80048cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004944 <mem_malloc+0x1b4>)
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d906      	bls.n	80048e2 <mem_malloc+0x152>
 80048d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <mem_malloc+0x1b8>)
 80048d6:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80048da:	491e      	ldr	r1, [pc, #120]	@ (8004954 <mem_malloc+0x1c4>)
 80048dc:	481c      	ldr	r0, [pc, #112]	@ (8004950 <mem_malloc+0x1c0>)
 80048de:	f009 f83d 	bl	800d95c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d006      	beq.n	80048fa <mem_malloc+0x16a>
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <mem_malloc+0x1b8>)
 80048ee:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80048f2:	4919      	ldr	r1, [pc, #100]	@ (8004958 <mem_malloc+0x1c8>)
 80048f4:	4816      	ldr	r0, [pc, #88]	@ (8004950 <mem_malloc+0x1c0>)
 80048f6:	f009 f831 	bl	800d95c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <mem_malloc+0x182>
 8004904:	4b10      	ldr	r3, [pc, #64]	@ (8004948 <mem_malloc+0x1b8>)
 8004906:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800490a:	4914      	ldr	r1, [pc, #80]	@ (800495c <mem_malloc+0x1cc>)
 800490c:	4810      	ldr	r0, [pc, #64]	@ (8004950 <mem_malloc+0x1c0>)
 800490e:	f009 f825 	bl	800d95c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3308      	adds	r3, #8
 8004916:	e00d      	b.n	8004934 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8004918:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <mem_malloc+0x1b0>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	8bfb      	ldrh	r3, [r7, #30]
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004924:	8bfa      	ldrh	r2, [r7, #30]
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800492c:	429a      	cmp	r2, r3
 800492e:	f4ff af51 	bcc.w	80047d4 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	2000501c 	.word	0x2000501c
 8004940:	20005014 	.word	0x20005014
 8004944:	20005018 	.word	0x20005018
 8004948:	0800eae8 	.word	0x0800eae8
 800494c:	0800ec44 	.word	0x0800ec44
 8004950:	0800eb30 	.word	0x0800eb30
 8004954:	0800ec60 	.word	0x0800ec60
 8004958:	0800ec90 	.word	0x0800ec90
 800495c:	0800ecc0 	.word	0x0800ecc0

08004960 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	3303      	adds	r3, #3
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e011      	b.n	80049a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	885b      	ldrh	r3, [r3, #2]
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4293      	cmp	r3, r2
 80049b0:	dbe7      	blt.n	8004982 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80049b2:	bf00      	nop
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
	...

080049c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80049c6:	2300      	movs	r3, #0
 80049c8:	80fb      	strh	r3, [r7, #6]
 80049ca:	e009      	b.n	80049e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80049cc:	88fb      	ldrh	r3, [r7, #6]
 80049ce:	4a08      	ldr	r2, [pc, #32]	@ (80049f0 <memp_init+0x30>)
 80049d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ffc3 	bl	8004960 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80049da:	88fb      	ldrh	r3, [r7, #6]
 80049dc:	3301      	adds	r3, #1
 80049de:	80fb      	strh	r3, [r7, #6]
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	2b08      	cmp	r3, #8
 80049e4:	d9f2      	bls.n	80049cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80049e6:	bf00      	nop
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	080107e8 	.word	0x080107e8

080049f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	6812      	ldr	r2, [r2, #0]
 8004a12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d006      	beq.n	8004a2c <do_memp_malloc_pool+0x38>
 8004a1e:	4b07      	ldr	r3, [pc, #28]	@ (8004a3c <do_memp_malloc_pool+0x48>)
 8004a20:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004a24:	4906      	ldr	r1, [pc, #24]	@ (8004a40 <do_memp_malloc_pool+0x4c>)
 8004a26:	4807      	ldr	r0, [pc, #28]	@ (8004a44 <do_memp_malloc_pool+0x50>)
 8004a28:	f008 ff98 	bl	800d95c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	e000      	b.n	8004a32 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	0800ece4 	.word	0x0800ece4
 8004a40:	0800ed14 	.word	0x0800ed14
 8004a44:	0800ed38 	.word	0x0800ed38

08004a48 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004a52:	79fb      	ldrb	r3, [r7, #7]
 8004a54:	2b08      	cmp	r3, #8
 8004a56:	d908      	bls.n	8004a6a <memp_malloc+0x22>
 8004a58:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <memp_malloc+0x3c>)
 8004a5a:	f240 1287 	movw	r2, #391	@ 0x187
 8004a5e:	490a      	ldr	r1, [pc, #40]	@ (8004a88 <memp_malloc+0x40>)
 8004a60:	480a      	ldr	r0, [pc, #40]	@ (8004a8c <memp_malloc+0x44>)
 8004a62:	f008 ff7b 	bl	800d95c <iprintf>
 8004a66:	2300      	movs	r3, #0
 8004a68:	e008      	b.n	8004a7c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <memp_malloc+0x48>)
 8004a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ffbe 	bl	80049f4 <do_memp_malloc_pool>
 8004a78:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0800ece4 	.word	0x0800ece4
 8004a88:	0800ed74 	.word	0x0800ed74
 8004a8c:	0800ed38 	.word	0x0800ed38
 8004a90:	080107e8 	.word	0x080107e8

08004a94 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d006      	beq.n	8004ab6 <do_memp_free_pool+0x22>
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad4 <do_memp_free_pool+0x40>)
 8004aaa:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8004aae:	490a      	ldr	r1, [pc, #40]	@ (8004ad8 <do_memp_free_pool+0x44>)
 8004ab0:	480a      	ldr	r0, [pc, #40]	@ (8004adc <do_memp_free_pool+0x48>)
 8004ab2:	f008 ff53 	bl	800d95c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	0800ece4 	.word	0x0800ece4
 8004ad8:	0800ed94 	.word	0x0800ed94
 8004adc:	0800ed38 	.word	0x0800ed38

08004ae0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d907      	bls.n	8004b02 <memp_free+0x22>
 8004af2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <memp_free+0x44>)
 8004af4:	f240 12db 	movw	r2, #475	@ 0x1db
 8004af8:	490b      	ldr	r1, [pc, #44]	@ (8004b28 <memp_free+0x48>)
 8004afa:	480c      	ldr	r0, [pc, #48]	@ (8004b2c <memp_free+0x4c>)
 8004afc:	f008 ff2e 	bl	800d95c <iprintf>
 8004b00:	e00c      	b.n	8004b1c <memp_free+0x3c>

  if (mem == NULL) {
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	4a09      	ldr	r2, [pc, #36]	@ (8004b30 <memp_free+0x50>)
 8004b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffbe 	bl	8004a94 <do_memp_free_pool>
 8004b18:	e000      	b.n	8004b1c <memp_free+0x3c>
    return;
 8004b1a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	0800ece4 	.word	0x0800ece4
 8004b28:	0800edb4 	.word	0x0800edb4
 8004b2c:	0800ed38 	.word	0x0800ed38
 8004b30:	080107e8 	.word	0x080107e8

08004b34 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <netif_add+0x20>
 8004b54:	4b21      	ldr	r3, [pc, #132]	@ (8004bdc <netif_add+0x9c>)
 8004b56:	22fb      	movs	r2, #251	@ 0xfb
 8004b58:	4921      	ldr	r1, [pc, #132]	@ (8004be0 <netif_add+0xa0>)
 8004b5a:	4822      	ldr	r0, [pc, #136]	@ (8004be4 <netif_add+0xa4>)
 8004b5c:	f008 fefe 	bl	800d95c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8004b8e:	4b16      	ldr	r3, [pc, #88]	@ (8004be8 <netif_add+0xa8>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	b2d1      	uxtb	r1, r2
 8004b96:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <netif_add+0xa8>)
 8004b98:	7011      	strb	r1, [r2, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a3a      	ldr	r2, [r7, #32]
 8004ba4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f81f 	bl	8004bf0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	4798      	blx	r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <netif_add+0x82>
    return NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e007      	b.n	8004bd2 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004bec <netif_add+0xac>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004bca:	4a08      	ldr	r2, [pc, #32]	@ (8004bec <netif_add+0xac>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	0800edd0 	.word	0x0800edd0
 8004be0:	0800ee04 	.word	0x0800ee04
 8004be4:	0800ee1c 	.word	0x0800ee1c
 8004be8:	20007f00 	.word	0x20007f00
 8004bec:	20007ef8 	.word	0x20007ef8

08004bf0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <netif_set_addr+0x1c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10c      	bne.n	8004c26 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004c0c:	68b9      	ldr	r1, [r7, #8]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f81a 	bl	8004c48 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f861 	bl	8004cde <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 f84a 	bl	8004cb8 <netif_set_gw>
 8004c24:	e00c      	b.n	8004c40 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f858 	bl	8004cde <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f841 	bl	8004cb8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f805 	bl	8004c48 <netif_set_ipaddr>
  }
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <netif_set_ipaddr+0x18>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e002      	b.n	8004c66 <netif_set_ipaddr+0x1e>
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <netif_set_ipaddr+0x6c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d01c      	beq.n	8004cac <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	f107 020c 	add.w	r2, r7, #12
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f002 fab3 	bl	80071e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	3304      	adds	r3, #4
 8004c86:	f107 020c 	add.w	r2, r7, #12
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f006 fb0f 	bl	800b2b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <netif_set_ipaddr+0x56>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	e000      	b.n	8004ca0 <netif_set_ipaddr+0x58>
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f85d 	bl	8004d66 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	0801084c 	.word	0x0801084c

08004cb8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <netif_set_gw+0x16>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	e000      	b.n	8004cd0 <netif_set_gw+0x18>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <netif_set_netmask+0x16>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	e000      	b.n	8004cf6 <netif_set_netmask+0x18>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004d0c:	4a03      	ldr	r2, [pc, #12]	@ (8004d1c <netif_set_default+0x18>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004d12:	bf00      	nop
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bc80      	pop	{r7}
 8004d1a:	4770      	bx	lr
 8004d1c:	20007efc 	.word	0x20007efc

08004d20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d113      	bne.n	8004d5e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004d56:	2103      	movs	r1, #3
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f804 	bl	8004d66 <netif_issue_reports>
    }
  }
}
 8004d5e:	bf00      	nop
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b082      	sub	sp, #8
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d011      	beq.n	8004da0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3304      	adds	r3, #4
 8004d98:	4619      	mov	r1, r3
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f007 f988 	bl	800c0b0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004da0:	bf00      	nop
 8004da2:	3708      	adds	r7, #8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  if (netif) {
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	61da      	str	r2, [r3, #28]
  }
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004dce:	4b0e      	ldr	r3, [pc, #56]	@ (8004e08 <pbuf_free_ooseq+0x40>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8004e0c <pbuf_free_ooseq+0x44>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	e00f      	b.n	8004dfc <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 fe9a 	bl	8006b22 <tcp_segs_free>
      pcb->ooseq = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 8004df4:	e005      	b.n	8004e02 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1ec      	bne.n	8004ddc <pbuf_free_ooseq+0x14>
    }
  }
}
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	20007f01 	.word	0x20007f01
 8004e0c:	20007f10 	.word	0x20007f10

08004e10 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004e10:	b480      	push	{r7}
 8004e12:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004e14:	4b03      	ldr	r3, [pc, #12]	@ (8004e24 <pbuf_pool_is_empty+0x14>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20007f01 	.word	0x20007f01

08004e28 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
 8004e32:	460b      	mov	r3, r1
 8004e34:	80bb      	strh	r3, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d81c      	bhi.n	8004e7a <pbuf_alloc+0x52>
 8004e40:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <pbuf_alloc+0x20>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e5d 	.word	0x08004e5d
 8004e4c:	08004e63 	.word	0x08004e63
 8004e50:	08004e69 	.word	0x08004e69
 8004e54:	08004e6f 	.word	0x08004e6f
 8004e58:	08004e75 	.word	0x08004e75
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004e5c:	2336      	movs	r3, #54	@ 0x36
 8004e5e:	82fb      	strh	r3, [r7, #22]
    break;
 8004e60:	e014      	b.n	8004e8c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004e62:	2322      	movs	r3, #34	@ 0x22
 8004e64:	82fb      	strh	r3, [r7, #22]
    break;
 8004e66:	e011      	b.n	8004e8c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004e68:	230e      	movs	r3, #14
 8004e6a:	82fb      	strh	r3, [r7, #22]
    break;
 8004e6c:	e00e      	b.n	8004e8c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	82fb      	strh	r3, [r7, #22]
    break;
 8004e72:	e00b      	b.n	8004e8c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	82fb      	strh	r3, [r7, #22]
    break;
 8004e78:	e008      	b.n	8004e8c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004e7a:	4ba1      	ldr	r3, [pc, #644]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004e7c:	f44f 728b 	mov.w	r2, #278	@ 0x116
 8004e80:	49a0      	ldr	r1, [pc, #640]	@ (8005104 <pbuf_alloc+0x2dc>)
 8004e82:	48a1      	ldr	r0, [pc, #644]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004e84:	f008 fd6a 	bl	800d95c <iprintf>
    return NULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e15c      	b.n	8005146 <pbuf_alloc+0x31e>
  }

  switch (type) {
 8004e8c:	79bb      	ldrb	r3, [r7, #6]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d00d      	beq.n	8004eae <pbuf_alloc+0x86>
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	f300 8146 	bgt.w	8005124 <pbuf_alloc+0x2fc>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80d0 	beq.w	800503e <pbuf_alloc+0x216>
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f2c0 8140 	blt.w	8005124 <pbuf_alloc+0x2fc>
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	f200 813c 	bhi.w	8005124 <pbuf_alloc+0x2fc>
 8004eac:	e10d      	b.n	80050ca <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004eae:	2008      	movs	r0, #8
 8004eb0:	f7ff fdca 	bl	8004a48 <memp_malloc>
 8004eb4:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 8004ebc:	f7ff ffa8 	bl	8004e10 <pbuf_pool_is_empty>
      return NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e140      	b.n	8005146 <pbuf_alloc+0x31e>
    }
    p->type = type;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	79ba      	ldrb	r2, [r7, #6]
 8004ec8:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8004ed0:	8afb      	ldrh	r3, [r7, #22]
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	3303      	adds	r3, #3
 8004eda:	f023 0303 	bic.w	r3, r3, #3
 8004ede:	461a      	mov	r2, r3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <pbuf_alloc+0xd6>
 8004ef0:	4b83      	ldr	r3, [pc, #524]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004ef2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8004ef6:	4985      	ldr	r1, [pc, #532]	@ (800510c <pbuf_alloc+0x2e4>)
 8004ef8:	4883      	ldr	r0, [pc, #524]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004efa:	f008 fd2f 	bl	800d95c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	88ba      	ldrh	r2, [r7, #4]
 8004f02:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004f04:	8afb      	ldrh	r3, [r7, #22]
 8004f06:	3303      	adds	r3, #3
 8004f08:	f023 0303 	bic.w	r3, r3, #3
 8004f0c:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 8004f10:	88bb      	ldrh	r3, [r7, #4]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bf28      	it	cs
 8004f16:	4613      	movcs	r3, r2
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	8952      	ldrh	r2, [r2, #10]
 8004f26:	441a      	add	r2, r3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d906      	bls.n	8004f40 <pbuf_alloc+0x118>
 8004f32:	4b73      	ldr	r3, [pc, #460]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004f34:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8004f38:	4975      	ldr	r1, [pc, #468]	@ (8005110 <pbuf_alloc+0x2e8>)
 8004f3a:	4873      	ldr	r0, [pc, #460]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004f3c:	f008 fd0e 	bl	800d95c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004f40:	8afb      	ldrh	r3, [r7, #22]
 8004f42:	3303      	adds	r3, #3
 8004f44:	f023 0303 	bic.w	r3, r3, #3
 8004f48:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004f4c:	d106      	bne.n	8004f5c <pbuf_alloc+0x134>
 8004f4e:	4b6c      	ldr	r3, [pc, #432]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004f50:	f240 1231 	movw	r2, #305	@ 0x131
 8004f54:	496f      	ldr	r1, [pc, #444]	@ (8005114 <pbuf_alloc+0x2ec>)
 8004f56:	486c      	ldr	r0, [pc, #432]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004f58:	f008 fd00 	bl	800d95c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004f66:	88bb      	ldrh	r3, [r7, #4]
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	8952      	ldrh	r2, [r2, #10]
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8004f70:	e061      	b.n	8005036 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004f72:	2008      	movs	r0, #8
 8004f74:	f7ff fd68 	bl	8004a48 <memp_malloc>
 8004f78:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 8004f80:	f7ff ff46 	bl	8004e10 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004f84:	69f8      	ldr	r0, [r7, #28]
 8004f86:	f000 fac7 	bl	8005518 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e0db      	b.n	8005146 <pbuf_alloc+0x31e>
      }
      q->type = type;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	79ba      	ldrb	r2, [r7, #6]
 8004f92:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004fac:	4293      	cmp	r3, r2
 8004fae:	dd06      	ble.n	8004fbe <pbuf_alloc+0x196>
 8004fb0:	4b53      	ldr	r3, [pc, #332]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004fb2:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 8004fb6:	4958      	ldr	r1, [pc, #352]	@ (8005118 <pbuf_alloc+0x2f0>)
 8004fb8:	4853      	ldr	r0, [pc, #332]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004fba:	f008 fccf 	bl	800d95c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8004fce:	bf28      	it	cs
 8004fd0:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f103 0210 	add.w	r2, r3, #16
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d006      	beq.n	8004ffe <pbuf_alloc+0x1d6>
 8004ff0:	4b43      	ldr	r3, [pc, #268]	@ (8005100 <pbuf_alloc+0x2d8>)
 8004ff2:	f240 1251 	movw	r2, #337	@ 0x151
 8004ff6:	4949      	ldr	r1, [pc, #292]	@ (800511c <pbuf_alloc+0x2f4>)
 8004ff8:	4843      	ldr	r0, [pc, #268]	@ (8005108 <pbuf_alloc+0x2e0>)
 8004ffa:	f008 fcaf 	bl	800d95c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	8952      	ldrh	r2, [r2, #10]
 8005006:	441a      	add	r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800500e:	429a      	cmp	r2, r3
 8005010:	d906      	bls.n	8005020 <pbuf_alloc+0x1f8>
 8005012:	4b3b      	ldr	r3, [pc, #236]	@ (8005100 <pbuf_alloc+0x2d8>)
 8005014:	f240 1253 	movw	r2, #339	@ 0x153
 8005018:	493d      	ldr	r1, [pc, #244]	@ (8005110 <pbuf_alloc+0x2e8>)
 800501a:	483b      	ldr	r0, [pc, #236]	@ (8005108 <pbuf_alloc+0x2e0>)
 800501c:	f008 fc9e 	bl	800d95c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	895b      	ldrh	r3, [r3, #10]
 800502a:	461a      	mov	r2, r3
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc9a      	bgt.n	8004f72 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800503c:	e07c      	b.n	8005138 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800503e:	8afb      	ldrh	r3, [r7, #22]
 8005040:	3313      	adds	r3, #19
 8005042:	b29b      	uxth	r3, r3
 8005044:	f023 0303 	bic.w	r3, r3, #3
 8005048:	b29a      	uxth	r2, r3
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	3303      	adds	r3, #3
 800504e:	b29b      	uxth	r3, r3
 8005050:	f023 0303 	bic.w	r3, r3, #3
 8005054:	b29b      	uxth	r3, r3
 8005056:	4413      	add	r3, r2
 8005058:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800505a:	897a      	ldrh	r2, [r7, #10]
 800505c:	88bb      	ldrh	r3, [r7, #4]
 800505e:	3303      	adds	r3, #3
 8005060:	f023 0303 	bic.w	r3, r3, #3
 8005064:	429a      	cmp	r2, r3
 8005066:	d201      	bcs.n	800506c <pbuf_alloc+0x244>
        return NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	e06c      	b.n	8005146 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800506c:	897b      	ldrh	r3, [r7, #10]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fb8e 	bl	8004790 <mem_malloc>
 8005074:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <pbuf_alloc+0x258>
      return NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	e062      	b.n	8005146 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8005080:	8afb      	ldrh	r3, [r7, #22]
 8005082:	3310      	adds	r3, #16
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	4413      	add	r3, r2
 8005088:	3303      	adds	r3, #3
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	461a      	mov	r2, r3
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	88ba      	ldrh	r2, [r7, #4]
 8005098:	811a      	strh	r2, [r3, #8]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	891a      	ldrh	r2, [r3, #8]
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	79ba      	ldrb	r2, [r7, #6]
 80050ac:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d03d      	beq.n	8005136 <pbuf_alloc+0x30e>
 80050ba:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <pbuf_alloc+0x2d8>)
 80050bc:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 80050c0:	4917      	ldr	r1, [pc, #92]	@ (8005120 <pbuf_alloc+0x2f8>)
 80050c2:	4811      	ldr	r0, [pc, #68]	@ (8005108 <pbuf_alloc+0x2e0>)
 80050c4:	f008 fc4a 	bl	800d95c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80050c8:	e035      	b.n	8005136 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80050ca:	2007      	movs	r0, #7
 80050cc:	f7ff fcbc 	bl	8004a48 <memp_malloc>
 80050d0:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	e034      	b.n	8005146 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2200      	movs	r2, #0
 80050e0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	88ba      	ldrh	r2, [r7, #4]
 80050e6:	811a      	strh	r2, [r3, #8]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	891a      	ldrh	r2, [r3, #8]
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    p->type = type;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	79ba      	ldrb	r2, [r7, #6]
 80050fa:	731a      	strb	r2, [r3, #12]
    break;
 80050fc:	e01c      	b.n	8005138 <pbuf_alloc+0x310>
 80050fe:	bf00      	nop
 8005100:	0800ee44 	.word	0x0800ee44
 8005104:	0800ee74 	.word	0x0800ee74
 8005108:	0800ee90 	.word	0x0800ee90
 800510c:	0800eeb8 	.word	0x0800eeb8
 8005110:	0800eee8 	.word	0x0800eee8
 8005114:	0800ef1c 	.word	0x0800ef1c
 8005118:	0800ef50 	.word	0x0800ef50
 800511c:	0800ef64 	.word	0x0800ef64
 8005120:	0800ef94 	.word	0x0800ef94
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005124:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <pbuf_alloc+0x328>)
 8005126:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800512a:	490a      	ldr	r1, [pc, #40]	@ (8005154 <pbuf_alloc+0x32c>)
 800512c:	480a      	ldr	r0, [pc, #40]	@ (8005158 <pbuf_alloc+0x330>)
 800512e:	f008 fc15 	bl	800d95c <iprintf>
    return NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	e007      	b.n	8005146 <pbuf_alloc+0x31e>
    break;
 8005136:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2201      	movs	r2, #1
 800513c:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2200      	movs	r2, #0
 8005142:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005144:	69fb      	ldr	r3, [r7, #28]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	0800ee44 	.word	0x0800ee44
 8005154:	0800efc0 	.word	0x0800efc0
 8005158:	0800ee90 	.word	0x0800ee90

0800515c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	603b      	str	r3, [r7, #0]
 8005164:	4603      	mov	r3, r0
 8005166:	71fb      	strb	r3, [r7, #7]
 8005168:	460b      	mov	r3, r1
 800516a:	80bb      	strh	r3, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d81b      	bhi.n	80051ae <pbuf_alloced_custom+0x52>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <pbuf_alloced_custom+0x20>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	08005191 	.word	0x08005191
 8005180:	08005197 	.word	0x08005197
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051a3 	.word	0x080051a3
 800518c:	080051a9 	.word	0x080051a9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8005190:	2336      	movs	r3, #54	@ 0x36
 8005192:	81fb      	strh	r3, [r7, #14]
    break;
 8005194:	e014      	b.n	80051c0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8005196:	2322      	movs	r3, #34	@ 0x22
 8005198:	81fb      	strh	r3, [r7, #14]
    break;
 800519a:	e011      	b.n	80051c0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800519c:	230e      	movs	r3, #14
 800519e:	81fb      	strh	r3, [r7, #14]
    break;
 80051a0:	e00e      	b.n	80051c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80051a2:	2300      	movs	r3, #0
 80051a4:	81fb      	strh	r3, [r7, #14]
    break;
 80051a6:	e00b      	b.n	80051c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	81fb      	strh	r3, [r7, #14]
    break;
 80051ac:	e008      	b.n	80051c0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80051ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <pbuf_alloced_custom+0xc8>)
 80051b0:	f240 12c5 	movw	r2, #453	@ 0x1c5
 80051b4:	491c      	ldr	r1, [pc, #112]	@ (8005228 <pbuf_alloced_custom+0xcc>)
 80051b6:	481d      	ldr	r0, [pc, #116]	@ (800522c <pbuf_alloced_custom+0xd0>)
 80051b8:	f008 fbd0 	bl	800d95c <iprintf>
    return NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	e02d      	b.n	800521c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	3303      	adds	r3, #3
 80051c4:	f023 0203 	bic.w	r2, r3, #3
 80051c8:	88bb      	ldrh	r3, [r7, #4]
 80051ca:	441a      	add	r2, r3
 80051cc:	8bbb      	ldrh	r3, [r7, #28]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d901      	bls.n	80051d6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	e022      	b.n	800521c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80051e2:	89fb      	ldrh	r3, [r7, #14]
 80051e4:	3303      	adds	r3, #3
 80051e6:	f023 0303 	bic.w	r3, r3, #3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	441a      	add	r2, r3
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	e002      	b.n	80051fa <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2202      	movs	r2, #2
 80051fe:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	88ba      	ldrh	r2, [r7, #4]
 8005204:	811a      	strh	r2, [r3, #8]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	891a      	ldrh	r2, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	79ba      	ldrb	r2, [r7, #6]
 8005212:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800521a:	683b      	ldr	r3, [r7, #0]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800ee44 	.word	0x0800ee44
 8005228:	0800efdc 	.word	0x0800efdc
 800522c:	0800ee90 	.word	0x0800ee90

08005230 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	460b      	mov	r3, r1
 800523a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <pbuf_realloc+0x20>
 8005242:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <pbuf_realloc+0x140>)
 8005244:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8005248:	494a      	ldr	r1, [pc, #296]	@ (8005374 <pbuf_realloc+0x144>)
 800524a:	484b      	ldr	r0, [pc, #300]	@ (8005378 <pbuf_realloc+0x148>)
 800524c:	f008 fb86 	bl	800d95c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7b1b      	ldrb	r3, [r3, #12]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d012      	beq.n	800527e <pbuf_realloc+0x4e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	7b1b      	ldrb	r3, [r3, #12]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d00e      	beq.n	800527e <pbuf_realloc+0x4e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	7b1b      	ldrb	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <pbuf_realloc+0x4e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7b1b      	ldrb	r3, [r3, #12]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d006      	beq.n	800527e <pbuf_realloc+0x4e>
 8005270:	4b3f      	ldr	r3, [pc, #252]	@ (8005370 <pbuf_realloc+0x140>)
 8005272:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005276:	4941      	ldr	r1, [pc, #260]	@ (800537c <pbuf_realloc+0x14c>)
 8005278:	483f      	ldr	r0, [pc, #252]	@ (8005378 <pbuf_realloc+0x148>)
 800527a:	f008 fb6f 	bl	800d95c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	891b      	ldrh	r3, [r3, #8]
 8005282:	887a      	ldrh	r2, [r7, #2]
 8005284:	429a      	cmp	r2, r3
 8005286:	d26e      	bcs.n	8005366 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8005288:	887b      	ldrh	r3, [r7, #2]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	8912      	ldrh	r2, [r2, #8]
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005292:	887b      	ldrh	r3, [r7, #2]
 8005294:	827b      	strh	r3, [r7, #18]
  q = p;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800529a:	e025      	b.n	80052e8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	895b      	ldrh	r3, [r3, #10]
 80052a0:	8a7a      	ldrh	r2, [r7, #18]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80052ac:	4293      	cmp	r3, r2
 80052ae:	dd06      	ble.n	80052be <pbuf_realloc+0x8e>
 80052b0:	4b2f      	ldr	r3, [pc, #188]	@ (8005370 <pbuf_realloc+0x140>)
 80052b2:	f240 220b 	movw	r2, #523	@ 0x20b
 80052b6:	4932      	ldr	r1, [pc, #200]	@ (8005380 <pbuf_realloc+0x150>)
 80052b8:	482f      	ldr	r0, [pc, #188]	@ (8005378 <pbuf_realloc+0x148>)
 80052ba:	f008 fb4f 	bl	800d95c <iprintf>
    q->tot_len += (u16_t)grow;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	891a      	ldrh	r2, [r3, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	4413      	add	r3, r2
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d106      	bne.n	80052e8 <pbuf_realloc+0xb8>
 80052da:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <pbuf_realloc+0x140>)
 80052dc:	f240 220f 	movw	r2, #527	@ 0x20f
 80052e0:	4928      	ldr	r1, [pc, #160]	@ (8005384 <pbuf_realloc+0x154>)
 80052e2:	4825      	ldr	r0, [pc, #148]	@ (8005378 <pbuf_realloc+0x148>)
 80052e4:	f008 fb3a 	bl	800d95c <iprintf>
  while (rem_len > q->len) {
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	895b      	ldrh	r3, [r3, #10]
 80052ec:	8a7a      	ldrh	r2, [r7, #18]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d8d4      	bhi.n	800529c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	7b1b      	ldrb	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d121      	bne.n	800533e <pbuf_realloc+0x10e>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	895b      	ldrh	r3, [r3, #10]
 80052fe:	8a7a      	ldrh	r2, [r7, #18]
 8005300:	429a      	cmp	r2, r3
 8005302:	d01c      	beq.n	800533e <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	7b5b      	ldrb	r3, [r3, #13]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d116      	bne.n	800533e <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	b29a      	uxth	r2, r3
 800531a:	8a7b      	ldrh	r3, [r7, #18]
 800531c:	4413      	add	r3, r2
 800531e:	b29b      	uxth	r3, r3
 8005320:	4619      	mov	r1, r3
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	f7ff f958 	bl	80045d8 <mem_trim>
 8005328:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <pbuf_realloc+0x10e>
 8005330:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <pbuf_realloc+0x140>)
 8005332:	f240 221d 	movw	r2, #541	@ 0x21d
 8005336:	4914      	ldr	r1, [pc, #80]	@ (8005388 <pbuf_realloc+0x158>)
 8005338:	480f      	ldr	r0, [pc, #60]	@ (8005378 <pbuf_realloc+0x148>)
 800533a:	f008 fb0f 	bl	800d95c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	8a7a      	ldrh	r2, [r7, #18]
 8005342:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	895a      	ldrh	r2, [r3, #10]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d004      	beq.n	800535e <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 f8dd 	bl	8005518 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e000      	b.n	8005368 <pbuf_realloc+0x138>
    return;
 8005366:	bf00      	nop

}
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	0800ee44 	.word	0x0800ee44
 8005374:	0800f000 	.word	0x0800f000
 8005378:	0800ee90 	.word	0x0800ee90
 800537c:	0800f018 	.word	0x0800f018
 8005380:	0800f034 	.word	0x0800f034
 8005384:	0800f048 	.word	0x0800f048
 8005388:	0800f060 	.word	0x0800f060

0800538c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	807b      	strh	r3, [r7, #2]
 8005398:	4613      	mov	r3, r2
 800539a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <pbuf_header_impl+0x24>
 80053a2:	4b46      	ldr	r3, [pc, #280]	@ (80054bc <pbuf_header_impl+0x130>)
 80053a4:	f240 223f 	movw	r2, #575	@ 0x23f
 80053a8:	4945      	ldr	r1, [pc, #276]	@ (80054c0 <pbuf_header_impl+0x134>)
 80053aa:	4846      	ldr	r0, [pc, #280]	@ (80054c4 <pbuf_header_impl+0x138>)
 80053ac:	f008 fad6 	bl	800d95c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80053b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <pbuf_header_impl+0x32>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <pbuf_header_impl+0x36>
    return 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	e078      	b.n	80054b4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80053c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da10      	bge.n	80053ec <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80053ca:	887b      	ldrh	r3, [r7, #2]
 80053cc:	425b      	negs	r3, r3
 80053ce:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	895b      	ldrh	r3, [r3, #10]
 80053d4:	89fa      	ldrh	r2, [r7, #14]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d90a      	bls.n	80053f0 <pbuf_header_impl+0x64>
 80053da:	4b38      	ldr	r3, [pc, #224]	@ (80054bc <pbuf_header_impl+0x130>)
 80053dc:	f240 2247 	movw	r2, #583	@ 0x247
 80053e0:	4939      	ldr	r1, [pc, #228]	@ (80054c8 <pbuf_header_impl+0x13c>)
 80053e2:	4838      	ldr	r0, [pc, #224]	@ (80054c4 <pbuf_header_impl+0x138>)
 80053e4:	f008 faba 	bl	800d95c <iprintf>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e063      	b.n	80054b4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7b1b      	ldrb	r3, [r3, #12]
 80053f4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80053fc:	89bb      	ldrh	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <pbuf_header_impl+0x7c>
 8005402:	89bb      	ldrh	r3, [r7, #12]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d112      	bne.n	800542e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005410:	425b      	negs	r3, r3
 8005412:	441a      	add	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3310      	adds	r3, #16
 8005420:	429a      	cmp	r2, r3
 8005422:	d238      	bcs.n	8005496 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800542e:	89bb      	ldrh	r3, [r7, #12]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d002      	beq.n	800543a <pbuf_header_impl+0xae>
 8005434:	89bb      	ldrh	r3, [r7, #12]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d124      	bne.n	8005484 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800543a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800543e:	2b00      	cmp	r3, #0
 8005440:	da0d      	bge.n	800545e <pbuf_header_impl+0xd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	895b      	ldrh	r3, [r3, #10]
 8005446:	89fa      	ldrh	r2, [r7, #14]
 8005448:	429a      	cmp	r2, r3
 800544a:	d808      	bhi.n	800545e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005454:	425b      	negs	r3, r3
 8005456:	441a      	add	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	605a      	str	r2, [r3, #4]
 800545c:	e011      	b.n	8005482 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800545e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005462:	2b00      	cmp	r3, #0
 8005464:	dd0b      	ble.n	800547e <pbuf_header_impl+0xf2>
 8005466:	787b      	ldrb	r3, [r7, #1]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005474:	425b      	negs	r3, r3
 8005476:	441a      	add	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	e001      	b.n	8005482 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800547e:	2301      	movs	r3, #1
 8005480:	e018      	b.n	80054b4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8005482:	e008      	b.n	8005496 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8005484:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <pbuf_header_impl+0x130>)
 8005486:	f240 2277 	movw	r2, #631	@ 0x277
 800548a:	4910      	ldr	r1, [pc, #64]	@ (80054cc <pbuf_header_impl+0x140>)
 800548c:	480d      	ldr	r0, [pc, #52]	@ (80054c4 <pbuf_header_impl+0x138>)
 800548e:	f008 fa65 	bl	800d95c <iprintf>
    return 1;
 8005492:	2301      	movs	r3, #1
 8005494:	e00e      	b.n	80054b4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	895a      	ldrh	r2, [r3, #10]
 800549a:	887b      	ldrh	r3, [r7, #2]
 800549c:	4413      	add	r3, r2
 800549e:	b29a      	uxth	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	891a      	ldrh	r2, [r3, #8]
 80054a8:	887b      	ldrh	r3, [r7, #2]
 80054aa:	4413      	add	r3, r2
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	0800ee44 	.word	0x0800ee44
 80054c0:	0800f07c 	.word	0x0800f07c
 80054c4:	0800ee90 	.word	0x0800ee90
 80054c8:	0800f088 	.word	0x0800f088
 80054cc:	0800f0a8 	.word	0x0800f0a8

080054d0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80054dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054e0:	2200      	movs	r2, #0
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ff51 	bl	800538c <pbuf_header_impl>
 80054ea:	4603      	mov	r3, r0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8005500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005504:	2201      	movs	r2, #1
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff3f 	bl	800538c <pbuf_header_impl>
 800550e:	4603      	mov	r3, r0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <pbuf_free+0x22>
 800552c:	4b3e      	ldr	r3, [pc, #248]	@ (8005628 <pbuf_free+0x110>)
 800552e:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8005532:	493e      	ldr	r1, [pc, #248]	@ (800562c <pbuf_free+0x114>)
 8005534:	483e      	ldr	r0, [pc, #248]	@ (8005630 <pbuf_free+0x118>)
 8005536:	f008 fa11 	bl	800d95c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800553a:	2300      	movs	r3, #0
 800553c:	e070      	b.n	8005620 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	7b1b      	ldrb	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d012      	beq.n	800556c <pbuf_free+0x54>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	7b1b      	ldrb	r3, [r3, #12]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d00e      	beq.n	800556c <pbuf_free+0x54>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	7b1b      	ldrb	r3, [r3, #12]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d00a      	beq.n	800556c <pbuf_free+0x54>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7b1b      	ldrb	r3, [r3, #12]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d006      	beq.n	800556c <pbuf_free+0x54>
 800555e:	4b32      	ldr	r3, [pc, #200]	@ (8005628 <pbuf_free+0x110>)
 8005560:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005564:	4933      	ldr	r1, [pc, #204]	@ (8005634 <pbuf_free+0x11c>)
 8005566:	4832      	ldr	r0, [pc, #200]	@ (8005630 <pbuf_free+0x118>)
 8005568:	f008 f9f8 	bl	800d95c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005570:	e052      	b.n	8005618 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	89db      	ldrh	r3, [r3, #14]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <pbuf_free+0x70>
 800557a:	4b2b      	ldr	r3, [pc, #172]	@ (8005628 <pbuf_free+0x110>)
 800557c:	f240 22eb 	movw	r2, #747	@ 0x2eb
 8005580:	492d      	ldr	r1, [pc, #180]	@ (8005638 <pbuf_free+0x120>)
 8005582:	482b      	ldr	r0, [pc, #172]	@ (8005630 <pbuf_free+0x118>)
 8005584:	f008 f9ea 	bl	800d95c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	89db      	ldrh	r3, [r3, #14]
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	81da      	strh	r2, [r3, #14]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	89db      	ldrh	r3, [r3, #14]
 8005598:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800559a:	8abb      	ldrh	r3, [r7, #20]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d139      	bne.n	8005614 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7b1b      	ldrb	r3, [r3, #12]
 80055aa:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	7b5b      	ldrb	r3, [r3, #13]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d011      	beq.n	80055dc <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d106      	bne.n	80055d2 <pbuf_free+0xba>
 80055c4:	4b18      	ldr	r3, [pc, #96]	@ (8005628 <pbuf_free+0x110>)
 80055c6:	f240 22f9 	movw	r2, #761	@ 0x2f9
 80055ca:	491c      	ldr	r1, [pc, #112]	@ (800563c <pbuf_free+0x124>)
 80055cc:	4818      	ldr	r0, [pc, #96]	@ (8005630 <pbuf_free+0x118>)
 80055ce:	f008 f9c5 	bl	800d95c <iprintf>
        pc->custom_free_function(p);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
 80055da:	e015      	b.n	8005608 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80055dc:	89fb      	ldrh	r3, [r7, #14]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d104      	bne.n	80055ec <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	2008      	movs	r0, #8
 80055e6:	f7ff fa7b 	bl	8004ae0 <memp_free>
 80055ea:	e00d      	b.n	8005608 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80055ec:	89fb      	ldrh	r3, [r7, #14]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d002      	beq.n	80055f8 <pbuf_free+0xe0>
 80055f2:	89fb      	ldrh	r3, [r7, #14]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d104      	bne.n	8005602 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	2007      	movs	r0, #7
 80055fc:	f7ff fa70 	bl	8004ae0 <memp_free>
 8005600:	e002      	b.n	8005608 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fe ff86 	bl	8004514 <mem_free>
        }
      }
      count++;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	3301      	adds	r3, #1
 800560c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	e001      	b.n	8005618 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1a9      	bne.n	8005572 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800561e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0800ee44 	.word	0x0800ee44
 800562c:	0800f07c 	.word	0x0800f07c
 8005630:	0800ee90 	.word	0x0800ee90
 8005634:	0800f0b8 	.word	0x0800f0b8
 8005638:	0800f0d0 	.word	0x0800f0d0
 800563c:	0800f0e8 	.word	0x0800f0e8

08005640 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800564c:	e005      	b.n	800565a <pbuf_clen+0x1a>
    ++len;
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	3301      	adds	r3, #1
 8005652:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f6      	bne.n	800564e <pbuf_clen+0xe>
  }
  return len;
 8005660:	89fb      	ldrh	r3, [r7, #14]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	bc80      	pop	{r7}
 800566a:	4770      	bx	lr

0800566c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d010      	beq.n	800569c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	89db      	ldrh	r3, [r3, #14]
 800567e:	3301      	adds	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	89db      	ldrh	r3, [r3, #14]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <pbuf_ref+0x30>
 800568e:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <pbuf_ref+0x38>)
 8005690:	f240 3239 	movw	r2, #825	@ 0x339
 8005694:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <pbuf_ref+0x3c>)
 8005696:	4805      	ldr	r0, [pc, #20]	@ (80056ac <pbuf_ref+0x40>)
 8005698:	f008 f960 	bl	800d95c <iprintf>
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	0800ee44 	.word	0x0800ee44
 80056a8:	0800f10c 	.word	0x0800f10c
 80056ac:	0800ee90 	.word	0x0800ee90

080056b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <pbuf_cat+0x16>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <pbuf_cat+0x26>
 80056c6:	4b20      	ldr	r3, [pc, #128]	@ (8005748 <pbuf_cat+0x98>)
 80056c8:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 80056cc:	491f      	ldr	r1, [pc, #124]	@ (800574c <pbuf_cat+0x9c>)
 80056ce:	4820      	ldr	r0, [pc, #128]	@ (8005750 <pbuf_cat+0xa0>)
 80056d0:	f008 f944 	bl	800d95c <iprintf>
 80056d4:	e034      	b.n	8005740 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e00a      	b.n	80056f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	891a      	ldrh	r2, [r3, #8]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	891b      	ldrh	r3, [r3, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f0      	bne.n	80056dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	891a      	ldrh	r2, [r3, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	895b      	ldrh	r3, [r3, #10]
 8005702:	429a      	cmp	r2, r3
 8005704:	d006      	beq.n	8005714 <pbuf_cat+0x64>
 8005706:	4b10      	ldr	r3, [pc, #64]	@ (8005748 <pbuf_cat+0x98>)
 8005708:	f240 3255 	movw	r2, #853	@ 0x355
 800570c:	4911      	ldr	r1, [pc, #68]	@ (8005754 <pbuf_cat+0xa4>)
 800570e:	4810      	ldr	r0, [pc, #64]	@ (8005750 <pbuf_cat+0xa0>)
 8005710:	f008 f924 	bl	800d95c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d006      	beq.n	800572a <pbuf_cat+0x7a>
 800571c:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <pbuf_cat+0x98>)
 800571e:	f240 3256 	movw	r2, #854	@ 0x356
 8005722:	490d      	ldr	r1, [pc, #52]	@ (8005758 <pbuf_cat+0xa8>)
 8005724:	480a      	ldr	r0, [pc, #40]	@ (8005750 <pbuf_cat+0xa0>)
 8005726:	f008 f919 	bl	800d95c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	891a      	ldrh	r2, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	891b      	ldrh	r3, [r3, #8]
 8005732:	4413      	add	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0800ee44 	.word	0x0800ee44
 800574c:	0800f120 	.word	0x0800f120
 8005750:	0800ee90 	.word	0x0800ee90
 8005754:	0800f158 	.word	0x0800f158
 8005758:	0800f188 	.word	0x0800f188

0800575c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8005766:	2300      	movs	r3, #0
 8005768:	81fb      	strh	r3, [r7, #14]
 800576a:	2300      	movs	r3, #0
 800576c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <pbuf_copy+0x2a>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <pbuf_copy+0x2a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	891a      	ldrh	r2, [r3, #8]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	891b      	ldrh	r3, [r3, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d209      	bcs.n	800579a <pbuf_copy+0x3e>
 8005786:	4b54      	ldr	r3, [pc, #336]	@ (80058d8 <pbuf_copy+0x17c>)
 8005788:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 800578c:	4953      	ldr	r1, [pc, #332]	@ (80058dc <pbuf_copy+0x180>)
 800578e:	4854      	ldr	r0, [pc, #336]	@ (80058e0 <pbuf_copy+0x184>)
 8005790:	f008 f8e4 	bl	800d95c <iprintf>
 8005794:	f06f 030f 	mvn.w	r3, #15
 8005798:	e099      	b.n	80058ce <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	895b      	ldrh	r3, [r3, #10]
 800579e:	461a      	mov	r2, r3
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	1ad2      	subs	r2, r2, r3
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	895b      	ldrh	r3, [r3, #10]
 80057a8:	4619      	mov	r1, r3
 80057aa:	89bb      	ldrh	r3, [r7, #12]
 80057ac:	1acb      	subs	r3, r1, r3
 80057ae:	429a      	cmp	r2, r3
 80057b0:	db05      	blt.n	80057be <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	895a      	ldrh	r2, [r3, #10]
 80057b6:	89bb      	ldrh	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	817b      	strh	r3, [r7, #10]
 80057bc:	e004      	b.n	80057c8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	895a      	ldrh	r2, [r3, #10]
 80057c2:	89fb      	ldrh	r3, [r7, #14]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	89fb      	ldrh	r3, [r7, #14]
 80057ce:	18d0      	adds	r0, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	89bb      	ldrh	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	897a      	ldrh	r2, [r7, #10]
 80057da:	4619      	mov	r1, r3
 80057dc:	f008 f9b9 	bl	800db52 <memcpy>
    offset_to += len;
 80057e0:	89fa      	ldrh	r2, [r7, #14]
 80057e2:	897b      	ldrh	r3, [r7, #10]
 80057e4:	4413      	add	r3, r2
 80057e6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80057e8:	89ba      	ldrh	r2, [r7, #12]
 80057ea:	897b      	ldrh	r3, [r7, #10]
 80057ec:	4413      	add	r3, r2
 80057ee:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	895b      	ldrh	r3, [r3, #10]
 80057f4:	89fa      	ldrh	r2, [r7, #14]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d906      	bls.n	8005808 <pbuf_copy+0xac>
 80057fa:	4b37      	ldr	r3, [pc, #220]	@ (80058d8 <pbuf_copy+0x17c>)
 80057fc:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8005800:	4938      	ldr	r1, [pc, #224]	@ (80058e4 <pbuf_copy+0x188>)
 8005802:	4837      	ldr	r0, [pc, #220]	@ (80058e0 <pbuf_copy+0x184>)
 8005804:	f008 f8aa 	bl	800d95c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	895b      	ldrh	r3, [r3, #10]
 800580c:	89ba      	ldrh	r2, [r7, #12]
 800580e:	429a      	cmp	r2, r3
 8005810:	d906      	bls.n	8005820 <pbuf_copy+0xc4>
 8005812:	4b31      	ldr	r3, [pc, #196]	@ (80058d8 <pbuf_copy+0x17c>)
 8005814:	f240 32ce 	movw	r2, #974	@ 0x3ce
 8005818:	4933      	ldr	r1, [pc, #204]	@ (80058e8 <pbuf_copy+0x18c>)
 800581a:	4831      	ldr	r0, [pc, #196]	@ (80058e0 <pbuf_copy+0x184>)
 800581c:	f008 f89e 	bl	800d95c <iprintf>
    if (offset_from >= p_from->len) {
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	895b      	ldrh	r3, [r3, #10]
 8005824:	89ba      	ldrh	r2, [r7, #12]
 8005826:	429a      	cmp	r2, r3
 8005828:	d304      	bcc.n	8005834 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	89fa      	ldrh	r2, [r7, #14]
 800583a:	429a      	cmp	r2, r3
 800583c:	d114      	bne.n	8005868 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10c      	bne.n	8005868 <pbuf_copy+0x10c>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d009      	beq.n	8005868 <pbuf_copy+0x10c>
 8005854:	4b20      	ldr	r3, [pc, #128]	@ (80058d8 <pbuf_copy+0x17c>)
 8005856:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800585a:	4924      	ldr	r1, [pc, #144]	@ (80058ec <pbuf_copy+0x190>)
 800585c:	4820      	ldr	r0, [pc, #128]	@ (80058e0 <pbuf_copy+0x184>)
 800585e:	f008 f87d 	bl	800d95c <iprintf>
 8005862:	f06f 030f 	mvn.w	r3, #15
 8005866:	e032      	b.n	80058ce <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d013      	beq.n	8005896 <pbuf_copy+0x13a>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	895a      	ldrh	r2, [r3, #10]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	891b      	ldrh	r3, [r3, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d10d      	bne.n	8005896 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <pbuf_copy+0x13a>
 8005882:	4b15      	ldr	r3, [pc, #84]	@ (80058d8 <pbuf_copy+0x17c>)
 8005884:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8005888:	4919      	ldr	r1, [pc, #100]	@ (80058f0 <pbuf_copy+0x194>)
 800588a:	4815      	ldr	r0, [pc, #84]	@ (80058e0 <pbuf_copy+0x184>)
 800588c:	f008 f866 	bl	800d95c <iprintf>
 8005890:	f06f 0305 	mvn.w	r3, #5
 8005894:	e01b      	b.n	80058ce <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <pbuf_copy+0x168>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	895a      	ldrh	r2, [r3, #10]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	891b      	ldrh	r3, [r3, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d10d      	bne.n	80058c4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <pbuf_copy+0x168>
 80058b0:	4b09      	ldr	r3, [pc, #36]	@ (80058d8 <pbuf_copy+0x17c>)
 80058b2:	f240 32e2 	movw	r2, #994	@ 0x3e2
 80058b6:	490e      	ldr	r1, [pc, #56]	@ (80058f0 <pbuf_copy+0x194>)
 80058b8:	4809      	ldr	r0, [pc, #36]	@ (80058e0 <pbuf_copy+0x184>)
 80058ba:	f008 f84f 	bl	800d95c <iprintf>
 80058be:	f06f 0305 	mvn.w	r3, #5
 80058c2:	e004      	b.n	80058ce <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f47f af67 	bne.w	800579a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	0800ee44 	.word	0x0800ee44
 80058dc:	0800f1d4 	.word	0x0800f1d4
 80058e0:	0800ee90 	.word	0x0800ee90
 80058e4:	0800f204 	.word	0x0800f204
 80058e8:	0800f21c 	.word	0x0800f21c
 80058ec:	0800f238 	.word	0x0800f238
 80058f0:	0800f248 	.word	0x0800f248

080058f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	460b      	mov	r3, r1
 8005904:	80fb      	strh	r3, [r7, #6]
 8005906:	4613      	mov	r3, r2
 8005908:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d108      	bne.n	8005926 <pbuf_copy_partial+0x32>
 8005914:	4b30      	ldr	r3, [pc, #192]	@ (80059d8 <pbuf_copy_partial+0xe4>)
 8005916:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800591a:	4930      	ldr	r1, [pc, #192]	@ (80059dc <pbuf_copy_partial+0xe8>)
 800591c:	4830      	ldr	r0, [pc, #192]	@ (80059e0 <pbuf_copy_partial+0xec>)
 800591e:	f008 f81d 	bl	800d95c <iprintf>
 8005922:	2300      	movs	r3, #0
 8005924:	e054      	b.n	80059d0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d108      	bne.n	800593e <pbuf_copy_partial+0x4a>
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <pbuf_copy_partial+0xe4>)
 800592e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8005932:	492c      	ldr	r1, [pc, #176]	@ (80059e4 <pbuf_copy_partial+0xf0>)
 8005934:	482a      	ldr	r0, [pc, #168]	@ (80059e0 <pbuf_copy_partial+0xec>)
 8005936:	f008 f811 	bl	800d95c <iprintf>
 800593a:	2300      	movs	r3, #0
 800593c:	e048      	b.n	80059d0 <pbuf_copy_partial+0xdc>

  left = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <pbuf_copy_partial+0x5a>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <pbuf_copy_partial+0x5e>
    return 0;
 800594e:	2300      	movs	r3, #0
 8005950:	e03e      	b.n	80059d0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	e034      	b.n	80059c2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005958:	88bb      	ldrh	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <pbuf_copy_partial+0x80>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	895b      	ldrh	r3, [r3, #10]
 8005962:	88ba      	ldrh	r2, [r7, #4]
 8005964:	429a      	cmp	r2, r3
 8005966:	d305      	bcc.n	8005974 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	895b      	ldrh	r3, [r3, #10]
 800596c:	88ba      	ldrh	r2, [r7, #4]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	80bb      	strh	r3, [r7, #4]
 8005972:	e023      	b.n	80059bc <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	895a      	ldrh	r2, [r3, #10]
 8005978:	88bb      	ldrh	r3, [r7, #4]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800597e:	8b3a      	ldrh	r2, [r7, #24]
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	429a      	cmp	r2, r3
 8005984:	d901      	bls.n	800598a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8005986:	88fb      	ldrh	r3, [r7, #6]
 8005988:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800598a:	8b7b      	ldrh	r3, [r7, #26]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	18d0      	adds	r0, r2, r3
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	88bb      	ldrh	r3, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	8b3a      	ldrh	r2, [r7, #24]
 800599a:	4619      	mov	r1, r3
 800599c:	f008 f8d9 	bl	800db52 <memcpy>
      copied_total += buf_copy_len;
 80059a0:	8afa      	ldrh	r2, [r7, #22]
 80059a2:	8b3b      	ldrh	r3, [r7, #24]
 80059a4:	4413      	add	r3, r2
 80059a6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80059a8:	8b7a      	ldrh	r2, [r7, #26]
 80059aa:	8b3b      	ldrh	r3, [r7, #24]
 80059ac:	4413      	add	r3, r2
 80059ae:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	8b3b      	ldrh	r3, [r7, #24]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <pbuf_copy_partial+0xda>
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1c4      	bne.n	8005958 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80059ce:	8afb      	ldrh	r3, [r7, #22]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	0800ee44 	.word	0x0800ee44
 80059dc:	0800f274 	.word	0x0800f274
 80059e0:	0800ee90 	.word	0x0800ee90
 80059e4:	0800f294 	.word	0x0800f294

080059e8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	4613      	mov	r3, r2
 80059f4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <pbuf_take+0x30>
 8005a04:	4b3a      	ldr	r3, [pc, #232]	@ (8005af0 <pbuf_take+0x108>)
 8005a06:	f240 4284 	movw	r2, #1156	@ 0x484
 8005a0a:	493a      	ldr	r1, [pc, #232]	@ (8005af4 <pbuf_take+0x10c>)
 8005a0c:	483a      	ldr	r0, [pc, #232]	@ (8005af8 <pbuf_take+0x110>)
 8005a0e:	f007 ffa5 	bl	800d95c <iprintf>
 8005a12:	f06f 030f 	mvn.w	r3, #15
 8005a16:	e066      	b.n	8005ae6 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <pbuf_take+0x4a>
 8005a1e:	4b34      	ldr	r3, [pc, #208]	@ (8005af0 <pbuf_take+0x108>)
 8005a20:	f240 4285 	movw	r2, #1157	@ 0x485
 8005a24:	4935      	ldr	r1, [pc, #212]	@ (8005afc <pbuf_take+0x114>)
 8005a26:	4834      	ldr	r0, [pc, #208]	@ (8005af8 <pbuf_take+0x110>)
 8005a28:	f007 ff98 	bl	800d95c <iprintf>
 8005a2c:	f06f 030f 	mvn.w	r3, #15
 8005a30:	e059      	b.n	8005ae6 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	891b      	ldrh	r3, [r3, #8]
 8005a36:	88fa      	ldrh	r2, [r7, #6]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d909      	bls.n	8005a50 <pbuf_take+0x68>
 8005a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8005af0 <pbuf_take+0x108>)
 8005a3e:	f240 4286 	movw	r2, #1158	@ 0x486
 8005a42:	492f      	ldr	r1, [pc, #188]	@ (8005b00 <pbuf_take+0x118>)
 8005a44:	482c      	ldr	r0, [pc, #176]	@ (8005af8 <pbuf_take+0x110>)
 8005a46:	f007 ff89 	bl	800d95c <iprintf>
 8005a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4e:	e04a      	b.n	8005ae6 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <pbuf_take+0x7e>
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <pbuf_take+0x7e>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	891b      	ldrh	r3, [r3, #8]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d902      	bls.n	8005a6c <pbuf_take+0x84>
    return ERR_ARG;
 8005a66:	f06f 030f 	mvn.w	r3, #15
 8005a6a:	e03c      	b.n	8005ae6 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e027      	b.n	8005ac2 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <pbuf_take+0x9e>
 8005a78:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <pbuf_take+0x108>)
 8005a7a:	f240 428e 	movw	r2, #1166	@ 0x48e
 8005a7e:	4921      	ldr	r1, [pc, #132]	@ (8005b04 <pbuf_take+0x11c>)
 8005a80:	481d      	ldr	r0, [pc, #116]	@ (8005af8 <pbuf_take+0x110>)
 8005a82:	f007 ff6b 	bl	800d95c <iprintf>
    buf_copy_len = total_copy_len;
 8005a86:	8b3b      	ldrh	r3, [r7, #24]
 8005a88:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	8b7a      	ldrh	r2, [r7, #26]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d902      	bls.n	8005a9a <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	895b      	ldrh	r3, [r3, #10]
 8005a98:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	6858      	ldr	r0, [r3, #4]
 8005a9e:	8afb      	ldrh	r3, [r7, #22]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	8b7a      	ldrh	r2, [r7, #26]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f008 f853 	bl	800db52 <memcpy>
    total_copy_len -= buf_copy_len;
 8005aac:	8b3a      	ldrh	r2, [r7, #24]
 8005aae:	8b7b      	ldrh	r3, [r7, #26]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 8005ab4:	8afa      	ldrh	r2, [r7, #22]
 8005ab6:	8b7b      	ldrh	r3, [r7, #26]
 8005ab8:	4413      	add	r3, r2
 8005aba:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	61fb      	str	r3, [r7, #28]
 8005ac2:	8b3b      	ldrh	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1d4      	bne.n	8005a72 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005ac8:	8b3b      	ldrh	r3, [r7, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <pbuf_take+0xee>
 8005ace:	8afa      	ldrh	r2, [r7, #22]
 8005ad0:	88fb      	ldrh	r3, [r7, #6]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d006      	beq.n	8005ae4 <pbuf_take+0xfc>
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <pbuf_take+0x108>)
 8005ad8:	f240 4299 	movw	r2, #1177	@ 0x499
 8005adc:	490a      	ldr	r1, [pc, #40]	@ (8005b08 <pbuf_take+0x120>)
 8005ade:	4806      	ldr	r0, [pc, #24]	@ (8005af8 <pbuf_take+0x110>)
 8005ae0:	f007 ff3c 	bl	800d95c <iprintf>
  return ERR_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	0800ee44 	.word	0x0800ee44
 8005af4:	0800f2b8 	.word	0x0800f2b8
 8005af8:	0800ee90 	.word	0x0800ee90
 8005afc:	0800f2d0 	.word	0x0800f2d0
 8005b00:	0800f2ec 	.word	0x0800f2ec
 8005b04:	0800f30c 	.word	0x0800f30c
 8005b08:	0800f324 	.word	0x0800f324

08005b0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005b1c:	f000 ff34 	bl	8006988 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005b20:	4b07      	ldr	r3, [pc, #28]	@ (8005b40 <tcp_tmr+0x28>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	4b05      	ldr	r3, [pc, #20]	@ (8005b40 <tcp_tmr+0x28>)
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	4b04      	ldr	r3, [pc, #16]	@ (8005b40 <tcp_tmr+0x28>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005b38:	f000 fc62 	bl	8006400 <tcp_slowtmr>
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20007f19 	.word	0x20007f19

08005b44 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e00a      	b.n	8005b6a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d102      	bne.n	8005b64 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f1      	bne.n	8005b54 <tcp_remove_listener+0x10>
      }
   }
}
 8005b70:	bf00      	nop
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d105      	bne.n	8005b96 <tcp_listen_closed+0x1a>
 8005b8a:	4b13      	ldr	r3, [pc, #76]	@ (8005bd8 <tcp_listen_closed+0x5c>)
 8005b8c:	22c0      	movs	r2, #192	@ 0xc0
 8005b8e:	4913      	ldr	r1, [pc, #76]	@ (8005bdc <tcp_listen_closed+0x60>)
 8005b90:	4813      	ldr	r0, [pc, #76]	@ (8005be0 <tcp_listen_closed+0x64>)
 8005b92:	f007 fee3 	bl	800d95c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	7d1b      	ldrb	r3, [r3, #20]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d005      	beq.n	8005baa <tcp_listen_closed+0x2e>
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd8 <tcp_listen_closed+0x5c>)
 8005ba0:	22c1      	movs	r2, #193	@ 0xc1
 8005ba2:	4910      	ldr	r1, [pc, #64]	@ (8005be4 <tcp_listen_closed+0x68>)
 8005ba4:	480e      	ldr	r0, [pc, #56]	@ (8005be0 <tcp_listen_closed+0x64>)
 8005ba6:	f007 fed9 	bl	800d95c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005baa:	2301      	movs	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e00b      	b.n	8005bc8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8005be8 <tcp_listen_closed+0x6c>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff ffc1 	bl	8005b44 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d9f0      	bls.n	8005bb0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	0800f3c8 	.word	0x0800f3c8
 8005bdc:	0800f3f8 	.word	0x0800f3f8
 8005be0:	0800f404 	.word	0x0800f404
 8005be4:	0800f42c 	.word	0x0800f42c
 8005be8:	08010824 	.word	0x08010824

08005bec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005bf8:	78fb      	ldrb	r3, [r7, #3]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d075      	beq.n	8005cea <tcp_close_shutdown+0xfe>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7d1b      	ldrb	r3, [r3, #20]
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d003      	beq.n	8005c0e <tcp_close_shutdown+0x22>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7d1b      	ldrb	r3, [r3, #20]
 8005c0a:	2b07      	cmp	r3, #7
 8005c0c:	d16d      	bne.n	8005cea <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <tcp_close_shutdown+0x34>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8005c1e:	d064      	beq.n	8005cea <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	7e9b      	ldrb	r3, [r3, #26]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <tcp_close_shutdown+0x4e>
 8005c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8005d9c <tcp_close_shutdown+0x1b0>)
 8005c2e:	f240 120f 	movw	r2, #271	@ 0x10f
 8005c32:	495b      	ldr	r1, [pc, #364]	@ (8005da0 <tcp_close_shutdown+0x1b4>)
 8005c34:	485b      	ldr	r0, [pc, #364]	@ (8005da4 <tcp_close_shutdown+0x1b8>)
 8005c36:	f007 fe91 	bl	800d95c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005c42:	687c      	ldr	r4, [r7, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	1d1d      	adds	r5, r3, #4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8adb      	ldrh	r3, [r3, #22]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	8b12      	ldrh	r2, [r2, #24]
 8005c50:	9201      	str	r2, [sp, #4]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	462b      	mov	r3, r5
 8005c56:	4622      	mov	r2, r4
 8005c58:	f004 fe68 	bl	800a92c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f9a9 	bl	8006fb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005c62:	4b51      	ldr	r3, [pc, #324]	@ (8005da8 <tcp_close_shutdown+0x1bc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d105      	bne.n	8005c78 <tcp_close_shutdown+0x8c>
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8005da8 <tcp_close_shutdown+0x1bc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	4a4d      	ldr	r2, [pc, #308]	@ (8005da8 <tcp_close_shutdown+0x1bc>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	e013      	b.n	8005ca0 <tcp_close_shutdown+0xb4>
 8005c78:	4b4b      	ldr	r3, [pc, #300]	@ (8005da8 <tcp_close_shutdown+0x1bc>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e00c      	b.n	8005c9a <tcp_close_shutdown+0xae>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d104      	bne.n	8005c94 <tcp_close_shutdown+0xa8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	e005      	b.n	8005ca0 <tcp_close_shutdown+0xb4>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1ef      	bne.n	8005c80 <tcp_close_shutdown+0x94>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	4b41      	ldr	r3, [pc, #260]	@ (8005dac <tcp_close_shutdown+0x1c0>)
 8005ca8:	2201      	movs	r2, #1
 8005caa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7d1b      	ldrb	r3, [r3, #20]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d10c      	bne.n	8005cce <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005cba:	4b3d      	ldr	r3, [pc, #244]	@ (8005db0 <tcp_close_shutdown+0x1c4>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
 8005cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8005db0 <tcp_close_shutdown+0x1c4>)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	f005 f878 	bl	800adbc <tcp_timer_needed>
 8005ccc:	e00b      	b.n	8005ce6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005cce:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <tcp_close_shutdown+0x1c8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d102      	bne.n	8005cde <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8005cd8:	f003 fcca 	bl	8009670 <tcp_trigger_input_pcb_close>
 8005cdc:	e003      	b.n	8005ce6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f7fe fefd 	bl	8004ae0 <memp_free>
        }
      }
      return ERR_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e053      	b.n	8005d92 <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	7d1b      	ldrb	r3, [r3, #20]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d03d      	beq.n	8005d6e <tcp_close_shutdown+0x182>
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	dc47      	bgt.n	8005d86 <tcp_close_shutdown+0x19a>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <tcp_close_shutdown+0x114>
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d02b      	beq.n	8005d56 <tcp_close_shutdown+0x16a>
 8005cfe:	e042      	b.n	8005d86 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8adb      	ldrh	r3, [r3, #22]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d021      	beq.n	8005d4c <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8005d08:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <tcp_close_shutdown+0x1cc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d105      	bne.n	8005d1e <tcp_close_shutdown+0x132>
 8005d12:	4b29      	ldr	r3, [pc, #164]	@ (8005db8 <tcp_close_shutdown+0x1cc>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4a27      	ldr	r2, [pc, #156]	@ (8005db8 <tcp_close_shutdown+0x1cc>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	e013      	b.n	8005d46 <tcp_close_shutdown+0x15a>
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <tcp_close_shutdown+0x1cc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	e00c      	b.n	8005d40 <tcp_close_shutdown+0x154>
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d104      	bne.n	8005d3a <tcp_close_shutdown+0x14e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	60da      	str	r2, [r3, #12]
 8005d38:	e005      	b.n	8005d46 <tcp_close_shutdown+0x15a>
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <tcp_close_shutdown+0x13a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005d4c:	6879      	ldr	r1, [r7, #4]
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f7fe fec6 	bl	8004ae0 <memp_free>
    break;
 8005d54:	e01c      	b.n	8005d90 <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff10 	bl	8005b7c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4817      	ldr	r0, [pc, #92]	@ (8005dbc <tcp_close_shutdown+0x1d0>)
 8005d60:	f001 f96a 	bl	8007038 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005d64:	6879      	ldr	r1, [r7, #4]
 8005d66:	2002      	movs	r0, #2
 8005d68:	f7fe feba 	bl	8004ae0 <memp_free>
    break;
 8005d6c:	e010      	b.n	8005d90 <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	480d      	ldr	r0, [pc, #52]	@ (8005da8 <tcp_close_shutdown+0x1bc>)
 8005d72:	f001 f961 	bl	8007038 <tcp_pcb_remove>
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <tcp_close_shutdown+0x1c0>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7fe feae 	bl	8004ae0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005d84:	e004      	b.n	8005d90 <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f81a 	bl	8005dc0 <tcp_close_shutdown_fin>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	e000      	b.n	8005d92 <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	0800f3c8 	.word	0x0800f3c8
 8005da0:	0800f444 	.word	0x0800f444
 8005da4:	0800f404 	.word	0x0800f404
 8005da8:	20007f10 	.word	0x20007f10
 8005dac:	20007f18 	.word	0x20007f18
 8005db0:	20007f14 	.word	0x20007f14
 8005db4:	20007f50 	.word	0x20007f50
 8005db8:	20007f08 	.word	0x20007f08
 8005dbc:	20007f0c 	.word	0x20007f0c

08005dc0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <tcp_close_shutdown_fin+0x1c>
 8005dce:	4b2e      	ldr	r3, [pc, #184]	@ (8005e88 <tcp_close_shutdown_fin+0xc8>)
 8005dd0:	f240 124d 	movw	r2, #333	@ 0x14d
 8005dd4:	492d      	ldr	r1, [pc, #180]	@ (8005e8c <tcp_close_shutdown_fin+0xcc>)
 8005dd6:	482e      	ldr	r0, [pc, #184]	@ (8005e90 <tcp_close_shutdown_fin+0xd0>)
 8005dd8:	f007 fdc0 	bl	800d95c <iprintf>

  switch (pcb->state) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7d1b      	ldrb	r3, [r3, #20]
 8005de0:	2b07      	cmp	r3, #7
 8005de2:	d020      	beq.n	8005e26 <tcp_close_shutdown_fin+0x66>
 8005de4:	2b07      	cmp	r3, #7
 8005de6:	dc2b      	bgt.n	8005e40 <tcp_close_shutdown_fin+0x80>
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d002      	beq.n	8005df2 <tcp_close_shutdown_fin+0x32>
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d00d      	beq.n	8005e0c <tcp_close_shutdown_fin+0x4c>
 8005df0:	e026      	b.n	8005e40 <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f003 fcc6 	bl	8009784 <tcp_send_fin>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d11f      	bne.n	8005e44 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2205      	movs	r2, #5
 8005e08:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005e0a:	e01b      	b.n	8005e44 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f003 fcb9 	bl	8009784 <tcp_send_fin>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d114      	bne.n	8005e48 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2205      	movs	r2, #5
 8005e22:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005e24:	e010      	b.n	8005e48 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f003 fcac 	bl	8009784 <tcp_send_fin>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d109      	bne.n	8005e4c <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2209      	movs	r2, #9
 8005e3c:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005e3e:	e005      	b.n	8005e4c <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	e01c      	b.n	8005e7e <tcp_close_shutdown_fin+0xbe>
    break;
 8005e44:	bf00      	nop
 8005e46:	e002      	b.n	8005e4e <tcp_close_shutdown_fin+0x8e>
    break;
 8005e48:	bf00      	nop
 8005e4a:	e000      	b.n	8005e4e <tcp_close_shutdown_fin+0x8e>
    break;
 8005e4c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f004 fae4 	bl	800a424 <tcp_output>
 8005e5c:	e00d      	b.n	8005e7a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8005e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d108      	bne.n	8005e7a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7e9b      	ldrb	r3, [r3, #26]
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e001      	b.n	8005e7e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8005e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	0800f3c8 	.word	0x0800f3c8
 8005e8c:	0800f3f8 	.word	0x0800f3f8
 8005e90:	0800f404 	.word	0x0800f404

08005e94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7d1b      	ldrb	r3, [r3, #20]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d006      	beq.n	8005eb2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7e9b      	ldrb	r3, [r3, #26]
 8005ea8:	f043 0310 	orr.w	r3, r3, #16
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff fe99 	bl	8005bec <tcp_close_shutdown>
 8005eba:	4603      	mov	r3, r0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08c      	sub	sp, #48	@ 0x30
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	7d1b      	ldrb	r3, [r3, #20]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d106      	bne.n	8005ee4 <tcp_abandon+0x20>
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800600c <tcp_abandon+0x148>)
 8005ed8:	f240 12df 	movw	r2, #479	@ 0x1df
 8005edc:	494c      	ldr	r1, [pc, #304]	@ (8006010 <tcp_abandon+0x14c>)
 8005ede:	484d      	ldr	r0, [pc, #308]	@ (8006014 <tcp_abandon+0x150>)
 8005ee0:	f007 fd3c 	bl	800d95c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	7d1b      	ldrb	r3, [r3, #20]
 8005ee8:	2b0a      	cmp	r3, #10
 8005eea:	d108      	bne.n	8005efe <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	484a      	ldr	r0, [pc, #296]	@ (8006018 <tcp_abandon+0x154>)
 8005ef0:	f001 f8a2 	bl	8007038 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	2001      	movs	r0, #1
 8005ef8:	f7fe fdf2 	bl	8004ae0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8005efc:	e081      	b.n	8006002 <tcp_abandon+0x13e>
    int send_rst = 0;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8005f02:	2300      	movs	r3, #0
 8005f04:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f18:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7d1b      	ldrb	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d126      	bne.n	8005f76 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8adb      	ldrh	r3, [r3, #22]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d02e      	beq.n	8005f8e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005f30:	4b3a      	ldr	r3, [pc, #232]	@ (800601c <tcp_abandon+0x158>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d105      	bne.n	8005f46 <tcp_abandon+0x82>
 8005f3a:	4b38      	ldr	r3, [pc, #224]	@ (800601c <tcp_abandon+0x158>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	4a36      	ldr	r2, [pc, #216]	@ (800601c <tcp_abandon+0x158>)
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e013      	b.n	8005f6e <tcp_abandon+0xaa>
 8005f46:	4b35      	ldr	r3, [pc, #212]	@ (800601c <tcp_abandon+0x158>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e00c      	b.n	8005f68 <tcp_abandon+0xa4>
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d104      	bne.n	8005f62 <tcp_abandon+0x9e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e005      	b.n	8005f6e <tcp_abandon+0xaa>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ef      	bne.n	8005f4e <tcp_abandon+0x8a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	60da      	str	r2, [r3, #12]
 8005f74:	e00b      	b.n	8005f8e <tcp_abandon+0xca>
      send_rst = reset;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8adb      	ldrh	r3, [r3, #22]
 8005f7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4827      	ldr	r0, [pc, #156]	@ (8006020 <tcp_abandon+0x15c>)
 8005f84:	f001 f858 	bl	8007038 <tcp_pcb_remove>
 8005f88:	4b26      	ldr	r3, [pc, #152]	@ (8006024 <tcp_abandon+0x160>)
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d004      	beq.n	8005fa0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fdc1 	bl	8006b22 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fdb8 	bl	8006b22 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d004      	beq.n	8005fc4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fdaf 	bl	8006b22 <tcp_segs_free>
    if (send_rst) {
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00c      	beq.n	8005fe4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	1d19      	adds	r1, r3, #4
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8b1b      	ldrh	r3, [r3, #24]
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	6979      	ldr	r1, [r7, #20]
 8005fde:	69b8      	ldr	r0, [r7, #24]
 8005fe0:	f004 fca4 	bl	800a92c <tcp_rst>
    last_state = pcb->state;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	7d1b      	ldrb	r3, [r3, #20]
 8005fe8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	2001      	movs	r0, #1
 8005fee:	f7fe fd77 	bl	8004ae0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <tcp_abandon+0x13e>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f06f 010c 	mvn.w	r1, #12
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	4798      	blx	r3
}
 8006002:	bf00      	nop
 8006004:	3728      	adds	r7, #40	@ 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	0800f3c8 	.word	0x0800f3c8
 8006010:	0800f460 	.word	0x0800f460
 8006014:	0800f404 	.word	0x0800f404
 8006018:	20007f14 	.word	0x20007f14
 800601c:	20007f08 	.word	0x20007f08
 8006020:	20007f10 	.word	0x20007f10
 8006024:	20007f18 	.word	0x20007f18

08006028 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006030:	2101      	movs	r1, #1
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff46 	bl	8005ec4 <tcp_abandon>
}
 8006038:	bf00      	nop
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006050:	4413      	add	r3, r2
 8006052:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800605c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8006060:	bf28      	it	cs
 8006062:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8006066:	b292      	uxth	r2, r2
 8006068:	4413      	add	r3, r2
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	db08      	blt.n	8006084 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	e020      	b.n	80060c6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd03      	ble.n	800609a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006098:	e014      	b.n	80060c4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ac:	d306      	bcc.n	80060bc <tcp_update_rcv_ann_wnd+0x7c>
 80060ae:	4b08      	ldr	r3, [pc, #32]	@ (80060d0 <tcp_update_rcv_ann_wnd+0x90>)
 80060b0:	f44f 7242 	mov.w	r2, #776	@ 0x308
 80060b4:	4907      	ldr	r1, [pc, #28]	@ (80060d4 <tcp_update_rcv_ann_wnd+0x94>)
 80060b6:	4808      	ldr	r0, [pc, #32]	@ (80060d8 <tcp_update_rcv_ann_wnd+0x98>)
 80060b8:	f007 fc50 	bl	800d95c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80060c4:	2300      	movs	r3, #0
  }
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	0800f3c8 	.word	0x0800f3c8
 80060d4:	0800f4e0 	.word	0x0800f4e0
 80060d8:	0800f404 	.word	0x0800f404

080060dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7d1b      	ldrb	r3, [r3, #20]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d106      	bne.n	80060fe <tcp_recved+0x22>
 80060f0:	4b23      	ldr	r3, [pc, #140]	@ (8006180 <tcp_recved+0xa4>)
 80060f2:	f240 321f 	movw	r2, #799	@ 0x31f
 80060f6:	4923      	ldr	r1, [pc, #140]	@ (8006184 <tcp_recved+0xa8>)
 80060f8:	4823      	ldr	r0, [pc, #140]	@ (8006188 <tcp_recved+0xac>)
 80060fa:	f007 fc2f 	bl	800d95c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	4413      	add	r3, r2
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006110:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006114:	d904      	bls.n	8006120 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800611c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800611e:	e017      	b.n	8006150 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006124:	2b00      	cmp	r3, #0
 8006126:	d113      	bne.n	8006150 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7d1b      	ldrb	r3, [r3, #20]
 800612c:	2b07      	cmp	r3, #7
 800612e:	d003      	beq.n	8006138 <tcp_recved+0x5c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7d1b      	ldrb	r3, [r3, #20]
 8006134:	2b09      	cmp	r3, #9
 8006136:	d104      	bne.n	8006142 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800613e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006140:	e006      	b.n	8006150 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8006142:	4b0f      	ldr	r3, [pc, #60]	@ (8006180 <tcp_recved+0xa4>)
 8006144:	f240 322d 	movw	r2, #813	@ 0x32d
 8006148:	4910      	ldr	r1, [pc, #64]	@ (800618c <tcp_recved+0xb0>)
 800614a:	480f      	ldr	r0, [pc, #60]	@ (8006188 <tcp_recved+0xac>)
 800614c:	f007 fc06 	bl	800d95c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff75 	bl	8006040 <tcp_update_rcv_ann_wnd>
 8006156:	4603      	mov	r3, r0
 8006158:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8006160:	db09      	blt.n	8006176 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7e9b      	ldrb	r3, [r3, #26]
 8006166:	f043 0302 	orr.w	r3, r3, #2
 800616a:	b2da      	uxtb	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f004 f957 	bl	800a424 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800f3c8 	.word	0x0800f3c8
 8006184:	0800f4fc 	.word	0x0800f4fc
 8006188:	0800f404 	.word	0x0800f404
 800618c:	0800f524 	.word	0x0800f524

08006190 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800619a:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <tcp_new_port+0x80>)
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	b291      	uxth	r1, r2
 80061a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006210 <tcp_new_port+0x80>)
 80061a4:	8011      	strh	r1, [r2, #0]
 80061a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d103      	bne.n	80061b6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80061ae:	4b18      	ldr	r3, [pc, #96]	@ (8006210 <tcp_new_port+0x80>)
 80061b0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80061b4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80061b6:	2300      	movs	r3, #0
 80061b8:	71fb      	strb	r3, [r7, #7]
 80061ba:	e01e      	b.n	80061fa <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	4a15      	ldr	r2, [pc, #84]	@ (8006214 <tcp_new_port+0x84>)
 80061c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	e011      	b.n	80061ee <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	8ada      	ldrh	r2, [r3, #22]
 80061ce:	4b10      	ldr	r3, [pc, #64]	@ (8006210 <tcp_new_port+0x80>)
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d108      	bne.n	80061e8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80061d6:	88bb      	ldrh	r3, [r7, #4]
 80061d8:	3301      	adds	r3, #1
 80061da:	80bb      	strh	r3, [r7, #4]
 80061dc:	88bb      	ldrh	r3, [r7, #4]
 80061de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e2:	d3da      	bcc.n	800619a <tcp_new_port+0xa>
          return 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	e00d      	b.n	8006204 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1ea      	bne.n	80061ca <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	3301      	adds	r3, #1
 80061f8:	71fb      	strb	r3, [r7, #7]
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d9dd      	bls.n	80061bc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006200:	4b03      	ldr	r3, [pc, #12]	@ (8006210 <tcp_new_port+0x80>)
 8006202:	881b      	ldrh	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	2000000a 	.word	0x2000000a
 8006214:	08010824 	.word	0x08010824

08006218 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	@ 0x28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <tcp_connect+0x1c>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <tcp_connect+0x22>
    return ERR_VAL;
 8006234:	f06f 0305 	mvn.w	r3, #5
 8006238:	e0d1      	b.n	80063de <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	7d1b      	ldrb	r3, [r3, #20]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d009      	beq.n	8006256 <tcp_connect+0x3e>
 8006242:	4b69      	ldr	r3, [pc, #420]	@ (80063e8 <tcp_connect+0x1d0>)
 8006244:	f44f 725e 	mov.w	r2, #888	@ 0x378
 8006248:	4968      	ldr	r1, [pc, #416]	@ (80063ec <tcp_connect+0x1d4>)
 800624a:	4869      	ldr	r0, [pc, #420]	@ (80063f0 <tcp_connect+0x1d8>)
 800624c:	f007 fb86 	bl	800d95c <iprintf>
 8006250:	f06f 0309 	mvn.w	r3, #9
 8006254:	e0c3      	b.n	80063de <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <tcp_connect+0x4a>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	e000      	b.n	8006264 <tcp_connect+0x4c>
 8006262:	2300      	movs	r3, #0
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <tcp_connect+0x64>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11a      	bne.n	80062b2 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3304      	adds	r3, #4
 8006280:	4618      	mov	r0, r3
 8006282:	f006 f8b5 	bl	800c3f0 <ip4_route>
 8006286:	6238      	str	r0, [r7, #32]
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <tcp_connect+0x7c>
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	3304      	adds	r3, #4
 8006292:	e000      	b.n	8006296 <tcp_connect+0x7e>
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <tcp_connect+0x8c>
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d102      	bne.n	80062aa <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 80062a4:	f06f 0303 	mvn.w	r3, #3
 80062a8:	e099      	b.n	80063de <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	8adb      	ldrh	r3, [r3, #22]
 80062b6:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8adb      	ldrh	r3, [r3, #22]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10c      	bne.n	80062da <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 80062c0:	f7ff ff66 	bl	8006190 <tcp_new_port>
 80062c4:	4603      	mov	r3, r0
 80062c6:	461a      	mov	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8adb      	ldrh	r3, [r3, #22]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d102      	bne.n	80062da <tcp_connect+0xc2>
      return ERR_BUF;
 80062d4:	f06f 0301 	mvn.w	r3, #1
 80062d8:	e081      	b.n	80063de <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 ff28 	bl	8007130 <tcp_next_iss>
 80062e0:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  pcb->lastack = iss - 1;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	1e5a      	subs	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	1e5a      	subs	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	655a      	str	r2, [r3, #84]	@ 0x54
  pcb->snd_lbb = iss - 1;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	1e5a      	subs	r2, r3, #1
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	659a      	str	r2, [r3, #88]	@ 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800630c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006324:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800632e:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f000 ff0e 	bl	800715c <tcp_eff_send_mss_impl>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8006358:	2102      	movs	r1, #2
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f003 ff0a 	bl	800a174 <tcp_enqueue_flags>
 8006360:	4603      	mov	r3, r0
 8006362:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8006364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d136      	bne.n	80063da <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2202      	movs	r2, #2
 8006370:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006372:	8b7b      	ldrh	r3, [r7, #26]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d021      	beq.n	80063bc <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006378:	4b1e      	ldr	r3, [pc, #120]	@ (80063f4 <tcp_connect+0x1dc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	429a      	cmp	r2, r3
 8006380:	d105      	bne.n	800638e <tcp_connect+0x176>
 8006382:	4b1c      	ldr	r3, [pc, #112]	@ (80063f4 <tcp_connect+0x1dc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4a1a      	ldr	r2, [pc, #104]	@ (80063f4 <tcp_connect+0x1dc>)
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e013      	b.n	80063b6 <tcp_connect+0x19e>
 800638e:	4b19      	ldr	r3, [pc, #100]	@ (80063f4 <tcp_connect+0x1dc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
 8006394:	e00c      	b.n	80063b0 <tcp_connect+0x198>
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	429a      	cmp	r2, r3
 800639e:	d104      	bne.n	80063aa <tcp_connect+0x192>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	60da      	str	r2, [r3, #12]
 80063a8:	e005      	b.n	80063b6 <tcp_connect+0x19e>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1ef      	bne.n	8006396 <tcp_connect+0x17e>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80063bc:	4b0e      	ldr	r3, [pc, #56]	@ (80063f8 <tcp_connect+0x1e0>)
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	60da      	str	r2, [r3, #12]
 80063c4:	4a0c      	ldr	r2, [pc, #48]	@ (80063f8 <tcp_connect+0x1e0>)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	f004 fcf7 	bl	800adbc <tcp_timer_needed>
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <tcp_connect+0x1e4>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f004 f825 	bl	800a424 <tcp_output>
  }
  return ret;
 80063da:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3728      	adds	r7, #40	@ 0x28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	0800f3c8 	.word	0x0800f3c8
 80063ec:	0800f548 	.word	0x0800f548
 80063f0:	0800f404 	.word	0x0800f404
 80063f4:	20007f08 	.word	0x20007f08
 80063f8:	20007f10 	.word	0x20007f10
 80063fc:	20007f18 	.word	0x20007f18

08006400 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006400:	b5b0      	push	{r4, r5, r7, lr}
 8006402:	b08c      	sub	sp, #48	@ 0x30
 8006404:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800640a:	4b98      	ldr	r3, [pc, #608]	@ (800666c <tcp_slowtmr+0x26c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3301      	adds	r3, #1
 8006410:	4a96      	ldr	r2, [pc, #600]	@ (800666c <tcp_slowtmr+0x26c>)
 8006412:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006414:	4b96      	ldr	r3, [pc, #600]	@ (8006670 <tcp_slowtmr+0x270>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3301      	adds	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b94      	ldr	r3, [pc, #592]	@ (8006670 <tcp_slowtmr+0x270>)
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e000      	b.n	8006424 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006422:	bf00      	nop
  prev = NULL;
 8006424:	2300      	movs	r3, #0
 8006426:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8006428:	4b92      	ldr	r3, [pc, #584]	@ (8006674 <tcp_slowtmr+0x274>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800642e:	e227      	b.n	8006880 <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	7d1b      	ldrb	r3, [r3, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <tcp_slowtmr+0x46>
 8006438:	4b8f      	ldr	r3, [pc, #572]	@ (8006678 <tcp_slowtmr+0x278>)
 800643a:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 800643e:	498f      	ldr	r1, [pc, #572]	@ (800667c <tcp_slowtmr+0x27c>)
 8006440:	488f      	ldr	r0, [pc, #572]	@ (8006680 <tcp_slowtmr+0x280>)
 8006442:	f007 fa8b 	bl	800d95c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	7d1b      	ldrb	r3, [r3, #20]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d106      	bne.n	800645c <tcp_slowtmr+0x5c>
 800644e:	4b8a      	ldr	r3, [pc, #552]	@ (8006678 <tcp_slowtmr+0x278>)
 8006450:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8006454:	498b      	ldr	r1, [pc, #556]	@ (8006684 <tcp_slowtmr+0x284>)
 8006456:	488a      	ldr	r0, [pc, #552]	@ (8006680 <tcp_slowtmr+0x280>)
 8006458:	f007 fa80 	bl	800d95c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	7d1b      	ldrb	r3, [r3, #20]
 8006460:	2b0a      	cmp	r3, #10
 8006462:	d106      	bne.n	8006472 <tcp_slowtmr+0x72>
 8006464:	4b84      	ldr	r3, [pc, #528]	@ (8006678 <tcp_slowtmr+0x278>)
 8006466:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800646a:	4987      	ldr	r1, [pc, #540]	@ (8006688 <tcp_slowtmr+0x288>)
 800646c:	4884      	ldr	r0, [pc, #528]	@ (8006680 <tcp_slowtmr+0x280>)
 800646e:	f007 fa75 	bl	800d95c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	7f5a      	ldrb	r2, [r3, #29]
 8006476:	4b7e      	ldr	r3, [pc, #504]	@ (8006670 <tcp_slowtmr+0x270>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d103      	bne.n	8006486 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8006484:	e1fc      	b.n	8006880 <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 8006486:	4b7a      	ldr	r3, [pc, #488]	@ (8006670 <tcp_slowtmr+0x270>)
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006498:	7d1b      	ldrb	r3, [r3, #20]
 800649a:	2b02      	cmp	r3, #2
 800649c:	d108      	bne.n	80064b0 <tcp_slowtmr+0xb0>
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d903      	bls.n	80064b0 <tcp_slowtmr+0xb0>
      ++pcb_remove;
 80064a8:	7ffb      	ldrb	r3, [r7, #31]
 80064aa:	3301      	adds	r3, #1
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e0a2      	b.n	80065f6 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064b6:	2b0b      	cmp	r3, #11
 80064b8:	d903      	bls.n	80064c2 <tcp_slowtmr+0xc2>
      ++pcb_remove;
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	3301      	adds	r3, #1
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e099      	b.n	80065f6 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d032      	beq.n	8006532 <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 80064d2:	3b01      	subs	r3, #1
 80064d4:	4a6d      	ldr	r2, [pc, #436]	@ (800668c <tcp_slowtmr+0x28c>)
 80064d6:	5cd3      	ldrb	r3, [r2, r3]
 80064d8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80064e0:	7cfa      	ldrb	r2, [r7, #19]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d907      	bls.n	80064f6 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80064ec:	3301      	adds	r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80064f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f8:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 80064fc:	7cfa      	ldrb	r2, [r7, #19]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d879      	bhi.n	80065f6 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006504:	f004 fb99 	bl	800ac3a <tcp_zero_window_probe>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d173      	bne.n	80065f6 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006518:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800651c:	2b06      	cmp	r3, #6
 800651e:	d86a      	bhi.n	80065f6 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 8006520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006522:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8006526:	3301      	adds	r3, #1
 8006528:	b2da      	uxtb	r2, r3
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8006530:	e061      	b.n	80065f6 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006538:	2b00      	cmp	r3, #0
 800653a:	db08      	blt.n	800654e <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006542:	b29b      	uxth	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	b29b      	uxth	r3, r3
 8006548:	b21a      	sxth	r2, r3
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d04f      	beq.n	80065f6 <tcp_slowtmr+0x1f6>
 8006556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006558:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006562:	429a      	cmp	r2, r3
 8006564:	db47      	blt.n	80065f6 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	7d1b      	ldrb	r3, [r3, #20]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d018      	beq.n	80065a0 <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006574:	2b0c      	cmp	r3, #12
 8006576:	bf28      	it	cs
 8006578:	230c      	movcs	r3, #12
 800657a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006582:	10db      	asrs	r3, r3, #3
 8006584:	b21b      	sxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800658e:	4413      	add	r3, r2
 8006590:	7dfa      	ldrb	r2, [r7, #23]
 8006592:	493f      	ldr	r1, [pc, #252]	@ (8006690 <tcp_slowtmr+0x290>)
 8006594:	5c8a      	ldrb	r2, [r1, r2]
 8006596:	4093      	lsls	r3, r2
 8006598:	b21a      	sxth	r2, r3
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 80065a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a2:	2200      	movs	r2, #0
 80065a4:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bf28      	it	cs
 80065b6:	4613      	movcs	r3, r2
 80065b8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80065ba:	8abb      	ldrh	r3, [r7, #20]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d206      	bcs.n	80065e6 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80065ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 80065f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80065f2:	f004 fa11 	bl	800aa18 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	7d1b      	ldrb	r3, [r3, #20]
 80065fa:	2b06      	cmp	r3, #6
 80065fc:	d10f      	bne.n	800661e <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 80065fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006600:	7e9b      	ldrb	r3, [r3, #26]
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800660a:	4b18      	ldr	r3, [pc, #96]	@ (800666c <tcp_slowtmr+0x26c>)
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b28      	cmp	r3, #40	@ 0x28
 8006616:	d902      	bls.n	800661e <tcp_slowtmr+0x21e>
          ++pcb_remove;
 8006618:	7ffb      	ldrb	r3, [r7, #31]
 800661a:	3301      	adds	r3, #1
 800661c:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	7a1b      	ldrb	r3, [r3, #8]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d05d      	beq.n	80066e6 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800662e:	2b04      	cmp	r3, #4
 8006630:	d003      	beq.n	800663a <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8006636:	2b07      	cmp	r3, #7
 8006638:	d155      	bne.n	80066e6 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800663a:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <tcp_slowtmr+0x26c>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800664e:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8006652:	4910      	ldr	r1, [pc, #64]	@ (8006694 <tcp_slowtmr+0x294>)
 8006654:	fba1 1303 	umull	r1, r3, r1, r3
 8006658:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800665a:	429a      	cmp	r2, r3
 800665c:	d91c      	bls.n	8006698 <tcp_slowtmr+0x298>
        ++pcb_remove;
 800665e:	7ffb      	ldrb	r3, [r7, #31]
 8006660:	3301      	adds	r3, #1
 8006662:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8006664:	7fbb      	ldrb	r3, [r7, #30]
 8006666:	3301      	adds	r3, #1
 8006668:	77bb      	strb	r3, [r7, #30]
 800666a:	e03c      	b.n	80066e6 <tcp_slowtmr+0x2e6>
 800666c:	20007f04 	.word	0x20007f04
 8006670:	20007f1a 	.word	0x20007f1a
 8006674:	20007f10 	.word	0x20007f10
 8006678:	0800f3c8 	.word	0x0800f3c8
 800667c:	0800f578 	.word	0x0800f578
 8006680:	0800f404 	.word	0x0800f404
 8006684:	0800f5a4 	.word	0x0800f5a4
 8006688:	0800f5d0 	.word	0x0800f5d0
 800668c:	0801081c 	.word	0x0801081c
 8006690:	0801080c 	.word	0x0801080c
 8006694:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006698:	4b97      	ldr	r3, [pc, #604]	@ (80068f8 <tcp_slowtmr+0x4f8>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80066a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a4:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80066ae:	4618      	mov	r0, r3
 80066b0:	4b92      	ldr	r3, [pc, #584]	@ (80068fc <tcp_slowtmr+0x4fc>)
 80066b2:	fb00 f303 	mul.w	r3, r0, r3
 80066b6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 80066b8:	4991      	ldr	r1, [pc, #580]	@ (8006900 <tcp_slowtmr+0x500>)
 80066ba:	fba1 1303 	umull	r1, r3, r1, r3
 80066be:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d910      	bls.n	80066e6 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 80066c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066c6:	f004 fa7b 	bl	800abc0 <tcp_keepalive>
 80066ca:	4603      	mov	r3, r0
 80066cc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80066ce:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 80066dc:	3301      	adds	r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e2:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80066ee:	4b82      	ldr	r3, [pc, #520]	@ (80068f8 <tcp_slowtmr+0x4f8>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80066fe:	4619      	mov	r1, r3
 8006700:	460b      	mov	r3, r1
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	440b      	add	r3, r1
 8006706:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006708:	429a      	cmp	r2, r3
 800670a:	d307      	bcc.n	800671c <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fa06 	bl	8006b22 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	2200      	movs	r2, #0
 800671a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	7d1b      	ldrb	r3, [r3, #20]
 8006720:	2b03      	cmp	r3, #3
 8006722:	d109      	bne.n	8006738 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006724:	4b74      	ldr	r3, [pc, #464]	@ (80068f8 <tcp_slowtmr+0x4f8>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b28      	cmp	r3, #40	@ 0x28
 8006730:	d902      	bls.n	8006738 <tcp_slowtmr+0x338>
        ++pcb_remove;
 8006732:	7ffb      	ldrb	r3, [r7, #31]
 8006734:	3301      	adds	r3, #1
 8006736:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 8006738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673a:	7d1b      	ldrb	r3, [r3, #20]
 800673c:	2b09      	cmp	r3, #9
 800673e:	d109      	bne.n	8006754 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006740:	4b6d      	ldr	r3, [pc, #436]	@ (80068f8 <tcp_slowtmr+0x4f8>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2bf0      	cmp	r3, #240	@ 0xf0
 800674c:	d902      	bls.n	8006754 <tcp_slowtmr+0x354>
        ++pcb_remove;
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	3301      	adds	r3, #1
 8006752:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 8006754:	7ffb      	ldrb	r3, [r7, #31]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d05d      	beq.n	8006816 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006760:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006762:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006764:	f000 fc26 	bl	8006fb4 <tcp_pcb_purge>
      if (prev != NULL) {
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800676e:	4b65      	ldr	r3, [pc, #404]	@ (8006904 <tcp_slowtmr+0x504>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006774:	429a      	cmp	r2, r3
 8006776:	d106      	bne.n	8006786 <tcp_slowtmr+0x386>
 8006778:	4b63      	ldr	r3, [pc, #396]	@ (8006908 <tcp_slowtmr+0x508>)
 800677a:	f240 4289 	movw	r2, #1161	@ 0x489
 800677e:	4963      	ldr	r1, [pc, #396]	@ (800690c <tcp_slowtmr+0x50c>)
 8006780:	4863      	ldr	r0, [pc, #396]	@ (8006910 <tcp_slowtmr+0x510>)
 8006782:	f007 f8eb 	bl	800d95c <iprintf>
        prev->next = pcb->next;
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	60da      	str	r2, [r3, #12]
 800678e:	e00f      	b.n	80067b0 <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006790:	4b5c      	ldr	r3, [pc, #368]	@ (8006904 <tcp_slowtmr+0x504>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006796:	429a      	cmp	r2, r3
 8006798:	d006      	beq.n	80067a8 <tcp_slowtmr+0x3a8>
 800679a:	4b5b      	ldr	r3, [pc, #364]	@ (8006908 <tcp_slowtmr+0x508>)
 800679c:	f240 428d 	movw	r2, #1165	@ 0x48d
 80067a0:	495c      	ldr	r1, [pc, #368]	@ (8006914 <tcp_slowtmr+0x514>)
 80067a2:	485b      	ldr	r0, [pc, #364]	@ (8006910 <tcp_slowtmr+0x510>)
 80067a4:	f007 f8da 	bl	800d95c <iprintf>
        tcp_active_pcbs = pcb->next;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4a55      	ldr	r2, [pc, #340]	@ (8006904 <tcp_slowtmr+0x504>)
 80067ae:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80067b0:	7fbb      	ldrb	r3, [r7, #30]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d010      	beq.n	80067d8 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80067b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067be:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	1d1d      	adds	r5, r3, #4
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	8adb      	ldrh	r3, [r3, #22]
 80067c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ca:	8b12      	ldrh	r2, [r2, #24]
 80067cc:	9201      	str	r2, [sp, #4]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462b      	mov	r3, r5
 80067d2:	4622      	mov	r2, r4
 80067d4:	f004 f8aa 	bl	800a92c <tcp_rst>
      err_arg = pcb->callback_arg;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	7d1b      	ldrb	r3, [r3, #20]
 80067e2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	2001      	movs	r0, #1
 80067f2:	f7fe f975 	bl	8004ae0 <memp_free>
      tcp_active_pcbs_changed = 0;
 80067f6:	4b48      	ldr	r3, [pc, #288]	@ (8006918 <tcp_slowtmr+0x518>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d004      	beq.n	800680c <tcp_slowtmr+0x40c>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f06f 010c 	mvn.w	r1, #12
 8006808:	68b8      	ldr	r0, [r7, #8]
 800680a:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800680c:	4b42      	ldr	r3, [pc, #264]	@ (8006918 <tcp_slowtmr+0x518>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d035      	beq.n	8006880 <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 8006814:	e606      	b.n	8006424 <tcp_slowtmr+0x24>
      prev = pcb;
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	7edb      	ldrb	r3, [r3, #27]
 8006824:	3301      	adds	r3, #1
 8006826:	b2da      	uxtb	r2, r3
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	7eda      	ldrb	r2, [r3, #27]
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	7f1b      	ldrb	r3, [r3, #28]
 8006834:	429a      	cmp	r2, r3
 8006836:	d323      	bcc.n	8006880 <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2200      	movs	r2, #0
 800683c:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 800683e:	4b36      	ldr	r3, [pc, #216]	@ (8006918 <tcp_slowtmr+0x518>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <tcp_slowtmr+0x464>
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	6912      	ldr	r2, [r2, #16]
 8006858:	6a39      	ldr	r1, [r7, #32]
 800685a:	4610      	mov	r0, r2
 800685c:	4798      	blx	r3
 800685e:	4603      	mov	r3, r0
 8006860:	777b      	strb	r3, [r7, #29]
 8006862:	e001      	b.n	8006868 <tcp_slowtmr+0x468>
 8006864:	2300      	movs	r3, #0
 8006866:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8006868:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <tcp_slowtmr+0x518>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f47f add8 	bne.w	8006422 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006872:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <tcp_slowtmr+0x480>
          tcp_output(prev);
 800687a:	6a38      	ldr	r0, [r7, #32]
 800687c:	f003 fdd2 	bl	800a424 <tcp_output>
  while (pcb != NULL) {
 8006880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f add4 	bne.w	8006430 <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800688c:	4b23      	ldr	r3, [pc, #140]	@ (800691c <tcp_slowtmr+0x51c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006892:	e068      	b.n	8006966 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	7d1b      	ldrb	r3, [r3, #20]
 8006898:	2b0a      	cmp	r3, #10
 800689a:	d006      	beq.n	80068aa <tcp_slowtmr+0x4aa>
 800689c:	4b1a      	ldr	r3, [pc, #104]	@ (8006908 <tcp_slowtmr+0x508>)
 800689e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80068a2:	491f      	ldr	r1, [pc, #124]	@ (8006920 <tcp_slowtmr+0x520>)
 80068a4:	481a      	ldr	r0, [pc, #104]	@ (8006910 <tcp_slowtmr+0x510>)
 80068a6:	f007 f859 	bl	800d95c <iprintf>
    pcb_remove = 0;
 80068aa:	2300      	movs	r3, #0
 80068ac:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80068ae:	4b12      	ldr	r3, [pc, #72]	@ (80068f8 <tcp_slowtmr+0x4f8>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80068ba:	d902      	bls.n	80068c2 <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 80068bc:	7ffb      	ldrb	r3, [r7, #31]
 80068be:	3301      	adds	r3, #1
 80068c0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d049      	beq.n	800695c <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80068c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068ca:	f000 fb73 	bl	8006fb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d029      	beq.n	8006928 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <tcp_slowtmr+0x51c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068da:	429a      	cmp	r2, r3
 80068dc:	d106      	bne.n	80068ec <tcp_slowtmr+0x4ec>
 80068de:	4b0a      	ldr	r3, [pc, #40]	@ (8006908 <tcp_slowtmr+0x508>)
 80068e0:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 80068e4:	490f      	ldr	r1, [pc, #60]	@ (8006924 <tcp_slowtmr+0x524>)
 80068e6:	480a      	ldr	r0, [pc, #40]	@ (8006910 <tcp_slowtmr+0x510>)
 80068e8:	f007 f838 	bl	800d95c <iprintf>
        prev->next = pcb->next;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	60da      	str	r2, [r3, #12]
 80068f4:	e028      	b.n	8006948 <tcp_slowtmr+0x548>
 80068f6:	bf00      	nop
 80068f8:	20007f04 	.word	0x20007f04
 80068fc:	000124f8 	.word	0x000124f8
 8006900:	10624dd3 	.word	0x10624dd3
 8006904:	20007f10 	.word	0x20007f10
 8006908:	0800f3c8 	.word	0x0800f3c8
 800690c:	0800f600 	.word	0x0800f600
 8006910:	0800f404 	.word	0x0800f404
 8006914:	0800f62c 	.word	0x0800f62c
 8006918:	20007f18 	.word	0x20007f18
 800691c:	20007f14 	.word	0x20007f14
 8006920:	0800f658 	.word	0x0800f658
 8006924:	0800f688 	.word	0x0800f688
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006928:	4b13      	ldr	r3, [pc, #76]	@ (8006978 <tcp_slowtmr+0x578>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692e:	429a      	cmp	r2, r3
 8006930:	d006      	beq.n	8006940 <tcp_slowtmr+0x540>
 8006932:	4b12      	ldr	r3, [pc, #72]	@ (800697c <tcp_slowtmr+0x57c>)
 8006934:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 8006938:	4911      	ldr	r1, [pc, #68]	@ (8006980 <tcp_slowtmr+0x580>)
 800693a:	4812      	ldr	r0, [pc, #72]	@ (8006984 <tcp_slowtmr+0x584>)
 800693c:	f007 f80e 	bl	800d95c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <tcp_slowtmr+0x578>)
 8006946:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8006952:	69b9      	ldr	r1, [r7, #24]
 8006954:	2001      	movs	r0, #1
 8006956:	f7fe f8c3 	bl	8004ae0 <memp_free>
 800695a:	e004      	b.n	8006966 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	2b00      	cmp	r3, #0
 800696a:	d193      	bne.n	8006894 <tcp_slowtmr+0x494>
    }
  }
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	3728      	adds	r7, #40	@ 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bdb0      	pop	{r4, r5, r7, pc}
 8006976:	bf00      	nop
 8006978:	20007f14 	.word	0x20007f14
 800697c:	0800f3c8 	.word	0x0800f3c8
 8006980:	0800f6b0 	.word	0x0800f6b0
 8006984:	0800f404 	.word	0x0800f404

08006988 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800698e:	4b2d      	ldr	r3, [pc, #180]	@ (8006a44 <tcp_fasttmr+0xbc>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	3301      	adds	r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	4b2b      	ldr	r3, [pc, #172]	@ (8006a44 <tcp_fasttmr+0xbc>)
 8006998:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800699a:	4b2b      	ldr	r3, [pc, #172]	@ (8006a48 <tcp_fasttmr+0xc0>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80069a0:	e048      	b.n	8006a34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	7f5a      	ldrb	r2, [r3, #29]
 80069a6:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <tcp_fasttmr+0xbc>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d03f      	beq.n	8006a2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80069ae:	4b25      	ldr	r3, [pc, #148]	@ (8006a44 <tcp_fasttmr+0xbc>)
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	7e9b      	ldrb	r3, [r3, #26]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d010      	beq.n	80069e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	7e9b      	ldrb	r3, [r3, #26]
 80069c6:	f043 0302 	orr.w	r3, r3, #2
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f003 fd27 	bl	800a424 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	7e9b      	ldrb	r3, [r3, #26]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7e9b      	ldrb	r3, [r3, #26]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d009      	beq.n	8006a04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	7e9b      	ldrb	r3, [r3, #26]
 80069f4:	f023 0308 	bic.w	r3, r3, #8
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff f9de 	bl	8005dc0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006a12:	4b0e      	ldr	r3, [pc, #56]	@ (8006a4c <tcp_fasttmr+0xc4>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f819 	bl	8006a50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a4c <tcp_fasttmr+0xc4>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d000      	beq.n	8006a28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006a26:	e7b8      	b.n	800699a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	607b      	str	r3, [r7, #4]
 8006a2c:	e002      	b.n	8006a34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1b3      	bne.n	80069a2 <tcp_fasttmr+0x1a>
    }
  }
}
 8006a3a:	bf00      	nop
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20007f1a 	.word	0x20007f1a
 8006a48:	20007f10 	.word	0x20007f10
 8006a4c:	20007f18 	.word	0x20007f18

08006a50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a64:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00b      	beq.n	8006a8e <tcp_process_refused_data+0x3e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6918      	ldr	r0, [r3, #16]
 8006a80:	2300      	movs	r3, #0
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	47a0      	blx	r4
 8006a88:	4603      	mov	r3, r0
 8006a8a:	73fb      	strb	r3, [r7, #15]
 8006a8c:	e007      	b.n	8006a9e <tcp_process_refused_data+0x4e>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	2000      	movs	r0, #0
 8006a96:	f000 f88d 	bl	8006bb4 <tcp_recv_null>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d12a      	bne.n	8006afc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	f003 0320 	and.w	r3, r3, #32
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d033      	beq.n	8006b18 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006ab8:	d005      	beq.n	8006ac6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006abe:	3301      	adds	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00b      	beq.n	8006ae8 <tcp_process_refused_data+0x98>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6918      	ldr	r0, [r3, #16]
 8006ada:	2300      	movs	r3, #0
 8006adc:	2200      	movs	r2, #0
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	47a0      	blx	r4
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
 8006ae6:	e001      	b.n	8006aec <tcp_process_refused_data+0x9c>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af0:	f113 0f0d 	cmn.w	r3, #13
 8006af4:	d110      	bne.n	8006b18 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8006af6:	f06f 030c 	mvn.w	r3, #12
 8006afa:	e00e      	b.n	8006b1a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8006afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b00:	f113 0f0d 	cmn.w	r3, #13
 8006b04:	d102      	bne.n	8006b0c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006b06:	f06f 030c 	mvn.w	r3, #12
 8006b0a:	e006      	b.n	8006b1a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 8006b12:	f06f 0304 	mvn.w	r3, #4
 8006b16:	e000      	b.n	8006b1a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}

08006b22 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006b2a:	e007      	b.n	8006b3c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f80a 	bl	8006b4c <tcp_seg_free>
    seg = next;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1f4      	bne.n	8006b2c <tcp_segs_free+0xa>
  }
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fe fcd6 	bl	8005518 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006b6c:	6879      	ldr	r1, [r7, #4]
 8006b6e:	2003      	movs	r0, #3
 8006b70:	f7fd ffb6 	bl	8004ae0 <memp_free>
  }
}
 8006b74:	bf00      	nop
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006b84:	2003      	movs	r0, #3
 8006b86:	f7fd ff5f 	bl	8004a48 <memp_malloc>
 8006b8a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <tcp_seg_copy+0x1a>
    return NULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e00a      	b.n	8006bac <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006b96:	2210      	movs	r2, #16
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f006 ffd9 	bl	800db52 <memcpy>
  pbuf_ref(cseg->p);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fd61 	bl	800566c <pbuf_ref>
  return cseg;
 8006baa:	68fb      	ldr	r3, [r7, #12]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	891b      	ldrh	r3, [r3, #8]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	68b8      	ldr	r0, [r7, #8]
 8006bd0:	f7ff fa84 	bl	80060dc <tcp_recved>
    pbuf_free(p);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fe fc9f 	bl	8005518 <pbuf_free>
 8006bda:	e008      	b.n	8006bee <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8006be4:	68b8      	ldr	r0, [r7, #8]
 8006be6:	f7ff f955 	bl	8005e94 <tcp_close>
 8006bea:	4603      	mov	r3, r0
 8006bec:	e000      	b.n	8006bf0 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	db01      	blt.n	8006c0e <tcp_kill_prio+0x16>
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	e000      	b.n	8006c10 <tcp_kill_prio+0x18>
 8006c0e:	237f      	movs	r3, #127	@ 0x7f
 8006c10:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c1a:	4b16      	ldr	r3, [pc, #88]	@ (8006c74 <tcp_kill_prio+0x7c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e01a      	b.n	8006c58 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	7d5b      	ldrb	r3, [r3, #21]
 8006c26:	7afa      	ldrb	r2, [r7, #11]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d312      	bcc.n	8006c52 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006c2c:	4b12      	ldr	r3, [pc, #72]	@ (8006c78 <tcp_kill_prio+0x80>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d80a      	bhi.n	8006c52 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c78 <tcp_kill_prio+0x80>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	7d5b      	ldrb	r3, [r3, #21]
 8006c50:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e1      	bne.n	8006c22 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006c64:	6938      	ldr	r0, [r7, #16]
 8006c66:	f7ff f9df 	bl	8006028 <tcp_abort>
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20007f10 	.word	0x20007f10
 8006c78:	20007f04 	.word	0x20007f04

08006c7c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b08      	cmp	r3, #8
 8006c8a:	d009      	beq.n	8006ca0 <tcp_kill_state+0x24>
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b09      	cmp	r3, #9
 8006c90:	d006      	beq.n	8006ca0 <tcp_kill_state+0x24>
 8006c92:	4b1a      	ldr	r3, [pc, #104]	@ (8006cfc <tcp_kill_state+0x80>)
 8006c94:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8006c98:	4919      	ldr	r1, [pc, #100]	@ (8006d00 <tcp_kill_state+0x84>)
 8006c9a:	481a      	ldr	r0, [pc, #104]	@ (8006d04 <tcp_kill_state+0x88>)
 8006c9c:	f006 fe5e 	bl	800d95c <iprintf>

  inactivity = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006ca8:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <tcp_kill_state+0x8c>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e017      	b.n	8006ce0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	7d1b      	ldrb	r3, [r3, #20]
 8006cb4:	79fa      	ldrb	r2, [r7, #7]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d10f      	bne.n	8006cda <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006cba:	4b14      	ldr	r3, [pc, #80]	@ (8006d0c <tcp_kill_state+0x90>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d807      	bhi.n	8006cda <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006cca:	4b10      	ldr	r3, [pc, #64]	@ (8006d0c <tcp_kill_state+0x90>)
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e4      	bne.n	8006cb0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006cec:	2100      	movs	r1, #0
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f7ff f8e8 	bl	8005ec4 <tcp_abandon>
  }
}
 8006cf4:	bf00      	nop
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	0800f3c8 	.word	0x0800f3c8
 8006d00:	0800f6d8 	.word	0x0800f6d8
 8006d04:	0800f404 	.word	0x0800f404
 8006d08:	20007f10 	.word	0x20007f10
 8006d0c:	20007f04 	.word	0x20007f04

08006d10 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d1e:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <tcp_kill_timewait+0x58>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e012      	b.n	8006d4c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006d26:	4b11      	ldr	r3, [pc, #68]	@ (8006d6c <tcp_kill_timewait+0x5c>)
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d807      	bhi.n	8006d46 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <tcp_kill_timewait+0x5c>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e9      	bne.n	8006d26 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006d58:	68b8      	ldr	r0, [r7, #8]
 8006d5a:	f7ff f965 	bl	8006028 <tcp_abort>
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20007f14 	.word	0x20007f14
 8006d6c:	20007f04 	.word	0x20007f04

08006d70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f7fd fe64 	bl	8004a48 <memp_malloc>
 8006d80:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d124      	bne.n	8006dd2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006d88:	f7ff ffc2 	bl	8006d10 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7fd fe5b 	bl	8004a48 <memp_malloc>
 8006d92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d11b      	bne.n	8006dd2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006d9a:	2009      	movs	r0, #9
 8006d9c:	f7ff ff6e 	bl	8006c7c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006da0:	2001      	movs	r0, #1
 8006da2:	f7fd fe51 	bl	8004a48 <memp_malloc>
 8006da6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d111      	bne.n	8006dd2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006dae:	2008      	movs	r0, #8
 8006db0:	f7ff ff64 	bl	8006c7c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006db4:	2001      	movs	r0, #1
 8006db6:	f7fd fe47 	bl	8004a48 <memp_malloc>
 8006dba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d107      	bne.n	8006dd2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff ff17 	bl	8006bf8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006dca:	2001      	movs	r0, #1
 8006dcc:	f7fd fe3c 	bl	8004a48 <memp_malloc>
 8006dd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d03f      	beq.n	8006e58 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006dd8:	2298      	movs	r2, #152	@ 0x98
 8006dda:	2100      	movs	r1, #0
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f006 fe42 	bl	800da66 <memset>
    pcb->prio = prio;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	79fa      	ldrb	r2, [r7, #7]
 8006de6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006dee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8006df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	22ff      	movs	r2, #255	@ 0xff
 8006e06:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8006e0e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2206      	movs	r2, #6
 8006e14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e24:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <tcp_alloc+0xf4>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006e36:	4b0c      	ldr	r3, [pc, #48]	@ (8006e68 <tcp_alloc+0xf8>)
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8006e44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a08      	ldr	r2, [pc, #32]	@ (8006e6c <tcp_alloc+0xfc>)
 8006e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a07      	ldr	r2, [pc, #28]	@ (8006e70 <tcp_alloc+0x100>)
 8006e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006e58:	68fb      	ldr	r3, [r7, #12]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20007f04 	.word	0x20007f04
 8006e68:	20007f1a 	.word	0x20007f1a
 8006e6c:	08006bb5 	.word	0x08006bb5
 8006e70:	006ddd00 	.word	0x006ddd00

08006e74 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006e78:	2040      	movs	r0, #64	@ 0x40
 8006e7a:	f7ff ff79 	bl	8006d70 <tcp_alloc>
 8006e7e:	4603      	mov	r3, r0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	611a      	str	r2, [r3, #16]
  }
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bc80      	pop	{r7}
 8006ea2:	4770      	bx	lr

08006ea4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00e      	beq.n	8006ed2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	7d1b      	ldrb	r3, [r3, #20]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d106      	bne.n	8006eca <tcp_recv+0x26>
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <tcp_recv+0x38>)
 8006ebe:	f240 62bb 	movw	r2, #1723	@ 0x6bb
 8006ec2:	4907      	ldr	r1, [pc, #28]	@ (8006ee0 <tcp_recv+0x3c>)
 8006ec4:	4807      	ldr	r0, [pc, #28]	@ (8006ee4 <tcp_recv+0x40>)
 8006ec6:	f006 fd49 	bl	800d95c <iprintf>
    pcb->recv = recv;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	0800f3c8 	.word	0x0800f3c8
 8006ee0:	0800f6e8 	.word	0x0800f6e8
 8006ee4:	0800f404 	.word	0x0800f404

08006ee8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00d      	beq.n	8006f14 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d106      	bne.n	8006f0e <tcp_sent+0x26>
 8006f00:	4b06      	ldr	r3, [pc, #24]	@ (8006f1c <tcp_sent+0x34>)
 8006f02:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8006f06:	4906      	ldr	r1, [pc, #24]	@ (8006f20 <tcp_sent+0x38>)
 8006f08:	4806      	ldr	r0, [pc, #24]	@ (8006f24 <tcp_sent+0x3c>)
 8006f0a:	f006 fd27 	bl	800d95c <iprintf>
    pcb->sent = sent;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 8006f14:	bf00      	nop
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	0800f3c8 	.word	0x0800f3c8
 8006f20:	0800f710 	.word	0x0800f710
 8006f24:	0800f404 	.word	0x0800f404

08006f28 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00e      	beq.n	8006f56 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	7d1b      	ldrb	r3, [r3, #20]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d106      	bne.n	8006f4e <tcp_err+0x26>
 8006f40:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <tcp_err+0x38>)
 8006f42:	f44f 62dc 	mov.w	r2, #1760	@ 0x6e0
 8006f46:	4907      	ldr	r1, [pc, #28]	@ (8006f64 <tcp_err+0x3c>)
 8006f48:	4807      	ldr	r0, [pc, #28]	@ (8006f68 <tcp_err+0x40>)
 8006f4a:	f006 fd07 	bl	800d95c <iprintf>
    pcb->errf = err;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	0800f3c8 	.word	0x0800f3c8
 8006f64:	0800f738 	.word	0x0800f738
 8006f68:	0800f404 	.word	0x0800f404

08006f6c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7d1b      	ldrb	r3, [r3, #20]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d106      	bne.n	8006f90 <tcp_poll+0x24>
 8006f82:	4b09      	ldr	r3, [pc, #36]	@ (8006fa8 <tcp_poll+0x3c>)
 8006f84:	f240 7203 	movw	r2, #1795	@ 0x703
 8006f88:	4908      	ldr	r1, [pc, #32]	@ (8006fac <tcp_poll+0x40>)
 8006f8a:	4809      	ldr	r0, [pc, #36]	@ (8006fb0 <tcp_poll+0x44>)
 8006f8c:	f006 fce6 	bl	800d95c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	79fa      	ldrb	r2, [r7, #7]
 8006f9c:	771a      	strb	r2, [r3, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	0800f3c8 	.word	0x0800f3c8
 8006fac:	0800f760 	.word	0x0800f760
 8006fb0:	0800f404 	.word	0x0800f404

08006fb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7d1b      	ldrb	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d034      	beq.n	800702e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006fc8:	2b0a      	cmp	r3, #10
 8006fca:	d030      	beq.n	800702e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d02c      	beq.n	800702e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fa99 	bl	8005518 <pbuf_free>
      pcb->refused_data = NULL;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7ff fd96 	bl	8006b22 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007002:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff fd8a 	bl	8006b22 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff fd85 	bl	8006b22 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	669a      	str	r2, [r3, #104]	@ 0x68
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800702e:	bf00      	nop
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d105      	bne.n	8007058 <tcp_pcb_remove+0x20>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	e013      	b.n	8007080 <tcp_pcb_remove+0x48>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	e00c      	b.n	800707a <tcp_pcb_remove+0x42>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d104      	bne.n	8007074 <tcp_pcb_remove+0x3c>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	e005      	b.n	8007080 <tcp_pcb_remove+0x48>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	60fb      	str	r3, [r7, #12]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1ef      	bne.n	8007060 <tcp_pcb_remove+0x28>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	2200      	movs	r2, #0
 8007084:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007086:	6838      	ldr	r0, [r7, #0]
 8007088:	f7ff ff94 	bl	8006fb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	7d1b      	ldrb	r3, [r3, #20]
 8007090:	2b0a      	cmp	r3, #10
 8007092:	d013      	beq.n	80070bc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8007098:	2b01      	cmp	r3, #1
 800709a:	d00f      	beq.n	80070bc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	7e9b      	ldrb	r3, [r3, #26]
 80070a0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d009      	beq.n	80070bc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	7e9b      	ldrb	r3, [r3, #26]
 80070ac:	f043 0302 	orr.w	r3, r3, #2
 80070b0:	b2da      	uxtb	r2, r3
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80070b6:	6838      	ldr	r0, [r7, #0]
 80070b8:	f003 f9b4 	bl	800a424 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	7d1b      	ldrb	r3, [r3, #20]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d020      	beq.n	8007106 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d006      	beq.n	80070da <tcp_pcb_remove+0xa2>
 80070cc:	4b13      	ldr	r3, [pc, #76]	@ (800711c <tcp_pcb_remove+0xe4>)
 80070ce:	f240 7253 	movw	r2, #1875	@ 0x753
 80070d2:	4913      	ldr	r1, [pc, #76]	@ (8007120 <tcp_pcb_remove+0xe8>)
 80070d4:	4813      	ldr	r0, [pc, #76]	@ (8007124 <tcp_pcb_remove+0xec>)
 80070d6:	f006 fc41 	bl	800d95c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d006      	beq.n	80070f0 <tcp_pcb_remove+0xb8>
 80070e2:	4b0e      	ldr	r3, [pc, #56]	@ (800711c <tcp_pcb_remove+0xe4>)
 80070e4:	f240 7254 	movw	r2, #1876	@ 0x754
 80070e8:	490f      	ldr	r1, [pc, #60]	@ (8007128 <tcp_pcb_remove+0xf0>)
 80070ea:	480e      	ldr	r0, [pc, #56]	@ (8007124 <tcp_pcb_remove+0xec>)
 80070ec:	f006 fc36 	bl	800d95c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <tcp_pcb_remove+0xce>
 80070f8:	4b08      	ldr	r3, [pc, #32]	@ (800711c <tcp_pcb_remove+0xe4>)
 80070fa:	f240 7256 	movw	r2, #1878	@ 0x756
 80070fe:	490b      	ldr	r1, [pc, #44]	@ (800712c <tcp_pcb_remove+0xf4>)
 8007100:	4808      	ldr	r0, [pc, #32]	@ (8007124 <tcp_pcb_remove+0xec>)
 8007102:	f006 fc2b 	bl	800d95c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2200      	movs	r2, #0
 800710a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	0800f3c8 	.word	0x0800f3c8
 8007120:	0800f780 	.word	0x0800f780
 8007124:	0800f404 	.word	0x0800f404
 8007128:	0800f798 	.word	0x0800f798
 800712c:	0800f7b4 	.word	0x0800f7b4

08007130 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007138:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <tcp_next_iss+0x24>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <tcp_next_iss+0x28>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4413      	add	r3, r2
 8007142:	4a04      	ldr	r2, [pc, #16]	@ (8007154 <tcp_next_iss+0x24>)
 8007144:	6013      	str	r3, [r2, #0]
  return iss;
 8007146:	4b03      	ldr	r3, [pc, #12]	@ (8007154 <tcp_next_iss+0x24>)
 8007148:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	2000000c 	.word	0x2000000c
 8007158:	20007f04 	.word	0x20007f04

0800715c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8007168:	6838      	ldr	r0, [r7, #0]
 800716a:	f005 f941 	bl	800c3f0 <ip4_route>
 800716e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	e010      	b.n	800719c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800717e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007180:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d008      	beq.n	800719a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007188:	897b      	ldrh	r3, [r7, #10]
 800718a:	3b28      	subs	r3, #40	@ 0x28
 800718c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800718e:	893a      	ldrh	r2, [r7, #8]
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	4293      	cmp	r3, r2
 8007194:	bf28      	it	cs
 8007196:	4613      	movcs	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800719a:	88fb      	ldrh	r3, [r7, #6]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80071b2:	e011      	b.n	80071d8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d108      	bne.n	80071d2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7fe ff2e 	bl	8006028 <tcp_abort>
      pcb = next;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e002      	b.n	80071d8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1ea      	bne.n	80071b4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02c      	beq.n	8007252 <tcp_netif_ip_addr_changed+0x6a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d028      	beq.n	8007252 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007200:	4b16      	ldr	r3, [pc, #88]	@ (800725c <tcp_netif_ip_addr_changed+0x74>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff ffcc 	bl	80071a4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800720c:	4b14      	ldr	r3, [pc, #80]	@ (8007260 <tcp_netif_ip_addr_changed+0x78>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ffc6 	bl	80071a4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d019      	beq.n	8007252 <tcp_netif_ip_addr_changed+0x6a>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d015      	beq.n	8007252 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007226:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <tcp_netif_ip_addr_changed+0x7c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e00e      	b.n	800724c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d103      	bne.n	8007248 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1ed      	bne.n	800722e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20007f10 	.word	0x20007f10
 8007260:	20007f08 	.word	0x20007f08
 8007264:	20007f0c 	.word	0x20007f0c

08007268 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007268:	b590      	push	{r4, r7, lr}
 800726a:	b08b      	sub	sp, #44	@ 0x2c
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	4a81      	ldr	r2, [pc, #516]	@ (800747c <tcp_input+0x214>)
 8007278:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	895b      	ldrh	r3, [r3, #10]
 800727e:	2b13      	cmp	r3, #19
 8007280:	f240 8396 	bls.w	80079b0 <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007284:	4b7e      	ldr	r3, [pc, #504]	@ (8007480 <tcp_input+0x218>)
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	4a7d      	ldr	r2, [pc, #500]	@ (8007480 <tcp_input+0x218>)
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f005 fb28 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	f040 838c 	bne.w	80079b4 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800729c:	4b78      	ldr	r3, [pc, #480]	@ (8007480 <tcp_input+0x218>)
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80072a4:	2be0      	cmp	r3, #224	@ 0xe0
 80072a6:	f000 8385 	beq.w	80079b4 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80072aa:	4b74      	ldr	r3, [pc, #464]	@ (800747c <tcp_input+0x214>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	899b      	ldrh	r3, [r3, #12]
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fd f81f 	bl	80042f6 <lwip_htons>
 80072b8:	4603      	mov	r3, r0
 80072ba:	0b1b      	lsrs	r3, r3, #12
 80072bc:	b29b      	uxth	r3, r3
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80072c4:	7cbb      	ldrb	r3, [r7, #18]
 80072c6:	2b13      	cmp	r3, #19
 80072c8:	f240 8376 	bls.w	80079b8 <tcp_input+0x750>
 80072cc:	7cbb      	ldrb	r3, [r7, #18]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	891b      	ldrh	r3, [r3, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	f200 836f 	bhi.w	80079b8 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 80072da:	7cbb      	ldrb	r3, [r7, #18]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b14      	subs	r3, #20
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	4b68      	ldr	r3, [pc, #416]	@ (8007484 <tcp_input+0x21c>)
 80072e4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80072e6:	4b68      	ldr	r3, [pc, #416]	@ (8007488 <tcp_input+0x220>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	895a      	ldrh	r2, [r3, #10]
 80072f0:	7cbb      	ldrb	r3, [r7, #18]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d30d      	bcc.n	8007314 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80072f8:	4b62      	ldr	r3, [pc, #392]	@ (8007484 <tcp_input+0x21c>)
 80072fa:	881a      	ldrh	r2, [r3, #0]
 80072fc:	4b63      	ldr	r3, [pc, #396]	@ (800748c <tcp_input+0x224>)
 80072fe:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007300:	7cbb      	ldrb	r3, [r7, #18]
 8007302:	b29b      	uxth	r3, r3
 8007304:	425b      	negs	r3, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	b21b      	sxth	r3, r3
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fe f8df 	bl	80054d0 <pbuf_header>
 8007312:	e055      	b.n	80073c0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <tcp_input+0xc0>
 800731c:	4b5c      	ldr	r3, [pc, #368]	@ (8007490 <tcp_input+0x228>)
 800731e:	22b2      	movs	r2, #178	@ 0xb2
 8007320:	495c      	ldr	r1, [pc, #368]	@ (8007494 <tcp_input+0x22c>)
 8007322:	485d      	ldr	r0, [pc, #372]	@ (8007498 <tcp_input+0x230>)
 8007324:	f006 fb1a 	bl	800d95c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8007328:	f06f 0113 	mvn.w	r1, #19
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe f8cf 	bl	80054d0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	895a      	ldrh	r2, [r3, #10]
 8007336:	4b55      	ldr	r3, [pc, #340]	@ (800748c <tcp_input+0x224>)
 8007338:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800733a:	4b52      	ldr	r3, [pc, #328]	@ (8007484 <tcp_input+0x21c>)
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	4b53      	ldr	r3, [pc, #332]	@ (800748c <tcp_input+0x224>)
 8007340:	881b      	ldrh	r3, [r3, #0]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007346:	4b51      	ldr	r3, [pc, #324]	@ (800748c <tcp_input+0x224>)
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	425b      	negs	r3, r3
 800734c:	b29b      	uxth	r3, r3
 800734e:	b21b      	sxth	r3, r3
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fe f8bc 	bl	80054d0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	895b      	ldrh	r3, [r3, #10]
 800735e:	8a3a      	ldrh	r2, [r7, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	f200 832b 	bhi.w	80079bc <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	4a46      	ldr	r2, [pc, #280]	@ (8007488 <tcp_input+0x220>)
 800736e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	8a3b      	ldrh	r3, [r7, #16]
 8007376:	425b      	negs	r3, r3
 8007378:	b29b      	uxth	r3, r3
 800737a:	b21b      	sxth	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	4610      	mov	r0, r2
 8007380:	f7fe f8a6 	bl	80054d0 <pbuf_header>
    p->tot_len -= opt2len;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	891a      	ldrh	r2, [r3, #8]
 8007388:	8a3b      	ldrh	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	b29a      	uxth	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	895b      	ldrh	r3, [r3, #10]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <tcp_input+0x13e>
 800739a:	4b3d      	ldr	r3, [pc, #244]	@ (8007490 <tcp_input+0x228>)
 800739c:	22cf      	movs	r2, #207	@ 0xcf
 800739e:	493f      	ldr	r1, [pc, #252]	@ (800749c <tcp_input+0x234>)
 80073a0:	483d      	ldr	r0, [pc, #244]	@ (8007498 <tcp_input+0x230>)
 80073a2:	f006 fadb 	bl	800d95c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	891a      	ldrh	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	891b      	ldrh	r3, [r3, #8]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d005      	beq.n	80073c0 <tcp_input+0x158>
 80073b4:	4b36      	ldr	r3, [pc, #216]	@ (8007490 <tcp_input+0x228>)
 80073b6:	22d0      	movs	r2, #208	@ 0xd0
 80073b8:	4939      	ldr	r1, [pc, #228]	@ (80074a0 <tcp_input+0x238>)
 80073ba:	4837      	ldr	r0, [pc, #220]	@ (8007498 <tcp_input+0x230>)
 80073bc:	f006 face 	bl	800d95c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80073c0:	4b2e      	ldr	r3, [pc, #184]	@ (800747c <tcp_input+0x214>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	881b      	ldrh	r3, [r3, #0]
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	4a2c      	ldr	r2, [pc, #176]	@ (800747c <tcp_input+0x214>)
 80073ca:	6814      	ldr	r4, [r2, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fc ff92 	bl	80042f6 <lwip_htons>
 80073d2:	4603      	mov	r3, r0
 80073d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80073d6:	4b29      	ldr	r3, [pc, #164]	@ (800747c <tcp_input+0x214>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	885b      	ldrh	r3, [r3, #2]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	4a27      	ldr	r2, [pc, #156]	@ (800747c <tcp_input+0x214>)
 80073e0:	6814      	ldr	r4, [r2, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fc ff87 	bl	80042f6 <lwip_htons>
 80073e8:	4603      	mov	r3, r0
 80073ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80073ec:	4b23      	ldr	r3, [pc, #140]	@ (800747c <tcp_input+0x214>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	4a22      	ldr	r2, [pc, #136]	@ (800747c <tcp_input+0x214>)
 80073f4:	6814      	ldr	r4, [r2, #0]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fc ff8a 	bl	8004310 <lwip_htonl>
 80073fc:	4603      	mov	r3, r0
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	6863      	ldr	r3, [r4, #4]
 8007402:	4a28      	ldr	r2, [pc, #160]	@ (80074a4 <tcp_input+0x23c>)
 8007404:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007406:	4b1d      	ldr	r3, [pc, #116]	@ (800747c <tcp_input+0x214>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	4a1b      	ldr	r2, [pc, #108]	@ (800747c <tcp_input+0x214>)
 800740e:	6814      	ldr	r4, [r2, #0]
 8007410:	4618      	mov	r0, r3
 8007412:	f7fc ff7d 	bl	8004310 <lwip_htonl>
 8007416:	4603      	mov	r3, r0
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	4a22      	ldr	r2, [pc, #136]	@ (80074a8 <tcp_input+0x240>)
 800741e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007420:	4b16      	ldr	r3, [pc, #88]	@ (800747c <tcp_input+0x214>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	89db      	ldrh	r3, [r3, #14]
 8007426:	b29b      	uxth	r3, r3
 8007428:	4a14      	ldr	r2, [pc, #80]	@ (800747c <tcp_input+0x214>)
 800742a:	6814      	ldr	r4, [r2, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc ff62 	bl	80042f6 <lwip_htons>
 8007432:	4603      	mov	r3, r0
 8007434:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007436:	4b11      	ldr	r3, [pc, #68]	@ (800747c <tcp_input+0x214>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	899b      	ldrh	r3, [r3, #12]
 800743c:	b29b      	uxth	r3, r3
 800743e:	4618      	mov	r0, r3
 8007440:	f7fc ff59 	bl	80042f6 <lwip_htons>
 8007444:	4603      	mov	r3, r0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b17      	ldr	r3, [pc, #92]	@ (80074ac <tcp_input+0x244>)
 8007450:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	891b      	ldrh	r3, [r3, #8]
 8007456:	4a15      	ldr	r2, [pc, #84]	@ (80074ac <tcp_input+0x244>)
 8007458:	7812      	ldrb	r2, [r2, #0]
 800745a:	f002 0203 	and.w	r2, r2, #3
 800745e:	2a00      	cmp	r2, #0
 8007460:	bf14      	ite	ne
 8007462:	2201      	movne	r2, #1
 8007464:	2200      	moveq	r2, #0
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	4413      	add	r3, r2
 800746a:	b29a      	uxth	r2, r3
 800746c:	4b10      	ldr	r3, [pc, #64]	@ (80074b0 <tcp_input+0x248>)
 800746e:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007474:	4b0f      	ldr	r3, [pc, #60]	@ (80074b4 <tcp_input+0x24c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	61fb      	str	r3, [r7, #28]
 800747a:	e081      	b.n	8007580 <tcp_input+0x318>
 800747c:	20007f2c 	.word	0x20007f2c
 8007480:	200049a8 	.word	0x200049a8
 8007484:	20007f30 	.word	0x20007f30
 8007488:	20007f34 	.word	0x20007f34
 800748c:	20007f32 	.word	0x20007f32
 8007490:	0800f7cc 	.word	0x0800f7cc
 8007494:	0800f800 	.word	0x0800f800
 8007498:	0800f810 	.word	0x0800f810
 800749c:	0800f838 	.word	0x0800f838
 80074a0:	0800f844 	.word	0x0800f844
 80074a4:	20007f3c 	.word	0x20007f3c
 80074a8:	20007f40 	.word	0x20007f40
 80074ac:	20007f48 	.word	0x20007f48
 80074b0:	20007f46 	.word	0x20007f46
 80074b4:	20007f10 	.word	0x20007f10
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	7d1b      	ldrb	r3, [r3, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <tcp_input+0x264>
 80074c0:	4b6e      	ldr	r3, [pc, #440]	@ (800767c <tcp_input+0x414>)
 80074c2:	22e2      	movs	r2, #226	@ 0xe2
 80074c4:	496e      	ldr	r1, [pc, #440]	@ (8007680 <tcp_input+0x418>)
 80074c6:	486f      	ldr	r0, [pc, #444]	@ (8007684 <tcp_input+0x41c>)
 80074c8:	f006 fa48 	bl	800d95c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	7d1b      	ldrb	r3, [r3, #20]
 80074d0:	2b0a      	cmp	r3, #10
 80074d2:	d105      	bne.n	80074e0 <tcp_input+0x278>
 80074d4:	4b69      	ldr	r3, [pc, #420]	@ (800767c <tcp_input+0x414>)
 80074d6:	22e3      	movs	r2, #227	@ 0xe3
 80074d8:	496b      	ldr	r1, [pc, #428]	@ (8007688 <tcp_input+0x420>)
 80074da:	486a      	ldr	r0, [pc, #424]	@ (8007684 <tcp_input+0x41c>)
 80074dc:	f006 fa3e 	bl	800d95c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	7d1b      	ldrb	r3, [r3, #20]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d105      	bne.n	80074f4 <tcp_input+0x28c>
 80074e8:	4b64      	ldr	r3, [pc, #400]	@ (800767c <tcp_input+0x414>)
 80074ea:	22e4      	movs	r2, #228	@ 0xe4
 80074ec:	4967      	ldr	r1, [pc, #412]	@ (800768c <tcp_input+0x424>)
 80074ee:	4865      	ldr	r0, [pc, #404]	@ (8007684 <tcp_input+0x41c>)
 80074f0:	f006 fa34 	bl	800d95c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	8b1a      	ldrh	r2, [r3, #24]
 80074f8:	4b65      	ldr	r3, [pc, #404]	@ (8007690 <tcp_input+0x428>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	429a      	cmp	r2, r3
 8007502:	d138      	bne.n	8007576 <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	8ada      	ldrh	r2, [r3, #22]
 8007508:	4b61      	ldr	r3, [pc, #388]	@ (8007690 <tcp_input+0x428>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007510:	429a      	cmp	r2, r3
 8007512:	d130      	bne.n	8007576 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	4b5e      	ldr	r3, [pc, #376]	@ (8007694 <tcp_input+0x42c>)
 800751a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800751c:	429a      	cmp	r2, r3
 800751e:	d12a      	bne.n	8007576 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4b5b      	ldr	r3, [pc, #364]	@ (8007694 <tcp_input+0x42c>)
 8007526:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007528:	429a      	cmp	r2, r3
 800752a:	d124      	bne.n	8007576 <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d105      	bne.n	8007542 <tcp_input+0x2da>
 8007536:	4b51      	ldr	r3, [pc, #324]	@ (800767c <tcp_input+0x414>)
 8007538:	22ec      	movs	r2, #236	@ 0xec
 800753a:	4957      	ldr	r1, [pc, #348]	@ (8007698 <tcp_input+0x430>)
 800753c:	4851      	ldr	r0, [pc, #324]	@ (8007684 <tcp_input+0x41c>)
 800753e:	f006 fa0d 	bl	800d95c <iprintf>
      if (prev != NULL) {
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <tcp_input+0x2f6>
        prev->next = pcb->next;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007550:	4b52      	ldr	r3, [pc, #328]	@ (800769c <tcp_input+0x434>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007558:	4a50      	ldr	r2, [pc, #320]	@ (800769c <tcp_input+0x434>)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	429a      	cmp	r2, r3
 8007566:	d10f      	bne.n	8007588 <tcp_input+0x320>
 8007568:	4b44      	ldr	r3, [pc, #272]	@ (800767c <tcp_input+0x414>)
 800756a:	22f4      	movs	r2, #244	@ 0xf4
 800756c:	494c      	ldr	r1, [pc, #304]	@ (80076a0 <tcp_input+0x438>)
 800756e:	4845      	ldr	r0, [pc, #276]	@ (8007684 <tcp_input+0x41c>)
 8007570:	f006 f9f4 	bl	800d95c <iprintf>
      break;
 8007574:	e008      	b.n	8007588 <tcp_input+0x320>
    }
    prev = pcb;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d198      	bne.n	80074b8 <tcp_input+0x250>
 8007586:	e000      	b.n	800758a <tcp_input+0x322>
      break;
 8007588:	bf00      	nop
  }

  if (pcb == NULL) {
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f040 808f 	bne.w	80076b0 <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007592:	4b44      	ldr	r3, [pc, #272]	@ (80076a4 <tcp_input+0x43c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	61fb      	str	r3, [r7, #28]
 8007598:	e02f      	b.n	80075fa <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	7d1b      	ldrb	r3, [r3, #20]
 800759e:	2b0a      	cmp	r3, #10
 80075a0:	d005      	beq.n	80075ae <tcp_input+0x346>
 80075a2:	4b36      	ldr	r3, [pc, #216]	@ (800767c <tcp_input+0x414>)
 80075a4:	22fe      	movs	r2, #254	@ 0xfe
 80075a6:	4940      	ldr	r1, [pc, #256]	@ (80076a8 <tcp_input+0x440>)
 80075a8:	4836      	ldr	r0, [pc, #216]	@ (8007684 <tcp_input+0x41c>)
 80075aa:	f006 f9d7 	bl	800d95c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	8b1a      	ldrh	r2, [r3, #24]
 80075b2:	4b37      	ldr	r3, [pc, #220]	@ (8007690 <tcp_input+0x428>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d11a      	bne.n	80075f4 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	8ada      	ldrh	r2, [r3, #22]
 80075c2:	4b33      	ldr	r3, [pc, #204]	@ (8007690 <tcp_input+0x428>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	885b      	ldrh	r3, [r3, #2]
 80075c8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d112      	bne.n	80075f4 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	4b30      	ldr	r3, [pc, #192]	@ (8007694 <tcp_input+0x42c>)
 80075d4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d10c      	bne.n	80075f4 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b2d      	ldr	r3, [pc, #180]	@ (8007694 <tcp_input+0x42c>)
 80075e0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d106      	bne.n	80075f4 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 80075e6:	69f8      	ldr	r0, [r7, #28]
 80075e8:	f000 fb16 	bl	8007c18 <tcp_timewait_input>
        pbuf_free(p);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7fd ff93 	bl	8005518 <pbuf_free>
        return;
 80075f2:	e1e9      	b.n	80079c8 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	61fb      	str	r3, [r7, #28]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1cc      	bne.n	800759a <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007604:	4b29      	ldr	r3, [pc, #164]	@ (80076ac <tcp_input+0x444>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e019      	b.n	8007640 <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	8ada      	ldrh	r2, [r3, #22]
 8007610:	4b1f      	ldr	r3, [pc, #124]	@ (8007690 <tcp_input+0x428>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	885b      	ldrh	r3, [r3, #2]
 8007616:	b29b      	uxth	r3, r3
 8007618:	429a      	cmp	r2, r3
 800761a:	d10c      	bne.n	8007636 <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	4b1c      	ldr	r3, [pc, #112]	@ (8007694 <tcp_input+0x42c>)
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	429a      	cmp	r2, r3
 8007626:	d00f      	beq.n	8007648 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00d      	beq.n	800764a <tcp_input+0x3e2>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e2      	bne.n	800760c <tcp_input+0x3a4>
 8007646:	e000      	b.n	800764a <tcp_input+0x3e2>
            break;
 8007648:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02f      	beq.n	80076b0 <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800765e:	4b13      	ldr	r3, [pc, #76]	@ (80076ac <tcp_input+0x444>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007666:	4a11      	ldr	r2, [pc, #68]	@ (80076ac <tcp_input+0x444>)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800766c:	6978      	ldr	r0, [r7, #20]
 800766e:	f000 f9f3 	bl	8007a58 <tcp_listen_input>
      pbuf_free(p);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fd ff50 	bl	8005518 <pbuf_free>
      return;
 8007678:	e1a6      	b.n	80079c8 <tcp_input+0x760>
 800767a:	bf00      	nop
 800767c:	0800f7cc 	.word	0x0800f7cc
 8007680:	0800f864 	.word	0x0800f864
 8007684:	0800f810 	.word	0x0800f810
 8007688:	0800f88c 	.word	0x0800f88c
 800768c:	0800f8b8 	.word	0x0800f8b8
 8007690:	20007f2c 	.word	0x20007f2c
 8007694:	200049a8 	.word	0x200049a8
 8007698:	0800f8e0 	.word	0x0800f8e0
 800769c:	20007f10 	.word	0x20007f10
 80076a0:	0800f90c 	.word	0x0800f90c
 80076a4:	20007f14 	.word	0x20007f14
 80076a8:	0800f938 	.word	0x0800f938
 80076ac:	20007f0c 	.word	0x20007f0c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 8156 	beq.w	8007964 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80076b8:	4b94      	ldr	r3, [pc, #592]	@ (800790c <tcp_input+0x6a4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	891a      	ldrh	r2, [r3, #8]
 80076c2:	4b92      	ldr	r3, [pc, #584]	@ (800790c <tcp_input+0x6a4>)
 80076c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80076c6:	4a91      	ldr	r2, [pc, #580]	@ (800790c <tcp_input+0x6a4>)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80076cc:	4b90      	ldr	r3, [pc, #576]	@ (8007910 <tcp_input+0x6a8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a8e      	ldr	r2, [pc, #568]	@ (800790c <tcp_input+0x6a4>)
 80076d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80076d4:	4b8f      	ldr	r3, [pc, #572]	@ (8007914 <tcp_input+0x6ac>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80076da:	4b8f      	ldr	r3, [pc, #572]	@ (8007918 <tcp_input+0x6b0>)
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80076e0:	4b8e      	ldr	r3, [pc, #568]	@ (800791c <tcp_input+0x6b4>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80076e6:	4b8e      	ldr	r3, [pc, #568]	@ (8007920 <tcp_input+0x6b8>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	f003 0308 	and.w	r3, r3, #8
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	7b5b      	ldrb	r3, [r3, #13]
 80076f6:	f043 0301 	orr.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007704:	2b00      	cmp	r3, #0
 8007706:	d017      	beq.n	8007738 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007708:	69f8      	ldr	r0, [r7, #28]
 800770a:	f7ff f9a1 	bl	8006a50 <tcp_process_refused_data>
 800770e:	4603      	mov	r3, r0
 8007710:	f113 0f0d 	cmn.w	r3, #13
 8007714:	d007      	beq.n	8007726 <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00c      	beq.n	8007738 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800771e:	4b81      	ldr	r3, [pc, #516]	@ (8007924 <tcp_input+0x6bc>)
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800772a:	2b00      	cmp	r3, #0
 800772c:	f040 80e2 	bne.w	80078f4 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007730:	69f8      	ldr	r0, [r7, #28]
 8007732:	f002 fe1b 	bl	800a36c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007736:	e0dd      	b.n	80078f4 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 8007738:	4a7b      	ldr	r2, [pc, #492]	@ (8007928 <tcp_input+0x6c0>)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800773e:	69f8      	ldr	r0, [r7, #28]
 8007740:	f000 fad2 	bl	8007ce8 <tcp_process>
 8007744:	4603      	mov	r3, r0
 8007746:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007748:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800774c:	f113 0f0d 	cmn.w	r3, #13
 8007750:	f000 80d2 	beq.w	80078f8 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 8007754:	4b70      	ldr	r3, [pc, #448]	@ (8007918 <tcp_input+0x6b0>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 0308 	and.w	r3, r3, #8
 800775c:	2b00      	cmp	r3, #0
 800775e:	d016      	beq.n	800778e <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d008      	beq.n	800777c <tcp_input+0x514>
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	6912      	ldr	r2, [r2, #16]
 8007774:	f06f 010d 	mvn.w	r1, #13
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	486b      	ldr	r0, [pc, #428]	@ (800792c <tcp_input+0x6c4>)
 8007780:	f7ff fc5a 	bl	8007038 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8007784:	69f9      	ldr	r1, [r7, #28]
 8007786:	2001      	movs	r0, #1
 8007788:	f7fd f9aa 	bl	8004ae0 <memp_free>
 800778c:	e0d7      	b.n	800793e <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007792:	4b62      	ldr	r3, [pc, #392]	@ (800791c <tcp_input+0x6b4>)
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01b      	beq.n	80077d2 <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800779a:	4b60      	ldr	r3, [pc, #384]	@ (800791c <tcp_input+0x6b4>)
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <tcp_input+0x554>
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	6910      	ldr	r0, [r2, #16]
 80077b0:	89fa      	ldrh	r2, [r7, #14]
 80077b2:	69f9      	ldr	r1, [r7, #28]
 80077b4:	4798      	blx	r3
 80077b6:	4603      	mov	r3, r0
 80077b8:	74fb      	strb	r3, [r7, #19]
 80077ba:	e001      	b.n	80077c0 <tcp_input+0x558>
 80077bc:	2300      	movs	r3, #0
 80077be:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80077c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80077c4:	f113 0f0d 	cmn.w	r3, #13
 80077c8:	f000 8098 	beq.w	80078fc <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 80077cc:	4b53      	ldr	r3, [pc, #332]	@ (800791c <tcp_input+0x6b4>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80077d2:	69f8      	ldr	r0, [r7, #28]
 80077d4:	f000 f90e 	bl	80079f4 <tcp_input_delayed_close>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 8090 	bne.w	8007900 <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80077e0:	4b4c      	ldr	r3, [pc, #304]	@ (8007914 <tcp_input+0x6ac>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d041      	beq.n	800786c <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <tcp_input+0x596>
 80077f0:	4b4f      	ldr	r3, [pc, #316]	@ (8007930 <tcp_input+0x6c8>)
 80077f2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80077f6:	494f      	ldr	r1, [pc, #316]	@ (8007934 <tcp_input+0x6cc>)
 80077f8:	484f      	ldr	r0, [pc, #316]	@ (8007938 <tcp_input+0x6d0>)
 80077fa:	f006 f8af 	bl	800d95c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	7e9b      	ldrb	r3, [r3, #26]
 8007802:	f003 0310 	and.w	r3, r3, #16
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800780a:	4b42      	ldr	r3, [pc, #264]	@ (8007914 <tcp_input+0x6ac>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7fd fe82 	bl	8005518 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007814:	69f8      	ldr	r0, [r7, #28]
 8007816:	f7fe fc07 	bl	8006028 <tcp_abort>
            goto aborted;
 800781a:	e090      	b.n	800793e <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00c      	beq.n	8007840 <tcp_input+0x5d8>
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	6918      	ldr	r0, [r3, #16]
 8007830:	4b38      	ldr	r3, [pc, #224]	@ (8007914 <tcp_input+0x6ac>)
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	69f9      	ldr	r1, [r7, #28]
 8007838:	47a0      	blx	r4
 800783a:	4603      	mov	r3, r0
 800783c:	74fb      	strb	r3, [r7, #19]
 800783e:	e008      	b.n	8007852 <tcp_input+0x5ea>
 8007840:	4b34      	ldr	r3, [pc, #208]	@ (8007914 <tcp_input+0x6ac>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	2300      	movs	r3, #0
 8007846:	69f9      	ldr	r1, [r7, #28]
 8007848:	2000      	movs	r0, #0
 800784a:	f7ff f9b3 	bl	8006bb4 <tcp_recv_null>
 800784e:	4603      	mov	r3, r0
 8007850:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007856:	f113 0f0d 	cmn.w	r3, #13
 800785a:	d053      	beq.n	8007904 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800785c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007864:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <tcp_input+0x6ac>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800786c:	4b2a      	ldr	r3, [pc, #168]	@ (8007918 <tcp_input+0x6b0>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0320 	and.w	r3, r3, #32
 8007874:	2b00      	cmp	r3, #0
 8007876:	d030      	beq.n	80078da <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007884:	7b5a      	ldrb	r2, [r3, #13]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800788a:	f042 0220 	orr.w	r2, r2, #32
 800788e:	b2d2      	uxtb	r2, r2
 8007890:	735a      	strb	r2, [r3, #13]
 8007892:	e022      	b.n	80078da <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007898:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800789c:	d005      	beq.n	80078aa <tcp_input+0x642>
              pcb->rcv_wnd++;
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a2:	3301      	adds	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <tcp_input+0x664>
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	6918      	ldr	r0, [r3, #16]
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	69f9      	ldr	r1, [r7, #28]
 80078c4:	47a0      	blx	r4
 80078c6:	4603      	mov	r3, r0
 80078c8:	74fb      	strb	r3, [r7, #19]
 80078ca:	e001      	b.n	80078d0 <tcp_input+0x668>
 80078cc:	2300      	movs	r3, #0
 80078ce:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80078d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80078d4:	f113 0f0d 	cmn.w	r3, #13
 80078d8:	d016      	beq.n	8007908 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80078da:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <tcp_input+0x6c0>)
 80078dc:	2200      	movs	r2, #0
 80078de:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80078e0:	69f8      	ldr	r0, [r7, #28]
 80078e2:	f000 f887 	bl	80079f4 <tcp_input_delayed_close>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d127      	bne.n	800793c <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80078ec:	69f8      	ldr	r0, [r7, #28]
 80078ee:	f002 fd99 	bl	800a424 <tcp_output>
 80078f2:	e024      	b.n	800793e <tcp_input+0x6d6>
        goto aborted;
 80078f4:	bf00      	nop
 80078f6:	e022      	b.n	800793e <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80078f8:	bf00      	nop
 80078fa:	e020      	b.n	800793e <tcp_input+0x6d6>
              goto aborted;
 80078fc:	bf00      	nop
 80078fe:	e01e      	b.n	800793e <tcp_input+0x6d6>
          goto aborted;
 8007900:	bf00      	nop
 8007902:	e01c      	b.n	800793e <tcp_input+0x6d6>
            goto aborted;
 8007904:	bf00      	nop
 8007906:	e01a      	b.n	800793e <tcp_input+0x6d6>
              goto aborted;
 8007908:	bf00      	nop
 800790a:	e018      	b.n	800793e <tcp_input+0x6d6>
 800790c:	20007f1c 	.word	0x20007f1c
 8007910:	20007f2c 	.word	0x20007f2c
 8007914:	20007f4c 	.word	0x20007f4c
 8007918:	20007f49 	.word	0x20007f49
 800791c:	20007f44 	.word	0x20007f44
 8007920:	20007f48 	.word	0x20007f48
 8007924:	20007f46 	.word	0x20007f46
 8007928:	20007f50 	.word	0x20007f50
 800792c:	20007f10 	.word	0x20007f10
 8007930:	0800f7cc 	.word	0x0800f7cc
 8007934:	0800f968 	.word	0x0800f968
 8007938:	0800f810 	.word	0x0800f810
          goto aborted;
 800793c:	bf00      	nop
    tcp_input_pcb = NULL;
 800793e:	4b24      	ldr	r3, [pc, #144]	@ (80079d0 <tcp_input+0x768>)
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007944:	4b23      	ldr	r3, [pc, #140]	@ (80079d4 <tcp_input+0x76c>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800794a:	4b23      	ldr	r3, [pc, #140]	@ (80079d8 <tcp_input+0x770>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d039      	beq.n	80079c6 <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 8007952:	4b21      	ldr	r3, [pc, #132]	@ (80079d8 <tcp_input+0x770>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	4618      	mov	r0, r3
 8007958:	f7fd fdde 	bl	8005518 <pbuf_free>
      inseg.p = NULL;
 800795c:	4b1e      	ldr	r3, [pc, #120]	@ (80079d8 <tcp_input+0x770>)
 800795e:	2200      	movs	r2, #0
 8007960:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007962:	e030      	b.n	80079c6 <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007964:	4b1d      	ldr	r3, [pc, #116]	@ (80079dc <tcp_input+0x774>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	899b      	ldrh	r3, [r3, #12]
 800796a:	b29b      	uxth	r3, r3
 800796c:	4618      	mov	r0, r3
 800796e:	f7fc fcc2 	bl	80042f6 <lwip_htons>
 8007972:	4603      	mov	r3, r0
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b00      	cmp	r3, #0
 800797a:	d115      	bne.n	80079a8 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800797c:	4b18      	ldr	r3, [pc, #96]	@ (80079e0 <tcp_input+0x778>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4b18      	ldr	r3, [pc, #96]	@ (80079e4 <tcp_input+0x77c>)
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	4b18      	ldr	r3, [pc, #96]	@ (80079e8 <tcp_input+0x780>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800798c:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <tcp_input+0x774>)
 800798e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007994:	4a11      	ldr	r2, [pc, #68]	@ (80079dc <tcp_input+0x774>)
 8007996:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007998:	8812      	ldrh	r2, [r2, #0]
 800799a:	b292      	uxth	r2, r2
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	4b12      	ldr	r3, [pc, #72]	@ (80079ec <tcp_input+0x784>)
 80079a2:	4a13      	ldr	r2, [pc, #76]	@ (80079f0 <tcp_input+0x788>)
 80079a4:	f002 ffc2 	bl	800a92c <tcp_rst>
    pbuf_free(p);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fd fdb5 	bl	8005518 <pbuf_free>
  return;
 80079ae:	e00a      	b.n	80079c6 <tcp_input+0x75e>
    goto dropped;
 80079b0:	bf00      	nop
 80079b2:	e004      	b.n	80079be <tcp_input+0x756>
    goto dropped;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <tcp_input+0x756>
    goto dropped;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <tcp_input+0x756>
      goto dropped;
 80079bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fd fdaa 	bl	8005518 <pbuf_free>
 80079c4:	e000      	b.n	80079c8 <tcp_input+0x760>
  return;
 80079c6:	bf00      	nop
}
 80079c8:	3724      	adds	r7, #36	@ 0x24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd90      	pop	{r4, r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20007f50 	.word	0x20007f50
 80079d4:	20007f4c 	.word	0x20007f4c
 80079d8:	20007f1c 	.word	0x20007f1c
 80079dc:	20007f2c 	.word	0x20007f2c
 80079e0:	20007f40 	.word	0x20007f40
 80079e4:	20007f46 	.word	0x20007f46
 80079e8:	20007f3c 	.word	0x20007f3c
 80079ec:	200049b8 	.word	0x200049b8
 80079f0:	200049bc 	.word	0x200049bc

080079f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80079fc:	4b14      	ldr	r3, [pc, #80]	@ (8007a50 <tcp_input_delayed_close+0x5c>)
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	f003 0310 	and.w	r3, r3, #16
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01d      	beq.n	8007a44 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7e9b      	ldrb	r3, [r3, #26]
 8007a0c:	f003 0310 	and.w	r3, r3, #16
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d008      	beq.n	8007a30 <tcp_input_delayed_close+0x3c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6912      	ldr	r2, [r2, #16]
 8007a28:	f06f 010e 	mvn.w	r1, #14
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007a30:	6879      	ldr	r1, [r7, #4]
 8007a32:	4808      	ldr	r0, [pc, #32]	@ (8007a54 <tcp_input_delayed_close+0x60>)
 8007a34:	f7ff fb00 	bl	8007038 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007a38:	6879      	ldr	r1, [r7, #4]
 8007a3a:	2001      	movs	r0, #1
 8007a3c:	f7fd f850 	bl	8004ae0 <memp_free>
    return 1;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20007f49 	.word	0x20007f49
 8007a54:	20007f10 	.word	0x20007f10

08007a58 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b088      	sub	sp, #32
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007a60:	4b63      	ldr	r3, [pc, #396]	@ (8007bf0 <tcp_listen_input+0x198>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 80bb 	bne.w	8007be4 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007a6e:	4b60      	ldr	r3, [pc, #384]	@ (8007bf0 <tcp_listen_input+0x198>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a7a:	4b5e      	ldr	r3, [pc, #376]	@ (8007bf4 <tcp_listen_input+0x19c>)
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	4b5e      	ldr	r3, [pc, #376]	@ (8007bf8 <tcp_listen_input+0x1a0>)
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	4b5d      	ldr	r3, [pc, #372]	@ (8007bfc <tcp_listen_input+0x1a4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8007c00 <tcp_listen_input+0x1a8>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a92:	4a5b      	ldr	r2, [pc, #364]	@ (8007c00 <tcp_listen_input+0x1a8>)
 8007a94:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a96:	8812      	ldrh	r2, [r2, #0]
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	9201      	str	r2, [sp, #4]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	4b59      	ldr	r3, [pc, #356]	@ (8007c04 <tcp_listen_input+0x1ac>)
 8007aa0:	4a59      	ldr	r2, [pc, #356]	@ (8007c08 <tcp_listen_input+0x1b0>)
 8007aa2:	f002 ff43 	bl	800a92c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007aa6:	e09f      	b.n	8007be8 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 8007aa8:	4b51      	ldr	r3, [pc, #324]	@ (8007bf0 <tcp_listen_input+0x198>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8099 	beq.w	8007be8 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	7d5b      	ldrb	r3, [r3, #21]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff f958 	bl	8006d70 <tcp_alloc>
 8007ac0:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d111      	bne.n	8007aec <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00a      	beq.n	8007ae6 <tcp_listen_input+0x8e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	6910      	ldr	r0, [r2, #16]
 8007ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8007adc:	2100      	movs	r1, #0
 8007ade:	4798      	blx	r3
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73bb      	strb	r3, [r7, #14]
      return;
 8007ae4:	e081      	b.n	8007bea <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007ae6:	23f0      	movs	r3, #240	@ 0xf0
 8007ae8:	73bb      	strb	r3, [r7, #14]
      return;
 8007aea:	e07e      	b.n	8007bea <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007aec:	4b47      	ldr	r3, [pc, #284]	@ (8007c0c <tcp_listen_input+0x1b4>)
 8007aee:	695a      	ldr	r2, [r3, #20]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8007af4:	4b45      	ldr	r3, [pc, #276]	@ (8007c0c <tcp_listen_input+0x1b4>)
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	8ada      	ldrh	r2, [r3, #22]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8007b04:	4b3e      	ldr	r3, [pc, #248]	@ (8007c00 <tcp_listen_input+0x1a8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2203      	movs	r2, #3
 8007b14:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8007b16:	4b39      	ldr	r3, [pc, #228]	@ (8007bfc <tcp_listen_input+0x1a4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8007b28:	6978      	ldr	r0, [r7, #20]
 8007b2a:	f7ff fb01 	bl	8007130 <tcp_next_iss>
 8007b2e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007b48:	4b2c      	ldr	r3, [pc, #176]	@ (8007bfc <tcp_listen_input+0x1a4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691a      	ldr	r2, [r3, #16]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	7a1b      	ldrb	r3, [r3, #8]
 8007b64:	f003 030c 	and.w	r3, r3, #12
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8007b6e:	4b28      	ldr	r3, [pc, #160]	@ (8007c10 <tcp_listen_input+0x1b8>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	60da      	str	r2, [r3, #12]
 8007b76:	4a26      	ldr	r2, [pc, #152]	@ (8007c10 <tcp_listen_input+0x1b8>)
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	6013      	str	r3, [r2, #0]
 8007b7c:	f003 f91e 	bl	800adbc <tcp_timer_needed>
 8007b80:	4b24      	ldr	r3, [pc, #144]	@ (8007c14 <tcp_listen_input+0x1bc>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007b86:	6978      	ldr	r0, [r7, #20]
 8007b88:	f001 fd0c 	bl	80095a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c00 <tcp_listen_input+0x1a8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	89db      	ldrh	r3, [r3, #14]
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7ff fad3 	bl	800715c <tcp_eff_send_mss_impl>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	461a      	mov	r2, r3
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007bbe:	2112      	movs	r1, #18
 8007bc0:	6978      	ldr	r0, [r7, #20]
 8007bc2:	f002 fad7 	bl	800a174 <tcp_enqueue_flags>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f7fe f975 	bl	8005ec4 <tcp_abandon>
      return;
 8007bda:	e006      	b.n	8007bea <tcp_listen_input+0x192>
    tcp_output(npcb);
 8007bdc:	6978      	ldr	r0, [r7, #20]
 8007bde:	f002 fc21 	bl	800a424 <tcp_output>
  return;
 8007be2:	e001      	b.n	8007be8 <tcp_listen_input+0x190>
    return;
 8007be4:	bf00      	nop
 8007be6:	e000      	b.n	8007bea <tcp_listen_input+0x192>
  return;
 8007be8:	bf00      	nop
}
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20007f48 	.word	0x20007f48
 8007bf4:	20007f40 	.word	0x20007f40
 8007bf8:	20007f46 	.word	0x20007f46
 8007bfc:	20007f3c 	.word	0x20007f3c
 8007c00:	20007f2c 	.word	0x20007f2c
 8007c04:	200049b8 	.word	0x200049b8
 8007c08:	200049bc 	.word	0x200049bc
 8007c0c:	200049a8 	.word	0x200049a8
 8007c10:	20007f10 	.word	0x20007f10
 8007c14:	20007f18 	.word	0x20007f18

08007c18 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8007c20:	4b29      	ldr	r3, [pc, #164]	@ (8007cc8 <tcp_timewait_input+0xb0>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 0304 	and.w	r3, r3, #4
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d146      	bne.n	8007cba <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8007c2c:	4b26      	ldr	r3, [pc, #152]	@ (8007cc8 <tcp_timewait_input+0xb0>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d027      	beq.n	8007c88 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8007c38:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <tcp_timewait_input+0xb4>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db2a      	blt.n	8007c9c <tcp_timewait_input+0x84>
 8007c46:	4b21      	ldr	r3, [pc, #132]	@ (8007ccc <tcp_timewait_input+0xb4>)
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007c52:	440b      	add	r3, r1
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc20      	bgt.n	8007c9c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd0 <tcp_timewait_input+0xb8>)
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd4 <tcp_timewait_input+0xbc>)
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	4b19      	ldr	r3, [pc, #100]	@ (8007ccc <tcp_timewait_input+0xb4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd8 <tcp_timewait_input+0xc0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c6e:	885b      	ldrh	r3, [r3, #2]
 8007c70:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007c72:	4a19      	ldr	r2, [pc, #100]	@ (8007cd8 <tcp_timewait_input+0xc0>)
 8007c74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007c76:	8812      	ldrh	r2, [r2, #0]
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	9201      	str	r2, [sp, #4]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4b17      	ldr	r3, [pc, #92]	@ (8007cdc <tcp_timewait_input+0xc4>)
 8007c80:	4a17      	ldr	r2, [pc, #92]	@ (8007ce0 <tcp_timewait_input+0xc8>)
 8007c82:	f002 fe53 	bl	800a92c <tcp_rst>
      return;
 8007c86:	e01b      	b.n	8007cc0 <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8007c88:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <tcp_timewait_input+0xb0>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007c94:	4b13      	ldr	r3, [pc, #76]	@ (8007ce4 <tcp_timewait_input+0xcc>)
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <tcp_timewait_input+0xbc>)
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	7e9b      	ldrb	r3, [r3, #26]
 8007ca8:	f043 0302 	orr.w	r3, r3, #2
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f002 fbb6 	bl	800a424 <tcp_output>
  }
  return;
 8007cb8:	e001      	b.n	8007cbe <tcp_timewait_input+0xa6>
    return;
 8007cba:	bf00      	nop
 8007cbc:	e000      	b.n	8007cc0 <tcp_timewait_input+0xa8>
  return;
 8007cbe:	bf00      	nop
}
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20007f48 	.word	0x20007f48
 8007ccc:	20007f3c 	.word	0x20007f3c
 8007cd0:	20007f40 	.word	0x20007f40
 8007cd4:	20007f46 	.word	0x20007f46
 8007cd8:	20007f2c 	.word	0x20007f2c
 8007cdc:	200049b8 	.word	0x200049b8
 8007ce0:	200049bc 	.word	0x200049bc
 8007ce4:	20007f04 	.word	0x20007f04

08007ce8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	@ 0x28
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007cf8:	4b93      	ldr	r3, [pc, #588]	@ (8007f48 <tcp_process+0x260>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d04e      	beq.n	8007da2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	7d1b      	ldrb	r3, [r3, #20]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d108      	bne.n	8007d1e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d10:	4b8e      	ldr	r3, [pc, #568]	@ (8007f4c <tcp_process+0x264>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d123      	bne.n	8007d60 <tcp_process+0x78>
        acceptable = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	76fb      	strb	r3, [r7, #27]
 8007d1c:	e020      	b.n	8007d60 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d22:	4b8b      	ldr	r3, [pc, #556]	@ (8007f50 <tcp_process+0x268>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d102      	bne.n	8007d30 <tcp_process+0x48>
        acceptable = 1;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	76fb      	strb	r3, [r7, #27]
 8007d2e:	e017      	b.n	8007d60 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007d30:	4b87      	ldr	r3, [pc, #540]	@ (8007f50 <tcp_process+0x268>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	db10      	blt.n	8007d60 <tcp_process+0x78>
 8007d3e:	4b84      	ldr	r3, [pc, #528]	@ (8007f50 <tcp_process+0x268>)
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8007d4a:	440b      	add	r3, r1
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dc06      	bgt.n	8007d60 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	7e9b      	ldrb	r3, [r3, #26]
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007d60:	7efb      	ldrb	r3, [r7, #27]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01b      	beq.n	8007d9e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7d1b      	ldrb	r3, [r3, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <tcp_process+0x94>
 8007d6e:	4b79      	ldr	r3, [pc, #484]	@ (8007f54 <tcp_process+0x26c>)
 8007d70:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8007d74:	4978      	ldr	r1, [pc, #480]	@ (8007f58 <tcp_process+0x270>)
 8007d76:	4879      	ldr	r0, [pc, #484]	@ (8007f5c <tcp_process+0x274>)
 8007d78:	f005 fdf0 	bl	800d95c <iprintf>
      recv_flags |= TF_RESET;
 8007d7c:	4b78      	ldr	r3, [pc, #480]	@ (8007f60 <tcp_process+0x278>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f043 0308 	orr.w	r3, r3, #8
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	4b76      	ldr	r3, [pc, #472]	@ (8007f60 <tcp_process+0x278>)
 8007d88:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7e9b      	ldrb	r3, [r3, #26]
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007d98:	f06f 030d 	mvn.w	r3, #13
 8007d9c:	e348      	b.n	8008430 <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e346      	b.n	8008430 <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007da2:	4b69      	ldr	r3, [pc, #420]	@ (8007f48 <tcp_process+0x260>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	f003 0302 	and.w	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <tcp_process+0xe8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7d1b      	ldrb	r3, [r3, #20]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d00c      	beq.n	8007dd0 <tcp_process+0xe8>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7d1b      	ldrb	r3, [r3, #20]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d008      	beq.n	8007dd0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7e9b      	ldrb	r3, [r3, #26]
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e32f      	b.n	8008430 <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	7e9b      	ldrb	r3, [r3, #26]
 8007dd4:	f003 0310 	and.w	r3, r3, #16
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ddc:	4b61      	ldr	r3, [pc, #388]	@ (8007f64 <tcp_process+0x27c>)
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fbd9 	bl	80095a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	7d1b      	ldrb	r3, [r3, #20]
 8007df6:	3b02      	subs	r3, #2
 8007df8:	2b07      	cmp	r3, #7
 8007dfa:	f200 8309 	bhi.w	8008410 <tcp_process+0x728>
 8007dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8007e04 <tcp_process+0x11c>)
 8007e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	0800801b 	.word	0x0800801b
 8007e0c:	08008173 	.word	0x08008173
 8007e10:	0800819d 	.word	0x0800819d
 8007e14:	080082bf 	.word	0x080082bf
 8007e18:	08008173 	.word	0x08008173
 8007e1c:	0800834b 	.word	0x0800834b
 8007e20:	080083db 	.word	0x080083db
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007e24:	4b48      	ldr	r3, [pc, #288]	@ (8007f48 <tcp_process+0x260>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 0310 	and.w	r3, r3, #16
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 80ca 	beq.w	8007fc6 <tcp_process+0x2de>
 8007e32:	4b45      	ldr	r3, [pc, #276]	@ (8007f48 <tcp_process+0x260>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 80c3 	beq.w	8007fc6 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	4b41      	ldr	r3, [pc, #260]	@ (8007f4c <tcp_process+0x264>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f040 80bb 	bne.w	8007fc6 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 8007e50:	4b3f      	ldr	r3, [pc, #252]	@ (8007f50 <tcp_process+0x268>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 8007e62:	4b3a      	ldr	r3, [pc, #232]	@ (8007f4c <tcp_process+0x264>)
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007e6a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f68 <tcp_process+0x280>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	89db      	ldrh	r3, [r3, #14]
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007e84:	4b32      	ldr	r3, [pc, #200]	@ (8007f50 <tcp_process+0x268>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	1e5a      	subs	r2, r3, #1
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2204      	movs	r2, #4
 8007e92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f7ff f95c 	bl	800715c <tcp_eff_send_mss_impl>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	bf38      	it	cc
 8007eba:	461a      	movcc	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	bf28      	it	cs
 8007ec6:	4613      	movcs	r3, r2
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <tcp_process+0x200>
 8007eda:	4b1e      	ldr	r3, [pc, #120]	@ (8007f54 <tcp_process+0x26c>)
 8007edc:	f240 321a 	movw	r2, #794	@ 0x31a
 8007ee0:	4922      	ldr	r1, [pc, #136]	@ (8007f6c <tcp_process+0x284>)
 8007ee2:	481e      	ldr	r0, [pc, #120]	@ (8007f5c <tcp_process+0x274>)
 8007ee4:	f005 fd3a 	bl	800d95c <iprintf>
      --pcb->snd_queuelen;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007efc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d111      	bne.n	8007f28 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f08:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d106      	bne.n	8007f1e <tcp_process+0x236>
 8007f10:	4b10      	ldr	r3, [pc, #64]	@ (8007f54 <tcp_process+0x26c>)
 8007f12:	f240 3222 	movw	r2, #802	@ 0x322
 8007f16:	4916      	ldr	r1, [pc, #88]	@ (8007f70 <tcp_process+0x288>)
 8007f18:	4810      	ldr	r0, [pc, #64]	@ (8007f5c <tcp_process+0x274>)
 8007f1a:	f005 fd1f 	bl	800d95c <iprintf>
        pcb->unsent = rseg->next;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	669a      	str	r2, [r3, #104]	@ 0x68
 8007f26:	e003      	b.n	8007f30 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 8007f30:	69f8      	ldr	r0, [r7, #28]
 8007f32:	f7fe fe0b 	bl	8006b4c <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d11a      	bne.n	8007f74 <tcp_process+0x28c>
        pcb->rtime = -1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007f44:	861a      	strh	r2, [r3, #48]	@ 0x30
 8007f46:	e01c      	b.n	8007f82 <tcp_process+0x29a>
 8007f48:	20007f48 	.word	0x20007f48
 8007f4c:	20007f40 	.word	0x20007f40
 8007f50:	20007f3c 	.word	0x20007f3c
 8007f54:	0800f7cc 	.word	0x0800f7cc
 8007f58:	0800f984 	.word	0x0800f984
 8007f5c:	0800f810 	.word	0x0800f810
 8007f60:	20007f49 	.word	0x20007f49
 8007f64:	20007f04 	.word	0x20007f04
 8007f68:	20007f2c 	.word	0x20007f2c
 8007f6c:	0800f9a4 	.word	0x0800f9a4
 8007f70:	0800f9bc 	.word	0x0800f9bc
      } else {
        pcb->rtime = 0;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00a      	beq.n	8007fa2 <tcp_process+0x2ba>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6910      	ldr	r0, [r2, #16]
 8007f96:	2200      	movs	r2, #0
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4798      	blx	r3
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	76bb      	strb	r3, [r7, #26]
 8007fa0:	e001      	b.n	8007fa6 <tcp_process+0x2be>
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8007fa6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007faa:	f113 0f0d 	cmn.w	r3, #13
 8007fae:	d102      	bne.n	8007fb6 <tcp_process+0x2ce>
        return ERR_ABRT;
 8007fb0:	f06f 030c 	mvn.w	r3, #12
 8007fb4:	e23c      	b.n	8008430 <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	7e9b      	ldrb	r3, [r3, #26]
 8007fba:	f043 0302 	orr.w	r3, r3, #2
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007fc4:	e226      	b.n	8008414 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 8007fc6:	4b93      	ldr	r3, [pc, #588]	@ (8008214 <tcp_process+0x52c>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8220 	beq.w	8008414 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fd4:	4b90      	ldr	r3, [pc, #576]	@ (8008218 <tcp_process+0x530>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4b90      	ldr	r3, [pc, #576]	@ (800821c <tcp_process+0x534>)
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	4b90      	ldr	r3, [pc, #576]	@ (8008220 <tcp_process+0x538>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fe4:	4b8f      	ldr	r3, [pc, #572]	@ (8008224 <tcp_process+0x53c>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007fec:	4a8d      	ldr	r2, [pc, #564]	@ (8008224 <tcp_process+0x53c>)
 8007fee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ff0:	8812      	ldrh	r2, [r2, #0]
 8007ff2:	b292      	uxth	r2, r2
 8007ff4:	9201      	str	r2, [sp, #4]
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	4b8b      	ldr	r3, [pc, #556]	@ (8008228 <tcp_process+0x540>)
 8007ffa:	4a8c      	ldr	r2, [pc, #560]	@ (800822c <tcp_process+0x544>)
 8007ffc:	f002 fc96 	bl	800a92c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008006:	2b05      	cmp	r3, #5
 8008008:	f200 8204 	bhi.w	8008414 <tcp_process+0x72c>
        pcb->rtime = 0;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f002 fd00 	bl	800aa18 <tcp_rexmit_rto>
    break;
 8008018:	e1fc      	b.n	8008414 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800801a:	4b7e      	ldr	r3, [pc, #504]	@ (8008214 <tcp_process+0x52c>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 8091 	beq.w	800814a <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008028:	4b7b      	ldr	r3, [pc, #492]	@ (8008218 <tcp_process+0x530>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	db71      	blt.n	800811c <tcp_process+0x434>
 8008038:	4b77      	ldr	r3, [pc, #476]	@ (8008218 <tcp_process+0x530>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	dc6a      	bgt.n	800811c <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2204      	movs	r2, #4
 800804a:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00b      	beq.n	800806c <tcp_process+0x384>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <tcp_process+0x384>
 800805e:	4b74      	ldr	r3, [pc, #464]	@ (8008230 <tcp_process+0x548>)
 8008060:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008064:	4973      	ldr	r1, [pc, #460]	@ (8008234 <tcp_process+0x54c>)
 8008066:	4874      	ldr	r0, [pc, #464]	@ (8008238 <tcp_process+0x550>)
 8008068:	f005 fc78 	bl	800d95c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8008074:	23fa      	movs	r3, #250	@ 0xfa
 8008076:	76bb      	strb	r3, [r7, #26]
 8008078:	e011      	b.n	800809e <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <tcp_process+0x3b2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6910      	ldr	r0, [r2, #16]
 800808e:	2200      	movs	r2, #0
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	4798      	blx	r3
 8008094:	4603      	mov	r3, r0
 8008096:	76bb      	strb	r3, [r7, #26]
 8008098:	e001      	b.n	800809e <tcp_process+0x3b6>
 800809a:	23f0      	movs	r3, #240	@ 0xf0
 800809c:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800809e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00a      	beq.n	80080bc <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80080a6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80080aa:	f113 0f0d 	cmn.w	r3, #13
 80080ae:	d002      	beq.n	80080b6 <tcp_process+0x3ce>
            tcp_abort(pcb);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fd ffb9 	bl	8006028 <tcp_abort>
          }
          return ERR_ABRT;
 80080b6:	f06f 030c 	mvn.w	r3, #12
 80080ba:	e1b9      	b.n	8008430 <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa3d 	bl	800853c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80080c2:	4b5e      	ldr	r3, [pc, #376]	@ (800823c <tcp_process+0x554>)
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d005      	beq.n	80080d6 <tcp_process+0x3ee>
          recv_acked--;
 80080ca:	4b5c      	ldr	r3, [pc, #368]	@ (800823c <tcp_process+0x554>)
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	4b5a      	ldr	r3, [pc, #360]	@ (800823c <tcp_process+0x554>)
 80080d4:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	f241 121c 	movw	r2, #4380	@ 0x111c
 80080e0:	429a      	cmp	r2, r3
 80080e2:	bf38      	it	cc
 80080e4:	461a      	movcc	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4293      	cmp	r3, r2
 80080ee:	bf28      	it	cs
 80080f0:	4613      	movcs	r3, r2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80080fa:	4b51      	ldr	r3, [pc, #324]	@ (8008240 <tcp_process+0x558>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 0320 	and.w	r3, r3, #32
 8008102:	2b00      	cmp	r3, #0
 8008104:	d034      	beq.n	8008170 <tcp_process+0x488>
          tcp_ack_now(pcb);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7e9b      	ldrb	r3, [r3, #26]
 800810a:	f043 0302 	orr.w	r3, r3, #2
 800810e:	b2da      	uxtb	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2207      	movs	r2, #7
 8008118:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800811a:	e029      	b.n	8008170 <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800811c:	4b3e      	ldr	r3, [pc, #248]	@ (8008218 <tcp_process+0x530>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4b3e      	ldr	r3, [pc, #248]	@ (800821c <tcp_process+0x534>)
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	4b3e      	ldr	r3, [pc, #248]	@ (8008220 <tcp_process+0x538>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800812c:	4b3d      	ldr	r3, [pc, #244]	@ (8008224 <tcp_process+0x53c>)
 800812e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008134:	4a3b      	ldr	r2, [pc, #236]	@ (8008224 <tcp_process+0x53c>)
 8008136:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008138:	8812      	ldrh	r2, [r2, #0]
 800813a:	b292      	uxth	r2, r2
 800813c:	9201      	str	r2, [sp, #4]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	4b39      	ldr	r3, [pc, #228]	@ (8008228 <tcp_process+0x540>)
 8008142:	4a3a      	ldr	r2, [pc, #232]	@ (800822c <tcp_process+0x544>)
 8008144:	f002 fbf2 	bl	800a92c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8008148:	e166      	b.n	8008418 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800814a:	4b32      	ldr	r3, [pc, #200]	@ (8008214 <tcp_process+0x52c>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 8160 	beq.w	8008418 <tcp_process+0x730>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815c:	1e5a      	subs	r2, r3, #1
 800815e:	4b30      	ldr	r3, [pc, #192]	@ (8008220 <tcp_process+0x538>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	f040 8158 	bne.w	8008418 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f002 fc8b 	bl	800aa84 <tcp_rexmit>
    break;
 800816e:	e153      	b.n	8008418 <tcp_process+0x730>
 8008170:	e152      	b.n	8008418 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9e2 	bl	800853c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008178:	4b31      	ldr	r3, [pc, #196]	@ (8008240 <tcp_process+0x558>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 814b 	beq.w	800841c <tcp_process+0x734>
      tcp_ack_now(pcb);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	7e9b      	ldrb	r3, [r3, #26]
 800818a:	f043 0302 	orr.w	r3, r3, #2
 800818e:	b2da      	uxtb	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2207      	movs	r2, #7
 8008198:	751a      	strb	r2, [r3, #20]
    }
    break;
 800819a:	e13f      	b.n	800841c <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f9cd 	bl	800853c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80081a2:	4b27      	ldr	r3, [pc, #156]	@ (8008240 <tcp_process+0x558>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d070      	beq.n	8008290 <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081ae:	4b19      	ldr	r3, [pc, #100]	@ (8008214 <tcp_process+0x52c>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 0310 	and.w	r3, r3, #16
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d05f      	beq.n	800827a <tcp_process+0x592>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081be:	4b16      	ldr	r3, [pc, #88]	@ (8008218 <tcp_process+0x530>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d159      	bne.n	800827a <tcp_process+0x592>
          pcb->unsent == NULL) {
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d155      	bne.n	800827a <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7e9b      	ldrb	r3, [r3, #26]
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fe fee9 	bl	8006fb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80081e2:	4b18      	ldr	r3, [pc, #96]	@ (8008244 <tcp_process+0x55c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d105      	bne.n	80081f8 <tcp_process+0x510>
 80081ec:	4b15      	ldr	r3, [pc, #84]	@ (8008244 <tcp_process+0x55c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	4a14      	ldr	r2, [pc, #80]	@ (8008244 <tcp_process+0x55c>)
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	e02d      	b.n	8008254 <tcp_process+0x56c>
 80081f8:	4b12      	ldr	r3, [pc, #72]	@ (8008244 <tcp_process+0x55c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e026      	b.n	800824e <tcp_process+0x566>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d11e      	bne.n	8008248 <tcp_process+0x560>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	60da      	str	r2, [r3, #12]
 8008212:	e01f      	b.n	8008254 <tcp_process+0x56c>
 8008214:	20007f48 	.word	0x20007f48
 8008218:	20007f40 	.word	0x20007f40
 800821c:	20007f46 	.word	0x20007f46
 8008220:	20007f3c 	.word	0x20007f3c
 8008224:	20007f2c 	.word	0x20007f2c
 8008228:	200049b8 	.word	0x200049b8
 800822c:	200049bc 	.word	0x200049bc
 8008230:	0800f7cc 	.word	0x0800f7cc
 8008234:	0800f9d0 	.word	0x0800f9d0
 8008238:	0800f810 	.word	0x0800f810
 800823c:	20007f44 	.word	0x20007f44
 8008240:	20007f49 	.word	0x20007f49
 8008244:	20007f10 	.word	0x20007f10
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1d5      	bne.n	8008200 <tcp_process+0x518>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	4b77      	ldr	r3, [pc, #476]	@ (8008438 <tcp_process+0x750>)
 800825c:	2201      	movs	r2, #1
 800825e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	220a      	movs	r2, #10
 8008264:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008266:	4b75      	ldr	r3, [pc, #468]	@ (800843c <tcp_process+0x754>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]
 800826e:	4a73      	ldr	r2, [pc, #460]	@ (800843c <tcp_process+0x754>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	f002 fda2 	bl	800adbc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8008278:	e0d2      	b.n	8008420 <tcp_process+0x738>
        tcp_ack_now(pcb);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7e9b      	ldrb	r3, [r3, #26]
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	b2da      	uxtb	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2208      	movs	r2, #8
 800828c:	751a      	strb	r2, [r3, #20]
    break;
 800828e:	e0c7      	b.n	8008420 <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008290:	4b6b      	ldr	r3, [pc, #428]	@ (8008440 <tcp_process+0x758>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 0310 	and.w	r3, r3, #16
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 80c1 	beq.w	8008420 <tcp_process+0x738>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082a2:	4b68      	ldr	r3, [pc, #416]	@ (8008444 <tcp_process+0x75c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	f040 80ba 	bne.w	8008420 <tcp_process+0x738>
               pcb->unsent == NULL) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f040 80b5 	bne.w	8008420 <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2206      	movs	r2, #6
 80082ba:	751a      	strb	r2, [r3, #20]
    break;
 80082bc:	e0b0      	b.n	8008420 <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f93c 	bl	800853c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80082c4:	4b60      	ldr	r3, [pc, #384]	@ (8008448 <tcp_process+0x760>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 80a9 	beq.w	8008424 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	7e9b      	ldrb	r3, [r3, #26]
 80082d6:	f043 0302 	orr.w	r3, r3, #2
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7fe fe67 	bl	8006fb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082e6:	4b59      	ldr	r3, [pc, #356]	@ (800844c <tcp_process+0x764>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d105      	bne.n	80082fc <tcp_process+0x614>
 80082f0:	4b56      	ldr	r3, [pc, #344]	@ (800844c <tcp_process+0x764>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	4a55      	ldr	r2, [pc, #340]	@ (800844c <tcp_process+0x764>)
 80082f8:	6013      	str	r3, [r2, #0]
 80082fa:	e013      	b.n	8008324 <tcp_process+0x63c>
 80082fc:	4b53      	ldr	r3, [pc, #332]	@ (800844c <tcp_process+0x764>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	613b      	str	r3, [r7, #16]
 8008302:	e00c      	b.n	800831e <tcp_process+0x636>
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d104      	bne.n	8008318 <tcp_process+0x630>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e005      	b.n	8008324 <tcp_process+0x63c>
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ef      	bne.n	8008304 <tcp_process+0x61c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	4b43      	ldr	r3, [pc, #268]	@ (8008438 <tcp_process+0x750>)
 800832c:	2201      	movs	r2, #1
 800832e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220a      	movs	r2, #10
 8008334:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8008336:	4b41      	ldr	r3, [pc, #260]	@ (800843c <tcp_process+0x754>)
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	4a3f      	ldr	r2, [pc, #252]	@ (800843c <tcp_process+0x754>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	f002 fd3a 	bl	800adbc <tcp_timer_needed>
    }
    break;
 8008348:	e06c      	b.n	8008424 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8f6 	bl	800853c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008350:	4b3b      	ldr	r3, [pc, #236]	@ (8008440 <tcp_process+0x758>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d065      	beq.n	8008428 <tcp_process+0x740>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008360:	4b38      	ldr	r3, [pc, #224]	@ (8008444 <tcp_process+0x75c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d15f      	bne.n	8008428 <tcp_process+0x740>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800836c:	2b00      	cmp	r3, #0
 800836e:	d15b      	bne.n	8008428 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7fe fe1f 	bl	8006fb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008376:	4b35      	ldr	r3, [pc, #212]	@ (800844c <tcp_process+0x764>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	429a      	cmp	r2, r3
 800837e:	d105      	bne.n	800838c <tcp_process+0x6a4>
 8008380:	4b32      	ldr	r3, [pc, #200]	@ (800844c <tcp_process+0x764>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	4a31      	ldr	r2, [pc, #196]	@ (800844c <tcp_process+0x764>)
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	e013      	b.n	80083b4 <tcp_process+0x6cc>
 800838c:	4b2f      	ldr	r3, [pc, #188]	@ (800844c <tcp_process+0x764>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e00c      	b.n	80083ae <tcp_process+0x6c6>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	429a      	cmp	r2, r3
 800839c:	d104      	bne.n	80083a8 <tcp_process+0x6c0>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	60da      	str	r2, [r3, #12]
 80083a6:	e005      	b.n	80083b4 <tcp_process+0x6cc>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1ef      	bne.n	8008394 <tcp_process+0x6ac>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	60da      	str	r2, [r3, #12]
 80083ba:	4b1f      	ldr	r3, [pc, #124]	@ (8008438 <tcp_process+0x750>)
 80083bc:	2201      	movs	r2, #1
 80083be:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	220a      	movs	r2, #10
 80083c4:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80083c6:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <tcp_process+0x754>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	4a1b      	ldr	r2, [pc, #108]	@ (800843c <tcp_process+0x754>)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	f002 fcf2 	bl	800adbc <tcp_timer_needed>
    }
    break;
 80083d8:	e026      	b.n	8008428 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8ae 	bl	800853c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80083e0:	4b17      	ldr	r3, [pc, #92]	@ (8008440 <tcp_process+0x758>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	f003 0310 	and.w	r3, r3, #16
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01f      	beq.n	800842c <tcp_process+0x744>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083f0:	4b14      	ldr	r3, [pc, #80]	@ (8008444 <tcp_process+0x75c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d119      	bne.n	800842c <tcp_process+0x744>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d115      	bne.n	800842c <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8008400:	4b11      	ldr	r3, [pc, #68]	@ (8008448 <tcp_process+0x760>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	f043 0310 	orr.w	r3, r3, #16
 8008408:	b2da      	uxtb	r2, r3
 800840a:	4b0f      	ldr	r3, [pc, #60]	@ (8008448 <tcp_process+0x760>)
 800840c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800840e:	e00d      	b.n	800842c <tcp_process+0x744>
  default:
    break;
 8008410:	bf00      	nop
 8008412:	e00c      	b.n	800842e <tcp_process+0x746>
    break;
 8008414:	bf00      	nop
 8008416:	e00a      	b.n	800842e <tcp_process+0x746>
    break;
 8008418:	bf00      	nop
 800841a:	e008      	b.n	800842e <tcp_process+0x746>
    break;
 800841c:	bf00      	nop
 800841e:	e006      	b.n	800842e <tcp_process+0x746>
    break;
 8008420:	bf00      	nop
 8008422:	e004      	b.n	800842e <tcp_process+0x746>
    break;
 8008424:	bf00      	nop
 8008426:	e002      	b.n	800842e <tcp_process+0x746>
    break;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <tcp_process+0x746>
    break;
 800842c:	bf00      	nop
  }
  return ERR_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	20007f18 	.word	0x20007f18
 800843c:	20007f14 	.word	0x20007f14
 8008440:	20007f48 	.word	0x20007f48
 8008444:	20007f40 	.word	0x20007f40
 8008448:	20007f49 	.word	0x20007f49
 800844c:	20007f10 	.word	0x20007f10

08008450 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008450:	b590      	push	{r4, r7, lr}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	899b      	ldrh	r3, [r3, #12]
 8008460:	b29b      	uxth	r3, r3
 8008462:	4618      	mov	r0, r3
 8008464:	f7fb ff47 	bl	80042f6 <lwip_htons>
 8008468:	4603      	mov	r3, r0
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d027      	beq.n	80084c2 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008472:	6838      	ldr	r0, [r7, #0]
 8008474:	f7fe fb55 	bl	8006b22 <tcp_segs_free>
    next = NULL;
 8008478:	2300      	movs	r3, #0
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	e055      	b.n	800852a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	899b      	ldrh	r3, [r3, #12]
 8008484:	b29b      	uxth	r3, r3
 8008486:	4618      	mov	r0, r3
 8008488:	f7fb ff35 	bl	80042f6 <lwip_htons>
 800848c:	4603      	mov	r3, r0
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	899b      	ldrh	r3, [r3, #12]
 800849c:	b29c      	uxth	r4, r3
 800849e:	2001      	movs	r0, #1
 80084a0:	f7fb ff29 	bl	80042f6 <lwip_htons>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	4322      	orrs	r2, r4
 80084ae:	b292      	uxth	r2, r2
 80084b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f7fe fb45 	bl	8006b4c <tcp_seg_free>
    while (next &&
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00e      	beq.n	80084e6 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	891b      	ldrh	r3, [r3, #8]
 80084cc:	461a      	mov	r2, r3
 80084ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <tcp_oos_insert_segment+0xe8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	441a      	add	r2, r3
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	8909      	ldrh	r1, [r1, #8]
 80084de:	440b      	add	r3, r1
 80084e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	dacb      	bge.n	800847e <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01e      	beq.n	800852a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	891b      	ldrh	r3, [r3, #8]
 80084f0:	461a      	mov	r2, r3
 80084f2:	4b11      	ldr	r3, [pc, #68]	@ (8008538 <tcp_oos_insert_segment+0xe8>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	441a      	add	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd12      	ble.n	800852a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	b29a      	uxth	r2, r3
 800850c:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <tcp_oos_insert_segment+0xe8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	891b      	ldrh	r3, [r3, #8]
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fc fe83 	bl	8005230 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	601a      	str	r2, [r3, #0]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	bd90      	pop	{r4, r7, pc}
 8008538:	20007f3c 	.word	0x20007f3c

0800853c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800853c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853e:	b08d      	sub	sp, #52	@ 0x34
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	7d1b      	ldrb	r3, [r3, #20]
 800854c:	2b03      	cmp	r3, #3
 800854e:	d806      	bhi.n	800855e <tcp_receive+0x22>
 8008550:	4b98      	ldr	r3, [pc, #608]	@ (80087b4 <tcp_receive+0x278>)
 8008552:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8008556:	4998      	ldr	r1, [pc, #608]	@ (80087b8 <tcp_receive+0x27c>)
 8008558:	4898      	ldr	r0, [pc, #608]	@ (80087bc <tcp_receive+0x280>)
 800855a:	f005 f9ff 	bl	800d95c <iprintf>

  if (flags & TCP_ACK) {
 800855e:	4b98      	ldr	r3, [pc, #608]	@ (80087c0 <tcp_receive+0x284>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 82c1 	beq.w	8008aee <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008572:	461a      	mov	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	4413      	add	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008580:	4b90      	ldr	r3, [pc, #576]	@ (80087c4 <tcp_receive+0x288>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	db1b      	blt.n	80085c2 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858e:	4b8d      	ldr	r3, [pc, #564]	@ (80087c4 <tcp_receive+0x288>)
 8008590:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008592:	429a      	cmp	r2, r3
 8008594:	d106      	bne.n	80085a4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800859a:	4b8b      	ldr	r3, [pc, #556]	@ (80087c8 <tcp_receive+0x28c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	db0e      	blt.n	80085c2 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80085a8:	4b87      	ldr	r3, [pc, #540]	@ (80087c8 <tcp_receive+0x28c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d141      	bne.n	8008634 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80085b0:	4b86      	ldr	r3, [pc, #536]	@ (80087cc <tcp_receive+0x290>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	89db      	ldrh	r3, [r3, #14]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085be:	429a      	cmp	r2, r3
 80085c0:	d938      	bls.n	8008634 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80085c2:	4b82      	ldr	r3, [pc, #520]	@ (80087cc <tcp_receive+0x290>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	89db      	ldrh	r3, [r3, #14]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80085dc:	429a      	cmp	r2, r3
 80085de:	d205      	bcs.n	80085ec <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80085ec:	4b75      	ldr	r3, [pc, #468]	@ (80087c4 <tcp_receive+0x288>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 80085f4:	4b74      	ldr	r3, [pc, #464]	@ (80087c8 <tcp_receive+0x28c>)
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10d      	bne.n	8008622 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800860c:	2b00      	cmp	r3, #0
 800860e:	d111      	bne.n	8008634 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8008620:	e008      	b.n	8008634 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8008628:	2b00      	cmp	r3, #0
 800862a:	d003      	beq.n	8008634 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008634:	4b64      	ldr	r3, [pc, #400]	@ (80087c8 <tcp_receive+0x28c>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	dc53      	bgt.n	80086ea <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8008642:	4b63      	ldr	r3, [pc, #396]	@ (80087d0 <tcp_receive+0x294>)
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d146      	bne.n	80086d8 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008654:	4413      	add	r3, r2
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	429a      	cmp	r2, r3
 800865a:	d13d      	bne.n	80086d8 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008662:	2b00      	cmp	r3, #0
 8008664:	db38      	blt.n	80086d8 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800866a:	4b57      	ldr	r3, [pc, #348]	@ (80087c8 <tcp_receive+0x28c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d132      	bne.n	80086d8 <tcp_receive+0x19c>
              found_dupack = 1;
 8008672:	2301      	movs	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800867c:	2bff      	cmp	r3, #255	@ 0xff
 800867e:	d007      	beq.n	8008690 <tcp_receive+0x154>
                ++pcb->dupacks;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008686:	3301      	adds	r3, #1
 8008688:	b2da      	uxtb	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008696:	2b03      	cmp	r3, #3
 8008698:	d916      	bls.n	80086c8 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80086a4:	4413      	add	r3, r2
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d912      	bls.n	80086d8 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80086bc:	4413      	add	r3, r2
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80086c6:	e007      	b.n	80086d8 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d102      	bne.n	80086d8 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f002 fa26 	bl	800ab24 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 816a 	bne.w	80089b4 <tcp_receive+0x478>
        pcb->dupacks = 0;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80086e8:	e164      	b.n	80089b4 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80086ea:	4b37      	ldr	r3, [pc, #220]	@ (80087c8 <tcp_receive+0x28c>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f2c0 8108 	blt.w	800890c <tcp_receive+0x3d0>
 80086fc:	4b32      	ldr	r3, [pc, #200]	@ (80087c8 <tcp_receive+0x28c>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	f300 8100 	bgt.w	800890c <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	7e9b      	ldrb	r3, [r3, #26]
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7e9b      	ldrb	r3, [r3, #26]
 800871c:	f023 0304 	bic.w	r3, r3, #4
 8008720:	b2da      	uxtb	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008740:	10db      	asrs	r3, r3, #3
 8008742:	b21b      	sxth	r3, r3
 8008744:	b29a      	uxth	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800874c:	b29b      	uxth	r3, r3
 800874e:	4413      	add	r3, r2
 8008750:	b29b      	uxth	r3, r3
 8008752:	b21a      	sxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8008762:	4b19      	ldr	r3, [pc, #100]	@ (80087c8 <tcp_receive+0x28c>)
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	7d1b      	ldrb	r3, [r3, #20]
 800876e:	2b03      	cmp	r3, #3
 8008770:	f240 8095 	bls.w	800889e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8008780:	429a      	cmp	r2, r3
 8008782:	d227      	bcs.n	80087d4 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800878e:	4413      	add	r3, r2
 8008790:	b29a      	uxth	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008798:	429a      	cmp	r2, r3
 800879a:	f240 8080 	bls.w	800889e <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087a8:	4413      	add	r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80087b2:	e074      	b.n	800889e <tcp_receive+0x362>
 80087b4:	0800f7cc 	.word	0x0800f7cc
 80087b8:	0800f9f0 	.word	0x0800f9f0
 80087bc:	0800f810 	.word	0x0800f810
 80087c0:	20007f48 	.word	0x20007f48
 80087c4:	20007f3c 	.word	0x20007f3c
 80087c8:	20007f40 	.word	0x20007f40
 80087cc:	20007f2c 	.word	0x20007f2c
 80087d0:	20007f46 	.word	0x20007f46
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087de:	4619      	mov	r1, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087e4:	fb01 f303 	mul.w	r3, r1, r3
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 80087ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80087fe:	8a7a      	ldrh	r2, [r7, #18]
 8008800:	429a      	cmp	r2, r3
 8008802:	d94c      	bls.n	800889e <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	8a7a      	ldrh	r2, [r7, #18]
 8008808:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800880c:	e047      	b.n	800889e <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008812:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8008824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	4618      	mov	r0, r3
 800882a:	f7fc ff09 	bl	8005640 <pbuf_clen>
 800882e:	4603      	mov	r3, r0
 8008830:	429c      	cmp	r4, r3
 8008832:	d206      	bcs.n	8008842 <tcp_receive+0x306>
 8008834:	4b70      	ldr	r3, [pc, #448]	@ (80089f8 <tcp_receive+0x4bc>)
 8008836:	f240 429e 	movw	r2, #1182	@ 0x49e
 800883a:	4970      	ldr	r1, [pc, #448]	@ (80089fc <tcp_receive+0x4c0>)
 800883c:	4870      	ldr	r0, [pc, #448]	@ (8008a00 <tcp_receive+0x4c4>)
 800883e:	f005 f88d 	bl	800d95c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	4618      	mov	r0, r3
 8008848:	f7fc fefa 	bl	8005640 <pbuf_clen>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008856:	1a9b      	subs	r3, r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8008860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008862:	891a      	ldrh	r2, [r3, #8]
 8008864:	4b67      	ldr	r3, [pc, #412]	@ (8008a04 <tcp_receive+0x4c8>)
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	4413      	add	r3, r2
 800886a:	b29a      	uxth	r2, r3
 800886c:	4b65      	ldr	r3, [pc, #404]	@ (8008a04 <tcp_receive+0x4c8>)
 800886e:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8008870:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008872:	f7fe f96b 	bl	8006b4c <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10a      	bne.n	800889e <tcp_receive+0x362>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800888c:	2b00      	cmp	r3, #0
 800888e:	d106      	bne.n	800889e <tcp_receive+0x362>
 8008890:	4b59      	ldr	r3, [pc, #356]	@ (80089f8 <tcp_receive+0x4bc>)
 8008892:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8008896:	495c      	ldr	r1, [pc, #368]	@ (8008a08 <tcp_receive+0x4cc>)
 8008898:	4859      	ldr	r0, [pc, #356]	@ (8008a00 <tcp_receive+0x4c4>)
 800889a:	f005 f85f 	bl	800d95c <iprintf>
      while (pcb->unacked != NULL &&
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d022      	beq.n	80088ec <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fb fd2e 	bl	8004310 <lwip_htonl>
 80088b4:	4604      	mov	r4, r0
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ba:	891b      	ldrh	r3, [r3, #8]
 80088bc:	461d      	mov	r5, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	899b      	ldrh	r3, [r3, #12]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fb fd14 	bl	80042f6 <lwip_htons>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <tcp_receive+0x3a0>
 80088d8:	2301      	movs	r3, #1
 80088da:	e000      	b.n	80088de <tcp_receive+0x3a2>
 80088dc:	2300      	movs	r3, #0
 80088de:	442b      	add	r3, r5
 80088e0:	18e2      	adds	r2, r4, r3
 80088e2:	4b4a      	ldr	r3, [pc, #296]	@ (8008a0c <tcp_receive+0x4d0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dd90      	ble.n	800880e <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d104      	bne.n	80088fe <tcp_receive+0x3c2>
        pcb->rtime = -1;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80088fa:	861a      	strh	r2, [r3, #48]	@ 0x30
 80088fc:	e002      	b.n	8008904 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	76da      	strb	r2, [r3, #27]
 800890a:	e002      	b.n	8008912 <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 fd2d 	bl	800a36c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8008912:	e04f      	b.n	80089b4 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008928:	2b00      	cmp	r3, #0
 800892a:	d103      	bne.n	8008934 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 800893a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	4618      	mov	r0, r3
 8008940:	f7fc fe7e 	bl	8005640 <pbuf_clen>
 8008944:	4603      	mov	r3, r0
 8008946:	429c      	cmp	r4, r3
 8008948:	d206      	bcs.n	8008958 <tcp_receive+0x41c>
 800894a:	4b2b      	ldr	r3, [pc, #172]	@ (80089f8 <tcp_receive+0x4bc>)
 800894c:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008950:	492a      	ldr	r1, [pc, #168]	@ (80089fc <tcp_receive+0x4c0>)
 8008952:	482b      	ldr	r0, [pc, #172]	@ (8008a00 <tcp_receive+0x4c4>)
 8008954:	f005 f802 	bl	800d95c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4618      	mov	r0, r3
 800895e:	f7fc fe6f 	bl	8005640 <pbuf_clen>
 8008962:	4603      	mov	r3, r0
 8008964:	461a      	mov	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800896c:	1a9b      	subs	r3, r3, r2
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8008976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008978:	891a      	ldrh	r2, [r3, #8]
 800897a:	4b22      	ldr	r3, [pc, #136]	@ (8008a04 <tcp_receive+0x4c8>)
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	4413      	add	r3, r2
 8008980:	b29a      	uxth	r2, r3
 8008982:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <tcp_receive+0x4c8>)
 8008984:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008988:	f7fe f8e0 	bl	8006b4c <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <tcp_receive+0x478>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <tcp_receive+0x478>
 80089a6:	4b14      	ldr	r3, [pc, #80]	@ (80089f8 <tcp_receive+0x4bc>)
 80089a8:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 80089ac:	4916      	ldr	r1, [pc, #88]	@ (8008a08 <tcp_receive+0x4cc>)
 80089ae:	4814      	ldr	r0, [pc, #80]	@ (8008a00 <tcp_receive+0x4c4>)
 80089b0:	f004 ffd4 	bl	800d95c <iprintf>
    while (pcb->unsent != NULL &&
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d037      	beq.n	8008a2c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80089bc:	4b13      	ldr	r3, [pc, #76]	@ (8008a0c <tcp_receive+0x4d0>)
 80089be:	681c      	ldr	r4, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fb fca1 	bl	8004310 <lwip_htonl>
 80089ce:	4605      	mov	r5, r0
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089d4:	891b      	ldrh	r3, [r3, #8]
 80089d6:	461e      	mov	r6, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	899b      	ldrh	r3, [r3, #12]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fb fc87 	bl	80042f6 <lwip_htons>
 80089e8:	4603      	mov	r3, r0
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00e      	beq.n	8008a10 <tcp_receive+0x4d4>
 80089f2:	2301      	movs	r3, #1
 80089f4:	e00d      	b.n	8008a12 <tcp_receive+0x4d6>
 80089f6:	bf00      	nop
 80089f8:	0800f7cc 	.word	0x0800f7cc
 80089fc:	0800fa0c 	.word	0x0800fa0c
 8008a00:	0800f810 	.word	0x0800f810
 8008a04:	20007f44 	.word	0x20007f44
 8008a08:	0800fa34 	.word	0x0800fa34
 8008a0c:	20007f40 	.word	0x20007f40
 8008a10:	2300      	movs	r3, #0
 8008a12:	4433      	add	r3, r6
 8008a14:	442b      	add	r3, r5
 8008a16:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	db07      	blt.n	8008a2c <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008a1c:	4b8d      	ldr	r3, [pc, #564]	@ (8008c54 <tcp_receive+0x718>)
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f77f af74 	ble.w	8008914 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008a32:	4b89      	ldr	r3, [pc, #548]	@ (8008c58 <tcp_receive+0x71c>)
 8008a34:	881b      	ldrh	r3, [r3, #0]
 8008a36:	4413      	add	r3, r2
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d052      	beq.n	8008aee <tcp_receive+0x5b2>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a4c:	4b81      	ldr	r3, [pc, #516]	@ (8008c54 <tcp_receive+0x718>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	da4b      	bge.n	8008aee <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008a56:	4b81      	ldr	r3, [pc, #516]	@ (8008c5c <tcp_receive+0x720>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008a68:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a70:	10db      	asrs	r3, r3, #3
 8008a72:	b21b      	sxth	r3, r3
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a86:	4413      	add	r3, r2
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	b21a      	sxth	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8008a90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	da03      	bge.n	8008aa0 <tcp_receive+0x564>
        m = -m;
 8008a98:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a9a:	425b      	negs	r3, r3
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8008aa0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008aa8:	109b      	asrs	r3, r3, #2
 8008aaa:	b21b      	sxth	r3, r3
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008abe:	4413      	add	r3, r2
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b21a      	sxth	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008ace:	10db      	asrs	r3, r3, #3
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	4413      	add	r3, r2
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	b21a      	sxth	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008aee:	4b5c      	ldr	r3, [pc, #368]	@ (8008c60 <tcp_receive+0x724>)
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 84f1 	beq.w	80094da <tcp_receive+0xf9e>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	7d1b      	ldrb	r3, [r3, #20]
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	f200 84ec 	bhi.w	80094da <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b06:	4b57      	ldr	r3, [pc, #348]	@ (8008c64 <tcp_receive+0x728>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f2c0 80b8 	blt.w	8008c84 <tcp_receive+0x748>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b18:	4b51      	ldr	r3, [pc, #324]	@ (8008c60 <tcp_receive+0x724>)
 8008b1a:	881b      	ldrh	r3, [r3, #0]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4b51      	ldr	r3, [pc, #324]	@ (8008c64 <tcp_receive+0x728>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	440b      	add	r3, r1
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	3301      	adds	r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f300 80ab 	bgt.w	8008c84 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008b2e:	4b4e      	ldr	r3, [pc, #312]	@ (8008c68 <tcp_receive+0x72c>)
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b38:	4b4a      	ldr	r3, [pc, #296]	@ (8008c64 <tcp_receive+0x728>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008b40:	4b49      	ldr	r3, [pc, #292]	@ (8008c68 <tcp_receive+0x72c>)
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d106      	bne.n	8008b56 <tcp_receive+0x61a>
 8008b48:	4b48      	ldr	r3, [pc, #288]	@ (8008c6c <tcp_receive+0x730>)
 8008b4a:	f240 523c 	movw	r2, #1340	@ 0x53c
 8008b4e:	4948      	ldr	r1, [pc, #288]	@ (8008c70 <tcp_receive+0x734>)
 8008b50:	4848      	ldr	r0, [pc, #288]	@ (8008c74 <tcp_receive+0x738>)
 8008b52:	f004 ff03 	bl	800d95c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	dd06      	ble.n	8008b6e <tcp_receive+0x632>
 8008b60:	4b42      	ldr	r3, [pc, #264]	@ (8008c6c <tcp_receive+0x730>)
 8008b62:	f240 523d 	movw	r2, #1341	@ 0x53d
 8008b66:	4944      	ldr	r1, [pc, #272]	@ (8008c78 <tcp_receive+0x73c>)
 8008b68:	4842      	ldr	r0, [pc, #264]	@ (8008c74 <tcp_receive+0x738>)
 8008b6a:	f004 fef7 	bl	800d95c <iprintf>
      if (inseg.p->len < off) {
 8008b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008c68 <tcp_receive+0x72c>)
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	895b      	ldrh	r3, [r3, #10]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	dd3e      	ble.n	8008bfa <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8008c68 <tcp_receive+0x72c>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	891b      	ldrh	r3, [r3, #8]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b86:	4293      	cmp	r3, r2
 8008b88:	dd06      	ble.n	8008b98 <tcp_receive+0x65c>
 8008b8a:	4b38      	ldr	r3, [pc, #224]	@ (8008c6c <tcp_receive+0x730>)
 8008b8c:	f240 523f 	movw	r2, #1343	@ 0x53f
 8008b90:	493a      	ldr	r1, [pc, #232]	@ (8008c7c <tcp_receive+0x740>)
 8008b92:	4838      	ldr	r0, [pc, #224]	@ (8008c74 <tcp_receive+0x738>)
 8008b94:	f004 fee2 	bl	800d95c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008b98:	4b33      	ldr	r3, [pc, #204]	@ (8008c68 <tcp_receive+0x72c>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	891a      	ldrh	r2, [r3, #8]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8008ba6:	e00e      	b.n	8008bc6 <tcp_receive+0x68a>
          off -= p->len;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	895b      	ldrh	r3, [r3, #10]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	8a3a      	ldrh	r2, [r7, #16]
 8008bb8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	895b      	ldrh	r3, [r3, #10]
 8008bca:	461a      	mov	r2, r3
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	dcea      	bgt.n	8008ba8 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	425b      	negs	r3, r3
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	b21b      	sxth	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	69b8      	ldr	r0, [r7, #24]
 8008be0:	f7fc fc76 	bl	80054d0 <pbuf_header>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d01c      	beq.n	8008c24 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008bea:	4b20      	ldr	r3, [pc, #128]	@ (8008c6c <tcp_receive+0x730>)
 8008bec:	f240 524c 	movw	r2, #1356	@ 0x54c
 8008bf0:	4923      	ldr	r1, [pc, #140]	@ (8008c80 <tcp_receive+0x744>)
 8008bf2:	4820      	ldr	r0, [pc, #128]	@ (8008c74 <tcp_receive+0x738>)
 8008bf4:	f004 feb2 	bl	800d95c <iprintf>
 8008bf8:	e014      	b.n	8008c24 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8008c68 <tcp_receive+0x72c>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c00:	b292      	uxth	r2, r2
 8008c02:	4252      	negs	r2, r2
 8008c04:	b292      	uxth	r2, r2
 8008c06:	b212      	sxth	r2, r2
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7fc fc60 	bl	80054d0 <pbuf_header>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d006      	beq.n	8008c24 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008c16:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <tcp_receive+0x730>)
 8008c18:	f240 5251 	movw	r2, #1361	@ 0x551
 8008c1c:	4918      	ldr	r1, [pc, #96]	@ (8008c80 <tcp_receive+0x744>)
 8008c1e:	4815      	ldr	r0, [pc, #84]	@ (8008c74 <tcp_receive+0x738>)
 8008c20:	f004 fe9c 	bl	800d95c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008c24:	4b10      	ldr	r3, [pc, #64]	@ (8008c68 <tcp_receive+0x72c>)
 8008c26:	891a      	ldrh	r2, [r3, #8]
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <tcp_receive+0x728>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	b299      	uxth	r1, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	1acb      	subs	r3, r1, r3
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	4413      	add	r3, r2
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c68 <tcp_receive+0x72c>)
 8008c3e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c44:	4a07      	ldr	r2, [pc, #28]	@ (8008c64 <tcp_receive+0x728>)
 8008c46:	6013      	str	r3, [r2, #0]
 8008c48:	4b07      	ldr	r3, [pc, #28]	@ (8008c68 <tcp_receive+0x72c>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	4a05      	ldr	r2, [pc, #20]	@ (8008c64 <tcp_receive+0x728>)
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008c52:	e025      	b.n	8008ca0 <tcp_receive+0x764>
 8008c54:	20007f40 	.word	0x20007f40
 8008c58:	20007f44 	.word	0x20007f44
 8008c5c:	20007f04 	.word	0x20007f04
 8008c60:	20007f46 	.word	0x20007f46
 8008c64:	20007f3c 	.word	0x20007f3c
 8008c68:	20007f1c 	.word	0x20007f1c
 8008c6c:	0800f7cc 	.word	0x0800f7cc
 8008c70:	0800fa54 	.word	0x0800fa54
 8008c74:	0800f810 	.word	0x0800f810
 8008c78:	0800fa64 	.word	0x0800fa64
 8008c7c:	0800fa74 	.word	0x0800fa74
 8008c80:	0800fa84 	.word	0x0800fa84
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008c84:	4b87      	ldr	r3, [pc, #540]	@ (8008ea4 <tcp_receive+0x968>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da06      	bge.n	8008ca0 <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7e9b      	ldrb	r3, [r3, #26]
 8008c96:	f043 0302 	orr.w	r3, r3, #2
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ca0:	4b80      	ldr	r3, [pc, #512]	@ (8008ea4 <tcp_receive+0x968>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f2c0 8410 	blt.w	80094d0 <tcp_receive+0xf94>
 8008cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8008ea4 <tcp_receive+0x968>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	6879      	ldr	r1, [r7, #4]
 8008cba:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008cbc:	440b      	add	r3, r1
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f300 8404 	bgt.w	80094d0 <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ccc:	4b75      	ldr	r3, [pc, #468]	@ (8008ea4 <tcp_receive+0x968>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	f040 8287 	bne.w	80091e4 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008cd6:	4b74      	ldr	r3, [pc, #464]	@ (8008ea8 <tcp_receive+0x96c>)
 8008cd8:	891c      	ldrh	r4, [r3, #8]
 8008cda:	4b73      	ldr	r3, [pc, #460]	@ (8008ea8 <tcp_receive+0x96c>)
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	899b      	ldrh	r3, [r3, #12]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fb fb07 	bl	80042f6 <lwip_htons>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <tcp_receive+0x7ba>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <tcp_receive+0x7bc>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	4423      	add	r3, r4
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	4b6b      	ldr	r3, [pc, #428]	@ (8008eac <tcp_receive+0x970>)
 8008cfe:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008d04:	4b69      	ldr	r3, [pc, #420]	@ (8008eac <tcp_receive+0x970>)
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d26e      	bcs.n	8008dea <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008d0c:	4b66      	ldr	r3, [pc, #408]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	899b      	ldrh	r3, [r3, #12]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7fb faee 	bl	80042f6 <lwip_htons>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01b      	beq.n	8008d5c <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008d24:	4b60      	ldr	r3, [pc, #384]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	899b      	ldrh	r3, [r3, #12]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008d30:	b29c      	uxth	r4, r3
 8008d32:	4b5d      	ldr	r3, [pc, #372]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	899b      	ldrh	r3, [r3, #12]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fb fadb 	bl	80042f6 <lwip_htons>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fb fad4 	bl	80042f6 <lwip_htons>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	4b55      	ldr	r3, [pc, #340]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	4322      	orrs	r2, r4
 8008d58:	b292      	uxth	r2, r2
 8008d5a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008d60:	4b51      	ldr	r3, [pc, #324]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d62:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008d64:	4b50      	ldr	r3, [pc, #320]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	899b      	ldrh	r3, [r3, #12]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fb fac2 	bl	80042f6 <lwip_htons>
 8008d72:	4603      	mov	r3, r0
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <tcp_receive+0x84c>
            inseg.len -= 1;
 8008d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d7e:	891b      	ldrh	r3, [r3, #8]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	4b48      	ldr	r3, [pc, #288]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d86:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008d88:	4b47      	ldr	r3, [pc, #284]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	4a46      	ldr	r2, [pc, #280]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d8e:	8912      	ldrh	r2, [r2, #8]
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fc fa4c 	bl	8005230 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008d98:	4b43      	ldr	r3, [pc, #268]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d9a:	891c      	ldrh	r4, [r3, #8]
 8008d9c:	4b42      	ldr	r3, [pc, #264]	@ (8008ea8 <tcp_receive+0x96c>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	899b      	ldrh	r3, [r3, #12]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fb faa6 	bl	80042f6 <lwip_htons>
 8008daa:	4603      	mov	r3, r0
 8008dac:	f003 0303 	and.w	r3, r3, #3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d001      	beq.n	8008db8 <tcp_receive+0x87c>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <tcp_receive+0x87e>
 8008db8:	2300      	movs	r3, #0
 8008dba:	4423      	add	r3, r4
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8008eac <tcp_receive+0x970>)
 8008dc0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008eac <tcp_receive+0x970>)
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	4b36      	ldr	r3, [pc, #216]	@ (8008ea4 <tcp_receive+0x968>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	441a      	add	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8008dd6:	440b      	add	r3, r1
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d006      	beq.n	8008dea <tcp_receive+0x8ae>
 8008ddc:	4b34      	ldr	r3, [pc, #208]	@ (8008eb0 <tcp_receive+0x974>)
 8008dde:	f240 527e 	movw	r2, #1406	@ 0x57e
 8008de2:	4934      	ldr	r1, [pc, #208]	@ (8008eb4 <tcp_receive+0x978>)
 8008de4:	4834      	ldr	r0, [pc, #208]	@ (8008eb8 <tcp_receive+0x97c>)
 8008de6:	f004 fdb9 	bl	800d95c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80e1 	beq.w	8008fb6 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008df4:	4b2c      	ldr	r3, [pc, #176]	@ (8008ea8 <tcp_receive+0x96c>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	899b      	ldrh	r3, [r3, #12]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fb fa7a 	bl	80042f6 <lwip_htons>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d010      	beq.n	8008e2e <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008e0c:	e00a      	b.n	8008e24 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e12:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 8008e1e:	68b8      	ldr	r0, [r7, #8]
 8008e20:	f7fd fe94 	bl	8006b4c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f0      	bne.n	8008e0e <tcp_receive+0x8d2>
 8008e2c:	e0c3      	b.n	8008fb6 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008e34:	e04f      	b.n	8008ed6 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	899b      	ldrh	r3, [r3, #12]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fb fa59 	bl	80042f6 <lwip_htons>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d03b      	beq.n	8008ec6 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008e4e:	4b16      	ldr	r3, [pc, #88]	@ (8008ea8 <tcp_receive+0x96c>)
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	899b      	ldrh	r3, [r3, #12]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fb fa4d 	bl	80042f6 <lwip_htons>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d12f      	bne.n	8008ec6 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008e66:	4b10      	ldr	r3, [pc, #64]	@ (8008ea8 <tcp_receive+0x96c>)
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	899b      	ldrh	r3, [r3, #12]
 8008e6c:	b29c      	uxth	r4, r3
 8008e6e:	2001      	movs	r0, #1
 8008e70:	f7fb fa41 	bl	80042f6 <lwip_htons>
 8008e74:	4603      	mov	r3, r0
 8008e76:	461a      	mov	r2, r3
 8008e78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea8 <tcp_receive+0x96c>)
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	4322      	orrs	r2, r4
 8008e7e:	b292      	uxth	r2, r2
 8008e80:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008e82:	4b09      	ldr	r3, [pc, #36]	@ (8008ea8 <tcp_receive+0x96c>)
 8008e84:	891c      	ldrh	r4, [r3, #8]
 8008e86:	4b08      	ldr	r3, [pc, #32]	@ (8008ea8 <tcp_receive+0x96c>)
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	899b      	ldrh	r3, [r3, #12]
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fb fa31 	bl	80042f6 <lwip_htons>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f003 0303 	and.w	r3, r3, #3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00e      	beq.n	8008ebc <tcp_receive+0x980>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e00d      	b.n	8008ebe <tcp_receive+0x982>
 8008ea2:	bf00      	nop
 8008ea4:	20007f3c 	.word	0x20007f3c
 8008ea8:	20007f1c 	.word	0x20007f1c
 8008eac:	20007f46 	.word	0x20007f46
 8008eb0:	0800f7cc 	.word	0x0800f7cc
 8008eb4:	0800fa98 	.word	0x0800fa98
 8008eb8:	0800f810 	.word	0x0800f810
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4423      	add	r3, r4
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	4b95      	ldr	r3, [pc, #596]	@ (8009118 <tcp_receive+0xbdc>)
 8008ec4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8008ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 8008eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed2:	f7fd fe3b 	bl	8006b4c <tcp_seg_free>
            while (next &&
 8008ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00e      	beq.n	8008efa <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008edc:	4b8e      	ldr	r3, [pc, #568]	@ (8009118 <tcp_receive+0xbdc>)
 8008ede:	881b      	ldrh	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b8e      	ldr	r3, [pc, #568]	@ (800911c <tcp_receive+0xbe0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	441a      	add	r2, r3
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ef0:	8909      	ldrh	r1, [r1, #8]
 8008ef2:	440b      	add	r3, r1
 8008ef4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	da9d      	bge.n	8008e36 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d057      	beq.n	8008fb0 <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 8008f00:	4b85      	ldr	r3, [pc, #532]	@ (8009118 <tcp_receive+0xbdc>)
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	4b85      	ldr	r3, [pc, #532]	@ (800911c <tcp_receive+0xbe0>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	441a      	add	r2, r3
 8008f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dd4b      	ble.n	8008fb0 <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	4b7e      	ldr	r3, [pc, #504]	@ (800911c <tcp_receive+0xbe0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8009120 <tcp_receive+0xbe4>)
 8008f2c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8009120 <tcp_receive+0xbe4>)
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	899b      	ldrh	r3, [r3, #12]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fb f9dd 	bl	80042f6 <lwip_htons>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <tcp_receive+0xa16>
                inseg.len -= 1;
 8008f46:	4b76      	ldr	r3, [pc, #472]	@ (8009120 <tcp_receive+0xbe4>)
 8008f48:	891b      	ldrh	r3, [r3, #8]
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29a      	uxth	r2, r3
 8008f4e:	4b74      	ldr	r3, [pc, #464]	@ (8009120 <tcp_receive+0xbe4>)
 8008f50:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008f52:	4b73      	ldr	r3, [pc, #460]	@ (8009120 <tcp_receive+0xbe4>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	4a72      	ldr	r2, [pc, #456]	@ (8009120 <tcp_receive+0xbe4>)
 8008f58:	8912      	ldrh	r2, [r2, #8]
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fc f967 	bl	8005230 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008f62:	4b6f      	ldr	r3, [pc, #444]	@ (8009120 <tcp_receive+0xbe4>)
 8008f64:	891c      	ldrh	r4, [r3, #8]
 8008f66:	4b6e      	ldr	r3, [pc, #440]	@ (8009120 <tcp_receive+0xbe4>)
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	899b      	ldrh	r3, [r3, #12]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fb f9c1 	bl	80042f6 <lwip_htons>
 8008f74:	4603      	mov	r3, r0
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <tcp_receive+0xa46>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <tcp_receive+0xa48>
 8008f82:	2300      	movs	r3, #0
 8008f84:	4423      	add	r3, r4
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	4b63      	ldr	r3, [pc, #396]	@ (8009118 <tcp_receive+0xbdc>)
 8008f8a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008f8c:	4b62      	ldr	r3, [pc, #392]	@ (8009118 <tcp_receive+0xbdc>)
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	461a      	mov	r2, r3
 8008f92:	4b62      	ldr	r3, [pc, #392]	@ (800911c <tcp_receive+0xbe0>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	441a      	add	r2, r3
 8008f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d006      	beq.n	8008fb0 <tcp_receive+0xa74>
 8008fa2:	4b60      	ldr	r3, [pc, #384]	@ (8009124 <tcp_receive+0xbe8>)
 8008fa4:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8008fa8:	495f      	ldr	r1, [pc, #380]	@ (8009128 <tcp_receive+0xbec>)
 8008faa:	4860      	ldr	r0, [pc, #384]	@ (800912c <tcp_receive+0xbf0>)
 8008fac:	f004 fcd6 	bl	800d95c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb4:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008fb6:	4b58      	ldr	r3, [pc, #352]	@ (8009118 <tcp_receive+0xbdc>)
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	4b57      	ldr	r3, [pc, #348]	@ (800911c <tcp_receive+0xbe0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008fca:	4b53      	ldr	r3, [pc, #332]	@ (8009118 <tcp_receive+0xbdc>)
 8008fcc:	881b      	ldrh	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d206      	bcs.n	8008fe0 <tcp_receive+0xaa4>
 8008fd2:	4b54      	ldr	r3, [pc, #336]	@ (8009124 <tcp_receive+0xbe8>)
 8008fd4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8008fd8:	4955      	ldr	r1, [pc, #340]	@ (8009130 <tcp_receive+0xbf4>)
 8008fda:	4854      	ldr	r0, [pc, #336]	@ (800912c <tcp_receive+0xbf0>)
 8008fdc:	f004 fcbe 	bl	800d95c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8009118 <tcp_receive+0xbdc>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7fd f825 	bl	8006040 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8009120 <tcp_receive+0xbe4>)
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	891b      	ldrh	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d006      	beq.n	800900e <tcp_receive+0xad2>
          recv_data = inseg.p;
 8009000:	4b47      	ldr	r3, [pc, #284]	@ (8009120 <tcp_receive+0xbe4>)
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4a4b      	ldr	r2, [pc, #300]	@ (8009134 <tcp_receive+0xbf8>)
 8009006:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009008:	4b45      	ldr	r3, [pc, #276]	@ (8009120 <tcp_receive+0xbe4>)
 800900a:	2200      	movs	r2, #0
 800900c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800900e:	4b44      	ldr	r3, [pc, #272]	@ (8009120 <tcp_receive+0xbe4>)
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	899b      	ldrh	r3, [r3, #12]
 8009014:	b29b      	uxth	r3, r3
 8009016:	4618      	mov	r0, r3
 8009018:	f7fb f96d 	bl	80042f6 <lwip_htons>
 800901c:	4603      	mov	r3, r0
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80b4 	beq.w	8009190 <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009028:	4b43      	ldr	r3, [pc, #268]	@ (8009138 <tcp_receive+0xbfc>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	f043 0320 	orr.w	r3, r3, #32
 8009030:	b2da      	uxtb	r2, r3
 8009032:	4b41      	ldr	r3, [pc, #260]	@ (8009138 <tcp_receive+0xbfc>)
 8009034:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009036:	e0ab      	b.n	8009190 <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4a35      	ldr	r2, [pc, #212]	@ (800911c <tcp_receive+0xbe0>)
 8009048:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	891b      	ldrh	r3, [r3, #8]
 800904e:	461c      	mov	r4, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	899b      	ldrh	r3, [r3, #12]
 8009056:	b29b      	uxth	r3, r3
 8009058:	4618      	mov	r0, r3
 800905a:	f7fb f94c 	bl	80042f6 <lwip_htons>
 800905e:	4603      	mov	r3, r0
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <tcp_receive+0xb30>
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <tcp_receive+0xb32>
 800906c:	2300      	movs	r3, #0
 800906e:	191a      	adds	r2, r3, r4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009074:	441a      	add	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800907e:	461c      	mov	r4, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	891b      	ldrh	r3, [r3, #8]
 8009084:	461d      	mov	r5, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	899b      	ldrh	r3, [r3, #12]
 800908c:	b29b      	uxth	r3, r3
 800908e:	4618      	mov	r0, r3
 8009090:	f7fb f931 	bl	80042f6 <lwip_htons>
 8009094:	4603      	mov	r3, r0
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <tcp_receive+0xb66>
 800909e:	2301      	movs	r3, #1
 80090a0:	e000      	b.n	80090a4 <tcp_receive+0xb68>
 80090a2:	2300      	movs	r3, #0
 80090a4:	442b      	add	r3, r5
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d206      	bcs.n	80090b8 <tcp_receive+0xb7c>
 80090aa:	4b1e      	ldr	r3, [pc, #120]	@ (8009124 <tcp_receive+0xbe8>)
 80090ac:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 80090b0:	4922      	ldr	r1, [pc, #136]	@ (800913c <tcp_receive+0xc00>)
 80090b2:	481e      	ldr	r0, [pc, #120]	@ (800912c <tcp_receive+0xbf0>)
 80090b4:	f004 fc52 	bl	800d95c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	891b      	ldrh	r3, [r3, #8]
 80090bc:	461c      	mov	r4, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	899b      	ldrh	r3, [r3, #12]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fb f915 	bl	80042f6 <lwip_htons>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <tcp_receive+0xb9e>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <tcp_receive+0xba0>
 80090da:	2300      	movs	r3, #0
 80090dc:	1919      	adds	r1, r3, r4
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80090e2:	b28b      	uxth	r3, r1
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7fc ffa7 	bl	8006040 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	891b      	ldrh	r3, [r3, #8]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d028      	beq.n	800914e <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80090fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009134 <tcp_receive+0xbf8>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d01d      	beq.n	8009140 <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8009104:	4b0b      	ldr	r3, [pc, #44]	@ (8009134 <tcp_receive+0xbf8>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fc face 	bl	80056b0 <pbuf_cat>
 8009114:	e018      	b.n	8009148 <tcp_receive+0xc0c>
 8009116:	bf00      	nop
 8009118:	20007f46 	.word	0x20007f46
 800911c:	20007f3c 	.word	0x20007f3c
 8009120:	20007f1c 	.word	0x20007f1c
 8009124:	0800f7cc 	.word	0x0800f7cc
 8009128:	0800fad0 	.word	0x0800fad0
 800912c:	0800f810 	.word	0x0800f810
 8009130:	0800fb0c 	.word	0x0800fb0c
 8009134:	20007f4c 	.word	0x20007f4c
 8009138:	20007f49 	.word	0x20007f49
 800913c:	0800fb2c 	.word	0x0800fb2c
            } else {
              recv_data = cseg->p;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	4a71      	ldr	r2, [pc, #452]	@ (800930c <tcp_receive+0xdd0>)
 8009146:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	899b      	ldrh	r3, [r3, #12]
 8009154:	b29b      	uxth	r3, r3
 8009156:	4618      	mov	r0, r3
 8009158:	f7fb f8cd 	bl	80042f6 <lwip_htons>
 800915c:	4603      	mov	r3, r0
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00d      	beq.n	8009182 <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009166:	4b6a      	ldr	r3, [pc, #424]	@ (8009310 <tcp_receive+0xdd4>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	f043 0320 	orr.w	r3, r3, #32
 800916e:	b2da      	uxtb	r2, r3
 8009170:	4b67      	ldr	r3, [pc, #412]	@ (8009310 <tcp_receive+0xdd4>)
 8009172:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	7d1b      	ldrb	r3, [r3, #20]
 8009178:	2b04      	cmp	r3, #4
 800917a:	d102      	bne.n	8009182 <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2207      	movs	r2, #7
 8009180:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7fd fcde 	bl	8006b4c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009194:	2b00      	cmp	r3, #0
 8009196:	d008      	beq.n	80091aa <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80091a4:	429a      	cmp	r2, r3
 80091a6:	f43f af47 	beq.w	8009038 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7e9b      	ldrb	r3, [r3, #26]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00e      	beq.n	80091d4 <tcp_receive+0xc98>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	7e9b      	ldrb	r3, [r3, #26]
 80091ba:	f023 0301 	bic.w	r3, r3, #1
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	769a      	strb	r2, [r3, #26]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7e9b      	ldrb	r3, [r3, #26]
 80091c8:	f043 0302 	orr.w	r3, r3, #2
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80091d2:	e181      	b.n	80094d8 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	7e9b      	ldrb	r3, [r3, #26]
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80091e2:	e179      	b.n	80094d8 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f8c1 	bl	800a36c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80091f2:	4848      	ldr	r0, [pc, #288]	@ (8009314 <tcp_receive+0xdd8>)
 80091f4:	f7fd fcc2 	bl	8006b7c <tcp_seg_copy>
 80091f8:	4602      	mov	r2, r0
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 80091fe:	e16b      	b.n	80094d8 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8009200:	2300      	movs	r3, #0
 8009202:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800920a:	e150      	b.n	80094ae <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800920c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	685a      	ldr	r2, [r3, #4]
 8009212:	4b41      	ldr	r3, [pc, #260]	@ (8009318 <tcp_receive+0xddc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d11d      	bne.n	8009256 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800921a:	4b3e      	ldr	r3, [pc, #248]	@ (8009314 <tcp_receive+0xdd8>)
 800921c:	891a      	ldrh	r2, [r3, #8]
 800921e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009220:	891b      	ldrh	r3, [r3, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	f240 8148 	bls.w	80094b8 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8009228:	483a      	ldr	r0, [pc, #232]	@ (8009314 <tcp_receive+0xdd8>)
 800922a:	f7fd fca7 	bl	8006b7c <tcp_seg_copy>
 800922e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8142 	beq.w	80094bc <tcp_receive+0xf80>
                  if (prev != NULL) {
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	e002      	b.n	800924c <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800924c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f7ff f8fe 	bl	8008450 <tcp_oos_insert_segment>
                }
                break;
 8009254:	e132      	b.n	80094bc <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009258:	2b00      	cmp	r3, #0
 800925a:	d117      	bne.n	800928c <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800925c:	4b2e      	ldr	r3, [pc, #184]	@ (8009318 <tcp_receive+0xddc>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	da57      	bge.n	800931c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800926c:	4829      	ldr	r0, [pc, #164]	@ (8009314 <tcp_receive+0xdd8>)
 800926e:	f7fd fc85 	bl	8006b7c <tcp_seg_copy>
 8009272:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 8122 	beq.w	80094c0 <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 8009282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff f8e3 	bl	8008450 <tcp_oos_insert_segment>
                  }
                  break;
 800928a:	e119      	b.n	80094c0 <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800928c:	4b22      	ldr	r3, [pc, #136]	@ (8009318 <tcp_receive+0xddc>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	db3e      	blt.n	800931c <tcp_receive+0xde0>
 800929e:	4b1e      	ldr	r3, [pc, #120]	@ (8009318 <tcp_receive+0xddc>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	3301      	adds	r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	dc35      	bgt.n	800931c <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80092b0:	4818      	ldr	r0, [pc, #96]	@ (8009314 <tcp_receive+0xdd8>)
 80092b2:	f7fd fc63 	bl	8006b7c <tcp_seg_copy>
 80092b6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8102 	beq.w	80094c4 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092c8:	8912      	ldrh	r2, [r2, #8]
 80092ca:	441a      	add	r2, r3
 80092cc:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <tcp_receive+0xddc>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	dd12      	ble.n	80092fc <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80092d6:	4b10      	ldr	r3, [pc, #64]	@ (8009318 <tcp_receive+0xddc>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80092ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f2:	891b      	ldrh	r3, [r3, #8]
 80092f4:	4619      	mov	r1, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	f7fb ff9a 	bl	8005230 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80092fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f7ff f8a3 	bl	8008450 <tcp_oos_insert_segment>
                  }
                  break;
 800930a:	e0db      	b.n	80094c4 <tcp_receive+0xf88>
 800930c:	20007f4c 	.word	0x20007f4c
 8009310:	20007f49 	.word	0x20007f49
 8009314:	20007f1c 	.word	0x20007f1c
 8009318:	20007f3c 	.word	0x20007f3c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 80bf 	bne.w	80094a4 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009326:	4b7c      	ldr	r3, [pc, #496]	@ (8009518 <tcp_receive+0xfdc>)
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009332:	2b00      	cmp	r3, #0
 8009334:	f340 80b6 	ble.w	80094a4 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	899b      	ldrh	r3, [r3, #12]
 800933e:	b29b      	uxth	r3, r3
 8009340:	4618      	mov	r0, r3
 8009342:	f7fa ffd8 	bl	80042f6 <lwip_htons>
 8009346:	4603      	mov	r3, r0
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	f040 80bb 	bne.w	80094c8 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009352:	4872      	ldr	r0, [pc, #456]	@ (800951c <tcp_receive+0xfe0>)
 8009354:	f7fd fc12 	bl	8006b7c <tcp_seg_copy>
 8009358:	4602      	mov	r2, r0
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80b2 	beq.w	80094cc <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009370:	8912      	ldrh	r2, [r2, #8]
 8009372:	441a      	add	r2, r3
 8009374:	4b68      	ldr	r3, [pc, #416]	@ (8009518 <tcp_receive+0xfdc>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	dd12      	ble.n	80093a4 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800937e:	4b66      	ldr	r3, [pc, #408]	@ (8009518 <tcp_receive+0xfdc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	b29a      	uxth	r2, r3
 8009384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	b29b      	uxth	r3, r3
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	b29a      	uxth	r2, r3
 8009390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009392:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939a:	891b      	ldrh	r3, [r3, #8]
 800939c:	4619      	mov	r1, r3
 800939e:	4610      	mov	r0, r2
 80093a0:	f7fb ff46 	bl	8005230 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80093a4:	4b5e      	ldr	r3, [pc, #376]	@ (8009520 <tcp_receive+0xfe4>)
 80093a6:	881b      	ldrh	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	4b5b      	ldr	r3, [pc, #364]	@ (8009518 <tcp_receive+0xfdc>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	441a      	add	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80093b8:	440b      	add	r3, r1
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f340 8085 	ble.w	80094cc <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80093c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	899b      	ldrh	r3, [r3, #12]
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fa ff92 	bl	80042f6 <lwip_htons>
 80093d2:	4603      	mov	r3, r0
 80093d4:	f003 0301 	and.w	r3, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01e      	beq.n	800941a <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	899b      	ldrh	r3, [r3, #12]
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80093ea:	b29c      	uxth	r4, r3
 80093ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	899b      	ldrh	r3, [r3, #12]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7fa ff7d 	bl	80042f6 <lwip_htons>
 80093fc:	4603      	mov	r3, r0
 80093fe:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009402:	b29b      	uxth	r3, r3
 8009404:	4618      	mov	r0, r3
 8009406:	f7fa ff76 	bl	80042f6 <lwip_htons>
 800940a:	4603      	mov	r3, r0
 800940c:	461a      	mov	r2, r3
 800940e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	4322      	orrs	r2, r4
 8009416:	b292      	uxth	r2, r2
 8009418:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009424:	4413      	add	r3, r2
 8009426:	b299      	uxth	r1, r3
 8009428:	4b3b      	ldr	r3, [pc, #236]	@ (8009518 <tcp_receive+0xfdc>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	b29a      	uxth	r2, r3
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	1a8a      	subs	r2, r1, r2
 8009434:	b292      	uxth	r2, r2
 8009436:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	891b      	ldrh	r3, [r3, #8]
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f7fb fef2 	bl	8005230 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800944c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	891c      	ldrh	r4, [r3, #8]
 8009452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	899b      	ldrh	r3, [r3, #12]
 800945a:	b29b      	uxth	r3, r3
 800945c:	4618      	mov	r0, r3
 800945e:	f7fa ff4a 	bl	80042f6 <lwip_htons>
 8009462:	4603      	mov	r3, r0
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <tcp_receive+0xf34>
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <tcp_receive+0xf36>
 8009470:	2300      	movs	r3, #0
 8009472:	4423      	add	r3, r4
 8009474:	b29a      	uxth	r2, r3
 8009476:	4b2a      	ldr	r3, [pc, #168]	@ (8009520 <tcp_receive+0xfe4>)
 8009478:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800947a:	4b29      	ldr	r3, [pc, #164]	@ (8009520 <tcp_receive+0xfe4>)
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	4b25      	ldr	r3, [pc, #148]	@ (8009518 <tcp_receive+0xfdc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800948e:	440b      	add	r3, r1
 8009490:	429a      	cmp	r2, r3
 8009492:	d01b      	beq.n	80094cc <tcp_receive+0xf90>
 8009494:	4b23      	ldr	r3, [pc, #140]	@ (8009524 <tcp_receive+0xfe8>)
 8009496:	f240 627a 	movw	r2, #1658	@ 0x67a
 800949a:	4923      	ldr	r1, [pc, #140]	@ (8009528 <tcp_receive+0xfec>)
 800949c:	4823      	ldr	r0, [pc, #140]	@ (800952c <tcp_receive+0xff0>)
 800949e:	f004 fa5d 	bl	800d95c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80094a2:	e013      	b.n	80094cc <tcp_receive+0xf90>
              }
            }
            prev = next;
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f47f aeab 	bne.w	800920c <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 80094b6:	e00f      	b.n	80094d8 <tcp_receive+0xf9c>
                break;
 80094b8:	bf00      	nop
 80094ba:	e00d      	b.n	80094d8 <tcp_receive+0xf9c>
                break;
 80094bc:	bf00      	nop
 80094be:	e00b      	b.n	80094d8 <tcp_receive+0xf9c>
                  break;
 80094c0:	bf00      	nop
 80094c2:	e009      	b.n	80094d8 <tcp_receive+0xf9c>
                  break;
 80094c4:	bf00      	nop
 80094c6:	e007      	b.n	80094d8 <tcp_receive+0xf9c>
                  break;
 80094c8:	bf00      	nop
 80094ca:	e005      	b.n	80094d8 <tcp_receive+0xf9c>
                break;
 80094cc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80094ce:	e003      	b.n	80094d8 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 ff4b 	bl	800a36c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80094d6:	e01a      	b.n	800950e <tcp_receive+0xfd2>
 80094d8:	e019      	b.n	800950e <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80094da:	4b0f      	ldr	r3, [pc, #60]	@ (8009518 <tcp_receive+0xfdc>)
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db0a      	blt.n	80094fe <tcp_receive+0xfc2>
 80094e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009518 <tcp_receive+0xfdc>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	6879      	ldr	r1, [r7, #4]
 80094f2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80094f4:	440b      	add	r3, r1
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	3301      	adds	r3, #1
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd07      	ble.n	800950e <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7e9b      	ldrb	r3, [r3, #26]
 8009502:	f043 0302 	orr.w	r3, r3, #2
 8009506:	b2da      	uxtb	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800950c:	e7ff      	b.n	800950e <tcp_receive+0xfd2>
 800950e:	bf00      	nop
 8009510:	3734      	adds	r7, #52	@ 0x34
 8009512:	46bd      	mov	sp, r7
 8009514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009516:	bf00      	nop
 8009518:	20007f3c 	.word	0x20007f3c
 800951c:	20007f1c 	.word	0x20007f1c
 8009520:	20007f46 	.word	0x20007f46
 8009524:	0800f7cc 	.word	0x0800f7cc
 8009528:	0800fa98 	.word	0x0800fa98
 800952c:	0800f810 	.word	0x0800f810

08009530 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8009536:	4b17      	ldr	r3, [pc, #92]	@ (8009594 <tcp_getoptbyte+0x64>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d005      	beq.n	800954a <tcp_getoptbyte+0x1a>
 800953e:	4b16      	ldr	r3, [pc, #88]	@ (8009598 <tcp_getoptbyte+0x68>)
 8009540:	881a      	ldrh	r2, [r3, #0]
 8009542:	4b16      	ldr	r3, [pc, #88]	@ (800959c <tcp_getoptbyte+0x6c>)
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d20e      	bcs.n	8009568 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800954a:	4b15      	ldr	r3, [pc, #84]	@ (80095a0 <tcp_getoptbyte+0x70>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	3314      	adds	r3, #20
 8009550:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8009552:	4b11      	ldr	r3, [pc, #68]	@ (8009598 <tcp_getoptbyte+0x68>)
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	b291      	uxth	r1, r2
 800955a:	4a0f      	ldr	r2, [pc, #60]	@ (8009598 <tcp_getoptbyte+0x68>)
 800955c:	8011      	strh	r1, [r2, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	4413      	add	r3, r2
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	e010      	b.n	800958a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8009568:	4b0b      	ldr	r3, [pc, #44]	@ (8009598 <tcp_getoptbyte+0x68>)
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	b291      	uxth	r1, r2
 8009570:	4a09      	ldr	r2, [pc, #36]	@ (8009598 <tcp_getoptbyte+0x68>)
 8009572:	8011      	strh	r1, [r2, #0]
 8009574:	b2da      	uxtb	r2, r3
 8009576:	4b09      	ldr	r3, [pc, #36]	@ (800959c <tcp_getoptbyte+0x6c>)
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8009580:	4b04      	ldr	r3, [pc, #16]	@ (8009594 <tcp_getoptbyte+0x64>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	4413      	add	r3, r2
 8009588:	781b      	ldrb	r3, [r3, #0]
  }
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	bc80      	pop	{r7}
 8009592:	4770      	bx	lr
 8009594:	20007f34 	.word	0x20007f34
 8009598:	20007f38 	.word	0x20007f38
 800959c:	20007f32 	.word	0x20007f32
 80095a0:	20007f2c 	.word	0x20007f2c

080095a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80095ac:	4b2e      	ldr	r3, [pc, #184]	@ (8009668 <tcp_parseopt+0xc4>)
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d056      	beq.n	8009662 <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80095b4:	4b2d      	ldr	r3, [pc, #180]	@ (800966c <tcp_parseopt+0xc8>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	801a      	strh	r2, [r3, #0]
 80095ba:	e046      	b.n	800964a <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 80095bc:	f7ff ffb8 	bl	8009530 <tcp_getoptbyte>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d006      	beq.n	80095d8 <tcp_parseopt+0x34>
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	dc2a      	bgt.n	8009624 <tcp_parseopt+0x80>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d042      	beq.n	8009658 <tcp_parseopt+0xb4>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d038      	beq.n	8009648 <tcp_parseopt+0xa4>
 80095d6:	e025      	b.n	8009624 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80095d8:	f7ff ffaa 	bl	8009530 <tcp_getoptbyte>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d13c      	bne.n	800965c <tcp_parseopt+0xb8>
 80095e2:	4b22      	ldr	r3, [pc, #136]	@ (800966c <tcp_parseopt+0xc8>)
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009668 <tcp_parseopt+0xc4>)
 80095ea:	8812      	ldrh	r2, [r2, #0]
 80095ec:	4293      	cmp	r3, r2
 80095ee:	da35      	bge.n	800965c <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80095f0:	f7ff ff9e 	bl	8009530 <tcp_getoptbyte>
 80095f4:	4603      	mov	r3, r0
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80095fa:	f7ff ff99 	bl	8009530 <tcp_getoptbyte>
 80095fe:	4603      	mov	r3, r0
 8009600:	461a      	mov	r2, r3
 8009602:	89bb      	ldrh	r3, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009608:	89bb      	ldrh	r3, [r7, #12]
 800960a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800960e:	d804      	bhi.n	800961a <tcp_parseopt+0x76>
 8009610:	89bb      	ldrh	r3, [r7, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <tcp_parseopt+0x76>
 8009616:	89ba      	ldrh	r2, [r7, #12]
 8009618:	e001      	b.n	800961e <tcp_parseopt+0x7a>
 800961a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8009622:	e012      	b.n	800964a <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8009624:	f7ff ff84 	bl	8009530 <tcp_getoptbyte>
 8009628:	4603      	mov	r3, r0
 800962a:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800962c:	7afb      	ldrb	r3, [r7, #11]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d916      	bls.n	8009660 <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8009632:	7afb      	ldrb	r3, [r7, #11]
 8009634:	b29a      	uxth	r2, r3
 8009636:	4b0d      	ldr	r3, [pc, #52]	@ (800966c <tcp_parseopt+0xc8>)
 8009638:	881b      	ldrh	r3, [r3, #0]
 800963a:	4413      	add	r3, r2
 800963c:	b29b      	uxth	r3, r3
 800963e:	3b02      	subs	r3, #2
 8009640:	b29a      	uxth	r2, r3
 8009642:	4b0a      	ldr	r3, [pc, #40]	@ (800966c <tcp_parseopt+0xc8>)
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	e000      	b.n	800964a <tcp_parseopt+0xa6>
        break;
 8009648:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800964a:	4b08      	ldr	r3, [pc, #32]	@ (800966c <tcp_parseopt+0xc8>)
 800964c:	881a      	ldrh	r2, [r3, #0]
 800964e:	4b06      	ldr	r3, [pc, #24]	@ (8009668 <tcp_parseopt+0xc4>)
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d3b2      	bcc.n	80095bc <tcp_parseopt+0x18>
 8009656:	e004      	b.n	8009662 <tcp_parseopt+0xbe>
        return;
 8009658:	bf00      	nop
 800965a:	e002      	b.n	8009662 <tcp_parseopt+0xbe>
          return;
 800965c:	bf00      	nop
 800965e:	e000      	b.n	8009662 <tcp_parseopt+0xbe>
          return;
 8009660:	bf00      	nop
      }
    }
  }
}
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20007f30 	.word	0x20007f30
 800966c:	20007f38 	.word	0x20007f38

08009670 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009674:	4b05      	ldr	r3, [pc, #20]	@ (800968c <tcp_trigger_input_pcb_close+0x1c>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f043 0310 	orr.w	r3, r3, #16
 800967c:	b2da      	uxtb	r2, r3
 800967e:	4b03      	ldr	r3, [pc, #12]	@ (800968c <tcp_trigger_input_pcb_close+0x1c>)
 8009680:	701a      	strb	r2, [r3, #0]
}
 8009682:	bf00      	nop
 8009684:	46bd      	mov	sp, r7
 8009686:	bc80      	pop	{r7}
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20007f49 	.word	0x20007f49

08009690 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	607b      	str	r3, [r7, #4]
 800969a:	460b      	mov	r3, r1
 800969c:	817b      	strh	r3, [r7, #10]
 800969e:	4613      	mov	r3, r2
 80096a0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80096a2:	897a      	ldrh	r2, [r7, #10]
 80096a4:	893b      	ldrh	r3, [r7, #8]
 80096a6:	4413      	add	r3, r2
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3314      	adds	r3, #20
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2200      	movs	r2, #0
 80096b0:	4619      	mov	r1, r3
 80096b2:	2001      	movs	r0, #1
 80096b4:	f7fb fbb8 	bl	8004e28 <pbuf_alloc>
 80096b8:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d056      	beq.n	800976e <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80096c0:	897b      	ldrh	r3, [r7, #10]
 80096c2:	3313      	adds	r3, #19
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	8952      	ldrh	r2, [r2, #10]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	db05      	blt.n	80096d8 <tcp_output_alloc_header+0x48>
 80096cc:	4b2a      	ldr	r3, [pc, #168]	@ (8009778 <tcp_output_alloc_header+0xe8>)
 80096ce:	2272      	movs	r2, #114	@ 0x72
 80096d0:	492a      	ldr	r1, [pc, #168]	@ (800977c <tcp_output_alloc_header+0xec>)
 80096d2:	482b      	ldr	r0, [pc, #172]	@ (8009780 <tcp_output_alloc_header+0xf0>)
 80096d4:	f004 f942 	bl	800d95c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8adb      	ldrh	r3, [r3, #22]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fa fe07 	bl	80042f6 <lwip_htons>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8b1b      	ldrh	r3, [r3, #24]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fa fdfe 	bl	80042f6 <lwip_htons>
 80096fa:	4603      	mov	r3, r0
 80096fc:	461a      	mov	r2, r3
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970c:	4618      	mov	r0, r3
 800970e:	f7fa fdff 	bl	8004310 <lwip_htonl>
 8009712:	4602      	mov	r2, r0
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009718:	897b      	ldrh	r3, [r7, #10]
 800971a:	089b      	lsrs	r3, r3, #2
 800971c:	b29b      	uxth	r3, r3
 800971e:	3305      	adds	r3, #5
 8009720:	b29b      	uxth	r3, r3
 8009722:	031b      	lsls	r3, r3, #12
 8009724:	b29b      	uxth	r3, r3
 8009726:	f043 0310 	orr.w	r3, r3, #16
 800972a:	b29b      	uxth	r3, r3
 800972c:	4618      	mov	r0, r3
 800972e:	f7fa fde2 	bl	80042f6 <lwip_htons>
 8009732:	4603      	mov	r3, r0
 8009734:	461a      	mov	r2, r3
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800973e:	4618      	mov	r0, r3
 8009740:	f7fa fdd9 	bl	80042f6 <lwip_htons>
 8009744:	4603      	mov	r3, r0
 8009746:	461a      	mov	r2, r3
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2200      	movs	r2, #0
 8009750:	741a      	strb	r2, [r3, #16]
 8009752:	2200      	movs	r2, #0
 8009754:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	2200      	movs	r2, #0
 800975a:	749a      	strb	r2, [r3, #18]
 800975c:	2200      	movs	r2, #0
 800975e:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8009768:	441a      	add	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800976e:	697b      	ldr	r3, [r7, #20]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	0800fb54 	.word	0x0800fb54
 800977c:	0800fb88 	.word	0x0800fb88
 8009780:	0800fbb8 	.word	0x0800fbb8

08009784 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009784:	b590      	push	{r4, r7, lr}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009790:	2b00      	cmp	r3, #0
 8009792:	d02d      	beq.n	80097f0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009798:	60fb      	str	r3, [r7, #12]
 800979a:	e002      	b.n	80097a2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1f8      	bne.n	800979c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	899b      	ldrh	r3, [r3, #12]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fa fd9f 	bl	80042f6 <lwip_htons>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d116      	bne.n	80097f0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	899b      	ldrh	r3, [r3, #12]
 80097c8:	b29c      	uxth	r4, r3
 80097ca:	2001      	movs	r0, #1
 80097cc:	f7fa fd93 	bl	80042f6 <lwip_htons>
 80097d0:	4603      	mov	r3, r0
 80097d2:	461a      	mov	r2, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	68db      	ldr	r3, [r3, #12]
 80097d8:	4322      	orrs	r2, r4
 80097da:	b292      	uxth	r2, r2
 80097dc:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	7e9b      	ldrb	r3, [r3, #26]
 80097e2:	f043 0320 	orr.w	r3, r3, #32
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	e004      	b.n	80097fa <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80097f0:	2101      	movs	r1, #1
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fcbe 	bl	800a174 <tcp_enqueue_flags>
 80097f8:	4603      	mov	r3, r0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd90      	pop	{r4, r7, pc}
	...

08009804 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009814:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009822:	2003      	movs	r0, #3
 8009824:	f7fb f910 	bl	8004a48 <memp_malloc>
 8009828:	6138      	str	r0, [r7, #16]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d104      	bne.n	800983a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009830:	68b8      	ldr	r0, [r7, #8]
 8009832:	f7fb fe71 	bl	8005518 <pbuf_free>
    return NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	e060      	b.n	80098fc <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8009840:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2200      	movs	r2, #0
 8009846:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	891a      	ldrh	r2, [r3, #8]
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	b29b      	uxth	r3, r3
 8009856:	429a      	cmp	r2, r3
 8009858:	d205      	bcs.n	8009866 <tcp_create_segment+0x62>
 800985a:	4b2a      	ldr	r3, [pc, #168]	@ (8009904 <tcp_create_segment+0x100>)
 800985c:	22ba      	movs	r2, #186	@ 0xba
 800985e:	492a      	ldr	r1, [pc, #168]	@ (8009908 <tcp_create_segment+0x104>)
 8009860:	482a      	ldr	r0, [pc, #168]	@ (800990c <tcp_create_segment+0x108>)
 8009862:	f004 f87b 	bl	800d95c <iprintf>
  seg->len = p->tot_len - optlen;
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	891a      	ldrh	r2, [r3, #8]
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	b29b      	uxth	r3, r3
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	b29a      	uxth	r2, r3
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009876:	2114      	movs	r1, #20
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	f7fb fe29 	bl	80054d0 <pbuf_header>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d004      	beq.n	800988e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009884:	6938      	ldr	r0, [r7, #16]
 8009886:	f7fd f961 	bl	8006b4c <tcp_seg_free>
    return NULL;
 800988a:	2300      	movs	r3, #0
 800988c:	e036      	b.n	80098fc <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8ada      	ldrh	r2, [r3, #22]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	68dc      	ldr	r4, [r3, #12]
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fa fd28 	bl	80042f6 <lwip_htons>
 80098a6:	4603      	mov	r3, r0
 80098a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8b1a      	ldrh	r2, [r3, #24]
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	68dc      	ldr	r4, [r3, #12]
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7fa fd1f 	bl	80042f6 <lwip_htons>
 80098b8:	4603      	mov	r3, r0
 80098ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	68dc      	ldr	r4, [r3, #12]
 80098c0:	6838      	ldr	r0, [r7, #0]
 80098c2:	f7fa fd25 	bl	8004310 <lwip_htonl>
 80098c6:	4603      	mov	r3, r0
 80098c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	3305      	adds	r3, #5
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	031b      	lsls	r3, r3, #12
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	68dc      	ldr	r4, [r3, #12]
 80098e4:	4610      	mov	r0, r2
 80098e6:	f7fa fd06 	bl	80042f6 <lwip_htons>
 80098ea:	4603      	mov	r3, r0
 80098ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	749a      	strb	r2, [r3, #18]
 80098f6:	2200      	movs	r2, #0
 80098f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80098fa:	693b      	ldr	r3, [r7, #16]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	bd90      	pop	{r4, r7, pc}
 8009904:	0800fb54 	.word	0x0800fb54
 8009908:	0800fbe0 	.word	0x0800fbe0
 800990c:	0800fbb8 	.word	0x0800fbb8

08009910 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
 800991c:	460b      	mov	r3, r1
 800991e:	81bb      	strh	r3, [r7, #12]
 8009920:	4613      	mov	r3, r2
 8009922:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009924:	89bb      	ldrh	r3, [r7, #12]
 8009926:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009928:	89ba      	ldrh	r2, [r7, #12]
 800992a:	897b      	ldrh	r3, [r7, #10]
 800992c:	429a      	cmp	r2, r3
 800992e:	d221      	bcs.n	8009974 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009930:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d111      	bne.n	8009960 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	7e9b      	ldrb	r3, [r3, #26]
 8009940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009944:	2b00      	cmp	r3, #0
 8009946:	d115      	bne.n	8009974 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009948:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	d007      	beq.n	8009960 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009950:	6a3b      	ldr	r3, [r7, #32]
 8009952:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
         (!first_seg ||
 8009954:	2b00      	cmp	r3, #0
 8009956:	d103      	bne.n	8009960 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009958:	6a3b      	ldr	r3, [r7, #32]
 800995a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
          pcb->unsent != NULL ||
 800995c:	2b00      	cmp	r3, #0
 800995e:	d009      	beq.n	8009974 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009960:	89bb      	ldrh	r3, [r7, #12]
 8009962:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8009966:	f023 0203 	bic.w	r2, r3, #3
 800996a:	897b      	ldrh	r3, [r7, #10]
 800996c:	4293      	cmp	r3, r2
 800996e:	bf28      	it	cs
 8009970:	4613      	movcs	r3, r2
 8009972:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009974:	8af9      	ldrh	r1, [r7, #22]
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	2200      	movs	r2, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f7fb fa54 	bl	8004e28 <pbuf_alloc>
 8009980:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009988:	2300      	movs	r3, #0
 800998a:	e019      	b.n	80099c0 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d006      	beq.n	80099a2 <tcp_pbuf_prealloc+0x92>
 8009994:	4b0c      	ldr	r3, [pc, #48]	@ (80099c8 <tcp_pbuf_prealloc+0xb8>)
 8009996:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800999a:	490c      	ldr	r1, [pc, #48]	@ (80099cc <tcp_pbuf_prealloc+0xbc>)
 800999c:	480c      	ldr	r0, [pc, #48]	@ (80099d0 <tcp_pbuf_prealloc+0xc0>)
 800999e:	f003 ffdd 	bl	800d95c <iprintf>
  *oversize = p->len - length;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	895a      	ldrh	r2, [r3, #10]
 80099a6:	89bb      	ldrh	r3, [r7, #12]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	89ba      	ldrh	r2, [r7, #12]
 80099b4:	811a      	strh	r2, [r3, #8]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	891a      	ldrh	r2, [r3, #8]
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	815a      	strh	r2, [r3, #10]
  return p;
 80099be:	693b      	ldr	r3, [r7, #16]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	0800fb54 	.word	0x0800fb54
 80099cc:	0800fbf8 	.word	0x0800fbf8
 80099d0:	0800fbb8 	.word	0x0800fbb8

080099d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7d1b      	ldrb	r3, [r3, #20]
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d00e      	beq.n	8009a06 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80099ec:	2b07      	cmp	r3, #7
 80099ee:	d00a      	beq.n	8009a06 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d006      	beq.n	8009a06 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d002      	beq.n	8009a06 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009a00:	f06f 030a 	mvn.w	r3, #10
 8009a04:	e04f      	b.n	8009aa6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8009a06:	887b      	ldrh	r3, [r7, #2]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <tcp_write_checks+0x3c>
    return ERR_OK;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e04a      	b.n	8009aa6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a16:	887a      	ldrh	r2, [r7, #2]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d909      	bls.n	8009a30 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7e9b      	ldrb	r3, [r3, #26]
 8009a20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2e:	e03a      	b.n	8009aa6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d806      	bhi.n	8009a48 <tcp_write_checks+0x74>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a40:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d909      	bls.n	8009a5c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7e9b      	ldrb	r3, [r3, #26]
 8009a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5a:	e024      	b.n	8009aa6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00f      	beq.n	8009a86 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d11a      	bne.n	8009aa4 <tcp_write_checks+0xd0>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d116      	bne.n	8009aa4 <tcp_write_checks+0xd0>
 8009a76:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab0 <tcp_write_checks+0xdc>)
 8009a78:	f240 1255 	movw	r2, #341	@ 0x155
 8009a7c:	490d      	ldr	r1, [pc, #52]	@ (8009ab4 <tcp_write_checks+0xe0>)
 8009a7e:	480e      	ldr	r0, [pc, #56]	@ (8009ab8 <tcp_write_checks+0xe4>)
 8009a80:	f003 ff6c 	bl	800d95c <iprintf>
 8009a84:	e00e      	b.n	8009aa4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d103      	bne.n	8009a96 <tcp_write_checks+0xc2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <tcp_write_checks+0xd0>
 8009a96:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <tcp_write_checks+0xdc>)
 8009a98:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8009a9c:	4907      	ldr	r1, [pc, #28]	@ (8009abc <tcp_write_checks+0xe8>)
 8009a9e:	4806      	ldr	r0, [pc, #24]	@ (8009ab8 <tcp_write_checks+0xe4>)
 8009aa0:	f003 ff5c 	bl	800d95c <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	0800fb54 	.word	0x0800fb54
 8009ab4:	0800fc0c 	.word	0x0800fc0c
 8009ab8:	0800fbb8 	.word	0x0800fbb8
 8009abc:	0800fc48 	.word	0x0800fc48

08009ac0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009ac0:	b590      	push	{r4, r7, lr}
 8009ac2:	b09b      	sub	sp, #108	@ 0x6c
 8009ac4:	af04      	add	r7, sp, #16
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	4611      	mov	r1, r2
 8009acc:	461a      	mov	r2, r3
 8009ace:	460b      	mov	r3, r1
 8009ad0:	80fb      	strh	r3, [r7, #6]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ade:	2300      	movs	r3, #0
 8009ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8009aea:	2300      	movs	r3, #0
 8009aec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  u8_t optflags = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b0e:	085b      	lsrs	r3, r3, #1
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b16:	4293      	cmp	r3, r2
 8009b18:	bf28      	it	cs
 8009b1a:	4613      	movcs	r3, r2
 8009b1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8009b1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d102      	bne.n	8009b2a <tcp_write+0x6a>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009b28:	e000      	b.n	8009b2c <tcp_write+0x6c>
 8009b2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d109      	bne.n	8009b48 <tcp_write+0x88>
 8009b34:	4b92      	ldr	r3, [pc, #584]	@ (8009d80 <tcp_write+0x2c0>)
 8009b36:	f240 1291 	movw	r2, #401	@ 0x191
 8009b3a:	4992      	ldr	r1, [pc, #584]	@ (8009d84 <tcp_write+0x2c4>)
 8009b3c:	4892      	ldr	r0, [pc, #584]	@ (8009d88 <tcp_write+0x2c8>)
 8009b3e:	f003 ff0d 	bl	800d95c <iprintf>
 8009b42:	f06f 030f 	mvn.w	r3, #15
 8009b46:	e30a      	b.n	800a15e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009b48:	88fb      	ldrh	r3, [r7, #6]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f7ff ff41 	bl	80099d4 <tcp_write_checks>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8009b58:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <tcp_write+0xa6>
    return err;
 8009b60:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8009b64:	e2fb      	b.n	800a15e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009b6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 80f4 	beq.w	8009d62 <tcp_write+0x2a2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b80:	e002      	b.n	8009b88 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1f8      	bne.n	8009b82 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b92:	7a9b      	ldrb	r3, [r3, #10]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f003 0304 	and.w	r3, r3, #4
 8009b9c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8009b9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba2:	891b      	ldrh	r3, [r3, #8]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	8c3b      	ldrh	r3, [r7, #32]
 8009ba8:	440b      	add	r3, r1
 8009baa:	429a      	cmp	r2, r3
 8009bac:	da06      	bge.n	8009bbc <tcp_write+0xfc>
 8009bae:	4b74      	ldr	r3, [pc, #464]	@ (8009d80 <tcp_write+0x2c0>)
 8009bb0:	f240 12c7 	movw	r2, #455	@ 0x1c7
 8009bb4:	4975      	ldr	r1, [pc, #468]	@ (8009d8c <tcp_write+0x2cc>)
 8009bb6:	4874      	ldr	r0, [pc, #464]	@ (8009d88 <tcp_write+0x2c8>)
 8009bb8:	f003 fed0 	bl	800d95c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8009bbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bbe:	891a      	ldrh	r2, [r3, #8]
 8009bc0:	8c3b      	ldrh	r3, [r7, #32]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009bd2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8009bd4:	8a7b      	ldrh	r3, [r7, #18]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d026      	beq.n	8009c28 <tcp_write+0x168>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8009bda:	8a7b      	ldrh	r3, [r7, #18]
 8009bdc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d206      	bcs.n	8009bf0 <tcp_write+0x130>
 8009be2:	4b67      	ldr	r3, [pc, #412]	@ (8009d80 <tcp_write+0x2c0>)
 8009be4:	f240 12d9 	movw	r2, #473	@ 0x1d9
 8009be8:	4969      	ldr	r1, [pc, #420]	@ (8009d90 <tcp_write+0x2d0>)
 8009bea:	4867      	ldr	r0, [pc, #412]	@ (8009d88 <tcp_write+0x2c8>)
 8009bec:	f003 feb6 	bl	800d95c <iprintf>
      seg = last_unsent;
 8009bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8009bf4:	8a7b      	ldrh	r3, [r7, #18]
 8009bf6:	88fa      	ldrh	r2, [r7, #6]
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	bf28      	it	cs
 8009bfc:	4613      	movcs	r3, r2
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009c02:	4293      	cmp	r3, r2
 8009c04:	bf28      	it	cs
 8009c06:	4613      	movcs	r3, r2
 8009c08:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8009c0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c10:	4413      	add	r3, r2
 8009c12:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8009c16:	8a7a      	ldrh	r2, [r7, #18]
 8009c18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8009c20:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009c22:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8009c28:	8a7b      	ldrh	r3, [r7, #18]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <tcp_write+0x186>
 8009c2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d006      	beq.n	8009c46 <tcp_write+0x186>
 8009c38:	4b51      	ldr	r3, [pc, #324]	@ (8009d80 <tcp_write+0x2c0>)
 8009c3a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009c3e:	4955      	ldr	r1, [pc, #340]	@ (8009d94 <tcp_write+0x2d4>)
 8009c40:	4851      	ldr	r0, [pc, #324]	@ (8009d88 <tcp_write+0x2c8>)
 8009c42:	f003 fe8b 	bl	800d95c <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009c46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009c4a:	88fb      	ldrh	r3, [r7, #6]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	f080 8169 	bcs.w	8009f24 <tcp_write+0x464>
 8009c52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 8165 	beq.w	8009f24 <tcp_write+0x464>
 8009c5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c5c:	891b      	ldrh	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 8160 	beq.w	8009f24 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009c64:	88fa      	ldrh	r2, [r7, #6]
 8009c66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009c6a:	1ad2      	subs	r2, r2, r3
 8009c6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	bfa8      	it	ge
 8009c72:	4613      	movge	r3, r2
 8009c74:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c78:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009c7a:	797b      	ldrb	r3, [r7, #5]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d027      	beq.n	8009cd4 <tcp_write+0x214>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009c84:	f107 0012 	add.w	r0, r7, #18
 8009c88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009c8a:	8bf9      	ldrh	r1, [r7, #30]
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	9302      	str	r3, [sp, #8]
 8009c90:	797b      	ldrb	r3, [r7, #5]
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2004      	movs	r0, #4
 8009c9c:	f7ff fe38 	bl	8009910 <tcp_pbuf_prealloc>
 8009ca0:	6578      	str	r0, [r7, #84]	@ 0x54
 8009ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 8228 	beq.w	800a0fa <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8009caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cac:	6858      	ldr	r0, [r3, #4]
 8009cae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	8bfa      	ldrh	r2, [r7, #30]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f003 ff4a 	bl	800db52 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009cbe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009cc0:	f7fb fcbe 	bl	8005640 <pbuf_clen>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009ccc:	4413      	add	r3, r2
 8009cce:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009cd2:	e03f      	b.n	8009d54 <tcp_write+0x294>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8009cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cda:	e002      	b.n	8009ce2 <tcp_write+0x222>
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1f8      	bne.n	8009cdc <tcp_write+0x21c>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8009cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cec:	7b1b      	ldrb	r3, [r3, #12]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d115      	bne.n	8009d1e <tcp_write+0x25e>
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009cf8:	8952      	ldrh	r2, [r2, #10]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d10d      	bne.n	8009d1e <tcp_write+0x25e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8009d02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <tcp_write+0x258>
 8009d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8009d80 <tcp_write+0x2c0>)
 8009d0c:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8009d10:	4921      	ldr	r1, [pc, #132]	@ (8009d98 <tcp_write+0x2d8>)
 8009d12:	481d      	ldr	r0, [pc, #116]	@ (8009d88 <tcp_write+0x2c8>)
 8009d14:	f003 fe22 	bl	800d95c <iprintf>
          extendlen = seglen;
 8009d18:	8bfb      	ldrh	r3, [r7, #30]
 8009d1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009d1c:	e01a      	b.n	8009d54 <tcp_write+0x294>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8009d1e:	8bfb      	ldrh	r3, [r7, #30]
 8009d20:	2201      	movs	r2, #1
 8009d22:	4619      	mov	r1, r3
 8009d24:	2004      	movs	r0, #4
 8009d26:	f7fb f87f 	bl	8004e28 <pbuf_alloc>
 8009d2a:	6578      	str	r0, [r7, #84]	@ 0x54
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f000 81e5 	beq.w	800a0fe <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009d34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	441a      	add	r2, r3
 8009d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d3e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009d40:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8009d42:	f7fb fc7d 	bl	8005640 <pbuf_clen>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009d4e:	4413      	add	r3, r2
 8009d50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009d54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009d58:	8bfb      	ldrh	r3, [r7, #30]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009d60:	e0e0      	b.n	8009f24 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 80db 	beq.w	8009f24 <tcp_write+0x464>
 8009d6e:	4b04      	ldr	r3, [pc, #16]	@ (8009d80 <tcp_write+0x2c0>)
 8009d70:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8009d74:	4909      	ldr	r1, [pc, #36]	@ (8009d9c <tcp_write+0x2dc>)
 8009d76:	4804      	ldr	r0, [pc, #16]	@ (8009d88 <tcp_write+0x2c8>)
 8009d78:	f003 fdf0 	bl	800d95c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8009d7c:	e0d2      	b.n	8009f24 <tcp_write+0x464>
 8009d7e:	bf00      	nop
 8009d80:	0800fb54 	.word	0x0800fb54
 8009d84:	0800fc7c 	.word	0x0800fc7c
 8009d88:	0800fbb8 	.word	0x0800fbb8
 8009d8c:	0800fcb0 	.word	0x0800fcb0
 8009d90:	0800fcc8 	.word	0x0800fcc8
 8009d94:	0800fce8 	.word	0x0800fce8
 8009d98:	0800fd08 	.word	0x0800fd08
 8009d9c:	0800fd34 	.word	0x0800fd34
    struct pbuf *p;
    u16_t left = len - pos;
 8009da0:	88fa      	ldrh	r2, [r7, #6]
 8009da2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8009daa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009db6:	8b7a      	ldrh	r2, [r7, #26]
 8009db8:	8bbb      	ldrh	r3, [r7, #28]
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	bf28      	it	cs
 8009dbe:	4613      	movcs	r3, r2
 8009dc0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009dc2:	797b      	ldrb	r3, [r7, #5]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d036      	beq.n	8009e3a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8009dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	8b3b      	ldrh	r3, [r7, #24]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b299      	uxth	r1, r3
 8009dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bf0c      	ite	eq
 8009dde:	2301      	moveq	r3, #1
 8009de0:	2300      	movne	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	f107 0012 	add.w	r0, r7, #18
 8009de8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009dea:	9302      	str	r3, [sp, #8]
 8009dec:	797b      	ldrb	r3, [r7, #5]
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	4603      	mov	r3, r0
 8009df6:	2000      	movs	r0, #0
 8009df8:	f7ff fd8a 	bl	8009910 <tcp_pbuf_prealloc>
 8009dfc:	6338      	str	r0, [r7, #48]	@ 0x30
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f000 817e 	beq.w	800a102 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	895b      	ldrh	r3, [r3, #10]
 8009e0a:	8b3a      	ldrh	r2, [r7, #24]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d906      	bls.n	8009e1e <tcp_write+0x35e>
 8009e10:	4b8f      	ldr	r3, [pc, #572]	@ (800a050 <tcp_write+0x590>)
 8009e12:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8009e16:	498f      	ldr	r1, [pc, #572]	@ (800a054 <tcp_write+0x594>)
 8009e18:	488f      	ldr	r0, [pc, #572]	@ (800a058 <tcp_write+0x598>)
 8009e1a:	f003 fd9f 	bl	800d95c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e26:	18d0      	adds	r0, r2, r3
 8009e28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4413      	add	r3, r2
 8009e30:	8b3a      	ldrh	r2, [r7, #24]
 8009e32:	4619      	mov	r1, r3
 8009e34:	f003 fe8d 	bl	800db52 <memcpy>
 8009e38:	e02e      	b.n	8009e98 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8009e3a:	8a7b      	ldrh	r3, [r7, #18]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <tcp_write+0x38e>
 8009e40:	4b83      	ldr	r3, [pc, #524]	@ (800a050 <tcp_write+0x590>)
 8009e42:	f240 224b 	movw	r2, #587	@ 0x24b
 8009e46:	4985      	ldr	r1, [pc, #532]	@ (800a05c <tcp_write+0x59c>)
 8009e48:	4883      	ldr	r0, [pc, #524]	@ (800a058 <tcp_write+0x598>)
 8009e4a:	f003 fd87 	bl	800d95c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8009e4e:	8b3b      	ldrh	r3, [r7, #24]
 8009e50:	2201      	movs	r2, #1
 8009e52:	4619      	mov	r1, r3
 8009e54:	2000      	movs	r0, #0
 8009e56:	f7fa ffe7 	bl	8004e28 <pbuf_alloc>
 8009e5a:	6178      	str	r0, [r7, #20]
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f000 8151 	beq.w	800a106 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009e64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	441a      	add	r2, r3
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	2200      	movs	r2, #0
 8009e78:	4619      	mov	r1, r3
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	f7fa ffd4 	bl	8004e28 <pbuf_alloc>
 8009e80:	6338      	str	r0, [r7, #48]	@ 0x30
 8009e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8009e88:	6978      	ldr	r0, [r7, #20]
 8009e8a:	f7fb fb45 	bl	8005518 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8009e8e:	e13d      	b.n	800a10c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009e90:	6979      	ldr	r1, [r7, #20]
 8009e92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e94:	f7fb fc0c 	bl	80056b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8009e98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e9a:	f7fb fbd1 	bl	8005640 <pbuf_clen>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009eac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009eb0:	2b09      	cmp	r3, #9
 8009eb2:	d805      	bhi.n	8009ec0 <tcp_write+0x400>
 8009eb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009eb8:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d903      	bls.n	8009ec8 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009ec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ec2:	f7fb fb29 	bl	8005518 <pbuf_free>
      goto memerr;
 8009ec6:	e121      	b.n	800a10c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009ecc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009ed0:	441a      	add	r2, r3
 8009ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ed6:	9300      	str	r3, [sp, #0]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ede:	68f8      	ldr	r0, [r7, #12]
 8009ee0:	f7ff fc90 	bl	8009804 <tcp_create_segment>
 8009ee4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 810e 	beq.w	800a10a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8009eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <tcp_write+0x43a>
      queue = seg;
 8009ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef8:	e00c      	b.n	8009f14 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8009efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d106      	bne.n	8009f0e <tcp_write+0x44e>
 8009f00:	4b53      	ldr	r3, [pc, #332]	@ (800a050 <tcp_write+0x590>)
 8009f02:	f240 2285 	movw	r2, #645	@ 0x285
 8009f06:	4956      	ldr	r1, [pc, #344]	@ (800a060 <tcp_write+0x5a0>)
 8009f08:	4853      	ldr	r0, [pc, #332]	@ (800a058 <tcp_write+0x598>)
 8009f0a:	f003 fd27 	bl	800d95c <iprintf>
      prev_seg->next = seg;
 8009f0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f12:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8009f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f16:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8009f18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f1c:	8b3b      	ldrh	r3, [r7, #24]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8009f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8009f28:	88fb      	ldrh	r3, [r7, #6]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	f4ff af38 	bcc.w	8009da0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009f30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d02c      	beq.n	8009f90 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f3c:	e01e      	b.n	8009f7c <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8009f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f40:	891a      	ldrh	r2, [r3, #8]
 8009f42:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f44:	4413      	add	r3, r2
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8009f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d110      	bne.n	8009f76 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f5a:	8952      	ldrh	r2, [r2, #10]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f003 fdf5 	bl	800db52 <memcpy>
        p->len += oversize_used;
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	895a      	ldrh	r2, [r3, #10]
 8009f6c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f6e:	4413      	add	r3, r2
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f74:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1dd      	bne.n	8009f3e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8009f82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f84:	891a      	ldrh	r2, [r3, #8]
 8009f86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f88:	4413      	add	r3, r2
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f8e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009f90:	8a7a      	ldrh	r2, [r7, #18]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8009f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d018      	beq.n	8009fd0 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8009f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <tcp_write+0x4f2>
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	@ (800a050 <tcp_write+0x590>)
 8009fa6:	f240 22ba 	movw	r2, #698	@ 0x2ba
 8009faa:	492e      	ldr	r1, [pc, #184]	@ (800a064 <tcp_write+0x5a4>)
 8009fac:	482a      	ldr	r0, [pc, #168]	@ (800a058 <tcp_write+0x598>)
 8009fae:	f003 fcd5 	bl	800d95c <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7fb fb79 	bl	80056b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8009fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fc0:	891a      	ldrh	r2, [r3, #8]
 8009fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fcc:	811a      	strh	r2, [r3, #8]
 8009fce:	e037      	b.n	800a040 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8009fd0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d034      	beq.n	800a040 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8009fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d003      	beq.n	8009fe4 <tcp_write+0x524>
 8009fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <tcp_write+0x532>
 8009fe4:	4b1a      	ldr	r3, [pc, #104]	@ (800a050 <tcp_write+0x590>)
 8009fe6:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 8009fea:	491f      	ldr	r1, [pc, #124]	@ (800a068 <tcp_write+0x5a8>)
 8009fec:	481a      	ldr	r0, [pc, #104]	@ (800a058 <tcp_write+0x598>)
 8009fee:	f003 fcb5 	bl	800d95c <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8009ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ff8:	e009      	b.n	800a00e <tcp_write+0x54e>
      p->tot_len += extendlen;
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	891a      	ldrh	r2, [r3, #8]
 8009ffe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a000:	4413      	add	r3, r2
 800a002:	b29a      	uxth	r2, r3
 800a004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a006:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f1      	bne.n	8009ffa <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	891a      	ldrh	r2, [r3, #8]
 800a01a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a01c:	4413      	add	r3, r2
 800a01e:	b29a      	uxth	r2, r3
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a022:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a026:	895a      	ldrh	r2, [r3, #10]
 800a028:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a02a:	4413      	add	r3, r2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a034:	891a      	ldrh	r2, [r3, #8]
 800a036:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a038:	4413      	add	r3, r2
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a03e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a042:	2b00      	cmp	r3, #0
 800a044:	d112      	bne.n	800a06c <tcp_write+0x5ac>
    pcb->unsent = queue;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a04a:	669a      	str	r2, [r3, #104]	@ 0x68
 800a04c:	e011      	b.n	800a072 <tcp_write+0x5b2>
 800a04e:	bf00      	nop
 800a050:	0800fb54 	.word	0x0800fb54
 800a054:	0800fd64 	.word	0x0800fd64
 800a058:	0800fbb8 	.word	0x0800fbb8
 800a05c:	0800fda4 	.word	0x0800fda4
 800a060:	0800fdb4 	.word	0x0800fdb4
 800a064:	0800fdc8 	.word	0x0800fdc8
 800a068:	0800fe00 	.word	0x0800fe00
  } else {
    last_unsent->next = queue;
 800a06c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a06e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a070:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a076:	88fb      	ldrh	r3, [r7, #6]
 800a078:	441a      	add	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_buf -= len;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  pcb->snd_queuelen = queuelen;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a096:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00e      	beq.n	800a0c2 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <tcp_write+0x602>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <tcp_write+0x602>
 800a0b4:	4b2c      	ldr	r3, [pc, #176]	@ (800a168 <tcp_write+0x6a8>)
 800a0b6:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800a0ba:	492c      	ldr	r1, [pc, #176]	@ (800a16c <tcp_write+0x6ac>)
 800a0bc:	482c      	ldr	r0, [pc, #176]	@ (800a170 <tcp_write+0x6b0>)
 800a0be:	f003 fc4d 	bl	800d95c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d016      	beq.n	800a0f6 <tcp_write+0x636>
 800a0c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d012      	beq.n	800a0f6 <tcp_write+0x636>
 800a0d0:	797b      	ldrb	r3, [r7, #5]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10d      	bne.n	800a0f6 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a0da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	899b      	ldrh	r3, [r3, #12]
 800a0e0:	b29c      	uxth	r4, r3
 800a0e2:	2008      	movs	r0, #8
 800a0e4:	f7fa f907 	bl	80042f6 <lwip_htons>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	4322      	orrs	r2, r4
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e031      	b.n	800a15e <tcp_write+0x69e>
          goto memerr;
 800a0fa:	bf00      	nop
 800a0fc:	e006      	b.n	800a10c <tcp_write+0x64c>
            goto memerr;
 800a0fe:	bf00      	nop
 800a100:	e004      	b.n	800a10c <tcp_write+0x64c>
        goto memerr;
 800a102:	bf00      	nop
 800a104:	e002      	b.n	800a10c <tcp_write+0x64c>
        goto memerr;
 800a106:	bf00      	nop
 800a108:	e000      	b.n	800a10c <tcp_write+0x64c>
      goto memerr;
 800a10a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	7e9b      	ldrb	r3, [r3, #26]
 800a110:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a114:	b2da      	uxtb	r2, r3
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <tcp_write+0x666>
    pbuf_free(concat_p);
 800a120:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a122:	f7fb f9f9 	bl	8005518 <pbuf_free>
  }
  if (queue != NULL) {
 800a126:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <tcp_write+0x672>
    tcp_segs_free(queue);
 800a12c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800a12e:	f7fc fcf8 	bl	8006b22 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00e      	beq.n	800a15a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <tcp_write+0x69a>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d106      	bne.n	800a15a <tcp_write+0x69a>
 800a14c:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <tcp_write+0x6a8>)
 800a14e:	f240 3201 	movw	r2, #769	@ 0x301
 800a152:	4906      	ldr	r1, [pc, #24]	@ (800a16c <tcp_write+0x6ac>)
 800a154:	4806      	ldr	r0, [pc, #24]	@ (800a170 <tcp_write+0x6b0>)
 800a156:	f003 fc01 	bl	800d95c <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a15a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a15e:	4618      	mov	r0, r3
 800a160:	375c      	adds	r7, #92	@ 0x5c
 800a162:	46bd      	mov	sp, r7
 800a164:	bd90      	pop	{r4, r7, pc}
 800a166:	bf00      	nop
 800a168:	0800fb54 	.word	0x0800fb54
 800a16c:	0800fe38 	.word	0x0800fe38
 800a170:	0800fbb8 	.word	0x0800fbb8

0800a174 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	@ 0x28
 800a178:	af02      	add	r7, sp, #8
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a184:	2300      	movs	r3, #0
 800a186:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a188:	78fb      	ldrb	r3, [r7, #3]
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <tcp_enqueue_flags+0x2c>
 800a192:	4b6f      	ldr	r3, [pc, #444]	@ (800a350 <tcp_enqueue_flags+0x1dc>)
 800a194:	f240 321a 	movw	r2, #794	@ 0x31a
 800a198:	496e      	ldr	r1, [pc, #440]	@ (800a354 <tcp_enqueue_flags+0x1e0>)
 800a19a:	486f      	ldr	r0, [pc, #444]	@ (800a358 <tcp_enqueue_flags+0x1e4>)
 800a19c:	f003 fbde 	bl	800d95c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	d806      	bhi.n	800a1b8 <tcp_enqueue_flags+0x44>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1b0:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d90e      	bls.n	800a1d6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7e9b      	ldrb	r3, [r3, #26]
 800a1c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d4:	e0b7      	b.n	800a346 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800a1d6:	78fb      	ldrb	r3, [r7, #3]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a1e4:	7ffb      	ldrb	r3, [r7, #31]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	f003 0304 	and.w	r3, r3, #4
 800a1ee:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	f7fa fe15 	bl	8004e28 <pbuf_alloc>
 800a1fe:	6138      	str	r0, [r7, #16]
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d109      	bne.n	800a21a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	7e9b      	ldrb	r3, [r3, #26]
 800a20a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a214:	f04f 33ff 	mov.w	r3, #4294967295
 800a218:	e095      	b.n	800a346 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	895a      	ldrh	r2, [r3, #10]
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	b29b      	uxth	r3, r3
 800a222:	429a      	cmp	r2, r3
 800a224:	d206      	bcs.n	800a234 <tcp_enqueue_flags+0xc0>
 800a226:	4b4a      	ldr	r3, [pc, #296]	@ (800a350 <tcp_enqueue_flags+0x1dc>)
 800a228:	f44f 7250 	mov.w	r2, #832	@ 0x340
 800a22c:	494b      	ldr	r1, [pc, #300]	@ (800a35c <tcp_enqueue_flags+0x1e8>)
 800a22e:	484a      	ldr	r0, [pc, #296]	@ (800a358 <tcp_enqueue_flags+0x1e4>)
 800a230:	f003 fb94 	bl	800d95c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	7ffb      	ldrb	r3, [r7, #31]
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	460b      	mov	r3, r1
 800a240:	6939      	ldr	r1, [r7, #16]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fade 	bl	8009804 <tcp_create_segment>
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d109      	bne.n	800a264 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	7e9b      	ldrb	r3, [r3, #26]
 800a254:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	e070      	b.n	800a346 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <tcp_enqueue_flags+0x10a>
 800a270:	4b37      	ldr	r3, [pc, #220]	@ (800a350 <tcp_enqueue_flags+0x1dc>)
 800a272:	f240 3249 	movw	r2, #841	@ 0x349
 800a276:	493a      	ldr	r1, [pc, #232]	@ (800a360 <tcp_enqueue_flags+0x1ec>)
 800a278:	4837      	ldr	r0, [pc, #220]	@ (800a358 <tcp_enqueue_flags+0x1e4>)
 800a27a:	f003 fb6f 	bl	800d95c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	891b      	ldrh	r3, [r3, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d006      	beq.n	800a294 <tcp_enqueue_flags+0x120>
 800a286:	4b32      	ldr	r3, [pc, #200]	@ (800a350 <tcp_enqueue_flags+0x1dc>)
 800a288:	f240 324a 	movw	r2, #842	@ 0x34a
 800a28c:	4935      	ldr	r1, [pc, #212]	@ (800a364 <tcp_enqueue_flags+0x1f0>)
 800a28e:	4832      	ldr	r0, [pc, #200]	@ (800a358 <tcp_enqueue_flags+0x1e4>)
 800a290:	f003 fb64 	bl	800d95c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	669a      	str	r2, [r3, #104]	@ 0x68
 800a2a2:	e00d      	b.n	800a2c0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	e002      	b.n	800a2b2 <tcp_enqueue_flags+0x13e>
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f8      	bne.n	800a2ac <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <tcp_enqueue_flags+0x168>
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d006      	beq.n	800a2fe <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	7e9b      	ldrb	r3, [r3, #26]
 800a2f4:	f043 0320 	orr.w	r3, r3, #32
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	4618      	mov	r0, r3
 800a304:	f7fb f99c 	bl	8005640 <pbuf_clen>
 800a308:	4603      	mov	r3, r0
 800a30a:	461a      	mov	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a312:	4413      	add	r3, r2
 800a314:	b29a      	uxth	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00e      	beq.n	800a344 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <tcp_enqueue_flags+0x1d0>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a332:	2b00      	cmp	r3, #0
 800a334:	d106      	bne.n	800a344 <tcp_enqueue_flags+0x1d0>
 800a336:	4b06      	ldr	r3, [pc, #24]	@ (800a350 <tcp_enqueue_flags+0x1dc>)
 800a338:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a33c:	490a      	ldr	r1, [pc, #40]	@ (800a368 <tcp_enqueue_flags+0x1f4>)
 800a33e:	4806      	ldr	r0, [pc, #24]	@ (800a358 <tcp_enqueue_flags+0x1e4>)
 800a340:	f003 fb0c 	bl	800d95c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3720      	adds	r7, #32
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	0800fb54 	.word	0x0800fb54
 800a354:	0800fe58 	.word	0x0800fe58
 800a358:	0800fbb8 	.word	0x0800fbb8
 800a35c:	0800feb0 	.word	0x0800feb0
 800a360:	0800feec 	.word	0x0800feec
 800a364:	0800ff04 	.word	0x0800ff04
 800a368:	0800ff30 	.word	0x0800ff30

0800a36c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a36c:	b590      	push	{r4, r7, lr}
 800a36e:	b08b      	sub	sp, #44	@ 0x2c
 800a370:	af04      	add	r7, sp, #16
 800a372:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a378:	7dbb      	ldrb	r3, [r7, #22]
 800a37a:	b29c      	uxth	r4, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a380:	4618      	mov	r0, r3
 800a382:	f7f9 ffc5 	bl	8004310 <lwip_htonl>
 800a386:	4603      	mov	r3, r0
 800a388:	2200      	movs	r2, #0
 800a38a:	4621      	mov	r1, r4
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7ff f97f 	bl	8009690 <tcp_output_alloc_header>
 800a392:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7e9b      	ldrb	r3, [r3, #26]
 800a39e:	f043 0303 	orr.w	r3, r3, #3
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a3a8:	f06f 0301 	mvn.w	r3, #1
 800a3ac:	e036      	b.n	800a41c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 f81c 	bl	800c3f0 <ip4_route>
 800a3b8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800a3c0:	23fc      	movs	r3, #252	@ 0xfc
 800a3c2:	75fb      	strb	r3, [r7, #23]
 800a3c4:	e012      	b.n	800a3ec <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	1d18      	adds	r0, r3, #4
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	7a9c      	ldrb	r4, [r3, #10]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7a5b      	ldrb	r3, [r3, #9]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	9202      	str	r2, [sp, #8]
 800a3d8:	2206      	movs	r2, #6
 800a3da:	9201      	str	r2, [sp, #4]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4623      	mov	r3, r4
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6938      	ldr	r0, [r7, #16]
 800a3e4:	f002 f9ac 	bl	800c740 <ip4_output_if>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a3ec:	6938      	ldr	r0, [r7, #16]
 800a3ee:	f7fb f893 	bl	8005518 <pbuf_free>

  if (err != ERR_OK) {
 800a3f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d007      	beq.n	800a40a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7e9b      	ldrb	r3, [r3, #26]
 800a3fe:	f043 0303 	orr.w	r3, r3, #3
 800a402:	b2da      	uxtb	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	769a      	strb	r2, [r3, #26]
 800a408:	e006      	b.n	800a418 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	7e9b      	ldrb	r3, [r3, #26]
 800a40e:	f023 0303 	bic.w	r3, r3, #3
 800a412:	b2da      	uxtb	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800a418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	bd90      	pop	{r4, r7, pc}

0800a424 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a424:	b5b0      	push	{r4, r5, r7, lr}
 800a426:	b08a      	sub	sp, #40	@ 0x28
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	7d1b      	ldrb	r3, [r3, #20]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d106      	bne.n	800a442 <tcp_output+0x1e>
 800a434:	4b99      	ldr	r3, [pc, #612]	@ (800a69c <tcp_output+0x278>)
 800a436:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800a43a:	4999      	ldr	r1, [pc, #612]	@ (800a6a0 <tcp_output+0x27c>)
 800a43c:	4899      	ldr	r0, [pc, #612]	@ (800a6a4 <tcp_output+0x280>)
 800a43e:	f003 fa8d 	bl	800d95c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a442:	4b99      	ldr	r3, [pc, #612]	@ (800a6a8 <tcp_output+0x284>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d101      	bne.n	800a450 <tcp_output+0x2c>
    return ERR_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	e1cb      	b.n	800a7e8 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a45c:	4293      	cmp	r3, r2
 800a45e:	bf28      	it	cs
 800a460:	4613      	movcs	r3, r2
 800a462:	b29b      	uxth	r3, r3
 800a464:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7e9b      	ldrb	r3, [r3, #26]
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <tcp_output+0x84>
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00f      	beq.n	800a49e <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800a47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	4618      	mov	r0, r3
 800a486:	f7f9 ff43 	bl	8004310 <lwip_htonl>
 800a48a:	4602      	mov	r2, r0
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a494:	8912      	ldrh	r2, [r2, #8]
 800a496:	4413      	add	r3, r2
     (seg == NULL ||
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d204      	bcs.n	800a4a8 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ff64 	bl	800a36c <tcp_send_empty_ack>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	e19f      	b.n	800a7e8 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a4ae:	6a3b      	ldr	r3, [r7, #32]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800a4b4:	e002      	b.n	800a4bc <tcp_output+0x98>
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	623b      	str	r3, [r7, #32]
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1f8      	bne.n	800a4b6 <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 ff91 	bl	800c3f0 <ip4_route>
 800a4ce:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d102      	bne.n	800a4dc <tcp_output+0xb8>
    return ERR_RTE;
 800a4d6:	f06f 0303 	mvn.w	r3, #3
 800a4da:	e185      	b.n	800a7e8 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <tcp_output+0xc6>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d111      	bne.n	800a50e <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <tcp_output+0xd2>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	e000      	b.n	800a4f8 <tcp_output+0xd4>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <tcp_output+0xe2>
      return ERR_RTE;
 800a500:	f06f 0303 	mvn.w	r3, #3
 800a504:	e170      	b.n	800a7e8 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800a50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a510:	2b00      	cmp	r3, #0
 800a512:	f000 813f 	beq.w	800a794 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7f9 fef7 	bl	8004310 <lwip_htonl>
 800a522:	4602      	mov	r2, r0
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a52c:	8912      	ldrh	r2, [r2, #8]
 800a52e:	4413      	add	r3, r2
  if (seg != NULL &&
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	429a      	cmp	r2, r3
 800a534:	f080 812e 	bcs.w	800a794 <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 812a 	beq.w	800a794 <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a546:	461a      	mov	r2, r3
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f040 8122 	bne.w	800a794 <tcp_output+0x370>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f040 811d 	bne.w	800a794 <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800a560:	2b00      	cmp	r3, #0
 800a562:	f040 812c 	bne.w	800a7be <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2201      	movs	r2, #1
 800a572:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 800a576:	e122      	b.n	800a7be <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	899b      	ldrh	r3, [r3, #12]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	4618      	mov	r0, r3
 800a582:	f7f9 feb8 	bl	80042f6 <lwip_htons>
 800a586:	4603      	mov	r3, r0
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d006      	beq.n	800a59e <tcp_output+0x17a>
 800a590:	4b42      	ldr	r3, [pc, #264]	@ (800a69c <tcp_output+0x278>)
 800a592:	f240 4245 	movw	r2, #1093	@ 0x445
 800a596:	4945      	ldr	r1, [pc, #276]	@ (800a6ac <tcp_output+0x288>)
 800a598:	4842      	ldr	r0, [pc, #264]	@ (800a6a4 <tcp_output+0x280>)
 800a59a:	f003 f9df 	bl	800d95c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d01f      	beq.n	800a5e6 <tcp_output+0x1c2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7e9b      	ldrb	r3, [r3, #26]
 800a5aa:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d119      	bne.n	800a5e6 <tcp_output+0x1c2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00b      	beq.n	800a5d2 <tcp_output+0x1ae>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d110      	bne.n	800a5e6 <tcp_output+0x1c2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5c8:	891a      	ldrh	r2, [r3, #8]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d209      	bcs.n	800a5e6 <tcp_output+0x1c2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d004      	beq.n	800a5e6 <tcp_output+0x1c2>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d901      	bls.n	800a5ea <tcp_output+0x1c6>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <tcp_output+0x1c8>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d106      	bne.n	800a5fe <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	7e9b      	ldrb	r3, [r3, #26]
 800a5f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 80e2 	beq.w	800a7c2 <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7d1b      	ldrb	r3, [r3, #20]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d00d      	beq.n	800a622 <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29c      	uxth	r4, r3
 800a60e:	2010      	movs	r0, #16
 800a610:	f7f9 fe71 	bl	80042f6 <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	461a      	mov	r2, r3
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	4322      	orrs	r2, r4
 800a61e:	b292      	uxth	r2, r2
 800a620:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a628:	f000 f8e2 	bl	800a7f0 <tcp_output_segment>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d009      	beq.n	800a64c <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	7e9b      	ldrb	r3, [r3, #26]
 800a63c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a640:	b2da      	uxtb	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	769a      	strb	r2, [r3, #26]
      return err;
 800a646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a64a:	e0cd      	b.n	800a7e8 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800a64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7d1b      	ldrb	r3, [r3, #20]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d006      	beq.n	800a66a <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	7e9b      	ldrb	r3, [r3, #26]
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	b2da      	uxtb	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4618      	mov	r0, r3
 800a672:	f7f9 fe4d 	bl	8004310 <lwip_htonl>
 800a676:	4604      	mov	r4, r0
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	461d      	mov	r5, r3
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	899b      	ldrh	r3, [r3, #12]
 800a684:	b29b      	uxth	r3, r3
 800a686:	4618      	mov	r0, r3
 800a688:	f7f9 fe35 	bl	80042f6 <lwip_htons>
 800a68c:	4603      	mov	r3, r0
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00c      	beq.n	800a6b0 <tcp_output+0x28c>
 800a696:	2301      	movs	r3, #1
 800a698:	e00b      	b.n	800a6b2 <tcp_output+0x28e>
 800a69a:	bf00      	nop
 800a69c:	0800fb54 	.word	0x0800fb54
 800a6a0:	0800ff58 	.word	0x0800ff58
 800a6a4:	0800fbb8 	.word	0x0800fbb8
 800a6a8:	20007f50 	.word	0x20007f50
 800a6ac:	0800ff80 	.word	0x0800ff80
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	442b      	add	r3, r5
 800a6b4:	4423      	add	r3, r4
 800a6b6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	da02      	bge.n	800a6ca <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	891b      	ldrh	r3, [r3, #8]
 800a6ce:	461c      	mov	r4, r3
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	899b      	ldrh	r3, [r3, #12]
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7f9 fe0c 	bl	80042f6 <lwip_htons>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f003 0303 	and.w	r3, r3, #3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <tcp_output+0x2c8>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e000      	b.n	800a6ee <tcp_output+0x2ca>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	4423      	add	r3, r4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d049      	beq.n	800a788 <tcp_output+0x364>
      seg->next = NULL;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <tcp_output+0x2ea>
        pcb->unacked = seg;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a706:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	623b      	str	r3, [r7, #32]
 800a70c:	e03f      	b.n	800a78e <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a710:	68db      	ldr	r3, [r3, #12]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	4618      	mov	r0, r3
 800a716:	f7f9 fdfb 	bl	8004310 <lwip_htonl>
 800a71a:	4604      	mov	r4, r0
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	4618      	mov	r0, r3
 800a724:	f7f9 fdf4 	bl	8004310 <lwip_htonl>
 800a728:	4603      	mov	r3, r0
 800a72a:	1ae3      	subs	r3, r4, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	da24      	bge.n	800a77a <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	336c      	adds	r3, #108	@ 0x6c
 800a734:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a736:	e002      	b.n	800a73e <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d011      	beq.n	800a76a <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7f9 fdde 	bl	8004310 <lwip_htonl>
 800a754:	4604      	mov	r4, r0
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7f9 fdd7 	bl	8004310 <lwip_htonl>
 800a762:	4603      	mov	r3, r0
 800a764:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a766:	2b00      	cmp	r3, #0
 800a768:	dbe6      	blt.n	800a738 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a770:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e009      	b.n	800a78e <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a77e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	623b      	str	r3, [r7, #32]
 800a786:	e002      	b.n	800a78e <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a78a:	f7fc f9df 	bl	8006b4c <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a792:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a796:	2b00      	cmp	r3, #0
 800a798:	d015      	beq.n	800a7c6 <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	685b      	ldr	r3, [r3, #4]
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7f9 fdb5 	bl	8004310 <lwip_htonl>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7b0:	8912      	ldrh	r2, [r2, #8]
 800a7b2:	4413      	add	r3, r2
  while (seg != NULL &&
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	f4bf aede 	bcs.w	800a578 <tcp_output+0x154>
  }
output_done:
 800a7bc:	e003      	b.n	800a7c6 <tcp_output+0x3a2>
    goto output_done;
 800a7be:	bf00      	nop
 800a7c0:	e002      	b.n	800a7c8 <tcp_output+0x3a4>
      break;
 800a7c2:	bf00      	nop
 800a7c4:	e000      	b.n	800a7c8 <tcp_output+0x3a4>
output_done:
 800a7c6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d103      	bne.n	800a7d8 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7e9b      	ldrb	r3, [r3, #26]
 800a7dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3728      	adds	r7, #40	@ 0x28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bdb0      	pop	{r4, r5, r7, pc}

0800a7f0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a7f0:	b5b0      	push	{r4, r5, r7, lr}
 800a7f2:	b08c      	sub	sp, #48	@ 0x30
 800a7f4:	af04      	add	r7, sp, #16
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	89db      	ldrh	r3, [r3, #14]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d001      	beq.n	800a80a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e08a      	b.n	800a920 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	68dc      	ldr	r4, [r3, #12]
 800a812:	4610      	mov	r0, r2
 800a814:	f7f9 fd7c 	bl	8004310 <lwip_htonl>
 800a818:	4603      	mov	r3, r0
 800a81a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	68dc      	ldr	r4, [r3, #12]
 800a824:	4610      	mov	r0, r2
 800a826:	f7f9 fd66 	bl	80042f6 <lwip_htons>
 800a82a:	4603      	mov	r3, r0
 800a82c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800a836:	441a      	add	r2, r3
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	3314      	adds	r3, #20
 800a842:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	7a9b      	ldrb	r3, [r3, #10]
 800a848:	f003 0301 	and.w	r3, r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d014      	beq.n	800a87a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	3304      	adds	r3, #4
 800a854:	4619      	mov	r1, r3
 800a856:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800a85a:	f7fc fc7f 	bl	800715c <tcp_eff_send_mss_impl>
 800a85e:	4603      	mov	r3, r0
 800a860:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a862:	8b7b      	ldrh	r3, [r7, #26]
 800a864:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800a868:	4618      	mov	r0, r3
 800a86a:	f7f9 fd51 	bl	8004310 <lwip_htonl>
 800a86e:	4602      	mov	r2, r0
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	3304      	adds	r3, #4
 800a878:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a880:	2b00      	cmp	r3, #0
 800a882:	da02      	bge.n	800a88a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10c      	bne.n	800a8ac <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800a892:	4b25      	ldr	r3, [pc, #148]	@ (800a928 <tcp_output_segment+0x138>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7f9 fd35 	bl	8004310 <lwip_htonl>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	68da      	ldr	r2, [r3, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	8959      	ldrh	r1, [r3, #10]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	8b3a      	ldrh	r2, [r7, #24]
 800a8c6:	1a8a      	subs	r2, r1, r2
 800a8c8:	b292      	uxth	r2, r2
 800a8ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	8919      	ldrh	r1, [r3, #8]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	8b3a      	ldrh	r2, [r7, #24]
 800a8d8:	1a8a      	subs	r2, r1, r2
 800a8da:	b292      	uxth	r2, r2
 800a8dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	68d2      	ldr	r2, [r2, #12]
 800a8e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	741a      	strb	r2, [r3, #16]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6858      	ldr	r0, [r3, #4]
 800a8f8:	68b9      	ldr	r1, [r7, #8]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	1d1c      	adds	r4, r3, #4
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	7a9d      	ldrb	r5, [r3, #10]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	7a5b      	ldrb	r3, [r3, #9]
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	9202      	str	r2, [sp, #8]
 800a90a:	2206      	movs	r2, #6
 800a90c:	9201      	str	r2, [sp, #4]
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	462b      	mov	r3, r5
 800a912:	4622      	mov	r2, r4
 800a914:	f001 ff14 	bl	800c740 <ip4_output_if>
 800a918:	4603      	mov	r3, r0
 800a91a:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a91c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3720      	adds	r7, #32
 800a924:	46bd      	mov	sp, r7
 800a926:	bdb0      	pop	{r4, r5, r7, pc}
 800a928:	20007f04 	.word	0x20007f04

0800a92c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08c      	sub	sp, #48	@ 0x30
 800a930:	af04      	add	r7, sp, #16
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	607a      	str	r2, [r7, #4]
 800a938:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a93a:	2200      	movs	r2, #0
 800a93c:	2114      	movs	r1, #20
 800a93e:	2001      	movs	r0, #1
 800a940:	f7fa fa72 	bl	8004e28 <pbuf_alloc>
 800a944:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d05b      	beq.n	800aa04 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	895b      	ldrh	r3, [r3, #10]
 800a950:	2b13      	cmp	r3, #19
 800a952:	d806      	bhi.n	800a962 <tcp_rst+0x36>
 800a954:	4b2d      	ldr	r3, [pc, #180]	@ (800aa0c <tcp_rst+0xe0>)
 800a956:	f240 524c 	movw	r2, #1356	@ 0x54c
 800a95a:	492d      	ldr	r1, [pc, #180]	@ (800aa10 <tcp_rst+0xe4>)
 800a95c:	482d      	ldr	r0, [pc, #180]	@ (800aa14 <tcp_rst+0xe8>)
 800a95e:	f002 fffd 	bl	800d95c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a968:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f9 fcc3 	bl	80042f6 <lwip_htons>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a978:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7f9 fcbb 	bl	80042f6 <lwip_htons>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7f9 fcc1 	bl	8004310 <lwip_htonl>
 800a98e:	4602      	mov	r2, r0
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f7f9 fcbb 	bl	8004310 <lwip_htonl>
 800a99a:	4602      	mov	r2, r0
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a9a0:	f245 0014 	movw	r0, #20500	@ 0x5014
 800a9a4:	f7f9 fca7 	bl	80042f6 <lwip_htons>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f042 0208 	orr.w	r2, r2, #8
 800a9b8:	739a      	strb	r2, [r3, #14]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a9c0:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	741a      	strb	r2, [r3, #16]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	749a      	strb	r2, [r3, #18]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a9d6:	6838      	ldr	r0, [r7, #0]
 800a9d8:	f001 fd0a 	bl	800c3f0 <ip4_route>
 800a9dc:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	9302      	str	r3, [sp, #8]
 800a9e8:	2306      	movs	r3, #6
 800a9ea:	9301      	str	r3, [sp, #4]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	23ff      	movs	r3, #255	@ 0xff
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	6879      	ldr	r1, [r7, #4]
 800a9f6:	69f8      	ldr	r0, [r7, #28]
 800a9f8:	f001 fea2 	bl	800c740 <ip4_output_if>
  }
  pbuf_free(p);
 800a9fc:	69f8      	ldr	r0, [r7, #28]
 800a9fe:	f7fa fd8b 	bl	8005518 <pbuf_free>
 800aa02:	e000      	b.n	800aa06 <tcp_rst+0xda>
    return;
 800aa04:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800aa06:	3720      	adds	r7, #32
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	0800fb54 	.word	0x0800fb54
 800aa10:	0800fb88 	.word	0x0800fb88
 800aa14:	0800fbb8 	.word	0x0800fbb8

0800aa18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d029      	beq.n	800aa7c <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e002      	b.n	800aa36 <tcp_rexmit_rto+0x1e>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f8      	bne.n	800aa30 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa5a:	2bff      	cmp	r3, #255	@ 0xff
 800aa5c:	d007      	beq.n	800aa6e <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa64:	3301      	adds	r3, #1
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff fcd5 	bl	800a424 <tcp_output>
 800aa7a:	e000      	b.n	800aa7e <tcp_rexmit_rto+0x66>
    return;
 800aa7c:	bf00      	nop
}
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800aa84:	b590      	push	{r4, r7, lr}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d043      	beq.n	800ab1c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa98:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3368      	adds	r3, #104	@ 0x68
 800aaa6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aaa8:	e002      	b.n	800aab0 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d011      	beq.n	800aadc <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7f9 fc25 	bl	8004310 <lwip_htonl>
 800aac6:	4604      	mov	r4, r0
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f9 fc1e 	bl	8004310 <lwip_htonl>
 800aad4:	4603      	mov	r3, r0
 800aad6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dbe6      	blt.n	800aaaa <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d103      	bne.n	800aafa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab00:	2bff      	cmp	r3, #255	@ 0xff
 800ab02:	d007      	beq.n	800ab14 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	b2da      	uxtb	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	635a      	str	r2, [r3, #52]	@ 0x34
 800ab1a:	e000      	b.n	800ab1e <tcp_rexmit+0x9a>
    return;
 800ab1c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd90      	pop	{r4, r7, pc}

0800ab24 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d041      	beq.n	800abb8 <tcp_rexmit_fast+0x94>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	7e9b      	ldrb	r3, [r3, #26]
 800ab38:	f003 0304 	and.w	r3, r3, #4
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d13b      	bne.n	800abb8 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff ff9f 	bl	800aa84 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ab52:	4293      	cmp	r3, r2
 800ab54:	bf28      	it	cs
 800ab56:	4613      	movcs	r3, r2
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	0fda      	lsrs	r2, r3, #31
 800ab5c:	4413      	add	r3, r2
 800ab5e:	105b      	asrs	r3, r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ab6e:	461a      	mov	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d206      	bcs.n	800ab88 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab92:	4619      	mov	r1, r3
 800ab94:	0049      	lsls	r1, r1, #1
 800ab96:	440b      	add	r3, r1
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	7e9b      	ldrb	r3, [r3, #26]
 800aba8:	f043 0304 	orr.w	r3, r3, #4
 800abac:	b2da      	uxtb	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08a      	sub	sp, #40	@ 0x28
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abcc:	3b01      	subs	r3, #1
 800abce:	4618      	mov	r0, r3
 800abd0:	f7f9 fb9e 	bl	8004310 <lwip_htonl>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2200      	movs	r2, #0
 800abd8:	2100      	movs	r1, #0
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7fe fd58 	bl	8009690 <tcp_output_alloc_header>
 800abe0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800abe8:	f04f 33ff 	mov.w	r3, #4294967295
 800abec:	e021      	b.n	800ac32 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fbfc 	bl	800c3f0 <ip4_route>
 800abf8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800ac00:	23fc      	movs	r3, #252	@ 0xfc
 800ac02:	75fb      	strb	r3, [r7, #23]
 800ac04:	e010      	b.n	800ac28 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800ac06:	6879      	ldr	r1, [r7, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	1d1a      	adds	r2, r3, #4
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7a98      	ldrb	r0, [r3, #10]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	9302      	str	r3, [sp, #8]
 800ac14:	2306      	movs	r3, #6
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	2300      	movs	r3, #0
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f001 fd8e 	bl	800c740 <ip4_output_if>
 800ac24:	4603      	mov	r3, r0
 800ac26:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ac28:	6938      	ldr	r0, [r7, #16]
 800ac2a:	f7fa fc75 	bl	8005518 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ac2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ac3a:	b590      	push	{r4, r7, lr}
 800ac3c:	b08f      	sub	sp, #60	@ 0x3c
 800ac3e:	af04      	add	r7, sp, #16
 800ac40:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac46:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800ac48:	6a3b      	ldr	r3, [r7, #32]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d102      	bne.n	800ac54 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ac52:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800ac54:	6a3b      	ldr	r3, [r7, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	e085      	b.n	800ad6a <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	899b      	ldrh	r3, [r3, #12]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7f9 fb45 	bl	80042f6 <lwip_htons>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f003 0301 	and.w	r3, r3, #1
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d005      	beq.n	800ac82 <tcp_zero_window_probe+0x48>
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	891b      	ldrh	r3, [r3, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <tcp_zero_window_probe+0x48>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <tcp_zero_window_probe+0x4a>
 800ac82:	2300      	movs	r3, #0
 800ac84:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ac86:	7ffb      	ldrb	r3, [r7, #31]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bf0c      	ite	eq
 800ac8c:	2301      	moveq	r3, #1
 800ac8e:	2300      	movne	r3, #0
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	8bba      	ldrh	r2, [r7, #28]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7fe fcf6 	bl	8009690 <tcp_output_alloc_header>
 800aca4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e05b      	b.n	800ad6a <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800acb8:	7ffb      	ldrb	r3, [r7, #31]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00e      	beq.n	800acdc <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	899b      	ldrh	r3, [r3, #12]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800acc8:	b29c      	uxth	r4, r3
 800acca:	2011      	movs	r0, #17
 800accc:	f7f9 fb13 	bl	80042f6 <lwip_htons>
 800acd0:	4603      	mov	r3, r0
 800acd2:	4323      	orrs	r3, r4
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	819a      	strh	r2, [r3, #12]
 800acda:	e010      	b.n	800acfe <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	3314      	adds	r3, #20
 800ace2:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	6858      	ldr	r0, [r3, #4]
 800ace8:	6a3b      	ldr	r3, [r7, #32]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	891a      	ldrh	r2, [r3, #8]
 800acee:	6a3b      	ldr	r3, [r7, #32]
 800acf0:	891b      	ldrh	r3, [r3, #8]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2201      	movs	r2, #1
 800acf8:	6939      	ldr	r1, [r7, #16]
 800acfa:	f7fa fdfb 	bl	80058f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7f9 fb03 	bl	8004310 <lwip_htonl>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	3301      	adds	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	1ad3      	subs	r3, r2, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	da02      	bge.n	800ad22 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 fb62 	bl	800c3f0 <ip4_route>
 800ad2c:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d103      	bne.n	800ad3c <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800ad34:	23fc      	movs	r3, #252	@ 0xfc
 800ad36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad3a:	e011      	b.n	800ad60 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ad3c:	6879      	ldr	r1, [r7, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	1d1a      	adds	r2, r3, #4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7a98      	ldrb	r0, [r3, #10]
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	9302      	str	r3, [sp, #8]
 800ad4a:	2306      	movs	r3, #6
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4603      	mov	r3, r0
 800ad54:	69b8      	ldr	r0, [r7, #24]
 800ad56:	f001 fcf3 	bl	800c740 <ip4_output_if>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800ad60:	69b8      	ldr	r0, [r7, #24]
 800ad62:	f7fa fbd9 	bl	8005518 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ad66:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	372c      	adds	r7, #44	@ 0x2c
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
	...

0800ad74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ad7c:	f7fa fecc 	bl	8005b18 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ad80:	4b0a      	ldr	r3, [pc, #40]	@ (800adac <tcpip_tcp_timer+0x38>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d103      	bne.n	800ad90 <tcpip_tcp_timer+0x1c>
 800ad88:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <tcpip_tcp_timer+0x3c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d005      	beq.n	800ad9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ad90:	2200      	movs	r2, #0
 800ad92:	4908      	ldr	r1, [pc, #32]	@ (800adb4 <tcpip_tcp_timer+0x40>)
 800ad94:	20fa      	movs	r0, #250	@ 0xfa
 800ad96:	f000 f86f 	bl	800ae78 <sys_timeout>
 800ad9a:	e003      	b.n	800ada4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ad9c:	4b06      	ldr	r3, [pc, #24]	@ (800adb8 <tcpip_tcp_timer+0x44>)
 800ad9e:	2200      	movs	r2, #0
 800ada0:	601a      	str	r2, [r3, #0]
  }
}
 800ada2:	bf00      	nop
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20007f10 	.word	0x20007f10
 800adb0:	20007f14 	.word	0x20007f14
 800adb4:	0800ad75 	.word	0x0800ad75
 800adb8:	20007f5c 	.word	0x20007f5c

0800adbc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800adc0:	4b0a      	ldr	r3, [pc, #40]	@ (800adec <tcp_timer_needed+0x30>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10f      	bne.n	800ade8 <tcp_timer_needed+0x2c>
 800adc8:	4b09      	ldr	r3, [pc, #36]	@ (800adf0 <tcp_timer_needed+0x34>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <tcp_timer_needed+0x1c>
 800add0:	4b08      	ldr	r3, [pc, #32]	@ (800adf4 <tcp_timer_needed+0x38>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d007      	beq.n	800ade8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800add8:	4b04      	ldr	r3, [pc, #16]	@ (800adec <tcp_timer_needed+0x30>)
 800adda:	2201      	movs	r2, #1
 800addc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800adde:	2200      	movs	r2, #0
 800ade0:	4905      	ldr	r1, [pc, #20]	@ (800adf8 <tcp_timer_needed+0x3c>)
 800ade2:	20fa      	movs	r0, #250	@ 0xfa
 800ade4:	f000 f848 	bl	800ae78 <sys_timeout>
  }
}
 800ade8:	bf00      	nop
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20007f5c 	.word	0x20007f5c
 800adf0:	20007f10 	.word	0x20007f10
 800adf4:	20007f14 	.word	0x20007f14
 800adf8:	0800ad75 	.word	0x0800ad75

0800adfc <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4903      	ldr	r1, [pc, #12]	@ (800ae24 <cyclic_timer+0x28>)
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f82e 	bl	800ae78 <sys_timeout>
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	0800adfd 	.word	0x0800adfd

0800ae28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ae2e:	2301      	movs	r3, #1
 800ae30:	607b      	str	r3, [r7, #4]
 800ae32:	e00e      	b.n	800ae52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800ae34:	4a0d      	ldr	r2, [pc, #52]	@ (800ae6c <sys_timeouts_init+0x44>)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	4a0a      	ldr	r2, [pc, #40]	@ (800ae6c <sys_timeouts_init+0x44>)
 800ae42:	4413      	add	r3, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	490a      	ldr	r1, [pc, #40]	@ (800ae70 <sys_timeouts_init+0x48>)
 800ae48:	f000 f816 	bl	800ae78 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	607b      	str	r3, [r7, #4]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b02      	cmp	r3, #2
 800ae56:	d9ed      	bls.n	800ae34 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800ae58:	f7f9 f9c0 	bl	80041dc <sys_now>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4a05      	ldr	r2, [pc, #20]	@ (800ae74 <sys_timeouts_init+0x4c>)
 800ae60:	6013      	str	r3, [r2, #0]
}
 800ae62:	bf00      	nop
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	08010834 	.word	0x08010834
 800ae70:	0800adfd 	.word	0x0800adfd
 800ae74:	20007f58 	.word	0x20007f58

0800ae78 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ae84:	2006      	movs	r0, #6
 800ae86:	f7f9 fddf 	bl	8004a48 <memp_malloc>
 800ae8a:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d10a      	bne.n	800aea8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f040 8084 	bne.w	800afa2 <sys_timeout+0x12a>
 800ae9a:	4b44      	ldr	r3, [pc, #272]	@ (800afac <sys_timeout+0x134>)
 800ae9c:	22d4      	movs	r2, #212	@ 0xd4
 800ae9e:	4944      	ldr	r1, [pc, #272]	@ (800afb0 <sys_timeout+0x138>)
 800aea0:	4844      	ldr	r0, [pc, #272]	@ (800afb4 <sys_timeout+0x13c>)
 800aea2:	f002 fd5b 	bl	800d95c <iprintf>
    return;
 800aea6:	e07c      	b.n	800afa2 <sys_timeout+0x12a>
  }

  now = sys_now();
 800aea8:	f7f9 f998 	bl	80041dc <sys_now>
 800aeac:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800aeae:	4b42      	ldr	r3, [pc, #264]	@ (800afb8 <sys_timeout+0x140>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d105      	bne.n	800aec2 <sys_timeout+0x4a>
    diff = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800aeba:	4a40      	ldr	r2, [pc, #256]	@ (800afbc <sys_timeout+0x144>)
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	6013      	str	r3, [r2, #0]
 800aec0:	e004      	b.n	800aecc <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800aec2:	4b3e      	ldr	r3, [pc, #248]	@ (800afbc <sys_timeout+0x144>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	2200      	movs	r2, #0
 800aed0:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	441a      	add	r2, r3
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800aee8:	4b33      	ldr	r3, [pc, #204]	@ (800afb8 <sys_timeout+0x140>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d103      	bne.n	800aef8 <sys_timeout+0x80>
    next_timeout = timeout;
 800aef0:	4a31      	ldr	r2, [pc, #196]	@ (800afb8 <sys_timeout+0x140>)
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	6013      	str	r3, [r2, #0]
    return;
 800aef6:	e055      	b.n	800afa4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800aef8:	4b2f      	ldr	r3, [pc, #188]	@ (800afb8 <sys_timeout+0x140>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	429a      	cmp	r2, r3
 800af02:	d20f      	bcs.n	800af24 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800af04:	4b2c      	ldr	r3, [pc, #176]	@ (800afb8 <sys_timeout+0x140>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6859      	ldr	r1, [r3, #4]
 800af0a:	4b2b      	ldr	r3, [pc, #172]	@ (800afb8 <sys_timeout+0x140>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	68fa      	ldr	r2, [r7, #12]
 800af10:	1a8a      	subs	r2, r1, r2
 800af12:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800af14:	4b28      	ldr	r3, [pc, #160]	@ (800afb8 <sys_timeout+0x140>)
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800af1c:	4a26      	ldr	r2, [pc, #152]	@ (800afb8 <sys_timeout+0x140>)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	e03f      	b.n	800afa4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800af24:	4b24      	ldr	r3, [pc, #144]	@ (800afb8 <sys_timeout+0x140>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	61fb      	str	r3, [r7, #28]
 800af2a:	e036      	b.n	800af9a <sys_timeout+0x122>
      timeout->time -= t->time;
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	685a      	ldr	r2, [r3, #4]
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	1ad2      	subs	r2, r2, r3
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d006      	beq.n	800af50 <sys_timeout+0xd8>
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d921      	bls.n	800af94 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d009      	beq.n	800af6c <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6859      	ldr	r1, [r3, #4]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	1a8a      	subs	r2, r1, r2
 800af68:	605a      	str	r2, [r3, #4]
 800af6a:	e00b      	b.n	800af84 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	429a      	cmp	r2, r3
 800af74:	d206      	bcs.n	800af84 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800af76:	4b10      	ldr	r3, [pc, #64]	@ (800afb8 <sys_timeout+0x140>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	441a      	add	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	697a      	ldr	r2, [r7, #20]
 800af90:	601a      	str	r2, [r3, #0]
        break;
 800af92:	e007      	b.n	800afa4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	61fb      	str	r3, [r7, #28]
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1c5      	bne.n	800af2c <sys_timeout+0xb4>
 800afa0:	e000      	b.n	800afa4 <sys_timeout+0x12c>
    return;
 800afa2:	bf00      	nop
      }
    }
  }
}
 800afa4:	3720      	adds	r7, #32
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	0800ff98 	.word	0x0800ff98
 800afb0:	0800ffcc 	.word	0x0800ffcc
 800afb4:	0801000c 	.word	0x0801000c
 800afb8:	20007f54 	.word	0x20007f54
 800afbc:	20007f58 	.word	0x20007f58

0800afc0 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800afc6:	4b24      	ldr	r3, [pc, #144]	@ (800b058 <sys_check_timeouts+0x98>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d040      	beq.n	800b050 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800afce:	f7f9 f905 	bl	80041dc <sys_now>
 800afd2:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800afd4:	4b21      	ldr	r3, [pc, #132]	@ (800b05c <sys_check_timeouts+0x9c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800afde:	4b20      	ldr	r3, [pc, #128]	@ (800b060 <sys_check_timeouts+0xa0>)
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <sys_check_timeouts+0x2c>
 800afe8:	f7f9 feee 	bl	8004dc8 <pbuf_free_ooseq>
      had_one = 0;
 800afec:	2300      	movs	r3, #0
 800afee:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800aff0:	4b19      	ldr	r3, [pc, #100]	@ (800b058 <sys_check_timeouts+0x98>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d026      	beq.n	800b04a <sys_check_timeouts+0x8a>
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	697a      	ldr	r2, [r7, #20]
 800b002:	429a      	cmp	r2, r3
 800b004:	d321      	bcc.n	800b04a <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800b006:	2301      	movs	r3, #1
 800b008:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	4b13      	ldr	r3, [pc, #76]	@ (800b05c <sys_check_timeouts+0x9c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4413      	add	r3, r2
 800b014:	4a11      	ldr	r2, [pc, #68]	@ (800b05c <sys_check_timeouts+0x9c>)
 800b016:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	697a      	ldr	r2, [r7, #20]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a0c      	ldr	r2, [pc, #48]	@ (800b058 <sys_check_timeouts+0x98>)
 800b028:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	2006      	movs	r0, #6
 800b03a:	f7f9 fd51 	bl	8004ae0 <memp_free>
        if (handler != NULL) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6838      	ldr	r0, [r7, #0]
 800b048:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800b04a:	7cfb      	ldrb	r3, [r7, #19]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1c6      	bne.n	800afde <sys_check_timeouts+0x1e>
  }
}
 800b050:	bf00      	nop
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	20007f54 	.word	0x20007f54
 800b05c:	20007f58 	.word	0x20007f58
 800b060:	20007f01 	.word	0x20007f01

0800b064 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b064:	b480      	push	{r7}
 800b066:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b068:	bf00      	nop
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr

0800b070 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	4613      	mov	r3, r2
 800b07c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d018      	beq.n	800b0b6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d013      	beq.n	800b0b2 <udp_input_local_match+0x42>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00f      	beq.n	800b0b2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b092:	4b13      	ldr	r3, [pc, #76]	@ (800b0e0 <udp_input_local_match+0x70>)
 800b094:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09a:	d00a      	beq.n	800b0b2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e0 <udp_input_local_match+0x70>)
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	405a      	eors	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	3308      	adds	r3, #8
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d110      	bne.n	800b0d4 <udp_input_local_match+0x64>
          return 1;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	e00f      	b.n	800b0d6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d009      	beq.n	800b0d0 <udp_input_local_match+0x60>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <udp_input_local_match+0x60>
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	4b05      	ldr	r3, [pc, #20]	@ (800b0e0 <udp_input_local_match+0x70>)
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d101      	bne.n	800b0d4 <udp_input_local_match+0x64>
      return 1;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bc80      	pop	{r7}
 800b0de:	4770      	bx	lr
 800b0e0:	200049a8 	.word	0x200049a8

0800b0e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b0e4:	b590      	push	{r4, r7, lr}
 800b0e6:	b08d      	sub	sp, #52	@ 0x34
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	895b      	ldrh	r3, [r3, #10]
 800b0f6:	2b07      	cmp	r3, #7
 800b0f8:	d803      	bhi.n	800b102 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f7fa fa0c 	bl	8005518 <pbuf_free>
    goto end;
 800b100:	e0c6      	b.n	800b290 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b108:	4b63      	ldr	r3, [pc, #396]	@ (800b298 <udp_input+0x1b4>)
 800b10a:	695b      	ldr	r3, [r3, #20]
 800b10c:	4a62      	ldr	r2, [pc, #392]	@ (800b298 <udp_input+0x1b4>)
 800b10e:	6812      	ldr	r2, [r2, #0]
 800b110:	4611      	mov	r1, r2
 800b112:	4618      	mov	r0, r3
 800b114:	f001 fbe6 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800b118:	4603      	mov	r3, r0
 800b11a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	b29b      	uxth	r3, r3
 800b122:	4618      	mov	r0, r3
 800b124:	f7f9 f8e7 	bl	80042f6 <lwip_htons>
 800b128:	4603      	mov	r3, r0
 800b12a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	885b      	ldrh	r3, [r3, #2]
 800b130:	b29b      	uxth	r3, r3
 800b132:	4618      	mov	r0, r3
 800b134:	f7f9 f8df 	bl	80042f6 <lwip_htons>
 800b138:	4603      	mov	r3, r0
 800b13a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b144:	2300      	movs	r3, #0
 800b146:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b148:	4b54      	ldr	r3, [pc, #336]	@ (800b29c <udp_input+0x1b8>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b14e:	e03b      	b.n	800b1c8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	8a5b      	ldrh	r3, [r3, #18]
 800b154:	89fa      	ldrh	r2, [r7, #14]
 800b156:	429a      	cmp	r2, r3
 800b158:	d131      	bne.n	800b1be <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b15a:	7cfb      	ldrb	r3, [r7, #19]
 800b15c:	461a      	mov	r2, r3
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b162:	f7ff ff85 	bl	800b070 <udp_input_local_match>
 800b166:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d028      	beq.n	800b1be <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800b16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16e:	7c1b      	ldrb	r3, [r3, #16]
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d104      	bne.n	800b182 <udp_input+0x9e>
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d101      	bne.n	800b182 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b184:	8a9b      	ldrh	r3, [r3, #20]
 800b186:	8a3a      	ldrh	r2, [r7, #16]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d118      	bne.n	800b1be <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b190:	2b00      	cmp	r3, #0
 800b192:	d005      	beq.n	800b1a0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	4b3f      	ldr	r3, [pc, #252]	@ (800b298 <udp_input+0x1b4>)
 800b19a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d10e      	bne.n	800b1be <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d014      	beq.n	800b1d0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	68da      	ldr	r2, [r3, #12]
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b1ae:	4b3b      	ldr	r3, [pc, #236]	@ (800b29c <udp_input+0x1b8>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800b1b6:	4a39      	ldr	r2, [pc, #228]	@ (800b29c <udp_input+0x1b8>)
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ba:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800b1bc:	e008      	b.n	800b1d0 <udp_input+0xec>
      }
    }

    prev = pcb;
 800b1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1c0      	bne.n	800b150 <udp_input+0x6c>
 800b1ce:	e000      	b.n	800b1d2 <udp_input+0xee>
        break;
 800b1d0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <udp_input+0xf8>
    pcb = uncon_pcb;
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <udp_input+0x104>
    for_us = 1;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	76fb      	strb	r3, [r7, #27]
 800b1e6:	e00a      	b.n	800b1fe <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	3304      	adds	r3, #4
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b298 <udp_input+0x1b4>)
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	bf0c      	ite	eq
 800b1f6:	2301      	moveq	r3, #1
 800b1f8:	2300      	movne	r3, #0
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b1fe:	7efb      	ldrb	r3, [r7, #27]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d042      	beq.n	800b28a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800b204:	f06f 0107 	mvn.w	r1, #7
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7fa f961 	bl	80054d0 <pbuf_header>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00a      	beq.n	800b22a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800b214:	4b22      	ldr	r3, [pc, #136]	@ (800b2a0 <udp_input+0x1bc>)
 800b216:	f240 1255 	movw	r2, #341	@ 0x155
 800b21a:	4922      	ldr	r1, [pc, #136]	@ (800b2a4 <udp_input+0x1c0>)
 800b21c:	4822      	ldr	r0, [pc, #136]	@ (800b2a8 <udp_input+0x1c4>)
 800b21e:	f002 fb9d 	bl	800d95c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fa f978 	bl	8005518 <pbuf_free>
      goto end;
 800b228:	e032      	b.n	800b290 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800b22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d012      	beq.n	800b256 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00a      	beq.n	800b24e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23a:	699c      	ldr	r4, [r3, #24]
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	69d8      	ldr	r0, [r3, #28]
 800b240:	8a3b      	ldrh	r3, [r7, #16]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4b19      	ldr	r3, [pc, #100]	@ (800b2ac <udp_input+0x1c8>)
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b24a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b24c:	e021      	b.n	800b292 <udp_input+0x1ae>
        pbuf_free(p);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7fa f962 	bl	8005518 <pbuf_free>
        goto end;
 800b254:	e01c      	b.n	800b290 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b256:	7cfb      	ldrb	r3, [r7, #19]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d112      	bne.n	800b282 <udp_input+0x19e>
 800b25c:	4b0e      	ldr	r3, [pc, #56]	@ (800b298 <udp_input+0x1b4>)
 800b25e:	695b      	ldr	r3, [r3, #20]
 800b260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b264:	2be0      	cmp	r3, #224	@ 0xe0
 800b266:	d00c      	beq.n	800b282 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b268:	4b0b      	ldr	r3, [pc, #44]	@ (800b298 <udp_input+0x1b4>)
 800b26a:	899b      	ldrh	r3, [r3, #12]
 800b26c:	3308      	adds	r3, #8
 800b26e:	b29b      	uxth	r3, r3
 800b270:	b21b      	sxth	r3, r3
 800b272:	4619      	mov	r1, r3
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f7fa f93d 	bl	80054f4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b27a:	2103      	movs	r1, #3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f001 f82f 	bl	800c2e0 <icmp_dest_unreach>
      pbuf_free(p);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f7fa f948 	bl	8005518 <pbuf_free>
  return;
 800b288:	e003      	b.n	800b292 <udp_input+0x1ae>
    pbuf_free(p);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7fa f944 	bl	8005518 <pbuf_free>
  return;
 800b290:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b292:	372c      	adds	r7, #44	@ 0x2c
 800b294:	46bd      	mov	sp, r7
 800b296:	bd90      	pop	{r4, r7, pc}
 800b298:	200049a8 	.word	0x200049a8
 800b29c:	20007f60 	.word	0x20007f60
 800b2a0:	08010034 	.word	0x08010034
 800b2a4:	08010064 	.word	0x08010064
 800b2a8:	08010078 	.word	0x08010078
 800b2ac:	200049b8 	.word	0x200049b8

0800b2b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01e      	beq.n	800b2fe <udp_netif_ip_addr_changed+0x4e>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01a      	beq.n	800b2fe <udp_netif_ip_addr_changed+0x4e>
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d017      	beq.n	800b2fe <udp_netif_ip_addr_changed+0x4e>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d013      	beq.n	800b2fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b308 <udp_netif_ip_addr_changed+0x58>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]
 800b2dc:	e00c      	b.n	800b2f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d103      	bne.n	800b2f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1ef      	bne.n	800b2de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b2fe:	bf00      	nop
 800b300:	3714      	adds	r7, #20
 800b302:	46bd      	mov	sp, r7
 800b304:	bc80      	pop	{r7}
 800b306:	4770      	bx	lr
 800b308:	20007f60 	.word	0x20007f60

0800b30c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b314:	4915      	ldr	r1, [pc, #84]	@ (800b36c <etharp_free_entry+0x60>)
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4613      	mov	r3, r2
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	4413      	add	r3, r2
 800b31e:	00db      	lsls	r3, r3, #3
 800b320:	440b      	add	r3, r1
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d013      	beq.n	800b350 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b328:	4910      	ldr	r1, [pc, #64]	@ (800b36c <etharp_free_entry+0x60>)
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	4613      	mov	r3, r2
 800b32e:	005b      	lsls	r3, r3, #1
 800b330:	4413      	add	r3, r2
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	440b      	add	r3, r1
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fa f8ed 	bl	8005518 <pbuf_free>
    arp_table[i].q = NULL;
 800b33e:	490b      	ldr	r1, [pc, #44]	@ (800b36c <etharp_free_entry+0x60>)
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	4613      	mov	r3, r2
 800b344:	005b      	lsls	r3, r3, #1
 800b346:	4413      	add	r3, r2
 800b348:	00db      	lsls	r3, r3, #3
 800b34a:	440b      	add	r3, r1
 800b34c:	2200      	movs	r2, #0
 800b34e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b350:	4906      	ldr	r1, [pc, #24]	@ (800b36c <etharp_free_entry+0x60>)
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	4613      	mov	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	4413      	add	r3, r2
 800b35a:	00db      	lsls	r3, r3, #3
 800b35c:	440b      	add	r3, r1
 800b35e:	3314      	adds	r3, #20
 800b360:	2200      	movs	r2, #0
 800b362:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20007f64 	.word	0x20007f64

0800b370 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b376:	2300      	movs	r3, #0
 800b378:	71fb      	strb	r3, [r7, #7]
 800b37a:	e096      	b.n	800b4aa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b37c:	79fa      	ldrb	r2, [r7, #7]
 800b37e:	494f      	ldr	r1, [pc, #316]	@ (800b4bc <etharp_tmr+0x14c>)
 800b380:	4613      	mov	r3, r2
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	4413      	add	r3, r2
 800b386:	00db      	lsls	r3, r3, #3
 800b388:	440b      	add	r3, r1
 800b38a:	3314      	adds	r3, #20
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800b390:	79bb      	ldrb	r3, [r7, #6]
 800b392:	2b00      	cmp	r3, #0
 800b394:	f000 8086 	beq.w	800b4a4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800b398:	79fa      	ldrb	r2, [r7, #7]
 800b39a:	4948      	ldr	r1, [pc, #288]	@ (800b4bc <etharp_tmr+0x14c>)
 800b39c:	4613      	mov	r3, r2
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	4413      	add	r3, r2
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	440b      	add	r3, r1
 800b3a6:	3312      	adds	r3, #18
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	b298      	uxth	r0, r3
 800b3ae:	4943      	ldr	r1, [pc, #268]	@ (800b4bc <etharp_tmr+0x14c>)
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	4413      	add	r3, r2
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	440b      	add	r3, r1
 800b3ba:	3312      	adds	r3, #18
 800b3bc:	4602      	mov	r2, r0
 800b3be:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b3c0:	79fa      	ldrb	r2, [r7, #7]
 800b3c2:	493e      	ldr	r1, [pc, #248]	@ (800b4bc <etharp_tmr+0x14c>)
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	005b      	lsls	r3, r3, #1
 800b3c8:	4413      	add	r3, r2
 800b3ca:	00db      	lsls	r3, r3, #3
 800b3cc:	440b      	add	r3, r1
 800b3ce:	3312      	adds	r3, #18
 800b3d0:	881b      	ldrh	r3, [r3, #0]
 800b3d2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b3d6:	d215      	bcs.n	800b404 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b3d8:	79fa      	ldrb	r2, [r7, #7]
 800b3da:	4938      	ldr	r1, [pc, #224]	@ (800b4bc <etharp_tmr+0x14c>)
 800b3dc:	4613      	mov	r3, r2
 800b3de:	005b      	lsls	r3, r3, #1
 800b3e0:	4413      	add	r3, r2
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	440b      	add	r3, r1
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d10f      	bne.n	800b40e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b3ee:	79fa      	ldrb	r2, [r7, #7]
 800b3f0:	4932      	ldr	r1, [pc, #200]	@ (800b4bc <etharp_tmr+0x14c>)
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	4413      	add	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3312      	adds	r3, #18
 800b3fe:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b400:	2b04      	cmp	r3, #4
 800b402:	d904      	bls.n	800b40e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	4618      	mov	r0, r3
 800b408:	f7ff ff80 	bl	800b30c <etharp_free_entry>
 800b40c:	e04a      	b.n	800b4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b40e:	79fa      	ldrb	r2, [r7, #7]
 800b410:	492a      	ldr	r1, [pc, #168]	@ (800b4bc <etharp_tmr+0x14c>)
 800b412:	4613      	mov	r3, r2
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4413      	add	r3, r2
 800b418:	00db      	lsls	r3, r3, #3
 800b41a:	440b      	add	r3, r1
 800b41c:	3314      	adds	r3, #20
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b03      	cmp	r3, #3
 800b422:	d10a      	bne.n	800b43a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b424:	79fa      	ldrb	r2, [r7, #7]
 800b426:	4925      	ldr	r1, [pc, #148]	@ (800b4bc <etharp_tmr+0x14c>)
 800b428:	4613      	mov	r3, r2
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	4413      	add	r3, r2
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	440b      	add	r3, r1
 800b432:	3314      	adds	r3, #20
 800b434:	2204      	movs	r2, #4
 800b436:	701a      	strb	r2, [r3, #0]
 800b438:	e034      	b.n	800b4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b43a:	79fa      	ldrb	r2, [r7, #7]
 800b43c:	491f      	ldr	r1, [pc, #124]	@ (800b4bc <etharp_tmr+0x14c>)
 800b43e:	4613      	mov	r3, r2
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	4413      	add	r3, r2
 800b444:	00db      	lsls	r3, r3, #3
 800b446:	440b      	add	r3, r1
 800b448:	3314      	adds	r3, #20
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d10a      	bne.n	800b466 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b450:	79fa      	ldrb	r2, [r7, #7]
 800b452:	491a      	ldr	r1, [pc, #104]	@ (800b4bc <etharp_tmr+0x14c>)
 800b454:	4613      	mov	r3, r2
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	4413      	add	r3, r2
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	440b      	add	r3, r1
 800b45e:	3314      	adds	r3, #20
 800b460:	2202      	movs	r2, #2
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	e01e      	b.n	800b4a4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b466:	79fa      	ldrb	r2, [r7, #7]
 800b468:	4914      	ldr	r1, [pc, #80]	@ (800b4bc <etharp_tmr+0x14c>)
 800b46a:	4613      	mov	r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	440b      	add	r3, r1
 800b474:	3314      	adds	r3, #20
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d113      	bne.n	800b4a4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b47c:	79fa      	ldrb	r2, [r7, #7]
 800b47e:	490f      	ldr	r1, [pc, #60]	@ (800b4bc <etharp_tmr+0x14c>)
 800b480:	4613      	mov	r3, r2
 800b482:	005b      	lsls	r3, r3, #1
 800b484:	4413      	add	r3, r2
 800b486:	00db      	lsls	r3, r3, #3
 800b488:	440b      	add	r3, r1
 800b48a:	3308      	adds	r3, #8
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	79fa      	ldrb	r2, [r7, #7]
 800b490:	4613      	mov	r3, r2
 800b492:	005b      	lsls	r3, r3, #1
 800b494:	4413      	add	r3, r2
 800b496:	00db      	lsls	r3, r3, #3
 800b498:	4a08      	ldr	r2, [pc, #32]	@ (800b4bc <etharp_tmr+0x14c>)
 800b49a:	4413      	add	r3, r2
 800b49c:	3304      	adds	r3, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f000 fe06 	bl	800c0b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4a4:	79fb      	ldrb	r3, [r7, #7]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	71fb      	strb	r3, [r7, #7]
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	2b09      	cmp	r3, #9
 800b4ae:	f67f af65 	bls.w	800b37c <etharp_tmr+0xc>
      }
    }
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	bf00      	nop
 800b4b6:	3708      	adds	r7, #8
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20007f64 	.word	0x20007f64

0800b4c0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b088      	sub	sp, #32
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b4ce:	230a      	movs	r3, #10
 800b4d0:	77fb      	strb	r3, [r7, #31]
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800b4d6:	230a      	movs	r3, #10
 800b4d8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800b4de:	230a      	movs	r3, #10
 800b4e0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	833b      	strh	r3, [r7, #24]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	82fb      	strh	r3, [r7, #22]
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	773b      	strb	r3, [r7, #28]
 800b4f2:	e093      	b.n	800b61c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800b4f4:	7f3a      	ldrb	r2, [r7, #28]
 800b4f6:	4990      	ldr	r1, [pc, #576]	@ (800b738 <etharp_find_entry+0x278>)
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	005b      	lsls	r3, r3, #1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	440b      	add	r3, r1
 800b502:	3314      	adds	r3, #20
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b508:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b50c:	2b0a      	cmp	r3, #10
 800b50e:	d105      	bne.n	800b51c <etharp_find_entry+0x5c>
 800b510:	7cfb      	ldrb	r3, [r7, #19]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d102      	bne.n	800b51c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800b516:	7f3b      	ldrb	r3, [r7, #28]
 800b518:	777b      	strb	r3, [r7, #29]
 800b51a:	e07c      	b.n	800b616 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b51c:	7cfb      	ldrb	r3, [r7, #19]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d079      	beq.n	800b616 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b522:	7cfb      	ldrb	r3, [r7, #19]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d009      	beq.n	800b53c <etharp_find_entry+0x7c>
 800b528:	7cfb      	ldrb	r3, [r7, #19]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d806      	bhi.n	800b53c <etharp_find_entry+0x7c>
 800b52e:	4b83      	ldr	r3, [pc, #524]	@ (800b73c <etharp_find_entry+0x27c>)
 800b530:	f240 1225 	movw	r2, #293	@ 0x125
 800b534:	4982      	ldr	r1, [pc, #520]	@ (800b740 <etharp_find_entry+0x280>)
 800b536:	4883      	ldr	r0, [pc, #524]	@ (800b744 <etharp_find_entry+0x284>)
 800b538:	f002 fa10 	bl	800d95c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00f      	beq.n	800b562 <etharp_find_entry+0xa2>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6819      	ldr	r1, [r3, #0]
 800b546:	7f3a      	ldrb	r2, [r7, #28]
 800b548:	487b      	ldr	r0, [pc, #492]	@ (800b738 <etharp_find_entry+0x278>)
 800b54a:	4613      	mov	r3, r2
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	4413      	add	r3, r2
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	4403      	add	r3, r0
 800b554:	3304      	adds	r3, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4299      	cmp	r1, r3
 800b55a:	d102      	bne.n	800b562 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b55c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800b560:	e0e5      	b.n	800b72e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b562:	7cfb      	ldrb	r3, [r7, #19]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d13b      	bne.n	800b5e0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b568:	7f3a      	ldrb	r2, [r7, #28]
 800b56a:	4973      	ldr	r1, [pc, #460]	@ (800b738 <etharp_find_entry+0x278>)
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	440b      	add	r3, r1
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d018      	beq.n	800b5ae <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800b57c:	7f3a      	ldrb	r2, [r7, #28]
 800b57e:	496e      	ldr	r1, [pc, #440]	@ (800b738 <etharp_find_entry+0x278>)
 800b580:	4613      	mov	r3, r2
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	4413      	add	r3, r2
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	440b      	add	r3, r1
 800b58a:	3312      	adds	r3, #18
 800b58c:	881b      	ldrh	r3, [r3, #0]
 800b58e:	8b3a      	ldrh	r2, [r7, #24]
 800b590:	429a      	cmp	r2, r3
 800b592:	d840      	bhi.n	800b616 <etharp_find_entry+0x156>
            old_queue = i;
 800b594:	7f3b      	ldrb	r3, [r7, #28]
 800b596:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800b598:	7f3a      	ldrb	r2, [r7, #28]
 800b59a:	4967      	ldr	r1, [pc, #412]	@ (800b738 <etharp_find_entry+0x278>)
 800b59c:	4613      	mov	r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	4413      	add	r3, r2
 800b5a2:	00db      	lsls	r3, r3, #3
 800b5a4:	440b      	add	r3, r1
 800b5a6:	3312      	adds	r3, #18
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	833b      	strh	r3, [r7, #24]
 800b5ac:	e033      	b.n	800b616 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b5ae:	7f3a      	ldrb	r2, [r7, #28]
 800b5b0:	4961      	ldr	r1, [pc, #388]	@ (800b738 <etharp_find_entry+0x278>)
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	005b      	lsls	r3, r3, #1
 800b5b6:	4413      	add	r3, r2
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	440b      	add	r3, r1
 800b5bc:	3312      	adds	r3, #18
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	8afa      	ldrh	r2, [r7, #22]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d827      	bhi.n	800b616 <etharp_find_entry+0x156>
            old_pending = i;
 800b5c6:	7f3b      	ldrb	r3, [r7, #28]
 800b5c8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800b5ca:	7f3a      	ldrb	r2, [r7, #28]
 800b5cc:	495a      	ldr	r1, [pc, #360]	@ (800b738 <etharp_find_entry+0x278>)
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	005b      	lsls	r3, r3, #1
 800b5d2:	4413      	add	r3, r2
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	440b      	add	r3, r1
 800b5d8:	3312      	adds	r3, #18
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	82fb      	strh	r3, [r7, #22]
 800b5de:	e01a      	b.n	800b616 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b5e0:	7cfb      	ldrb	r3, [r7, #19]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d917      	bls.n	800b616 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b5e6:	7f3a      	ldrb	r2, [r7, #28]
 800b5e8:	4953      	ldr	r1, [pc, #332]	@ (800b738 <etharp_find_entry+0x278>)
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	005b      	lsls	r3, r3, #1
 800b5ee:	4413      	add	r3, r2
 800b5f0:	00db      	lsls	r3, r3, #3
 800b5f2:	440b      	add	r3, r1
 800b5f4:	3312      	adds	r3, #18
 800b5f6:	881b      	ldrh	r3, [r3, #0]
 800b5f8:	8aba      	ldrh	r2, [r7, #20]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d80b      	bhi.n	800b616 <etharp_find_entry+0x156>
            old_stable = i;
 800b5fe:	7f3b      	ldrb	r3, [r7, #28]
 800b600:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800b602:	7f3a      	ldrb	r2, [r7, #28]
 800b604:	494c      	ldr	r1, [pc, #304]	@ (800b738 <etharp_find_entry+0x278>)
 800b606:	4613      	mov	r3, r2
 800b608:	005b      	lsls	r3, r3, #1
 800b60a:	4413      	add	r3, r2
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	440b      	add	r3, r1
 800b610:	3312      	adds	r3, #18
 800b612:	881b      	ldrh	r3, [r3, #0]
 800b614:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b616:	7f3b      	ldrb	r3, [r7, #28]
 800b618:	3301      	adds	r3, #1
 800b61a:	773b      	strb	r3, [r7, #28]
 800b61c:	7f3b      	ldrb	r3, [r7, #28]
 800b61e:	2b09      	cmp	r3, #9
 800b620:	f67f af68 	bls.w	800b4f4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b624:	7afb      	ldrb	r3, [r7, #11]
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d108      	bne.n	800b640 <etharp_find_entry+0x180>
 800b62e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b632:	2b0a      	cmp	r3, #10
 800b634:	d107      	bne.n	800b646 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b636:	7afb      	ldrb	r3, [r7, #11]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d102      	bne.n	800b646 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b640:	f04f 33ff 	mov.w	r3, #4294967295
 800b644:	e073      	b.n	800b72e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b646:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	dc02      	bgt.n	800b654 <etharp_find_entry+0x194>
    i = empty;
 800b64e:	7f7b      	ldrb	r3, [r7, #29]
 800b650:	773b      	strb	r3, [r7, #28]
 800b652:	e036      	b.n	800b6c2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b654:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b658:	2b09      	cmp	r3, #9
 800b65a:	dc13      	bgt.n	800b684 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b65c:	7fbb      	ldrb	r3, [r7, #30]
 800b65e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b660:	7f3a      	ldrb	r2, [r7, #28]
 800b662:	4935      	ldr	r1, [pc, #212]	@ (800b738 <etharp_find_entry+0x278>)
 800b664:	4613      	mov	r3, r2
 800b666:	005b      	lsls	r3, r3, #1
 800b668:	4413      	add	r3, r2
 800b66a:	00db      	lsls	r3, r3, #3
 800b66c:	440b      	add	r3, r1
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d018      	beq.n	800b6a6 <etharp_find_entry+0x1e6>
 800b674:	4b31      	ldr	r3, [pc, #196]	@ (800b73c <etharp_find_entry+0x27c>)
 800b676:	f240 126f 	movw	r2, #367	@ 0x16f
 800b67a:	4933      	ldr	r1, [pc, #204]	@ (800b748 <etharp_find_entry+0x288>)
 800b67c:	4831      	ldr	r0, [pc, #196]	@ (800b744 <etharp_find_entry+0x284>)
 800b67e:	f002 f96d 	bl	800d95c <iprintf>
 800b682:	e010      	b.n	800b6a6 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b684:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b688:	2b09      	cmp	r3, #9
 800b68a:	dc02      	bgt.n	800b692 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b68c:	7ffb      	ldrb	r3, [r7, #31]
 800b68e:	773b      	strb	r3, [r7, #28]
 800b690:	e009      	b.n	800b6a6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b692:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b696:	2b09      	cmp	r3, #9
 800b698:	dc02      	bgt.n	800b6a0 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b69a:	7efb      	ldrb	r3, [r7, #27]
 800b69c:	773b      	strb	r3, [r7, #28]
 800b69e:	e002      	b.n	800b6a6 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b6a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a4:	e043      	b.n	800b72e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b6a6:	7f3b      	ldrb	r3, [r7, #28]
 800b6a8:	2b09      	cmp	r3, #9
 800b6aa:	d906      	bls.n	800b6ba <etharp_find_entry+0x1fa>
 800b6ac:	4b23      	ldr	r3, [pc, #140]	@ (800b73c <etharp_find_entry+0x27c>)
 800b6ae:	f240 1281 	movw	r2, #385	@ 0x181
 800b6b2:	4926      	ldr	r1, [pc, #152]	@ (800b74c <etharp_find_entry+0x28c>)
 800b6b4:	4823      	ldr	r0, [pc, #140]	@ (800b744 <etharp_find_entry+0x284>)
 800b6b6:	f002 f951 	bl	800d95c <iprintf>
    etharp_free_entry(i);
 800b6ba:	7f3b      	ldrb	r3, [r7, #28]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff fe25 	bl	800b30c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b6c2:	7f3b      	ldrb	r3, [r7, #28]
 800b6c4:	2b09      	cmp	r3, #9
 800b6c6:	d906      	bls.n	800b6d6 <etharp_find_entry+0x216>
 800b6c8:	4b1c      	ldr	r3, [pc, #112]	@ (800b73c <etharp_find_entry+0x27c>)
 800b6ca:	f240 1285 	movw	r2, #389	@ 0x185
 800b6ce:	491f      	ldr	r1, [pc, #124]	@ (800b74c <etharp_find_entry+0x28c>)
 800b6d0:	481c      	ldr	r0, [pc, #112]	@ (800b744 <etharp_find_entry+0x284>)
 800b6d2:	f002 f943 	bl	800d95c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b6d6:	7f3a      	ldrb	r2, [r7, #28]
 800b6d8:	4917      	ldr	r1, [pc, #92]	@ (800b738 <etharp_find_entry+0x278>)
 800b6da:	4613      	mov	r3, r2
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	4413      	add	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	440b      	add	r3, r1
 800b6e4:	3314      	adds	r3, #20
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <etharp_find_entry+0x23a>
 800b6ec:	4b13      	ldr	r3, [pc, #76]	@ (800b73c <etharp_find_entry+0x27c>)
 800b6ee:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800b6f2:	4917      	ldr	r1, [pc, #92]	@ (800b750 <etharp_find_entry+0x290>)
 800b6f4:	4813      	ldr	r0, [pc, #76]	@ (800b744 <etharp_find_entry+0x284>)
 800b6f6:	f002 f931 	bl	800d95c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00a      	beq.n	800b716 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b700:	7f3a      	ldrb	r2, [r7, #28]
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6819      	ldr	r1, [r3, #0]
 800b706:	480c      	ldr	r0, [pc, #48]	@ (800b738 <etharp_find_entry+0x278>)
 800b708:	4613      	mov	r3, r2
 800b70a:	005b      	lsls	r3, r3, #1
 800b70c:	4413      	add	r3, r2
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	4403      	add	r3, r0
 800b712:	3304      	adds	r3, #4
 800b714:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b716:	7f3a      	ldrb	r2, [r7, #28]
 800b718:	4907      	ldr	r1, [pc, #28]	@ (800b738 <etharp_find_entry+0x278>)
 800b71a:	4613      	mov	r3, r2
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	4413      	add	r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	440b      	add	r3, r1
 800b724:	3312      	adds	r3, #18
 800b726:	2200      	movs	r2, #0
 800b728:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b72a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20007f64 	.word	0x20007f64
 800b73c:	080100d0 	.word	0x080100d0
 800b740:	08010108 	.word	0x08010108
 800b744:	08010148 	.word	0x08010148
 800b748:	08010170 	.word	0x08010170
 800b74c:	08010188 	.word	0x08010188
 800b750:	0801019c 	.word	0x0801019c

0800b754 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af02      	add	r7, sp, #8
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	607a      	str	r2, [r7, #4]
 800b760:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b768:	2b06      	cmp	r3, #6
 800b76a:	d006      	beq.n	800b77a <etharp_update_arp_entry+0x26>
 800b76c:	4b48      	ldr	r3, [pc, #288]	@ (800b890 <etharp_update_arp_entry+0x13c>)
 800b76e:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800b772:	4948      	ldr	r1, [pc, #288]	@ (800b894 <etharp_update_arp_entry+0x140>)
 800b774:	4848      	ldr	r0, [pc, #288]	@ (800b898 <etharp_update_arp_entry+0x144>)
 800b776:	f002 f8f1 	bl	800d95c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d012      	beq.n	800b7a6 <etharp_update_arp_entry+0x52>
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00e      	beq.n	800b7a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68f9      	ldr	r1, [r7, #12]
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 f8a8 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800b794:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b7a2:	2be0      	cmp	r3, #224	@ 0xe0
 800b7a4:	d102      	bne.n	800b7ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b7a6:	f06f 030f 	mvn.w	r3, #15
 800b7aa:	e06c      	b.n	800b886 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b7ac:	78fb      	ldrb	r3, [r7, #3]
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68b8      	ldr	r0, [r7, #8]
 800b7b4:	f7ff fe84 	bl	800b4c0 <etharp_find_entry>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	da02      	bge.n	800b7ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b7c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c8:	e05d      	b.n	800b886 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b7ca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7ce:	4933      	ldr	r1, [pc, #204]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b7d0:	4613      	mov	r3, r2
 800b7d2:	005b      	lsls	r3, r3, #1
 800b7d4:	4413      	add	r3, r2
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	440b      	add	r3, r1
 800b7da:	3314      	adds	r3, #20
 800b7dc:	2202      	movs	r2, #2
 800b7de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b7e0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7e4:	492d      	ldr	r1, [pc, #180]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	005b      	lsls	r3, r3, #1
 800b7ea:	4413      	add	r3, r2
 800b7ec:	00db      	lsls	r3, r3, #3
 800b7ee:	440b      	add	r3, r1
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b7f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	4413      	add	r3, r2
 800b800:	00db      	lsls	r3, r3, #3
 800b802:	3308      	adds	r3, #8
 800b804:	4a25      	ldr	r2, [pc, #148]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b806:	4413      	add	r3, r2
 800b808:	3304      	adds	r3, #4
 800b80a:	2206      	movs	r2, #6
 800b80c:	6879      	ldr	r1, [r7, #4]
 800b80e:	4618      	mov	r0, r3
 800b810:	f002 f99f 	bl	800db52 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b814:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b818:	4920      	ldr	r1, [pc, #128]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b81a:	4613      	mov	r3, r2
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	4413      	add	r3, r2
 800b820:	00db      	lsls	r3, r3, #3
 800b822:	440b      	add	r3, r1
 800b824:	3312      	adds	r3, #18
 800b826:	2200      	movs	r2, #0
 800b828:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b82a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b82e:	491b      	ldr	r1, [pc, #108]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b830:	4613      	mov	r3, r2
 800b832:	005b      	lsls	r3, r3, #1
 800b834:	4413      	add	r3, r2
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	440b      	add	r3, r1
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d021      	beq.n	800b884 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b840:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b844:	4915      	ldr	r1, [pc, #84]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b846:	4613      	mov	r3, r2
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	4413      	add	r3, r2
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	440b      	add	r3, r1
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b854:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b858:	4910      	ldr	r1, [pc, #64]	@ (800b89c <etharp_update_arp_entry+0x148>)
 800b85a:	4613      	mov	r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4413      	add	r3, r2
 800b860:	00db      	lsls	r3, r3, #3
 800b862:	440b      	add	r3, r1
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800b86e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6939      	ldr	r1, [r7, #16]
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f001 ff65 	bl	800d748 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b87e:	6938      	ldr	r0, [r7, #16]
 800b880:	f7f9 fe4a 	bl	8005518 <pbuf_free>
  }
  return ERR_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	080100d0 	.word	0x080100d0
 800b894:	080101c8 	.word	0x080101c8
 800b898:	08010148 	.word	0x08010148
 800b89c:	20007f64 	.word	0x20007f64

0800b8a0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b8a0:	b5b0      	push	{r4, r5, r7, lr}
 800b8a2:	b08a      	sub	sp, #40	@ 0x28
 800b8a4:	af04      	add	r7, sp, #16
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d107      	bne.n	800b8c0 <etharp_input+0x20>
 800b8b0:	4b3d      	ldr	r3, [pc, #244]	@ (800b9a8 <etharp_input+0x108>)
 800b8b2:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800b8b6:	493d      	ldr	r1, [pc, #244]	@ (800b9ac <etharp_input+0x10c>)
 800b8b8:	483d      	ldr	r0, [pc, #244]	@ (800b9b0 <etharp_input+0x110>)
 800b8ba:	f002 f84f 	bl	800d95c <iprintf>
 800b8be:	e06f      	b.n	800b9a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8d0:	d10c      	bne.n	800b8ec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d108      	bne.n	800b8ec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b8de:	2b04      	cmp	r3, #4
 800b8e0:	d104      	bne.n	800b8ec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	d003      	beq.n	800b8f4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7f9 fe13 	bl	8005518 <pbuf_free>
    return;
 800b8f2:	e055      	b.n	800b9a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	330e      	adds	r3, #14
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3318      	adds	r3, #24
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	3304      	adds	r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d102      	bne.n	800b914 <etharp_input+0x74>
    for_us = 0;
 800b90e:	2300      	movs	r3, #0
 800b910:	75fb      	strb	r3, [r7, #23]
 800b912:	e009      	b.n	800b928 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	3304      	adds	r3, #4
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	bf0c      	ite	eq
 800b920:	2301      	moveq	r3, #1
 800b922:	2300      	movne	r3, #0
 800b924:	b2db      	uxtb	r3, r3
 800b926:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f103 0208 	add.w	r2, r3, #8
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <etharp_input+0x98>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <etharp_input+0x9a>
 800b938:	2302      	movs	r3, #2
 800b93a:	f107 010c 	add.w	r1, r7, #12
 800b93e:	6838      	ldr	r0, [r7, #0]
 800b940:	f7ff ff08 	bl	800b754 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	88db      	ldrh	r3, [r3, #6]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b94e:	d003      	beq.n	800b958 <etharp_input+0xb8>
 800b950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b954:	d01e      	beq.n	800b994 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b956:	e020      	b.n	800b99a <etharp_input+0xfa>
    if (for_us) {
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d01c      	beq.n	800b998 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b978:	2102      	movs	r1, #2
 800b97a:	9103      	str	r1, [sp, #12]
 800b97c:	f107 010c 	add.w	r1, r7, #12
 800b980:	9102      	str	r1, [sp, #8]
 800b982:	9201      	str	r2, [sp, #4]
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	462b      	mov	r3, r5
 800b988:	4622      	mov	r2, r4
 800b98a:	4601      	mov	r1, r0
 800b98c:	6838      	ldr	r0, [r7, #0]
 800b98e:	f000 fae1 	bl	800bf54 <etharp_raw>
    break;
 800b992:	e001      	b.n	800b998 <etharp_input+0xf8>
    break;
 800b994:	bf00      	nop
 800b996:	e000      	b.n	800b99a <etharp_input+0xfa>
    break;
 800b998:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7f9 fdbc 	bl	8005518 <pbuf_free>
}
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	080100d0 	.word	0x080100d0
 800b9ac:	08010220 	.word	0x08010220
 800b9b0:	08010148 	.word	0x08010148

0800b9b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af02      	add	r7, sp, #8
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b9c2:	79fa      	ldrb	r2, [r7, #7]
 800b9c4:	4944      	ldr	r1, [pc, #272]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	4413      	add	r3, r2
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	440b      	add	r3, r1
 800b9d0:	3314      	adds	r3, #20
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d806      	bhi.n	800b9e6 <etharp_output_to_arp_index+0x32>
 800b9d8:	4b40      	ldr	r3, [pc, #256]	@ (800badc <etharp_output_to_arp_index+0x128>)
 800b9da:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800b9de:	4940      	ldr	r1, [pc, #256]	@ (800bae0 <etharp_output_to_arp_index+0x12c>)
 800b9e0:	4840      	ldr	r0, [pc, #256]	@ (800bae4 <etharp_output_to_arp_index+0x130>)
 800b9e2:	f001 ffbb 	bl	800d95c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b9e6:	79fa      	ldrb	r2, [r7, #7]
 800b9e8:	493b      	ldr	r1, [pc, #236]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	4413      	add	r3, r2
 800b9f0:	00db      	lsls	r3, r3, #3
 800b9f2:	440b      	add	r3, r1
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d153      	bne.n	800baa4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b9fc:	79fa      	ldrb	r2, [r7, #7]
 800b9fe:	4936      	ldr	r1, [pc, #216]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba00:	4613      	mov	r3, r2
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	440b      	add	r3, r1
 800ba0a:	3312      	adds	r3, #18
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800ba12:	d919      	bls.n	800ba48 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ba14:	79fa      	ldrb	r2, [r7, #7]
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	00db      	lsls	r3, r3, #3
 800ba1e:	4a2e      	ldr	r2, [pc, #184]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba20:	4413      	add	r3, r2
 800ba22:	3304      	adds	r3, #4
 800ba24:	4619      	mov	r1, r3
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fb42 	bl	800c0b0 <etharp_request>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d138      	bne.n	800baa4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ba32:	79fa      	ldrb	r2, [r7, #7]
 800ba34:	4928      	ldr	r1, [pc, #160]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba36:	4613      	mov	r3, r2
 800ba38:	005b      	lsls	r3, r3, #1
 800ba3a:	4413      	add	r3, r2
 800ba3c:	00db      	lsls	r3, r3, #3
 800ba3e:	440b      	add	r3, r1
 800ba40:	3314      	adds	r3, #20
 800ba42:	2203      	movs	r2, #3
 800ba44:	701a      	strb	r2, [r3, #0]
 800ba46:	e02d      	b.n	800baa4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ba48:	79fa      	ldrb	r2, [r7, #7]
 800ba4a:	4923      	ldr	r1, [pc, #140]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	4413      	add	r3, r2
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	440b      	add	r3, r1
 800ba56:	3312      	adds	r3, #18
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800ba5e:	d321      	bcc.n	800baa4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ba60:	79fa      	ldrb	r2, [r7, #7]
 800ba62:	4613      	mov	r3, r2
 800ba64:	005b      	lsls	r3, r3, #1
 800ba66:	4413      	add	r3, r2
 800ba68:	00db      	lsls	r3, r3, #3
 800ba6a:	4a1b      	ldr	r2, [pc, #108]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba6c:	4413      	add	r3, r2
 800ba6e:	1d19      	adds	r1, r3, #4
 800ba70:	79fa      	ldrb	r2, [r7, #7]
 800ba72:	4613      	mov	r3, r2
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	4413      	add	r3, r2
 800ba78:	00db      	lsls	r3, r3, #3
 800ba7a:	3308      	adds	r3, #8
 800ba7c:	4a16      	ldr	r2, [pc, #88]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba7e:	4413      	add	r3, r2
 800ba80:	3304      	adds	r3, #4
 800ba82:	461a      	mov	r2, r3
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f000 faf1 	bl	800c06c <etharp_request_dst>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d109      	bne.n	800baa4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ba90:	79fa      	ldrb	r2, [r7, #7]
 800ba92:	4911      	ldr	r1, [pc, #68]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800ba94:	4613      	mov	r3, r2
 800ba96:	005b      	lsls	r3, r3, #1
 800ba98:	4413      	add	r3, r2
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	440b      	add	r3, r1
 800ba9e:	3314      	adds	r3, #20
 800baa0:	2203      	movs	r2, #3
 800baa2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 800baaa:	79fa      	ldrb	r2, [r7, #7]
 800baac:	4613      	mov	r3, r2
 800baae:	005b      	lsls	r3, r3, #1
 800bab0:	4413      	add	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	3308      	adds	r3, #8
 800bab6:	4a08      	ldr	r2, [pc, #32]	@ (800bad8 <etharp_output_to_arp_index+0x124>)
 800bab8:	4413      	add	r3, r2
 800baba:	3304      	adds	r3, #4
 800babc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bac0:	9200      	str	r2, [sp, #0]
 800bac2:	460a      	mov	r2, r1
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	f001 fe3e 	bl	800d748 <ethernet_output>
 800bacc:	4603      	mov	r3, r0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20007f64 	.word	0x20007f64
 800badc:	080100d0 	.word	0x080100d0
 800bae0:	08010240 	.word	0x08010240
 800bae4:	08010148 	.word	0x08010148

0800bae8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b08a      	sub	sp, #40	@ 0x28
 800baec:	af02      	add	r7, sp, #8
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d106      	bne.n	800bb0c <etharp_output+0x24>
 800bafe:	4b69      	ldr	r3, [pc, #420]	@ (800bca4 <etharp_output+0x1bc>)
 800bb00:	f240 321b 	movw	r2, #795	@ 0x31b
 800bb04:	4968      	ldr	r1, [pc, #416]	@ (800bca8 <etharp_output+0x1c0>)
 800bb06:	4869      	ldr	r0, [pc, #420]	@ (800bcac <etharp_output+0x1c4>)
 800bb08:	f001 ff28 	bl	800d95c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <etharp_output+0x38>
 800bb12:	4b64      	ldr	r3, [pc, #400]	@ (800bca4 <etharp_output+0x1bc>)
 800bb14:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800bb18:	4965      	ldr	r1, [pc, #404]	@ (800bcb0 <etharp_output+0x1c8>)
 800bb1a:	4864      	ldr	r0, [pc, #400]	@ (800bcac <etharp_output+0x1c4>)
 800bb1c:	f001 ff1e 	bl	800d95c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <etharp_output+0x4c>
 800bb26:	4b5f      	ldr	r3, [pc, #380]	@ (800bca4 <etharp_output+0x1bc>)
 800bb28:	f240 321d 	movw	r2, #797	@ 0x31d
 800bb2c:	4961      	ldr	r1, [pc, #388]	@ (800bcb4 <etharp_output+0x1cc>)
 800bb2e:	485f      	ldr	r0, [pc, #380]	@ (800bcac <etharp_output+0x1c4>)
 800bb30:	f001 ff14 	bl	800d95c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68f9      	ldr	r1, [r7, #12]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f000 fed2 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bb46:	4b5c      	ldr	r3, [pc, #368]	@ (800bcb8 <etharp_output+0x1d0>)
 800bb48:	61fb      	str	r3, [r7, #28]
 800bb4a:	e09b      	b.n	800bc84 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb54:	2be0      	cmp	r3, #224	@ 0xe0
 800bb56:	d118      	bne.n	800bb8a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bb60:	235e      	movs	r3, #94	@ 0x5e
 800bb62:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3301      	adds	r3, #1
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	3302      	adds	r3, #2
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	3303      	adds	r3, #3
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bb82:	f107 0310 	add.w	r3, r7, #16
 800bb86:	61fb      	str	r3, [r7, #28]
 800bb88:	e07c      	b.n	800bc84 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3304      	adds	r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	405a      	eors	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	3308      	adds	r3, #8
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d012      	beq.n	800bbc8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bba8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d00b      	beq.n	800bbc8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	330c      	adds	r3, #12
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	330c      	adds	r3, #12
 800bbbe:	61bb      	str	r3, [r7, #24]
 800bbc0:	e002      	b.n	800bbc8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bbc2:	f06f 0303 	mvn.w	r3, #3
 800bbc6:	e069      	b.n	800bc9c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bbc8:	4b3c      	ldr	r3, [pc, #240]	@ (800bcbc <etharp_output+0x1d4>)
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4a3c      	ldr	r2, [pc, #240]	@ (800bcc0 <etharp_output+0x1d8>)
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	440b      	add	r3, r1
 800bbd6:	00db      	lsls	r3, r3, #3
 800bbd8:	4413      	add	r3, r2
 800bbda:	3314      	adds	r3, #20
 800bbdc:	781b      	ldrb	r3, [r3, #0]
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d917      	bls.n	800bc12 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	4b35      	ldr	r3, [pc, #212]	@ (800bcbc <etharp_output+0x1d4>)
 800bbe8:	781b      	ldrb	r3, [r3, #0]
 800bbea:	4618      	mov	r0, r3
 800bbec:	4934      	ldr	r1, [pc, #208]	@ (800bcc0 <etharp_output+0x1d8>)
 800bbee:	4603      	mov	r3, r0
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	4403      	add	r3, r0
 800bbf4:	00db      	lsls	r3, r3, #3
 800bbf6:	440b      	add	r3, r1
 800bbf8:	3304      	adds	r3, #4
 800bbfa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d108      	bne.n	800bc12 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bc00:	4b2e      	ldr	r3, [pc, #184]	@ (800bcbc <etharp_output+0x1d4>)
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	461a      	mov	r2, r3
 800bc06:	68b9      	ldr	r1, [r7, #8]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f7ff fed3 	bl	800b9b4 <etharp_output_to_arp_index>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	e044      	b.n	800bc9c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bc12:	2300      	movs	r3, #0
 800bc14:	75fb      	strb	r3, [r7, #23]
 800bc16:	e02a      	b.n	800bc6e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bc18:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc1c:	4928      	ldr	r1, [pc, #160]	@ (800bcc0 <etharp_output+0x1d8>)
 800bc1e:	4613      	mov	r3, r2
 800bc20:	005b      	lsls	r3, r3, #1
 800bc22:	4413      	add	r3, r2
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	440b      	add	r3, r1
 800bc28:	3314      	adds	r3, #20
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d918      	bls.n	800bc62 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	6819      	ldr	r1, [r3, #0]
 800bc34:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800bc38:	4821      	ldr	r0, [pc, #132]	@ (800bcc0 <etharp_output+0x1d8>)
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	005b      	lsls	r3, r3, #1
 800bc3e:	4413      	add	r3, r2
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	4403      	add	r3, r0
 800bc44:	3304      	adds	r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bc48:	4299      	cmp	r1, r3
 800bc4a:	d10a      	bne.n	800bc62 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800bc4c:	7dfa      	ldrb	r2, [r7, #23]
 800bc4e:	4b1b      	ldr	r3, [pc, #108]	@ (800bcbc <etharp_output+0x1d4>)
 800bc50:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bc52:	7dfb      	ldrb	r3, [r7, #23]
 800bc54:	461a      	mov	r2, r3
 800bc56:	68b9      	ldr	r1, [r7, #8]
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f7ff feab 	bl	800b9b4 <etharp_output_to_arp_index>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	e01c      	b.n	800bc9c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bc62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	3301      	adds	r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	75fb      	strb	r3, [r7, #23]
 800bc6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc72:	2b09      	cmp	r3, #9
 800bc74:	ddd0      	ble.n	800bc18 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	69b9      	ldr	r1, [r7, #24]
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 f822 	bl	800bcc4 <etharp_query>
 800bc80:	4603      	mov	r3, r0
 800bc82:	e00b      	b.n	800bc9c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800bc8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bc8e:	9300      	str	r3, [sp, #0]
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	68b9      	ldr	r1, [r7, #8]
 800bc94:	68f8      	ldr	r0, [r7, #12]
 800bc96:	f001 fd57 	bl	800d748 <ethernet_output>
 800bc9a:	4603      	mov	r3, r0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	080100d0 	.word	0x080100d0
 800bca8:	08010220 	.word	0x08010220
 800bcac:	08010148 	.word	0x08010148
 800bcb0:	08010270 	.word	0x08010270
 800bcb4:	08010210 	.word	0x08010210
 800bcb8:	08010850 	.word	0x08010850
 800bcbc:	20008054 	.word	0x20008054
 800bcc0:	20007f64 	.word	0x20007f64

0800bcc4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08c      	sub	sp, #48	@ 0x30
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	3329      	adds	r3, #41	@ 0x29
 800bcd4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bcd6:	23ff      	movs	r3, #255	@ 0xff
 800bcd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	68f9      	ldr	r1, [r7, #12]
 800bce6:	4618      	mov	r0, r3
 800bce8:	f000 fdfc 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10c      	bne.n	800bd0c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bcfa:	2be0      	cmp	r3, #224	@ 0xe0
 800bcfc:	d006      	beq.n	800bd0c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d102      	bne.n	800bd12 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bd0c:	f06f 030f 	mvn.w	r3, #15
 800bd10:	e10e      	b.n	800bf30 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	2101      	movs	r1, #1
 800bd16:	68b8      	ldr	r0, [r7, #8]
 800bd18:	f7ff fbd2 	bl	800b4c0 <etharp_find_entry>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800bd20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	da02      	bge.n	800bd2e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800bd28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd2c:	e100      	b.n	800bf30 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bd2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd32:	4981      	ldr	r1, [pc, #516]	@ (800bf38 <etharp_query+0x274>)
 800bd34:	4613      	mov	r3, r2
 800bd36:	005b      	lsls	r3, r3, #1
 800bd38:	4413      	add	r3, r2
 800bd3a:	00db      	lsls	r3, r3, #3
 800bd3c:	440b      	add	r3, r1
 800bd3e:	3314      	adds	r3, #20
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d117      	bne.n	800bd76 <etharp_query+0xb2>
    is_new_entry = 1;
 800bd46:	2301      	movs	r3, #1
 800bd48:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bd4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd4e:	497a      	ldr	r1, [pc, #488]	@ (800bf38 <etharp_query+0x274>)
 800bd50:	4613      	mov	r3, r2
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	440b      	add	r3, r1
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bd60:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd64:	4974      	ldr	r1, [pc, #464]	@ (800bf38 <etharp_query+0x274>)
 800bd66:	4613      	mov	r3, r2
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	4413      	add	r3, r2
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	440b      	add	r3, r1
 800bd70:	3308      	adds	r3, #8
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bd76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd7a:	496f      	ldr	r1, [pc, #444]	@ (800bf38 <etharp_query+0x274>)
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	005b      	lsls	r3, r3, #1
 800bd80:	4413      	add	r3, r2
 800bd82:	00db      	lsls	r3, r3, #3
 800bd84:	440b      	add	r3, r1
 800bd86:	3314      	adds	r3, #20
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d012      	beq.n	800bdb4 <etharp_query+0xf0>
 800bd8e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bd92:	4969      	ldr	r1, [pc, #420]	@ (800bf38 <etharp_query+0x274>)
 800bd94:	4613      	mov	r3, r2
 800bd96:	005b      	lsls	r3, r3, #1
 800bd98:	4413      	add	r3, r2
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	440b      	add	r3, r1
 800bd9e:	3314      	adds	r3, #20
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	2b01      	cmp	r3, #1
 800bda4:	d806      	bhi.n	800bdb4 <etharp_query+0xf0>
 800bda6:	4b65      	ldr	r3, [pc, #404]	@ (800bf3c <etharp_query+0x278>)
 800bda8:	f240 32c7 	movw	r2, #967	@ 0x3c7
 800bdac:	4964      	ldr	r1, [pc, #400]	@ (800bf40 <etharp_query+0x27c>)
 800bdae:	4865      	ldr	r0, [pc, #404]	@ (800bf44 <etharp_query+0x280>)
 800bdb0:	f001 fdd4 	bl	800d95c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d102      	bne.n	800bdc0 <etharp_query+0xfc>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10c      	bne.n	800bdda <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f000 f974 	bl	800c0b0 <etharp_request>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <etharp_query+0x116>
      return result;
 800bdd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bdd8:	e0aa      	b.n	800bf30 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d106      	bne.n	800bdee <etharp_query+0x12a>
 800bde0:	4b56      	ldr	r3, [pc, #344]	@ (800bf3c <etharp_query+0x278>)
 800bde2:	f240 32db 	movw	r2, #987	@ 0x3db
 800bde6:	4958      	ldr	r1, [pc, #352]	@ (800bf48 <etharp_query+0x284>)
 800bde8:	4856      	ldr	r0, [pc, #344]	@ (800bf44 <etharp_query+0x280>)
 800bdea:	f001 fdb7 	bl	800d95c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bdee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bdf2:	4951      	ldr	r1, [pc, #324]	@ (800bf38 <etharp_query+0x274>)
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	005b      	lsls	r3, r3, #1
 800bdf8:	4413      	add	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	440b      	add	r3, r1
 800bdfe:	3314      	adds	r3, #20
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d918      	bls.n	800be38 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800be06:	7cfa      	ldrb	r2, [r7, #19]
 800be08:	4b50      	ldr	r3, [pc, #320]	@ (800bf4c <etharp_query+0x288>)
 800be0a:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800be0c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be10:	4613      	mov	r3, r2
 800be12:	005b      	lsls	r3, r3, #1
 800be14:	4413      	add	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	3308      	adds	r3, #8
 800be1a:	4a47      	ldr	r2, [pc, #284]	@ (800bf38 <etharp_query+0x274>)
 800be1c:	4413      	add	r3, r2
 800be1e:	3304      	adds	r3, #4
 800be20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800be24:	9200      	str	r2, [sp, #0]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f001 fc8c 	bl	800d748 <ethernet_output>
 800be30:	4603      	mov	r3, r0
 800be32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be36:	e079      	b.n	800bf2c <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800be38:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800be3c:	493e      	ldr	r1, [pc, #248]	@ (800bf38 <etharp_query+0x274>)
 800be3e:	4613      	mov	r3, r2
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4413      	add	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	440b      	add	r3, r1
 800be48:	3314      	adds	r3, #20
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d16d      	bne.n	800bf2c <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	61fb      	str	r3, [r7, #28]
    while (p) {
 800be58:	e01a      	b.n	800be90 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	895a      	ldrh	r2, [r3, #10]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	891b      	ldrh	r3, [r3, #8]
 800be62:	429a      	cmp	r2, r3
 800be64:	d10a      	bne.n	800be7c <etharp_query+0x1b8>
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d006      	beq.n	800be7c <etharp_query+0x1b8>
 800be6e:	4b33      	ldr	r3, [pc, #204]	@ (800bf3c <etharp_query+0x278>)
 800be70:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800be74:	4936      	ldr	r1, [pc, #216]	@ (800bf50 <etharp_query+0x28c>)
 800be76:	4833      	ldr	r0, [pc, #204]	@ (800bf44 <etharp_query+0x280>)
 800be78:	f001 fd70 	bl	800d95c <iprintf>
      if (p->type != PBUF_ROM) {
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	7b1b      	ldrb	r3, [r3, #12]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d002      	beq.n	800be8a <etharp_query+0x1c6>
        copy_needed = 1;
 800be84:	2301      	movs	r3, #1
 800be86:	61bb      	str	r3, [r7, #24]
        break;
 800be88:	e005      	b.n	800be96 <etharp_query+0x1d2>
      }
      p = p->next;
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e1      	bne.n	800be5a <etharp_query+0x196>
    }
    if (copy_needed) {
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d017      	beq.n	800becc <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	891b      	ldrh	r3, [r3, #8]
 800bea0:	2200      	movs	r2, #0
 800bea2:	4619      	mov	r1, r3
 800bea4:	2002      	movs	r0, #2
 800bea6:	f7f8 ffbf 	bl	8004e28 <pbuf_alloc>
 800beaa:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d011      	beq.n	800bed6 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	69f8      	ldr	r0, [r7, #28]
 800beb6:	f7f9 fc51 	bl	800575c <pbuf_copy>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00a      	beq.n	800bed6 <etharp_query+0x212>
          pbuf_free(p);
 800bec0:	69f8      	ldr	r0, [r7, #28]
 800bec2:	f7f9 fb29 	bl	8005518 <pbuf_free>
          p = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	e004      	b.n	800bed6 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800bed0:	69f8      	ldr	r0, [r7, #28]
 800bed2:	f7f9 fbcb 	bl	800566c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d024      	beq.n	800bf26 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800bedc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bee0:	4915      	ldr	r1, [pc, #84]	@ (800bf38 <etharp_query+0x274>)
 800bee2:	4613      	mov	r3, r2
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	4413      	add	r3, r2
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	440b      	add	r3, r1
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00b      	beq.n	800bf0a <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800bef2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bef6:	4910      	ldr	r1, [pc, #64]	@ (800bf38 <etharp_query+0x274>)
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	440b      	add	r3, r1
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7f9 fb07 	bl	8005518 <pbuf_free>
      }
      arp_table[i].q = p;
 800bf0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800bf0e:	490a      	ldr	r1, [pc, #40]	@ (800bf38 <etharp_query+0x274>)
 800bf10:	4613      	mov	r3, r2
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	00db      	lsls	r3, r3, #3
 800bf18:	440b      	add	r3, r1
 800bf1a:	69fa      	ldr	r2, [r7, #28]
 800bf1c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf24:	e002      	b.n	800bf2c <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800bf26:	23ff      	movs	r3, #255	@ 0xff
 800bf28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800bf2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3728      	adds	r7, #40	@ 0x28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20007f64 	.word	0x20007f64
 800bf3c:	080100d0 	.word	0x080100d0
 800bf40:	0801027c 	.word	0x0801027c
 800bf44:	08010148 	.word	0x08010148
 800bf48:	08010270 	.word	0x08010270
 800bf4c:	20008054 	.word	0x20008054
 800bf50:	080102a4 	.word	0x080102a4

0800bf54 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b08a      	sub	sp, #40	@ 0x28
 800bf58:	af02      	add	r7, sp, #8
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]
 800bf60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d106      	bne.n	800bf7a <etharp_raw+0x26>
 800bf6c:	4b3a      	ldr	r3, [pc, #232]	@ (800c058 <etharp_raw+0x104>)
 800bf6e:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800bf72:	493a      	ldr	r1, [pc, #232]	@ (800c05c <etharp_raw+0x108>)
 800bf74:	483a      	ldr	r0, [pc, #232]	@ (800c060 <etharp_raw+0x10c>)
 800bf76:	f001 fcf1 	bl	800d95c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	211c      	movs	r1, #28
 800bf7e:	2002      	movs	r0, #2
 800bf80:	f7f8 ff52 	bl	8004e28 <pbuf_alloc>
 800bf84:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d102      	bne.n	800bf92 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	e05d      	b.n	800c04e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	895b      	ldrh	r3, [r3, #10]
 800bf96:	2b1b      	cmp	r3, #27
 800bf98:	d806      	bhi.n	800bfa8 <etharp_raw+0x54>
 800bf9a:	4b2f      	ldr	r3, [pc, #188]	@ (800c058 <etharp_raw+0x104>)
 800bf9c:	f240 4263 	movw	r2, #1123	@ 0x463
 800bfa0:	4930      	ldr	r1, [pc, #192]	@ (800c064 <etharp_raw+0x110>)
 800bfa2:	482f      	ldr	r0, [pc, #188]	@ (800c060 <etharp_raw+0x10c>)
 800bfa4:	f001 fcda 	bl	800d95c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bfae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7f8 f9a0 	bl	80042f6 <lwip_htons>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	461a      	mov	r2, r3
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfc4:	2b06      	cmp	r3, #6
 800bfc6:	d006      	beq.n	800bfd6 <etharp_raw+0x82>
 800bfc8:	4b23      	ldr	r3, [pc, #140]	@ (800c058 <etharp_raw+0x104>)
 800bfca:	f240 426a 	movw	r2, #1130	@ 0x46a
 800bfce:	4926      	ldr	r1, [pc, #152]	@ (800c068 <etharp_raw+0x114>)
 800bfd0:	4823      	ldr	r0, [pc, #140]	@ (800c060 <etharp_raw+0x10c>)
 800bfd2:	f001 fcc3 	bl	800d95c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	2206      	movs	r2, #6
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 fdb7 	bl	800db52 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	3312      	adds	r3, #18
 800bfe8:	2206      	movs	r2, #6
 800bfea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bfec:	4618      	mov	r0, r3
 800bfee:	f001 fdb0 	bl	800db52 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	330e      	adds	r3, #14
 800bff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bff8:	6812      	ldr	r2, [r2, #0]
 800bffa:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	3318      	adds	r3, #24
 800c000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c002:	6812      	ldr	r2, [r2, #0]
 800c004:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	2200      	movs	r2, #0
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f042 0201 	orr.w	r2, r2, #1
 800c012:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2200      	movs	r2, #0
 800c018:	f042 0208 	orr.w	r2, r2, #8
 800c01c:	709a      	strb	r2, [r3, #2]
 800c01e:	2200      	movs	r2, #0
 800c020:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2206      	movs	r2, #6
 800c026:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2204      	movs	r2, #4
 800c02c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c02e:	f640 0306 	movw	r3, #2054	@ 0x806
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	69b9      	ldr	r1, [r7, #24]
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f001 fb84 	bl	800d748 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c040:	69b8      	ldr	r0, [r7, #24]
 800c042:	f7f9 fa69 	bl	8005518 <pbuf_free>
  p = NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c04a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3720      	adds	r7, #32
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	080100d0 	.word	0x080100d0
 800c05c:	08010220 	.word	0x08010220
 800c060:	08010148 	.word	0x08010148
 800c064:	080102c0 	.word	0x080102c0
 800c068:	080102f4 	.word	0x080102f4

0800c06c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af04      	add	r7, sp, #16
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c088:	2201      	movs	r2, #1
 800c08a:	9203      	str	r2, [sp, #12]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	9202      	str	r2, [sp, #8]
 800c090:	4a06      	ldr	r2, [pc, #24]	@ (800c0ac <etharp_request_dst+0x40>)
 800c092:	9201      	str	r2, [sp, #4]
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	4603      	mov	r3, r0
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f7ff ff5a 	bl	800bf54 <etharp_raw>
 800c0a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	08010858 	.word	0x08010858

0800c0b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c0ba:	4a05      	ldr	r2, [pc, #20]	@ (800c0d0 <etharp_request+0x20>)
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7ff ffd4 	bl	800c06c <etharp_request_dst>
 800c0c4:	4603      	mov	r3, r0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3708      	adds	r7, #8
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	08010850 	.word	0x08010850

0800c0d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b08e      	sub	sp, #56	@ 0x38
 800c0d8:	af04      	add	r7, sp, #16
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c0de:	4b7a      	ldr	r3, [pc, #488]	@ (800c2c8 <icmp_input+0x1f4>)
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f003 030f 	and.w	r3, r3, #15
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c0f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0f4:	2b13      	cmp	r3, #19
 800c0f6:	f240 80d1 	bls.w	800c29c <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	895b      	ldrh	r3, [r3, #10]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	f240 80ce 	bls.w	800c2a0 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c10e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 80bb 	beq.w	800c28e <icmp_input+0x1ba>
 800c118:	2b08      	cmp	r3, #8
 800c11a:	f040 80bb 	bne.w	800c294 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800c11e:	4b6b      	ldr	r3, [pc, #428]	@ (800c2cc <icmp_input+0x1f8>)
 800c120:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c122:	4b69      	ldr	r3, [pc, #420]	@ (800c2c8 <icmp_input+0x1f4>)
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c12a:	2be0      	cmp	r3, #224	@ 0xe0
 800c12c:	f000 80bf 	beq.w	800c2ae <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c130:	4b65      	ldr	r3, [pc, #404]	@ (800c2c8 <icmp_input+0x1f4>)
 800c132:	695b      	ldr	r3, [r3, #20]
 800c134:	4a64      	ldr	r2, [pc, #400]	@ (800c2c8 <icmp_input+0x1f4>)
 800c136:	6812      	ldr	r2, [r2, #0]
 800c138:	4611      	mov	r1, r2
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 fbd2 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	f040 80b5 	bne.w	800c2b2 <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	891b      	ldrh	r3, [r3, #8]
 800c14c:	2b07      	cmp	r3, #7
 800c14e:	f240 80a9 	bls.w	800c2a4 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c152:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c154:	330e      	adds	r3, #14
 800c156:	b29b      	uxth	r3, r3
 800c158:	b21b      	sxth	r3, r3
 800c15a:	4619      	mov	r1, r3
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f7f9 f9b7 	bl	80054d0 <pbuf_header>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d046      	beq.n	800c1f6 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	891a      	ldrh	r2, [r3, #8]
 800c16c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c16e:	4413      	add	r3, r2
 800c170:	b29b      	uxth	r3, r3
 800c172:	2200      	movs	r2, #0
 800c174:	4619      	mov	r1, r3
 800c176:	2002      	movs	r0, #2
 800c178:	f7f8 fe56 	bl	8004e28 <pbuf_alloc>
 800c17c:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 8098 	beq.w	800c2b6 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	895b      	ldrh	r3, [r3, #10]
 800c18a:	461a      	mov	r2, r3
 800c18c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c18e:	3308      	adds	r3, #8
 800c190:	429a      	cmp	r2, r3
 800c192:	d203      	bcs.n	800c19c <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800c194:	69b8      	ldr	r0, [r7, #24]
 800c196:	f7f9 f9bf 	bl	8005518 <pbuf_free>
        goto icmperr;
 800c19a:	e08d      	b.n	800c2b8 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c1a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f001 fcd4 	bl	800db52 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800c1aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1ac:	425b      	negs	r3, r3
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	b21b      	sxth	r3, r3
 800c1b2:	4619      	mov	r1, r3
 800c1b4:	69b8      	ldr	r0, [r7, #24]
 800c1b6:	f7f9 f98b 	bl	80054d0 <pbuf_header>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d009      	beq.n	800c1d4 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c1c0:	4b43      	ldr	r3, [pc, #268]	@ (800c2d0 <icmp_input+0x1fc>)
 800c1c2:	22af      	movs	r2, #175	@ 0xaf
 800c1c4:	4943      	ldr	r1, [pc, #268]	@ (800c2d4 <icmp_input+0x200>)
 800c1c6:	4844      	ldr	r0, [pc, #272]	@ (800c2d8 <icmp_input+0x204>)
 800c1c8:	f001 fbc8 	bl	800d95c <iprintf>
        pbuf_free(r);
 800c1cc:	69b8      	ldr	r0, [r7, #24]
 800c1ce:	f7f9 f9a3 	bl	8005518 <pbuf_free>
        goto icmperr;
 800c1d2:	e071      	b.n	800c2b8 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	69b8      	ldr	r0, [r7, #24]
 800c1d8:	f7f9 fac0 	bl	800575c <pbuf_copy>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d003      	beq.n	800c1ea <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800c1e2:	69b8      	ldr	r0, [r7, #24]
 800c1e4:	f7f9 f998 	bl	8005518 <pbuf_free>
        goto icmperr;
 800c1e8:	e066      	b.n	800c2b8 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7f9 f994 	bl	8005518 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	607b      	str	r3, [r7, #4]
 800c1f4:	e015      	b.n	800c222 <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800c1f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c1f8:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800c1fc:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800c200:	33f2      	adds	r3, #242	@ 0xf2
 800c202:	b29b      	uxth	r3, r3
 800c204:	b21b      	sxth	r3, r3
 800c206:	4619      	mov	r1, r3
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7f9 f961 	bl	80054d0 <pbuf_header>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c214:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d0 <icmp_input+0x1fc>)
 800c216:	22c0      	movs	r2, #192	@ 0xc0
 800c218:	4930      	ldr	r1, [pc, #192]	@ (800c2dc <icmp_input+0x208>)
 800c21a:	482f      	ldr	r0, [pc, #188]	@ (800c2d8 <icmp_input+0x204>)
 800c21c:	f001 fb9e 	bl	800d95c <iprintf>
        goto icmperr;
 800c220:	e04a      	b.n	800c2b8 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800c228:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c22c:	4619      	mov	r1, r3
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f7f9 f94e 	bl	80054d0 <pbuf_header>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d12b      	bne.n	800c292 <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c248:	4b1f      	ldr	r3, [pc, #124]	@ (800c2c8 <icmp_input+0x1f4>)
 800c24a:	691a      	ldr	r2, [r3, #16]
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	2200      	movs	r2, #0
 800c25a:	709a      	strb	r2, [r3, #2]
 800c25c:	2200      	movs	r2, #0
 800c25e:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	22ff      	movs	r2, #255	@ 0xff
 800c264:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2200      	movs	r2, #0
 800c26a:	729a      	strb	r2, [r3, #10]
 800c26c:	2200      	movs	r2, #0
 800c26e:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	9302      	str	r3, [sp, #8]
 800c274:	2301      	movs	r3, #1
 800c276:	9301      	str	r3, [sp, #4]
 800c278:	2300      	movs	r3, #0
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	23ff      	movs	r3, #255	@ 0xff
 800c27e:	2200      	movs	r2, #0
 800c280:	69f9      	ldr	r1, [r7, #28]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 fa5c 	bl	800c740 <ip4_output_if>
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800c28c:	e001      	b.n	800c292 <icmp_input+0x1be>
    break;
 800c28e:	bf00      	nop
 800c290:	e000      	b.n	800c294 <icmp_input+0x1c0>
    break;
 800c292:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7f9 f93f 	bl	8005518 <pbuf_free>
  return;
 800c29a:	e011      	b.n	800c2c0 <icmp_input+0x1ec>
    goto lenerr;
 800c29c:	bf00      	nop
 800c29e:	e002      	b.n	800c2a6 <icmp_input+0x1d2>
    goto lenerr;
 800c2a0:	bf00      	nop
 800c2a2:	e000      	b.n	800c2a6 <icmp_input+0x1d2>
      goto lenerr;
 800c2a4:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f7f9 f936 	bl	8005518 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c2ac:	e008      	b.n	800c2c0 <icmp_input+0x1ec>
      goto icmperr;
 800c2ae:	bf00      	nop
 800c2b0:	e002      	b.n	800c2b8 <icmp_input+0x1e4>
      goto icmperr;
 800c2b2:	bf00      	nop
 800c2b4:	e000      	b.n	800c2b8 <icmp_input+0x1e4>
        goto icmperr;
 800c2b6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7f9 f92d 	bl	8005518 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c2be:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c2c0:	3728      	adds	r7, #40	@ 0x28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200049a8 	.word	0x200049a8
 800c2cc:	200049bc 	.word	0x200049bc
 800c2d0:	08010338 	.word	0x08010338
 800c2d4:	08010370 	.word	0x08010370
 800c2d8:	080103a8 	.word	0x080103a8
 800c2dc:	080103d0 	.word	0x080103d0

0800c2e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c2ec:	78fb      	ldrb	r3, [r7, #3]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	2103      	movs	r1, #3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f814 	bl	800c320 <icmp_send_response>
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	461a      	mov	r2, r3
 800c310:	210b      	movs	r1, #11
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f000 f804 	bl	800c320 <icmp_send_response>
}
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b08c      	sub	sp, #48	@ 0x30
 800c324:	af04      	add	r7, sp, #16
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
 800c32c:	4613      	mov	r3, r2
 800c32e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c330:	2200      	movs	r2, #0
 800c332:	2124      	movs	r1, #36	@ 0x24
 800c334:	2001      	movs	r0, #1
 800c336:	f7f8 fd77 	bl	8004e28 <pbuf_alloc>
 800c33a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d04c      	beq.n	800c3dc <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	895b      	ldrh	r3, [r3, #10]
 800c346:	2b23      	cmp	r3, #35	@ 0x23
 800c348:	d806      	bhi.n	800c358 <icmp_send_response+0x38>
 800c34a:	4b26      	ldr	r3, [pc, #152]	@ (800c3e4 <icmp_send_response+0xc4>)
 800c34c:	f240 1261 	movw	r2, #353	@ 0x161
 800c350:	4925      	ldr	r1, [pc, #148]	@ (800c3e8 <icmp_send_response+0xc8>)
 800c352:	4826      	ldr	r0, [pc, #152]	@ (800c3ec <icmp_send_response+0xcc>)
 800c354:	f001 fb02 	bl	800d95c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	78fa      	ldrb	r2, [r7, #3]
 800c368:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	78ba      	ldrb	r2, [r7, #2]
 800c36e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	2200      	movs	r2, #0
 800c374:	711a      	strb	r2, [r3, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2200      	movs	r2, #0
 800c37e:	719a      	strb	r2, [r3, #6]
 800c380:	2200      	movs	r2, #0
 800c382:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	f103 0008 	add.w	r0, r3, #8
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	221c      	movs	r2, #28
 800c392:	4619      	mov	r1, r3
 800c394:	f001 fbdd 	bl	800db52 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c39e:	f107 030c 	add.w	r3, r7, #12
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f824 	bl	800c3f0 <ip4_route>
 800c3a8:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d011      	beq.n	800c3d4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	709a      	strb	r2, [r3, #2]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c3ba:	f107 020c 	add.w	r2, r7, #12
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	9302      	str	r3, [sp, #8]
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	9301      	str	r3, [sp, #4]
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9300      	str	r3, [sp, #0]
 800c3ca:	23ff      	movs	r3, #255	@ 0xff
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	69f8      	ldr	r0, [r7, #28]
 800c3d0:	f000 f9b6 	bl	800c740 <ip4_output_if>
  }
  pbuf_free(q);
 800c3d4:	69f8      	ldr	r0, [r7, #28]
 800c3d6:	f7f9 f89f 	bl	8005518 <pbuf_free>
 800c3da:	e000      	b.n	800c3de <icmp_send_response+0xbe>
    return;
 800c3dc:	bf00      	nop
}
 800c3de:	3720      	adds	r7, #32
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	08010338 	.word	0x08010338
 800c3e8:	08010404 	.word	0x08010404
 800c3ec:	080103a8 	.word	0x080103a8

0800c3f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c3f8:	4b30      	ldr	r3, [pc, #192]	@ (800c4bc <ip4_route+0xcc>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e036      	b.n	800c46e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d02b      	beq.n	800c468 <ip4_route+0x78>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c416:	089b      	lsrs	r3, r3, #2
 800c418:	f003 0301 	and.w	r3, r3, #1
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d022      	beq.n	800c468 <ip4_route+0x78>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3304      	adds	r3, #4
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01d      	beq.n	800c468 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3304      	adds	r3, #4
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	405a      	eors	r2, r3
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	3308      	adds	r3, #8
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4013      	ands	r3, r2
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	e033      	b.n	800c4b0 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c44e:	f003 0302 	and.w	r3, r3, #2
 800c452:	2b00      	cmp	r3, #0
 800c454:	d108      	bne.n	800c468 <ip4_route+0x78>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	330c      	adds	r3, #12
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d101      	bne.n	800c468 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	e023      	b.n	800c4b0 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d1c5      	bne.n	800c400 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c474:	4b12      	ldr	r3, [pc, #72]	@ (800c4c0 <ip4_route+0xd0>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d015      	beq.n	800c4a8 <ip4_route+0xb8>
 800c47c:	4b10      	ldr	r3, [pc, #64]	@ (800c4c0 <ip4_route+0xd0>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00d      	beq.n	800c4a8 <ip4_route+0xb8>
 800c48c:	4b0c      	ldr	r3, [pc, #48]	@ (800c4c0 <ip4_route+0xd0>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c494:	f003 0304 	and.w	r3, r3, #4
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d005      	beq.n	800c4a8 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800c49c:	4b08      	ldr	r3, [pc, #32]	@ (800c4c0 <ip4_route+0xd0>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	e001      	b.n	800c4b0 <ip4_route+0xc0>
  }

  return netif_default;
 800c4ac:	4b04      	ldr	r3, [pc, #16]	@ (800c4c0 <ip4_route+0xd0>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bc80      	pop	{r7}
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20007ef8 	.word	0x20007ef8
 800c4c0:	20007efc 	.word	0x20007efc

0800c4c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	091b      	lsrs	r3, r3, #4
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d004      	beq.n	800c4ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7f9 f819 	bl	8005518 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e122      	b.n	800c730 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800c4f4:	897b      	ldrh	r3, [r7, #10]
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	885b      	ldrh	r3, [r3, #2]
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	4618      	mov	r0, r3
 800c502:	f7f7 fef8 	bl	80042f6 <lwip_htons>
 800c506:	4603      	mov	r3, r0
 800c508:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	891b      	ldrh	r3, [r3, #8]
 800c50e:	893a      	ldrh	r2, [r7, #8]
 800c510:	429a      	cmp	r2, r3
 800c512:	d204      	bcs.n	800c51e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c514:	893b      	ldrh	r3, [r7, #8]
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7f8 fe89 	bl	8005230 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	895b      	ldrh	r3, [r3, #10]
 800c522:	897a      	ldrh	r2, [r7, #10]
 800c524:	429a      	cmp	r2, r3
 800c526:	d807      	bhi.n	800c538 <ip4_input+0x74>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	893a      	ldrh	r2, [r7, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d802      	bhi.n	800c538 <ip4_input+0x74>
 800c532:	897b      	ldrh	r3, [r7, #10]
 800c534:	2b13      	cmp	r3, #19
 800c536:	d804      	bhi.n	800c542 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7f8 ffed 	bl	8005518 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	e0f6      	b.n	800c730 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	4a7c      	ldr	r2, [pc, #496]	@ (800c738 <ip4_input+0x274>)
 800c548:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	4a7a      	ldr	r2, [pc, #488]	@ (800c738 <ip4_input+0x274>)
 800c550:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c552:	4b79      	ldr	r3, [pc, #484]	@ (800c738 <ip4_input+0x274>)
 800c554:	695b      	ldr	r3, [r3, #20]
 800c556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c55a:	2be0      	cmp	r3, #224	@ 0xe0
 800c55c:	d112      	bne.n	800c584 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d007      	beq.n	800c57e <ip4_input+0xba>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	3304      	adds	r3, #4
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <ip4_input+0xba>
      netif = inp;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	613b      	str	r3, [r7, #16]
 800c57c:	e041      	b.n	800c602 <ip4_input+0x13e>
    } else {
      netif = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	613b      	str	r3, [r7, #16]
 800c582:	e03e      	b.n	800c602 <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800c584:	2301      	movs	r3, #1
 800c586:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d014      	beq.n	800c5c6 <ip4_input+0x102>
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00f      	beq.n	800c5c6 <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c5a6:	4b64      	ldr	r3, [pc, #400]	@ (800c738 <ip4_input+0x274>)
 800c5a8:	695a      	ldr	r2, [r3, #20]
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d026      	beq.n	800c602 <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c5b4:	4b60      	ldr	r3, [pc, #384]	@ (800c738 <ip4_input+0x274>)
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	6939      	ldr	r1, [r7, #16]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f992 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800c5c0:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d11d      	bne.n	800c602 <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00d      	beq.n	800c5e8 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c5cc:	4b5a      	ldr	r3, [pc, #360]	@ (800c738 <ip4_input+0x274>)
 800c5ce:	695b      	ldr	r3, [r3, #20]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5d4:	d102      	bne.n	800c5dc <ip4_input+0x118>
          netif = NULL;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	613b      	str	r3, [r7, #16]
          break;
 800c5da:	e012      	b.n	800c602 <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c5e0:	4b56      	ldr	r3, [pc, #344]	@ (800c73c <ip4_input+0x278>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	613b      	str	r3, [r7, #16]
 800c5e6:	e002      	b.n	800c5ee <ip4_input+0x12a>
      } else {
        netif = netif->next;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d102      	bne.n	800c5fc <ip4_input+0x138>
        netif = netif->next;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1c4      	bne.n	800c58c <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c602:	4b4d      	ldr	r3, [pc, #308]	@ (800c738 <ip4_input+0x274>)
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 f96b 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d105      	bne.n	800c620 <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c614:	4b48      	ldr	r3, [pc, #288]	@ (800c738 <ip4_input+0x274>)
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c61c:	2be0      	cmp	r3, #224	@ 0xe0
 800c61e:	d104      	bne.n	800c62a <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7f8 ff79 	bl	8005518 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	e082      	b.n	800c730 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d104      	bne.n	800c63a <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7f8 ff71 	bl	8005518 <pbuf_free>
    return ERR_OK;
 800c636:	2300      	movs	r3, #0
 800c638:	e07a      	b.n	800c730 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	88db      	ldrh	r3, [r3, #6]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c646:	4013      	ands	r3, r2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fd1d 	bl	800d08c <ip4_reass>
 800c652:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d101      	bne.n	800c65e <ip4_input+0x19a>
      return ERR_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	e068      	b.n	800c730 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c664:	4a34      	ldr	r2, [pc, #208]	@ (800c738 <ip4_input+0x274>)
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c66a:	4a33      	ldr	r2, [pc, #204]	@ (800c738 <ip4_input+0x274>)
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c670:	4a31      	ldr	r2, [pc, #196]	@ (800c738 <ip4_input+0x274>)
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	781b      	ldrb	r3, [r3, #0]
 800c67a:	f003 030f 	and.w	r3, r3, #15
 800c67e:	b29b      	uxth	r3, r3
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	b29a      	uxth	r2, r3
 800c684:	4b2c      	ldr	r3, [pc, #176]	@ (800c738 <ip4_input+0x274>)
 800c686:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c688:	897b      	ldrh	r3, [r7, #10]
 800c68a:	425b      	negs	r3, r3
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	b21b      	sxth	r3, r3
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7f8 ff1c 	bl	80054d0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	7a5b      	ldrb	r3, [r3, #9]
 800c69c:	2b11      	cmp	r3, #17
 800c69e:	d006      	beq.n	800c6ae <ip4_input+0x1ea>
 800c6a0:	2b11      	cmp	r3, #17
 800c6a2:	dc13      	bgt.n	800c6cc <ip4_input+0x208>
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	d00c      	beq.n	800c6c2 <ip4_input+0x1fe>
 800c6a8:	2b06      	cmp	r3, #6
 800c6aa:	d005      	beq.n	800c6b8 <ip4_input+0x1f4>
 800c6ac:	e00e      	b.n	800c6cc <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c6ae:	6839      	ldr	r1, [r7, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f7fe fd17 	bl	800b0e4 <udp_input>
      break;
 800c6b6:	e028      	b.n	800c70a <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c6b8:	6839      	ldr	r1, [r7, #0]
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f7fa fdd4 	bl	8007268 <tcp_input>
      break;
 800c6c0:	e023      	b.n	800c70a <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff fd05 	bl	800c0d4 <icmp_input>
      break;
 800c6ca:	e01e      	b.n	800c70a <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c6cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c738 <ip4_input+0x274>)
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	6939      	ldr	r1, [r7, #16]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f000 f906 	bl	800c8e4 <ip4_addr_isbroadcast_u32>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d112      	bne.n	800c704 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c6de:	4b16      	ldr	r3, [pc, #88]	@ (800c738 <ip4_input+0x274>)
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c6e6:	2be0      	cmp	r3, #224	@ 0xe0
 800c6e8:	d00c      	beq.n	800c704 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c6ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7f8 feff 	bl	80054f4 <pbuf_header_force>
        p->payload = iphdr;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c6fc:	2102      	movs	r1, #2
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff fdee 	bl	800c2e0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7f8 ff07 	bl	8005518 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c70a:	4b0b      	ldr	r3, [pc, #44]	@ (800c738 <ip4_input+0x274>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c710:	4b09      	ldr	r3, [pc, #36]	@ (800c738 <ip4_input+0x274>)
 800c712:	2200      	movs	r2, #0
 800c714:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c716:	4b08      	ldr	r3, [pc, #32]	@ (800c738 <ip4_input+0x274>)
 800c718:	2200      	movs	r2, #0
 800c71a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c71c:	4b06      	ldr	r3, [pc, #24]	@ (800c738 <ip4_input+0x274>)
 800c71e:	2200      	movs	r2, #0
 800c720:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c722:	4b05      	ldr	r3, [pc, #20]	@ (800c738 <ip4_input+0x274>)
 800c724:	2200      	movs	r2, #0
 800c726:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c728:	4b03      	ldr	r3, [pc, #12]	@ (800c738 <ip4_input+0x274>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	200049a8 	.word	0x200049a8
 800c73c:	20007ef8 	.word	0x20007ef8

0800c740 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b08a      	sub	sp, #40	@ 0x28
 800c744:	af04      	add	r7, sp, #16
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d009      	beq.n	800c76c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <ip4_output_if+0x26>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d102      	bne.n	800c76c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	3304      	adds	r3, #4
 800c76a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c76c:	78fa      	ldrb	r2, [r7, #3]
 800c76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c770:	9302      	str	r3, [sp, #8]
 800c772:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c776:	9301      	str	r3, [sp, #4]
 800c778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	4613      	mov	r3, r2
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6979      	ldr	r1, [r7, #20]
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 f805 	bl	800c794 <ip4_output_if_src>
 800c78a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3718      	adds	r7, #24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b088      	sub	sp, #32
 800c798:	af00      	add	r7, sp, #0
 800c79a:	60f8      	str	r0, [r7, #12]
 800c79c:	60b9      	str	r1, [r7, #8]
 800c79e:	607a      	str	r2, [r7, #4]
 800c7a0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	89db      	ldrh	r3, [r3, #14]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d006      	beq.n	800c7b8 <ip4_output_if_src+0x24>
 800c7aa:	4b48      	ldr	r3, [pc, #288]	@ (800c8cc <ip4_output_if_src+0x138>)
 800c7ac:	f240 3233 	movw	r2, #819	@ 0x333
 800c7b0:	4947      	ldr	r1, [pc, #284]	@ (800c8d0 <ip4_output_if_src+0x13c>)
 800c7b2:	4848      	ldr	r0, [pc, #288]	@ (800c8d4 <ip4_output_if_src+0x140>)
 800c7b4:	f001 f8d2 	bl	800d95c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d060      	beq.n	800c880 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c7be:	2314      	movs	r3, #20
 800c7c0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c7c2:	2114      	movs	r1, #20
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f7f8 fe83 	bl	80054d0 <pbuf_header>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d002      	beq.n	800c7d6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c7d0:	f06f 0301 	mvn.w	r3, #1
 800c7d4:	e075      	b.n	800c8c2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	895b      	ldrh	r3, [r3, #10]
 800c7e0:	2b13      	cmp	r3, #19
 800c7e2:	d806      	bhi.n	800c7f2 <ip4_output_if_src+0x5e>
 800c7e4:	4b39      	ldr	r3, [pc, #228]	@ (800c8cc <ip4_output_if_src+0x138>)
 800c7e6:	f44f 7258 	mov.w	r2, #864	@ 0x360
 800c7ea:	493b      	ldr	r1, [pc, #236]	@ (800c8d8 <ip4_output_if_src+0x144>)
 800c7ec:	4839      	ldr	r0, [pc, #228]	@ (800c8d4 <ip4_output_if_src+0x140>)
 800c7ee:	f001 f8b5 	bl	800d95c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	78fa      	ldrb	r2, [r7, #3]
 800c7f6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800c7fe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c808:	8b7b      	ldrh	r3, [r7, #26]
 800c80a:	089b      	lsrs	r3, r3, #2
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c814:	b2da      	uxtb	r2, r3
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c820:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	891b      	ldrh	r3, [r3, #8]
 800c826:	4618      	mov	r0, r3
 800c828:	f7f7 fd65 	bl	80042f6 <lwip_htons>
 800c82c:	4603      	mov	r3, r0
 800c82e:	461a      	mov	r2, r3
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	2200      	movs	r2, #0
 800c838:	719a      	strb	r2, [r3, #6]
 800c83a:	2200      	movs	r2, #0
 800c83c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c83e:	4b27      	ldr	r3, [pc, #156]	@ (800c8dc <ip4_output_if_src+0x148>)
 800c840:	881b      	ldrh	r3, [r3, #0]
 800c842:	4618      	mov	r0, r3
 800c844:	f7f7 fd57 	bl	80042f6 <lwip_htons>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c850:	4b22      	ldr	r3, [pc, #136]	@ (800c8dc <ip4_output_if_src+0x148>)
 800c852:	881b      	ldrh	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	b29a      	uxth	r2, r3
 800c858:	4b20      	ldr	r3, [pc, #128]	@ (800c8dc <ip4_output_if_src+0x148>)
 800c85a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d104      	bne.n	800c86c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c862:	4b1f      	ldr	r3, [pc, #124]	@ (800c8e0 <ip4_output_if_src+0x14c>)
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	60da      	str	r2, [r3, #12]
 800c86a:	e003      	b.n	800c874 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	69fb      	ldr	r3, [r7, #28]
 800c872:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	2200      	movs	r2, #0
 800c878:	729a      	strb	r2, [r3, #10]
 800c87a:	2200      	movs	r2, #0
 800c87c:	72da      	strb	r2, [r3, #11]
 800c87e:	e008      	b.n	800c892 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c88c:	f107 0314 	add.w	r3, r7, #20
 800c890:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00c      	beq.n	800c8b4 <ip4_output_if_src+0x120>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	891a      	ldrh	r2, [r3, #8]
 800c89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d906      	bls.n	800c8b4 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 fd98 	bl	800d3e0 <ip4_frag>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	e006      	b.n	800c8c2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b6:	695b      	ldr	r3, [r3, #20]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8be:	4798      	blx	r3
 800c8c0:	4603      	mov	r3, r0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3720      	adds	r7, #32
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	08010430 	.word	0x08010430
 800c8d0:	08010464 	.word	0x08010464
 800c8d4:	08010470 	.word	0x08010470
 800c8d8:	08010498 	.word	0x08010498
 800c8dc:	20008056 	.word	0x20008056
 800c8e0:	0801084c 	.word	0x0801084c

0800c8e4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f8:	d002      	beq.n	800c900 <ip4_addr_isbroadcast_u32+0x1c>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c900:	2301      	movs	r3, #1
 800c902:	e02a      	b.n	800c95a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c90a:	f003 0302 	and.w	r3, r3, #2
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c912:	2300      	movs	r3, #0
 800c914:	e021      	b.n	800c95a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	3304      	adds	r3, #4
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d101      	bne.n	800c926 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c922:	2300      	movs	r3, #0
 800c924:	e019      	b.n	800c95a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	3304      	adds	r3, #4
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	405a      	eors	r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	3308      	adds	r3, #8
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4013      	ands	r3, r2
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10d      	bne.n	800c958 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	3308      	adds	r3, #8
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	43da      	mvns	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	3308      	adds	r3, #8
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c950:	429a      	cmp	r2, r3
 800c952:	d101      	bne.n	800c958 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c954:	2301      	movs	r3, #1
 800c956:	e000      	b.n	800c95a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c958:	2300      	movs	r3, #0
  }
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3714      	adds	r7, #20
 800c95e:	46bd      	mov	sp, r7
 800c960:	bc80      	pop	{r7}
 800c962:	4770      	bx	lr

0800c964 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800c96c:	2210      	movs	r2, #16
 800c96e:	4904      	ldr	r1, [pc, #16]	@ (800c980 <ip4addr_ntoa+0x1c>)
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f807 	bl	800c984 <ip4addr_ntoa_r>
 800c976:	4603      	mov	r3, r0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20008058 	.word	0x20008058

0800c984 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800c984:	b480      	push	{r7}
 800c986:	b08d      	sub	sp, #52	@ 0x34
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 800c99e:	f107 0318 	add.w	r3, r7, #24
 800c9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9aa:	e058      	b.n	800ca5e <ip4addr_ntoa_r+0xda>
    i = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	781a      	ldrb	r2, [r3, #0]
 800c9b6:	4b32      	ldr	r3, [pc, #200]	@ (800ca80 <ip4addr_ntoa_r+0xfc>)
 800c9b8:	fba3 1302 	umull	r1, r3, r3, r2
 800c9bc:	08d9      	lsrs	r1, r3, #3
 800c9be:	460b      	mov	r3, r1
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	005b      	lsls	r3, r3, #1
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800c9ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	4a2c      	ldr	r2, [pc, #176]	@ (800ca80 <ip4addr_ntoa_r+0xfc>)
 800c9d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d4:	08db      	lsrs	r3, r3, #3
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9da:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800c9dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	7ffb      	ldrb	r3, [r7, #31]
 800c9ea:	3330      	adds	r3, #48	@ 0x30
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 800c9f2:	443b      	add	r3, r7
 800c9f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800c9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1d8      	bne.n	800c9b2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ca00:	e011      	b.n	800ca26 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	623a      	str	r2, [r7, #32]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	dc01      	bgt.n	800ca12 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e030      	b.n	800ca74 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ca12:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ca16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca18:	1c59      	adds	r1, r3, #1
 800ca1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ca1c:	3230      	adds	r2, #48	@ 0x30
 800ca1e:	443a      	add	r2, r7
 800ca20:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ca24:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ca26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca2a:	1e5a      	subs	r2, r3, #1
 800ca2c:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1e6      	bne.n	800ca02 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	623a      	str	r2, [r7, #32]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	dc01      	bgt.n	800ca44 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e017      	b.n	800ca74 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ca44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca4a:	222e      	movs	r2, #46	@ 0x2e
 800ca4c:	701a      	strb	r2, [r3, #0]
    ap++;
 800ca4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca50:	3301      	adds	r3, #1
 800ca52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 800ca54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca58:	3301      	adds	r3, #1
 800ca5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d9a2      	bls.n	800c9ac <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ca66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca68:	3b01      	subs	r3, #1
 800ca6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6e:	2200      	movs	r2, #0
 800ca70:	701a      	strb	r2, [r3, #0]
  return buf;
 800ca72:	68bb      	ldr	r3, [r7, #8]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3734      	adds	r7, #52	@ 0x34
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop
 800ca80:	cccccccd 	.word	0xcccccccd

0800ca84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ca8e:	4b12      	ldr	r3, [pc, #72]	@ (800cad8 <ip_reass_tmr+0x54>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ca94:	e018      	b.n	800cac8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	7fdb      	ldrb	r3, [r3, #31]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d00b      	beq.n	800cab6 <ip_reass_tmr+0x32>
      r->timer--;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	7fdb      	ldrb	r3, [r3, #31]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	60fb      	str	r3, [r7, #12]
 800cab4:	e008      	b.n	800cac8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cac0:	68b9      	ldr	r1, [r7, #8]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f80a 	bl	800cadc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d1e3      	bne.n	800ca96 <ip_reass_tmr+0x12>
     }
   }
}
 800cace:	bf00      	nop
 800cad0:	bf00      	nop
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	20008068 	.word	0x20008068

0800cadc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d105      	bne.n	800cafe <ip_reass_free_complete_datagram+0x22>
 800caf2:	4b45      	ldr	r3, [pc, #276]	@ (800cc08 <ip_reass_free_complete_datagram+0x12c>)
 800caf4:	22ab      	movs	r2, #171	@ 0xab
 800caf6:	4945      	ldr	r1, [pc, #276]	@ (800cc0c <ip_reass_free_complete_datagram+0x130>)
 800caf8:	4845      	ldr	r0, [pc, #276]	@ (800cc10 <ip_reass_free_complete_datagram+0x134>)
 800cafa:	f000 ff2f 	bl	800d95c <iprintf>
  if (prev != NULL) {
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00a      	beq.n	800cb1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d005      	beq.n	800cb1a <ip_reass_free_complete_datagram+0x3e>
 800cb0e:	4b3e      	ldr	r3, [pc, #248]	@ (800cc08 <ip_reass_free_complete_datagram+0x12c>)
 800cb10:	22ad      	movs	r2, #173	@ 0xad
 800cb12:	4940      	ldr	r1, [pc, #256]	@ (800cc14 <ip_reass_free_complete_datagram+0x138>)
 800cb14:	483e      	ldr	r0, [pc, #248]	@ (800cc10 <ip_reass_free_complete_datagram+0x134>)
 800cb16:	f000 ff21 	bl	800d95c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	889b      	ldrh	r3, [r3, #4]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d12a      	bne.n	800cb82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cb3a:	69bb      	ldr	r3, [r7, #24]
 800cb3c:	6858      	ldr	r0, [r3, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	3308      	adds	r3, #8
 800cb42:	2214      	movs	r2, #20
 800cb44:	4619      	mov	r1, r3
 800cb46:	f001 f804 	bl	800db52 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cb4a:	2101      	movs	r1, #1
 800cb4c:	69b8      	ldr	r0, [r7, #24]
 800cb4e:	f7ff fbd7 	bl	800c300 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cb52:	69b8      	ldr	r0, [r7, #24]
 800cb54:	f7f8 fd74 	bl	8005640 <pbuf_clen>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cb5c:	8bfa      	ldrh	r2, [r7, #30]
 800cb5e:	8a7b      	ldrh	r3, [r7, #18]
 800cb60:	4413      	add	r3, r2
 800cb62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb66:	db05      	blt.n	800cb74 <ip_reass_free_complete_datagram+0x98>
 800cb68:	4b27      	ldr	r3, [pc, #156]	@ (800cc08 <ip_reass_free_complete_datagram+0x12c>)
 800cb6a:	22bc      	movs	r2, #188	@ 0xbc
 800cb6c:	492a      	ldr	r1, [pc, #168]	@ (800cc18 <ip_reass_free_complete_datagram+0x13c>)
 800cb6e:	4828      	ldr	r0, [pc, #160]	@ (800cc10 <ip_reass_free_complete_datagram+0x134>)
 800cb70:	f000 fef4 	bl	800d95c <iprintf>
    pbufs_freed += clen;
 800cb74:	8bfa      	ldrh	r2, [r7, #30]
 800cb76:	8a7b      	ldrh	r3, [r7, #18]
 800cb78:	4413      	add	r3, r2
 800cb7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cb7c:	69b8      	ldr	r0, [r7, #24]
 800cb7e:	f7f8 fccb 	bl	8005518 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cb88:	e01f      	b.n	800cbca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7f8 fd50 	bl	8005640 <pbuf_clen>
 800cba0:	4603      	mov	r3, r0
 800cba2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cba4:	8bfa      	ldrh	r2, [r7, #30]
 800cba6:	8a7b      	ldrh	r3, [r7, #18]
 800cba8:	4413      	add	r3, r2
 800cbaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbae:	db05      	blt.n	800cbbc <ip_reass_free_complete_datagram+0xe0>
 800cbb0:	4b15      	ldr	r3, [pc, #84]	@ (800cc08 <ip_reass_free_complete_datagram+0x12c>)
 800cbb2:	22cc      	movs	r2, #204	@ 0xcc
 800cbb4:	4918      	ldr	r1, [pc, #96]	@ (800cc18 <ip_reass_free_complete_datagram+0x13c>)
 800cbb6:	4816      	ldr	r0, [pc, #88]	@ (800cc10 <ip_reass_free_complete_datagram+0x134>)
 800cbb8:	f000 fed0 	bl	800d95c <iprintf>
    pbufs_freed += clen;
 800cbbc:	8bfa      	ldrh	r2, [r7, #30]
 800cbbe:	8a7b      	ldrh	r3, [r7, #18]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f7f8 fca7 	bl	8005518 <pbuf_free>
  while (p != NULL) {
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1dc      	bne.n	800cb8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f8c2 	bl	800cd5c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800cbd8:	4b10      	ldr	r3, [pc, #64]	@ (800cc1c <ip_reass_free_complete_datagram+0x140>)
 800cbda:	881b      	ldrh	r3, [r3, #0]
 800cbdc:	8bfa      	ldrh	r2, [r7, #30]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d905      	bls.n	800cbee <ip_reass_free_complete_datagram+0x112>
 800cbe2:	4b09      	ldr	r3, [pc, #36]	@ (800cc08 <ip_reass_free_complete_datagram+0x12c>)
 800cbe4:	22d2      	movs	r2, #210	@ 0xd2
 800cbe6:	490e      	ldr	r1, [pc, #56]	@ (800cc20 <ip_reass_free_complete_datagram+0x144>)
 800cbe8:	4809      	ldr	r0, [pc, #36]	@ (800cc10 <ip_reass_free_complete_datagram+0x134>)
 800cbea:	f000 feb7 	bl	800d95c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800cbee:	4b0b      	ldr	r3, [pc, #44]	@ (800cc1c <ip_reass_free_complete_datagram+0x140>)
 800cbf0:	881a      	ldrh	r2, [r3, #0]
 800cbf2:	8bfb      	ldrh	r3, [r7, #30]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	4b08      	ldr	r3, [pc, #32]	@ (800cc1c <ip_reass_free_complete_datagram+0x140>)
 800cbfa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800cbfc:	8bfb      	ldrh	r3, [r7, #30]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3720      	adds	r7, #32
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	080104c8 	.word	0x080104c8
 800cc0c:	08010504 	.word	0x08010504
 800cc10:	08010510 	.word	0x08010510
 800cc14:	08010538 	.word	0x08010538
 800cc18:	0801054c 	.word	0x0801054c
 800cc1c:	2000806c 	.word	0x2000806c
 800cc20:	0801056c 	.word	0x0801056c

0800cc24 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b08a      	sub	sp, #40	@ 0x28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cc42:	4b28      	ldr	r3, [pc, #160]	@ (800cce4 <ip_reass_remove_oldest_datagram+0xc0>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cc48:	e030      	b.n	800ccac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	695a      	ldr	r2, [r3, #20]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d10c      	bne.n	800cc70 <ip_reass_remove_oldest_datagram+0x4c>
 800cc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc58:	699a      	ldr	r2, [r3, #24]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d106      	bne.n	800cc70 <ip_reass_remove_oldest_datagram+0x4c>
 800cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc64:	899a      	ldrh	r2, [r3, #12]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	889b      	ldrh	r3, [r3, #4]
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d014      	beq.n	800cc9a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	3301      	adds	r3, #1
 800cc74:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cc76:	6a3b      	ldr	r3, [r7, #32]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d104      	bne.n	800cc86 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc7e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	61bb      	str	r3, [r7, #24]
 800cc84:	e009      	b.n	800cc9a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc88:	7fda      	ldrb	r2, [r3, #31]
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	7fdb      	ldrb	r3, [r3, #31]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d803      	bhi.n	800cc9a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc94:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ccac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1cb      	bne.n	800cc4a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d008      	beq.n	800ccca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ccb8:	69b9      	ldr	r1, [r7, #24]
 800ccba:	6a38      	ldr	r0, [r7, #32]
 800ccbc:	f7ff ff0e 	bl	800cadc <ip_reass_free_complete_datagram>
 800ccc0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	da02      	bge.n	800ccd8 <ip_reass_remove_oldest_datagram+0xb4>
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	dcac      	bgt.n	800cc32 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ccd8:	697b      	ldr	r3, [r7, #20]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3728      	adds	r7, #40	@ 0x28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	20008068 	.word	0x20008068

0800cce8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ccf2:	2004      	movs	r0, #4
 800ccf4:	f7f7 fea8 	bl	8004a48 <memp_malloc>
 800ccf8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d110      	bne.n	800cd22 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff ff8e 	bl	800cc24 <ip_reass_remove_oldest_datagram>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	dc03      	bgt.n	800cd18 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cd10:	2004      	movs	r0, #4
 800cd12:	f7f7 fe99 	bl	8004a48 <memp_malloc>
 800cd16:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e016      	b.n	800cd50 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cd22:	2220      	movs	r2, #32
 800cd24:	2100      	movs	r1, #0
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 fe9d 	bl	800da66 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2203      	movs	r2, #3
 800cd30:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cd32:	4b09      	ldr	r3, [pc, #36]	@ (800cd58 <ip_reass_enqueue_new_datagram+0x70>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cd3a:	4a07      	ldr	r2, [pc, #28]	@ (800cd58 <ip_reass_enqueue_new_datagram+0x70>)
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	3308      	adds	r3, #8
 800cd44:	2214      	movs	r2, #20
 800cd46:	6879      	ldr	r1, [r7, #4]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 ff02 	bl	800db52 <memcpy>
  return ipr;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20008068 	.word	0x20008068

0800cd5c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cd66:	4b10      	ldr	r3, [pc, #64]	@ (800cda8 <ip_reass_dequeue_datagram+0x4c>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d104      	bne.n	800cd7a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a0c      	ldr	r2, [pc, #48]	@ (800cda8 <ip_reass_dequeue_datagram+0x4c>)
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	e00d      	b.n	800cd96 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d106      	bne.n	800cd8e <ip_reass_dequeue_datagram+0x32>
 800cd80:	4b0a      	ldr	r3, [pc, #40]	@ (800cdac <ip_reass_dequeue_datagram+0x50>)
 800cd82:	f240 1245 	movw	r2, #325	@ 0x145
 800cd86:	490a      	ldr	r1, [pc, #40]	@ (800cdb0 <ip_reass_dequeue_datagram+0x54>)
 800cd88:	480a      	ldr	r0, [pc, #40]	@ (800cdb4 <ip_reass_dequeue_datagram+0x58>)
 800cd8a:	f000 fde7 	bl	800d95c <iprintf>
    prev->next = ipr->next;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	2004      	movs	r0, #4
 800cd9a:	f7f7 fea1 	bl	8004ae0 <memp_free>
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	20008068 	.word	0x20008068
 800cdac:	080104c8 	.word	0x080104c8
 800cdb0:	08010588 	.word	0x08010588
 800cdb4:	08010510 	.word	0x08010510

0800cdb8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08c      	sub	sp, #48	@ 0x30
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	885b      	ldrh	r3, [r3, #2]
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7f7 fa8c 	bl	80042f6 <lwip_htons>
 800cdde:	4603      	mov	r3, r0
 800cde0:	461a      	mov	r2, r3
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	f003 030f 	and.w	r3, r3, #15
 800cdea:	b29b      	uxth	r3, r3
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	88db      	ldrh	r3, [r3, #6]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7f7 fa7b 	bl	80042f6 <lwip_htons>
 800ce00:	4603      	mov	r3, r0
 800ce02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	00db      	lsls	r3, r3, #3
 800ce0a:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	2200      	movs	r2, #0
 800ce16:	701a      	strb	r2, [r3, #0]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	705a      	strb	r2, [r3, #1]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	709a      	strb	r2, [r3, #2]
 800ce20:	2200      	movs	r2, #0
 800ce22:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ce24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce26:	8b3a      	ldrh	r2, [r7, #24]
 800ce28:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800ce2a:	8b3a      	ldrh	r2, [r7, #24]
 800ce2c:	8b7b      	ldrh	r3, [r7, #26]
 800ce2e:	4413      	add	r3, r2
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce34:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce3c:	e061      	b.n	800cf02 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	889b      	ldrh	r3, [r3, #4]
 800ce48:	b29a      	uxth	r2, r3
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	889b      	ldrh	r3, [r3, #4]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d232      	bcs.n	800ceba <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ce5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d01f      	beq.n	800cea0 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ce60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce62:	889b      	ldrh	r3, [r3, #4]
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce68:	88db      	ldrh	r3, [r3, #6]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	f0c0 80e3 	bcc.w	800d038 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 800ce72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce74:	88db      	ldrh	r3, [r3, #6]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	697b      	ldr	r3, [r7, #20]
 800ce7a:	889b      	ldrh	r3, [r3, #4]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	f200 80da 	bhi.w	800d038 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ce84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ce8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce8c:	88db      	ldrh	r3, [r3, #6]
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	889b      	ldrh	r3, [r3, #4]
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d037      	beq.n	800cf0a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ce9e:	e034      	b.n	800cf0a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 800cea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cea2:	88db      	ldrh	r3, [r3, #6]
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	889b      	ldrh	r3, [r3, #4]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	429a      	cmp	r2, r3
 800ceae:	f200 80c5 	bhi.w	800d03c <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	68ba      	ldr	r2, [r7, #8]
 800ceb6:	605a      	str	r2, [r3, #4]
      break;
 800ceb8:	e027      	b.n	800cf0a <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	889b      	ldrh	r3, [r3, #4]
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	889b      	ldrh	r3, [r3, #4]
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	429a      	cmp	r2, r3
 800cec8:	f000 80ba 	beq.w	800d040 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cece:	889b      	ldrh	r3, [r3, #4]
 800ced0:	b29a      	uxth	r2, r3
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	88db      	ldrh	r3, [r3, #6]
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	429a      	cmp	r2, r3
 800ceda:	f0c0 80b3 	bcc.w	800d044 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d009      	beq.n	800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 800cee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee6:	88db      	ldrh	r3, [r3, #6]
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	889b      	ldrh	r3, [r3, #4]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d001      	beq.n	800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d19a      	bne.n	800ce3e <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 800cf08:	e000      	b.n	800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 800cf0a:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d12d      	bne.n	800cf6e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 800cf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d01c      	beq.n	800cf52 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cf18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf1a:	88db      	ldrh	r3, [r3, #6]
 800cf1c:	b29a      	uxth	r2, r3
 800cf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf20:	889b      	ldrh	r3, [r3, #4]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d906      	bls.n	800cf36 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800cf28:	4b51      	ldr	r3, [pc, #324]	@ (800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cf2a:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800cf2e:	4951      	ldr	r1, [pc, #324]	@ (800d074 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cf30:	4851      	ldr	r0, [pc, #324]	@ (800d078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cf32:	f000 fd13 	bl	800d95c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cf36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3e:	88db      	ldrh	r3, [r3, #6]
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf44:	889b      	ldrh	r3, [r3, #4]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d010      	beq.n	800cf6e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	623b      	str	r3, [r7, #32]
 800cf50:	e00d      	b.n	800cf6e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	685b      	ldr	r3, [r3, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d006      	beq.n	800cf68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 800cf5a:	4b45      	ldr	r3, [pc, #276]	@ (800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cf5c:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800cf60:	4946      	ldr	r1, [pc, #280]	@ (800d07c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cf62:	4845      	ldr	r0, [pc, #276]	@ (800d078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cf64:	f000 fcfa 	bl	800d95c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d105      	bne.n	800cf80 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	7f9b      	ldrb	r3, [r3, #30]
 800cf78:	f003 0301 	and.w	r3, r3, #1
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d059      	beq.n	800d034 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 800cf80:	6a3b      	ldr	r3, [r7, #32]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d04f      	beq.n	800d026 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d006      	beq.n	800cf9c <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	889b      	ldrh	r3, [r3, #4]
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	623b      	str	r3, [r7, #32]
 800cfa0:	e041      	b.n	800d026 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800cfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa4:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800cfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800cfac:	e012      	b.n	800cfd4 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 800cfae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800cfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb6:	88db      	ldrh	r3, [r3, #6]
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbc:	889b      	ldrh	r3, [r3, #4]
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d002      	beq.n	800cfca <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	623b      	str	r3, [r7, #32]
            break;
 800cfc8:	e007      	b.n	800cfda <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 800cfca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800cfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800cfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e9      	bne.n	800cfae <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cfda:	6a3b      	ldr	r3, [r7, #32]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d022      	beq.n	800d026 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d106      	bne.n	800cff6 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 800cfe8:	4b21      	ldr	r3, [pc, #132]	@ (800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800cfea:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800cfee:	4924      	ldr	r1, [pc, #144]	@ (800d080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800cff0:	4821      	ldr	r0, [pc, #132]	@ (800d078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cff2:	f000 fcb3 	bl	800d95c <iprintf>
          LWIP_ASSERT("sanity check",
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cffe:	429a      	cmp	r2, r3
 800d000:	d106      	bne.n	800d010 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 800d002:	4b1b      	ldr	r3, [pc, #108]	@ (800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d004:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800d008:	491d      	ldr	r1, [pc, #116]	@ (800d080 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d00a:	481b      	ldr	r0, [pc, #108]	@ (800d078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d00c:	f000 fca6 	bl	800d95c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d006      	beq.n	800d026 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800d018:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800d01a:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800d01e:	4919      	ldr	r1, [pc, #100]	@ (800d084 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d020:	4815      	ldr	r0, [pc, #84]	@ (800d078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d022:	f000 fc9b 	bl	800d95c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bf14      	ite	ne
 800d02c:	2301      	movne	r3, #1
 800d02e:	2300      	moveq	r3, #0
 800d030:	b2db      	uxtb	r3, r3
 800d032:	e018      	b.n	800d066 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d034:	2300      	movs	r3, #0
 800d036:	e016      	b.n	800d066 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 800d038:	bf00      	nop
 800d03a:	e004      	b.n	800d046 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 800d03c:	bf00      	nop
 800d03e:	e002      	b.n	800d046 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800d040:	bf00      	nop
 800d042:	e000      	b.n	800d046 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800d044:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800d046:	68b8      	ldr	r0, [r7, #8]
 800d048:	f7f8 fafa 	bl	8005640 <pbuf_clen>
 800d04c:	4603      	mov	r3, r0
 800d04e:	461a      	mov	r2, r3
 800d050:	4b0d      	ldr	r3, [pc, #52]	@ (800d088 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d052:	881b      	ldrh	r3, [r3, #0]
 800d054:	1a9b      	subs	r3, r3, r2
 800d056:	b29a      	uxth	r2, r3
 800d058:	4b0b      	ldr	r3, [pc, #44]	@ (800d088 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d05a:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800d05c:	68b8      	ldr	r0, [r7, #8]
 800d05e:	f7f8 fa5b 	bl	8005518 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d062:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800d066:	4618      	mov	r0, r3
 800d068:	3730      	adds	r7, #48	@ 0x30
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	080104c8 	.word	0x080104c8
 800d074:	080105a4 	.word	0x080105a4
 800d078:	08010510 	.word	0x08010510
 800d07c:	080105c4 	.word	0x080105c4
 800d080:	080105fc 	.word	0x080105fc
 800d084:	0801060c 	.word	0x0801060c
 800d088:	2000806c 	.word	0x2000806c

0800d08c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08e      	sub	sp, #56	@ 0x38
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800d09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	2b05      	cmp	r3, #5
 800d0a4:	f040 8130 	bne.w	800d308 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800d0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	b29b      	uxth	r3, r3
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7f7 f921 	bl	80042f6 <lwip_htons>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800d0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c2:	885b      	ldrh	r3, [r3, #2]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f7 f915 	bl	80042f6 <lwip_htons>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	f003 030f 	and.w	r3, r3, #15
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7f8 faac 	bl	8005640 <pbuf_clen>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d0ec:	4b8e      	ldr	r3, [pc, #568]	@ (800d328 <ip4_reass+0x29c>)
 800d0ee:	881b      	ldrh	r3, [r3, #0]
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0f4:	4413      	add	r3, r2
 800d0f6:	2b0a      	cmp	r3, #10
 800d0f8:	dd10      	ble.n	800d11c <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d0fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d100:	f7ff fd90 	bl	800cc24 <ip_reass_remove_oldest_datagram>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8100 	beq.w	800d30c <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d10c:	4b86      	ldr	r3, [pc, #536]	@ (800d328 <ip4_reass+0x29c>)
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
 800d112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d114:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d116:	2b0a      	cmp	r3, #10
 800d118:	f300 80f8 	bgt.w	800d30c <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d11c:	4b83      	ldr	r3, [pc, #524]	@ (800d32c <ip4_reass+0x2a0>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	633b      	str	r3, [r7, #48]	@ 0x30
 800d122:	e015      	b.n	800d150 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d126:	695a      	ldr	r2, [r3, #20]
 800d128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	429a      	cmp	r2, r3
 800d12e:	d10c      	bne.n	800d14a <ip4_reass+0xbe>
 800d130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d132:	699a      	ldr	r2, [r3, #24]
 800d134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d106      	bne.n	800d14a <ip4_reass+0xbe>
 800d13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d13e:	899a      	ldrh	r2, [r3, #12]
 800d140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d142:	889b      	ldrh	r3, [r3, #4]
 800d144:	b29b      	uxth	r3, r3
 800d146:	429a      	cmp	r2, r3
 800d148:	d006      	beq.n	800d158 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1e6      	bne.n	800d124 <ip4_reass+0x98>
 800d156:	e000      	b.n	800d15a <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d158:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d109      	bne.n	800d174 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d160:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d162:	4619      	mov	r1, r3
 800d164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d166:	f7ff fdbf 	bl	800cce8 <ip_reass_enqueue_new_datagram>
 800d16a:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d11c      	bne.n	800d1ac <ip4_reass+0x120>
      goto nullreturn;
 800d172:	e0d0      	b.n	800d316 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d176:	88db      	ldrh	r3, [r3, #6]
 800d178:	b29b      	uxth	r3, r3
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f7 f8bb 	bl	80042f6 <lwip_htons>
 800d180:	4603      	mov	r3, r0
 800d182:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d186:	2b00      	cmp	r3, #0
 800d188:	d110      	bne.n	800d1ac <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d18c:	89db      	ldrh	r3, [r3, #14]
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f7 f8b1 	bl	80042f6 <lwip_htons>
 800d194:	4603      	mov	r3, r0
 800d196:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d006      	beq.n	800d1ac <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	2214      	movs	r2, #20
 800d1a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 fcd3 	bl	800db52 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ae:	88db      	ldrh	r3, [r3, #6]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	f003 0320 	and.w	r3, r3, #32
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	bf0c      	ite	eq
 800d1ba:	2301      	moveq	r3, #1
 800d1bc:	2300      	movne	r3, #0
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00e      	beq.n	800d1e6 <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 800d1c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d1ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1cc:	4413      	add	r3, r2
 800d1ce:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d1d0:	8b7a      	ldrh	r2, [r7, #26]
 800d1d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	f0c0 809b 	bcc.w	800d310 <ip4_reass+0x284>
 800d1da:	8b7b      	ldrh	r3, [r7, #26]
 800d1dc:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	f200 8095 	bhi.w	800d310 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d1e6:	69fa      	ldr	r2, [r7, #28]
 800d1e8:	6879      	ldr	r1, [r7, #4]
 800d1ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d1ec:	f7ff fde4 	bl	800cdb8 <ip_reass_chain_frag_into_datagram_and_validate>
 800d1f0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1f8:	f000 808c 	beq.w	800d314 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d1fc:	4b4a      	ldr	r3, [pc, #296]	@ (800d328 <ip4_reass+0x29c>)
 800d1fe:	881a      	ldrh	r2, [r3, #0]
 800d200:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d202:	4413      	add	r3, r2
 800d204:	b29a      	uxth	r2, r3
 800d206:	4b48      	ldr	r3, [pc, #288]	@ (800d328 <ip4_reass+0x29c>)
 800d208:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d20a:	69fb      	ldr	r3, [r7, #28]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00d      	beq.n	800d22c <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 800d210:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d212:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d214:	4413      	add	r3, r2
 800d216:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21a:	8a7a      	ldrh	r2, [r7, #18]
 800d21c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d220:	7f9b      	ldrb	r3, [r3, #30]
 800d222:	f043 0301 	orr.w	r3, r3, #1
 800d226:	b2da      	uxtb	r2, r3
 800d228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d22a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d168      	bne.n	800d304 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800d232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d234:	8b9b      	ldrh	r3, [r3, #28]
 800d236:	3314      	adds	r3, #20
 800d238:	b29a      	uxth	r2, r3
 800d23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800d23e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	685b      	ldr	r3, [r3, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d252:	3308      	adds	r3, #8
 800d254:	2214      	movs	r2, #20
 800d256:	4619      	mov	r1, r3
 800d258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d25a:	f000 fc7a 	bl	800db52 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	8b9b      	ldrh	r3, [r3, #28]
 800d262:	4618      	mov	r0, r3
 800d264:	f7f7 f847 	bl	80042f6 <lwip_htons>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	2200      	movs	r2, #0
 800d274:	719a      	strb	r2, [r3, #6]
 800d276:	2200      	movs	r2, #0
 800d278:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27c:	2200      	movs	r2, #0
 800d27e:	729a      	strb	r2, [r3, #10]
 800d280:	2200      	movs	r2, #0
 800d282:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d28a:	e00e      	b.n	800d2aa <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 800d28c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800d292:	f06f 0113 	mvn.w	r1, #19
 800d296:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d298:	f7f8 f91a 	bl	80054d0 <pbuf_header>
      pbuf_cat(p, r);
 800d29c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7f8 fa06 	bl	80056b0 <pbuf_cat>
      r = iprh->next_pbuf;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d2aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1ed      	bne.n	800d28c <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d2b0:	4b1e      	ldr	r3, [pc, #120]	@ (800d32c <ip4_reass+0x2a0>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d102      	bne.n	800d2c0 <ip4_reass+0x234>
      ipr_prev = NULL;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2be:	e010      	b.n	800d2e2 <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d32c <ip4_reass+0x2a0>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2c6:	e007      	b.n	800d2d8 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 800d2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d006      	beq.n	800d2e0 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d1f4      	bne.n	800d2c8 <ip4_reass+0x23c>
 800d2de:	e000      	b.n	800d2e2 <ip4_reass+0x256>
          break;
 800d2e0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d2e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d2e6:	f7ff fd39 	bl	800cd5c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7f8 f9a8 	bl	8005640 <pbuf_clen>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800d328 <ip4_reass+0x29c>)
 800d2f6:	881b      	ldrh	r3, [r3, #0]
 800d2f8:	1a9b      	subs	r3, r3, r2
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	4b0a      	ldr	r3, [pc, #40]	@ (800d328 <ip4_reass+0x29c>)
 800d2fe:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	e00c      	b.n	800d31e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d304:	2300      	movs	r3, #0
 800d306:	e00a      	b.n	800d31e <ip4_reass+0x292>
    goto nullreturn;
 800d308:	bf00      	nop
 800d30a:	e004      	b.n	800d316 <ip4_reass+0x28a>
      goto nullreturn;
 800d30c:	bf00      	nop
 800d30e:	e002      	b.n	800d316 <ip4_reass+0x28a>
      goto nullreturn;
 800d310:	bf00      	nop
 800d312:	e000      	b.n	800d316 <ip4_reass+0x28a>
    goto nullreturn;
 800d314:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7f8 f8fe 	bl	8005518 <pbuf_free>
  return NULL;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3738      	adds	r7, #56	@ 0x38
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
 800d326:	bf00      	nop
 800d328:	2000806c 	.word	0x2000806c
 800d32c:	20008068 	.word	0x20008068

0800d330 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800d334:	2005      	movs	r0, #5
 800d336:	f7f7 fb87 	bl	8004a48 <memp_malloc>
 800d33a:	4603      	mov	r3, r0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <ip_frag_free_pbuf_custom_ref+0x1c>
 800d34e:	4b07      	ldr	r3, [pc, #28]	@ (800d36c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d350:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800d354:	4906      	ldr	r1, [pc, #24]	@ (800d370 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d356:	4807      	ldr	r0, [pc, #28]	@ (800d374 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d358:	f000 fb00 	bl	800d95c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d35c:	6879      	ldr	r1, [r7, #4]
 800d35e:	2005      	movs	r0, #5
 800d360:	f7f7 fbbe 	bl	8004ae0 <memp_free>
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	080104c8 	.word	0x080104c8
 800d370:	08010630 	.word	0x08010630
 800d374:	08010510 	.word	0x08010510

0800d378 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <ipfrag_free_pbuf_custom+0x20>
 800d38a:	4b11      	ldr	r3, [pc, #68]	@ (800d3d0 <ipfrag_free_pbuf_custom+0x58>)
 800d38c:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800d390:	4910      	ldr	r1, [pc, #64]	@ (800d3d4 <ipfrag_free_pbuf_custom+0x5c>)
 800d392:	4811      	ldr	r0, [pc, #68]	@ (800d3d8 <ipfrag_free_pbuf_custom+0x60>)
 800d394:	f000 fae2 	bl	800d95c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d006      	beq.n	800d3ae <ipfrag_free_pbuf_custom+0x36>
 800d3a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d3d0 <ipfrag_free_pbuf_custom+0x58>)
 800d3a2:	f240 22b9 	movw	r2, #697	@ 0x2b9
 800d3a6:	490d      	ldr	r1, [pc, #52]	@ (800d3dc <ipfrag_free_pbuf_custom+0x64>)
 800d3a8:	480b      	ldr	r0, [pc, #44]	@ (800d3d8 <ipfrag_free_pbuf_custom+0x60>)
 800d3aa:	f000 fad7 	bl	800d95c <iprintf>
  if (pcr->original != NULL) {
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	695b      	ldr	r3, [r3, #20]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7f8 f8ac 	bl	8005518 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff ffbd 	bl	800d340 <ip_frag_free_pbuf_custom_ref>
}
 800d3c6:	bf00      	nop
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	080104c8 	.word	0x080104c8
 800d3d4:	0801063c 	.word	0x0801063c
 800d3d8:	08010510 	.word	0x08010510
 800d3dc:	08010648 	.word	0x08010648

0800d3e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b092      	sub	sp, #72	@ 0x48
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d3f4:	3b14      	subs	r3, #20
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	da00      	bge.n	800d3fc <ip4_frag+0x1c>
 800d3fa:	3307      	adds	r3, #7
 800d3fc:	10db      	asrs	r3, r3, #3
 800d3fe:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d400:	2314      	movs	r3, #20
 800d402:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800d40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	f003 030f 	and.w	r3, r3, #15
 800d416:	2b05      	cmp	r3, #5
 800d418:	d009      	beq.n	800d42e <ip4_frag+0x4e>
 800d41a:	4b7a      	ldr	r3, [pc, #488]	@ (800d604 <ip4_frag+0x224>)
 800d41c:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800d420:	4979      	ldr	r1, [pc, #484]	@ (800d608 <ip4_frag+0x228>)
 800d422:	487a      	ldr	r0, [pc, #488]	@ (800d60c <ip4_frag+0x22c>)
 800d424:	f000 fa9a 	bl	800d95c <iprintf>
 800d428:	f06f 0305 	mvn.w	r3, #5
 800d42c:	e0e6      	b.n	800d5fc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d430:	88db      	ldrh	r3, [r3, #6]
 800d432:	b29b      	uxth	r3, r3
 800d434:	4618      	mov	r0, r3
 800d436:	f7f6 ff5e 	bl	80042f6 <lwip_htons>
 800d43a:	4603      	mov	r3, r0
 800d43c:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 800d43e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d444:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800d446:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d009      	beq.n	800d464 <ip4_frag+0x84>
 800d450:	4b6c      	ldr	r3, [pc, #432]	@ (800d604 <ip4_frag+0x224>)
 800d452:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d456:	496e      	ldr	r1, [pc, #440]	@ (800d610 <ip4_frag+0x230>)
 800d458:	486c      	ldr	r0, [pc, #432]	@ (800d60c <ip4_frag+0x22c>)
 800d45a:	f000 fa7f 	bl	800d95c <iprintf>
 800d45e:	f06f 0305 	mvn.w	r3, #5
 800d462:	e0cb      	b.n	800d5fc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	891b      	ldrh	r3, [r3, #8]
 800d468:	3b14      	subs	r3, #20
 800d46a:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 800d46c:	e0bd      	b.n	800d5ea <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800d46e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d470:	00da      	lsls	r2, r3, #3
 800d472:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d474:	4293      	cmp	r3, r2
 800d476:	bfa8      	it	ge
 800d478:	4613      	movge	r3, r2
 800d47a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d47c:	2200      	movs	r2, #0
 800d47e:	2114      	movs	r1, #20
 800d480:	2002      	movs	r0, #2
 800d482:	f7f7 fcd1 	bl	8004e28 <pbuf_alloc>
 800d486:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800d488:	6a3b      	ldr	r3, [r7, #32]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80b3 	beq.w	800d5f6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	895b      	ldrh	r3, [r3, #10]
 800d494:	2b13      	cmp	r3, #19
 800d496:	d806      	bhi.n	800d4a6 <ip4_frag+0xc6>
 800d498:	4b5a      	ldr	r3, [pc, #360]	@ (800d604 <ip4_frag+0x224>)
 800d49a:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800d49e:	495d      	ldr	r1, [pc, #372]	@ (800d614 <ip4_frag+0x234>)
 800d4a0:	485a      	ldr	r0, [pc, #360]	@ (800d60c <ip4_frag+0x22c>)
 800d4a2:	f000 fa5b 	bl	800d95c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	2214      	movs	r2, #20
 800d4ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 fb4f 	bl	800db52 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d4b4:	6a3b      	ldr	r3, [r7, #32]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800d4ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d4bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 800d4be:	e04f      	b.n	800d560 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	895a      	ldrh	r2, [r3, #10]
 800d4c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d4ca:	8b7a      	ldrh	r2, [r7, #26]
 800d4cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	bf28      	it	cs
 800d4d2:	4613      	movcs	r3, r2
 800d4d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d4d6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d105      	bne.n	800d4e8 <ip4_frag+0x108>
        poff = 0;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	60fb      	str	r3, [r7, #12]
        continue;
 800d4e6:	e03b      	b.n	800d560 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d4e8:	f7ff ff22 	bl	800d330 <ip_frag_alloc_pbuf_custom_ref>
 800d4ec:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d103      	bne.n	800d4fc <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800d4f4:	6a38      	ldr	r0, [r7, #32]
 800d4f6:	f7f8 f80f 	bl	8005518 <pbuf_free>
        goto memerr;
 800d4fa:	e07d      	b.n	800d5f8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d4fc:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d502:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d504:	4413      	add	r3, r2
 800d506:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800d508:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d50a:	9201      	str	r2, [sp, #4]
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	4603      	mov	r3, r0
 800d510:	2202      	movs	r2, #2
 800d512:	2004      	movs	r0, #4
 800d514:	f7f7 fe22 	bl	800515c <pbuf_alloced_custom>
 800d518:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d106      	bne.n	800d52e <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d520:	6978      	ldr	r0, [r7, #20]
 800d522:	f7ff ff0d 	bl	800d340 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d526:	6a38      	ldr	r0, [r7, #32]
 800d528:	f7f7 fff6 	bl	8005518 <pbuf_free>
        goto memerr;
 800d52c:	e064      	b.n	800d5f8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f7f8 f89c 	bl	800566c <pbuf_ref>
      pcr->original = p;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	4a36      	ldr	r2, [pc, #216]	@ (800d618 <ip4_frag+0x238>)
 800d53e:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d540:	6939      	ldr	r1, [r7, #16]
 800d542:	6a38      	ldr	r0, [r7, #32]
 800d544:	f7f8 f8b4 	bl	80056b0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800d548:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800d54a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 800d550:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d552:	2b00      	cmp	r3, #0
 800d554:	d004      	beq.n	800d560 <ip4_frag+0x180>
        poff = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d560:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1ac      	bne.n	800d4c0 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800d566:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d568:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d56a:	4413      	add	r3, r2
 800d56c:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d572:	f1a3 0213 	sub.w	r2, r3, #19
 800d576:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d578:	429a      	cmp	r2, r3
 800d57a:	bfcc      	ite	gt
 800d57c:	2301      	movgt	r3, #1
 800d57e:	2300      	movle	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d584:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d586:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d58a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d103      	bne.n	800d59a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800d592:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d598:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d59a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7f6 feaa 	bl	80042f6 <lwip_htons>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800d5aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d5ac:	3314      	adds	r3, #20
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7f6 fea0 	bl	80042f6 <lwip_htons>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	729a      	strb	r2, [r3, #10]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	6a39      	ldr	r1, [r7, #32]
 800d5d0:	68b8      	ldr	r0, [r7, #8]
 800d5d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d5d4:	6a38      	ldr	r0, [r7, #32]
 800d5d6:	f7f7 ff9f 	bl	8005518 <pbuf_free>
    left -= fragsize;
 800d5da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d5dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 800d5e2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800d5e4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800d5e6:	4413      	add	r3, r2
 800d5e8:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 800d5ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f47f af3e 	bne.w	800d46e <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	e002      	b.n	800d5fc <ip4_frag+0x21c>
      goto memerr;
 800d5f6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d5f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3740      	adds	r7, #64	@ 0x40
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	080104c8 	.word	0x080104c8
 800d608:	08010654 	.word	0x08010654
 800d60c:	08010510 	.word	0x08010510
 800d610:	0801067c 	.word	0x0801067c
 800d614:	08010698 	.word	0x08010698
 800d618:	0800d379 	.word	0x0800d379

0800d61c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800d626:	230e      	movs	r3, #14
 800d628:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	895b      	ldrh	r3, [r3, #10]
 800d62e:	2b0e      	cmp	r3, #14
 800d630:	d977      	bls.n	800d722 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	7b1a      	ldrb	r2, [r3, #12]
 800d63c:	7b5b      	ldrb	r3, [r3, #13]
 800d63e:	021b      	lsls	r3, r3, #8
 800d640:	4313      	orrs	r3, r2
 800d642:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	f003 0301 	and.w	r3, r3, #1
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d023      	beq.n	800d698 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b01      	cmp	r3, #1
 800d656:	d10f      	bne.n	800d678 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	785b      	ldrb	r3, [r3, #1]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d11b      	bne.n	800d698 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d664:	2b5e      	cmp	r3, #94	@ 0x5e
 800d666:	d117      	bne.n	800d698 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	7b5b      	ldrb	r3, [r3, #13]
 800d66c:	f043 0310 	orr.w	r3, r3, #16
 800d670:	b2da      	uxtb	r2, r3
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	735a      	strb	r2, [r3, #13]
 800d676:	e00f      	b.n	800d698 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	2206      	movs	r2, #6
 800d67c:	4931      	ldr	r1, [pc, #196]	@ (800d744 <ethernet_input+0x128>)
 800d67e:	4618      	mov	r0, r3
 800d680:	f000 f9e1 	bl	800da46 <memcmp>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d106      	bne.n	800d698 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	7b5b      	ldrb	r3, [r3, #13]
 800d68e:	f043 0308 	orr.w	r3, r3, #8
 800d692:	b2da      	uxtb	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d698:	89fb      	ldrh	r3, [r7, #14]
 800d69a:	2b08      	cmp	r3, #8
 800d69c:	d003      	beq.n	800d6a6 <ethernet_input+0x8a>
 800d69e:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d6a2:	d01e      	beq.n	800d6e2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d6a4:	e046      	b.n	800d734 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d6ac:	f003 0308 	and.w	r3, r3, #8
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d038      	beq.n	800d726 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	895b      	ldrh	r3, [r3, #10]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	db33      	blt.n	800d72a <ethernet_input+0x10e>
 800d6c2:	8afb      	ldrh	r3, [r7, #22]
 800d6c4:	425b      	negs	r3, r3
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	b21b      	sxth	r3, r3
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7f7 feff 	bl	80054d0 <pbuf_header>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d128      	bne.n	800d72a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d6d8:	6839      	ldr	r1, [r7, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7fe fef2 	bl	800c4c4 <ip4_input>
      break;
 800d6e0:	e01d      	b.n	800d71e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d6e8:	f003 0308 	and.w	r3, r3, #8
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01e      	beq.n	800d72e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	895b      	ldrh	r3, [r3, #10]
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	db19      	blt.n	800d732 <ethernet_input+0x116>
 800d6fe:	8afb      	ldrh	r3, [r7, #22]
 800d700:	425b      	negs	r3, r3
 800d702:	b29b      	uxth	r3, r3
 800d704:	b21b      	sxth	r3, r3
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7f7 fee1 	bl	80054d0 <pbuf_header>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10e      	bne.n	800d732 <ethernet_input+0x116>
        etharp_input(p, netif);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7fe f8c2 	bl	800b8a0 <etharp_input>
      break;
 800d71c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d71e:	2300      	movs	r3, #0
 800d720:	e00c      	b.n	800d73c <ethernet_input+0x120>
    goto free_and_return;
 800d722:	bf00      	nop
 800d724:	e006      	b.n	800d734 <ethernet_input+0x118>
        goto free_and_return;
 800d726:	bf00      	nop
 800d728:	e004      	b.n	800d734 <ethernet_input+0x118>
        goto free_and_return;
 800d72a:	bf00      	nop
 800d72c:	e002      	b.n	800d734 <ethernet_input+0x118>
        goto free_and_return;
 800d72e:	bf00      	nop
 800d730:	e000      	b.n	800d734 <ethernet_input+0x118>
        goto free_and_return;
 800d732:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7f7 feef 	bl	8005518 <pbuf_free>
  return ERR_OK;
 800d73a:	2300      	movs	r3, #0
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3718      	adds	r7, #24
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	08010850 	.word	0x08010850

0800d748 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b086      	sub	sp, #24
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
 800d754:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d756:	8c3b      	ldrh	r3, [r7, #32]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7f6 fdcc 	bl	80042f6 <lwip_htons>
 800d75e:	4603      	mov	r3, r0
 800d760:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d762:	210e      	movs	r1, #14
 800d764:	68b8      	ldr	r0, [r7, #8]
 800d766:	f7f7 feb3 	bl	80054d0 <pbuf_header>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d125      	bne.n	800d7bc <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	8afa      	ldrh	r2, [r7, #22]
 800d77a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	2206      	movs	r2, #6
 800d780:	6839      	ldr	r1, [r7, #0]
 800d782:	4618      	mov	r0, r3
 800d784:	f000 f9e5 	bl	800db52 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	3306      	adds	r3, #6
 800d78c:	2206      	movs	r2, #6
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f000 f9de 	bl	800db52 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d79c:	2b06      	cmp	r3, #6
 800d79e:	d006      	beq.n	800d7ae <ethernet_output+0x66>
 800d7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d7cc <ethernet_output+0x84>)
 800d7a2:	f240 122b 	movw	r2, #299	@ 0x12b
 800d7a6:	490a      	ldr	r1, [pc, #40]	@ (800d7d0 <ethernet_output+0x88>)
 800d7a8:	480a      	ldr	r0, [pc, #40]	@ (800d7d4 <ethernet_output+0x8c>)
 800d7aa:	f000 f8d7 	bl	800d95c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	68b9      	ldr	r1, [r7, #8]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	4798      	blx	r3
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	e002      	b.n	800d7c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d7bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d7be:	f06f 0301 	mvn.w	r3, #1
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	080106b8 	.word	0x080106b8
 800d7d0:	080106f0 	.word	0x080106f0
 800d7d4:	08010724 	.word	0x08010724

0800d7d8 <std>:
 800d7d8:	2300      	movs	r3, #0
 800d7da:	b510      	push	{r4, lr}
 800d7dc:	4604      	mov	r4, r0
 800d7de:	e9c0 3300 	strd	r3, r3, [r0]
 800d7e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7e6:	6083      	str	r3, [r0, #8]
 800d7e8:	8181      	strh	r1, [r0, #12]
 800d7ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7ec:	81c2      	strh	r2, [r0, #14]
 800d7ee:	6183      	str	r3, [r0, #24]
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	2208      	movs	r2, #8
 800d7f4:	305c      	adds	r0, #92	@ 0x5c
 800d7f6:	f000 f936 	bl	800da66 <memset>
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d830 <std+0x58>)
 800d7fc:	6224      	str	r4, [r4, #32]
 800d7fe:	6263      	str	r3, [r4, #36]	@ 0x24
 800d800:	4b0c      	ldr	r3, [pc, #48]	@ (800d834 <std+0x5c>)
 800d802:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d804:	4b0c      	ldr	r3, [pc, #48]	@ (800d838 <std+0x60>)
 800d806:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d808:	4b0c      	ldr	r3, [pc, #48]	@ (800d83c <std+0x64>)
 800d80a:	6323      	str	r3, [r4, #48]	@ 0x30
 800d80c:	4b0c      	ldr	r3, [pc, #48]	@ (800d840 <std+0x68>)
 800d80e:	429c      	cmp	r4, r3
 800d810:	d006      	beq.n	800d820 <std+0x48>
 800d812:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d816:	4294      	cmp	r4, r2
 800d818:	d002      	beq.n	800d820 <std+0x48>
 800d81a:	33d0      	adds	r3, #208	@ 0xd0
 800d81c:	429c      	cmp	r4, r3
 800d81e:	d105      	bne.n	800d82c <std+0x54>
 800d820:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d828:	f000 b990 	b.w	800db4c <__retarget_lock_init_recursive>
 800d82c:	bd10      	pop	{r4, pc}
 800d82e:	bf00      	nop
 800d830:	0800d9c1 	.word	0x0800d9c1
 800d834:	0800d9e3 	.word	0x0800d9e3
 800d838:	0800da1b 	.word	0x0800da1b
 800d83c:	0800da3f 	.word	0x0800da3f
 800d840:	20008070 	.word	0x20008070

0800d844 <stdio_exit_handler>:
 800d844:	4a02      	ldr	r2, [pc, #8]	@ (800d850 <stdio_exit_handler+0xc>)
 800d846:	4903      	ldr	r1, [pc, #12]	@ (800d854 <stdio_exit_handler+0x10>)
 800d848:	4803      	ldr	r0, [pc, #12]	@ (800d858 <stdio_exit_handler+0x14>)
 800d84a:	f000 b869 	b.w	800d920 <_fwalk_sglue>
 800d84e:	bf00      	nop
 800d850:	20000010 	.word	0x20000010
 800d854:	0800e6b1 	.word	0x0800e6b1
 800d858:	20000020 	.word	0x20000020

0800d85c <cleanup_stdio>:
 800d85c:	6841      	ldr	r1, [r0, #4]
 800d85e:	4b0c      	ldr	r3, [pc, #48]	@ (800d890 <cleanup_stdio+0x34>)
 800d860:	b510      	push	{r4, lr}
 800d862:	4299      	cmp	r1, r3
 800d864:	4604      	mov	r4, r0
 800d866:	d001      	beq.n	800d86c <cleanup_stdio+0x10>
 800d868:	f000 ff22 	bl	800e6b0 <_fflush_r>
 800d86c:	68a1      	ldr	r1, [r4, #8]
 800d86e:	4b09      	ldr	r3, [pc, #36]	@ (800d894 <cleanup_stdio+0x38>)
 800d870:	4299      	cmp	r1, r3
 800d872:	d002      	beq.n	800d87a <cleanup_stdio+0x1e>
 800d874:	4620      	mov	r0, r4
 800d876:	f000 ff1b 	bl	800e6b0 <_fflush_r>
 800d87a:	68e1      	ldr	r1, [r4, #12]
 800d87c:	4b06      	ldr	r3, [pc, #24]	@ (800d898 <cleanup_stdio+0x3c>)
 800d87e:	4299      	cmp	r1, r3
 800d880:	d004      	beq.n	800d88c <cleanup_stdio+0x30>
 800d882:	4620      	mov	r0, r4
 800d884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d888:	f000 bf12 	b.w	800e6b0 <_fflush_r>
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	bf00      	nop
 800d890:	20008070 	.word	0x20008070
 800d894:	200080d8 	.word	0x200080d8
 800d898:	20008140 	.word	0x20008140

0800d89c <global_stdio_init.part.0>:
 800d89c:	b510      	push	{r4, lr}
 800d89e:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <global_stdio_init.part.0+0x30>)
 800d8a0:	4c0b      	ldr	r4, [pc, #44]	@ (800d8d0 <global_stdio_init.part.0+0x34>)
 800d8a2:	4a0c      	ldr	r2, [pc, #48]	@ (800d8d4 <global_stdio_init.part.0+0x38>)
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	601a      	str	r2, [r3, #0]
 800d8a8:	2104      	movs	r1, #4
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f7ff ff94 	bl	800d7d8 <std>
 800d8b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8b4:	2201      	movs	r2, #1
 800d8b6:	2109      	movs	r1, #9
 800d8b8:	f7ff ff8e 	bl	800d7d8 <std>
 800d8bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8c6:	2112      	movs	r1, #18
 800d8c8:	f7ff bf86 	b.w	800d7d8 <std>
 800d8cc:	200081a8 	.word	0x200081a8
 800d8d0:	20008070 	.word	0x20008070
 800d8d4:	0800d845 	.word	0x0800d845

0800d8d8 <__sfp_lock_acquire>:
 800d8d8:	4801      	ldr	r0, [pc, #4]	@ (800d8e0 <__sfp_lock_acquire+0x8>)
 800d8da:	f000 b938 	b.w	800db4e <__retarget_lock_acquire_recursive>
 800d8de:	bf00      	nop
 800d8e0:	200081b1 	.word	0x200081b1

0800d8e4 <__sfp_lock_release>:
 800d8e4:	4801      	ldr	r0, [pc, #4]	@ (800d8ec <__sfp_lock_release+0x8>)
 800d8e6:	f000 b933 	b.w	800db50 <__retarget_lock_release_recursive>
 800d8ea:	bf00      	nop
 800d8ec:	200081b1 	.word	0x200081b1

0800d8f0 <__sinit>:
 800d8f0:	b510      	push	{r4, lr}
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	f7ff fff0 	bl	800d8d8 <__sfp_lock_acquire>
 800d8f8:	6a23      	ldr	r3, [r4, #32]
 800d8fa:	b11b      	cbz	r3, 800d904 <__sinit+0x14>
 800d8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d900:	f7ff bff0 	b.w	800d8e4 <__sfp_lock_release>
 800d904:	4b04      	ldr	r3, [pc, #16]	@ (800d918 <__sinit+0x28>)
 800d906:	6223      	str	r3, [r4, #32]
 800d908:	4b04      	ldr	r3, [pc, #16]	@ (800d91c <__sinit+0x2c>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1f5      	bne.n	800d8fc <__sinit+0xc>
 800d910:	f7ff ffc4 	bl	800d89c <global_stdio_init.part.0>
 800d914:	e7f2      	b.n	800d8fc <__sinit+0xc>
 800d916:	bf00      	nop
 800d918:	0800d85d 	.word	0x0800d85d
 800d91c:	200081a8 	.word	0x200081a8

0800d920 <_fwalk_sglue>:
 800d920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d924:	4607      	mov	r7, r0
 800d926:	4688      	mov	r8, r1
 800d928:	4614      	mov	r4, r2
 800d92a:	2600      	movs	r6, #0
 800d92c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d930:	f1b9 0901 	subs.w	r9, r9, #1
 800d934:	d505      	bpl.n	800d942 <_fwalk_sglue+0x22>
 800d936:	6824      	ldr	r4, [r4, #0]
 800d938:	2c00      	cmp	r4, #0
 800d93a:	d1f7      	bne.n	800d92c <_fwalk_sglue+0xc>
 800d93c:	4630      	mov	r0, r6
 800d93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d942:	89ab      	ldrh	r3, [r5, #12]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d907      	bls.n	800d958 <_fwalk_sglue+0x38>
 800d948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d94c:	3301      	adds	r3, #1
 800d94e:	d003      	beq.n	800d958 <_fwalk_sglue+0x38>
 800d950:	4629      	mov	r1, r5
 800d952:	4638      	mov	r0, r7
 800d954:	47c0      	blx	r8
 800d956:	4306      	orrs	r6, r0
 800d958:	3568      	adds	r5, #104	@ 0x68
 800d95a:	e7e9      	b.n	800d930 <_fwalk_sglue+0x10>

0800d95c <iprintf>:
 800d95c:	b40f      	push	{r0, r1, r2, r3}
 800d95e:	b507      	push	{r0, r1, r2, lr}
 800d960:	4906      	ldr	r1, [pc, #24]	@ (800d97c <iprintf+0x20>)
 800d962:	ab04      	add	r3, sp, #16
 800d964:	6808      	ldr	r0, [r1, #0]
 800d966:	f853 2b04 	ldr.w	r2, [r3], #4
 800d96a:	6881      	ldr	r1, [r0, #8]
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	f000 fb75 	bl	800e05c <_vfiprintf_r>
 800d972:	b003      	add	sp, #12
 800d974:	f85d eb04 	ldr.w	lr, [sp], #4
 800d978:	b004      	add	sp, #16
 800d97a:	4770      	bx	lr
 800d97c:	2000001c 	.word	0x2000001c

0800d980 <siprintf>:
 800d980:	b40e      	push	{r1, r2, r3}
 800d982:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d986:	b500      	push	{lr}
 800d988:	b09c      	sub	sp, #112	@ 0x70
 800d98a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d98c:	9002      	str	r0, [sp, #8]
 800d98e:	9006      	str	r0, [sp, #24]
 800d990:	9107      	str	r1, [sp, #28]
 800d992:	9104      	str	r1, [sp, #16]
 800d994:	4808      	ldr	r0, [pc, #32]	@ (800d9b8 <siprintf+0x38>)
 800d996:	4909      	ldr	r1, [pc, #36]	@ (800d9bc <siprintf+0x3c>)
 800d998:	f853 2b04 	ldr.w	r2, [r3], #4
 800d99c:	9105      	str	r1, [sp, #20]
 800d99e:	6800      	ldr	r0, [r0, #0]
 800d9a0:	a902      	add	r1, sp, #8
 800d9a2:	9301      	str	r3, [sp, #4]
 800d9a4:	f000 fa36 	bl	800de14 <_svfiprintf_r>
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	9b02      	ldr	r3, [sp, #8]
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	b01c      	add	sp, #112	@ 0x70
 800d9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9b4:	b003      	add	sp, #12
 800d9b6:	4770      	bx	lr
 800d9b8:	2000001c 	.word	0x2000001c
 800d9bc:	ffff0208 	.word	0xffff0208

0800d9c0 <__sread>:
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	460c      	mov	r4, r1
 800d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c8:	f000 f878 	bl	800dabc <_read_r>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	bfab      	itete	ge
 800d9d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800d9d4:	181b      	addge	r3, r3, r0
 800d9d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d9da:	bfac      	ite	ge
 800d9dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d9de:	81a3      	strhlt	r3, [r4, #12]
 800d9e0:	bd10      	pop	{r4, pc}

0800d9e2 <__swrite>:
 800d9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e6:	461f      	mov	r7, r3
 800d9e8:	898b      	ldrh	r3, [r1, #12]
 800d9ea:	4605      	mov	r5, r0
 800d9ec:	05db      	lsls	r3, r3, #23
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	4616      	mov	r6, r2
 800d9f2:	d505      	bpl.n	800da00 <__swrite+0x1e>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fc:	f000 f84c 	bl	800da98 <_lseek_r>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	4632      	mov	r2, r6
 800da04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da08:	81a3      	strh	r3, [r4, #12]
 800da0a:	4628      	mov	r0, r5
 800da0c:	463b      	mov	r3, r7
 800da0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da16:	f000 b863 	b.w	800dae0 <_write_r>

0800da1a <__sseek>:
 800da1a:	b510      	push	{r4, lr}
 800da1c:	460c      	mov	r4, r1
 800da1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da22:	f000 f839 	bl	800da98 <_lseek_r>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	bf15      	itete	ne
 800da2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da36:	81a3      	strheq	r3, [r4, #12]
 800da38:	bf18      	it	ne
 800da3a:	81a3      	strhne	r3, [r4, #12]
 800da3c:	bd10      	pop	{r4, pc}

0800da3e <__sclose>:
 800da3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da42:	f000 b819 	b.w	800da78 <_close_r>

0800da46 <memcmp>:
 800da46:	b510      	push	{r4, lr}
 800da48:	3901      	subs	r1, #1
 800da4a:	4402      	add	r2, r0
 800da4c:	4290      	cmp	r0, r2
 800da4e:	d101      	bne.n	800da54 <memcmp+0xe>
 800da50:	2000      	movs	r0, #0
 800da52:	e005      	b.n	800da60 <memcmp+0x1a>
 800da54:	7803      	ldrb	r3, [r0, #0]
 800da56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800da5a:	42a3      	cmp	r3, r4
 800da5c:	d001      	beq.n	800da62 <memcmp+0x1c>
 800da5e:	1b18      	subs	r0, r3, r4
 800da60:	bd10      	pop	{r4, pc}
 800da62:	3001      	adds	r0, #1
 800da64:	e7f2      	b.n	800da4c <memcmp+0x6>

0800da66 <memset>:
 800da66:	4603      	mov	r3, r0
 800da68:	4402      	add	r2, r0
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d100      	bne.n	800da70 <memset+0xa>
 800da6e:	4770      	bx	lr
 800da70:	f803 1b01 	strb.w	r1, [r3], #1
 800da74:	e7f9      	b.n	800da6a <memset+0x4>
	...

0800da78 <_close_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	2300      	movs	r3, #0
 800da7c:	4d05      	ldr	r5, [pc, #20]	@ (800da94 <_close_r+0x1c>)
 800da7e:	4604      	mov	r4, r0
 800da80:	4608      	mov	r0, r1
 800da82:	602b      	str	r3, [r5, #0]
 800da84:	f7f2 ff41 	bl	800090a <_close>
 800da88:	1c43      	adds	r3, r0, #1
 800da8a:	d102      	bne.n	800da92 <_close_r+0x1a>
 800da8c:	682b      	ldr	r3, [r5, #0]
 800da8e:	b103      	cbz	r3, 800da92 <_close_r+0x1a>
 800da90:	6023      	str	r3, [r4, #0]
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	200081ac 	.word	0x200081ac

0800da98 <_lseek_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	4604      	mov	r4, r0
 800da9c:	4608      	mov	r0, r1
 800da9e:	4611      	mov	r1, r2
 800daa0:	2200      	movs	r2, #0
 800daa2:	4d05      	ldr	r5, [pc, #20]	@ (800dab8 <_lseek_r+0x20>)
 800daa4:	602a      	str	r2, [r5, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	f7f2 ff53 	bl	8000952 <_lseek>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_lseek_r+0x1e>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_lseek_r+0x1e>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	200081ac 	.word	0x200081ac

0800dabc <_read_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	4604      	mov	r4, r0
 800dac0:	4608      	mov	r0, r1
 800dac2:	4611      	mov	r1, r2
 800dac4:	2200      	movs	r2, #0
 800dac6:	4d05      	ldr	r5, [pc, #20]	@ (800dadc <_read_r+0x20>)
 800dac8:	602a      	str	r2, [r5, #0]
 800daca:	461a      	mov	r2, r3
 800dacc:	f7f2 fee4 	bl	8000898 <_read>
 800dad0:	1c43      	adds	r3, r0, #1
 800dad2:	d102      	bne.n	800dada <_read_r+0x1e>
 800dad4:	682b      	ldr	r3, [r5, #0]
 800dad6:	b103      	cbz	r3, 800dada <_read_r+0x1e>
 800dad8:	6023      	str	r3, [r4, #0]
 800dada:	bd38      	pop	{r3, r4, r5, pc}
 800dadc:	200081ac 	.word	0x200081ac

0800dae0 <_write_r>:
 800dae0:	b538      	push	{r3, r4, r5, lr}
 800dae2:	4604      	mov	r4, r0
 800dae4:	4608      	mov	r0, r1
 800dae6:	4611      	mov	r1, r2
 800dae8:	2200      	movs	r2, #0
 800daea:	4d05      	ldr	r5, [pc, #20]	@ (800db00 <_write_r+0x20>)
 800daec:	602a      	str	r2, [r5, #0]
 800daee:	461a      	mov	r2, r3
 800daf0:	f7f2 feef 	bl	80008d2 <_write>
 800daf4:	1c43      	adds	r3, r0, #1
 800daf6:	d102      	bne.n	800dafe <_write_r+0x1e>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	b103      	cbz	r3, 800dafe <_write_r+0x1e>
 800dafc:	6023      	str	r3, [r4, #0]
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	200081ac 	.word	0x200081ac

0800db04 <__libc_init_array>:
 800db04:	b570      	push	{r4, r5, r6, lr}
 800db06:	2600      	movs	r6, #0
 800db08:	4d0c      	ldr	r5, [pc, #48]	@ (800db3c <__libc_init_array+0x38>)
 800db0a:	4c0d      	ldr	r4, [pc, #52]	@ (800db40 <__libc_init_array+0x3c>)
 800db0c:	1b64      	subs	r4, r4, r5
 800db0e:	10a4      	asrs	r4, r4, #2
 800db10:	42a6      	cmp	r6, r4
 800db12:	d109      	bne.n	800db28 <__libc_init_array+0x24>
 800db14:	f000 ff7a 	bl	800ea0c <_init>
 800db18:	2600      	movs	r6, #0
 800db1a:	4d0a      	ldr	r5, [pc, #40]	@ (800db44 <__libc_init_array+0x40>)
 800db1c:	4c0a      	ldr	r4, [pc, #40]	@ (800db48 <__libc_init_array+0x44>)
 800db1e:	1b64      	subs	r4, r4, r5
 800db20:	10a4      	asrs	r4, r4, #2
 800db22:	42a6      	cmp	r6, r4
 800db24:	d105      	bne.n	800db32 <__libc_init_array+0x2e>
 800db26:	bd70      	pop	{r4, r5, r6, pc}
 800db28:	f855 3b04 	ldr.w	r3, [r5], #4
 800db2c:	4798      	blx	r3
 800db2e:	3601      	adds	r6, #1
 800db30:	e7ee      	b.n	800db10 <__libc_init_array+0xc>
 800db32:	f855 3b04 	ldr.w	r3, [r5], #4
 800db36:	4798      	blx	r3
 800db38:	3601      	adds	r6, #1
 800db3a:	e7f2      	b.n	800db22 <__libc_init_array+0x1e>
 800db3c:	0801089c 	.word	0x0801089c
 800db40:	0801089c 	.word	0x0801089c
 800db44:	0801089c 	.word	0x0801089c
 800db48:	080108a0 	.word	0x080108a0

0800db4c <__retarget_lock_init_recursive>:
 800db4c:	4770      	bx	lr

0800db4e <__retarget_lock_acquire_recursive>:
 800db4e:	4770      	bx	lr

0800db50 <__retarget_lock_release_recursive>:
 800db50:	4770      	bx	lr

0800db52 <memcpy>:
 800db52:	440a      	add	r2, r1
 800db54:	4291      	cmp	r1, r2
 800db56:	f100 33ff 	add.w	r3, r0, #4294967295
 800db5a:	d100      	bne.n	800db5e <memcpy+0xc>
 800db5c:	4770      	bx	lr
 800db5e:	b510      	push	{r4, lr}
 800db60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db64:	4291      	cmp	r1, r2
 800db66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db6a:	d1f9      	bne.n	800db60 <memcpy+0xe>
 800db6c:	bd10      	pop	{r4, pc}
	...

0800db70 <_free_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4605      	mov	r5, r0
 800db74:	2900      	cmp	r1, #0
 800db76:	d040      	beq.n	800dbfa <_free_r+0x8a>
 800db78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db7c:	1f0c      	subs	r4, r1, #4
 800db7e:	2b00      	cmp	r3, #0
 800db80:	bfb8      	it	lt
 800db82:	18e4      	addlt	r4, r4, r3
 800db84:	f000 f8de 	bl	800dd44 <__malloc_lock>
 800db88:	4a1c      	ldr	r2, [pc, #112]	@ (800dbfc <_free_r+0x8c>)
 800db8a:	6813      	ldr	r3, [r2, #0]
 800db8c:	b933      	cbnz	r3, 800db9c <_free_r+0x2c>
 800db8e:	6063      	str	r3, [r4, #4]
 800db90:	6014      	str	r4, [r2, #0]
 800db92:	4628      	mov	r0, r5
 800db94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db98:	f000 b8da 	b.w	800dd50 <__malloc_unlock>
 800db9c:	42a3      	cmp	r3, r4
 800db9e:	d908      	bls.n	800dbb2 <_free_r+0x42>
 800dba0:	6820      	ldr	r0, [r4, #0]
 800dba2:	1821      	adds	r1, r4, r0
 800dba4:	428b      	cmp	r3, r1
 800dba6:	bf01      	itttt	eq
 800dba8:	6819      	ldreq	r1, [r3, #0]
 800dbaa:	685b      	ldreq	r3, [r3, #4]
 800dbac:	1809      	addeq	r1, r1, r0
 800dbae:	6021      	streq	r1, [r4, #0]
 800dbb0:	e7ed      	b.n	800db8e <_free_r+0x1e>
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	b10b      	cbz	r3, 800dbbc <_free_r+0x4c>
 800dbb8:	42a3      	cmp	r3, r4
 800dbba:	d9fa      	bls.n	800dbb2 <_free_r+0x42>
 800dbbc:	6811      	ldr	r1, [r2, #0]
 800dbbe:	1850      	adds	r0, r2, r1
 800dbc0:	42a0      	cmp	r0, r4
 800dbc2:	d10b      	bne.n	800dbdc <_free_r+0x6c>
 800dbc4:	6820      	ldr	r0, [r4, #0]
 800dbc6:	4401      	add	r1, r0
 800dbc8:	1850      	adds	r0, r2, r1
 800dbca:	4283      	cmp	r3, r0
 800dbcc:	6011      	str	r1, [r2, #0]
 800dbce:	d1e0      	bne.n	800db92 <_free_r+0x22>
 800dbd0:	6818      	ldr	r0, [r3, #0]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	4408      	add	r0, r1
 800dbd6:	6010      	str	r0, [r2, #0]
 800dbd8:	6053      	str	r3, [r2, #4]
 800dbda:	e7da      	b.n	800db92 <_free_r+0x22>
 800dbdc:	d902      	bls.n	800dbe4 <_free_r+0x74>
 800dbde:	230c      	movs	r3, #12
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	e7d6      	b.n	800db92 <_free_r+0x22>
 800dbe4:	6820      	ldr	r0, [r4, #0]
 800dbe6:	1821      	adds	r1, r4, r0
 800dbe8:	428b      	cmp	r3, r1
 800dbea:	bf01      	itttt	eq
 800dbec:	6819      	ldreq	r1, [r3, #0]
 800dbee:	685b      	ldreq	r3, [r3, #4]
 800dbf0:	1809      	addeq	r1, r1, r0
 800dbf2:	6021      	streq	r1, [r4, #0]
 800dbf4:	6063      	str	r3, [r4, #4]
 800dbf6:	6054      	str	r4, [r2, #4]
 800dbf8:	e7cb      	b.n	800db92 <_free_r+0x22>
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	200081b8 	.word	0x200081b8

0800dc00 <sbrk_aligned>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	4e0f      	ldr	r6, [pc, #60]	@ (800dc40 <sbrk_aligned+0x40>)
 800dc04:	460c      	mov	r4, r1
 800dc06:	6831      	ldr	r1, [r6, #0]
 800dc08:	4605      	mov	r5, r0
 800dc0a:	b911      	cbnz	r1, 800dc12 <sbrk_aligned+0x12>
 800dc0c:	f000 fe26 	bl	800e85c <_sbrk_r>
 800dc10:	6030      	str	r0, [r6, #0]
 800dc12:	4621      	mov	r1, r4
 800dc14:	4628      	mov	r0, r5
 800dc16:	f000 fe21 	bl	800e85c <_sbrk_r>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	d103      	bne.n	800dc26 <sbrk_aligned+0x26>
 800dc1e:	f04f 34ff 	mov.w	r4, #4294967295
 800dc22:	4620      	mov	r0, r4
 800dc24:	bd70      	pop	{r4, r5, r6, pc}
 800dc26:	1cc4      	adds	r4, r0, #3
 800dc28:	f024 0403 	bic.w	r4, r4, #3
 800dc2c:	42a0      	cmp	r0, r4
 800dc2e:	d0f8      	beq.n	800dc22 <sbrk_aligned+0x22>
 800dc30:	1a21      	subs	r1, r4, r0
 800dc32:	4628      	mov	r0, r5
 800dc34:	f000 fe12 	bl	800e85c <_sbrk_r>
 800dc38:	3001      	adds	r0, #1
 800dc3a:	d1f2      	bne.n	800dc22 <sbrk_aligned+0x22>
 800dc3c:	e7ef      	b.n	800dc1e <sbrk_aligned+0x1e>
 800dc3e:	bf00      	nop
 800dc40:	200081b4 	.word	0x200081b4

0800dc44 <_malloc_r>:
 800dc44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc48:	1ccd      	adds	r5, r1, #3
 800dc4a:	f025 0503 	bic.w	r5, r5, #3
 800dc4e:	3508      	adds	r5, #8
 800dc50:	2d0c      	cmp	r5, #12
 800dc52:	bf38      	it	cc
 800dc54:	250c      	movcc	r5, #12
 800dc56:	2d00      	cmp	r5, #0
 800dc58:	4606      	mov	r6, r0
 800dc5a:	db01      	blt.n	800dc60 <_malloc_r+0x1c>
 800dc5c:	42a9      	cmp	r1, r5
 800dc5e:	d904      	bls.n	800dc6a <_malloc_r+0x26>
 800dc60:	230c      	movs	r3, #12
 800dc62:	6033      	str	r3, [r6, #0]
 800dc64:	2000      	movs	r0, #0
 800dc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd40 <_malloc_r+0xfc>
 800dc6e:	f000 f869 	bl	800dd44 <__malloc_lock>
 800dc72:	f8d8 3000 	ldr.w	r3, [r8]
 800dc76:	461c      	mov	r4, r3
 800dc78:	bb44      	cbnz	r4, 800dccc <_malloc_r+0x88>
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f7ff ffbf 	bl	800dc00 <sbrk_aligned>
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	4604      	mov	r4, r0
 800dc86:	d158      	bne.n	800dd3a <_malloc_r+0xf6>
 800dc88:	f8d8 4000 	ldr.w	r4, [r8]
 800dc8c:	4627      	mov	r7, r4
 800dc8e:	2f00      	cmp	r7, #0
 800dc90:	d143      	bne.n	800dd1a <_malloc_r+0xd6>
 800dc92:	2c00      	cmp	r4, #0
 800dc94:	d04b      	beq.n	800dd2e <_malloc_r+0xea>
 800dc96:	6823      	ldr	r3, [r4, #0]
 800dc98:	4639      	mov	r1, r7
 800dc9a:	4630      	mov	r0, r6
 800dc9c:	eb04 0903 	add.w	r9, r4, r3
 800dca0:	f000 fddc 	bl	800e85c <_sbrk_r>
 800dca4:	4581      	cmp	r9, r0
 800dca6:	d142      	bne.n	800dd2e <_malloc_r+0xea>
 800dca8:	6821      	ldr	r1, [r4, #0]
 800dcaa:	4630      	mov	r0, r6
 800dcac:	1a6d      	subs	r5, r5, r1
 800dcae:	4629      	mov	r1, r5
 800dcb0:	f7ff ffa6 	bl	800dc00 <sbrk_aligned>
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	d03a      	beq.n	800dd2e <_malloc_r+0xea>
 800dcb8:	6823      	ldr	r3, [r4, #0]
 800dcba:	442b      	add	r3, r5
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dcc2:	685a      	ldr	r2, [r3, #4]
 800dcc4:	bb62      	cbnz	r2, 800dd20 <_malloc_r+0xdc>
 800dcc6:	f8c8 7000 	str.w	r7, [r8]
 800dcca:	e00f      	b.n	800dcec <_malloc_r+0xa8>
 800dccc:	6822      	ldr	r2, [r4, #0]
 800dcce:	1b52      	subs	r2, r2, r5
 800dcd0:	d420      	bmi.n	800dd14 <_malloc_r+0xd0>
 800dcd2:	2a0b      	cmp	r2, #11
 800dcd4:	d917      	bls.n	800dd06 <_malloc_r+0xc2>
 800dcd6:	1961      	adds	r1, r4, r5
 800dcd8:	42a3      	cmp	r3, r4
 800dcda:	6025      	str	r5, [r4, #0]
 800dcdc:	bf18      	it	ne
 800dcde:	6059      	strne	r1, [r3, #4]
 800dce0:	6863      	ldr	r3, [r4, #4]
 800dce2:	bf08      	it	eq
 800dce4:	f8c8 1000 	streq.w	r1, [r8]
 800dce8:	5162      	str	r2, [r4, r5]
 800dcea:	604b      	str	r3, [r1, #4]
 800dcec:	4630      	mov	r0, r6
 800dcee:	f000 f82f 	bl	800dd50 <__malloc_unlock>
 800dcf2:	f104 000b 	add.w	r0, r4, #11
 800dcf6:	1d23      	adds	r3, r4, #4
 800dcf8:	f020 0007 	bic.w	r0, r0, #7
 800dcfc:	1ac2      	subs	r2, r0, r3
 800dcfe:	bf1c      	itt	ne
 800dd00:	1a1b      	subne	r3, r3, r0
 800dd02:	50a3      	strne	r3, [r4, r2]
 800dd04:	e7af      	b.n	800dc66 <_malloc_r+0x22>
 800dd06:	6862      	ldr	r2, [r4, #4]
 800dd08:	42a3      	cmp	r3, r4
 800dd0a:	bf0c      	ite	eq
 800dd0c:	f8c8 2000 	streq.w	r2, [r8]
 800dd10:	605a      	strne	r2, [r3, #4]
 800dd12:	e7eb      	b.n	800dcec <_malloc_r+0xa8>
 800dd14:	4623      	mov	r3, r4
 800dd16:	6864      	ldr	r4, [r4, #4]
 800dd18:	e7ae      	b.n	800dc78 <_malloc_r+0x34>
 800dd1a:	463c      	mov	r4, r7
 800dd1c:	687f      	ldr	r7, [r7, #4]
 800dd1e:	e7b6      	b.n	800dc8e <_malloc_r+0x4a>
 800dd20:	461a      	mov	r2, r3
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d1fb      	bne.n	800dd20 <_malloc_r+0xdc>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	6053      	str	r3, [r2, #4]
 800dd2c:	e7de      	b.n	800dcec <_malloc_r+0xa8>
 800dd2e:	230c      	movs	r3, #12
 800dd30:	4630      	mov	r0, r6
 800dd32:	6033      	str	r3, [r6, #0]
 800dd34:	f000 f80c 	bl	800dd50 <__malloc_unlock>
 800dd38:	e794      	b.n	800dc64 <_malloc_r+0x20>
 800dd3a:	6005      	str	r5, [r0, #0]
 800dd3c:	e7d6      	b.n	800dcec <_malloc_r+0xa8>
 800dd3e:	bf00      	nop
 800dd40:	200081b8 	.word	0x200081b8

0800dd44 <__malloc_lock>:
 800dd44:	4801      	ldr	r0, [pc, #4]	@ (800dd4c <__malloc_lock+0x8>)
 800dd46:	f7ff bf02 	b.w	800db4e <__retarget_lock_acquire_recursive>
 800dd4a:	bf00      	nop
 800dd4c:	200081b0 	.word	0x200081b0

0800dd50 <__malloc_unlock>:
 800dd50:	4801      	ldr	r0, [pc, #4]	@ (800dd58 <__malloc_unlock+0x8>)
 800dd52:	f7ff befd 	b.w	800db50 <__retarget_lock_release_recursive>
 800dd56:	bf00      	nop
 800dd58:	200081b0 	.word	0x200081b0

0800dd5c <__ssputs_r>:
 800dd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd60:	461f      	mov	r7, r3
 800dd62:	688e      	ldr	r6, [r1, #8]
 800dd64:	4682      	mov	sl, r0
 800dd66:	42be      	cmp	r6, r7
 800dd68:	460c      	mov	r4, r1
 800dd6a:	4690      	mov	r8, r2
 800dd6c:	680b      	ldr	r3, [r1, #0]
 800dd6e:	d82d      	bhi.n	800ddcc <__ssputs_r+0x70>
 800dd70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dd78:	d026      	beq.n	800ddc8 <__ssputs_r+0x6c>
 800dd7a:	6965      	ldr	r5, [r4, #20]
 800dd7c:	6909      	ldr	r1, [r1, #16]
 800dd7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd82:	eba3 0901 	sub.w	r9, r3, r1
 800dd86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd8a:	1c7b      	adds	r3, r7, #1
 800dd8c:	444b      	add	r3, r9
 800dd8e:	106d      	asrs	r5, r5, #1
 800dd90:	429d      	cmp	r5, r3
 800dd92:	bf38      	it	cc
 800dd94:	461d      	movcc	r5, r3
 800dd96:	0553      	lsls	r3, r2, #21
 800dd98:	d527      	bpl.n	800ddea <__ssputs_r+0x8e>
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	f7ff ff52 	bl	800dc44 <_malloc_r>
 800dda0:	4606      	mov	r6, r0
 800dda2:	b360      	cbz	r0, 800ddfe <__ssputs_r+0xa2>
 800dda4:	464a      	mov	r2, r9
 800dda6:	6921      	ldr	r1, [r4, #16]
 800dda8:	f7ff fed3 	bl	800db52 <memcpy>
 800ddac:	89a3      	ldrh	r3, [r4, #12]
 800ddae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ddb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddb6:	81a3      	strh	r3, [r4, #12]
 800ddb8:	6126      	str	r6, [r4, #16]
 800ddba:	444e      	add	r6, r9
 800ddbc:	6026      	str	r6, [r4, #0]
 800ddbe:	463e      	mov	r6, r7
 800ddc0:	6165      	str	r5, [r4, #20]
 800ddc2:	eba5 0509 	sub.w	r5, r5, r9
 800ddc6:	60a5      	str	r5, [r4, #8]
 800ddc8:	42be      	cmp	r6, r7
 800ddca:	d900      	bls.n	800ddce <__ssputs_r+0x72>
 800ddcc:	463e      	mov	r6, r7
 800ddce:	4632      	mov	r2, r6
 800ddd0:	4641      	mov	r1, r8
 800ddd2:	6820      	ldr	r0, [r4, #0]
 800ddd4:	f000 fd28 	bl	800e828 <memmove>
 800ddd8:	2000      	movs	r0, #0
 800ddda:	68a3      	ldr	r3, [r4, #8]
 800dddc:	1b9b      	subs	r3, r3, r6
 800ddde:	60a3      	str	r3, [r4, #8]
 800dde0:	6823      	ldr	r3, [r4, #0]
 800dde2:	4433      	add	r3, r6
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	462a      	mov	r2, r5
 800ddec:	f000 fd54 	bl	800e898 <_realloc_r>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d1e0      	bne.n	800ddb8 <__ssputs_r+0x5c>
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	6921      	ldr	r1, [r4, #16]
 800ddfa:	f7ff feb9 	bl	800db70 <_free_r>
 800ddfe:	230c      	movs	r3, #12
 800de00:	f8ca 3000 	str.w	r3, [sl]
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	f04f 30ff 	mov.w	r0, #4294967295
 800de0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de0e:	81a3      	strh	r3, [r4, #12]
 800de10:	e7e9      	b.n	800dde6 <__ssputs_r+0x8a>
	...

0800de14 <_svfiprintf_r>:
 800de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de18:	4698      	mov	r8, r3
 800de1a:	898b      	ldrh	r3, [r1, #12]
 800de1c:	4607      	mov	r7, r0
 800de1e:	061b      	lsls	r3, r3, #24
 800de20:	460d      	mov	r5, r1
 800de22:	4614      	mov	r4, r2
 800de24:	b09d      	sub	sp, #116	@ 0x74
 800de26:	d510      	bpl.n	800de4a <_svfiprintf_r+0x36>
 800de28:	690b      	ldr	r3, [r1, #16]
 800de2a:	b973      	cbnz	r3, 800de4a <_svfiprintf_r+0x36>
 800de2c:	2140      	movs	r1, #64	@ 0x40
 800de2e:	f7ff ff09 	bl	800dc44 <_malloc_r>
 800de32:	6028      	str	r0, [r5, #0]
 800de34:	6128      	str	r0, [r5, #16]
 800de36:	b930      	cbnz	r0, 800de46 <_svfiprintf_r+0x32>
 800de38:	230c      	movs	r3, #12
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	f04f 30ff 	mov.w	r0, #4294967295
 800de40:	b01d      	add	sp, #116	@ 0x74
 800de42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de46:	2340      	movs	r3, #64	@ 0x40
 800de48:	616b      	str	r3, [r5, #20]
 800de4a:	2300      	movs	r3, #0
 800de4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de4e:	2320      	movs	r3, #32
 800de50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800de54:	2330      	movs	r3, #48	@ 0x30
 800de56:	f04f 0901 	mov.w	r9, #1
 800de5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de5e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dff8 <_svfiprintf_r+0x1e4>
 800de62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de66:	4623      	mov	r3, r4
 800de68:	469a      	mov	sl, r3
 800de6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6e:	b10a      	cbz	r2, 800de74 <_svfiprintf_r+0x60>
 800de70:	2a25      	cmp	r2, #37	@ 0x25
 800de72:	d1f9      	bne.n	800de68 <_svfiprintf_r+0x54>
 800de74:	ebba 0b04 	subs.w	fp, sl, r4
 800de78:	d00b      	beq.n	800de92 <_svfiprintf_r+0x7e>
 800de7a:	465b      	mov	r3, fp
 800de7c:	4622      	mov	r2, r4
 800de7e:	4629      	mov	r1, r5
 800de80:	4638      	mov	r0, r7
 800de82:	f7ff ff6b 	bl	800dd5c <__ssputs_r>
 800de86:	3001      	adds	r0, #1
 800de88:	f000 80a7 	beq.w	800dfda <_svfiprintf_r+0x1c6>
 800de8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de8e:	445a      	add	r2, fp
 800de90:	9209      	str	r2, [sp, #36]	@ 0x24
 800de92:	f89a 3000 	ldrb.w	r3, [sl]
 800de96:	2b00      	cmp	r3, #0
 800de98:	f000 809f 	beq.w	800dfda <_svfiprintf_r+0x1c6>
 800de9c:	2300      	movs	r3, #0
 800de9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea6:	f10a 0a01 	add.w	sl, sl, #1
 800deaa:	9304      	str	r3, [sp, #16]
 800deac:	9307      	str	r3, [sp, #28]
 800deae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800deb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800deb4:	4654      	mov	r4, sl
 800deb6:	2205      	movs	r2, #5
 800deb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800debc:	484e      	ldr	r0, [pc, #312]	@ (800dff8 <_svfiprintf_r+0x1e4>)
 800debe:	f000 fcdd 	bl	800e87c <memchr>
 800dec2:	9a04      	ldr	r2, [sp, #16]
 800dec4:	b9d8      	cbnz	r0, 800defe <_svfiprintf_r+0xea>
 800dec6:	06d0      	lsls	r0, r2, #27
 800dec8:	bf44      	itt	mi
 800deca:	2320      	movmi	r3, #32
 800decc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ded0:	0711      	lsls	r1, r2, #28
 800ded2:	bf44      	itt	mi
 800ded4:	232b      	movmi	r3, #43	@ 0x2b
 800ded6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800deda:	f89a 3000 	ldrb.w	r3, [sl]
 800dede:	2b2a      	cmp	r3, #42	@ 0x2a
 800dee0:	d015      	beq.n	800df0e <_svfiprintf_r+0xfa>
 800dee2:	4654      	mov	r4, sl
 800dee4:	2000      	movs	r0, #0
 800dee6:	f04f 0c0a 	mov.w	ip, #10
 800deea:	9a07      	ldr	r2, [sp, #28]
 800deec:	4621      	mov	r1, r4
 800deee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def2:	3b30      	subs	r3, #48	@ 0x30
 800def4:	2b09      	cmp	r3, #9
 800def6:	d94b      	bls.n	800df90 <_svfiprintf_r+0x17c>
 800def8:	b1b0      	cbz	r0, 800df28 <_svfiprintf_r+0x114>
 800defa:	9207      	str	r2, [sp, #28]
 800defc:	e014      	b.n	800df28 <_svfiprintf_r+0x114>
 800defe:	eba0 0308 	sub.w	r3, r0, r8
 800df02:	fa09 f303 	lsl.w	r3, r9, r3
 800df06:	4313      	orrs	r3, r2
 800df08:	46a2      	mov	sl, r4
 800df0a:	9304      	str	r3, [sp, #16]
 800df0c:	e7d2      	b.n	800deb4 <_svfiprintf_r+0xa0>
 800df0e:	9b03      	ldr	r3, [sp, #12]
 800df10:	1d19      	adds	r1, r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	9103      	str	r1, [sp, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	bfbb      	ittet	lt
 800df1a:	425b      	neglt	r3, r3
 800df1c:	f042 0202 	orrlt.w	r2, r2, #2
 800df20:	9307      	strge	r3, [sp, #28]
 800df22:	9307      	strlt	r3, [sp, #28]
 800df24:	bfb8      	it	lt
 800df26:	9204      	strlt	r2, [sp, #16]
 800df28:	7823      	ldrb	r3, [r4, #0]
 800df2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800df2c:	d10a      	bne.n	800df44 <_svfiprintf_r+0x130>
 800df2e:	7863      	ldrb	r3, [r4, #1]
 800df30:	2b2a      	cmp	r3, #42	@ 0x2a
 800df32:	d132      	bne.n	800df9a <_svfiprintf_r+0x186>
 800df34:	9b03      	ldr	r3, [sp, #12]
 800df36:	3402      	adds	r4, #2
 800df38:	1d1a      	adds	r2, r3, #4
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	9203      	str	r2, [sp, #12]
 800df3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dffc <_svfiprintf_r+0x1e8>
 800df48:	2203      	movs	r2, #3
 800df4a:	4650      	mov	r0, sl
 800df4c:	7821      	ldrb	r1, [r4, #0]
 800df4e:	f000 fc95 	bl	800e87c <memchr>
 800df52:	b138      	cbz	r0, 800df64 <_svfiprintf_r+0x150>
 800df54:	2240      	movs	r2, #64	@ 0x40
 800df56:	9b04      	ldr	r3, [sp, #16]
 800df58:	eba0 000a 	sub.w	r0, r0, sl
 800df5c:	4082      	lsls	r2, r0
 800df5e:	4313      	orrs	r3, r2
 800df60:	3401      	adds	r4, #1
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df68:	2206      	movs	r2, #6
 800df6a:	4825      	ldr	r0, [pc, #148]	@ (800e000 <_svfiprintf_r+0x1ec>)
 800df6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df70:	f000 fc84 	bl	800e87c <memchr>
 800df74:	2800      	cmp	r0, #0
 800df76:	d036      	beq.n	800dfe6 <_svfiprintf_r+0x1d2>
 800df78:	4b22      	ldr	r3, [pc, #136]	@ (800e004 <_svfiprintf_r+0x1f0>)
 800df7a:	bb1b      	cbnz	r3, 800dfc4 <_svfiprintf_r+0x1b0>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	3307      	adds	r3, #7
 800df80:	f023 0307 	bic.w	r3, r3, #7
 800df84:	3308      	adds	r3, #8
 800df86:	9303      	str	r3, [sp, #12]
 800df88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df8a:	4433      	add	r3, r6
 800df8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800df8e:	e76a      	b.n	800de66 <_svfiprintf_r+0x52>
 800df90:	460c      	mov	r4, r1
 800df92:	2001      	movs	r0, #1
 800df94:	fb0c 3202 	mla	r2, ip, r2, r3
 800df98:	e7a8      	b.n	800deec <_svfiprintf_r+0xd8>
 800df9a:	2300      	movs	r3, #0
 800df9c:	f04f 0c0a 	mov.w	ip, #10
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	3401      	adds	r4, #1
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfac:	3a30      	subs	r2, #48	@ 0x30
 800dfae:	2a09      	cmp	r2, #9
 800dfb0:	d903      	bls.n	800dfba <_svfiprintf_r+0x1a6>
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d0c6      	beq.n	800df44 <_svfiprintf_r+0x130>
 800dfb6:	9105      	str	r1, [sp, #20]
 800dfb8:	e7c4      	b.n	800df44 <_svfiprintf_r+0x130>
 800dfba:	4604      	mov	r4, r0
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc2:	e7f0      	b.n	800dfa6 <_svfiprintf_r+0x192>
 800dfc4:	ab03      	add	r3, sp, #12
 800dfc6:	9300      	str	r3, [sp, #0]
 800dfc8:	462a      	mov	r2, r5
 800dfca:	4638      	mov	r0, r7
 800dfcc:	4b0e      	ldr	r3, [pc, #56]	@ (800e008 <_svfiprintf_r+0x1f4>)
 800dfce:	a904      	add	r1, sp, #16
 800dfd0:	f3af 8000 	nop.w
 800dfd4:	1c42      	adds	r2, r0, #1
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	d1d6      	bne.n	800df88 <_svfiprintf_r+0x174>
 800dfda:	89ab      	ldrh	r3, [r5, #12]
 800dfdc:	065b      	lsls	r3, r3, #25
 800dfde:	f53f af2d 	bmi.w	800de3c <_svfiprintf_r+0x28>
 800dfe2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dfe4:	e72c      	b.n	800de40 <_svfiprintf_r+0x2c>
 800dfe6:	ab03      	add	r3, sp, #12
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	462a      	mov	r2, r5
 800dfec:	4638      	mov	r0, r7
 800dfee:	4b06      	ldr	r3, [pc, #24]	@ (800e008 <_svfiprintf_r+0x1f4>)
 800dff0:	a904      	add	r1, sp, #16
 800dff2:	f000 f9bd 	bl	800e370 <_printf_i>
 800dff6:	e7ed      	b.n	800dfd4 <_svfiprintf_r+0x1c0>
 800dff8:	0801085e 	.word	0x0801085e
 800dffc:	08010864 	.word	0x08010864
 800e000:	08010868 	.word	0x08010868
 800e004:	00000000 	.word	0x00000000
 800e008:	0800dd5d 	.word	0x0800dd5d

0800e00c <__sfputc_r>:
 800e00c:	6893      	ldr	r3, [r2, #8]
 800e00e:	b410      	push	{r4}
 800e010:	3b01      	subs	r3, #1
 800e012:	2b00      	cmp	r3, #0
 800e014:	6093      	str	r3, [r2, #8]
 800e016:	da07      	bge.n	800e028 <__sfputc_r+0x1c>
 800e018:	6994      	ldr	r4, [r2, #24]
 800e01a:	42a3      	cmp	r3, r4
 800e01c:	db01      	blt.n	800e022 <__sfputc_r+0x16>
 800e01e:	290a      	cmp	r1, #10
 800e020:	d102      	bne.n	800e028 <__sfputc_r+0x1c>
 800e022:	bc10      	pop	{r4}
 800e024:	f000 bb6c 	b.w	800e700 <__swbuf_r>
 800e028:	6813      	ldr	r3, [r2, #0]
 800e02a:	1c58      	adds	r0, r3, #1
 800e02c:	6010      	str	r0, [r2, #0]
 800e02e:	7019      	strb	r1, [r3, #0]
 800e030:	4608      	mov	r0, r1
 800e032:	bc10      	pop	{r4}
 800e034:	4770      	bx	lr

0800e036 <__sfputs_r>:
 800e036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e038:	4606      	mov	r6, r0
 800e03a:	460f      	mov	r7, r1
 800e03c:	4614      	mov	r4, r2
 800e03e:	18d5      	adds	r5, r2, r3
 800e040:	42ac      	cmp	r4, r5
 800e042:	d101      	bne.n	800e048 <__sfputs_r+0x12>
 800e044:	2000      	movs	r0, #0
 800e046:	e007      	b.n	800e058 <__sfputs_r+0x22>
 800e048:	463a      	mov	r2, r7
 800e04a:	4630      	mov	r0, r6
 800e04c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e050:	f7ff ffdc 	bl	800e00c <__sfputc_r>
 800e054:	1c43      	adds	r3, r0, #1
 800e056:	d1f3      	bne.n	800e040 <__sfputs_r+0xa>
 800e058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e05c <_vfiprintf_r>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	460d      	mov	r5, r1
 800e062:	4614      	mov	r4, r2
 800e064:	4698      	mov	r8, r3
 800e066:	4606      	mov	r6, r0
 800e068:	b09d      	sub	sp, #116	@ 0x74
 800e06a:	b118      	cbz	r0, 800e074 <_vfiprintf_r+0x18>
 800e06c:	6a03      	ldr	r3, [r0, #32]
 800e06e:	b90b      	cbnz	r3, 800e074 <_vfiprintf_r+0x18>
 800e070:	f7ff fc3e 	bl	800d8f0 <__sinit>
 800e074:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e076:	07d9      	lsls	r1, r3, #31
 800e078:	d405      	bmi.n	800e086 <_vfiprintf_r+0x2a>
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	059a      	lsls	r2, r3, #22
 800e07e:	d402      	bmi.n	800e086 <_vfiprintf_r+0x2a>
 800e080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e082:	f7ff fd64 	bl	800db4e <__retarget_lock_acquire_recursive>
 800e086:	89ab      	ldrh	r3, [r5, #12]
 800e088:	071b      	lsls	r3, r3, #28
 800e08a:	d501      	bpl.n	800e090 <_vfiprintf_r+0x34>
 800e08c:	692b      	ldr	r3, [r5, #16]
 800e08e:	b99b      	cbnz	r3, 800e0b8 <_vfiprintf_r+0x5c>
 800e090:	4629      	mov	r1, r5
 800e092:	4630      	mov	r0, r6
 800e094:	f000 fb72 	bl	800e77c <__swsetup_r>
 800e098:	b170      	cbz	r0, 800e0b8 <_vfiprintf_r+0x5c>
 800e09a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e09c:	07dc      	lsls	r4, r3, #31
 800e09e:	d504      	bpl.n	800e0aa <_vfiprintf_r+0x4e>
 800e0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a4:	b01d      	add	sp, #116	@ 0x74
 800e0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0aa:	89ab      	ldrh	r3, [r5, #12]
 800e0ac:	0598      	lsls	r0, r3, #22
 800e0ae:	d4f7      	bmi.n	800e0a0 <_vfiprintf_r+0x44>
 800e0b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0b2:	f7ff fd4d 	bl	800db50 <__retarget_lock_release_recursive>
 800e0b6:	e7f3      	b.n	800e0a0 <_vfiprintf_r+0x44>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0bc:	2320      	movs	r3, #32
 800e0be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0c2:	2330      	movs	r3, #48	@ 0x30
 800e0c4:	f04f 0901 	mov.w	r9, #1
 800e0c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800e278 <_vfiprintf_r+0x21c>
 800e0d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0d4:	4623      	mov	r3, r4
 800e0d6:	469a      	mov	sl, r3
 800e0d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0dc:	b10a      	cbz	r2, 800e0e2 <_vfiprintf_r+0x86>
 800e0de:	2a25      	cmp	r2, #37	@ 0x25
 800e0e0:	d1f9      	bne.n	800e0d6 <_vfiprintf_r+0x7a>
 800e0e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e0e6:	d00b      	beq.n	800e100 <_vfiprintf_r+0xa4>
 800e0e8:	465b      	mov	r3, fp
 800e0ea:	4622      	mov	r2, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff ffa1 	bl	800e036 <__sfputs_r>
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	f000 80a7 	beq.w	800e248 <_vfiprintf_r+0x1ec>
 800e0fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0fc:	445a      	add	r2, fp
 800e0fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e100:	f89a 3000 	ldrb.w	r3, [sl]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 809f 	beq.w	800e248 <_vfiprintf_r+0x1ec>
 800e10a:	2300      	movs	r3, #0
 800e10c:	f04f 32ff 	mov.w	r2, #4294967295
 800e110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e114:	f10a 0a01 	add.w	sl, sl, #1
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	9307      	str	r3, [sp, #28]
 800e11c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e120:	931a      	str	r3, [sp, #104]	@ 0x68
 800e122:	4654      	mov	r4, sl
 800e124:	2205      	movs	r2, #5
 800e126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e12a:	4853      	ldr	r0, [pc, #332]	@ (800e278 <_vfiprintf_r+0x21c>)
 800e12c:	f000 fba6 	bl	800e87c <memchr>
 800e130:	9a04      	ldr	r2, [sp, #16]
 800e132:	b9d8      	cbnz	r0, 800e16c <_vfiprintf_r+0x110>
 800e134:	06d1      	lsls	r1, r2, #27
 800e136:	bf44      	itt	mi
 800e138:	2320      	movmi	r3, #32
 800e13a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e13e:	0713      	lsls	r3, r2, #28
 800e140:	bf44      	itt	mi
 800e142:	232b      	movmi	r3, #43	@ 0x2b
 800e144:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e148:	f89a 3000 	ldrb.w	r3, [sl]
 800e14c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e14e:	d015      	beq.n	800e17c <_vfiprintf_r+0x120>
 800e150:	4654      	mov	r4, sl
 800e152:	2000      	movs	r0, #0
 800e154:	f04f 0c0a 	mov.w	ip, #10
 800e158:	9a07      	ldr	r2, [sp, #28]
 800e15a:	4621      	mov	r1, r4
 800e15c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e160:	3b30      	subs	r3, #48	@ 0x30
 800e162:	2b09      	cmp	r3, #9
 800e164:	d94b      	bls.n	800e1fe <_vfiprintf_r+0x1a2>
 800e166:	b1b0      	cbz	r0, 800e196 <_vfiprintf_r+0x13a>
 800e168:	9207      	str	r2, [sp, #28]
 800e16a:	e014      	b.n	800e196 <_vfiprintf_r+0x13a>
 800e16c:	eba0 0308 	sub.w	r3, r0, r8
 800e170:	fa09 f303 	lsl.w	r3, r9, r3
 800e174:	4313      	orrs	r3, r2
 800e176:	46a2      	mov	sl, r4
 800e178:	9304      	str	r3, [sp, #16]
 800e17a:	e7d2      	b.n	800e122 <_vfiprintf_r+0xc6>
 800e17c:	9b03      	ldr	r3, [sp, #12]
 800e17e:	1d19      	adds	r1, r3, #4
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	9103      	str	r1, [sp, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	bfbb      	ittet	lt
 800e188:	425b      	neglt	r3, r3
 800e18a:	f042 0202 	orrlt.w	r2, r2, #2
 800e18e:	9307      	strge	r3, [sp, #28]
 800e190:	9307      	strlt	r3, [sp, #28]
 800e192:	bfb8      	it	lt
 800e194:	9204      	strlt	r2, [sp, #16]
 800e196:	7823      	ldrb	r3, [r4, #0]
 800e198:	2b2e      	cmp	r3, #46	@ 0x2e
 800e19a:	d10a      	bne.n	800e1b2 <_vfiprintf_r+0x156>
 800e19c:	7863      	ldrb	r3, [r4, #1]
 800e19e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a0:	d132      	bne.n	800e208 <_vfiprintf_r+0x1ac>
 800e1a2:	9b03      	ldr	r3, [sp, #12]
 800e1a4:	3402      	adds	r4, #2
 800e1a6:	1d1a      	adds	r2, r3, #4
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	9203      	str	r2, [sp, #12]
 800e1ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e27c <_vfiprintf_r+0x220>
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	7821      	ldrb	r1, [r4, #0]
 800e1bc:	f000 fb5e 	bl	800e87c <memchr>
 800e1c0:	b138      	cbz	r0, 800e1d2 <_vfiprintf_r+0x176>
 800e1c2:	2240      	movs	r2, #64	@ 0x40
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	eba0 000a 	sub.w	r0, r0, sl
 800e1ca:	4082      	lsls	r2, r0
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	3401      	adds	r4, #1
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	2206      	movs	r2, #6
 800e1d8:	4829      	ldr	r0, [pc, #164]	@ (800e280 <_vfiprintf_r+0x224>)
 800e1da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1de:	f000 fb4d 	bl	800e87c <memchr>
 800e1e2:	2800      	cmp	r0, #0
 800e1e4:	d03f      	beq.n	800e266 <_vfiprintf_r+0x20a>
 800e1e6:	4b27      	ldr	r3, [pc, #156]	@ (800e284 <_vfiprintf_r+0x228>)
 800e1e8:	bb1b      	cbnz	r3, 800e232 <_vfiprintf_r+0x1d6>
 800e1ea:	9b03      	ldr	r3, [sp, #12]
 800e1ec:	3307      	adds	r3, #7
 800e1ee:	f023 0307 	bic.w	r3, r3, #7
 800e1f2:	3308      	adds	r3, #8
 800e1f4:	9303      	str	r3, [sp, #12]
 800e1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1f8:	443b      	add	r3, r7
 800e1fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1fc:	e76a      	b.n	800e0d4 <_vfiprintf_r+0x78>
 800e1fe:	460c      	mov	r4, r1
 800e200:	2001      	movs	r0, #1
 800e202:	fb0c 3202 	mla	r2, ip, r2, r3
 800e206:	e7a8      	b.n	800e15a <_vfiprintf_r+0xfe>
 800e208:	2300      	movs	r3, #0
 800e20a:	f04f 0c0a 	mov.w	ip, #10
 800e20e:	4619      	mov	r1, r3
 800e210:	3401      	adds	r4, #1
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	4620      	mov	r0, r4
 800e216:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e21a:	3a30      	subs	r2, #48	@ 0x30
 800e21c:	2a09      	cmp	r2, #9
 800e21e:	d903      	bls.n	800e228 <_vfiprintf_r+0x1cc>
 800e220:	2b00      	cmp	r3, #0
 800e222:	d0c6      	beq.n	800e1b2 <_vfiprintf_r+0x156>
 800e224:	9105      	str	r1, [sp, #20]
 800e226:	e7c4      	b.n	800e1b2 <_vfiprintf_r+0x156>
 800e228:	4604      	mov	r4, r0
 800e22a:	2301      	movs	r3, #1
 800e22c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e230:	e7f0      	b.n	800e214 <_vfiprintf_r+0x1b8>
 800e232:	ab03      	add	r3, sp, #12
 800e234:	9300      	str	r3, [sp, #0]
 800e236:	462a      	mov	r2, r5
 800e238:	4630      	mov	r0, r6
 800e23a:	4b13      	ldr	r3, [pc, #76]	@ (800e288 <_vfiprintf_r+0x22c>)
 800e23c:	a904      	add	r1, sp, #16
 800e23e:	f3af 8000 	nop.w
 800e242:	4607      	mov	r7, r0
 800e244:	1c78      	adds	r0, r7, #1
 800e246:	d1d6      	bne.n	800e1f6 <_vfiprintf_r+0x19a>
 800e248:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e24a:	07d9      	lsls	r1, r3, #31
 800e24c:	d405      	bmi.n	800e25a <_vfiprintf_r+0x1fe>
 800e24e:	89ab      	ldrh	r3, [r5, #12]
 800e250:	059a      	lsls	r2, r3, #22
 800e252:	d402      	bmi.n	800e25a <_vfiprintf_r+0x1fe>
 800e254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e256:	f7ff fc7b 	bl	800db50 <__retarget_lock_release_recursive>
 800e25a:	89ab      	ldrh	r3, [r5, #12]
 800e25c:	065b      	lsls	r3, r3, #25
 800e25e:	f53f af1f 	bmi.w	800e0a0 <_vfiprintf_r+0x44>
 800e262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e264:	e71e      	b.n	800e0a4 <_vfiprintf_r+0x48>
 800e266:	ab03      	add	r3, sp, #12
 800e268:	9300      	str	r3, [sp, #0]
 800e26a:	462a      	mov	r2, r5
 800e26c:	4630      	mov	r0, r6
 800e26e:	4b06      	ldr	r3, [pc, #24]	@ (800e288 <_vfiprintf_r+0x22c>)
 800e270:	a904      	add	r1, sp, #16
 800e272:	f000 f87d 	bl	800e370 <_printf_i>
 800e276:	e7e4      	b.n	800e242 <_vfiprintf_r+0x1e6>
 800e278:	0801085e 	.word	0x0801085e
 800e27c:	08010864 	.word	0x08010864
 800e280:	08010868 	.word	0x08010868
 800e284:	00000000 	.word	0x00000000
 800e288:	0800e037 	.word	0x0800e037

0800e28c <_printf_common>:
 800e28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e290:	4616      	mov	r6, r2
 800e292:	4698      	mov	r8, r3
 800e294:	688a      	ldr	r2, [r1, #8]
 800e296:	690b      	ldr	r3, [r1, #16]
 800e298:	4607      	mov	r7, r0
 800e29a:	4293      	cmp	r3, r2
 800e29c:	bfb8      	it	lt
 800e29e:	4613      	movlt	r3, r2
 800e2a0:	6033      	str	r3, [r6, #0]
 800e2a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2ac:	b10a      	cbz	r2, 800e2b2 <_printf_common+0x26>
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	6033      	str	r3, [r6, #0]
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	0699      	lsls	r1, r3, #26
 800e2b6:	bf42      	ittt	mi
 800e2b8:	6833      	ldrmi	r3, [r6, #0]
 800e2ba:	3302      	addmi	r3, #2
 800e2bc:	6033      	strmi	r3, [r6, #0]
 800e2be:	6825      	ldr	r5, [r4, #0]
 800e2c0:	f015 0506 	ands.w	r5, r5, #6
 800e2c4:	d106      	bne.n	800e2d4 <_printf_common+0x48>
 800e2c6:	f104 0a19 	add.w	sl, r4, #25
 800e2ca:	68e3      	ldr	r3, [r4, #12]
 800e2cc:	6832      	ldr	r2, [r6, #0]
 800e2ce:	1a9b      	subs	r3, r3, r2
 800e2d0:	42ab      	cmp	r3, r5
 800e2d2:	dc2b      	bgt.n	800e32c <_printf_common+0xa0>
 800e2d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2d8:	6822      	ldr	r2, [r4, #0]
 800e2da:	3b00      	subs	r3, #0
 800e2dc:	bf18      	it	ne
 800e2de:	2301      	movne	r3, #1
 800e2e0:	0692      	lsls	r2, r2, #26
 800e2e2:	d430      	bmi.n	800e346 <_printf_common+0xba>
 800e2e4:	4641      	mov	r1, r8
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2ec:	47c8      	blx	r9
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	d023      	beq.n	800e33a <_printf_common+0xae>
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	6922      	ldr	r2, [r4, #16]
 800e2f6:	f003 0306 	and.w	r3, r3, #6
 800e2fa:	2b04      	cmp	r3, #4
 800e2fc:	bf14      	ite	ne
 800e2fe:	2500      	movne	r5, #0
 800e300:	6833      	ldreq	r3, [r6, #0]
 800e302:	f04f 0600 	mov.w	r6, #0
 800e306:	bf08      	it	eq
 800e308:	68e5      	ldreq	r5, [r4, #12]
 800e30a:	f104 041a 	add.w	r4, r4, #26
 800e30e:	bf08      	it	eq
 800e310:	1aed      	subeq	r5, r5, r3
 800e312:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e316:	bf08      	it	eq
 800e318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e31c:	4293      	cmp	r3, r2
 800e31e:	bfc4      	itt	gt
 800e320:	1a9b      	subgt	r3, r3, r2
 800e322:	18ed      	addgt	r5, r5, r3
 800e324:	42b5      	cmp	r5, r6
 800e326:	d11a      	bne.n	800e35e <_printf_common+0xd2>
 800e328:	2000      	movs	r0, #0
 800e32a:	e008      	b.n	800e33e <_printf_common+0xb2>
 800e32c:	2301      	movs	r3, #1
 800e32e:	4652      	mov	r2, sl
 800e330:	4641      	mov	r1, r8
 800e332:	4638      	mov	r0, r7
 800e334:	47c8      	blx	r9
 800e336:	3001      	adds	r0, #1
 800e338:	d103      	bne.n	800e342 <_printf_common+0xb6>
 800e33a:	f04f 30ff 	mov.w	r0, #4294967295
 800e33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e342:	3501      	adds	r5, #1
 800e344:	e7c1      	b.n	800e2ca <_printf_common+0x3e>
 800e346:	2030      	movs	r0, #48	@ 0x30
 800e348:	18e1      	adds	r1, r4, r3
 800e34a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e34e:	1c5a      	adds	r2, r3, #1
 800e350:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e354:	4422      	add	r2, r4
 800e356:	3302      	adds	r3, #2
 800e358:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e35c:	e7c2      	b.n	800e2e4 <_printf_common+0x58>
 800e35e:	2301      	movs	r3, #1
 800e360:	4622      	mov	r2, r4
 800e362:	4641      	mov	r1, r8
 800e364:	4638      	mov	r0, r7
 800e366:	47c8      	blx	r9
 800e368:	3001      	adds	r0, #1
 800e36a:	d0e6      	beq.n	800e33a <_printf_common+0xae>
 800e36c:	3601      	adds	r6, #1
 800e36e:	e7d9      	b.n	800e324 <_printf_common+0x98>

0800e370 <_printf_i>:
 800e370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e374:	7e0f      	ldrb	r7, [r1, #24]
 800e376:	4691      	mov	r9, r2
 800e378:	2f78      	cmp	r7, #120	@ 0x78
 800e37a:	4680      	mov	r8, r0
 800e37c:	460c      	mov	r4, r1
 800e37e:	469a      	mov	sl, r3
 800e380:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e382:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e386:	d807      	bhi.n	800e398 <_printf_i+0x28>
 800e388:	2f62      	cmp	r7, #98	@ 0x62
 800e38a:	d80a      	bhi.n	800e3a2 <_printf_i+0x32>
 800e38c:	2f00      	cmp	r7, #0
 800e38e:	f000 80d3 	beq.w	800e538 <_printf_i+0x1c8>
 800e392:	2f58      	cmp	r7, #88	@ 0x58
 800e394:	f000 80ba 	beq.w	800e50c <_printf_i+0x19c>
 800e398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e39c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3a0:	e03a      	b.n	800e418 <_printf_i+0xa8>
 800e3a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3a6:	2b15      	cmp	r3, #21
 800e3a8:	d8f6      	bhi.n	800e398 <_printf_i+0x28>
 800e3aa:	a101      	add	r1, pc, #4	@ (adr r1, 800e3b0 <_printf_i+0x40>)
 800e3ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3b0:	0800e409 	.word	0x0800e409
 800e3b4:	0800e41d 	.word	0x0800e41d
 800e3b8:	0800e399 	.word	0x0800e399
 800e3bc:	0800e399 	.word	0x0800e399
 800e3c0:	0800e399 	.word	0x0800e399
 800e3c4:	0800e399 	.word	0x0800e399
 800e3c8:	0800e41d 	.word	0x0800e41d
 800e3cc:	0800e399 	.word	0x0800e399
 800e3d0:	0800e399 	.word	0x0800e399
 800e3d4:	0800e399 	.word	0x0800e399
 800e3d8:	0800e399 	.word	0x0800e399
 800e3dc:	0800e51f 	.word	0x0800e51f
 800e3e0:	0800e447 	.word	0x0800e447
 800e3e4:	0800e4d9 	.word	0x0800e4d9
 800e3e8:	0800e399 	.word	0x0800e399
 800e3ec:	0800e399 	.word	0x0800e399
 800e3f0:	0800e541 	.word	0x0800e541
 800e3f4:	0800e399 	.word	0x0800e399
 800e3f8:	0800e447 	.word	0x0800e447
 800e3fc:	0800e399 	.word	0x0800e399
 800e400:	0800e399 	.word	0x0800e399
 800e404:	0800e4e1 	.word	0x0800e4e1
 800e408:	6833      	ldr	r3, [r6, #0]
 800e40a:	1d1a      	adds	r2, r3, #4
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6032      	str	r2, [r6, #0]
 800e410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e414:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e418:	2301      	movs	r3, #1
 800e41a:	e09e      	b.n	800e55a <_printf_i+0x1ea>
 800e41c:	6833      	ldr	r3, [r6, #0]
 800e41e:	6820      	ldr	r0, [r4, #0]
 800e420:	1d19      	adds	r1, r3, #4
 800e422:	6031      	str	r1, [r6, #0]
 800e424:	0606      	lsls	r6, r0, #24
 800e426:	d501      	bpl.n	800e42c <_printf_i+0xbc>
 800e428:	681d      	ldr	r5, [r3, #0]
 800e42a:	e003      	b.n	800e434 <_printf_i+0xc4>
 800e42c:	0645      	lsls	r5, r0, #25
 800e42e:	d5fb      	bpl.n	800e428 <_printf_i+0xb8>
 800e430:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e434:	2d00      	cmp	r5, #0
 800e436:	da03      	bge.n	800e440 <_printf_i+0xd0>
 800e438:	232d      	movs	r3, #45	@ 0x2d
 800e43a:	426d      	negs	r5, r5
 800e43c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e440:	230a      	movs	r3, #10
 800e442:	4859      	ldr	r0, [pc, #356]	@ (800e5a8 <_printf_i+0x238>)
 800e444:	e011      	b.n	800e46a <_printf_i+0xfa>
 800e446:	6821      	ldr	r1, [r4, #0]
 800e448:	6833      	ldr	r3, [r6, #0]
 800e44a:	0608      	lsls	r0, r1, #24
 800e44c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e450:	d402      	bmi.n	800e458 <_printf_i+0xe8>
 800e452:	0649      	lsls	r1, r1, #25
 800e454:	bf48      	it	mi
 800e456:	b2ad      	uxthmi	r5, r5
 800e458:	2f6f      	cmp	r7, #111	@ 0x6f
 800e45a:	6033      	str	r3, [r6, #0]
 800e45c:	bf14      	ite	ne
 800e45e:	230a      	movne	r3, #10
 800e460:	2308      	moveq	r3, #8
 800e462:	4851      	ldr	r0, [pc, #324]	@ (800e5a8 <_printf_i+0x238>)
 800e464:	2100      	movs	r1, #0
 800e466:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e46a:	6866      	ldr	r6, [r4, #4]
 800e46c:	2e00      	cmp	r6, #0
 800e46e:	bfa8      	it	ge
 800e470:	6821      	ldrge	r1, [r4, #0]
 800e472:	60a6      	str	r6, [r4, #8]
 800e474:	bfa4      	itt	ge
 800e476:	f021 0104 	bicge.w	r1, r1, #4
 800e47a:	6021      	strge	r1, [r4, #0]
 800e47c:	b90d      	cbnz	r5, 800e482 <_printf_i+0x112>
 800e47e:	2e00      	cmp	r6, #0
 800e480:	d04b      	beq.n	800e51a <_printf_i+0x1aa>
 800e482:	4616      	mov	r6, r2
 800e484:	fbb5 f1f3 	udiv	r1, r5, r3
 800e488:	fb03 5711 	mls	r7, r3, r1, r5
 800e48c:	5dc7      	ldrb	r7, [r0, r7]
 800e48e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e492:	462f      	mov	r7, r5
 800e494:	42bb      	cmp	r3, r7
 800e496:	460d      	mov	r5, r1
 800e498:	d9f4      	bls.n	800e484 <_printf_i+0x114>
 800e49a:	2b08      	cmp	r3, #8
 800e49c:	d10b      	bne.n	800e4b6 <_printf_i+0x146>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	07df      	lsls	r7, r3, #31
 800e4a2:	d508      	bpl.n	800e4b6 <_printf_i+0x146>
 800e4a4:	6923      	ldr	r3, [r4, #16]
 800e4a6:	6861      	ldr	r1, [r4, #4]
 800e4a8:	4299      	cmp	r1, r3
 800e4aa:	bfde      	ittt	le
 800e4ac:	2330      	movle	r3, #48	@ 0x30
 800e4ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4b6:	1b92      	subs	r2, r2, r6
 800e4b8:	6122      	str	r2, [r4, #16]
 800e4ba:	464b      	mov	r3, r9
 800e4bc:	4621      	mov	r1, r4
 800e4be:	4640      	mov	r0, r8
 800e4c0:	f8cd a000 	str.w	sl, [sp]
 800e4c4:	aa03      	add	r2, sp, #12
 800e4c6:	f7ff fee1 	bl	800e28c <_printf_common>
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	d14a      	bne.n	800e564 <_printf_i+0x1f4>
 800e4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d2:	b004      	add	sp, #16
 800e4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	f043 0320 	orr.w	r3, r3, #32
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	2778      	movs	r7, #120	@ 0x78
 800e4e2:	4832      	ldr	r0, [pc, #200]	@ (800e5ac <_printf_i+0x23c>)
 800e4e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	6831      	ldr	r1, [r6, #0]
 800e4ec:	061f      	lsls	r7, r3, #24
 800e4ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4f2:	d402      	bmi.n	800e4fa <_printf_i+0x18a>
 800e4f4:	065f      	lsls	r7, r3, #25
 800e4f6:	bf48      	it	mi
 800e4f8:	b2ad      	uxthmi	r5, r5
 800e4fa:	6031      	str	r1, [r6, #0]
 800e4fc:	07d9      	lsls	r1, r3, #31
 800e4fe:	bf44      	itt	mi
 800e500:	f043 0320 	orrmi.w	r3, r3, #32
 800e504:	6023      	strmi	r3, [r4, #0]
 800e506:	b11d      	cbz	r5, 800e510 <_printf_i+0x1a0>
 800e508:	2310      	movs	r3, #16
 800e50a:	e7ab      	b.n	800e464 <_printf_i+0xf4>
 800e50c:	4826      	ldr	r0, [pc, #152]	@ (800e5a8 <_printf_i+0x238>)
 800e50e:	e7e9      	b.n	800e4e4 <_printf_i+0x174>
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	f023 0320 	bic.w	r3, r3, #32
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	e7f6      	b.n	800e508 <_printf_i+0x198>
 800e51a:	4616      	mov	r6, r2
 800e51c:	e7bd      	b.n	800e49a <_printf_i+0x12a>
 800e51e:	6833      	ldr	r3, [r6, #0]
 800e520:	6825      	ldr	r5, [r4, #0]
 800e522:	1d18      	adds	r0, r3, #4
 800e524:	6961      	ldr	r1, [r4, #20]
 800e526:	6030      	str	r0, [r6, #0]
 800e528:	062e      	lsls	r6, r5, #24
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	d501      	bpl.n	800e532 <_printf_i+0x1c2>
 800e52e:	6019      	str	r1, [r3, #0]
 800e530:	e002      	b.n	800e538 <_printf_i+0x1c8>
 800e532:	0668      	lsls	r0, r5, #25
 800e534:	d5fb      	bpl.n	800e52e <_printf_i+0x1be>
 800e536:	8019      	strh	r1, [r3, #0]
 800e538:	2300      	movs	r3, #0
 800e53a:	4616      	mov	r6, r2
 800e53c:	6123      	str	r3, [r4, #16]
 800e53e:	e7bc      	b.n	800e4ba <_printf_i+0x14a>
 800e540:	6833      	ldr	r3, [r6, #0]
 800e542:	2100      	movs	r1, #0
 800e544:	1d1a      	adds	r2, r3, #4
 800e546:	6032      	str	r2, [r6, #0]
 800e548:	681e      	ldr	r6, [r3, #0]
 800e54a:	6862      	ldr	r2, [r4, #4]
 800e54c:	4630      	mov	r0, r6
 800e54e:	f000 f995 	bl	800e87c <memchr>
 800e552:	b108      	cbz	r0, 800e558 <_printf_i+0x1e8>
 800e554:	1b80      	subs	r0, r0, r6
 800e556:	6060      	str	r0, [r4, #4]
 800e558:	6863      	ldr	r3, [r4, #4]
 800e55a:	6123      	str	r3, [r4, #16]
 800e55c:	2300      	movs	r3, #0
 800e55e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e562:	e7aa      	b.n	800e4ba <_printf_i+0x14a>
 800e564:	4632      	mov	r2, r6
 800e566:	4649      	mov	r1, r9
 800e568:	4640      	mov	r0, r8
 800e56a:	6923      	ldr	r3, [r4, #16]
 800e56c:	47d0      	blx	sl
 800e56e:	3001      	adds	r0, #1
 800e570:	d0ad      	beq.n	800e4ce <_printf_i+0x15e>
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	079b      	lsls	r3, r3, #30
 800e576:	d413      	bmi.n	800e5a0 <_printf_i+0x230>
 800e578:	68e0      	ldr	r0, [r4, #12]
 800e57a:	9b03      	ldr	r3, [sp, #12]
 800e57c:	4298      	cmp	r0, r3
 800e57e:	bfb8      	it	lt
 800e580:	4618      	movlt	r0, r3
 800e582:	e7a6      	b.n	800e4d2 <_printf_i+0x162>
 800e584:	2301      	movs	r3, #1
 800e586:	4632      	mov	r2, r6
 800e588:	4649      	mov	r1, r9
 800e58a:	4640      	mov	r0, r8
 800e58c:	47d0      	blx	sl
 800e58e:	3001      	adds	r0, #1
 800e590:	d09d      	beq.n	800e4ce <_printf_i+0x15e>
 800e592:	3501      	adds	r5, #1
 800e594:	68e3      	ldr	r3, [r4, #12]
 800e596:	9903      	ldr	r1, [sp, #12]
 800e598:	1a5b      	subs	r3, r3, r1
 800e59a:	42ab      	cmp	r3, r5
 800e59c:	dcf2      	bgt.n	800e584 <_printf_i+0x214>
 800e59e:	e7eb      	b.n	800e578 <_printf_i+0x208>
 800e5a0:	2500      	movs	r5, #0
 800e5a2:	f104 0619 	add.w	r6, r4, #25
 800e5a6:	e7f5      	b.n	800e594 <_printf_i+0x224>
 800e5a8:	0801086f 	.word	0x0801086f
 800e5ac:	08010880 	.word	0x08010880

0800e5b0 <__sflush_r>:
 800e5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b6:	0716      	lsls	r6, r2, #28
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	460c      	mov	r4, r1
 800e5bc:	d454      	bmi.n	800e668 <__sflush_r+0xb8>
 800e5be:	684b      	ldr	r3, [r1, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	dc02      	bgt.n	800e5ca <__sflush_r+0x1a>
 800e5c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	dd48      	ble.n	800e65c <__sflush_r+0xac>
 800e5ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5cc:	2e00      	cmp	r6, #0
 800e5ce:	d045      	beq.n	800e65c <__sflush_r+0xac>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5d6:	682f      	ldr	r7, [r5, #0]
 800e5d8:	6a21      	ldr	r1, [r4, #32]
 800e5da:	602b      	str	r3, [r5, #0]
 800e5dc:	d030      	beq.n	800e640 <__sflush_r+0x90>
 800e5de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5e0:	89a3      	ldrh	r3, [r4, #12]
 800e5e2:	0759      	lsls	r1, r3, #29
 800e5e4:	d505      	bpl.n	800e5f2 <__sflush_r+0x42>
 800e5e6:	6863      	ldr	r3, [r4, #4]
 800e5e8:	1ad2      	subs	r2, r2, r3
 800e5ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5ec:	b10b      	cbz	r3, 800e5f2 <__sflush_r+0x42>
 800e5ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5f0:	1ad2      	subs	r2, r2, r3
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5f8:	6a21      	ldr	r1, [r4, #32]
 800e5fa:	47b0      	blx	r6
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	89a3      	ldrh	r3, [r4, #12]
 800e600:	d106      	bne.n	800e610 <__sflush_r+0x60>
 800e602:	6829      	ldr	r1, [r5, #0]
 800e604:	291d      	cmp	r1, #29
 800e606:	d82b      	bhi.n	800e660 <__sflush_r+0xb0>
 800e608:	4a28      	ldr	r2, [pc, #160]	@ (800e6ac <__sflush_r+0xfc>)
 800e60a:	410a      	asrs	r2, r1
 800e60c:	07d6      	lsls	r6, r2, #31
 800e60e:	d427      	bmi.n	800e660 <__sflush_r+0xb0>
 800e610:	2200      	movs	r2, #0
 800e612:	6062      	str	r2, [r4, #4]
 800e614:	6922      	ldr	r2, [r4, #16]
 800e616:	04d9      	lsls	r1, r3, #19
 800e618:	6022      	str	r2, [r4, #0]
 800e61a:	d504      	bpl.n	800e626 <__sflush_r+0x76>
 800e61c:	1c42      	adds	r2, r0, #1
 800e61e:	d101      	bne.n	800e624 <__sflush_r+0x74>
 800e620:	682b      	ldr	r3, [r5, #0]
 800e622:	b903      	cbnz	r3, 800e626 <__sflush_r+0x76>
 800e624:	6560      	str	r0, [r4, #84]	@ 0x54
 800e626:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e628:	602f      	str	r7, [r5, #0]
 800e62a:	b1b9      	cbz	r1, 800e65c <__sflush_r+0xac>
 800e62c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e630:	4299      	cmp	r1, r3
 800e632:	d002      	beq.n	800e63a <__sflush_r+0x8a>
 800e634:	4628      	mov	r0, r5
 800e636:	f7ff fa9b 	bl	800db70 <_free_r>
 800e63a:	2300      	movs	r3, #0
 800e63c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e63e:	e00d      	b.n	800e65c <__sflush_r+0xac>
 800e640:	2301      	movs	r3, #1
 800e642:	4628      	mov	r0, r5
 800e644:	47b0      	blx	r6
 800e646:	4602      	mov	r2, r0
 800e648:	1c50      	adds	r0, r2, #1
 800e64a:	d1c9      	bne.n	800e5e0 <__sflush_r+0x30>
 800e64c:	682b      	ldr	r3, [r5, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0c6      	beq.n	800e5e0 <__sflush_r+0x30>
 800e652:	2b1d      	cmp	r3, #29
 800e654:	d001      	beq.n	800e65a <__sflush_r+0xaa>
 800e656:	2b16      	cmp	r3, #22
 800e658:	d11d      	bne.n	800e696 <__sflush_r+0xe6>
 800e65a:	602f      	str	r7, [r5, #0]
 800e65c:	2000      	movs	r0, #0
 800e65e:	e021      	b.n	800e6a4 <__sflush_r+0xf4>
 800e660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e664:	b21b      	sxth	r3, r3
 800e666:	e01a      	b.n	800e69e <__sflush_r+0xee>
 800e668:	690f      	ldr	r7, [r1, #16]
 800e66a:	2f00      	cmp	r7, #0
 800e66c:	d0f6      	beq.n	800e65c <__sflush_r+0xac>
 800e66e:	0793      	lsls	r3, r2, #30
 800e670:	bf18      	it	ne
 800e672:	2300      	movne	r3, #0
 800e674:	680e      	ldr	r6, [r1, #0]
 800e676:	bf08      	it	eq
 800e678:	694b      	ldreq	r3, [r1, #20]
 800e67a:	1bf6      	subs	r6, r6, r7
 800e67c:	600f      	str	r7, [r1, #0]
 800e67e:	608b      	str	r3, [r1, #8]
 800e680:	2e00      	cmp	r6, #0
 800e682:	ddeb      	ble.n	800e65c <__sflush_r+0xac>
 800e684:	4633      	mov	r3, r6
 800e686:	463a      	mov	r2, r7
 800e688:	4628      	mov	r0, r5
 800e68a:	6a21      	ldr	r1, [r4, #32]
 800e68c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800e690:	47e0      	blx	ip
 800e692:	2800      	cmp	r0, #0
 800e694:	dc07      	bgt.n	800e6a6 <__sflush_r+0xf6>
 800e696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e69e:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a2:	81a3      	strh	r3, [r4, #12]
 800e6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a6:	4407      	add	r7, r0
 800e6a8:	1a36      	subs	r6, r6, r0
 800e6aa:	e7e9      	b.n	800e680 <__sflush_r+0xd0>
 800e6ac:	dfbffffe 	.word	0xdfbffffe

0800e6b0 <_fflush_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	690b      	ldr	r3, [r1, #16]
 800e6b4:	4605      	mov	r5, r0
 800e6b6:	460c      	mov	r4, r1
 800e6b8:	b913      	cbnz	r3, 800e6c0 <_fflush_r+0x10>
 800e6ba:	2500      	movs	r5, #0
 800e6bc:	4628      	mov	r0, r5
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	b118      	cbz	r0, 800e6ca <_fflush_r+0x1a>
 800e6c2:	6a03      	ldr	r3, [r0, #32]
 800e6c4:	b90b      	cbnz	r3, 800e6ca <_fflush_r+0x1a>
 800e6c6:	f7ff f913 	bl	800d8f0 <__sinit>
 800e6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0f3      	beq.n	800e6ba <_fflush_r+0xa>
 800e6d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6d4:	07d0      	lsls	r0, r2, #31
 800e6d6:	d404      	bmi.n	800e6e2 <_fflush_r+0x32>
 800e6d8:	0599      	lsls	r1, r3, #22
 800e6da:	d402      	bmi.n	800e6e2 <_fflush_r+0x32>
 800e6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6de:	f7ff fa36 	bl	800db4e <__retarget_lock_acquire_recursive>
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	f7ff ff63 	bl	800e5b0 <__sflush_r>
 800e6ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6ec:	4605      	mov	r5, r0
 800e6ee:	07da      	lsls	r2, r3, #31
 800e6f0:	d4e4      	bmi.n	800e6bc <_fflush_r+0xc>
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	059b      	lsls	r3, r3, #22
 800e6f6:	d4e1      	bmi.n	800e6bc <_fflush_r+0xc>
 800e6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6fa:	f7ff fa29 	bl	800db50 <__retarget_lock_release_recursive>
 800e6fe:	e7dd      	b.n	800e6bc <_fflush_r+0xc>

0800e700 <__swbuf_r>:
 800e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e702:	460e      	mov	r6, r1
 800e704:	4614      	mov	r4, r2
 800e706:	4605      	mov	r5, r0
 800e708:	b118      	cbz	r0, 800e712 <__swbuf_r+0x12>
 800e70a:	6a03      	ldr	r3, [r0, #32]
 800e70c:	b90b      	cbnz	r3, 800e712 <__swbuf_r+0x12>
 800e70e:	f7ff f8ef 	bl	800d8f0 <__sinit>
 800e712:	69a3      	ldr	r3, [r4, #24]
 800e714:	60a3      	str	r3, [r4, #8]
 800e716:	89a3      	ldrh	r3, [r4, #12]
 800e718:	071a      	lsls	r2, r3, #28
 800e71a:	d501      	bpl.n	800e720 <__swbuf_r+0x20>
 800e71c:	6923      	ldr	r3, [r4, #16]
 800e71e:	b943      	cbnz	r3, 800e732 <__swbuf_r+0x32>
 800e720:	4621      	mov	r1, r4
 800e722:	4628      	mov	r0, r5
 800e724:	f000 f82a 	bl	800e77c <__swsetup_r>
 800e728:	b118      	cbz	r0, 800e732 <__swbuf_r+0x32>
 800e72a:	f04f 37ff 	mov.w	r7, #4294967295
 800e72e:	4638      	mov	r0, r7
 800e730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e732:	6823      	ldr	r3, [r4, #0]
 800e734:	6922      	ldr	r2, [r4, #16]
 800e736:	b2f6      	uxtb	r6, r6
 800e738:	1a98      	subs	r0, r3, r2
 800e73a:	6963      	ldr	r3, [r4, #20]
 800e73c:	4637      	mov	r7, r6
 800e73e:	4283      	cmp	r3, r0
 800e740:	dc05      	bgt.n	800e74e <__swbuf_r+0x4e>
 800e742:	4621      	mov	r1, r4
 800e744:	4628      	mov	r0, r5
 800e746:	f7ff ffb3 	bl	800e6b0 <_fflush_r>
 800e74a:	2800      	cmp	r0, #0
 800e74c:	d1ed      	bne.n	800e72a <__swbuf_r+0x2a>
 800e74e:	68a3      	ldr	r3, [r4, #8]
 800e750:	3b01      	subs	r3, #1
 800e752:	60a3      	str	r3, [r4, #8]
 800e754:	6823      	ldr	r3, [r4, #0]
 800e756:	1c5a      	adds	r2, r3, #1
 800e758:	6022      	str	r2, [r4, #0]
 800e75a:	701e      	strb	r6, [r3, #0]
 800e75c:	6962      	ldr	r2, [r4, #20]
 800e75e:	1c43      	adds	r3, r0, #1
 800e760:	429a      	cmp	r2, r3
 800e762:	d004      	beq.n	800e76e <__swbuf_r+0x6e>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	07db      	lsls	r3, r3, #31
 800e768:	d5e1      	bpl.n	800e72e <__swbuf_r+0x2e>
 800e76a:	2e0a      	cmp	r6, #10
 800e76c:	d1df      	bne.n	800e72e <__swbuf_r+0x2e>
 800e76e:	4621      	mov	r1, r4
 800e770:	4628      	mov	r0, r5
 800e772:	f7ff ff9d 	bl	800e6b0 <_fflush_r>
 800e776:	2800      	cmp	r0, #0
 800e778:	d0d9      	beq.n	800e72e <__swbuf_r+0x2e>
 800e77a:	e7d6      	b.n	800e72a <__swbuf_r+0x2a>

0800e77c <__swsetup_r>:
 800e77c:	b538      	push	{r3, r4, r5, lr}
 800e77e:	4b29      	ldr	r3, [pc, #164]	@ (800e824 <__swsetup_r+0xa8>)
 800e780:	4605      	mov	r5, r0
 800e782:	6818      	ldr	r0, [r3, #0]
 800e784:	460c      	mov	r4, r1
 800e786:	b118      	cbz	r0, 800e790 <__swsetup_r+0x14>
 800e788:	6a03      	ldr	r3, [r0, #32]
 800e78a:	b90b      	cbnz	r3, 800e790 <__swsetup_r+0x14>
 800e78c:	f7ff f8b0 	bl	800d8f0 <__sinit>
 800e790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e794:	0719      	lsls	r1, r3, #28
 800e796:	d422      	bmi.n	800e7de <__swsetup_r+0x62>
 800e798:	06da      	lsls	r2, r3, #27
 800e79a:	d407      	bmi.n	800e7ac <__swsetup_r+0x30>
 800e79c:	2209      	movs	r2, #9
 800e79e:	602a      	str	r2, [r5, #0]
 800e7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a8:	81a3      	strh	r3, [r4, #12]
 800e7aa:	e033      	b.n	800e814 <__swsetup_r+0x98>
 800e7ac:	0758      	lsls	r0, r3, #29
 800e7ae:	d512      	bpl.n	800e7d6 <__swsetup_r+0x5a>
 800e7b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7b2:	b141      	cbz	r1, 800e7c6 <__swsetup_r+0x4a>
 800e7b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7b8:	4299      	cmp	r1, r3
 800e7ba:	d002      	beq.n	800e7c2 <__swsetup_r+0x46>
 800e7bc:	4628      	mov	r0, r5
 800e7be:	f7ff f9d7 	bl	800db70 <_free_r>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7cc:	81a3      	strh	r3, [r4, #12]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	6063      	str	r3, [r4, #4]
 800e7d2:	6923      	ldr	r3, [r4, #16]
 800e7d4:	6023      	str	r3, [r4, #0]
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	f043 0308 	orr.w	r3, r3, #8
 800e7dc:	81a3      	strh	r3, [r4, #12]
 800e7de:	6923      	ldr	r3, [r4, #16]
 800e7e0:	b94b      	cbnz	r3, 800e7f6 <__swsetup_r+0x7a>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7ec:	d003      	beq.n	800e7f6 <__swsetup_r+0x7a>
 800e7ee:	4621      	mov	r1, r4
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	f000 f8a4 	bl	800e93e <__smakebuf_r>
 800e7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7fa:	f013 0201 	ands.w	r2, r3, #1
 800e7fe:	d00a      	beq.n	800e816 <__swsetup_r+0x9a>
 800e800:	2200      	movs	r2, #0
 800e802:	60a2      	str	r2, [r4, #8]
 800e804:	6962      	ldr	r2, [r4, #20]
 800e806:	4252      	negs	r2, r2
 800e808:	61a2      	str	r2, [r4, #24]
 800e80a:	6922      	ldr	r2, [r4, #16]
 800e80c:	b942      	cbnz	r2, 800e820 <__swsetup_r+0xa4>
 800e80e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e812:	d1c5      	bne.n	800e7a0 <__swsetup_r+0x24>
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	0799      	lsls	r1, r3, #30
 800e818:	bf58      	it	pl
 800e81a:	6962      	ldrpl	r2, [r4, #20]
 800e81c:	60a2      	str	r2, [r4, #8]
 800e81e:	e7f4      	b.n	800e80a <__swsetup_r+0x8e>
 800e820:	2000      	movs	r0, #0
 800e822:	e7f7      	b.n	800e814 <__swsetup_r+0x98>
 800e824:	2000001c 	.word	0x2000001c

0800e828 <memmove>:
 800e828:	4288      	cmp	r0, r1
 800e82a:	b510      	push	{r4, lr}
 800e82c:	eb01 0402 	add.w	r4, r1, r2
 800e830:	d902      	bls.n	800e838 <memmove+0x10>
 800e832:	4284      	cmp	r4, r0
 800e834:	4623      	mov	r3, r4
 800e836:	d807      	bhi.n	800e848 <memmove+0x20>
 800e838:	1e43      	subs	r3, r0, #1
 800e83a:	42a1      	cmp	r1, r4
 800e83c:	d008      	beq.n	800e850 <memmove+0x28>
 800e83e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e842:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e846:	e7f8      	b.n	800e83a <memmove+0x12>
 800e848:	4601      	mov	r1, r0
 800e84a:	4402      	add	r2, r0
 800e84c:	428a      	cmp	r2, r1
 800e84e:	d100      	bne.n	800e852 <memmove+0x2a>
 800e850:	bd10      	pop	{r4, pc}
 800e852:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e856:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e85a:	e7f7      	b.n	800e84c <memmove+0x24>

0800e85c <_sbrk_r>:
 800e85c:	b538      	push	{r3, r4, r5, lr}
 800e85e:	2300      	movs	r3, #0
 800e860:	4d05      	ldr	r5, [pc, #20]	@ (800e878 <_sbrk_r+0x1c>)
 800e862:	4604      	mov	r4, r0
 800e864:	4608      	mov	r0, r1
 800e866:	602b      	str	r3, [r5, #0]
 800e868:	f7f2 f880 	bl	800096c <_sbrk>
 800e86c:	1c43      	adds	r3, r0, #1
 800e86e:	d102      	bne.n	800e876 <_sbrk_r+0x1a>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	b103      	cbz	r3, 800e876 <_sbrk_r+0x1a>
 800e874:	6023      	str	r3, [r4, #0]
 800e876:	bd38      	pop	{r3, r4, r5, pc}
 800e878:	200081ac 	.word	0x200081ac

0800e87c <memchr>:
 800e87c:	4603      	mov	r3, r0
 800e87e:	b510      	push	{r4, lr}
 800e880:	b2c9      	uxtb	r1, r1
 800e882:	4402      	add	r2, r0
 800e884:	4293      	cmp	r3, r2
 800e886:	4618      	mov	r0, r3
 800e888:	d101      	bne.n	800e88e <memchr+0x12>
 800e88a:	2000      	movs	r0, #0
 800e88c:	e003      	b.n	800e896 <memchr+0x1a>
 800e88e:	7804      	ldrb	r4, [r0, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	428c      	cmp	r4, r1
 800e894:	d1f6      	bne.n	800e884 <memchr+0x8>
 800e896:	bd10      	pop	{r4, pc}

0800e898 <_realloc_r>:
 800e898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e89c:	4680      	mov	r8, r0
 800e89e:	4615      	mov	r5, r2
 800e8a0:	460c      	mov	r4, r1
 800e8a2:	b921      	cbnz	r1, 800e8ae <_realloc_r+0x16>
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8aa:	f7ff b9cb 	b.w	800dc44 <_malloc_r>
 800e8ae:	b92a      	cbnz	r2, 800e8bc <_realloc_r+0x24>
 800e8b0:	f7ff f95e 	bl	800db70 <_free_r>
 800e8b4:	2400      	movs	r4, #0
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8bc:	f000 f89e 	bl	800e9fc <_malloc_usable_size_r>
 800e8c0:	4285      	cmp	r5, r0
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	d802      	bhi.n	800e8cc <_realloc_r+0x34>
 800e8c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8ca:	d8f4      	bhi.n	800e8b6 <_realloc_r+0x1e>
 800e8cc:	4629      	mov	r1, r5
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	f7ff f9b8 	bl	800dc44 <_malloc_r>
 800e8d4:	4607      	mov	r7, r0
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d0ec      	beq.n	800e8b4 <_realloc_r+0x1c>
 800e8da:	42b5      	cmp	r5, r6
 800e8dc:	462a      	mov	r2, r5
 800e8de:	4621      	mov	r1, r4
 800e8e0:	bf28      	it	cs
 800e8e2:	4632      	movcs	r2, r6
 800e8e4:	f7ff f935 	bl	800db52 <memcpy>
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4640      	mov	r0, r8
 800e8ec:	f7ff f940 	bl	800db70 <_free_r>
 800e8f0:	463c      	mov	r4, r7
 800e8f2:	e7e0      	b.n	800e8b6 <_realloc_r+0x1e>

0800e8f4 <__swhatbuf_r>:
 800e8f4:	b570      	push	{r4, r5, r6, lr}
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8fc:	4615      	mov	r5, r2
 800e8fe:	2900      	cmp	r1, #0
 800e900:	461e      	mov	r6, r3
 800e902:	b096      	sub	sp, #88	@ 0x58
 800e904:	da0c      	bge.n	800e920 <__swhatbuf_r+0x2c>
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	2100      	movs	r1, #0
 800e90a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e90e:	bf14      	ite	ne
 800e910:	2340      	movne	r3, #64	@ 0x40
 800e912:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e916:	2000      	movs	r0, #0
 800e918:	6031      	str	r1, [r6, #0]
 800e91a:	602b      	str	r3, [r5, #0]
 800e91c:	b016      	add	sp, #88	@ 0x58
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	466a      	mov	r2, sp
 800e922:	f000 f849 	bl	800e9b8 <_fstat_r>
 800e926:	2800      	cmp	r0, #0
 800e928:	dbed      	blt.n	800e906 <__swhatbuf_r+0x12>
 800e92a:	9901      	ldr	r1, [sp, #4]
 800e92c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e930:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e934:	4259      	negs	r1, r3
 800e936:	4159      	adcs	r1, r3
 800e938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e93c:	e7eb      	b.n	800e916 <__swhatbuf_r+0x22>

0800e93e <__smakebuf_r>:
 800e93e:	898b      	ldrh	r3, [r1, #12]
 800e940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e942:	079d      	lsls	r5, r3, #30
 800e944:	4606      	mov	r6, r0
 800e946:	460c      	mov	r4, r1
 800e948:	d507      	bpl.n	800e95a <__smakebuf_r+0x1c>
 800e94a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e94e:	6023      	str	r3, [r4, #0]
 800e950:	6123      	str	r3, [r4, #16]
 800e952:	2301      	movs	r3, #1
 800e954:	6163      	str	r3, [r4, #20]
 800e956:	b003      	add	sp, #12
 800e958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e95a:	466a      	mov	r2, sp
 800e95c:	ab01      	add	r3, sp, #4
 800e95e:	f7ff ffc9 	bl	800e8f4 <__swhatbuf_r>
 800e962:	9f00      	ldr	r7, [sp, #0]
 800e964:	4605      	mov	r5, r0
 800e966:	4639      	mov	r1, r7
 800e968:	4630      	mov	r0, r6
 800e96a:	f7ff f96b 	bl	800dc44 <_malloc_r>
 800e96e:	b948      	cbnz	r0, 800e984 <__smakebuf_r+0x46>
 800e970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e974:	059a      	lsls	r2, r3, #22
 800e976:	d4ee      	bmi.n	800e956 <__smakebuf_r+0x18>
 800e978:	f023 0303 	bic.w	r3, r3, #3
 800e97c:	f043 0302 	orr.w	r3, r3, #2
 800e980:	81a3      	strh	r3, [r4, #12]
 800e982:	e7e2      	b.n	800e94a <__smakebuf_r+0xc>
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e98e:	81a3      	strh	r3, [r4, #12]
 800e990:	9b01      	ldr	r3, [sp, #4]
 800e992:	6020      	str	r0, [r4, #0]
 800e994:	b15b      	cbz	r3, 800e9ae <__smakebuf_r+0x70>
 800e996:	4630      	mov	r0, r6
 800e998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e99c:	f000 f81e 	bl	800e9dc <_isatty_r>
 800e9a0:	b128      	cbz	r0, 800e9ae <__smakebuf_r+0x70>
 800e9a2:	89a3      	ldrh	r3, [r4, #12]
 800e9a4:	f023 0303 	bic.w	r3, r3, #3
 800e9a8:	f043 0301 	orr.w	r3, r3, #1
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	89a3      	ldrh	r3, [r4, #12]
 800e9b0:	431d      	orrs	r5, r3
 800e9b2:	81a5      	strh	r5, [r4, #12]
 800e9b4:	e7cf      	b.n	800e956 <__smakebuf_r+0x18>
	...

0800e9b8 <_fstat_r>:
 800e9b8:	b538      	push	{r3, r4, r5, lr}
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	4d06      	ldr	r5, [pc, #24]	@ (800e9d8 <_fstat_r+0x20>)
 800e9be:	4604      	mov	r4, r0
 800e9c0:	4608      	mov	r0, r1
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	602b      	str	r3, [r5, #0]
 800e9c6:	f7f1 ffab 	bl	8000920 <_fstat>
 800e9ca:	1c43      	adds	r3, r0, #1
 800e9cc:	d102      	bne.n	800e9d4 <_fstat_r+0x1c>
 800e9ce:	682b      	ldr	r3, [r5, #0]
 800e9d0:	b103      	cbz	r3, 800e9d4 <_fstat_r+0x1c>
 800e9d2:	6023      	str	r3, [r4, #0]
 800e9d4:	bd38      	pop	{r3, r4, r5, pc}
 800e9d6:	bf00      	nop
 800e9d8:	200081ac 	.word	0x200081ac

0800e9dc <_isatty_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	2300      	movs	r3, #0
 800e9e0:	4d05      	ldr	r5, [pc, #20]	@ (800e9f8 <_isatty_r+0x1c>)
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	4608      	mov	r0, r1
 800e9e6:	602b      	str	r3, [r5, #0]
 800e9e8:	f7f1 ffa9 	bl	800093e <_isatty>
 800e9ec:	1c43      	adds	r3, r0, #1
 800e9ee:	d102      	bne.n	800e9f6 <_isatty_r+0x1a>
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	b103      	cbz	r3, 800e9f6 <_isatty_r+0x1a>
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	bd38      	pop	{r3, r4, r5, pc}
 800e9f8:	200081ac 	.word	0x200081ac

0800e9fc <_malloc_usable_size_r>:
 800e9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea00:	1f18      	subs	r0, r3, #4
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	bfbc      	itt	lt
 800ea06:	580b      	ldrlt	r3, [r1, r0]
 800ea08:	18c0      	addlt	r0, r0, r3
 800ea0a:	4770      	bx	lr

0800ea0c <_init>:
 800ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea0e:	bf00      	nop
 800ea10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea12:	bc08      	pop	{r3}
 800ea14:	469e      	mov	lr, r3
 800ea16:	4770      	bx	lr

0800ea18 <_fini>:
 800ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1a:	bf00      	nop
 800ea1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea1e:	bc08      	pop	{r3}
 800ea20:	469e      	mov	lr, r3
 800ea22:	4770      	bx	lr
