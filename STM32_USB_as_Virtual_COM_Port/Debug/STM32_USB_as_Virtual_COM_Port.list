
STM32_USB_as_Virtual_COM_Port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006284  08006284  00007284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062fc  080062fc  0000817c  2**0
                  CONTENTS
  4 .ARM          00000008  080062fc  080062fc  000072fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006304  08006304  0000817c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006304  08006304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006308  08006308  00007308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800630c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000140c  2000017c  08006488  0000817c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001588  08006488  00008588  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000817c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c086  00000000  00000000  000081a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a15  00000000  00000000  0001422b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00016c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000835  00000000  00000000  00017770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210be  00000000  00000000  00017fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f24c  00000000  00000000  00039063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b332d  00000000  00000000  000482af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb5dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf4  00000000  00000000  000fb620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000fe214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000017c 	.word	0x2000017c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800626c 	.word	0x0800626c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000180 	.word	0x20000180
 8000220:	0800626c 	.word	0x0800626c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 f954 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 f806 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 f88a 	bl	8000634 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000520:	f005 f9ac 	bl	800587c <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <main+0x14>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	@ 0x70
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000532:	2238      	movs	r2, #56	@ 0x38
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fe6c 	bl	8006214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fe5e 	bl	8006214 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000560:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000562:	2304      	movs	r3, #4
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000566:	2301      	movs	r3, #1
 8000568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800056a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000578:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800057e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000584:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000588:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800058a:	2340      	movs	r3, #64	@ 0x40
 800058c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fd5e 	bl	8002054 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800059e:	f000 f875 	bl	800068c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005bc:	2102      	movs	r1, #2
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 f85e 	bl	8002680 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ca:	f000 f85f 	bl	800068c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ce:	2310      	movs	r3, #16
 80005d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80005d2:	2300      	movs	r3, #0
 80005d4:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLI2S.PLLI2SMUL = RCC_PLLI2S_MUL10;
 80005d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005da:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLI2S.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80005dc:	2340      	movs	r3, #64	@ 0x40
 80005de:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fa52 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ee:	f000 f84d 	bl	800068c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 80005f8:	2000      	movs	r0, #0
 80005fa:	f002 f92b 	bl	8002854 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <SystemClock_Config+0x104>)
 8000600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <SystemClock_Config+0x104>)
 8000608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800060c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 800060e:	4b07      	ldr	r3, [pc, #28]	@ (800062c <SystemClock_Config+0x104>)
 8000610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000612:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000616:	4a05      	ldr	r2, [pc, #20]	@ (800062c <SystemClock_Config+0x104>)
 8000618:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800061c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800061e:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <SystemClock_Config+0x108>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
}
 8000624:	bf00      	nop
 8000626:	3770      	adds	r7, #112	@ 0x70
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	42420070 	.word	0x42420070

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_GPIO_Init+0x50>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <MX_GPIO_Init+0x50>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_GPIO_Init+0x50>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000660:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800066a:	2301      	movs	r3, #1
 800066c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4619      	mov	r1, r3
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_GPIO_Init+0x54>)
 8000676:	f000 fa37 	bl	8000ae8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_MspInit+0x5c>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_MspInit+0x60>)
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	4a04      	ldr	r2, [pc, #16]	@ (80006f8 <HAL_MspInit+0x60>)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010000 	.word	0x40010000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	bf00      	nop
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <MemManage_Handler+0x4>

08000714 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <UsageFault_Handler+0x4>

08000724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074c:	f000 f87e 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}

08000754 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000758:	4802      	ldr	r0, [pc, #8]	@ (8000764 <OTG_FS_IRQHandler+0x10>)
 800075a:	f000 fc88 	bl	800106e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000e64 	.word	0x20000e64

08000768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff fff8 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077a:	490c      	ldr	r1, [pc, #48]	@ (80007ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000790:	4c09      	ldr	r4, [pc, #36]	@ (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800079e:	f005 fd41 	bl	8006224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff feb5 	bl	8000510 <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80007b0:	0800630c 	.word	0x0800630c
  ldr r2, =_sbss
 80007b4:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80007b8:	20001588 	.word	0x20001588

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 f947 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	200f      	movs	r0, #15
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff ff5c 	bl	8000698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f95f 	bl	8000ace <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 f927 	bl	8000a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	@ (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a03      	ldr	r2, [pc, #12]	@ (800086c <HAL_IncTick+0x20>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000008 	.word	0x20000008
 800086c:	20000198 	.word	0x20000198

08000870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000198 	.word	0x20000198

08000884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800088c:	f7ff fff0 	bl	8000870 <HAL_GetTick>
 8000890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800089c:	d005      	beq.n	80008aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800089e:	4b0a      	ldr	r3, [pc, #40]	@ (80008c8 <HAL_Delay+0x44>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008aa:	bf00      	nop
 80008ac:	f7ff ffe0 	bl	8000870 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8f7      	bhi.n	80008ac <HAL_Delay+0x28>
  {
  }
}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000008 	.word	0x20000008

080008cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f003 0307 	and.w	r3, r3, #7
 80008da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e8:	4013      	ands	r3, r2
 80008ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <__NVIC_SetPriorityGrouping+0x44>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <__NVIC_GetPriorityGrouping+0x18>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	f003 0307 	and.w	r3, r3, #7
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093e:	2b00      	cmp	r3, #0
 8000940:	db0b      	blt.n	800095a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	f003 021f 	and.w	r2, r3, #31
 8000948:	4906      	ldr	r1, [pc, #24]	@ (8000964 <__NVIC_EnableIRQ+0x34>)
 800094a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094e:	095b      	lsrs	r3, r3, #5
 8000950:	2001      	movs	r0, #1
 8000952:	fa00 f202 	lsl.w	r2, r0, r2
 8000956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	@ 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	@ 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a30:	d301      	bcc.n	8000a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a32:	2301      	movs	r3, #1
 8000a34:	e00f      	b.n	8000a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a36:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <SysTick_Config+0x40>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3e:	210f      	movs	r1, #15
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	f7ff ff90 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <SysTick_Config+0x40>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	@ (8000a60 <SysTick_Config+0x40>)
 8000a50:	2207      	movs	r2, #7
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff2d 	bl	80008cc <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff42 	bl	8000914 <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ff90 	bl	80009bc <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff5f 	bl	8000968 <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff35 	bl	8000930 <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ffa2 	bl	8000a20 <SysTick_Config>
 8000adc:	4603      	mov	r3, r0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b08b      	sub	sp, #44	@ 0x2c
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e169      	b.n	8000dd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000afc:	2201      	movs	r2, #1
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	69fa      	ldr	r2, [r7, #28]
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f040 8158 	bne.w	8000dca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4a9a      	ldr	r2, [pc, #616]	@ (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d05e      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b24:	4a98      	ldr	r2, [pc, #608]	@ (8000d88 <HAL_GPIO_Init+0x2a0>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d875      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b2a:	4a98      	ldr	r2, [pc, #608]	@ (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d058      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b30:	4a96      	ldr	r2, [pc, #600]	@ (8000d8c <HAL_GPIO_Init+0x2a4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d86f      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b36:	4a96      	ldr	r2, [pc, #600]	@ (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d052      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b3c:	4a94      	ldr	r2, [pc, #592]	@ (8000d90 <HAL_GPIO_Init+0x2a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d869      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b42:	4a94      	ldr	r2, [pc, #592]	@ (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d04c      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b48:	4a92      	ldr	r2, [pc, #584]	@ (8000d94 <HAL_GPIO_Init+0x2ac>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d863      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a92      	ldr	r2, [pc, #584]	@ (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d046      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
 8000b54:	4a90      	ldr	r2, [pc, #576]	@ (8000d98 <HAL_GPIO_Init+0x2b0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d85d      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d82a      	bhi.n	8000bb4 <HAL_GPIO_Init+0xcc>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d859      	bhi.n	8000c16 <HAL_GPIO_Init+0x12e>
 8000b62:	a201      	add	r2, pc, #4	@ (adr r2, 8000b68 <HAL_GPIO_Init+0x80>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000be3 	.word	0x08000be3
 8000b6c:	08000bbd 	.word	0x08000bbd
 8000b70:	08000bcf 	.word	0x08000bcf
 8000b74:	08000c11 	.word	0x08000c11
 8000b78:	08000c17 	.word	0x08000c17
 8000b7c:	08000c17 	.word	0x08000c17
 8000b80:	08000c17 	.word	0x08000c17
 8000b84:	08000c17 	.word	0x08000c17
 8000b88:	08000c17 	.word	0x08000c17
 8000b8c:	08000c17 	.word	0x08000c17
 8000b90:	08000c17 	.word	0x08000c17
 8000b94:	08000c17 	.word	0x08000c17
 8000b98:	08000c17 	.word	0x08000c17
 8000b9c:	08000c17 	.word	0x08000c17
 8000ba0:	08000c17 	.word	0x08000c17
 8000ba4:	08000c17 	.word	0x08000c17
 8000ba8:	08000c17 	.word	0x08000c17
 8000bac:	08000bc5 	.word	0x08000bc5
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	4a79      	ldr	r2, [pc, #484]	@ (8000d9c <HAL_GPIO_Init+0x2b4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bba:	e02c      	b.n	8000c16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	623b      	str	r3, [r7, #32]
          break;
 8000bc2:	e029      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	623b      	str	r3, [r7, #32]
          break;
 8000bcc:	e024      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	623b      	str	r3, [r7, #32]
          break;
 8000bd6:	e01f      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	330c      	adds	r3, #12
 8000bde:	623b      	str	r3, [r7, #32]
          break;
 8000be0:	e01a      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d102      	bne.n	8000bf0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bea:	2304      	movs	r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e013      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d105      	bne.n	8000c04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	611a      	str	r2, [r3, #16]
          break;
 8000c02:	e009      	b.n	8000c18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	615a      	str	r2, [r3, #20]
          break;
 8000c0e:	e003      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e000      	b.n	8000c18 <HAL_GPIO_Init+0x130>
          break;
 8000c16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2bff      	cmp	r3, #255	@ 0xff
 8000c1c:	d801      	bhi.n	8000c22 <HAL_GPIO_Init+0x13a>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	e001      	b.n	8000c26 <HAL_GPIO_Init+0x13e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3304      	adds	r3, #4
 8000c26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	2bff      	cmp	r3, #255	@ 0xff
 8000c2c:	d802      	bhi.n	8000c34 <HAL_GPIO_Init+0x14c>
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_Init+0x152>
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	3b08      	subs	r3, #8
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	210f      	movs	r1, #15
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	6a39      	ldr	r1, [r7, #32]
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	431a      	orrs	r2, r3
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f000 80b1 	beq.w	8000dca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c68:	4b4d      	ldr	r3, [pc, #308]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c80:	4a48      	ldr	r2, [pc, #288]	@ (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	089b      	lsrs	r3, r3, #2
 8000c86:	3302      	adds	r3, #2
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a40      	ldr	r2, [pc, #256]	@ (8000da8 <HAL_GPIO_Init+0x2c0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d013      	beq.n	8000cd4 <HAL_GPIO_Init+0x1ec>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3f      	ldr	r2, [pc, #252]	@ (8000dac <HAL_GPIO_Init+0x2c4>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00d      	beq.n	8000cd0 <HAL_GPIO_Init+0x1e8>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3e      	ldr	r2, [pc, #248]	@ (8000db0 <HAL_GPIO_Init+0x2c8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d007      	beq.n	8000ccc <HAL_GPIO_Init+0x1e4>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	@ (8000db4 <HAL_GPIO_Init+0x2cc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d101      	bne.n	8000cc8 <HAL_GPIO_Init+0x1e0>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e004      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000ccc:	2302      	movs	r3, #2
 8000cce:	e002      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd8:	f002 0203 	and.w	r2, r2, #3
 8000cdc:	0092      	lsls	r2, r2, #2
 8000cde:	4093      	lsls	r3, r2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce6:	492f      	ldr	r1, [pc, #188]	@ (8000da4 <HAL_GPIO_Init+0x2bc>)
 8000ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cea:	089b      	lsrs	r3, r3, #2
 8000cec:	3302      	adds	r3, #2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d006      	beq.n	8000d0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d00:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	492c      	ldr	r1, [pc, #176]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	43db      	mvns	r3, r3
 8000d16:	4928      	ldr	r1, [pc, #160]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d18:	4013      	ands	r3, r2
 8000d1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d006      	beq.n	8000d36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d28:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	4922      	ldr	r1, [pc, #136]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60cb      	str	r3, [r1, #12]
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d36:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d38:	68da      	ldr	r2, [r3, #12]
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	491e      	ldr	r1, [pc, #120]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	4918      	ldr	r1, [pc, #96]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	604b      	str	r3, [r1, #4]
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4914      	ldr	r1, [pc, #80]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d021      	beq.n	8000dbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	490e      	ldr	r1, [pc, #56]	@ (8000db8 <HAL_GPIO_Init+0x2d0>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
 8000d84:	e021      	b.n	8000dca <HAL_GPIO_Init+0x2e2>
 8000d86:	bf00      	nop
 8000d88:	10320000 	.word	0x10320000
 8000d8c:	10310000 	.word	0x10310000
 8000d90:	10220000 	.word	0x10220000
 8000d94:	10210000 	.word	0x10210000
 8000d98:	10120000 	.word	0x10120000
 8000d9c:	10110000 	.word	0x10110000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40011000 	.word	0x40011000
 8000db4:	40011400 	.word	0x40011400
 8000db8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	4909      	ldr	r1, [pc, #36]	@ (8000dec <HAL_GPIO_Init+0x304>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dcc:	3301      	adds	r3, #1
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f ae8e 	bne.w	8000afc <HAL_GPIO_Init+0x14>
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	372c      	adds	r7, #44	@ 0x2c
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40010400 	.word	0x40010400

08000df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b08f      	sub	sp, #60	@ 0x3c
 8000df4:	af0a      	add	r7, sp, #40	@ 0x28
 8000df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e10f      	b.n	8001022 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d106      	bne.n	8000e22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f004 ff25 	bl	8005c6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f823 	bl	8002e8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	687e      	ldr	r6, [r7, #4]
 8000e4e:	466d      	mov	r5, sp
 8000e50:	f106 0410 	add.w	r4, r6, #16
 8000e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e64:	1d33      	adds	r3, r6, #4
 8000e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e68:	6838      	ldr	r0, [r7, #0]
 8000e6a:	f001 ff41 	bl	8002cf0 <USB_CoreInit>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d005      	beq.n	8000e80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2202      	movs	r2, #2
 8000e78:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e0d0      	b.n	8001022 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f002 f810 	bl	8002eac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e04a      	b.n	8000f28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e92:	7bfa      	ldrb	r2, [r7, #15]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	333d      	adds	r3, #61	@ 0x3d
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	333c      	adds	r3, #60	@ 0x3c
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	b298      	uxth	r0, r3
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	3356      	adds	r3, #86	@ 0x56
 8000ece:	4602      	mov	r2, r0
 8000ed0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ed2:	7bfa      	ldrb	r2, [r7, #15]
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	440b      	add	r3, r1
 8000ee0:	3340      	adds	r3, #64	@ 0x40
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ee6:	7bfa      	ldrb	r2, [r7, #15]
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	3344      	adds	r3, #68	@ 0x44
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4613      	mov	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	3348      	adds	r3, #72	@ 0x48
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	334c      	adds	r3, #76	@ 0x4c
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	3301      	adds	r3, #1
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3af      	bcc.n	8000e92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e044      	b.n	8000fc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8000f60:	7bfa      	ldrb	r2, [r7, #15]
 8000f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f90:	7bfa      	ldrb	r2, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d3b5      	bcc.n	8000f38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	687e      	ldr	r6, [r7, #4]
 8000fd4:	466d      	mov	r5, sp
 8000fd6:	f106 0410 	add.w	r4, r6, #16
 8000fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fea:	1d33      	adds	r3, r6, #4
 8000fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f001 ffa8 	bl	8002f44 <USB_DevInit>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00d      	b.n	8001022 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f002 ff32 	bl	8003e84 <USB_DevDisconnect>

  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800102a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <HAL_PCD_Start+0x16>
 800103c:	2302      	movs	r3, #2
 800103e:	e012      	b.n	8001066 <HAL_PCD_Start+0x3c>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f001 ff0d 	bl	8002e6c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fef4 	bl	8003e44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800106e:	b590      	push	{r4, r7, lr}
 8001070:	b08d      	sub	sp, #52	@ 0x34
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f002 ffab 	bl	8003fe0 <USB_GetMode>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	f040 8443 	bne.w	8001918 <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4618      	mov	r0, r3
 8001098:	f002 ff14 	bl	8003ec4 <USB_ReadInterrupts>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8439 	beq.w	8001916 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 ff01 	bl	8003ec4 <USB_ReadInterrupts>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d107      	bne.n	80010dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f002 0202 	and.w	r2, r2, #2
 80010da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 feef 	bl	8003ec4 <USB_ReadInterrupts>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f003 0310 	and.w	r3, r3, #16
 80010ec:	2b10      	cmp	r3, #16
 80010ee:	d161      	bne.n	80011b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	699a      	ldr	r2, [r3, #24]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0210 	bic.w	r2, r2, #16
 80010fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f003 020f 	and.w	r2, r3, #15
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	3304      	adds	r3, #4
 800111e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	0c5b      	lsrs	r3, r3, #17
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	2b02      	cmp	r3, #2
 800112a:	d124      	bne.n	8001176 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d035      	beq.n	80011a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	6a38      	ldr	r0, [r7, #32]
 800114c:	f002 fd2c 	bl	8003ba8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800115c:	441a      	add	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116e:	441a      	add	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	615a      	str	r2, [r3, #20]
 8001174:	e016      	b.n	80011a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	0c5b      	lsrs	r3, r3, #17
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	2b06      	cmp	r3, #6
 8001180:	d110      	bne.n	80011a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001188:	2208      	movs	r2, #8
 800118a:	4619      	mov	r1, r3
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f002 fd0b 	bl	8003ba8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	091b      	lsrs	r3, r3, #4
 800119a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800119e:	441a      	add	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0210 	orr.w	r2, r2, #16
 80011b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f002 fe83 	bl	8003ec4 <USB_ReadInterrupts>
 80011be:	4603      	mov	r3, r0
 80011c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80011c8:	f040 80a7 	bne.w	800131a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f002 fe87 	bl	8003ee8 <USB_ReadDevAllOutEpInterrupt>
 80011da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80011dc:	e099      	b.n	8001312 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 808e 	beq.w	8001306 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fea9 	bl	8003f4c <USB_ReadDevOutEPInterrupt>
 80011fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d00c      	beq.n	8001220 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001208:	015a      	lsls	r2, r3, #5
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	4413      	add	r3, r2
 800120e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001212:	461a      	mov	r2, r3
 8001214:	2301      	movs	r3, #1
 8001216:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fe42 	bl	8001ea4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00c      	beq.n	8001244 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	015a      	lsls	r2, r3, #5
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	4413      	add	r3, r2
 8001232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001236:	461a      	mov	r2, r3
 8001238:	2308      	movs	r3, #8
 800123a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800123c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fe7e 	bl	8001f40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f003 0310 	and.w	r3, r3, #16
 800124a:	2b00      	cmp	r3, #0
 800124c:	d008      	beq.n	8001260 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	015a      	lsls	r2, r3, #5
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	4413      	add	r3, r2
 8001256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800125a:	461a      	mov	r2, r3
 800125c:	2310      	movs	r3, #16
 800125e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d030      	beq.n	80012cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001272:	2b80      	cmp	r3, #128	@ 0x80
 8001274:	d109      	bne.n	800128a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001284:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001288:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800128a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	78db      	ldrb	r3, [r3, #3]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	2200      	movs	r2, #0
 80012ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4619      	mov	r1, r3
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f004 fda5 	bl	8005e04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012bc:	015a      	lsls	r2, r3, #5
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	4413      	add	r3, r2
 80012c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012c6:	461a      	mov	r2, r3
 80012c8:	2302      	movs	r3, #2
 80012ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d008      	beq.n	80012e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d8:	015a      	lsls	r2, r3, #5
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012e2:	461a      	mov	r2, r3
 80012e4:	2320      	movs	r3, #32
 80012e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012fe:	461a      	mov	r2, r3
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	3301      	adds	r3, #1
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800130c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f af62 	bne.w	80011de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fdd0 	bl	8003ec4 <USB_ReadInterrupts>
 8001324:	4603      	mov	r3, r0
 8001326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800132a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800132e:	f040 80a4 	bne.w	800147a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fdef 	bl	8003f1a <USB_ReadDevAllInEpInterrupt>
 800133c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001342:	e096      	b.n	8001472 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 808b 	beq.w	8001466 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fe13 	bl	8003f86 <USB_ReadDevInEPInterrupt>
 8001360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d020      	beq.n	80013ae <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	2201      	movs	r2, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	69f9      	ldr	r1, [r7, #28]
 8001388:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800138c:	4013      	ands	r3, r2
 800138e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800139c:	461a      	mov	r2, r3
 800139e:	2301      	movs	r3, #1
 80013a0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f004 fcb0 	bl	8005d0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	015a      	lsls	r2, r3, #5
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	4413      	add	r3, r2
 80013c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013c4:	461a      	mov	r2, r3
 80013c6:	2308      	movs	r3, #8
 80013c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d008      	beq.n	80013e6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	015a      	lsls	r2, r3, #5
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013e0:	461a      	mov	r2, r3
 80013e2:	2310      	movs	r3, #16
 80013e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	015a      	lsls	r2, r3, #5
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80013fc:	461a      	mov	r2, r3
 80013fe:	2340      	movs	r3, #64	@ 0x40
 8001400:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d023      	beq.n	8001454 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800140c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800140e:	6a38      	ldr	r0, [r7, #32]
 8001410:	f001 feba 	bl	8003188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3338      	adds	r3, #56	@ 0x38
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	78db      	ldrb	r3, [r3, #3]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d108      	bne.n	8001442 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2200      	movs	r2, #0
 8001434:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	b2db      	uxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f004 fcf3 	bl	8005e28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800144e:	461a      	mov	r2, r3
 8001450:	2302      	movs	r3, #2
 8001452:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800145e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fc96 	bl	8001d92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	3301      	adds	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146e:	085b      	lsrs	r3, r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f af65 	bne.w	8001344 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fd20 	bl	8003ec4 <USB_ReadInterrupts>
 8001484:	4603      	mov	r3, r0
 8001486:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800148a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800148e:	d114      	bne.n	80014ba <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f004 fc9f 	bl	8005de8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80014b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 fd00 	bl	8003ec4 <USB_ReadInterrupts>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80014ce:	d112      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f004 fc5b 	bl	8005d9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80014f4:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fce2 	bl	8003ec4 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800150a:	f040 80b5 	bne.w	8001678 <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2110      	movs	r1, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f001 fe2d 	bl	8003188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001532:	e046      	b.n	80015c2 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001546:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001558:	0151      	lsls	r1, r2, #5
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	440a      	add	r2, r1
 800155e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001562:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001566:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001574:	461a      	mov	r2, r3
 8001576:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800157a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800158c:	0151      	lsls	r1, r2, #5
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	440a      	add	r2, r1
 8001592:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800159a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015ac:	0151      	lsls	r1, r2, #5
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	440a      	add	r2, r1
 80015b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80015b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	3301      	adds	r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3b3      	bcc.n	8001534 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80015de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d016      	beq.n	8001616 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015f8:	f043 030b 	orr.w	r3, r3, #11
 80015fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800160e:	f043 030b 	orr.w	r3, r3, #11
 8001612:	6453      	str	r3, [r2, #68]	@ 0x44
 8001614:	e015      	b.n	8001642 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001628:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800162c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800163c:	f043 030b 	orr.w	r3, r3, #11
 8001640:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001650:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001654:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001660:	4619      	mov	r1, r3
 8001662:	4610      	mov	r0, r2
 8001664:	f002 fcec 	bl	8004040 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001676:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f002 fc21 	bl	8003ec4 <USB_ReadInterrupts>
 8001682:	4603      	mov	r3, r0
 8001684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800168c:	d124      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fcb1 	bl	8003ffa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f001 fdef 	bl	8003280 <USB_GetDevSpeed>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681c      	ldr	r4, [r3, #0]
 80016ae:	f001 f9c5 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 80016b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f001 fb39 	bl	8002d34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f004 fb4b 	bl	8005d5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695a      	ldr	r2, [r3, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80016d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 fbf1 	bl	8003ec4 <USB_ReadInterrupts>
 80016e2:	4603      	mov	r3, r0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10a      	bne.n	8001702 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f004 fb28 	bl	8005d42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f002 0208 	and.w	r2, r2, #8
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fbdc 	bl	8003ec4 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001712:	2b80      	cmp	r3, #128	@ 0x80
 8001714:	d122      	bne.n	800175c <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800171e:	6a3b      	ldr	r3, [r7, #32]
 8001720:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001722:	2301      	movs	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	e014      	b.n	8001752 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d105      	bne.n	800174c <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 faf2 	bl	8001d30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	3301      	adds	r3, #1
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001758:	429a      	cmp	r2, r3
 800175a:	d3e5      	bcc.n	8001728 <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fbaf 	bl	8003ec4 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001770:	d13b      	bne.n	80017ea <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	e02b      	b.n	80017d0 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3340      	adds	r3, #64	@ 0x40
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d115      	bne.n	80017ca <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800179e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	da12      	bge.n	80017ca <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	333f      	adds	r3, #63	@ 0x3f
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	4619      	mov	r1, r3
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fab3 	bl	8001d30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	3301      	adds	r3, #1
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d3ce      	bcc.n	8001778 <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80017e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fb68 	bl	8003ec4 <USB_ReadInterrupts>
 80017f4:	4603      	mov	r3, r0
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017fe:	d155      	bne.n	80018ac <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001800:	2301      	movs	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
 8001804:	e045      	b.n	8001892 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	015a      	lsls	r2, r3, #5
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800181a:	4613      	mov	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d12e      	bne.n	800188c <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800182e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	da2b      	bge.n	800188c <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8001840:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001844:	429a      	cmp	r2, r3
 8001846:	d121      	bne.n	800188c <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800184c:	4613      	mov	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001884:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001888:	6053      	str	r3, [r2, #4]
            break;
 800188a:	e007      	b.n	800189c <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	3301      	adds	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001898:	429a      	cmp	r2, r3
 800189a:	d3b4      	bcc.n	8001806 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80018aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fb07 	bl	8003ec4 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c0:	d10a      	bne.n	80018d8 <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f004 fac2 	bl	8005e4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80018d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 faf1 	bl	8003ec4 <USB_ReadInterrupts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d115      	bne.n	8001918 <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fab2 	bl	8005e68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	e000      	b.n	8001918 <HAL_PCD_IRQHandler+0x8aa>
      return;
 8001916:	bf00      	nop
    }
  }
}
 8001918:	3734      	adds	r7, #52	@ 0x34
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}

0800191e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_PCD_SetAddress+0x1a>
 8001934:	2302      	movs	r3, #2
 8001936:	e013      	b.n	8001960 <HAL_PCD_SetAddress+0x42>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f002 fa52 	bl	8003dfa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	803b      	strh	r3, [r7, #0]
 800197e:	4613      	mov	r3, r2
 8001980:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da0f      	bge.n	80019ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 020f 	and.w	r2, r3, #15
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	3338      	adds	r3, #56	@ 0x38
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	3304      	adds	r3, #4
 80019a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	705a      	strb	r2, [r3, #1]
 80019ac:	e00f      	b.n	80019ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ae:	78fb      	ldrb	r3, [r7, #3]
 80019b0:	f003 020f 	and.w	r2, r3, #15
 80019b4:	4613      	mov	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4413      	add	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	3304      	adds	r3, #4
 80019c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80019da:	883a      	ldrh	r2, [r7, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	78ba      	ldrb	r2, [r7, #2]
 80019e4:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	785b      	ldrb	r3, [r3, #1]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80019f8:	78bb      	ldrb	r3, [r7, #2]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d102      	bne.n	8001a04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_PCD_EP_Open+0xaa>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e00e      	b.n	8001a30 <HAL_PCD_EP_Open+0xc8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f001 fc4b 	bl	80032bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	da0f      	bge.n	8001a6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	f003 020f 	and.w	r2, r3, #15
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3338      	adds	r3, #56	@ 0x38
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	705a      	strb	r2, [r3, #1]
 8001a6a:	e00f      	b.n	8001a8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	3304      	adds	r3, #4
 8001a84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_PCD_EP_Close+0x6e>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e00e      	b.n	8001ac4 <HAL_PCD_EP_Close+0x8c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fc87 	bl	80033c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001adc:	7afb      	ldrb	r3, [r7, #11]
 8001ade:	f003 020f 	and.w	r2, r3, #15
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6979      	ldr	r1, [r7, #20]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 fd2d 	bl	8003580 <USB_EPStartXfer>

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	f003 020f 	and.w	r2, r3, #15
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8001b52:	681b      	ldr	r3, [r3, #0]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	f003 020f 	and.w	r2, r3, #15
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	3338      	adds	r3, #56	@ 0x38
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6979      	ldr	r1, [r7, #20]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f001 fce5 	bl	8003580 <USB_EPStartXfer>

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	f003 020f 	and.w	r2, r3, #15
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d901      	bls.n	8001bde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e04e      	b.n	8001c7c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da0f      	bge.n	8001c06 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	3338      	adds	r3, #56	@ 0x38
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2201      	movs	r2, #1
 8001c02:	705a      	strb	r2, [r3, #1]
 8001c04:	e00d      	b.n	8001c22 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	3304      	adds	r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_PCD_EP_SetStall+0x82>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e01c      	b.n	8001c7c <HAL_PCD_EP_SetStall+0xbc>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68f9      	ldr	r1, [r7, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 f800 	bl	8003c56 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d108      	bne.n	8001c72 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f002 f9e7 	bl	8004040 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 020f 	and.w	r2, r3, #15
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d901      	bls.n	8001ca2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e042      	b.n	8001d28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ca2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da0f      	bge.n	8001cca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001caa:	78fb      	ldrb	r3, [r7, #3]
 8001cac:	f003 020f 	and.w	r2, r3, #15
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	3338      	adds	r3, #56	@ 0x38
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	705a      	strb	r2, [r3, #1]
 8001cc8:	e00f      	b.n	8001cea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_PCD_EP_ClrStall+0x86>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e00e      	b.n	8001d28 <HAL_PCD_EP_ClrStall+0xa4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68f9      	ldr	r1, [r7, #12]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 f809 	bl	8003d30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da0c      	bge.n	8001d5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3338      	adds	r3, #56	@ 0x38
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e00c      	b.n	8001d78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fe30 	bl	80039e4 <USB_EPStopXfer>
 8001d84:	4603      	mov	r3, r0
 8001d86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001d88:	7afb      	ldrb	r3, [r7, #11]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b088      	sub	sp, #32
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	3338      	adds	r3, #56	@ 0x38
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d901      	bls.n	8001dca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e067      	b.n	8001e9a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	69fa      	ldr	r2, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d902      	bls.n	8001de6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3303      	adds	r3, #3
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dee:	e026      	b.n	8001e3e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691a      	ldr	r2, [r3, #16]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d902      	bls.n	8001e0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3303      	adds	r3, #3
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	68d9      	ldr	r1, [r3, #12]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f001 fe88 	bl	8003b36 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	695a      	ldr	r2, [r3, #20]
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	441a      	add	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d809      	bhi.n	8001e68 <PCD_WriteEmptyTxFifo+0xd6>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d203      	bcs.n	8001e68 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1c3      	bne.n	8001df0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d811      	bhi.n	8001e98 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	6939      	ldr	r1, [r7, #16]
 8001e90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e94:	4013      	ands	r3, r2
 8001e96:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	333c      	adds	r3, #60	@ 0x3c
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a19      	ldr	r2, [pc, #100]	@ (8001f3c <PCD_EP_OutXfrComplete_int+0x98>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d124      	bne.n	8001f24 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ef6:	6093      	str	r3, [r2, #8]
 8001ef8:	e01a      	b.n	8001f30 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f003 0320 	and.w	r3, r3, #32
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	015a      	lsls	r2, r3, #5
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f10:	461a      	mov	r2, r3
 8001f12:	2320      	movs	r3, #32
 8001f14:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f003 fedb 	bl	8005cd8 <HAL_PCD_DataOutStageCallback>
 8001f22:	e005      	b.n	8001f30 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f003 fed4 	bl	8005cd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	4f54310a 	.word	0x4f54310a

08001f40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	333c      	adds	r3, #60	@ 0x3c
 8001f58:	3304      	adds	r3, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <PCD_EP_OutSetupPacket_int+0x64>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d90e      	bls.n	8001f94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f003 fe8d 	bl	8005cb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	4f54300a 	.word	0x4f54300a

08001fa8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001fc6:	883b      	ldrh	r3, [r7, #0]
 8001fc8:	0419      	lsls	r1, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fd4:	e028      	b.n	8002028 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fdc:	0c1b      	lsrs	r3, r3, #16
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e00d      	b.n	8002006 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	3340      	adds	r3, #64	@ 0x40
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	0c1b      	lsrs	r3, r3, #16
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3301      	adds	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	3b01      	subs	r3, #1
 800200c:	429a      	cmp	r2, r3
 800200e:	d3ec      	bcc.n	8001fea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002010:	883b      	ldrh	r3, [r7, #0]
 8002012:	0418      	lsls	r0, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6819      	ldr	r1, [r3, #0]
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	3b01      	subs	r3, #1
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	4302      	orrs	r2, r0
 8002020:	3340      	adds	r3, #64	@ 0x40
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	887a      	ldrh	r2, [r7, #2]
 8002046:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e304      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 8087 	beq.w	8002182 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002074:	4b92      	ldr	r3, [pc, #584]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b04      	cmp	r3, #4
 800207e:	d00c      	beq.n	800209a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002080:	4b8f      	ldr	r3, [pc, #572]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 030c 	and.w	r3, r3, #12
 8002088:	2b08      	cmp	r3, #8
 800208a:	d112      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
 800208c:	4b8c      	ldr	r3, [pc, #560]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002098:	d10b      	bne.n	80020b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	4b89      	ldr	r3, [pc, #548]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d06c      	beq.n	8002180 <HAL_RCC_OscConfig+0x12c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d168      	bne.n	8002180 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e2de      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x76>
 80020bc:	4b80      	ldr	r3, [pc, #512]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a7f      	ldr	r2, [pc, #508]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e02e      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b7b      	ldr	r3, [pc, #492]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7a      	ldr	r2, [pc, #488]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b78      	ldr	r3, [pc, #480]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a77      	ldr	r2, [pc, #476]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e01d      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0xbc>
 80020f6:	4b72      	ldr	r3, [pc, #456]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a71      	ldr	r2, [pc, #452]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b6f      	ldr	r3, [pc, #444]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a6e      	ldr	r2, [pc, #440]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e00b      	b.n	8002128 <HAL_RCC_OscConfig+0xd4>
 8002110:	4b6b      	ldr	r3, [pc, #428]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a6a      	ldr	r2, [pc, #424]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b68      	ldr	r3, [pc, #416]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a67      	ldr	r2, [pc, #412]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002122:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002126:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7fe fb9e 	bl	8000870 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe fb9a 	bl	8000870 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	@ 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e292      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800214a:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0xe4>
 8002156:	e014      	b.n	8002182 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fb8a 	bl	8000870 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7fe fb86 	bl	8000870 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	@ 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e27e      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002172:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f0      	bne.n	8002160 <HAL_RCC_OscConfig+0x10c>
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d063      	beq.n	8002256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	4b4c      	ldr	r3, [pc, #304]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00b      	beq.n	80021b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d11c      	bne.n	80021e0 <HAL_RCC_OscConfig+0x18c>
 80021a6:	4b46      	ldr	r3, [pc, #280]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_RCC_OscConfig+0x176>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d001      	beq.n	80021ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e252      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ca:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4939      	ldr	r1, [pc, #228]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021de:	e03a      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d020      	beq.n	800222a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e8:	4b36      	ldr	r3, [pc, #216]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fb3f 	bl	8000870 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f6:	f7fe fb3b 	bl	8000870 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e233      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002208:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b2a      	ldr	r3, [pc, #168]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4927      	ldr	r1, [pc, #156]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	e015      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800222a:	4b26      	ldr	r3, [pc, #152]	@ (80022c4 <HAL_RCC_OscConfig+0x270>)
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7fe fb1e 	bl	8000870 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7fe fb1a 	bl	8000870 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e212      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03a      	beq.n	80022d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d019      	beq.n	800229e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_RCC_OscConfig+0x274>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002270:	f7fe fafe 	bl	8000870 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002278:	f7fe fafa 	bl	8000870 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1f2      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <HAL_RCC_OscConfig+0x26c>)
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002296:	2001      	movs	r0, #1
 8002298:	f000 fbda 	bl	8002a50 <RCC_Delay>
 800229c:	e01c      	b.n	80022d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <HAL_RCC_OscConfig+0x274>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7fe fae4 	bl	8000870 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022aa:	e00f      	b.n	80022cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fae0 	bl	8000870 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d908      	bls.n	80022cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1d8      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	42420000 	.word	0x42420000
 80022c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b9b      	ldr	r3, [pc, #620]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e9      	bne.n	80022ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a6 	beq.w	8002432 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b94      	ldr	r3, [pc, #592]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10d      	bne.n	8002312 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4b91      	ldr	r3, [pc, #580]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a90      	ldr	r2, [pc, #576]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
 8002302:	4b8e      	ldr	r3, [pc, #568]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230e:	2301      	movs	r3, #1
 8002310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <HAL_RCC_OscConfig+0x4ec>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x4ec>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a87      	ldr	r2, [pc, #540]	@ (8002540 <HAL_RCC_OscConfig+0x4ec>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232a:	f7fe faa1 	bl	8000870 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe fa9d 	bl	8000870 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	@ 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e195      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b7e      	ldr	r3, [pc, #504]	@ (8002540 <HAL_RCC_OscConfig+0x4ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x312>
 8002358:	4b78      	ldr	r3, [pc, #480]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a77      	ldr	r2, [pc, #476]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	e02d      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x334>
 800236e:	4b73      	ldr	r3, [pc, #460]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a72      	ldr	r2, [pc, #456]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4b70      	ldr	r3, [pc, #448]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4a6f      	ldr	r2, [pc, #444]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	e01c      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b05      	cmp	r3, #5
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x356>
 8002390:	4b6a      	ldr	r3, [pc, #424]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a69      	ldr	r2, [pc, #420]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	4b67      	ldr	r3, [pc, #412]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a66      	ldr	r2, [pc, #408]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	e00b      	b.n	80023c2 <HAL_RCC_OscConfig+0x36e>
 80023aa:	4b64      	ldr	r3, [pc, #400]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a63      	ldr	r2, [pc, #396]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	6213      	str	r3, [r2, #32]
 80023b6:	4b61      	ldr	r3, [pc, #388]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	4a60      	ldr	r2, [pc, #384]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023bc:	f023 0304 	bic.w	r3, r3, #4
 80023c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d015      	beq.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fa51 	bl	8000870 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d2:	f7fe fa4d 	bl	8000870 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e143      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e8:	4b54      	ldr	r3, [pc, #336]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ee      	beq.n	80023d2 <HAL_RCC_OscConfig+0x37e>
 80023f4:	e014      	b.n	8002420 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fa3b 	bl	8000870 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023fc:	e00a      	b.n	8002414 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fe:	f7fe fa37 	bl	8000870 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240c:	4293      	cmp	r3, r2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e12d      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002414:	4b49      	ldr	r3, [pc, #292]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1ee      	bne.n	80023fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d105      	bne.n	8002432 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002426:	4b45      	ldr	r3, [pc, #276]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a44      	ldr	r2, [pc, #272]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800242c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 808c 	beq.w	8002554 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800243c:	4b3f      	ldr	r3, [pc, #252]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002448:	d10e      	bne.n	8002468 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002452:	2b08      	cmp	r3, #8
 8002454:	d108      	bne.n	8002468 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002456:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e103      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246c:	2b02      	cmp	r3, #2
 800246e:	d14e      	bne.n	800250e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0ef      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002490:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_RCC_OscConfig+0x4f0>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002496:	f7fe f9eb 	bl	8000870 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800249e:	f7fe f9e7 	bl	8000870 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b64      	cmp	r3, #100	@ 0x64
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0df      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80024b0:	4b22      	ldr	r3, [pc, #136]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80024bc:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	491c      	ldr	r1, [pc, #112]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4918      	ldr	r1, [pc, #96]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <HAL_RCC_OscConfig+0x4f0>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe f9c3 	bl	8000870 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80024ee:	f7fe f9bf 	bl	8000870 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	@ 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e0b7      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002500:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x49a>
 800250c:	e022      	b.n	8002554 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002512:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <HAL_RCC_OscConfig+0x4e8>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002518:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800251a:	4b0a      	ldr	r3, [pc, #40]	@ (8002544 <HAL_RCC_OscConfig+0x4f0>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe f9a6 	bl	8000870 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002526:	e00f      	b.n	8002548 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002528:	f7fe f9a2 	bl	8000870 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d908      	bls.n	8002548 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e09a      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40007000 	.word	0x40007000
 8002544:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002548:	4b4b      	ldr	r3, [pc, #300]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e9      	bne.n	8002528 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8088 	beq.w	800266e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255e:	4b46      	ldr	r3, [pc, #280]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d068      	beq.n	800263c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d14d      	bne.n	800260e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_RCC_OscConfig+0x628>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7fe f97a 	bl	8000870 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe f976 	bl	8000870 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e06e      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002592:	4b39      	ldr	r3, [pc, #228]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025a6:	d10f      	bne.n	80025c8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80025a8:	4b33      	ldr	r3, [pc, #204]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4931      	ldr	r1, [pc, #196]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b30      	ldr	r3, [pc, #192]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ba:	f023 020f 	bic.w	r2, r3, #15
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	492d      	ldr	r1, [pc, #180]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d8:	430b      	orrs	r3, r1
 80025da:	4927      	ldr	r1, [pc, #156]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_RCC_OscConfig+0x628>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe f943 	bl	8000870 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe f93f 	bl	8000870 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e037      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x59a>
 800260c:	e02f      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_OscConfig+0x628>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe f92c 	bl	8000870 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe f928 	bl	8000870 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e020      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x5c8>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e013      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_RCC_OscConfig+0x624>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	42420060 	.word	0x42420060

08002680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0d0      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b6a      	ldr	r3, [pc, #424]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d910      	bls.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b67      	ldr	r3, [pc, #412]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4965      	ldr	r1, [pc, #404]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b2:	4b63      	ldr	r3, [pc, #396]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0b8      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d020      	beq.n	8002712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026dc:	4b59      	ldr	r3, [pc, #356]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0308 	and.w	r3, r3, #8
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d005      	beq.n	8002700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f4:	4b53      	ldr	r3, [pc, #332]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002700:	4b50      	ldr	r3, [pc, #320]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	494d      	ldr	r1, [pc, #308]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d040      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002726:	4b47      	ldr	r3, [pc, #284]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d115      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e07f      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d107      	bne.n	800274e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	4b41      	ldr	r3, [pc, #260]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e073      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274e:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06b      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275e:	4b39      	ldr	r3, [pc, #228]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f023 0203 	bic.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	4936      	ldr	r1, [pc, #216]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002770:	f7fe f87e 	bl	8000870 <HAL_GetTick>
 8002774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7fe f87a 	bl	8000870 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e053      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278e:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 020c 	and.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	429a      	cmp	r2, r3
 800279e:	d1eb      	bne.n	8002778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d210      	bcs.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b24      	ldr	r3, [pc, #144]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	4922      	ldr	r1, [pc, #136]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b20      	ldr	r3, [pc, #128]	@ (8002840 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e032      	b.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	4b19      	ldr	r3, [pc, #100]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	4916      	ldr	r1, [pc, #88]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	490e      	ldr	r1, [pc, #56]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800280e:	f000 f859 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002812:	4602      	mov	r2, r0
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	490a      	ldr	r1, [pc, #40]	@ (8002848 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	5ccb      	ldrb	r3, [r1, r3]
 8002822:	fa22 f303 	lsr.w	r3, r2, r3
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_RCC_ClockConfig+0x1d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd ffdc 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40022000 	.word	0x40022000
 8002844:	40021000 	.word	0x40021000
 8002848:	080062cc 	.word	0x080062cc
 800284c:	20000000 	.word	0x20000000
 8002850:	20000004 	.word	0x20000004

08002854 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	@ 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002860:	f107 0318 	add.w	r3, r7, #24
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002872:	2303      	movs	r3, #3
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800287a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002880:	4b0e      	ldr	r3, [pc, #56]	@ (80028bc <HAL_RCC_MCOConfig+0x68>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a0d      	ldr	r2, [pc, #52]	@ (80028bc <HAL_RCC_MCOConfig+0x68>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_MCOConfig+0x68>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002898:	f107 0318 	add.w	r3, r7, #24
 800289c:	4619      	mov	r1, r3
 800289e:	4808      	ldr	r0, [pc, #32]	@ (80028c0 <HAL_RCC_MCOConfig+0x6c>)
 80028a0:	f7fe f922 	bl	8000ae8 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028a4:	4b05      	ldr	r3, [pc, #20]	@ (80028bc <HAL_RCC_MCOConfig+0x68>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80028ac:	4903      	ldr	r1, [pc, #12]	@ (80028bc <HAL_RCC_MCOConfig+0x68>)
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
}
 80028b4:	bf00      	nop
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010800 	.word	0x40010800

080028c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c8:	b08e      	sub	sp, #56	@ 0x38
 80028ca:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028d0:	2300      	movs	r3, #0
 80028d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028e8:	4b4e      	ldr	r3, [pc, #312]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	f003 030c 	and.w	r3, r3, #12
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d002      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x3a>
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d003      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	e089      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002902:	e089      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002906:	0c9b      	lsrs	r3, r3, #18
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x168>)
 800290e:	5c9b      	ldrb	r3, [r3, r2]
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d072      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800291c:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4b42      	ldr	r3, [pc, #264]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800292a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d053      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002936:	4b3b      	ldr	r3, [pc, #236]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 030f 	and.w	r3, r3, #15
 8002940:	3301      	adds	r3, #1
 8002942:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002944:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x160>)
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	3302      	adds	r3, #2
 8002950:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2200      	movs	r2, #0
 8002956:	469a      	mov	sl, r3
 8002958:	4693      	mov	fp, r2
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	2200      	movs	r2, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	617a      	str	r2, [r7, #20]
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	fb03 f20b 	mul.w	r2, r3, fp
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fb0a f303 	mul.w	r3, sl, r3
 800296e:	4413      	add	r3, r2
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	fbaa 0102 	umull	r0, r1, sl, r2
 8002976:	440b      	add	r3, r1
 8002978:	4619      	mov	r1, r3
 800297a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 800297c:	fb03 f201 	mul.w	r2, r3, r1
 8002980:	2300      	movs	r3, #0
 8002982:	fb00 f303 	mul.w	r3, r0, r3
 8002986:	4413      	add	r3, r2
 8002988:	4a27      	ldr	r2, [pc, #156]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 800298a:	fba0 4502 	umull	r4, r5, r0, r2
 800298e:	442b      	add	r3, r5
 8002990:	461d      	mov	r5, r3
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	2200      	movs	r2, #0
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	60fa      	str	r2, [r7, #12]
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	2200      	movs	r2, #0
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a6:	460b      	mov	r3, r1
 80029a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029ac:	4652      	mov	r2, sl
 80029ae:	fb02 f203 	mul.w	r2, r2, r3
 80029b2:	465b      	mov	r3, fp
 80029b4:	4684      	mov	ip, r0
 80029b6:	fb0c f303 	mul.w	r3, ip, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	4602      	mov	r2, r0
 80029be:	4651      	mov	r1, sl
 80029c0:	fba2 8901 	umull	r8, r9, r2, r1
 80029c4:	444b      	add	r3, r9
 80029c6:	4699      	mov	r9, r3
 80029c8:	4642      	mov	r2, r8
 80029ca:	464b      	mov	r3, r9
 80029cc:	4620      	mov	r0, r4
 80029ce:	4629      	mov	r1, r5
 80029d0:	f7fd fc28 	bl	8000224 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4613      	mov	r3, r2
 80029da:	637b      	str	r3, [r7, #52]	@ 0x34
 80029dc:	e007      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x164>)
 80029e2:	fb03 f202 	mul.w	r2, r3, r2
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80029ee:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0x168>)
 80029f0:	7b5b      	ldrb	r3, [r3, #13]
 80029f2:	461a      	mov	r2, r3
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80029fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029fc:	085b      	lsrs	r3, r3, #1
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a00:	e004      	b.n	8002a0c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	4a0b      	ldr	r2, [pc, #44]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x170>)
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a10:	e002      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x174>)
 8002a14:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3738      	adds	r7, #56	@ 0x38
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a24:	40021000 	.word	0x40021000
 8002a28:	017d7840 	.word	0x017d7840
 8002a2c:	080062dc 	.word	0x080062dc
 8002a30:	080062ec 	.word	0x080062ec
 8002a34:	003d0900 	.word	0x003d0900
 8002a38:	007a1200 	.word	0x007a1200

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b02      	ldr	r3, [pc, #8]	@ (8002a4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20000000 	.word	0x20000000

08002a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a58:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <RCC_Delay+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <RCC_Delay+0x38>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a6c:	bf00      	nop
  }
  while (Delay --);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1e5a      	subs	r2, r3, #1
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f9      	bne.n	8002a6c <RCC_Delay+0x1c>
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	20000000 	.word	0x20000000
 8002a88:	10624dd3 	.word	0x10624dd3

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d07d      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8002aac:	2300      	movs	r3, #0
 8002aae:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002abc:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a87      	ldr	r2, [pc, #540]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	61d3      	str	r3, [r2, #28]
 8002ac8:	4b85      	ldr	r3, [pc, #532]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad8:	4b82      	ldr	r3, [pc, #520]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d118      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af0:	f7fd febe 	bl	8000870 <HAL_GetTick>
 8002af4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af6:	e008      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af8:	f7fd feba 	bl	8000870 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	@ 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e0e5      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b16:	4b72      	ldr	r3, [pc, #456]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b1e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02e      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d027      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b34:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b44:	4b68      	ldr	r3, [pc, #416]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b4a:	4a65      	ldr	r2, [pc, #404]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fd fe89 	bl	8000870 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fd fe85 	bl	8000870 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e0ae      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	4b59      	ldr	r3, [pc, #356]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b84:	4b56      	ldr	r3, [pc, #344]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4953      	ldr	r1, [pc, #332]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b96:	7efb      	ldrb	r3, [r7, #27]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	4947      	ldr	r1, [pc, #284]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002bd2:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4940      	ldr	r1, [pc, #256]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4938      	ldr	r1, [pc, #224]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002c02:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002c0e:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d148      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002c24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d138      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002c3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e042      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002c50:	4b23      	ldr	r3, [pc, #140]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4920      	ldr	r1, [pc, #128]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002c62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	491c      	ldr	r1, [pc, #112]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002c74:	4b1d      	ldr	r3, [pc, #116]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fd fdf9 	bl	8000870 <HAL_GetTick>
 8002c7e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c82:	f7fd fdf5 	bl	8000870 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b64      	cmp	r3, #100	@ 0x64
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e020      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c94:	4b12      	ldr	r3, [pc, #72]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002ca0:	e009      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d001      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc2:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4904      	ldr	r1, [pc, #16]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3720      	adds	r7, #32
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	42420440 	.word	0x42420440
 8002cec:	42420070 	.word	0x42420070

08002cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b084      	sub	sp, #16
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	f107 001c 	add.w	r0, r7, #28
 8002cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f001 f9de 	bl	80040d0 <USB_CoreReset>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d30:	b004      	add	sp, #16
 8002d32:	4770      	bx	lr

08002d34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d42:	79fb      	ldrb	r3, [r7, #7]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d165      	bne.n	8002e14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e44 <USB_SetTurnaroundTime+0x110>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d906      	bls.n	8002d5e <USB_SetTurnaroundTime+0x2a>
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4a3d      	ldr	r2, [pc, #244]	@ (8002e48 <USB_SetTurnaroundTime+0x114>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d202      	bcs.n	8002d5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d58:	230f      	movs	r3, #15
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e05c      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4a39      	ldr	r2, [pc, #228]	@ (8002e48 <USB_SetTurnaroundTime+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d306      	bcc.n	8002d74 <USB_SetTurnaroundTime+0x40>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	4a38      	ldr	r2, [pc, #224]	@ (8002e4c <USB_SetTurnaroundTime+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d202      	bcs.n	8002d74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d6e:	230e      	movs	r3, #14
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e051      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a35      	ldr	r2, [pc, #212]	@ (8002e4c <USB_SetTurnaroundTime+0x118>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d306      	bcc.n	8002d8a <USB_SetTurnaroundTime+0x56>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a34      	ldr	r2, [pc, #208]	@ (8002e50 <USB_SetTurnaroundTime+0x11c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d202      	bcs.n	8002d8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d84:	230d      	movs	r3, #13
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e046      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4a30      	ldr	r2, [pc, #192]	@ (8002e50 <USB_SetTurnaroundTime+0x11c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d306      	bcc.n	8002da0 <USB_SetTurnaroundTime+0x6c>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a2f      	ldr	r2, [pc, #188]	@ (8002e54 <USB_SetTurnaroundTime+0x120>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d802      	bhi.n	8002da0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e03b      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <USB_SetTurnaroundTime+0x120>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d906      	bls.n	8002db6 <USB_SetTurnaroundTime+0x82>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	@ (8002e58 <USB_SetTurnaroundTime+0x124>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d802      	bhi.n	8002db6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002db0:	230b      	movs	r3, #11
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e030      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4a27      	ldr	r2, [pc, #156]	@ (8002e58 <USB_SetTurnaroundTime+0x124>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d906      	bls.n	8002dcc <USB_SetTurnaroundTime+0x98>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a26      	ldr	r2, [pc, #152]	@ (8002e5c <USB_SetTurnaroundTime+0x128>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d802      	bhi.n	8002dcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e025      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <USB_SetTurnaroundTime+0x128>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d906      	bls.n	8002de2 <USB_SetTurnaroundTime+0xae>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	@ (8002e60 <USB_SetTurnaroundTime+0x12c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d202      	bcs.n	8002de2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ddc:	2309      	movs	r3, #9
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e01a      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e60 <USB_SetTurnaroundTime+0x12c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d306      	bcc.n	8002df8 <USB_SetTurnaroundTime+0xc4>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <USB_SetTurnaroundTime+0x130>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002df2:	2308      	movs	r3, #8
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e00f      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002e64 <USB_SetTurnaroundTime+0x130>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d906      	bls.n	8002e0e <USB_SetTurnaroundTime+0xda>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <USB_SetTurnaroundTime+0x134>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d202      	bcs.n	8002e0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e08:	2307      	movs	r3, #7
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e004      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e0e:	2306      	movs	r3, #6
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e001      	b.n	8002e18 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e14:	2309      	movs	r3, #9
 8002e16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	029b      	lsls	r3, r3, #10
 8002e2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	371c      	adds	r7, #28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	00d8acbf 	.word	0x00d8acbf
 8002e48:	00e4e1c0 	.word	0x00e4e1c0
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	01067380 	.word	0x01067380
 8002e54:	011a499f 	.word	0x011a499f
 8002e58:	01312cff 	.word	0x01312cff
 8002e5c:	014ca43f 	.word	0x014ca43f
 8002e60:	016e3600 	.word	0x016e3600
 8002e64:	01a6ab1f 	.word	0x01a6ab1f
 8002e68:	01e84800 	.word	0x01e84800

08002e6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 0201 	bic.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d115      	bne.n	8002efa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7fd fcd2 	bl	8000884 <HAL_Delay>
      ms++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f001 f87a 	bl	8003fe0 <USB_GetMode>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d01e      	beq.n	8002f30 <USB_SetCurrentMode+0x84>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b31      	cmp	r3, #49	@ 0x31
 8002ef6:	d9f0      	bls.n	8002eda <USB_SetCurrentMode+0x2e>
 8002ef8:	e01a      	b.n	8002f30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d115      	bne.n	8002f2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7fd fcb9 	bl	8000884 <HAL_Delay>
      ms++;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	3301      	adds	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f001 f861 	bl	8003fe0 <USB_GetMode>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <USB_SetCurrentMode+0x84>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b31      	cmp	r3, #49	@ 0x31
 8002f28:	d9f0      	bls.n	8002f0c <USB_SetCurrentMode+0x60>
 8002f2a:	e001      	b.n	8002f30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e005      	b.n	8002f3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b32      	cmp	r3, #50	@ 0x32
 8002f34:	d101      	bne.n	8002f3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f44:	b084      	sub	sp, #16
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e009      	b.n	8002f78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3340      	adds	r3, #64	@ 0x40
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3301      	adds	r3, #1
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b0e      	cmp	r3, #14
 8002f7c:	d9f2      	bls.n	8002f64 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002f90:	461a      	mov	r2, r3
 8002f92:	2300      	movs	r3, #0
 8002f94:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f96:	2103      	movs	r1, #3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f959 	bl	8003250 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8f1 	bl	8003188 <USB_FlushTxFifo>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f91d 	bl	80031f0 <USB_FlushRxFifo>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2300      	movs	r3, #0
 8002fca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	e043      	b.n	8003072 <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003000:	d118      	bne.n	8003034 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	e013      	b.n	8003046 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800302a:	461a      	mov	r2, r3
 800302c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e008      	b.n	8003046 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003052:	461a      	mov	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003064:	461a      	mov	r2, r3
 8003066:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800306a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3301      	adds	r3, #1
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	429a      	cmp	r2, r3
 8003078:	d3b7      	bcc.n	8002fea <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	e043      	b.n	8003108 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003096:	d118      	bne.n	80030ca <USB_DevInit+0x186>
    {
      if (i == 0U)
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e013      	b.n	80030dc <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030c0:	461a      	mov	r2, r3
 80030c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e008      	b.n	80030dc <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030d6:	461a      	mov	r2, r3
 80030d8:	2300      	movs	r3, #0
 80030da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	2300      	movs	r3, #0
 80030ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fa:	461a      	mov	r2, r3
 80030fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3301      	adds	r3, #1
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	429a      	cmp	r2, r3
 800310e:	d3b7      	bcc.n	8003080 <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800311e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003122:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003130:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f043 0210 	orr.w	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <USB_DevInit+0x240>)
 8003144:	4313      	orrs	r3, r2
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800314a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f043 0208 	orr.w	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800315c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003172:	7dfb      	ldrb	r3, [r7, #23]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800317e:	b004      	add	sp, #16
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	803c3800 	.word	0x803c3800

08003188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3301      	adds	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4a13      	ldr	r2, [pc, #76]	@ (80031ec <USB_FlushTxFifo+0x64>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e01b      	b.n	80031e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	daf2      	bge.n	8003196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	019b      	lsls	r3, r3, #6
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <USB_FlushTxFifo+0x64>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e006      	b.n	80031e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b20      	cmp	r3, #32
 80031dc:	d0f0      	beq.n	80031c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	00030d40 	.word	0x00030d40

080031f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3301      	adds	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4a11      	ldr	r2, [pc, #68]	@ (800324c <USB_FlushRxFifo+0x5c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e018      	b.n	8003240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	daf2      	bge.n	80031fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2210      	movs	r2, #16
 800321e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3301      	adds	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a08      	ldr	r2, [pc, #32]	@ (800324c <USB_FlushRxFifo+0x5c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e006      	b.n	8003240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b10      	cmp	r3, #16
 800323c:	d0f0      	beq.n	8003220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	00030d40 	.word	0x00030d40

08003250 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	68f9      	ldr	r1, [r7, #12]
 800326c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0306 	and.w	r3, r3, #6
 8003298:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d002      	beq.n	80032a6 <USB_GetDevSpeed+0x26>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d102      	bne.n	80032ac <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80032a6:	2302      	movs	r3, #2
 80032a8:	75fb      	strb	r3, [r7, #23]
 80032aa:	e001      	b.n	80032b0 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80032ac:	230f      	movs	r3, #15
 80032ae:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d13a      	bne.n	800334e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2101      	movs	r1, #1
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	68f9      	ldr	r1, [r7, #12]
 80032f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032f6:	4313      	orrs	r3, r2
 80032f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d155      	bne.n	80033bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	791b      	ldrb	r3, [r3, #4]
 800332a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800332c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	059b      	lsls	r3, r3, #22
 8003332:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003334:	4313      	orrs	r3, r2
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	0151      	lsls	r1, r2, #5
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	440a      	add	r2, r1
 800333e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003346:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	e036      	b.n	80033bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	041b      	lsls	r3, r3, #16
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	015a      	lsls	r2, r3, #5
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d11a      	bne.n	80033bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	791b      	ldrb	r3, [r3, #4]
 80033a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80033a2:	430b      	orrs	r3, r1
 80033a4:	4313      	orrs	r3, r2
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	0151      	lsls	r1, r2, #5
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	440a      	add	r2, r1
 80033ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d161      	bne.n	80034a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033fa:	d11f      	bne.n	800343c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	0151      	lsls	r1, r2, #5
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	440a      	add	r2, r1
 8003412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003416:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800341a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	440a      	add	r2, r1
 8003432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800343a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003442:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2101      	movs	r1, #1
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	b29b      	uxth	r3, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	68f9      	ldr	r1, [r7, #12]
 8003458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800345c:	4013      	ands	r3, r2
 800345e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003466:	69da      	ldr	r2, [r3, #28]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f303 	lsl.w	r3, r1, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	68f9      	ldr	r1, [r7, #12]
 800347c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003480:	4013      	ands	r3, r2
 8003482:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4413      	add	r3, r2
 800348c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	0159      	lsls	r1, r3, #5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	440b      	add	r3, r1
 800349a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800349e:	4619      	mov	r1, r3
 80034a0:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <USB_DeactivateEndpoint+0x1b0>)
 80034a2:	4013      	ands	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
 80034a6:	e060      	b.n	800356a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034be:	d11f      	bne.n	8003500 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	0151      	lsls	r1, r2, #5
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	440a      	add	r2, r1
 80034f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	2101      	movs	r1, #1
 8003512:	fa01 f303 	lsl.w	r3, r1, r3
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	43db      	mvns	r3, r3
 800351a:	68f9      	ldr	r1, [r7, #12]
 800351c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003520:	4013      	ands	r3, r2
 8003522:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800352a:	69da      	ldr	r2, [r3, #28]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	2101      	movs	r1, #1
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	43db      	mvns	r3, r3
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003544:	4013      	ands	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0159      	lsls	r1, r3, #5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	440b      	add	r3, r1
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	4619      	mov	r1, r3
 8003564:	4b05      	ldr	r3, [pc, #20]	@ (800357c <USB_DeactivateEndpoint+0x1b4>)
 8003566:	4013      	ands	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	ec337800 	.word	0xec337800
 800357c:	eff37800 	.word	0xeff37800

08003580 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b01      	cmp	r3, #1
 800359a:	f040 8128 	bne.w	80037ee <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d132      	bne.n	800360c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80035c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80035c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	0151      	lsls	r1, r2, #5
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	440a      	add	r2, r1
 80035e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003604:	0cdb      	lsrs	r3, r3, #19
 8003606:	04db      	lsls	r3, r3, #19
 8003608:	6113      	str	r3, [r2, #16]
 800360a:	e092      	b.n	8003732 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	0151      	lsls	r1, r2, #5
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	440a      	add	r2, r1
 8003622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003626:	0cdb      	lsrs	r3, r3, #19
 8003628:	04db      	lsls	r3, r3, #19
 800362a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	0151      	lsls	r1, r2, #5
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	440a      	add	r2, r1
 8003642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003646:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800364a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800364e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11a      	bne.n	800368c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	691a      	ldr	r2, [r3, #16]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d903      	bls.n	800366a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	440a      	add	r2, r1
 8003680:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003684:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003688:	6113      	str	r3, [r2, #16]
 800368a:	e01b      	b.n	80036c4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003698:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6919      	ldr	r1, [r3, #16]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	440b      	add	r3, r1
 80036a4:	1e59      	subs	r1, r3, #1
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036b0:	4b8d      	ldr	r3, [pc, #564]	@ (80038e8 <USB_EPStartXfer+0x368>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6939      	ldr	r1, [r7, #16]
 80036b6:	0148      	lsls	r0, r1, #5
 80036b8:	6979      	ldr	r1, [r7, #20]
 80036ba:	4401      	add	r1, r0
 80036bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	6939      	ldr	r1, [r7, #16]
 80036dc:	0148      	lsls	r0, r1, #5
 80036de:	6979      	ldr	r1, [r7, #20]
 80036e0:	4401      	add	r1, r0
 80036e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80036e6:	4313      	orrs	r3, r2
 80036e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	791b      	ldrb	r3, [r3, #4]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d11f      	bne.n	8003732 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	015a      	lsls	r2, r3, #5
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	4413      	add	r3, r2
 80036fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	0151      	lsls	r1, r2, #5
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	440a      	add	r2, r1
 8003708:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800370c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003710:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	0151      	lsls	r1, r2, #5
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	440a      	add	r2, r1
 8003728:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800372c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003730:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	0151      	lsls	r1, r2, #5
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	440a      	add	r2, r1
 8003748:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800374c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003750:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	791b      	ldrb	r3, [r3, #4]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d015      	beq.n	8003786 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8139 	beq.w	80039d6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	6979      	ldr	r1, [r7, #20]
 800377c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003780:	4313      	orrs	r3, r2
 8003782:	634b      	str	r3, [r1, #52]	@ 0x34
 8003784:	e127      	b.n	80039d6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d110      	bne.n	80037b8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	e00f      	b.n	80037d8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	68d9      	ldr	r1, [r3, #12]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f9a5 	bl	8003b36 <USB_WritePacket>
 80037ec:	e0f3      	b.n	80039d6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	0151      	lsls	r1, r2, #5
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	440a      	add	r2, r1
 8003804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003808:	0cdb      	lsrs	r3, r3, #19
 800380a:	04db      	lsls	r3, r3, #19
 800380c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003828:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800382c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003830:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d12f      	bne.n	8003898 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003866:	6939      	ldr	r1, [r7, #16]
 8003868:	0148      	lsls	r0, r1, #5
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	4401      	add	r1, r0
 800386e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003872:	4313      	orrs	r3, r2
 8003874:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003890:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003894:	6113      	str	r3, [r2, #16]
 8003896:	e061      	b.n	800395c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d125      	bne.n	80038ec <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	6939      	ldr	r1, [r7, #16]
 80038b8:	0148      	lsls	r0, r1, #5
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	4401      	add	r1, r0
 80038be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	0151      	lsls	r1, r2, #5
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	440a      	add	r2, r1
 80038dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80038e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038e4:	6113      	str	r3, [r2, #16]
 80038e6:	e039      	b.n	800395c <USB_EPStartXfer+0x3dc>
 80038e8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4413      	add	r3, r2
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	89fa      	ldrh	r2, [r7, #14]
 8003908:	fb03 f202 	mul.w	r2, r3, r2
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	89fb      	ldrh	r3, [r7, #14]
 8003920:	04d9      	lsls	r1, r3, #19
 8003922:	4b2f      	ldr	r3, [pc, #188]	@ (80039e0 <USB_EPStartXfer+0x460>)
 8003924:	400b      	ands	r3, r1
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	0148      	lsls	r0, r1, #5
 800392a:	6979      	ldr	r1, [r7, #20]
 800392c:	4401      	add	r1, r0
 800392e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003932:	4313      	orrs	r3, r2
 8003934:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800394c:	6939      	ldr	r1, [r7, #16]
 800394e:	0148      	lsls	r0, r1, #5
 8003950:	6979      	ldr	r1, [r7, #20]
 8003952:	4401      	add	r1, r0
 8003954:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003958:	4313      	orrs	r3, r2
 800395a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d128      	bne.n	80039b6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d110      	bne.n	8003996 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800398e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e00f      	b.n	80039b6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	0151      	lsls	r1, r2, #5
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	440a      	add	r2, r1
 80039cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80039d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80039d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	1ff80000 	.word	0x1ff80000

080039e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	785b      	ldrb	r3, [r3, #1]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d14a      	bne.n	8003a98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a1a:	f040 8086 	bne.w	8003b2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003a40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	7812      	ldrb	r2, [r2, #0]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d902      	bls.n	8003a7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
          break;
 8003a7a:	e056      	b.n	8003b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a94:	d0e7      	beq.n	8003a66 <USB_EPStopXfer+0x82>
 8003a96:	e048      	b.n	8003b2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab0:	d13b      	bne.n	8003b2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	0151      	lsls	r1, r2, #5
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	440a      	add	r2, r1
 8003acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ad0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ad4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	7812      	ldrb	r2, [r2, #0]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3301      	adds	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d902      	bls.n	8003b10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8003b0e:	e00c      	b.n	8003b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b28:	d0e7      	beq.n	8003afa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b089      	sub	sp, #36	@ 0x24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	4611      	mov	r1, r2
 8003b42:	461a      	mov	r2, r3
 8003b44:	460b      	mov	r3, r1
 8003b46:	71fb      	strb	r3, [r7, #7]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8003b54:	88bb      	ldrh	r3, [r7, #4]
 8003b56:	3303      	adds	r3, #3
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e018      	b.n	8003b94 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	031a      	lsls	r2, r3, #12
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b6e:	461a      	mov	r2, r3
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6013      	str	r3, [r2, #0]
    pSrc++;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d3e2      	bcc.n	8003b62 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b08b      	sub	sp, #44	@ 0x2c
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003bbe:	88fb      	ldrh	r3, [r7, #6]
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	e014      	b.n	8003bfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	601a      	str	r2, [r3, #0]
    pDest++;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	3301      	adds	r3, #1
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d3e6      	bcc.n	8003bd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003c06:	8bfb      	ldrh	r3, [r7, #30]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c16:	461a      	mov	r2, r3
 8003c18:	f107 0310 	add.w	r3, r7, #16
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	701a      	strb	r2, [r3, #0]
      i++;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	3301      	adds	r3, #1
 8003c36:	623b      	str	r3, [r7, #32]
      pDest++;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003c44:	8bfb      	ldrh	r3, [r7, #30]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ea      	bne.n	8003c20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	372c      	adds	r7, #44	@ 0x2c
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	785b      	ldrb	r3, [r3, #1]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d12c      	bne.n	8003ccc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	db12      	blt.n	8003caa <USB_EPSetStall+0x54>
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ca4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ca8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e02b      	b.n	8003d24 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	db12      	blt.n	8003d04 <USB_EPSetStall+0xae>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d02:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003d22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d128      	bne.n	8003d9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	0151      	lsls	r1, r2, #5
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	440a      	add	r2, r1
 8003d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	791b      	ldrb	r3, [r3, #4]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <USB_EPClearStall+0x4c>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	791b      	ldrb	r3, [r3, #4]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d138      	bne.n	8003dee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	0151      	lsls	r1, r2, #5
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	440a      	add	r2, r1
 8003d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	e027      	b.n	8003dee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	0151      	lsls	r1, r2, #5
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	440a      	add	r2, r1
 8003db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003db8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003dbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	791b      	ldrb	r3, [r3, #4]
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d003      	beq.n	8003dce <USB_EPClearStall+0x9e>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	791b      	ldrb	r3, [r3, #4]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d10f      	bne.n	8003dee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	015a      	lsls	r2, r3, #5
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	0151      	lsls	r1, r2, #5
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	440a      	add	r2, r1
 8003de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr

08003dfa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e18:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003e1c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e72:	f023 0302 	bic.w	r3, r3, #2
 8003e76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr

08003e84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eb2:	f043 0302 	orr.w	r3, r3, #2
 8003eb6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr

08003f1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b085      	sub	sp, #20
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	b29b      	uxth	r3, r3
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	01db      	lsls	r3, r3, #7
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0301 	and.w	r3, r3, #1
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004014:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004018:	f023 0307 	bic.w	r3, r3, #7
 800401c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800402c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004030:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	333c      	adds	r3, #60	@ 0x3c
 8004052:	3304      	adds	r3, #4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <USB_EP0_OutStart+0x8c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d90a      	bls.n	8004076 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800406c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004070:	d101      	bne.n	8004076 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e024      	b.n	80040c0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	2300      	movs	r3, #0
 8004080:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004090:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004094:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040a4:	f043 0318 	orr.w	r3, r3, #24
 80040a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80040b8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80040bc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3714      	adds	r7, #20
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	4f54300a 	.word	0x4f54300a

080040d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a12      	ldr	r2, [pc, #72]	@ (8004130 <USB_CoreReset+0x60>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e01b      	b.n	8004126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	daf2      	bge.n	80040dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f043 0201 	orr.w	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a08      	ldr	r2, [pc, #32]	@ (8004130 <USB_CoreReset+0x60>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b01      	cmp	r3, #1
 8004122:	d0f0      	beq.n	8004106 <USB_CoreReset+0x36>

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	00030d40 	.word	0x00030d40

08004134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	7c1b      	ldrb	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d115      	bne.n	8004178 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800414c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004150:	2202      	movs	r2, #2
 8004152:	2181      	movs	r1, #129	@ 0x81
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 fef4 	bl	8005f42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004160:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004164:	2202      	movs	r2, #2
 8004166:	2101      	movs	r1, #1
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 feea 	bl	8005f42 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8004176:	e012      	b.n	800419e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004178:	2340      	movs	r3, #64	@ 0x40
 800417a:	2202      	movs	r2, #2
 800417c:	2181      	movs	r1, #129	@ 0x81
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f001 fedf 	bl	8005f42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800418a:	2340      	movs	r3, #64	@ 0x40
 800418c:	2202      	movs	r2, #2
 800418e:	2101      	movs	r1, #1
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f001 fed6 	bl	8005f42 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800419e:	2308      	movs	r3, #8
 80041a0:	2203      	movs	r2, #3
 80041a2:	2182      	movs	r1, #130	@ 0x82
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f001 fecc 	bl	8005f42 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80041b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80041b4:	f001 ffec 	bl	8006190 <USBD_static_malloc>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
 80041ce:	e026      	b.n	800421e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80041d6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7c1b      	ldrb	r3, [r3, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004200:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004204:	2101      	movs	r1, #1
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 ff8b 	bl	8006122 <USBD_LL_PrepareReceive>
 800420c:	e007      	b.n	800421e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004214:	2340      	movs	r3, #64	@ 0x40
 8004216:	2101      	movs	r1, #1
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 ff82 	bl	8006122 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800421e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004238:	2181      	movs	r1, #129	@ 0x81
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fea7 	bl	8005f8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004246:	2101      	movs	r1, #1
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f001 fea0 	bl	8005f8e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004256:	2182      	movs	r1, #130	@ 0x82
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fe98 	bl	8005f8e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00e      	beq.n	800428c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800427e:	4618      	mov	r0, r3
 8004280:	f001 ff92 	bl	80061a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800428c:	7bfb      	ldrb	r3, [r7, #15]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80042a6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d039      	beq.n	8004334 <USBD_CDC_Setup+0x9e>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d17f      	bne.n	80043c4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	88db      	ldrh	r3, [r3, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d029      	beq.n	8004320 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da11      	bge.n	80042fa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80042e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	88d2      	ldrh	r2, [r2, #6]
 80042e8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80042ea:	6939      	ldr	r1, [r7, #16]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	88db      	ldrh	r3, [r3, #6]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 fa3e 	bl	8005774 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80042f8:	e06b      	b.n	80043d2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	785a      	ldrb	r2, [r3, #1]
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	88db      	ldrh	r3, [r3, #6]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004310:	6939      	ldr	r1, [r7, #16]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	88db      	ldrh	r3, [r3, #6]
 8004316:	461a      	mov	r2, r3
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f001 fa59 	bl	80057d0 <USBD_CtlPrepareRx>
      break;
 800431e:	e058      	b.n	80043d2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	2200      	movs	r2, #0
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	4798      	blx	r3
      break;
 8004332:	e04e      	b.n	80043d2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	2b0b      	cmp	r3, #11
 800433a:	d02e      	beq.n	800439a <USBD_CDC_Setup+0x104>
 800433c:	2b0b      	cmp	r3, #11
 800433e:	dc38      	bgt.n	80043b2 <USBD_CDC_Setup+0x11c>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <USBD_CDC_Setup+0xb4>
 8004344:	2b0a      	cmp	r3, #10
 8004346:	d014      	beq.n	8004372 <USBD_CDC_Setup+0xdc>
 8004348:	e033      	b.n	80043b2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004350:	2b03      	cmp	r3, #3
 8004352:	d107      	bne.n	8004364 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004354:	f107 030c 	add.w	r3, r7, #12
 8004358:	2202      	movs	r2, #2
 800435a:	4619      	mov	r1, r3
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 fa09 	bl	8005774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004362:	e02e      	b.n	80043c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8004364:	6839      	ldr	r1, [r7, #0]
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f001 f99a 	bl	80056a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800436c:	2302      	movs	r3, #2
 800436e:	75fb      	strb	r3, [r7, #23]
          break;
 8004370:	e027      	b.n	80043c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004378:	2b03      	cmp	r3, #3
 800437a:	d107      	bne.n	800438c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800437c:	f107 030f 	add.w	r3, r7, #15
 8004380:	2201      	movs	r2, #1
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f001 f9f5 	bl	8005774 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800438a:	e01a      	b.n	80043c2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800438c:	6839      	ldr	r1, [r7, #0]
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f001 f986 	bl	80056a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004394:	2302      	movs	r3, #2
 8004396:	75fb      	strb	r3, [r7, #23]
          break;
 8004398:	e013      	b.n	80043c2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d00d      	beq.n	80043c0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f001 f97a 	bl	80056a0 <USBD_CtlError>
            ret = USBD_FAIL;
 80043ac:	2302      	movs	r3, #2
 80043ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043b0:	e006      	b.n	80043c0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80043b2:	6839      	ldr	r1, [r7, #0]
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 f973 	bl	80056a0 <USBD_CtlError>
          ret = USBD_FAIL;
 80043ba:	2302      	movs	r3, #2
 80043bc:	75fb      	strb	r3, [r7, #23]
          break;
 80043be:	e000      	b.n	80043c2 <USBD_CDC_Setup+0x12c>
          break;
 80043c0:	bf00      	nop
      }
      break;
 80043c2:	e006      	b.n	80043d2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80043c4:	6839      	ldr	r1, [r7, #0]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f96a 	bl	80056a0 <USBD_CtlError>
      ret = USBD_FAIL;
 80043cc:	2302      	movs	r3, #2
 80043ce:	75fb      	strb	r3, [r7, #23]
      break;
 80043d0:	bf00      	nop
  }

  return ret;
 80043d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	460b      	mov	r3, r1
 80043e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80043ee:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80043f6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d03a      	beq.n	8004478 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	331c      	adds	r3, #28
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d029      	beq.n	800446c <USBD_CDC_DataIn+0x90>
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331c      	adds	r3, #28
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	78f9      	ldrb	r1, [r7, #3]
 800442c:	68b8      	ldr	r0, [r7, #8]
 800442e:	460b      	mov	r3, r1
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	440b      	add	r3, r1
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4403      	add	r3, r0
 8004438:	3344      	adds	r3, #68	@ 0x44
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d110      	bne.n	800446c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	440b      	add	r3, r1
 8004458:	331c      	adds	r3, #28
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800445e:	78f9      	ldrb	r1, [r7, #3]
 8004460:	2300      	movs	r3, #0
 8004462:	2200      	movs	r2, #0
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 fe39 	bl	80060dc <USBD_LL_Transmit>
 800446a:	e003      	b.n	8004474 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004494:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004496:	78fb      	ldrb	r3, [r7, #3]
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f001 fe64 	bl	8006168 <USBD_LL_GetRxDataSize>
 80044a0:	4602      	mov	r2, r0
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00d      	beq.n	80044ce <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80044c6:	4611      	mov	r1, r2
 80044c8:	4798      	blx	r3

    return USBD_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80044e6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d014      	beq.n	800451c <USBD_CDC_EP0_RxReady+0x44>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80044f8:	2bff      	cmp	r3, #255	@ 0xff
 80044fa:	d00f      	beq.n	800451c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800450a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004512:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	22ff      	movs	r2, #255	@ 0xff
 8004518:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2243      	movs	r2, #67	@ 0x43
 8004534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004536:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000094 	.word	0x20000094

08004548 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2243      	movs	r2, #67	@ 0x43
 8004554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004556:	4b03      	ldr	r3, [pc, #12]	@ (8004564 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000050 	.word	0x20000050

08004568 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2243      	movs	r2, #67	@ 0x43
 8004574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004576:	4b03      	ldr	r3, [pc, #12]	@ (8004584 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	200000d8 	.word	0x200000d8

08004588 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	220a      	movs	r2, #10
 8004594:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004596:	4b03      	ldr	r3, [pc, #12]	@ (80045a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	2000000c 	.word	0x2000000c

080045a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80045b2:	2302      	movs	r3, #2
 80045b4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr

080045d4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	4613      	mov	r3, r2
 80045e0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80045e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80045f2:	88fa      	ldrh	r2, [r7, #6]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004616:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800463a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01c      	beq.n	8004680 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800464c:	2b00      	cmp	r3, #0
 800464e:	d115      	bne.n	800467c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800466e:	b29b      	uxth	r3, r3
 8004670:	2181      	movs	r1, #129	@ 0x81
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 fd32 	bl	80060dc <USBD_LL_Transmit>

      return USBD_OK;
 8004678:	2300      	movs	r3, #0
 800467a:	e002      	b.n	8004682 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004698:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d017      	beq.n	80046d4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	7c1b      	ldrb	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046b6:	2101      	movs	r1, #1
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 fd32 	bl	8006122 <USBD_LL_PrepareReceive>
 80046be:	e007      	b.n	80046d0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80046c6:	2340      	movs	r3, #64	@ 0x40
 80046c8:	2101      	movs	r1, #1
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fd29 	bl	8006122 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80046f2:	2302      	movs	r3, #2
 80046f4:	e01a      	b.n	800472c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	79fa      	ldrb	r2, [r7, #7]
 8004722:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f001 fbad 	bl	8005e84 <USBD_LL_Init>

  return USBD_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e001      	b.n	800475a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004756:	2302      	movs	r3, #2
 8004758:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr

08004766 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 fbcc 	bl	8005f0c <USBD_LL_Start>

  return USBD_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800479e:	2302      	movs	r3, #2
 80047a0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00c      	beq.n	80047c6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	4611      	mov	r1, r2
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	4611      	mov	r1, r2
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3

  return USBD_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}

080047f6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b082      	sub	sp, #8
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004806:	6839      	ldr	r1, [r7, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 ff10 	bl	800562e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800481c:	461a      	mov	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800482a:	f003 031f 	and.w	r3, r3, #31
 800482e:	2b02      	cmp	r3, #2
 8004830:	d016      	beq.n	8004860 <USBD_LL_SetupStage+0x6a>
 8004832:	2b02      	cmp	r3, #2
 8004834:	d81c      	bhi.n	8004870 <USBD_LL_SetupStage+0x7a>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <USBD_LL_SetupStage+0x4a>
 800483a:	2b01      	cmp	r3, #1
 800483c:	d008      	beq.n	8004850 <USBD_LL_SetupStage+0x5a>
 800483e:	e017      	b.n	8004870 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004846:	4619      	mov	r1, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fa03 	bl	8004c54 <USBD_StdDevReq>
      break;
 800484e:	e01a      	b.n	8004886 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa65 	bl	8004d28 <USBD_StdItfReq>
      break;
 800485e:	e012      	b.n	8004886 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 faa5 	bl	8004db8 <USBD_StdEPReq>
      break;
 800486e:	e00a      	b.n	8004886 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8004876:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800487a:	b2db      	uxtb	r3, r3
 800487c:	4619      	mov	r1, r3
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fba4 	bl	8005fcc <USBD_LL_StallEP>
      break;
 8004884:	bf00      	nop
  }

  return USBD_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	460b      	mov	r3, r1
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d14b      	bne.n	800493c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80048aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d134      	bne.n	8004920 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d919      	bls.n	80048f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	1ad2      	subs	r2, r2, r3
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80048d8:	429a      	cmp	r2, r3
 80048da:	d203      	bcs.n	80048e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	e002      	b.n	80048ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 ff8c 	bl	800580c <USBD_CtlContinueRx>
 80048f4:	e038      	b.n	8004968 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004908:	2b03      	cmp	r3, #3
 800490a:	d105      	bne.n	8004918 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 ff89 	bl	8005830 <USBD_CtlSendStatus>
 800491e:	e023      	b.n	8004968 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004926:	2b05      	cmp	r3, #5
 8004928:	d11e      	bne.n	8004968 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004932:	2100      	movs	r1, #0
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f001 fb49 	bl	8005fcc <USBD_LL_StallEP>
 800493a:	e015      	b.n	8004968 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00d      	beq.n	8004964 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800494e:	2b03      	cmp	r3, #3
 8004950:	d108      	bne.n	8004964 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	7afa      	ldrb	r2, [r7, #11]
 800495c:	4611      	mov	r1, r2
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	4798      	blx	r3
 8004962:	e001      	b.n	8004968 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004964:	2302      	movs	r3, #2
 8004966:	e000      	b.n	800496a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	460b      	mov	r3, r1
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d17f      	bne.n	8004a86 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3314      	adds	r3, #20
 800498a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004992:	2b02      	cmp	r3, #2
 8004994:	d15c      	bne.n	8004a50 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	68da      	ldr	r2, [r3, #12]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d915      	bls.n	80049ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fef6 	bl	80057ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049c0:	2300      	movs	r3, #0
 80049c2:	2200      	movs	r2, #0
 80049c4:	2100      	movs	r1, #0
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f001 fbab 	bl	8006122 <USBD_LL_PrepareReceive>
 80049cc:	e04e      	b.n	8004a6c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	6912      	ldr	r2, [r2, #16]
 80049d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80049da:	fb01 f202 	mul.w	r2, r1, r2
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11c      	bne.n	8004a1e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d316      	bcc.n	8004a1e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d20f      	bcs.n	8004a1e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fed2 	bl	80057ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a10:	2300      	movs	r3, #0
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f001 fb83 	bl	8006122 <USBD_LL_PrepareReceive>
 8004a1c:	e026      	b.n	8004a6c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d105      	bne.n	8004a40 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004a40:	2180      	movs	r1, #128	@ 0x80
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f001 fac2 	bl	8005fcc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 ff04 	bl	8005856 <USBD_CtlReceiveStatus>
 8004a4e:	e00d      	b.n	8004a6c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d004      	beq.n	8004a64 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004a64:	2180      	movs	r1, #128	@ 0x80
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	f001 fab0 	bl	8005fcc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d11d      	bne.n	8004ab2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f7ff fe81 	bl	800477e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8004a84:	e015      	b.n	8004ab2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00d      	beq.n	8004aae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d108      	bne.n	8004aae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	7afa      	ldrb	r2, [r7, #11]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	4798      	blx	r3
 8004aac:	e001      	b.n	8004ab2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e000      	b.n	8004ab4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ac4:	2340      	movs	r3, #64	@ 0x40
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	2100      	movs	r1, #0
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f001 fa39 	bl	8005f42 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2240      	movs	r2, #64	@ 0x40
 8004adc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ae0:	2340      	movs	r3, #64	@ 0x40
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	2180      	movs	r1, #128	@ 0x80
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 fa2b 	bl	8005f42 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2240      	movs	r2, #64	@ 0x40
 8004af6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6852      	ldr	r2, [r2, #4]
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	4611      	mov	r1, r2
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	4798      	blx	r3
  }

  return USBD_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2204      	movs	r2, #4
 8004b74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d105      	bne.n	8004ba2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bc80      	pop	{r7}
 8004bac:	4770      	bx	lr

08004bae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d10b      	bne.n	8004bd8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	460b      	mov	r3, r1
 8004bec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bc80      	pop	{r7}
 8004bf8:	4770      	bx	lr

08004bfa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6852      	ldr	r2, [r2, #4]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	4611      	mov	r1, r2
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3

  return USBD_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004c6a:	2b40      	cmp	r3, #64	@ 0x40
 8004c6c:	d005      	beq.n	8004c7a <USBD_StdDevReq+0x26>
 8004c6e:	2b40      	cmp	r3, #64	@ 0x40
 8004c70:	d84f      	bhi.n	8004d12 <USBD_StdDevReq+0xbe>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d009      	beq.n	8004c8a <USBD_StdDevReq+0x36>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d14b      	bne.n	8004d12 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
      break;
 8004c88:	e048      	b.n	8004d1c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	d839      	bhi.n	8004d06 <USBD_StdDevReq+0xb2>
 8004c92:	a201      	add	r2, pc, #4	@ (adr r2, 8004c98 <USBD_StdDevReq+0x44>)
 8004c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c98:	08004ce9 	.word	0x08004ce9
 8004c9c:	08004cfd 	.word	0x08004cfd
 8004ca0:	08004d07 	.word	0x08004d07
 8004ca4:	08004cf3 	.word	0x08004cf3
 8004ca8:	08004d07 	.word	0x08004d07
 8004cac:	08004ccb 	.word	0x08004ccb
 8004cb0:	08004cc1 	.word	0x08004cc1
 8004cb4:	08004d07 	.word	0x08004d07
 8004cb8:	08004cdf 	.word	0x08004cdf
 8004cbc:	08004cd5 	.word	0x08004cd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f9dc 	bl	8005080 <USBD_GetDescriptor>
          break;
 8004cc8:	e022      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fb3f 	bl	8005350 <USBD_SetAddress>
          break;
 8004cd2:	e01d      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004cd4:	6839      	ldr	r1, [r7, #0]
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb7e 	bl	80053d8 <USBD_SetConfig>
          break;
 8004cdc:	e018      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fc07 	bl	80054f4 <USBD_GetConfig>
          break;
 8004ce6:	e013      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fc37 	bl	800555e <USBD_GetStatus>
          break;
 8004cf0:	e00e      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004cf2:	6839      	ldr	r1, [r7, #0]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fc65 	bl	80055c4 <USBD_SetFeature>
          break;
 8004cfa:	e009      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004cfc:	6839      	ldr	r1, [r7, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fc74 	bl	80055ec <USBD_ClrFeature>
          break;
 8004d04:	e004      	b.n	8004d10 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fcc9 	bl	80056a0 <USBD_CtlError>
          break;
 8004d0e:	bf00      	nop
      }
      break;
 8004d10:	e004      	b.n	8004d1c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fcc3 	bl	80056a0 <USBD_CtlError>
      break;
 8004d1a:	bf00      	nop
  }

  return ret;
 8004d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d005      	beq.n	8004d4e <USBD_StdItfReq+0x26>
 8004d42:	2b40      	cmp	r3, #64	@ 0x40
 8004d44:	d82e      	bhi.n	8004da4 <USBD_StdItfReq+0x7c>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <USBD_StdItfReq+0x26>
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d12a      	bne.n	8004da4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d81d      	bhi.n	8004d96 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	889b      	ldrh	r3, [r3, #4]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d813      	bhi.n	8004d8c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	88db      	ldrh	r3, [r3, #6]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d110      	bne.n	8004da0 <USBD_StdItfReq+0x78>
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10d      	bne.n	8004da0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fd53 	bl	8005830 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004d8a:	e009      	b.n	8004da0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8004d8c:	6839      	ldr	r1, [r7, #0]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fc86 	bl	80056a0 <USBD_CtlError>
          break;
 8004d94:	e004      	b.n	8004da0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fc81 	bl	80056a0 <USBD_CtlError>
          break;
 8004d9e:	e000      	b.n	8004da2 <USBD_StdItfReq+0x7a>
          break;
 8004da0:	bf00      	nop
      }
      break;
 8004da2:	e004      	b.n	8004dae <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fc7a 	bl	80056a0 <USBD_CtlError>
      break;
 8004dac:	bf00      	nop
  }

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	889b      	ldrh	r3, [r3, #4]
 8004dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004dd4:	2b40      	cmp	r3, #64	@ 0x40
 8004dd6:	d007      	beq.n	8004de8 <USBD_StdEPReq+0x30>
 8004dd8:	2b40      	cmp	r3, #64	@ 0x40
 8004dda:	f200 8146 	bhi.w	800506a <USBD_StdEPReq+0x2b2>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <USBD_StdEPReq+0x40>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f040 8141 	bne.w	800506a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	6839      	ldr	r1, [r7, #0]
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4798      	blx	r3
      break;
 8004df6:	e13d      	b.n	8005074 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d10a      	bne.n	8004e1a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	e12d      	b.n	8005076 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	785b      	ldrb	r3, [r3, #1]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d007      	beq.n	8004e32 <USBD_StdEPReq+0x7a>
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	f300 811b 	bgt.w	800505e <USBD_StdEPReq+0x2a6>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d072      	beq.n	8004f12 <USBD_StdEPReq+0x15a>
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d03a      	beq.n	8004ea6 <USBD_StdEPReq+0xee>
 8004e30:	e115      	b.n	800505e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d002      	beq.n	8004e42 <USBD_StdEPReq+0x8a>
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d015      	beq.n	8004e6c <USBD_StdEPReq+0xb4>
 8004e40:	e02b      	b.n	8004e9a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <USBD_StdEPReq+0xaa>
 8004e48:	7bbb      	ldrb	r3, [r7, #14]
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d009      	beq.n	8004e62 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004e4e:	7bbb      	ldrb	r3, [r7, #14]
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f001 f8ba 	bl	8005fcc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004e58:	2180      	movs	r1, #128	@ 0x80
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f001 f8b6 	bl	8005fcc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004e60:	e020      	b.n	8004ea4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8004e62:	6839      	ldr	r1, [r7, #0]
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fc1b 	bl	80056a0 <USBD_CtlError>
              break;
 8004e6a:	e01b      	b.n	8004ea4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	885b      	ldrh	r3, [r3, #2]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8004e74:	7bbb      	ldrb	r3, [r7, #14]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <USBD_StdEPReq+0xda>
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	2b80      	cmp	r3, #128	@ 0x80
 8004e7e:	d008      	beq.n	8004e92 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	88db      	ldrh	r3, [r3, #6]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004e88:	7bbb      	ldrb	r3, [r7, #14]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 f89d 	bl	8005fcc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fccc 	bl	8005830 <USBD_CtlSendStatus>

              break;
 8004e98:	e004      	b.n	8004ea4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f000 fbff 	bl	80056a0 <USBD_CtlError>
              break;
 8004ea2:	bf00      	nop
          }
          break;
 8004ea4:	e0e0      	b.n	8005068 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d002      	beq.n	8004eb6 <USBD_StdEPReq+0xfe>
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d015      	beq.n	8004ee0 <USBD_StdEPReq+0x128>
 8004eb4:	e026      	b.n	8004f04 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eb6:	7bbb      	ldrb	r3, [r7, #14]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <USBD_StdEPReq+0x11e>
 8004ebc:	7bbb      	ldrb	r3, [r7, #14]
 8004ebe:	2b80      	cmp	r3, #128	@ 0x80
 8004ec0:	d009      	beq.n	8004ed6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 f880 	bl	8005fcc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004ecc:	2180      	movs	r1, #128	@ 0x80
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f87c 	bl	8005fcc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ed4:	e01c      	b.n	8004f10 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8004ed6:	6839      	ldr	r1, [r7, #0]
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fbe1 	bl	80056a0 <USBD_CtlError>
              break;
 8004ede:	e017      	b.n	8004f10 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	885b      	ldrh	r3, [r3, #2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d112      	bne.n	8004f0e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004ef2:	7bbb      	ldrb	r3, [r7, #14]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f887 	bl	800600a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 fc97 	bl	8005830 <USBD_CtlSendStatus>
              }
              break;
 8004f02:	e004      	b.n	8004f0e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8004f04:	6839      	ldr	r1, [r7, #0]
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fbca 	bl	80056a0 <USBD_CtlError>
              break;
 8004f0c:	e000      	b.n	8004f10 <USBD_StdEPReq+0x158>
              break;
 8004f0e:	bf00      	nop
          }
          break;
 8004f10:	e0aa      	b.n	8005068 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d002      	beq.n	8004f22 <USBD_StdEPReq+0x16a>
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d032      	beq.n	8004f86 <USBD_StdEPReq+0x1ce>
 8004f20:	e097      	b.n	8005052 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f22:	7bbb      	ldrb	r3, [r7, #14]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <USBD_StdEPReq+0x180>
 8004f28:	7bbb      	ldrb	r3, [r7, #14]
 8004f2a:	2b80      	cmp	r3, #128	@ 0x80
 8004f2c:	d004      	beq.n	8004f38 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fbb5 	bl	80056a0 <USBD_CtlError>
                break;
 8004f36:	e091      	b.n	800505c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	da0b      	bge.n	8004f58 <USBD_StdEPReq+0x1a0>
 8004f40:	7bbb      	ldrb	r3, [r7, #14]
 8004f42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f46:	4613      	mov	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3310      	adds	r3, #16
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	4413      	add	r3, r2
 8004f54:	3304      	adds	r3, #4
 8004f56:	e00b      	b.n	8004f70 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f58:	7bbb      	ldrb	r3, [r7, #14]
 8004f5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3304      	adds	r3, #4
 8004f70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fbf8 	bl	8005774 <USBD_CtlSendData>
              break;
 8004f84:	e06a      	b.n	800505c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004f86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da11      	bge.n	8004fb2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d117      	bne.n	8004fd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fb78 	bl	80056a0 <USBD_CtlError>
                  break;
 8004fb0:	e054      	b.n	800505c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	f003 020f 	and.w	r2, r3, #15
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fb65 	bl	80056a0 <USBD_CtlError>
                  break;
 8004fd6:	e041      	b.n	800505c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da0b      	bge.n	8004ff8 <USBD_StdEPReq+0x240>
 8004fe0:	7bbb      	ldrb	r3, [r7, #14]
 8004fe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	3310      	adds	r3, #16
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	e00b      	b.n	8005010 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	4413      	add	r3, r2
 800500e:	3304      	adds	r3, #4
 8005010:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005012:	7bbb      	ldrb	r3, [r7, #14]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <USBD_StdEPReq+0x266>
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	2b80      	cmp	r3, #128	@ 0x80
 800501c:	d103      	bne.n	8005026 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e00e      	b.n	8005044 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005026:	7bbb      	ldrb	r3, [r7, #14]
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f001 f80c 	bl	8006048 <USBD_LL_IsStallEP>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2201      	movs	r2, #1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e002      	b.n	8005044 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2202      	movs	r2, #2
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 fb92 	bl	8005774 <USBD_CtlSendData>
              break;
 8005050:	e004      	b.n	800505c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8005052:	6839      	ldr	r1, [r7, #0]
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fb23 	bl	80056a0 <USBD_CtlError>
              break;
 800505a:	bf00      	nop
          }
          break;
 800505c:	e004      	b.n	8005068 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800505e:	6839      	ldr	r1, [r7, #0]
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb1d 	bl	80056a0 <USBD_CtlError>
          break;
 8005066:	bf00      	nop
      }
      break;
 8005068:	e004      	b.n	8005074 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb17 	bl	80056a0 <USBD_CtlError>
      break;
 8005072:	bf00      	nop
  }

  return ret;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	885b      	ldrh	r3, [r3, #2]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	f200 8128 	bhi.w	80052f6 <USBD_GetDescriptor+0x276>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <USBD_GetDescriptor+0x2c>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	08005121 	.word	0x08005121
 80050b8:	080052f7 	.word	0x080052f7
 80050bc:	080052f7 	.word	0x080052f7
 80050c0:	08005297 	.word	0x08005297
 80050c4:	080052c3 	.word	0x080052c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	7c12      	ldrb	r2, [r2, #16]
 80050d4:	f107 0108 	add.w	r1, r7, #8
 80050d8:	4610      	mov	r0, r2
 80050da:	4798      	blx	r3
 80050dc:	60f8      	str	r0, [r7, #12]
      break;
 80050de:	e112      	b.n	8005306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7c1b      	ldrb	r3, [r3, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10d      	bne.n	8005104 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f107 0208 	add.w	r2, r7, #8
 80050f4:	4610      	mov	r0, r2
 80050f6:	4798      	blx	r3
 80050f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	2202      	movs	r2, #2
 8005100:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005102:	e100      	b.n	8005306 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800510a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510c:	f107 0208 	add.w	r2, r7, #8
 8005110:	4610      	mov	r0, r2
 8005112:	4798      	blx	r3
 8005114:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	2202      	movs	r2, #2
 800511c:	701a      	strb	r2, [r3, #0]
      break;
 800511e:	e0f2      	b.n	8005306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	885b      	ldrh	r3, [r3, #2]
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b05      	cmp	r3, #5
 8005128:	f200 80ac 	bhi.w	8005284 <USBD_GetDescriptor+0x204>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <USBD_GetDescriptor+0xb4>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	0800514d 	.word	0x0800514d
 8005138:	08005181 	.word	0x08005181
 800513c:	080051b5 	.word	0x080051b5
 8005140:	080051e9 	.word	0x080051e9
 8005144:	0800521d 	.word	0x0800521d
 8005148:	08005251 	.word	0x08005251
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	7c12      	ldrb	r2, [r2, #16]
 8005164:	f107 0108 	add.w	r1, r7, #8
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800516e:	e091      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa94 	bl	80056a0 <USBD_CtlError>
            err++;
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	3301      	adds	r3, #1
 800517c:	72fb      	strb	r3, [r7, #11]
          break;
 800517e:	e089      	b.n	8005294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00b      	beq.n	80051a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	7c12      	ldrb	r2, [r2, #16]
 8005198:	f107 0108 	add.w	r1, r7, #8
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
 80051a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051a2:	e077      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa7a 	bl	80056a0 <USBD_CtlError>
            err++;
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	3301      	adds	r3, #1
 80051b0:	72fb      	strb	r3, [r7, #11]
          break;
 80051b2:	e06f      	b.n	8005294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	7c12      	ldrb	r2, [r2, #16]
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
 80051d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051d6:	e05d      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa60 	bl	80056a0 <USBD_CtlError>
            err++;
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	3301      	adds	r3, #1
 80051e4:	72fb      	strb	r3, [r7, #11]
          break;
 80051e6:	e055      	b.n	8005294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	7c12      	ldrb	r2, [r2, #16]
 8005200:	f107 0108 	add.w	r1, r7, #8
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
 8005208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800520a:	e043      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa46 	bl	80056a0 <USBD_CtlError>
            err++;
 8005214:	7afb      	ldrb	r3, [r7, #11]
 8005216:	3301      	adds	r3, #1
 8005218:	72fb      	strb	r3, [r7, #11]
          break;
 800521a:	e03b      	b.n	8005294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	7c12      	ldrb	r2, [r2, #16]
 8005234:	f107 0108 	add.w	r1, r7, #8
 8005238:	4610      	mov	r0, r2
 800523a:	4798      	blx	r3
 800523c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800523e:	e029      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa2c 	bl	80056a0 <USBD_CtlError>
            err++;
 8005248:	7afb      	ldrb	r3, [r7, #11]
 800524a:	3301      	adds	r3, #1
 800524c:	72fb      	strb	r3, [r7, #11]
          break;
 800524e:	e021      	b.n	8005294 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	7c12      	ldrb	r2, [r2, #16]
 8005268:	f107 0108 	add.w	r1, r7, #8
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
 8005270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005272:	e00f      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa12 	bl	80056a0 <USBD_CtlError>
            err++;
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	3301      	adds	r3, #1
 8005280:	72fb      	strb	r3, [r7, #11]
          break;
 8005282:	e007      	b.n	8005294 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa0a 	bl	80056a0 <USBD_CtlError>
          err++;
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	3301      	adds	r3, #1
 8005290:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005292:	e038      	b.n	8005306 <USBD_GetDescriptor+0x286>
 8005294:	e037      	b.n	8005306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	7c1b      	ldrb	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a6:	f107 0208 	add.w	r2, r7, #8
 80052aa:	4610      	mov	r0, r2
 80052ac:	4798      	blx	r3
 80052ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052b0:	e029      	b.n	8005306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f9f3 	bl	80056a0 <USBD_CtlError>
        err++;
 80052ba:	7afb      	ldrb	r3, [r7, #11]
 80052bc:	3301      	adds	r3, #1
 80052be:	72fb      	strb	r3, [r7, #11]
      break;
 80052c0:	e021      	b.n	8005306 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	7c1b      	ldrb	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10d      	bne.n	80052e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80052d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d2:	f107 0208 	add.w	r2, r7, #8
 80052d6:	4610      	mov	r0, r2
 80052d8:	4798      	blx	r3
 80052da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	2207      	movs	r2, #7
 80052e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052e4:	e00f      	b.n	8005306 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f9d9 	bl	80056a0 <USBD_CtlError>
        err++;
 80052ee:	7afb      	ldrb	r3, [r7, #11]
 80052f0:	3301      	adds	r3, #1
 80052f2:	72fb      	strb	r3, [r7, #11]
      break;
 80052f4:	e007      	b.n	8005306 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80052f6:	6839      	ldr	r1, [r7, #0]
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f9d1 	bl	80056a0 <USBD_CtlError>
      err++;
 80052fe:	7afb      	ldrb	r3, [r7, #11]
 8005300:	3301      	adds	r3, #1
 8005302:	72fb      	strb	r3, [r7, #11]
      break;
 8005304:	bf00      	nop
  }

  if (err != 0U)
 8005306:	7afb      	ldrb	r3, [r7, #11]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11c      	bne.n	8005346 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <USBD_GetDescriptor+0x2b6>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	88da      	ldrh	r2, [r3, #6]
 800531e:	893b      	ldrh	r3, [r7, #8]
 8005320:	4293      	cmp	r3, r2
 8005322:	bf28      	it	cs
 8005324:	4613      	movcs	r3, r2
 8005326:	b29b      	uxth	r3, r3
 8005328:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800532a:	893b      	ldrh	r3, [r7, #8]
 800532c:	461a      	mov	r2, r3
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa1f 	bl	8005774 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	88db      	ldrh	r3, [r3, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fa76 	bl	8005830 <USBD_CtlSendStatus>
 8005344:	e000      	b.n	8005348 <USBD_GetDescriptor+0x2c8>
    return;
 8005346:	bf00      	nop
    }
  }
}
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop

08005350 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	889b      	ldrh	r3, [r3, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d130      	bne.n	80053c4 <USBD_SetAddress+0x74>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	88db      	ldrh	r3, [r3, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d12c      	bne.n	80053c4 <USBD_SetAddress+0x74>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	885b      	ldrh	r3, [r3, #2]
 800536e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005370:	d828      	bhi.n	80053c4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	885b      	ldrh	r3, [r3, #2]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800537c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005384:	2b03      	cmp	r3, #3
 8005386:	d104      	bne.n	8005392 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f988 	bl	80056a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005390:	e01d      	b.n	80053ce <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fe7d 	bl	800609e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fa43 	bl	8005830 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b8:	e009      	b.n	80053ce <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c2:	e004      	b.n	80053ce <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f96a 	bl	80056a0 <USBD_CtlError>
  }
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	885b      	ldrh	r3, [r3, #2]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b41      	ldr	r3, [pc, #260]	@ (80054f0 <USBD_SetConfig+0x118>)
 80053ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80053ec:	4b40      	ldr	r3, [pc, #256]	@ (80054f0 <USBD_SetConfig+0x118>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d904      	bls.n	80053fe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f952 	bl	80056a0 <USBD_CtlError>
 80053fc:	e075      	b.n	80054ea <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005404:	2b02      	cmp	r3, #2
 8005406:	d002      	beq.n	800540e <USBD_SetConfig+0x36>
 8005408:	2b03      	cmp	r3, #3
 800540a:	d023      	beq.n	8005454 <USBD_SetConfig+0x7c>
 800540c:	e062      	b.n	80054d4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800540e:	4b38      	ldr	r3, [pc, #224]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005416:	4b36      	ldr	r3, [pc, #216]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005428:	4b31      	ldr	r3, [pc, #196]	@ (80054f0 <USBD_SetConfig+0x118>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	4619      	mov	r1, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff f9af 	bl	8004792 <USBD_SetClassConfig>
 8005434:	4603      	mov	r3, r0
 8005436:	2b02      	cmp	r3, #2
 8005438:	d104      	bne.n	8005444 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f92f 	bl	80056a0 <USBD_CtlError>
            return;
 8005442:	e052      	b.n	80054ea <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f9f3 	bl	8005830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800544a:	e04e      	b.n	80054ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f9ef 	bl	8005830 <USBD_CtlSendStatus>
        break;
 8005452:	e04a      	b.n	80054ea <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005454:	4b26      	ldr	r3, [pc, #152]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d112      	bne.n	8005482 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8005464:	4b22      	ldr	r3, [pc, #136]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	461a      	mov	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800546e:	4b20      	ldr	r3, [pc, #128]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff f9ab 	bl	80047d0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9d8 	bl	8005830 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005480:	e033      	b.n	80054ea <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005482:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <USBD_SetConfig+0x118>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d01d      	beq.n	80054cc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff f999 	bl	80047d0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800549e:	4b14      	ldr	r3, [pc, #80]	@ (80054f0 <USBD_SetConfig+0x118>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <USBD_SetConfig+0x118>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff f96f 	bl	8004792 <USBD_SetClassConfig>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d104      	bne.n	80054c4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f8ef 	bl	80056a0 <USBD_CtlError>
            return;
 80054c2:	e012      	b.n	80054ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f9b3 	bl	8005830 <USBD_CtlSendStatus>
        break;
 80054ca:	e00e      	b.n	80054ea <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f9af 	bl	8005830 <USBD_CtlSendStatus>
        break;
 80054d2:	e00a      	b.n	80054ea <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8e2 	bl	80056a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <USBD_SetConfig+0x118>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff f974 	bl	80047d0 <USBD_ClrClassConfig>
        break;
 80054e8:	bf00      	nop
    }
  }
}
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	2000019c 	.word	0x2000019c

080054f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	88db      	ldrh	r3, [r3, #6]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d004      	beq.n	8005510 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f8c9 	bl	80056a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800550e:	e022      	b.n	8005556 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005516:	2b02      	cmp	r3, #2
 8005518:	dc02      	bgt.n	8005520 <USBD_GetConfig+0x2c>
 800551a:	2b00      	cmp	r3, #0
 800551c:	dc03      	bgt.n	8005526 <USBD_GetConfig+0x32>
 800551e:	e015      	b.n	800554c <USBD_GetConfig+0x58>
 8005520:	2b03      	cmp	r3, #3
 8005522:	d00b      	beq.n	800553c <USBD_GetConfig+0x48>
 8005524:	e012      	b.n	800554c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3308      	adds	r3, #8
 8005530:	2201      	movs	r2, #1
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f91d 	bl	8005774 <USBD_CtlSendData>
        break;
 800553a:	e00c      	b.n	8005556 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	2201      	movs	r2, #1
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f915 	bl	8005774 <USBD_CtlSendData>
        break;
 800554a:	e004      	b.n	8005556 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8a6 	bl	80056a0 <USBD_CtlError>
        break;
 8005554:	bf00      	nop
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800556e:	3b01      	subs	r3, #1
 8005570:	2b02      	cmp	r3, #2
 8005572:	d81e      	bhi.n	80055b2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	88db      	ldrh	r3, [r3, #6]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d004      	beq.n	8005586 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f88e 	bl	80056a0 <USBD_CtlError>
        break;
 8005584:	e01a      	b.n	80055bc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f043 0202 	orr.w	r2, r3, #2
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	330c      	adds	r3, #12
 80055a6:	2202      	movs	r2, #2
 80055a8:	4619      	mov	r1, r3
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8e2 	bl	8005774 <USBD_CtlSendData>
      break;
 80055b0:	e004      	b.n	80055bc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f873 	bl	80056a0 <USBD_CtlError>
      break;
 80055ba:	bf00      	nop
  }
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	885b      	ldrh	r3, [r3, #2]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d106      	bne.n	80055e4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f926 	bl	8005830 <USBD_CtlSendStatus>
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055fc:	3b01      	subs	r3, #1
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d80b      	bhi.n	800561a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	885b      	ldrh	r3, [r3, #2]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d10c      	bne.n	8005624 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f90c 	bl	8005830 <USBD_CtlSendStatus>
      }
      break;
 8005618:	e004      	b.n	8005624 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f83f 	bl	80056a0 <USBD_CtlError>
      break;
 8005622:	e000      	b.n	8005626 <USBD_ClrFeature+0x3a>
      break;
 8005624:	bf00      	nop
  }
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781a      	ldrb	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	785a      	ldrb	r2, [r3, #1]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	3302      	adds	r3, #2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	3303      	adds	r3, #3
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	4413      	add	r3, r2
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	3304      	adds	r3, #4
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	3305      	adds	r3, #5
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	b29b      	uxth	r3, r3
 8005674:	4413      	add	r3, r2
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	3306      	adds	r3, #6
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	3307      	adds	r3, #7
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	b29b      	uxth	r3, r3
 800568e:	4413      	add	r3, r2
 8005690:	b29a      	uxth	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	80da      	strh	r2, [r3, #6]

}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80056aa:	2180      	movs	r1, #128	@ 0x80
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fc8d 	bl	8005fcc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80056b2:	2100      	movs	r1, #0
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fc89 	bl	8005fcc <USBD_LL_StallEP>
}
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	60f8      	str	r0, [r7, #12]
 80056ca:	60b9      	str	r1, [r7, #8]
 80056cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d032      	beq.n	800573e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f834 	bl	8005746 <USBD_GetLen>
 80056de:	4603      	mov	r3, r0
 80056e0:	3301      	adds	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	75fa      	strb	r2, [r7, #23]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4413      	add	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	75fa      	strb	r2, [r7, #23]
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	2203      	movs	r2, #3
 800570c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800570e:	e012      	b.n	8005736 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	60fa      	str	r2, [r7, #12]
 8005716:	7dfa      	ldrb	r2, [r7, #23]
 8005718:	1c51      	adds	r1, r2, #1
 800571a:	75f9      	strb	r1, [r7, #23]
 800571c:	4611      	mov	r1, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	440a      	add	r2, r1
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	75fa      	strb	r2, [r7, #23]
 800572c:	461a      	mov	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4413      	add	r3, r2
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e8      	bne.n	8005710 <USBD_GetString+0x4e>
    }
  }
}
 800573e:	bf00      	nop
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005752:	e005      	b.n	8005760 <USBD_GetLen+0x1a>
  {
    len++;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	3301      	adds	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
    buf++;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3301      	adds	r3, #1
 800575e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1f5      	bne.n	8005754 <USBD_GetLen+0xe>
  }

  return len;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2202      	movs	r2, #2
 8005786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800578a:	88fa      	ldrh	r2, [r7, #6]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005790:	88fa      	ldrh	r2, [r7, #6]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	2100      	movs	r1, #0
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fc9d 	bl	80060dc <USBD_LL_Transmit>

  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80057ba:	88fb      	ldrh	r3, [r7, #6]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	2100      	movs	r1, #0
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fc8b 	bl	80060dc <USBD_LL_Transmit>

  return USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2203      	movs	r2, #3
 80057e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057f6:	88fb      	ldrh	r3, [r7, #6]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	2100      	movs	r1, #0
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 fc90 	bl	8006122 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	2100      	movs	r1, #0
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 fc7e 	bl	8006122 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2204      	movs	r2, #4
 800583c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005840:	2300      	movs	r3, #0
 8005842:	2200      	movs	r2, #0
 8005844:	2100      	movs	r1, #0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fc48 	bl	80060dc <USBD_LL_Transmit>

  return USBD_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2205      	movs	r2, #5
 8005862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005866:	2300      	movs	r3, #0
 8005868:	2200      	movs	r2, #0
 800586a:	2100      	movs	r1, #0
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fc58 	bl	8006122 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005880:	2200      	movs	r2, #0
 8005882:	4912      	ldr	r1, [pc, #72]	@ (80058cc <MX_USB_DEVICE_Init+0x50>)
 8005884:	4812      	ldr	r0, [pc, #72]	@ (80058d0 <MX_USB_DEVICE_Init+0x54>)
 8005886:	f7fe ff2a 	bl	80046de <USBD_Init>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005890:	f7fa fefc 	bl	800068c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005894:	490f      	ldr	r1, [pc, #60]	@ (80058d4 <MX_USB_DEVICE_Init+0x58>)
 8005896:	480e      	ldr	r0, [pc, #56]	@ (80058d0 <MX_USB_DEVICE_Init+0x54>)
 8005898:	f7fe ff4c 	bl	8004734 <USBD_RegisterClass>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80058a2:	f7fa fef3 	bl	800068c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80058a6:	490c      	ldr	r1, [pc, #48]	@ (80058d8 <MX_USB_DEVICE_Init+0x5c>)
 80058a8:	4809      	ldr	r0, [pc, #36]	@ (80058d0 <MX_USB_DEVICE_Init+0x54>)
 80058aa:	f7fe fe7d 	bl	80045a8 <USBD_CDC_RegisterInterface>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80058b4:	f7fa feea 	bl	800068c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80058b8:	4805      	ldr	r0, [pc, #20]	@ (80058d0 <MX_USB_DEVICE_Init+0x54>)
 80058ba:	f7fe ff54 	bl	8004766 <USBD_Start>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80058c4:	f7fa fee2 	bl	800068c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80058c8:	bf00      	nop
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2000012c 	.word	0x2000012c
 80058d0:	200001a0 	.word	0x200001a0
 80058d4:	20000018 	.word	0x20000018
 80058d8:	2000011c 	.word	0x2000011c

080058dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80058e0:	2200      	movs	r2, #0
 80058e2:	4905      	ldr	r1, [pc, #20]	@ (80058f8 <CDC_Init_FS+0x1c>)
 80058e4:	4805      	ldr	r0, [pc, #20]	@ (80058fc <CDC_Init_FS+0x20>)
 80058e6:	f7fe fe75 	bl	80045d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80058ea:	4905      	ldr	r1, [pc, #20]	@ (8005900 <CDC_Init_FS+0x24>)
 80058ec:	4803      	ldr	r0, [pc, #12]	@ (80058fc <CDC_Init_FS+0x20>)
 80058ee:	f7fe fe8a 	bl	8004606 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80058f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000864 	.word	0x20000864
 80058fc:	200001a0 	.word	0x200001a0
 8005900:	20000464 	.word	0x20000464

08005904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800590a:	4618      	mov	r0, r3
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
	...

08005914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	71fb      	strb	r3, [r7, #7]
 8005920:	4613      	mov	r3, r2
 8005922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	2b23      	cmp	r3, #35	@ 0x23
 8005928:	d84a      	bhi.n	80059c0 <CDC_Control_FS+0xac>
 800592a:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <CDC_Control_FS+0x1c>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	080059c1 	.word	0x080059c1
 8005934:	080059c1 	.word	0x080059c1
 8005938:	080059c1 	.word	0x080059c1
 800593c:	080059c1 	.word	0x080059c1
 8005940:	080059c1 	.word	0x080059c1
 8005944:	080059c1 	.word	0x080059c1
 8005948:	080059c1 	.word	0x080059c1
 800594c:	080059c1 	.word	0x080059c1
 8005950:	080059c1 	.word	0x080059c1
 8005954:	080059c1 	.word	0x080059c1
 8005958:	080059c1 	.word	0x080059c1
 800595c:	080059c1 	.word	0x080059c1
 8005960:	080059c1 	.word	0x080059c1
 8005964:	080059c1 	.word	0x080059c1
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059c1 	.word	0x080059c1
 8005970:	080059c1 	.word	0x080059c1
 8005974:	080059c1 	.word	0x080059c1
 8005978:	080059c1 	.word	0x080059c1
 800597c:	080059c1 	.word	0x080059c1
 8005980:	080059c1 	.word	0x080059c1
 8005984:	080059c1 	.word	0x080059c1
 8005988:	080059c1 	.word	0x080059c1
 800598c:	080059c1 	.word	0x080059c1
 8005990:	080059c1 	.word	0x080059c1
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059c1 	.word	0x080059c1
 800599c:	080059c1 	.word	0x080059c1
 80059a0:	080059c1 	.word	0x080059c1
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059c1 	.word	0x080059c1
 80059ac:	080059c1 	.word	0x080059c1
 80059b0:	080059c1 	.word	0x080059c1
 80059b4:	080059c1 	.word	0x080059c1
 80059b8:	080059c1 	.word	0x080059c1
 80059bc:	080059c1 	.word	0x080059c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80059c0:	bf00      	nop
  }

  return (USBD_OK);
 80059c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop

080059d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80059da:	6879      	ldr	r1, [r7, #4]
 80059dc:	4808      	ldr	r0, [pc, #32]	@ (8005a00 <CDC_Receive_FS+0x30>)
 80059de:	f7fe fe12 	bl	8004606 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80059e2:	4807      	ldr	r0, [pc, #28]	@ (8005a00 <CDC_Receive_FS+0x30>)
 80059e4:	f7fe fe51 	bl	800468a <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f807 	bl	8005a04 <CDC_Transmit_FS>
  return (USBD_OK);
 80059f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3708      	adds	r7, #8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	200001a0 	.word	0x200001a0

08005a04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005a14:	4b0d      	ldr	r3, [pc, #52]	@ (8005a4c <CDC_Transmit_FS+0x48>)
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005a1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e00b      	b.n	8005a42 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4806      	ldr	r0, [pc, #24]	@ (8005a4c <CDC_Transmit_FS+0x48>)
 8005a32:	f7fe fdcf 	bl	80045d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005a36:	4805      	ldr	r0, [pc, #20]	@ (8005a4c <CDC_Transmit_FS+0x48>)
 8005a38:	f7fe fdf8 	bl	800462c <USBD_CDC_TransmitPacket>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200001a0 	.word	0x200001a0

08005a50 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	4603      	mov	r3, r0
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2212      	movs	r2, #18
 8005a60:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005a62:	4b03      	ldr	r3, [pc, #12]	@ (8005a70 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000148 	.word	0x20000148

08005a74 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2204      	movs	r2, #4
 8005a84:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a86:	4b03      	ldr	r3, [pc, #12]	@ (8005a94 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	2000015c 	.word	0x2000015c

08005a98 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	6039      	str	r1, [r7, #0]
 8005aa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	4907      	ldr	r1, [pc, #28]	@ (8005acc <USBD_FS_ProductStrDescriptor+0x34>)
 8005aae:	4808      	ldr	r0, [pc, #32]	@ (8005ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ab0:	f7ff fe07 	bl	80056c2 <USBD_GetString>
 8005ab4:	e004      	b.n	8005ac0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	4904      	ldr	r1, [pc, #16]	@ (8005acc <USBD_FS_ProductStrDescriptor+0x34>)
 8005aba:	4805      	ldr	r0, [pc, #20]	@ (8005ad0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005abc:	f7ff fe01 	bl	80056c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ac0:	4b02      	ldr	r3, [pc, #8]	@ (8005acc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000c64 	.word	0x20000c64
 8005ad0:	08006284 	.word	0x08006284

08005ad4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	4904      	ldr	r1, [pc, #16]	@ (8005af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ae4:	4804      	ldr	r0, [pc, #16]	@ (8005af8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005ae6:	f7ff fdec 	bl	80056c2 <USBD_GetString>
  return USBD_StrDesc;
 8005aea:	4b02      	ldr	r3, [pc, #8]	@ (8005af4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000c64 	.word	0x20000c64
 8005af8:	0800629c 	.word	0x0800629c

08005afc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	6039      	str	r1, [r7, #0]
 8005b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	221a      	movs	r2, #26
 8005b0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005b0e:	f000 f843 	bl	8005b98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005b12:	4b02      	ldr	r3, [pc, #8]	@ (8005b1c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000160 	.word	0x20000160

08005b20 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d105      	bne.n	8005b3e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	4907      	ldr	r1, [pc, #28]	@ (8005b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b36:	4808      	ldr	r0, [pc, #32]	@ (8005b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b38:	f7ff fdc3 	bl	80056c2 <USBD_GetString>
 8005b3c:	e004      	b.n	8005b48 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	4904      	ldr	r1, [pc, #16]	@ (8005b54 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b42:	4805      	ldr	r0, [pc, #20]	@ (8005b58 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b44:	f7ff fdbd 	bl	80056c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b48:	4b02      	ldr	r3, [pc, #8]	@ (8005b54 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	20000c64 	.word	0x20000c64
 8005b58:	080062b0 	.word	0x080062b0

08005b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	6039      	str	r1, [r7, #0]
 8005b66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b68:	79fb      	ldrb	r3, [r7, #7]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	4907      	ldr	r1, [pc, #28]	@ (8005b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b72:	4808      	ldr	r0, [pc, #32]	@ (8005b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b74:	f7ff fda5 	bl	80056c2 <USBD_GetString>
 8005b78:	e004      	b.n	8005b84 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4904      	ldr	r1, [pc, #16]	@ (8005b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b7e:	4805      	ldr	r0, [pc, #20]	@ (8005b94 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b80:	f7ff fd9f 	bl	80056c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b84:	4b02      	ldr	r3, [pc, #8]	@ (8005b90 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000c64 	.word	0x20000c64
 8005b94:	080062bc 	.word	0x080062bc

08005b98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8005bdc <Get_SerialNum+0x44>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8005be0 <Get_SerialNum+0x48>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005baa:	4b0e      	ldr	r3, [pc, #56]	@ (8005be4 <Get_SerialNum+0x4c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	4909      	ldr	r1, [pc, #36]	@ (8005be8 <Get_SerialNum+0x50>)
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f814 	bl	8005bf0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005bc8:	2204      	movs	r2, #4
 8005bca:	4908      	ldr	r1, [pc, #32]	@ (8005bec <Get_SerialNum+0x54>)
 8005bcc:	68b8      	ldr	r0, [r7, #8]
 8005bce:	f000 f80f 	bl	8005bf0 <IntToUnicode>
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	1ffff7e8 	.word	0x1ffff7e8
 8005be0:	1ffff7ec 	.word	0x1ffff7ec
 8005be4:	1ffff7f0 	.word	0x1ffff7f0
 8005be8:	20000162 	.word	0x20000162
 8005bec:	20000172 	.word	0x20000172

08005bf0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]
 8005c06:	e027      	b.n	8005c58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	0f1b      	lsrs	r3, r3, #28
 8005c0c:	2b09      	cmp	r3, #9
 8005c0e:	d80b      	bhi.n	8005c28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	0f1b      	lsrs	r3, r3, #28
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	440b      	add	r3, r1
 8005c20:	3230      	adds	r2, #48	@ 0x30
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e00a      	b.n	8005c3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	0f1b      	lsrs	r3, r3, #28
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	4619      	mov	r1, r3
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	440b      	add	r3, r1
 8005c38:	3237      	adds	r2, #55	@ 0x37
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	3301      	adds	r3, #1
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	2200      	movs	r2, #0
 8005c50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	3301      	adds	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
 8005c58:	7dfa      	ldrb	r2, [r7, #23]
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d3d3      	bcc.n	8005c08 <IntToUnicode+0x18>
  }
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr

08005c6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c7c:	d113      	bne.n	8005ca6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <HAL_PCD_MspInit+0x44>)
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb0 <HAL_PCD_MspInit+0x44>)
 8005c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c88:	6153      	str	r3, [r2, #20]
 8005c8a:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <HAL_PCD_MspInit+0x44>)
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2043      	movs	r0, #67	@ 0x43
 8005c9c:	f7fa feed 	bl	8000a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ca0:	2043      	movs	r0, #67	@ 0x43
 8005ca2:	f7fa ff06 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fe fd93 	bl	80047f6 <USBD_LL_SetupStage>
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8005cea:	78fa      	ldrb	r2, [r7, #3]
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	4619      	mov	r1, r3
 8005d02:	f7fe fdc5 	bl	8004890 <USBD_LL_DataOutStage>
}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b082      	sub	sp, #8
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	4413      	add	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3348      	adds	r3, #72	@ 0x48
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	78fb      	ldrb	r3, [r7, #3]
 8005d34:	4619      	mov	r1, r3
 8005d36:	f7fe fe1c 	bl	8004972 <USBD_LL_DataInStage>
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe ff2c 	bl	8004bae <USBD_LL_SOF>
}
 8005d56:	bf00      	nop
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005d66:	2301      	movs	r3, #1
 8005d68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d001      	beq.n	8005d76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005d72:	f7fa fc8b 	bl	800068c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005d7c:	7bfa      	ldrb	r2, [r7, #15]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fe fedc 	bl	8004b3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fe fe95 	bl	8004abc <USBD_LL_Reset>
}
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe fed6 	bl	8004b5c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6812      	ldr	r2, [r2, #0]
 8005dbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005dc2:	f043 0301 	orr.w	r3, r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a1b      	ldr	r3, [r3, #32]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <HAL_PCD_SuspendCallback+0x48>)
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	4a03      	ldr	r2, [pc, #12]	@ (8005de4 <HAL_PCD_SuspendCallback+0x48>)
 8005dd6:	f043 0306 	orr.w	r3, r3, #6
 8005dda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fe fec4 	bl	8004b84 <USBD_LL_Resume>
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005e16:	78fa      	ldrb	r2, [r7, #3]
 8005e18:	4611      	mov	r1, r2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fe feed 	bl	8004bfa <USBD_LL_IsoOUTIncomplete>
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe fecf 	bl	8004be2 <USBD_LL_IsoINIncomplete>
}
 8005e44:	bf00      	nop
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fed9 	bl	8004c12 <USBD_LL_DevConnected>
}
 8005e60:	bf00      	nop
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fe fed5 	bl	8004c26 <USBD_LL_DevDisconnected>
}
 8005e7c:	bf00      	nop
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d133      	bne.n	8005efc <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005e94:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ea0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ea4:	4b18      	ldr	r3, [pc, #96]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ea6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005eaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005eac:	4b16      	ldr	r3, [pc, #88]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005eae:	2204      	movs	r2, #4
 8005eb0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005eb2:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005eb8:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005eba:	2202      	movs	r2, #2
 8005ebc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005ebe:	4b12      	ldr	r3, [pc, #72]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ec4:	4b10      	ldr	r3, [pc, #64]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005eca:	4b0f      	ldr	r3, [pc, #60]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005ed0:	480d      	ldr	r0, [pc, #52]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ed2:	f7fa ff8d 	bl	8000df0 <HAL_PCD_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8005edc:	f7fa fbd6 	bl	800068c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005ee0:	2180      	movs	r1, #128	@ 0x80
 8005ee2:	4809      	ldr	r0, [pc, #36]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ee4:	f7fc f8a6 	bl	8002034 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005ee8:	2240      	movs	r2, #64	@ 0x40
 8005eea:	2100      	movs	r1, #0
 8005eec:	4806      	ldr	r0, [pc, #24]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005eee:	f7fc f85b 	bl	8001fa8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005ef2:	2280      	movs	r2, #128	@ 0x80
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	4804      	ldr	r0, [pc, #16]	@ (8005f08 <USBD_LL_Init+0x84>)
 8005ef8:	f7fc f856 	bl	8001fa8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000e64 	.word	0x20000e64

08005f0c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fb f881 	bl	800102a <HAL_PCD_Start>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f000 f944 	bl	80061bc <USBD_Get_USB_Status>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	4608      	mov	r0, r1
 8005f4c:	4611      	mov	r1, r2
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4603      	mov	r3, r0
 8005f52:	70fb      	strb	r3, [r7, #3]
 8005f54:	460b      	mov	r3, r1
 8005f56:	70bb      	strb	r3, [r7, #2]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8005f6a:	78bb      	ldrb	r3, [r7, #2]
 8005f6c:	883a      	ldrh	r2, [r7, #0]
 8005f6e:	78f9      	ldrb	r1, [r7, #3]
 8005f70:	f7fb fcfa 	bl	8001968 <HAL_PCD_EP_Open>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 f91e 	bl	80061bc <USBD_Get_USB_Status>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fa8:	78fa      	ldrb	r2, [r7, #3]
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fb fd43 	bl	8001a38 <HAL_PCD_EP_Close>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f8ff 	bl	80061bc <USBD_Get_USB_Status>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fb fde8 	bl	8001bc0 <HAL_PCD_EP_SetStall>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f8e0 	bl	80061bc <USBD_Get_USB_Status>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006000:	7bbb      	ldrb	r3, [r7, #14]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	460b      	mov	r3, r1
 8006014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	4611      	mov	r1, r2
 8006028:	4618      	mov	r0, r3
 800602a:	f7fb fe2b 	bl	8001c84 <HAL_PCD_EP_ClrStall>
 800602e:	4603      	mov	r3, r0
 8006030:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f8c1 	bl	80061bc <USBD_Get_USB_Status>
 800603a:	4603      	mov	r3, r0
 800603c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800603e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800605a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800605c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da0b      	bge.n	800607c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800606a:	68f9      	ldr	r1, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	333e      	adds	r3, #62	@ 0x3e
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	e00b      	b.n	8006094 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8006092:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b084      	sub	sp, #16
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fb fc2e 	bl	800191e <HAL_PCD_SetAddress>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f877 	bl	80061bc <USBD_Get_USB_Status>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	607a      	str	r2, [r7, #4]
 80060e6:	461a      	mov	r2, r3
 80060e8:	460b      	mov	r3, r1
 80060ea:	72fb      	strb	r3, [r7, #11]
 80060ec:	4613      	mov	r3, r2
 80060ee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80060fe:	893b      	ldrh	r3, [r7, #8]
 8006100:	7af9      	ldrb	r1, [r7, #11]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	f7fb fd2b 	bl	8001b5e <HAL_PCD_EP_Transmit>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f854 	bl	80061bc <USBD_Get_USB_Status>
 8006114:	4603      	mov	r3, r0
 8006116:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006118:	7dbb      	ldrb	r3, [r7, #22]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	607a      	str	r2, [r7, #4]
 800612c:	461a      	mov	r2, r3
 800612e:	460b      	mov	r3, r1
 8006130:	72fb      	strb	r3, [r7, #11]
 8006132:	4613      	mov	r3, r2
 8006134:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8006144:	893b      	ldrh	r3, [r7, #8]
 8006146:	7af9      	ldrb	r1, [r7, #11]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	f7fb fcbf 	bl	8001acc <HAL_PCD_EP_Receive>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 f831 	bl	80061bc <USBD_Get_USB_Status>
 800615a:	4603      	mov	r3, r0
 800615c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800615e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	460b      	mov	r3, r1
 8006172:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb fcd6 	bl	8001b30 <HAL_PCD_EP_GetRxCount>
 8006184:	4603      	mov	r3, r0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006198:	4b02      	ldr	r3, [pc, #8]	@ (80061a4 <USBD_static_malloc+0x14>)
}
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	bc80      	pop	{r7}
 80061a2:	4770      	bx	lr
 80061a4:	20001368 	.word	0x20001368

080061a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr
	...

080061bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d817      	bhi.n	8006200 <USBD_Get_USB_Status+0x44>
 80061d0:	a201      	add	r2, pc, #4	@ (adr r2, 80061d8 <USBD_Get_USB_Status+0x1c>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061ef 	.word	0x080061ef
 80061e0:	080061f5 	.word	0x080061f5
 80061e4:	080061fb 	.word	0x080061fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
    break;
 80061ec:	e00b      	b.n	8006206 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80061ee:	2302      	movs	r3, #2
 80061f0:	73fb      	strb	r3, [r7, #15]
    break;
 80061f2:	e008      	b.n	8006206 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
    break;
 80061f8:	e005      	b.n	8006206 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80061fa:	2302      	movs	r3, #2
 80061fc:	73fb      	strb	r3, [r7, #15]
    break;
 80061fe:	e002      	b.n	8006206 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006200:	2302      	movs	r3, #2
 8006202:	73fb      	strb	r3, [r7, #15]
    break;
 8006204:	bf00      	nop
  }
  return usb_status;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop

08006214 <memset>:
 8006214:	4603      	mov	r3, r0
 8006216:	4402      	add	r2, r0
 8006218:	4293      	cmp	r3, r2
 800621a:	d100      	bne.n	800621e <memset+0xa>
 800621c:	4770      	bx	lr
 800621e:	f803 1b01 	strb.w	r1, [r3], #1
 8006222:	e7f9      	b.n	8006218 <memset+0x4>

08006224 <__libc_init_array>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	2600      	movs	r6, #0
 8006228:	4d0c      	ldr	r5, [pc, #48]	@ (800625c <__libc_init_array+0x38>)
 800622a:	4c0d      	ldr	r4, [pc, #52]	@ (8006260 <__libc_init_array+0x3c>)
 800622c:	1b64      	subs	r4, r4, r5
 800622e:	10a4      	asrs	r4, r4, #2
 8006230:	42a6      	cmp	r6, r4
 8006232:	d109      	bne.n	8006248 <__libc_init_array+0x24>
 8006234:	f000 f81a 	bl	800626c <_init>
 8006238:	2600      	movs	r6, #0
 800623a:	4d0a      	ldr	r5, [pc, #40]	@ (8006264 <__libc_init_array+0x40>)
 800623c:	4c0a      	ldr	r4, [pc, #40]	@ (8006268 <__libc_init_array+0x44>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	42a6      	cmp	r6, r4
 8006244:	d105      	bne.n	8006252 <__libc_init_array+0x2e>
 8006246:	bd70      	pop	{r4, r5, r6, pc}
 8006248:	f855 3b04 	ldr.w	r3, [r5], #4
 800624c:	4798      	blx	r3
 800624e:	3601      	adds	r6, #1
 8006250:	e7ee      	b.n	8006230 <__libc_init_array+0xc>
 8006252:	f855 3b04 	ldr.w	r3, [r5], #4
 8006256:	4798      	blx	r3
 8006258:	3601      	adds	r6, #1
 800625a:	e7f2      	b.n	8006242 <__libc_init_array+0x1e>
 800625c:	08006304 	.word	0x08006304
 8006260:	08006304 	.word	0x08006304
 8006264:	08006304 	.word	0x08006304
 8006268:	08006308 	.word	0x08006308

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
