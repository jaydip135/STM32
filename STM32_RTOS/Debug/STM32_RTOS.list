
STM32_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004324  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004668  08004668  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004668  08004668  00005668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004670  08004670  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004678  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  20000060  080046d8  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  080046d8  00006648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012623  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b94  00000000  00000000  000186ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  0001b240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cea  00000000  00000000  0001c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e92  00000000  00000000  0001cfc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000131f6  00000000  00000000  0003de54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c23c6  00000000  00000000  0005104a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113410  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047f4  00000000  00000000  00113454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00117c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	080044fc 	.word	0x080044fc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	080044fc 	.word	0x080044fc

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b968 	b.w	8000518 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fbb1 f4f7 	udiv	r4, r1, r7
 8000296:	fb07 1114 	mls	r1, r7, r4, r1
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8110 	bcs.w	80004da <__udivmoddi4+0x27a>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810d 	bls.w	80004da <__udivmoddi4+0x27a>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ca:	fb07 1110 	mls	r1, r7, r0, r1
 80002ce:	fb00 f606 	mul.w	r6, r0, r6
 80002d2:	fa1f f38e 	uxth.w	r3, lr
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fa 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f7 	bls.w	80004de <__udivmoddi4+0x27e>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	1b9b      	subs	r3, r3, r6
 80002f8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80ee 	bcc.w	8000508 <__udivmoddi4+0x2a8>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 808f 	bne.w	8000462 <__udivmoddi4+0x202>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	2101      	movs	r1, #1
 800034a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034e:	fa1f f78c 	uxth.w	r7, ip
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	fb08 4416 	mls	r4, r8, r6, r4
 800035a:	fb07 f006 	mul.w	r0, r7, r6
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000382:	fb08 4410 	mls	r4, r8, r0, r4
 8000386:	fb00 f707 	mul.w	r7, r0, r7
 800038a:	fa1f f38e 	uxth.w	r3, lr
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80ae 	bhi.w	8000502 <__udivmoddi4+0x2a2>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f607 	lsr.w	r6, r4, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb6 f8f9 	udiv	r8, r6, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 6618 	mls	r6, r9, r8, r6
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fa00 fa01 	lsl.w	sl, r0, r1
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	431c      	orrs	r4, r3
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003e8:	4298      	cmp	r0, r3
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	eb1c 0303 	adds.w	r3, ip, r3
 80003f4:	f108 36ff 	add.w	r6, r8, #4294967295
 80003f8:	f080 8081 	bcs.w	80004fe <__udivmoddi4+0x29e>
 80003fc:	4298      	cmp	r0, r3
 80003fe:	d97e      	bls.n	80004fe <__udivmoddi4+0x29e>
 8000400:	f1a8 0802 	sub.w	r8, r8, #2
 8000404:	4463      	add	r3, ip
 8000406:	1a1e      	subs	r6, r3, r0
 8000408:	fbb6 f3f9 	udiv	r3, r6, r9
 800040c:	fb09 6613 	mls	r6, r9, r3, r6
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	b2a4      	uxth	r4, r4
 8000416:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800041a:	45a6      	cmp	lr, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1d0>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f103 30ff 	add.w	r0, r3, #4294967295
 8000426:	d266      	bcs.n	80004f6 <__udivmoddi4+0x296>
 8000428:	45a6      	cmp	lr, r4
 800042a:	d964      	bls.n	80004f6 <__udivmoddi4+0x296>
 800042c:	3b02      	subs	r3, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000434:	fba0 8302 	umull	r8, r3, r0, r2
 8000438:	eba4 040e 	sub.w	r4, r4, lr
 800043c:	429c      	cmp	r4, r3
 800043e:	46c6      	mov	lr, r8
 8000440:	461e      	mov	r6, r3
 8000442:	d350      	bcc.n	80004e6 <__udivmoddi4+0x286>
 8000444:	d04d      	beq.n	80004e2 <__udivmoddi4+0x282>
 8000446:	b155      	cbz	r5, 800045e <__udivmoddi4+0x1fe>
 8000448:	ebba 030e 	subs.w	r3, sl, lr
 800044c:	eb64 0406 	sbc.w	r4, r4, r6
 8000450:	fa04 f707 	lsl.w	r7, r4, r7
 8000454:	40cb      	lsrs	r3, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	40cc      	lsrs	r4, r1
 800045a:	e9c5 7400 	strd	r7, r4, [r5]
 800045e:	2100      	movs	r1, #0
 8000460:	e751      	b.n	8000306 <__udivmoddi4+0xa6>
 8000462:	fa0c fc02 	lsl.w	ip, ip, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	40d9      	lsrs	r1, r3
 800046c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000470:	fa20 f303 	lsr.w	r3, r0, r3
 8000474:	fa00 fe02 	lsl.w	lr, r0, r2
 8000478:	fbb1 f0f8 	udiv	r0, r1, r8
 800047c:	fb08 1110 	mls	r1, r8, r0, r1
 8000480:	4094      	lsls	r4, r2
 8000482:	431c      	orrs	r4, r3
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	0c23      	lsrs	r3, r4, #16
 800048a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048e:	fb00 f107 	mul.w	r1, r0, r7
 8000492:	4299      	cmp	r1, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x248>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 36ff 	add.w	r6, r0, #4294967295
 800049e:	d22c      	bcs.n	80004fa <__udivmoddi4+0x29a>
 80004a0:	4299      	cmp	r1, r3
 80004a2:	d92a      	bls.n	80004fa <__udivmoddi4+0x29a>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	fbb3 f1f8 	udiv	r1, r3, r8
 80004ae:	fb08 3311 	mls	r3, r8, r1, r3
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb01 f307 	mul.w	r3, r1, r7
 80004bc:	42a3      	cmp	r3, r4
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x272>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004c8:	d213      	bcs.n	80004f2 <__udivmoddi4+0x292>
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	d911      	bls.n	80004f2 <__udivmoddi4+0x292>
 80004ce:	3902      	subs	r1, #2
 80004d0:	4464      	add	r4, ip
 80004d2:	1ae4      	subs	r4, r4, r3
 80004d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004d8:	e73b      	b.n	8000352 <__udivmoddi4+0xf2>
 80004da:	4604      	mov	r4, r0
 80004dc:	e6f2      	b.n	80002c4 <__udivmoddi4+0x64>
 80004de:	4608      	mov	r0, r1
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e2:	45c2      	cmp	sl, r8
 80004e4:	d2af      	bcs.n	8000446 <__udivmoddi4+0x1e6>
 80004e6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ea:	eb63 060c 	sbc.w	r6, r3, ip
 80004ee:	3801      	subs	r0, #1
 80004f0:	e7a9      	b.n	8000446 <__udivmoddi4+0x1e6>
 80004f2:	4631      	mov	r1, r6
 80004f4:	e7ed      	b.n	80004d2 <__udivmoddi4+0x272>
 80004f6:	4603      	mov	r3, r0
 80004f8:	e79a      	b.n	8000430 <__udivmoddi4+0x1d0>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e7d4      	b.n	80004a8 <__udivmoddi4+0x248>
 80004fe:	46b0      	mov	r8, r6
 8000500:	e781      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000502:	4463      	add	r3, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e74f      	b.n	80003a8 <__udivmoddi4+0x148>
 8000508:	4606      	mov	r6, r0
 800050a:	4623      	mov	r3, r4
 800050c:	4608      	mov	r0, r1
 800050e:	e711      	b.n	8000334 <__udivmoddi4+0xd4>
 8000510:	3e02      	subs	r6, #2
 8000512:	4463      	add	r3, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x11c>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <vApplicationGetIdleTaskMemory+0x28>)
 800052c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800052e:	68bb      	ldr	r3, [r7, #8]
 8000530:	4a05      	ldr	r2, [pc, #20]	@ (8000548 <vApplicationGetIdleTaskMemory+0x2c>)
 8000532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2280      	movs	r2, #128	@ 0x80
 8000538:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	2000007c 	.word	0x2000007c
 8000548:	2000011c 	.word	0x2000011c

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b096      	sub	sp, #88	@ 0x58
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000552:	f000 fb17 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000556:	f000 f84b 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055a:	f000 f8df 	bl	800071c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800055e:	f000 f8b3 	bl	80006c8 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <main+0x8c>)
 8000564:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000568:	461d      	mov	r5, r3
 800056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000572:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000576:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fceb 	bl	8002f58 <osThreadCreate>
 8000582:	4603      	mov	r3, r0
 8000584:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <main+0x90>)
 8000586:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <main+0x94>)
 800058a:	f107 0420 	add.w	r4, r7, #32
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fcd8 	bl	8002f58 <osThreadCreate>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a0e      	ldr	r2, [pc, #56]	@ (80005e4 <main+0x98>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityAboveNormal, 0, 128);
 80005ae:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <main+0x9c>)
 80005b0:	1d3c      	adds	r4, r7, #4
 80005b2:	461d      	mov	r5, r3
 80005b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f002 fcc7 	bl	8002f58 <osThreadCreate>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a07      	ldr	r2, [pc, #28]	@ (80005ec <main+0xa0>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 fcbb 	bl	8002f4a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <main+0x88>
 80005d8:	08004520 	.word	0x08004520
 80005dc:	20000364 	.word	0x20000364
 80005e0:	08004548 	.word	0x08004548
 80005e4:	20000368 	.word	0x20000368
 80005e8:	08004570 	.word	0x08004570
 80005ec:	2000036c 	.word	0x2000036c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2238      	movs	r2, #56	@ 0x38
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fea4 	bl	800434c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800061c:	2304      	movs	r3, #4
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000634:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800063e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000644:	2340      	movs	r3, #64	@ 0x40
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0318 	add.w	r3, r7, #24
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe71 	bl	8001334 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000658:	f000 f91c 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f972 	bl	8001960 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000682:	f000 f907 	bl	8000894 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 8000686:	2200      	movs	r2, #0
 8000688:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 800068c:	2000      	movs	r0, #0
 800068e:	f001 fa51 	bl	8001b34 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8000692:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800069a:	4a09      	ldr	r2, [pc, #36]	@ (80006c0 <SystemClock_Config+0xd0>)
 800069c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <SystemClock_Config+0xd0>)
 80006a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80006aa:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <SystemClock_Config+0xd0>)
 80006ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006b2:	4b04      	ldr	r3, [pc, #16]	@ (80006c4 <SystemClock_Config+0xd4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	@ 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	42420070 	.word	0x42420070

080006c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_USART1_UART_Init+0x50>)
 80006d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ec:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006ee:	220c      	movs	r2, #12
 80006f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <MX_USART1_UART_Init+0x4c>)
 8000700:	f001 fde8 	bl	80022d4 <HAL_UART_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800070a:	f000 f8c3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000031c 	.word	0x2000031c
 8000718:	40013800 	.word	0x40013800

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_GPIO_Init+0x68>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_GPIO_Init+0x68>)
 8000736:	f043 0304 	orr.w	r3, r3, #4
 800073a:	6193      	str	r3, [r2, #24]
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_GPIO_Init+0x68>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_GPIO_Init+0x68>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a0d      	ldr	r2, [pc, #52]	@ (8000784 <MX_GPIO_Init+0x68>)
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_GPIO_Init+0x68>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0308 	and.w	r3, r3, #8
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000760:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4619      	mov	r1, r3
 8000774:	4804      	ldr	r0, [pc, #16]	@ (8000788 <MX_GPIO_Init+0x6c>)
 8000776:	f000 fc59 	bl	800102c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	40010800 	.word	0x40010800

0800078c <StartTask02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b08e      	sub	sp, #56	@ 0x38
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char buf[] = "Hello From Task2 Who have Normal Priority\n";
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <StartTask02+0x44>)
 8000796:	f107 040c 	add.w	r4, r7, #12
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a8:	c403      	stmia	r4!, {r0, r1}
 80007aa:	8022      	strh	r2, [r4, #0]
 80007ac:	3402      	adds	r4, #2
 80007ae:	0c13      	lsrs	r3, r2, #16
 80007b0:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 80007b2:	f107 010c 	add.w	r1, r7, #12
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	222a      	movs	r2, #42	@ 0x2a
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <StartTask02+0x48>)
 80007be:	f001 fdd9 	bl	8002374 <HAL_UART_Transmit>
	  osDelay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007c6:	f002 fc13 	bl	8002ff0 <osDelay>
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 80007ca:	bf00      	nop
 80007cc:	e7f1      	b.n	80007b2 <StartTask02+0x26>
 80007ce:	bf00      	nop
 80007d0:	0800458c 	.word	0x0800458c
 80007d4:	2000031c 	.word	0x2000031c

080007d8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80007d8:	b5b0      	push	{r4, r5, r7, lr}
 80007da:	b090      	sub	sp, #64	@ 0x40
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	char buf[] = "Hello From Task3 Who have Below the Normal Priority\n\n";
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <StartTask03+0x44>)
 80007e2:	f107 0408 	add.w	r4, r7, #8
 80007e6:	461d      	mov	r5, r3
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f8:	6020      	str	r0, [r4, #0]
 80007fa:	3404      	adds	r4, #4
 80007fc:	8021      	strh	r1, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 80007fe:	f107 0108 	add.w	r1, r7, #8
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2235      	movs	r2, #53	@ 0x35
 8000808:	4805      	ldr	r0, [pc, #20]	@ (8000820 <StartTask03+0x48>)
 800080a:	f001 fdb3 	bl	8002374 <HAL_UART_Transmit>
	  osDelay(1000);
 800080e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000812:	f002 fbed 	bl	8002ff0 <osDelay>
	  HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 8000816:	bf00      	nop
 8000818:	e7f1      	b.n	80007fe <StartTask03+0x26>
 800081a:	bf00      	nop
 800081c:	080045b8 	.word	0x080045b8
 8000820:	2000031c 	.word	0x2000031c

08000824 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b090      	sub	sp, #64	@ 0x40
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
	char buf[] = "\nHello From Task1 Who have Above the Normal Priority\n";
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <StartTask01+0x44>)
 800082e:	f107 0408 	add.w	r4, r7, #8
 8000832:	461d      	mov	r5, r3
 8000834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000840:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000844:	6020      	str	r0, [r4, #0]
 8000846:	3404      	adds	r4, #4
 8000848:	8021      	strh	r1, [r4, #0]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 800084a:	f107 0108 	add.w	r1, r7, #8
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	2235      	movs	r2, #53	@ 0x35
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <StartTask01+0x48>)
 8000856:	f001 fd8d 	bl	8002374 <HAL_UART_Transmit>
    osDelay(1000);
 800085a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800085e:	f002 fbc7 	bl	8002ff0 <osDelay>
	HAL_UART_Transmit(&huart1,(uint8_t *)buf,sizeof(buf)-1,HAL_MAX_DELAY);
 8000862:	bf00      	nop
 8000864:	e7f1      	b.n	800084a <StartTask01+0x26>
 8000866:	bf00      	nop
 8000868:	080045f0 	.word	0x080045f0
 800086c:	2000031c 	.word	0x2000031c

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 f995 	bl	8000bb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40000400 	.word	0x40000400

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_MspInit+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <HAL_MspInit+0x68>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6193      	str	r3, [r2, #24]
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_MspInit+0x68>)
 80008b4:	699b      	ldr	r3, [r3, #24]
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <HAL_MspInit+0x68>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a11      	ldr	r2, [pc, #68]	@ (8000908 <HAL_MspInit+0x68>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <HAL_MspInit+0x68>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	210f      	movs	r1, #15
 80008da:	f06f 0001 	mvn.w	r0, #1
 80008de:	f000 fa38 	bl	8000d52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_MspInit+0x6c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4a04      	ldr	r2, [pc, #16]	@ (800090c <HAL_MspInit+0x6c>)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021000 	.word	0x40021000
 800090c:	40010000 	.word	0x40010000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a26      	ldr	r2, [pc, #152]	@ (80009c4 <HAL_UART_MspInit+0xb4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d145      	bne.n	80009bc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000930:	4b25      	ldr	r3, [pc, #148]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 8000936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a1e      	ldr	r2, [pc, #120]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <HAL_UART_MspInit+0xb8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000960:	2340      	movs	r3, #64	@ 0x40
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	4816      	ldr	r0, [pc, #88]	@ (80009cc <HAL_UART_MspInit+0xbc>)
 8000974:	f000 fb5a 	bl	800102c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	4810      	ldr	r0, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0xbc>)
 800098c:	f000 fb4e 	bl	800102c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <HAL_UART_MspInit+0xc0>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
 8000996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000998:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_UART_MspInit+0xc0>)
 80009a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009aa:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2105      	movs	r1, #5
 80009b0:	2025      	movs	r0, #37	@ 0x25
 80009b2:	f000 f9ce 	bl	8000d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b6:	2025      	movs	r0, #37	@ 0x25
 80009b8:	f000 f9e7 	bl	8000d8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	@ 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40013800 	.word	0x40013800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010c00 	.word	0x40010c00
 80009d0:	40010000 	.word	0x40010000

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08e      	sub	sp, #56	@ 0x38
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80009ea:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <HAL_InitTick+0xe8>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <HAL_InitTick+0xe8>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	61d3      	str	r3, [r2, #28]
 80009f6:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <HAL_InitTick+0xe8>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a02:	f107 0210 	add.w	r2, r7, #16
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 f9b7 	bl	8001d80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d103      	bne.n	8000a24 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a1c:	f001 f988 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8000a20:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a22:	e004      	b.n	8000a2e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a24:	f001 f984 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a30:	4a23      	ldr	r2, [pc, #140]	@ (8000ac0 <HAL_InitTick+0xec>)
 8000a32:	fba2 2303 	umull	r2, r3, r2, r3
 8000a36:	0c9b      	lsrs	r3, r3, #18
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a3e:	4a22      	ldr	r2, [pc, #136]	@ (8000ac8 <HAL_InitTick+0xf4>)
 8000a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000a42:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a44:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a48:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a4e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000a62:	4818      	ldr	r0, [pc, #96]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a64:	f001 f9da 	bl	8001e1c <HAL_TIM_Base_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d11b      	bne.n	8000aae <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000a76:	4813      	ldr	r0, [pc, #76]	@ (8000ac4 <HAL_InitTick+0xf0>)
 8000a78:	f001 fa28 	bl	8001ecc <HAL_TIM_Base_Start_IT>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d111      	bne.n	8000aae <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a8a:	201d      	movs	r0, #29
 8000a8c:	f000 f97d 	bl	8000d8a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d808      	bhi.n	8000aa8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000a96:	2200      	movs	r2, #0
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	201d      	movs	r0, #29
 8000a9c:	f000 f959 	bl	8000d52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000acc <HAL_InitTick+0xf8>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
 8000aa6:	e002      	b.n	8000aae <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3738      	adds	r7, #56	@ 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	20000370 	.word	0x20000370
 8000ac8:	40000400 	.word	0x40000400
 8000acc:	20000004 	.word	0x20000004

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b08:	4802      	ldr	r0, [pc, #8]	@ (8000b14 <TIM3_IRQHandler+0x10>)
 8000b0a:	f001 fa39 	bl	8001f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000370 	.word	0x20000370

08000b18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <USART1_IRQHandler+0x10>)
 8000b1e:	f001 fcad 	bl	800247c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000031c 	.word	0x2000031c

08000b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff fff8 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b3e:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b40:	4a0c      	ldr	r2, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b54:	4c09      	ldr	r4, [pc, #36]	@ (8000b7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 fc51 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fcf1 	bl	800054c <main>
  bx lr
 8000b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b74:	08004678 	.word	0x08004678
  ldr r2, =_sbss
 8000b78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b7c:	20001648 	.word	0x20001648

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>
	...

08000b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <HAL_Init+0x28>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a07      	ldr	r2, [pc, #28]	@ (8000bac <HAL_Init+0x28>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f8d1 	bl	8000d3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff ff1a 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba0:	f7ff fe7e 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40022000 	.word	0x40022000

08000bb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_IncTick+0x1c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a03      	ldr	r2, [pc, #12]	@ (8000bd0 <HAL_IncTick+0x20>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200003b8 	.word	0x200003b8

08000bd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b02      	ldr	r3, [pc, #8]	@ (8000be4 <HAL_GetTick+0x10>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	200003b8 	.word	0x200003b8

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4906      	ldr	r1, [pc, #24]	@ (8000c80 <__NVIC_EnableIRQ+0x34>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	@ (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	@ (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	@ 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	@ 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ff4f 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	4603      	mov	r3, r0
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d64:	f7ff ff64 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68b9      	ldr	r1, [r7, #8]
 8000d6e:	6978      	ldr	r0, [r7, #20]
 8000d70:	f7ff ffb2 	bl	8000cd8 <NVIC_EncodePriority>
 8000d74:	4602      	mov	r2, r0
 8000d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ff81 	bl	8000c84 <__NVIC_SetPriority>
}
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff57 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d008      	beq.n	8000dd0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e020      	b.n	8000e12 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000df8:	2101      	movs	r1, #1
 8000dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2201      	movs	r2, #1
 8000e04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d005      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2204      	movs	r2, #4
 8000e38:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
 8000e3e:	e0d6      	b.n	8000fee <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 020e 	bic.w	r2, r2, #14
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b64      	ldr	r3, [pc, #400]	@ (8000ff8 <HAL_DMA_Abort_IT+0x1dc>)
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d958      	bls.n	8000f1e <HAL_DMA_Abort_IT+0x102>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a62      	ldr	r2, [pc, #392]	@ (8000ffc <HAL_DMA_Abort_IT+0x1e0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d04f      	beq.n	8000f16 <HAL_DMA_Abort_IT+0xfa>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a61      	ldr	r2, [pc, #388]	@ (8001000 <HAL_DMA_Abort_IT+0x1e4>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d048      	beq.n	8000f12 <HAL_DMA_Abort_IT+0xf6>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a5f      	ldr	r2, [pc, #380]	@ (8001004 <HAL_DMA_Abort_IT+0x1e8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d040      	beq.n	8000f0c <HAL_DMA_Abort_IT+0xf0>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001008 <HAL_DMA_Abort_IT+0x1ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d038      	beq.n	8000f06 <HAL_DMA_Abort_IT+0xea>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a5c      	ldr	r2, [pc, #368]	@ (800100c <HAL_DMA_Abort_IT+0x1f0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d030      	beq.n	8000f00 <HAL_DMA_Abort_IT+0xe4>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8001010 <HAL_DMA_Abort_IT+0x1f4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d028      	beq.n	8000efa <HAL_DMA_Abort_IT+0xde>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a52      	ldr	r2, [pc, #328]	@ (8000ff8 <HAL_DMA_Abort_IT+0x1dc>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d020      	beq.n	8000ef4 <HAL_DMA_Abort_IT+0xd8>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a57      	ldr	r2, [pc, #348]	@ (8001014 <HAL_DMA_Abort_IT+0x1f8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d019      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0xd4>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a55      	ldr	r2, [pc, #340]	@ (8001018 <HAL_DMA_Abort_IT+0x1fc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d012      	beq.n	8000eec <HAL_DMA_Abort_IT+0xd0>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a54      	ldr	r2, [pc, #336]	@ (800101c <HAL_DMA_Abort_IT+0x200>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00a      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0xca>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a52      	ldr	r2, [pc, #328]	@ (8001020 <HAL_DMA_Abort_IT+0x204>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d102      	bne.n	8000ee0 <HAL_DMA_Abort_IT+0xc4>
 8000eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ede:	e01b      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000ee0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ee4:	e018      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eea:	e015      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000eec:	2310      	movs	r3, #16
 8000eee:	e013      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e011      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ef8:	e00e      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000efa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000efe:	e00b      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000f00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f04:	e008      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000f06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f0a:	e005      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f10:	e002      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000f12:	2310      	movs	r3, #16
 8000f14:	e000      	b.n	8000f18 <HAL_DMA_Abort_IT+0xfc>
 8000f16:	2301      	movs	r3, #1
 8000f18:	4a42      	ldr	r2, [pc, #264]	@ (8001024 <HAL_DMA_Abort_IT+0x208>)
 8000f1a:	6053      	str	r3, [r2, #4]
 8000f1c:	e057      	b.n	8000fce <HAL_DMA_Abort_IT+0x1b2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a36      	ldr	r2, [pc, #216]	@ (8000ffc <HAL_DMA_Abort_IT+0x1e0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d04f      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x1ac>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a34      	ldr	r2, [pc, #208]	@ (8001000 <HAL_DMA_Abort_IT+0x1e4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d048      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0x1a8>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a33      	ldr	r2, [pc, #204]	@ (8001004 <HAL_DMA_Abort_IT+0x1e8>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d040      	beq.n	8000fbe <HAL_DMA_Abort_IT+0x1a2>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a31      	ldr	r2, [pc, #196]	@ (8001008 <HAL_DMA_Abort_IT+0x1ec>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d038      	beq.n	8000fb8 <HAL_DMA_Abort_IT+0x19c>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a30      	ldr	r2, [pc, #192]	@ (800100c <HAL_DMA_Abort_IT+0x1f0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d030      	beq.n	8000fb2 <HAL_DMA_Abort_IT+0x196>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a2e      	ldr	r2, [pc, #184]	@ (8001010 <HAL_DMA_Abort_IT+0x1f4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d028      	beq.n	8000fac <HAL_DMA_Abort_IT+0x190>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <HAL_DMA_Abort_IT+0x1dc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d020      	beq.n	8000fa6 <HAL_DMA_Abort_IT+0x18a>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2a      	ldr	r2, [pc, #168]	@ (8001014 <HAL_DMA_Abort_IT+0x1f8>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d019      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x186>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a29      	ldr	r2, [pc, #164]	@ (8001018 <HAL_DMA_Abort_IT+0x1fc>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d012      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x182>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <HAL_DMA_Abort_IT+0x200>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00a      	beq.n	8000f98 <HAL_DMA_Abort_IT+0x17c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a26      	ldr	r2, [pc, #152]	@ (8001020 <HAL_DMA_Abort_IT+0x204>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d102      	bne.n	8000f92 <HAL_DMA_Abort_IT+0x176>
 8000f8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f90:	e01b      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000f92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f96:	e018      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000f98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f9c:	e015      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000f9e:	2310      	movs	r3, #16
 8000fa0:	e013      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e011      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fa6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000faa:	e00e      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb0:	e00b      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb6:	e008      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fbc:	e005      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc2:	e002      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	e000      	b.n	8000fca <HAL_DMA_Abort_IT+0x1ae>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <HAL_DMA_Abort_IT+0x20c>)
 8000fcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
    } 
  }
  return status;
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020080 	.word	0x40020080
 8000ffc:	40020008 	.word	0x40020008
 8001000:	4002001c 	.word	0x4002001c
 8001004:	40020030 	.word	0x40020030
 8001008:	40020044 	.word	0x40020044
 800100c:	40020058 	.word	0x40020058
 8001010:	4002006c 	.word	0x4002006c
 8001014:	40020408 	.word	0x40020408
 8001018:	4002041c 	.word	0x4002041c
 800101c:	40020430 	.word	0x40020430
 8001020:	40020444 	.word	0x40020444
 8001024:	40020400 	.word	0x40020400
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800102c:	b480      	push	{r7}
 800102e:	b08b      	sub	sp, #44	@ 0x2c
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103e:	e169      	b.n	8001314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001040:	2201      	movs	r2, #1
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 8158 	bne.w	800130e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4a9a      	ldr	r2, [pc, #616]	@ (80012cc <HAL_GPIO_Init+0x2a0>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d05e      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001068:	4a98      	ldr	r2, [pc, #608]	@ (80012cc <HAL_GPIO_Init+0x2a0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d875      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800106e:	4a98      	ldr	r2, [pc, #608]	@ (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d058      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001074:	4a96      	ldr	r2, [pc, #600]	@ (80012d0 <HAL_GPIO_Init+0x2a4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d86f      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800107a:	4a96      	ldr	r2, [pc, #600]	@ (80012d4 <HAL_GPIO_Init+0x2a8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d052      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001080:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_GPIO_Init+0x2a8>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d869      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001086:	4a94      	ldr	r2, [pc, #592]	@ (80012d8 <HAL_GPIO_Init+0x2ac>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d04c      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 800108c:	4a92      	ldr	r2, [pc, #584]	@ (80012d8 <HAL_GPIO_Init+0x2ac>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d863      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 8001092:	4a92      	ldr	r2, [pc, #584]	@ (80012dc <HAL_GPIO_Init+0x2b0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d046      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
 8001098:	4a90      	ldr	r2, [pc, #576]	@ (80012dc <HAL_GPIO_Init+0x2b0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d85d      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d82a      	bhi.n	80010f8 <HAL_GPIO_Init+0xcc>
 80010a2:	2b12      	cmp	r3, #18
 80010a4:	d859      	bhi.n	800115a <HAL_GPIO_Init+0x12e>
 80010a6:	a201      	add	r2, pc, #4	@ (adr r2, 80010ac <HAL_GPIO_Init+0x80>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	08001127 	.word	0x08001127
 80010b0:	08001101 	.word	0x08001101
 80010b4:	08001113 	.word	0x08001113
 80010b8:	08001155 	.word	0x08001155
 80010bc:	0800115b 	.word	0x0800115b
 80010c0:	0800115b 	.word	0x0800115b
 80010c4:	0800115b 	.word	0x0800115b
 80010c8:	0800115b 	.word	0x0800115b
 80010cc:	0800115b 	.word	0x0800115b
 80010d0:	0800115b 	.word	0x0800115b
 80010d4:	0800115b 	.word	0x0800115b
 80010d8:	0800115b 	.word	0x0800115b
 80010dc:	0800115b 	.word	0x0800115b
 80010e0:	0800115b 	.word	0x0800115b
 80010e4:	0800115b 	.word	0x0800115b
 80010e8:	0800115b 	.word	0x0800115b
 80010ec:	0800115b 	.word	0x0800115b
 80010f0:	08001109 	.word	0x08001109
 80010f4:	0800111d 	.word	0x0800111d
 80010f8:	4a79      	ldr	r2, [pc, #484]	@ (80012e0 <HAL_GPIO_Init+0x2b4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fe:	e02c      	b.n	800115a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e029      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	3304      	adds	r3, #4
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e024      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	3308      	adds	r3, #8
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e01f      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	330c      	adds	r3, #12
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e01a      	b.n	800115c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112e:	2304      	movs	r3, #4
 8001130:	623b      	str	r3, [r7, #32]
          break;
 8001132:	e013      	b.n	800115c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d105      	bne.n	8001148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	611a      	str	r2, [r3, #16]
          break;
 8001146:	e009      	b.n	800115c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	615a      	str	r2, [r3, #20]
          break;
 8001152:	e003      	b.n	800115c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e000      	b.n	800115c <HAL_GPIO_Init+0x130>
          break;
 800115a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2bff      	cmp	r3, #255	@ 0xff
 8001160:	d801      	bhi.n	8001166 <HAL_GPIO_Init+0x13a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	e001      	b.n	800116a <HAL_GPIO_Init+0x13e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	@ 0xff
 8001170:	d802      	bhi.n	8001178 <HAL_GPIO_Init+0x14c>
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x152>
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	3b08      	subs	r3, #8
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	210f      	movs	r1, #15
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80b1 	beq.w	800130e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a4c      	ldr	r2, [pc, #304]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b4a      	ldr	r3, [pc, #296]	@ (80012e4 <HAL_GPIO_Init+0x2b8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c4:	4a48      	ldr	r2, [pc, #288]	@ (80012e8 <HAL_GPIO_Init+0x2bc>)
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	089b      	lsrs	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	220f      	movs	r2, #15
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	4013      	ands	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a40      	ldr	r2, [pc, #256]	@ (80012ec <HAL_GPIO_Init+0x2c0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d013      	beq.n	8001218 <HAL_GPIO_Init+0x1ec>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a3f      	ldr	r2, [pc, #252]	@ (80012f0 <HAL_GPIO_Init+0x2c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d00d      	beq.n	8001214 <HAL_GPIO_Init+0x1e8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3e      	ldr	r2, [pc, #248]	@ (80012f4 <HAL_GPIO_Init+0x2c8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3d      	ldr	r2, [pc, #244]	@ (80012f8 <HAL_GPIO_Init+0x2cc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d101      	bne.n	800120c <HAL_GPIO_Init+0x1e0>
 8001208:	2303      	movs	r3, #3
 800120a:	e006      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 800120c:	2304      	movs	r3, #4
 800120e:	e004      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001210:	2302      	movs	r3, #2
 8001212:	e002      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001214:	2301      	movs	r3, #1
 8001216:	e000      	b.n	800121a <HAL_GPIO_Init+0x1ee>
 8001218:	2300      	movs	r3, #0
 800121a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121c:	f002 0203 	and.w	r2, r2, #3
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	4093      	lsls	r3, r2
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800122a:	492f      	ldr	r1, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x2bc>)
 800122c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001244:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	492c      	ldr	r1, [pc, #176]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	608b      	str	r3, [r1, #8]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4928      	ldr	r1, [pc, #160]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800125c:	4013      	ands	r3, r2
 800125e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	4922      	ldr	r1, [pc, #136]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	60cb      	str	r3, [r1, #12]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800127c:	68da      	ldr	r2, [r3, #12]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	491e      	ldr	r1, [pc, #120]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001284:	4013      	ands	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4918      	ldr	r1, [pc, #96]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	604b      	str	r3, [r1, #4]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4914      	ldr	r1, [pc, #80]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d021      	beq.n	8001300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012bc:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	490e      	ldr	r1, [pc, #56]	@ (80012fc <HAL_GPIO_Init+0x2d0>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	600b      	str	r3, [r1, #0]
 80012c8:	e021      	b.n	800130e <HAL_GPIO_Init+0x2e2>
 80012ca:	bf00      	nop
 80012cc:	10320000 	.word	0x10320000
 80012d0:	10310000 	.word	0x10310000
 80012d4:	10220000 	.word	0x10220000
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000
 80012ec:	40010800 	.word	0x40010800
 80012f0:	40010c00 	.word	0x40010c00
 80012f4:	40011000 	.word	0x40011000
 80012f8:	40011400 	.word	0x40011400
 80012fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001300:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_GPIO_Init+0x304>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	43db      	mvns	r3, r3
 8001308:	4909      	ldr	r1, [pc, #36]	@ (8001330 <HAL_GPIO_Init+0x304>)
 800130a:	4013      	ands	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	f47f ae8e 	bne.w	8001040 <HAL_GPIO_Init+0x14>
  }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	372c      	adds	r7, #44	@ 0x2c
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40010400 	.word	0x40010400

08001334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e304      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b8f      	ldr	r3, [pc, #572]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 800136c:	4b8c      	ldr	r3, [pc, #560]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b89      	ldr	r3, [pc, #548]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e2de      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b80      	ldr	r3, [pc, #512]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a7f      	ldr	r2, [pc, #508]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7a      	ldr	r2, [pc, #488]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b78      	ldr	r3, [pc, #480]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a77      	ldr	r2, [pc, #476]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b72      	ldr	r3, [pc, #456]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a71      	ldr	r2, [pc, #452]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b6b      	ldr	r3, [pc, #428]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b68      	ldr	r3, [pc, #416]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a67      	ldr	r2, [pc, #412]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fbe0 	bl	8000bd4 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fbdc 	bl	8000bd4 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e292      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5d      	ldr	r3, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fbcc 	bl	8000bd4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fbc8 	bl	8000bd4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e27e      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800146e:	4b4c      	ldr	r3, [pc, #304]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800147a:	4b49      	ldr	r3, [pc, #292]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b43      	ldr	r3, [pc, #268]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e252      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4939      	ldr	r1, [pc, #228]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b36      	ldr	r3, [pc, #216]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb81 	bl	8000bd4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb7d 	bl	8000bd4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e233      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4927      	ldr	r1, [pc, #156]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b26      	ldr	r3, [pc, #152]	@ (80015a4 <HAL_RCC_OscConfig+0x270>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb60 	bl	8000bd4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fb5c 	bl	8000bd4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e212      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d03a      	beq.n	80015b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001550:	f7ff fb40 	bl	8000bd4 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb3c 	bl	8000bd4 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f2      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fc32 	bl	8001de0 <RCC_Delay>
 800157c:	e01c      	b.n	80015b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_RCC_OscConfig+0x274>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fb26 	bl	8000bd4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158a:	e00f      	b.n	80015ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb22 	bl	8000bd4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e1d8      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	42420000 	.word	0x42420000
 80015a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ac:	4b9b      	ldr	r3, [pc, #620]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1e9      	bne.n	800158c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80a6 	beq.w	8001712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ca:	4b94      	ldr	r3, [pc, #592]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10d      	bne.n	80015f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b91      	ldr	r3, [pc, #580]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a90      	ldr	r2, [pc, #576]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b8e      	ldr	r3, [pc, #568]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001820 <HAL_RCC_OscConfig+0x4ec>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x4ec>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a87      	ldr	r2, [pc, #540]	@ (8001820 <HAL_RCC_OscConfig+0x4ec>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fae3 	bl	8000bd4 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fadf 	bl	8000bd4 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	@ 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e195      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x312>
 8001638:	4b78      	ldr	r3, [pc, #480]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a77      	ldr	r2, [pc, #476]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6213      	str	r3, [r2, #32]
 8001644:	e02d      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x334>
 800164e:	4b73      	ldr	r3, [pc, #460]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a72      	ldr	r2, [pc, #456]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6213      	str	r3, [r2, #32]
 800165a:	4b70      	ldr	r3, [pc, #448]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6213      	str	r3, [r2, #32]
 8001666:	e01c      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	2b05      	cmp	r3, #5
 800166e:	d10c      	bne.n	800168a <HAL_RCC_OscConfig+0x356>
 8001670:	4b6a      	ldr	r3, [pc, #424]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a69      	ldr	r2, [pc, #420]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6213      	str	r3, [r2, #32]
 800167c:	4b67      	ldr	r3, [pc, #412]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a66      	ldr	r2, [pc, #408]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6213      	str	r3, [r2, #32]
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x36e>
 800168a:	4b64      	ldr	r3, [pc, #400]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a63      	ldr	r2, [pc, #396]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b61      	ldr	r3, [pc, #388]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a60      	ldr	r2, [pc, #384]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d015      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa93 	bl	8000bd4 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b0:	e00a      	b.n	80016c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b2:	f7ff fa8f 	bl	8000bd4 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e143      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	4b54      	ldr	r3, [pc, #336]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0ee      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
 80016d4:	e014      	b.n	8001700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa7d 	bl	8000bd4 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016de:	f7ff fa79 	bl	8000bd4 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e12d      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f4:	4b49      	ldr	r3, [pc, #292]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1ee      	bne.n	80016de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d105      	bne.n	8001712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b45      	ldr	r3, [pc, #276]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a44      	ldr	r2, [pc, #272]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800170c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 808c 	beq.w	8001834 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800171c:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001728:	d10e      	bne.n	8001748 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800172a:	4b3c      	ldr	r3, [pc, #240]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001732:	2b08      	cmp	r3, #8
 8001734:	d108      	bne.n	8001748 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001736:	4b39      	ldr	r3, [pc, #228]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800173e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e103      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800174c:	2b02      	cmp	r3, #2
 800174e:	d14e      	bne.n	80017ee <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001750:	4b32      	ldr	r3, [pc, #200]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d009      	beq.n	8001770 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800175c:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001760:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0ef      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001770:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <HAL_RCC_OscConfig+0x4f0>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fa2d 	bl	8000bd4 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800177e:	f7ff fa29 	bl	8000bd4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b64      	cmp	r3, #100	@ 0x64
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0df      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	491c      	ldr	r1, [pc, #112]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4918      	ldr	r1, [pc, #96]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_RCC_OscConfig+0x4f0>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa05 	bl	8000bd4 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80017ce:	f7ff fa01 	bl	8000bd4 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	@ 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0b7      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x49a>
 80017ec:	e022      	b.n	8001834 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80017ee:	4b0b      	ldr	r3, [pc, #44]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <HAL_RCC_OscConfig+0x4e8>)
 80017f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_RCC_OscConfig+0x4f0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff f9e8 	bl	8000bd4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001808:	f7ff f9e4 	bl	8000bd4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d908      	bls.n	8001828 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e09a      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	40007000 	.word	0x40007000
 8001824:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001828:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e9      	bne.n	8001808 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8088 	beq.w	800194e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800183e:	4b46      	ldr	r3, [pc, #280]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d068      	beq.n	800191c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d14d      	bne.n	80018ee <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b42      	ldr	r3, [pc, #264]	@ (800195c <HAL_RCC_OscConfig+0x628>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff f9bc 	bl	8000bd4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f9b8 	bl	8000bd4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e06e      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001886:	d10f      	bne.n	80018a8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001888:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 800188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4931      	ldr	r1, [pc, #196]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 8001892:	4313      	orrs	r3, r2
 8001894:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 8001898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189a:	f023 020f 	bic.w	r2, r3, #15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	492d      	ldr	r1, [pc, #180]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b8:	430b      	orrs	r3, r1
 80018ba:	4927      	ldr	r1, [pc, #156]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b26      	ldr	r3, [pc, #152]	@ (800195c <HAL_RCC_OscConfig+0x628>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff f985 	bl	8000bd4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f981 	bl	8000bd4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e037      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x59a>
 80018ec:	e02f      	b.n	800194e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x628>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f96e 	bl	8000bd4 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff f96a 	bl	8000bd4 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e020      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x5c8>
 800191a:	e018      	b.n	800194e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e013      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001928:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <HAL_RCC_OscConfig+0x624>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	429a      	cmp	r2, r3
 800193a:	d106      	bne.n	800194a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40021000 	.word	0x40021000
 800195c:	42420060 	.word	0x42420060

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4965      	ldr	r1, [pc, #404]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff f8c0 	bl	8000bd4 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f8bc 	bl	8000bd4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4922      	ldr	r1, [pc, #136]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f859 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1cc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe ff60 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08004630 	.word	0x08004630
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8001b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_RCC_MCOConfig+0x68>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_RCC_MCOConfig+0x68>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_MCOConfig+0x68>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8001b78:	f107 0318 	add.w	r3, r7, #24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4808      	ldr	r0, [pc, #32]	@ (8001ba0 <HAL_RCC_MCOConfig+0x6c>)
 8001b80:	f7ff fa54 	bl	800102c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8001b84:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <HAL_RCC_MCOConfig+0x68>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001b8c:	4903      	ldr	r1, [pc, #12]	@ (8001b9c <HAL_RCC_MCOConfig+0x68>)
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
}
 8001b94:	bf00      	nop
 8001b96:	3728      	adds	r7, #40	@ 0x28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010800 	.word	0x40010800

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba8:	b08e      	sub	sp, #56	@ 0x38
 8001baa:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d002      	beq.n	8001bde <HAL_RCC_GetSysClockFreq+0x3a>
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d003      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x40>
 8001bdc:	e089      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001be0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001be2:	e089      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	f003 020f 	and.w	r2, r3, #15
 8001bec:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8001bee:	5c9b      	ldrb	r3, [r3, r2]
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d072      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001bfc:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c00:	f003 020f 	and.w	r2, r3, #15
 8001c04:	4b42      	ldr	r3, [pc, #264]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d053      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	3301      	adds	r3, #1
 8001c22:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001c24:	4b37      	ldr	r3, [pc, #220]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3302      	adds	r3, #2
 8001c30:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	2200      	movs	r2, #0
 8001c36:	469a      	mov	sl, r3
 8001c38:	4693      	mov	fp, r2
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	617a      	str	r2, [r7, #20]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fb03 f20b 	mul.w	r2, r3, fp
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fb0a f303 	mul.w	r3, sl, r3
 8001c4e:	4413      	add	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	fbaa 0102 	umull	r0, r1, sl, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c5c:	fb03 f201 	mul.w	r2, r3, r1
 8001c60:	2300      	movs	r3, #0
 8001c62:	fb00 f303 	mul.w	r3, r0, r3
 8001c66:	4413      	add	r3, r2
 8001c68:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c6a:	fba0 4502 	umull	r4, r5, r0, r2
 8001c6e:	442b      	add	r3, r5
 8001c70:	461d      	mov	r5, r3
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	2200      	movs	r2, #0
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	60fa      	str	r2, [r7, #12]
 8001c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c8c:	4652      	mov	r2, sl
 8001c8e:	fb02 f203 	mul.w	r2, r2, r3
 8001c92:	465b      	mov	r3, fp
 8001c94:	4684      	mov	ip, r0
 8001c96:	fb0c f303 	mul.w	r3, ip, r3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4651      	mov	r1, sl
 8001ca0:	fba2 8901 	umull	r8, r9, r2, r1
 8001ca4:	444b      	add	r3, r9
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fabe 	bl	8000230 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbc:	e007      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x164>)
 8001cc2:	fb03 f202 	mul.w	r2, r3, r2
 8001cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001cce:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x168>)
 8001cd0:	7b5b      	ldrb	r3, [r3, #13]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8001cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ce0:	e004      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x170>)
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8001cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cee:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x174>)
 8001cf4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3738      	adds	r7, #56	@ 0x38
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d04:	40021000 	.word	0x40021000
 8001d08:	017d7840 	.word	0x017d7840
 8001d0c:	08004648 	.word	0x08004648
 8001d10:	08004658 	.word	0x08004658
 8001d14:	003d0900 	.word	0x003d0900
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b02      	ldr	r3, [pc, #8]	@ (8001d2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d34:	f7ff fff2 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4903      	ldr	r1, [pc, #12]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08004640 	.word	0x08004640

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4903      	ldr	r1, [pc, #12]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08004640 	.word	0x08004640

08001d80 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d90:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_RCC_GetClockConfig+0x58>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	08db      	lsrs	r3, r3, #3
 8001dba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_RCC_GetClockConfig+0x5c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0207 	and.w	r2, r3, #7
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <RCC_Delay+0x34>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <RCC_Delay+0x38>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0a5b      	lsrs	r3, r3, #9
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dfc:	bf00      	nop
  }
  while (Delay --);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1e5a      	subs	r2, r3, #1
 8001e02:	60fa      	str	r2, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f9      	bne.n	8001dfc <RCC_Delay+0x1c>
}
 8001e08:	bf00      	nop
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	20000000 	.word	0x20000000
 8001e18:	10624dd3 	.word	0x10624dd3

08001e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f839 	bl	8001eba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3304      	adds	r3, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	f000 f9bc 	bl	80021d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d001      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e03f      	b.n	8001f64 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xa4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_TIM_Base_Start_IT+0x62>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f0e:	d00e      	beq.n	8001f2e <HAL_TIM_Base_Start_IT+0x62>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_TIM_Base_Start_IT+0xa8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_TIM_Base_Start_IT+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_TIM_Base_Start_IT+0xac>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_TIM_Base_Start_IT+0x62>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a14      	ldr	r2, [pc, #80]	@ (8001f7c <HAL_TIM_Base_Start_IT+0xb0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d111      	bne.n	8001f52 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d010      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	e007      	b.n	8001f62 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40012c00 	.word	0x40012c00
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40000800 	.word	0x40000800
 8001f7c:	40000c00 	.word	0x40000c00

08001f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0202 	mvn.w	r2, #2
 8001fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8ed 	bl	80021a2 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8e0 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f8ef 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0204 	mvn.w	r2, #4
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8c3 	bl	80021a2 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8b6 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8c5 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b08      	cmp	r3, #8
 800203c:	d122      	bne.n	8002084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b08      	cmp	r3, #8
 800204a:	d11b      	bne.n	8002084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0208 	mvn.w	r2, #8
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f899 	bl	80021a2 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f88c 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f89b 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b10      	cmp	r3, #16
 8002090:	d122      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b10      	cmp	r3, #16
 800209e:	d11b      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0210 	mvn.w	r2, #16
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2208      	movs	r2, #8
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f86f 	bl	80021a2 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f862 	bl	8002190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f871 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0201 	mvn.w	r2, #1
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fbb6 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	2b80      	cmp	r3, #128	@ 0x80
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211c:	2b80      	cmp	r3, #128	@ 0x80
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f8c9 	bl	80022c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213a:	2b40      	cmp	r3, #64	@ 0x40
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002148:	2b40      	cmp	r3, #64	@ 0x40
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f835 	bl	80021c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0220 	mvn.w	r2, #32
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f894 	bl	80022b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr

080021c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr

080021d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a2d      	ldr	r2, [pc, #180]	@ (80022a0 <TIM_Base_SetConfig+0xc8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00f      	beq.n	8002210 <TIM_Base_SetConfig+0x38>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f6:	d00b      	beq.n	8002210 <TIM_Base_SetConfig+0x38>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a2a      	ldr	r2, [pc, #168]	@ (80022a4 <TIM_Base_SetConfig+0xcc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <TIM_Base_SetConfig+0x38>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a29      	ldr	r2, [pc, #164]	@ (80022a8 <TIM_Base_SetConfig+0xd0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_Base_SetConfig+0x38>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a28      	ldr	r2, [pc, #160]	@ (80022ac <TIM_Base_SetConfig+0xd4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d108      	bne.n	8002222 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1e      	ldr	r2, [pc, #120]	@ (80022a0 <TIM_Base_SetConfig+0xc8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <TIM_Base_SetConfig+0x72>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0x72>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a1b      	ldr	r2, [pc, #108]	@ (80022a4 <TIM_Base_SetConfig+0xcc>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x72>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a1a      	ldr	r2, [pc, #104]	@ (80022a8 <TIM_Base_SetConfig+0xd0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x72>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <TIM_Base_SetConfig+0xd4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a07      	ldr	r2, [pc, #28]	@ (80022a0 <TIM_Base_SetConfig+0xc8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d103      	bne.n	8002290 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	615a      	str	r2, [r3, #20]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40000400 	.word	0x40000400
 80022a8:	40000800 	.word	0x40000800
 80022ac:	40000c00 	.word	0x40000c00

080022b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr

080022c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e042      	b.n	800236c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fb08 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2224      	movs	r2, #36	@ 0x24
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fd71 	bl	8002e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691a      	ldr	r2, [r3, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800232c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695a      	ldr	r2, [r3, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800233c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800234c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2220      	movs	r2, #32
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	4613      	mov	r3, r2
 8002382:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b20      	cmp	r3, #32
 8002392:	d16d      	bne.n	8002470 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <HAL_UART_Transmit+0x2c>
 800239a:	88fb      	ldrh	r3, [r7, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e066      	b.n	8002472 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	@ 0x21
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b2:	f7fe fc0f 	bl	8000bd4 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023e8:	e02a      	b.n	8002440 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2180      	movs	r1, #128	@ 0x80
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 faf9 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e036      	b.n	8002472 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10b      	bne.n	8002422 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	3302      	adds	r3, #2
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e007      	b.n	8002432 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3301      	adds	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1cf      	bne.n	80023ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2200      	movs	r2, #0
 8002452:	2140      	movs	r1, #64	@ 0x40
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fac9 	bl	80029ec <UART_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e006      	b.n	8002472 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
  }
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0ba      	sub	sp, #232	@ 0xe8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10f      	bne.n	80024e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_UART_IRQHandler+0x66>
 80024ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fbd1 	bl	8002c82 <UART_Receive_IT>
      return;
 80024e0:	e25b      	b.n	800299a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80de 	beq.w	80026a8 <HAL_UART_IRQHandler+0x22c>
 80024ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80d1 	beq.w	80026a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00b      	beq.n	800252a <HAL_UART_IRQHandler+0xae>
 8002512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800252a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_UART_IRQHandler+0xd2>
 8002536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f043 0202 	orr.w	r2, r3, #2
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800254e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_UART_IRQHandler+0xf6>
 800255a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	f043 0204 	orr.w	r2, r3, #4
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b00      	cmp	r3, #0
 800257c:	d011      	beq.n	80025a2 <HAL_UART_IRQHandler+0x126>
 800257e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800258a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259a:	f043 0208 	orr.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 81f2 	beq.w	8002990 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_UART_IRQHandler+0x14e>
 80025b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 fb5c 	bl	8002c82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf14      	ite	ne
 80025d8:	2301      	movne	r3, #1
 80025da:	2300      	moveq	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <HAL_UART_IRQHandler+0x17a>
 80025ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d04f      	beq.n	8002696 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa66 	bl	8002ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d041      	beq.n	800268e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3314      	adds	r3, #20
 8002610:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002618:	e853 3f00 	ldrex	r3, [r3]
 800261c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002620:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002624:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002628:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3314      	adds	r3, #20
 8002632:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002636:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800263a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002642:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002646:	e841 2300 	strex	r3, r2, [r1]
 800264a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800264e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1d9      	bne.n	800260a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d013      	beq.n	8002686 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002662:	4a7e      	ldr	r2, [pc, #504]	@ (800285c <HAL_UART_IRQHandler+0x3e0>)
 8002664:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fbd6 	bl	8000e1c <HAL_DMA_Abort_IT>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002680:	4610      	mov	r0, r2
 8002682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002684:	e00e      	b.n	80026a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f99c 	bl	80029c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800268c:	e00a      	b.n	80026a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f998 	bl	80029c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002694:	e006      	b.n	80026a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f994 	bl	80029c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026a2:	e175      	b.n	8002990 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	bf00      	nop
    return;
 80026a6:	e173      	b.n	8002990 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	f040 814f 	bne.w	8002950 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8148 	beq.w	8002950 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c4:	f003 0310 	and.w	r3, r3, #16
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8141 	beq.w	8002950 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 80b6 	beq.w	8002860 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8145 	beq.w	8002994 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800270e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002712:	429a      	cmp	r2, r3
 8002714:	f080 813e 	bcs.w	8002994 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800271e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b20      	cmp	r3, #32
 8002728:	f000 8088 	beq.w	800283c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002742:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002746:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002758:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800275c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002764:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002768:	e841 2300 	strex	r3, r2, [r1]
 800276c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1d9      	bne.n	800272c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002788:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800278a:	f023 0301 	bic.w	r3, r3, #1
 800278e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800279c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027a8:	e841 2300 	strex	r3, r2, [r1]
 80027ac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1e1      	bne.n	8002778 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3314      	adds	r3, #20
 80027ba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027be:	e853 3f00 	ldrex	r3, [r3]
 80027c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80027c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	3314      	adds	r3, #20
 80027d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80027d8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027da:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027e0:	e841 2300 	strex	r3, r2, [r1]
 80027e4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1e3      	bne.n	80027b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800280a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800280c:	f023 0310 	bic.w	r3, r3, #16
 8002810:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800281e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002824:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800282c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e3      	bne.n	80027fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fab5 	bl	8000da6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800284a:	b29b      	uxth	r3, r3
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	b29b      	uxth	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8bf 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002858:	e09c      	b.n	8002994 <HAL_UART_IRQHandler+0x518>
 800285a:	bf00      	nop
 800285c:	08002b8d 	.word	0x08002b8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002868:	b29b      	uxth	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 808e 	beq.w	8002998 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800287c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8089 	beq.w	8002998 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	330c      	adds	r3, #12
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002890:	e853 3f00 	ldrex	r3, [r3]
 8002894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800289c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80028ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e3      	bne.n	8002886 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	623b      	str	r3, [r7, #32]
   return(result);
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3314      	adds	r3, #20
 80028de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80028e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	60fb      	str	r3, [r7, #12]
   return(result);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002928:	61fa      	str	r2, [r7, #28]
 800292a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	69b9      	ldr	r1, [r7, #24]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	617b      	str	r3, [r7, #20]
   return(result);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e3      	bne.n	8002904 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002946:	4619      	mov	r1, r3
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f844 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800294e:	e023      	b.n	8002998 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_UART_IRQHandler+0x4f4>
 800295c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f923 	bl	8002bb4 <UART_Transmit_IT>
    return;
 800296e:	e014      	b.n	800299a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00e      	beq.n	800299a <HAL_UART_IRQHandler+0x51e>
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f962 	bl	8002c52 <UART_EndTransmit_IT>
    return;
 800298e:	e004      	b.n	800299a <HAL_UART_IRQHandler+0x51e>
    return;
 8002990:	bf00      	nop
 8002992:	e002      	b.n	800299a <HAL_UART_IRQHandler+0x51e>
      return;
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <HAL_UART_IRQHandler+0x51e>
      return;
 8002998:	bf00      	nop
  }
}
 800299a:	37e8      	adds	r7, #232	@ 0xe8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b090      	sub	sp, #64	@ 0x40
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fc:	e050      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a04:	d04c      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0c:	f7fe f8e2 	bl	8000bd4 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d241      	bcs.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	e853 3f00 	ldrex	r3, [r3]
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	330c      	adds	r3, #12
 8002a3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a44:	e841 2300 	strex	r3, r2, [r1]
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e5      	bne.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3314      	adds	r3, #20
 8002a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3314      	adds	r3, #20
 8002a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a70:	623a      	str	r2, [r7, #32]
 8002a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a74:	69f9      	ldr	r1, [r7, #28]
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	e841 2300 	strex	r3, r2, [r1]
 8002a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d09f      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3740      	adds	r7, #64	@ 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b095      	sub	sp, #84	@ 0x54
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ada:	e853 3f00 	ldrex	r3, [r3]
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	330c      	adds	r3, #12
 8002aee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002af0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002af6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002af8:	e841 2300 	strex	r3, r2, [r1]
 8002afc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e5      	bne.n	8002ad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3314      	adds	r3, #20
 8002b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f023 0301 	bic.w	r3, r3, #1
 8002b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e5      	bne.n	8002b04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d119      	bne.n	8002b74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	330c      	adds	r3, #12
 8002b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 0310 	bic.w	r3, r3, #16
 8002b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	330c      	adds	r3, #12
 8002b5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b60:	61ba      	str	r2, [r7, #24]
 8002b62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6979      	ldr	r1, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b82:	bf00      	nop
 8002b84:	3754      	adds	r7, #84	@ 0x54
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff0c 	bl	80029c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b21      	cmp	r3, #33	@ 0x21
 8002bc6:	d13e      	bne.n	8002c46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bd0:	d114      	bne.n	8002bfc <UART_Transmit_IT+0x48>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d110      	bne.n	8002bfc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	1c9a      	adds	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	621a      	str	r2, [r3, #32]
 8002bfa:	e008      	b.n	8002c0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	1c59      	adds	r1, r3, #1
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6211      	str	r1, [r2, #32]
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fe94 	bl	80029a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b08c      	sub	sp, #48	@ 0x30
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b22      	cmp	r3, #34	@ 0x22
 8002c94:	f040 80ae 	bne.w	8002df4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca0:	d117      	bne.n	8002cd2 <UART_Receive_IT+0x50>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d113      	bne.n	8002cd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cca:	1c9a      	adds	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd0:	e026      	b.n	8002d20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce4:	d007      	beq.n	8002cf6 <UART_Receive_IT+0x74>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <UART_Receive_IT+0x82>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e008      	b.n	8002d16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d15d      	bne.n	8002df0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0220 	bic.w	r2, r2, #32
 8002d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d135      	bne.n	8002de6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	e853 3f00 	ldrex	r3, [r3]
 8002d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f023 0310 	bic.w	r3, r3, #16
 8002d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	623a      	str	r2, [r7, #32]
 8002da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da4:	69f9      	ldr	r1, [r7, #28]
 8002da6:	6a3a      	ldr	r2, [r7, #32]
 8002da8:	e841 2300 	strex	r3, r2, [r1]
 8002dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1e5      	bne.n	8002d80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d10a      	bne.n	8002dd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fdf9 	bl	80029d6 <HAL_UARTEx_RxEventCallback>
 8002de4:	e002      	b.n	8002dec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fde3 	bl	80029b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e002      	b.n	8002df6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	e000      	b.n	8002df6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3730      	adds	r7, #48	@ 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e3a:	f023 030c 	bic.w	r3, r3, #12
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	430b      	orrs	r3, r1
 8002e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2c      	ldr	r2, [pc, #176]	@ (8002f14 <UART_SetConfig+0x114>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d103      	bne.n	8002e70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e68:	f7fe ff76 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	e002      	b.n	8002e76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe ff5e 	bl	8001d30 <HAL_RCC_GetPCLK1Freq>
 8002e74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	4a22      	ldr	r2, [pc, #136]	@ (8002f18 <UART_SetConfig+0x118>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	0119      	lsls	r1, r3, #4
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <UART_SetConfig+0x118>)
 8002eae:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2064      	movs	r0, #100	@ 0x64
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	@ 0x32
 8002ec0:	4a15      	ldr	r2, [pc, #84]	@ (8002f18 <UART_SetConfig+0x118>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ecc:	4419      	add	r1, r3
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009a      	lsls	r2, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f18 <UART_SetConfig+0x118>)
 8002ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eea:	095b      	lsrs	r3, r3, #5
 8002eec:	2064      	movs	r0, #100	@ 0x64
 8002eee:	fb00 f303 	mul.w	r3, r0, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	3332      	adds	r3, #50	@ 0x32
 8002ef8:	4a07      	ldr	r2, [pc, #28]	@ (8002f18 <UART_SetConfig+0x118>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	f003 020f 	and.w	r2, r3, #15
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	440a      	add	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f0c:	bf00      	nop
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40013800 	.word	0x40013800
 8002f18:	51eb851f 	.word	0x51eb851f

08002f1c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2e:	2b84      	cmp	r3, #132	@ 0x84
 8002f30:	d005      	beq.n	8002f3e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3303      	adds	r3, #3
 8002f3c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f4e:	f000 faef 	bl	8003530 <vTaskStartScheduler>
  
  return osOK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af04      	add	r7, sp, #16
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <osThreadCreate+0x54>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01c      	beq.n	8002fac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685c      	ldr	r4, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691e      	ldr	r6, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ffc9 	bl	8002f1c <makeFreeRtosPriority>
 8002f8a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f94:	9202      	str	r2, [sp, #8]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	9100      	str	r1, [sp, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4632      	mov	r2, r6
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f000 f8e8 	bl	8003176 <xTaskCreateStatic>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	e01c      	b.n	8002fe6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685c      	ldr	r4, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ffab 	bl	8002f1c <makeFreeRtosPriority>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	9200      	str	r2, [sp, #0]
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	f000 f92c 	bl	8003234 <xTaskCreate>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ff0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <osDelay+0x16>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e000      	b.n	8003008 <osDelay+0x18>
 8003006:	2301      	movs	r3, #1
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fa5b 	bl	80034c4 <vTaskDelay>
  
  return osOK;
 800300e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f103 0208 	add.w	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f04f 32ff 	mov.w	r2, #4294967295
 8003030:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f103 0208 	add.w	r2, r3, #8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f103 0208 	add.w	r2, r3, #8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800306e:	b480      	push	{r7}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	1c5a      	adds	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d103      	bne.n	80030d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e00c      	b.n	80030ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3308      	adds	r3, #8
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e002      	b.n	80030e2 <vListInsert+0x2e>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d2f6      	bcs.n	80030dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	601a      	str	r2, [r3, #0]
}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d103      	bne.n	8003158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003176:	b580      	push	{r7, lr}
 8003178:	b08e      	sub	sp, #56	@ 0x38
 800317a:	af04      	add	r7, sp, #16
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10b      	bne.n	80031a2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	e7fd      	b.n	800319e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	61fb      	str	r3, [r7, #28]
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031c0:	23a0      	movs	r3, #160	@ 0xa0
 80031c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80031c8:	d00b      	beq.n	80031e2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	61bb      	str	r3, [r7, #24]
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	e7fd      	b.n	80031de <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01e      	beq.n	8003226 <xTaskCreateStatic+0xb0>
 80031e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01b      	beq.n	8003226 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003200:	2300      	movs	r3, #0
 8003202:	9303      	str	r3, [sp, #12]
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	9302      	str	r3, [sp, #8]
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	9301      	str	r3, [sp, #4]
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f851 	bl	80032c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800321e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003220:	f000 f8e6 	bl	80033f0 <prvAddNewTaskToReadyList>
 8003224:	e001      	b.n	800322a <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800322a:	697b      	ldr	r3, [r7, #20]
	}
 800322c:	4618      	mov	r0, r3
 800322e:	3728      	adds	r7, #40	@ 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	@ 0x30
 8003238:	af04      	add	r7, sp, #16
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	4613      	mov	r3, r2
 8003242:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fea1 	bl	8003f90 <pvPortMalloc>
 800324e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003256:	20a0      	movs	r0, #160	@ 0xa0
 8003258:	f000 fe9a 	bl	8003f90 <pvPortMalloc>
 800325c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	631a      	str	r2, [r3, #48]	@ 0x30
 800326a:	e005      	b.n	8003278 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800326c:	6978      	ldr	r0, [r7, #20]
 800326e:	f000 ff57 	bl	8004120 <vPortFree>
 8003272:	e001      	b.n	8003278 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d017      	beq.n	80032ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	2300      	movs	r3, #0
 800328a:	9303      	str	r3, [sp, #12]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	9302      	str	r3, [sp, #8]
 8003290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f80f 	bl	80032c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a2:	69f8      	ldr	r0, [r7, #28]
 80032a4:	f000 f8a4 	bl	80033f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61bb      	str	r3, [r7, #24]
 80032ac:	e002      	b.n	80032b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032b4:	69bb      	ldr	r3, [r7, #24]
	}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d8:	3b01      	subs	r3, #1
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	f023 0307 	bic.w	r3, r3, #7
 80032e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <prvInitialiseNewTask+0x4a>
	__asm volatile
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	617b      	str	r3, [r7, #20]
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	e7fd      	b.n	8003306 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	e012      	b.n	8003336 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	7819      	ldrb	r1, [r3, #0]
 8003318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	3334      	adds	r3, #52	@ 0x34
 8003320:	460a      	mov	r2, r1
 8003322:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d9e9      	bls.n	8003310 <prvInitialiseNewTask+0x50>
 800333c:	e000      	b.n	8003340 <prvInitialiseNewTask+0x80>
		{
			break;
 800333e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	2b06      	cmp	r3, #6
 800334c:	d901      	bls.n	8003352 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800334e:	2306      	movs	r3, #6
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003356:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800335a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003366:	3304      	adds	r3, #4
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff fe74 	bl	8003056 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800336e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003370:	3318      	adds	r3, #24
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fe6f 	bl	8003056 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800337c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	f1c3 0207 	rsb	r2, r3, #7
 8003384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003386:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	2200      	movs	r2, #0
 8003392:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	334c      	adds	r3, #76	@ 0x4c
 80033a2:	224c      	movs	r2, #76	@ 0x4c
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 ffd0 	bl	800434c <memset>
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	4a0d      	ldr	r2, [pc, #52]	@ (80033e4 <prvInitialiseNewTask+0x124>)
 80033b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	4a0c      	ldr	r2, [pc, #48]	@ (80033e8 <prvInitialiseNewTask+0x128>)
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	4a0c      	ldr	r2, [pc, #48]	@ (80033ec <prvInitialiseNewTask+0x12c>)
 80033bc:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	69b8      	ldr	r0, [r7, #24]
 80033c4:	f000 fc30 	bl	8003c28 <pxPortInitialiseStack>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033da:	bf00      	nop
 80033dc:	3720      	adds	r7, #32
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20001508 	.word	0x20001508
 80033e8:	20001570 	.word	0x20001570
 80033ec:	200015d8 	.word	0x200015d8

080033f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f8:	f000 fd08 	bl	8003e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033fc:	4b2a      	ldr	r3, [pc, #168]	@ (80034a8 <prvAddNewTaskToReadyList+0xb8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a29      	ldr	r2, [pc, #164]	@ (80034a8 <prvAddNewTaskToReadyList+0xb8>)
 8003404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003406:	4b29      	ldr	r3, [pc, #164]	@ (80034ac <prvAddNewTaskToReadyList+0xbc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800340e:	4a27      	ldr	r2, [pc, #156]	@ (80034ac <prvAddNewTaskToReadyList+0xbc>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003414:	4b24      	ldr	r3, [pc, #144]	@ (80034a8 <prvAddNewTaskToReadyList+0xb8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d110      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800341c:	f000 fad6 	bl	80039cc <prvInitialiseTaskLists>
 8003420:	e00d      	b.n	800343e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <prvAddNewTaskToReadyList+0xc0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800342a:	4b20      	ldr	r3, [pc, #128]	@ (80034ac <prvAddNewTaskToReadyList+0xbc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d802      	bhi.n	800343e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003438:	4a1c      	ldr	r2, [pc, #112]	@ (80034ac <prvAddNewTaskToReadyList+0xbc>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800343e:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <prvAddNewTaskToReadyList+0xc4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a1b      	ldr	r2, [pc, #108]	@ (80034b4 <prvAddNewTaskToReadyList+0xc4>)
 8003446:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	2201      	movs	r2, #1
 800344e:	409a      	lsls	r2, r3
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4a15      	ldr	r2, [pc, #84]	@ (80034bc <prvAddNewTaskToReadyList+0xcc>)
 8003468:	441a      	add	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f7ff fdfc 	bl	800306e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003476:	f000 fcf9 	bl	8003e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800347a:	4b0d      	ldr	r3, [pc, #52]	@ (80034b0 <prvAddNewTaskToReadyList+0xc0>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003482:	4b0a      	ldr	r3, [pc, #40]	@ (80034ac <prvAddNewTaskToReadyList+0xbc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348c:	429a      	cmp	r2, r3
 800348e:	d207      	bcs.n	80034a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003490:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <prvAddNewTaskToReadyList+0xd0>)
 8003492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f3bf 8f4f 	dsb	sy
 800349c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	200004bc 	.word	0x200004bc
 80034ac:	200003bc 	.word	0x200003bc
 80034b0:	200004c8 	.word	0x200004c8
 80034b4:	200004d8 	.word	0x200004d8
 80034b8:	200004c4 	.word	0x200004c4
 80034bc:	200003c0 	.word	0x200003c0
 80034c0:	e000ed04 	.word	0xe000ed04

080034c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d018      	beq.n	8003508 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <vTaskDelay+0x64>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <vTaskDelay+0x32>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	60bb      	str	r3, [r7, #8]
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	e7fd      	b.n	80034f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034f6:	f000 f885 	bl	8003604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb2d 	bl	8003b5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003502:	f000 f88d 	bl	8003620 <xTaskResumeAll>
 8003506:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d107      	bne.n	800351e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800350e:	4b07      	ldr	r3, [pc, #28]	@ (800352c <vTaskDelay+0x68>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200004e4 	.word	0x200004e4
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800353e:	463a      	mov	r2, r7
 8003540:	1d39      	adds	r1, r7, #4
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	4618      	mov	r0, r3
 8003548:	f7fc ffe8 	bl	800051c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	9202      	str	r2, [sp, #8]
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	2300      	movs	r3, #0
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	460a      	mov	r2, r1
 800355e:	4921      	ldr	r1, [pc, #132]	@ (80035e4 <vTaskStartScheduler+0xb4>)
 8003560:	4821      	ldr	r0, [pc, #132]	@ (80035e8 <vTaskStartScheduler+0xb8>)
 8003562:	f7ff fe08 	bl	8003176 <xTaskCreateStatic>
 8003566:	4603      	mov	r3, r0
 8003568:	4a20      	ldr	r2, [pc, #128]	@ (80035ec <vTaskStartScheduler+0xbc>)
 800356a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800356c:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <vTaskStartScheduler+0xbc>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003574:	2301      	movs	r3, #1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e001      	b.n	800357e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d11b      	bne.n	80035bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	613b      	str	r3, [r7, #16]
}
 8003596:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003598:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <vTaskStartScheduler+0xc0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	334c      	adds	r3, #76	@ 0x4c
 800359e:	4a15      	ldr	r2, [pc, #84]	@ (80035f4 <vTaskStartScheduler+0xc4>)
 80035a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <vTaskStartScheduler+0xc8>)
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035aa:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <vTaskStartScheduler+0xcc>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80035b0:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <vTaskStartScheduler+0xd0>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035b6:	f000 fbb7 	bl	8003d28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035ba:	e00f      	b.n	80035dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d10b      	bne.n	80035dc <vTaskStartScheduler+0xac>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	60fb      	str	r3, [r7, #12]
}
 80035d6:	bf00      	nop
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <vTaskStartScheduler+0xa8>
}
 80035dc:	bf00      	nop
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08004628 	.word	0x08004628
 80035e8:	0800399d 	.word	0x0800399d
 80035ec:	200004e0 	.word	0x200004e0
 80035f0:	200003bc 	.word	0x200003bc
 80035f4:	20000010 	.word	0x20000010
 80035f8:	200004dc 	.word	0x200004dc
 80035fc:	200004c8 	.word	0x200004c8
 8003600:	200004c0 	.word	0x200004c0

08003604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003608:	4b04      	ldr	r3, [pc, #16]	@ (800361c <vTaskSuspendAll+0x18>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a03      	ldr	r2, [pc, #12]	@ (800361c <vTaskSuspendAll+0x18>)
 8003610:	6013      	str	r3, [r2, #0]
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	200004e4 	.word	0x200004e4

08003620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800362e:	4b42      	ldr	r3, [pc, #264]	@ (8003738 <xTaskResumeAll+0x118>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <xTaskResumeAll+0x2e>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	603b      	str	r3, [r7, #0]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800364e:	f000 fbdd 	bl	8003e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <xTaskResumeAll+0x118>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3b01      	subs	r3, #1
 8003658:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <xTaskResumeAll+0x118>)
 800365a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365c:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <xTaskResumeAll+0x118>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d161      	bne.n	8003728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003664:	4b35      	ldr	r3, [pc, #212]	@ (800373c <xTaskResumeAll+0x11c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d05d      	beq.n	8003728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800366c:	e02e      	b.n	80036cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800366e:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <xTaskResumeAll+0x120>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3318      	adds	r3, #24
 800367a:	4618      	mov	r0, r3
 800367c:	f7ff fd52 	bl	8003124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fd4d 	bl	8003124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	2201      	movs	r2, #1
 8003690:	409a      	lsls	r2, r3
 8003692:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <xTaskResumeAll+0x124>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	4a2a      	ldr	r2, [pc, #168]	@ (8003744 <xTaskResumeAll+0x124>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <xTaskResumeAll+0x128>)
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7ff fcdb 	bl	800306e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	4b23      	ldr	r3, [pc, #140]	@ (800374c <xTaskResumeAll+0x12c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036c6:	4b22      	ldr	r3, [pc, #136]	@ (8003750 <xTaskResumeAll+0x130>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036cc:	4b1c      	ldr	r3, [pc, #112]	@ (8003740 <xTaskResumeAll+0x120>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1cc      	bne.n	800366e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036da:	f000 fa1b 	bl	8003b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036de:	4b1d      	ldr	r3, [pc, #116]	@ (8003754 <xTaskResumeAll+0x134>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036ea:	f000 f837 	bl	800375c <xTaskIncrementTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80036f4:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <xTaskResumeAll+0x130>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f1      	bne.n	80036ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003706:	4b13      	ldr	r3, [pc, #76]	@ (8003754 <xTaskResumeAll+0x134>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800370c:	4b10      	ldr	r3, [pc, #64]	@ (8003750 <xTaskResumeAll+0x130>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003718:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <xTaskResumeAll+0x138>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003728:	f000 fba0 	bl	8003e6c <vPortExitCritical>

	return xAlreadyYielded;
 800372c:	68bb      	ldr	r3, [r7, #8]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200004e4 	.word	0x200004e4
 800373c:	200004bc 	.word	0x200004bc
 8003740:	2000047c 	.word	0x2000047c
 8003744:	200004c4 	.word	0x200004c4
 8003748:	200003c0 	.word	0x200003c0
 800374c:	200003bc 	.word	0x200003bc
 8003750:	200004d0 	.word	0x200004d0
 8003754:	200004cc 	.word	0x200004cc
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003766:	4b51      	ldr	r3, [pc, #324]	@ (80038ac <xTaskIncrementTick+0x150>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 808e 	bne.w	800388c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003770:	4b4f      	ldr	r3, [pc, #316]	@ (80038b0 <xTaskIncrementTick+0x154>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3301      	adds	r3, #1
 8003776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003778:	4a4d      	ldr	r2, [pc, #308]	@ (80038b0 <xTaskIncrementTick+0x154>)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d121      	bne.n	80037c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003784:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <xTaskIncrementTick+0x158>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	603b      	str	r3, [r7, #0]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xTaskIncrementTick+0x46>
 80037a6:	4b43      	ldr	r3, [pc, #268]	@ (80038b4 <xTaskIncrementTick+0x158>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	4b42      	ldr	r3, [pc, #264]	@ (80038b8 <xTaskIncrementTick+0x15c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a40      	ldr	r2, [pc, #256]	@ (80038b4 <xTaskIncrementTick+0x158>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4a40      	ldr	r2, [pc, #256]	@ (80038b8 <xTaskIncrementTick+0x15c>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b40      	ldr	r3, [pc, #256]	@ (80038bc <xTaskIncrementTick+0x160>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a3e      	ldr	r2, [pc, #248]	@ (80038bc <xTaskIncrementTick+0x160>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	f000 f9a6 	bl	8003b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037c8:	4b3d      	ldr	r3, [pc, #244]	@ (80038c0 <xTaskIncrementTick+0x164>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d34d      	bcc.n	800386e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037d2:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <xTaskIncrementTick+0x158>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <xTaskIncrementTick+0x84>
 80037dc:	2301      	movs	r3, #1
 80037de:	e000      	b.n	80037e2 <xTaskIncrementTick+0x86>
 80037e0:	2300      	movs	r3, #0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e6:	4b36      	ldr	r3, [pc, #216]	@ (80038c0 <xTaskIncrementTick+0x164>)
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	601a      	str	r2, [r3, #0]
					break;
 80037ee:	e03e      	b.n	800386e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037f0:	4b30      	ldr	r3, [pc, #192]	@ (80038b4 <xTaskIncrementTick+0x158>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d203      	bcs.n	8003810 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003808:	4a2d      	ldr	r2, [pc, #180]	@ (80038c0 <xTaskIncrementTick+0x164>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
						break;
 800380e:	e02e      	b.n	800386e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3304      	adds	r3, #4
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fc85 	bl	8003124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3318      	adds	r3, #24
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fc7c 	bl	8003124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <xTaskIncrementTick+0x168>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4313      	orrs	r3, r2
 800383a:	4a22      	ldr	r2, [pc, #136]	@ (80038c4 <xTaskIncrementTick+0x168>)
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a1f      	ldr	r2, [pc, #124]	@ (80038c8 <xTaskIncrementTick+0x16c>)
 800384c:	441a      	add	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7ff fc0a 	bl	800306e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <xTaskIncrementTick+0x170>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d3b4      	bcc.n	80037d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800386c:	e7b1      	b.n	80037d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <xTaskIncrementTick+0x170>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4914      	ldr	r1, [pc, #80]	@ (80038c8 <xTaskIncrementTick+0x16c>)
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d907      	bls.n	8003896 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003886:	2301      	movs	r3, #1
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e004      	b.n	8003896 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800388c:	4b10      	ldr	r3, [pc, #64]	@ (80038d0 <xTaskIncrementTick+0x174>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a0f      	ldr	r2, [pc, #60]	@ (80038d0 <xTaskIncrementTick+0x174>)
 8003894:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003896:	4b0f      	ldr	r3, [pc, #60]	@ (80038d4 <xTaskIncrementTick+0x178>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038a2:	697b      	ldr	r3, [r7, #20]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200004e4 	.word	0x200004e4
 80038b0:	200004c0 	.word	0x200004c0
 80038b4:	20000474 	.word	0x20000474
 80038b8:	20000478 	.word	0x20000478
 80038bc:	200004d4 	.word	0x200004d4
 80038c0:	200004dc 	.word	0x200004dc
 80038c4:	200004c4 	.word	0x200004c4
 80038c8:	200003c0 	.word	0x200003c0
 80038cc:	200003bc 	.word	0x200003bc
 80038d0:	200004cc 	.word	0x200004cc
 80038d4:	200004d0 	.word	0x200004d0

080038d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038de:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <vTaskSwitchContext+0xac>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <vTaskSwitchContext+0xb0>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038ec:	e045      	b.n	800397a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80038ee:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <vTaskSwitchContext+0xb0>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <vTaskSwitchContext+0xb4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	f1c3 031f 	rsb	r3, r3, #31
 8003908:	617b      	str	r3, [r7, #20]
 800390a:	4921      	ldr	r1, [pc, #132]	@ (8003990 <vTaskSwitchContext+0xb8>)
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <vTaskSwitchContext+0x5e>
	__asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	607b      	str	r3, [r7, #4]
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <vTaskSwitchContext+0x5a>
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <vTaskSwitchContext+0xb8>)
 8003942:	4413      	add	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	3308      	adds	r3, #8
 8003958:	429a      	cmp	r2, r3
 800395a:	d104      	bne.n	8003966 <vTaskSwitchContext+0x8e>
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a09      	ldr	r2, [pc, #36]	@ (8003994 <vTaskSwitchContext+0xbc>)
 800396e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003970:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <vTaskSwitchContext+0xbc>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	334c      	adds	r3, #76	@ 0x4c
 8003976:	4a08      	ldr	r2, [pc, #32]	@ (8003998 <vTaskSwitchContext+0xc0>)
 8003978:	6013      	str	r3, [r2, #0]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	200004e4 	.word	0x200004e4
 8003988:	200004d0 	.word	0x200004d0
 800398c:	200004c4 	.word	0x200004c4
 8003990:	200003c0 	.word	0x200003c0
 8003994:	200003bc 	.word	0x200003bc
 8003998:	20000010 	.word	0x20000010

0800399c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039a4:	f000 f852 	bl	8003a4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039a8:	4b06      	ldr	r3, [pc, #24]	@ (80039c4 <prvIdleTask+0x28>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d9f9      	bls.n	80039a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <prvIdleTask+0x2c>)
 80039b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039c0:	e7f0      	b.n	80039a4 <prvIdleTask+0x8>
 80039c2:	bf00      	nop
 80039c4:	200003c0 	.word	0x200003c0
 80039c8:	e000ed04 	.word	0xe000ed04

080039cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	e00c      	b.n	80039f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4a12      	ldr	r2, [pc, #72]	@ (8003a2c <prvInitialiseTaskLists+0x60>)
 80039e4:	4413      	add	r3, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fb16 	bl	8003018 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3301      	adds	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d9ef      	bls.n	80039d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039f8:	480d      	ldr	r0, [pc, #52]	@ (8003a30 <prvInitialiseTaskLists+0x64>)
 80039fa:	f7ff fb0d 	bl	8003018 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039fe:	480d      	ldr	r0, [pc, #52]	@ (8003a34 <prvInitialiseTaskLists+0x68>)
 8003a00:	f7ff fb0a 	bl	8003018 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a04:	480c      	ldr	r0, [pc, #48]	@ (8003a38 <prvInitialiseTaskLists+0x6c>)
 8003a06:	f7ff fb07 	bl	8003018 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a0a:	480c      	ldr	r0, [pc, #48]	@ (8003a3c <prvInitialiseTaskLists+0x70>)
 8003a0c:	f7ff fb04 	bl	8003018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a10:	480b      	ldr	r0, [pc, #44]	@ (8003a40 <prvInitialiseTaskLists+0x74>)
 8003a12:	f7ff fb01 	bl	8003018 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a16:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <prvInitialiseTaskLists+0x78>)
 8003a18:	4a05      	ldr	r2, [pc, #20]	@ (8003a30 <prvInitialiseTaskLists+0x64>)
 8003a1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <prvInitialiseTaskLists+0x7c>)
 8003a1e:	4a05      	ldr	r2, [pc, #20]	@ (8003a34 <prvInitialiseTaskLists+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200003c0 	.word	0x200003c0
 8003a30:	2000044c 	.word	0x2000044c
 8003a34:	20000460 	.word	0x20000460
 8003a38:	2000047c 	.word	0x2000047c
 8003a3c:	20000490 	.word	0x20000490
 8003a40:	200004a8 	.word	0x200004a8
 8003a44:	20000474 	.word	0x20000474
 8003a48:	20000478 	.word	0x20000478

08003a4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a52:	e019      	b.n	8003a88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a54:	f000 f9da 	bl	8003e0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a58:	4b10      	ldr	r3, [pc, #64]	@ (8003a9c <prvCheckTasksWaitingTermination+0x50>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3304      	adds	r3, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fb5d 	bl	8003124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <prvCheckTasksWaitingTermination+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4a0b      	ldr	r2, [pc, #44]	@ (8003aa0 <prvCheckTasksWaitingTermination+0x54>)
 8003a72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a74:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a7e:	f000 f9f5 	bl	8003e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f810 	bl	8003aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <prvCheckTasksWaitingTermination+0x58>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e1      	bne.n	8003a54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000490 	.word	0x20000490
 8003aa0:	200004bc 	.word	0x200004bc
 8003aa4:	200004a4 	.word	0x200004a4

08003aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	334c      	adds	r3, #76	@ 0x4c
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fc51 	bl	800435c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fb29 	bl	8004120 <vPortFree>
				vPortFree( pxTCB );
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fb26 	bl	8004120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ad4:	e019      	b.n	8003b0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d103      	bne.n	8003ae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fb1d 	bl	8004120 <vPortFree>
	}
 8003ae6:	e010      	b.n	8003b0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d00b      	beq.n	8003b0a <prvDeleteTCB+0x62>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	60fb      	str	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <prvDeleteTCB+0x5e>
	}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <prvResetNextTaskUnblockTime+0x40>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <prvResetNextTaskUnblockTime+0x14>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <prvResetNextTaskUnblockTime+0x16>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <prvResetNextTaskUnblockTime+0x44>)
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b36:	e008      	b.n	8003b4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b38:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <prvResetNextTaskUnblockTime+0x40>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <prvResetNextTaskUnblockTime+0x44>)
 8003b48:	6013      	str	r3, [r2, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	20000474 	.word	0x20000474
 8003b58:	200004dc 	.word	0x200004dc

08003b5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b66:	4b29      	ldr	r3, [pc, #164]	@ (8003c0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b6c:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fad6 	bl	8003124 <uxListRemove>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10b      	bne.n	8003b96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b7e:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	2201      	movs	r2, #1
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	4b21      	ldr	r3, [pc, #132]	@ (8003c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4013      	ands	r3, r2
 8003b92:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d10a      	bne.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x58>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	481a      	ldr	r0, [pc, #104]	@ (8003c18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bae:	f7ff fa5e 	bl	800306e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bb2:	e026      	b.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d209      	bcs.n	8003be0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4610      	mov	r0, r2
 8003bda:	f7ff fa6b 	bl	80030b4 <vListInsert>
}
 8003bde:	e010      	b.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7ff fa61 	bl	80030b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d202      	bcs.n	8003c02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003bfc:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6013      	str	r3, [r2, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200004c0 	.word	0x200004c0
 8003c10:	200003bc 	.word	0x200003bc
 8003c14:	200004c4 	.word	0x200004c4
 8003c18:	200004a8 	.word	0x200004a8
 8003c1c:	20000478 	.word	0x20000478
 8003c20:	20000474 	.word	0x20000474
 8003c24:	200004dc 	.word	0x200004dc

08003c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3b04      	subs	r3, #4
 8003c38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b04      	subs	r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	3b04      	subs	r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c58:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <pxPortInitialiseStack+0x54>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	3b14      	subs	r3, #20
 8003c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b20      	subs	r3, #32
 8003c6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c70:	68fb      	ldr	r3, [r7, #12]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	08003c81 	.word	0x08003c81

08003c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c8a:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <prvTaskExitError+0x54>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c92:	d00b      	beq.n	8003cac <prvTaskExitError+0x2c>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60fb      	str	r3, [r7, #12]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <prvTaskExitError+0x28>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60bb      	str	r3, [r7, #8]
}
 8003cbe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cc0:	bf00      	nop
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0fc      	beq.n	8003cc2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	2000000c 	.word	0x2000000c
	...

08003ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ce0:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <pxCurrentTCBConst2>)
 8003ce2:	6819      	ldr	r1, [r3, #0]
 8003ce4:	6808      	ldr	r0, [r1, #0]
 8003ce6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003cea:	f380 8809 	msr	PSP, r0
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8811 	msr	BASEPRI, r0
 8003cfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8003cfe:	4770      	bx	lr

08003d00 <pxCurrentTCBConst2>:
 8003d00:	200003bc 	.word	0x200003bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop

08003d08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d08:	4806      	ldr	r0, [pc, #24]	@ (8003d24 <prvPortStartFirstTask+0x1c>)
 8003d0a:	6800      	ldr	r0, [r0, #0]
 8003d0c:	6800      	ldr	r0, [r0, #0]
 8003d0e:	f380 8808 	msr	MSP, r0
 8003d12:	b662      	cpsie	i
 8003d14:	b661      	cpsie	f
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	f3bf 8f6f 	isb	sy
 8003d1e:	df00      	svc	0
 8003d20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d22:	bf00      	nop
 8003d24:	e000ed08 	.word	0xe000ed08

08003d28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d2e:	4b32      	ldr	r3, [pc, #200]	@ (8003df8 <xPortStartScheduler+0xd0>)
 8003d30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	@ 0xff
 8003d3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <xPortStartScheduler+0xd4>)
 8003d54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d56:	4b2a      	ldr	r3, [pc, #168]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d58:	2207      	movs	r2, #7
 8003d5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d5c:	e009      	b.n	8003d72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003d5e:	4b28      	ldr	r3, [pc, #160]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	4a26      	ldr	r2, [pc, #152]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d0ef      	beq.n	8003d5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d7e:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f1c3 0307 	rsb	r3, r3, #7
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d00b      	beq.n	8003da2 <xPortStartScheduler+0x7a>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	021b      	lsls	r3, r3, #8
 8003da8:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003daa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003db4:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <xPortStartScheduler+0xd8>)
 8003db6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	b2da      	uxtb	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003dc0:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003dca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003e04 <xPortStartScheduler+0xdc>)
 8003dd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003dd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dd8:	f000 f8b8 	bl	8003f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <xPortStartScheduler+0xe0>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003de2:	f7ff ff91 	bl	8003d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003de6:	f7ff fd77 	bl	80038d8 <vTaskSwitchContext>
	prvTaskExitError();
 8003dea:	f7ff ff49 	bl	8003c80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	e000e400 	.word	0xe000e400
 8003dfc:	200004e8 	.word	0x200004e8
 8003e00:	200004ec 	.word	0x200004ec
 8003e04:	e000ed20 	.word	0xe000ed20
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	607b      	str	r3, [r7, #4]
}
 8003e24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e26:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <vPortEnterCritical+0x58>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d110      	bne.n	8003e5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e38:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <vPortEnterCritical+0x5c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00b      	beq.n	8003e5a <vPortEnterCritical+0x4e>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	603b      	str	r3, [r7, #0]
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	e7fd      	b.n	8003e56 <vPortEnterCritical+0x4a>
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	2000000c 	.word	0x2000000c
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <vPortExitCritical+0x26>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	607b      	str	r3, [r7, #4]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e92:	4b0a      	ldr	r3, [pc, #40]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	4a08      	ldr	r2, [pc, #32]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e9c:	4b07      	ldr	r3, [pc, #28]	@ (8003ebc <vPortExitCritical+0x50>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <vPortExitCritical+0x44>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003eae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	2000000c 	.word	0x2000000c

08003ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003ec0:	f3ef 8009 	mrs	r0, PSP
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <pxCurrentTCBConst>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ed0:	6010      	str	r0, [r2, #0]
 8003ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003ed6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003eda:	f380 8811 	msr	BASEPRI, r0
 8003ede:	f7ff fcfb 	bl	80038d8 <vTaskSwitchContext>
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8811 	msr	BASEPRI, r0
 8003eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003eee:	6819      	ldr	r1, [r3, #0]
 8003ef0:	6808      	ldr	r0, [r1, #0]
 8003ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003ef6:	f380 8809 	msr	PSP, r0
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	4770      	bx	lr

08003f00 <pxCurrentTCBConst>:
 8003f00:	200003bc 	.word	0x200003bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop

08003f08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	607b      	str	r3, [r7, #4]
}
 8003f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f22:	f7ff fc1b 	bl	800375c <xTaskIncrementTick>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <SysTick_Handler+0x40>)
 8003f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f383 8811 	msr	BASEPRI, r3
}
 8003f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f50:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <vPortSetupTimerInterrupt+0x34>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	@ (8003f84 <vPortSetupTimerInterrupt+0x38>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a09      	ldr	r2, [pc, #36]	@ (8003f88 <vPortSetupTimerInterrupt+0x3c>)
 8003f62:	fba2 2303 	umull	r2, r3, r2, r3
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	4a08      	ldr	r2, [pc, #32]	@ (8003f8c <vPortSetupTimerInterrupt+0x40>)
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f6e:	4b03      	ldr	r3, [pc, #12]	@ (8003f7c <vPortSetupTimerInterrupt+0x30>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e010 	.word	0xe000e010
 8003f80:	e000e018 	.word	0xe000e018
 8003f84:	20000000 	.word	0x20000000
 8003f88:	10624dd3 	.word	0x10624dd3
 8003f8c:	e000e014 	.word	0xe000e014

08003f90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08a      	sub	sp, #40	@ 0x28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f9c:	f7ff fb32 	bl	8003604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800410c <pvPortMalloc+0x17c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003fa8:	f000 f916 	bl	80041d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fac:	4b58      	ldr	r3, [pc, #352]	@ (8004110 <pvPortMalloc+0x180>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 8090 	bne.w	80040da <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01e      	beq.n	8003ffe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d015      	beq.n	8003ffe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f023 0307 	bic.w	r3, r3, #7
 8003fd8:	3308      	adds	r3, #8
 8003fda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <pvPortMalloc+0x6e>
	__asm volatile
 8003fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	617b      	str	r3, [r7, #20]
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	e7fd      	b.n	8003ffa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d06a      	beq.n	80040da <pvPortMalloc+0x14a>
 8004004:	4b43      	ldr	r3, [pc, #268]	@ (8004114 <pvPortMalloc+0x184>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d865      	bhi.n	80040da <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800400e:	4b42      	ldr	r3, [pc, #264]	@ (8004118 <pvPortMalloc+0x188>)
 8004010:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004012:	4b41      	ldr	r3, [pc, #260]	@ (8004118 <pvPortMalloc+0x188>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004018:	e004      	b.n	8004024 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	429a      	cmp	r2, r3
 800402c:	d903      	bls.n	8004036 <pvPortMalloc+0xa6>
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f1      	bne.n	800401a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004036:	4b35      	ldr	r3, [pc, #212]	@ (800410c <pvPortMalloc+0x17c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	429a      	cmp	r2, r3
 800403e:	d04c      	beq.n	80040da <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	4413      	add	r3, r2
 8004048:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	1ad2      	subs	r2, r2, r3
 800405a:	2308      	movs	r3, #8
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	429a      	cmp	r2, r3
 8004060:	d920      	bls.n	80040a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <pvPortMalloc+0xfc>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	613b      	str	r3, [r7, #16]
}
 8004086:	bf00      	nop
 8004088:	bf00      	nop
 800408a:	e7fd      	b.n	8004088 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	1ad2      	subs	r2, r2, r3
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800409e:	69b8      	ldr	r0, [r7, #24]
 80040a0:	f000 f8fc 	bl	800429c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004114 <pvPortMalloc+0x184>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <pvPortMalloc+0x184>)
 80040b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040b2:	4b18      	ldr	r3, [pc, #96]	@ (8004114 <pvPortMalloc+0x184>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b19      	ldr	r3, [pc, #100]	@ (800411c <pvPortMalloc+0x18c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d203      	bcs.n	80040c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <pvPortMalloc+0x184>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a16      	ldr	r2, [pc, #88]	@ (800411c <pvPortMalloc+0x18c>)
 80040c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <pvPortMalloc+0x180>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040da:	f7ff faa1 	bl	8003620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00b      	beq.n	8004100 <pvPortMalloc+0x170>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60fb      	str	r3, [r7, #12]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <pvPortMalloc+0x16c>
	return pvReturn;
 8004100:	69fb      	ldr	r3, [r7, #28]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3728      	adds	r7, #40	@ 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200014f8 	.word	0x200014f8
 8004110:	20001504 	.word	0x20001504
 8004114:	200014fc 	.word	0x200014fc
 8004118:	200014f0 	.word	0x200014f0
 800411c:	20001500 	.word	0x20001500

08004120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d04a      	beq.n	80041c8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004132:	2308      	movs	r3, #8
 8004134:	425b      	negs	r3, r3
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4413      	add	r3, r2
 800413a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <vPortFree+0xb0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <vPortFree+0x46>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	60fb      	str	r3, [r7, #12]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00b      	beq.n	8004186 <vPortFree+0x66>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60bb      	str	r3, [r7, #8]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	4b11      	ldr	r3, [pc, #68]	@ (80041d0 <vPortFree+0xb0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d019      	beq.n	80041c8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4b0b      	ldr	r3, [pc, #44]	@ (80041d0 <vPortFree+0xb0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	401a      	ands	r2, r3
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80041ac:	f7ff fa2a 	bl	8003604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <vPortFree+0xb4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4413      	add	r3, r2
 80041ba:	4a06      	ldr	r2, [pc, #24]	@ (80041d4 <vPortFree+0xb4>)
 80041bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041be:	6938      	ldr	r0, [r7, #16]
 80041c0:	f000 f86c 	bl	800429c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80041c4:	f7ff fa2c 	bl	8003620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80041c8:	bf00      	nop
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20001504 	.word	0x20001504
 80041d4:	200014fc 	.word	0x200014fc

080041d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041e4:	4b27      	ldr	r3, [pc, #156]	@ (8004284 <prvHeapInit+0xac>)
 80041e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00c      	beq.n	800420c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3307      	adds	r3, #7
 80041f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0307 	bic.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	4a1f      	ldr	r2, [pc, #124]	@ (8004284 <prvHeapInit+0xac>)
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004210:	4a1d      	ldr	r2, [pc, #116]	@ (8004288 <prvHeapInit+0xb0>)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004216:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <prvHeapInit+0xb0>)
 8004218:	2200      	movs	r2, #0
 800421a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004224:	2208      	movs	r2, #8
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a15      	ldr	r2, [pc, #84]	@ (800428c <prvHeapInit+0xb4>)
 8004238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <prvHeapInit+0xb4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004242:	4b12      	ldr	r3, [pc, #72]	@ (800428c <prvHeapInit+0xb4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004258:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <prvHeapInit+0xb4>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	4a0a      	ldr	r2, [pc, #40]	@ (8004290 <prvHeapInit+0xb8>)
 8004266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <prvHeapInit+0xbc>)
 800426e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004270:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <prvHeapInit+0xc0>)
 8004272:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004276:	601a      	str	r2, [r3, #0]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	200004f0 	.word	0x200004f0
 8004288:	200014f0 	.word	0x200014f0
 800428c:	200014f8 	.word	0x200014f8
 8004290:	20001500 	.word	0x20001500
 8004294:	200014fc 	.word	0x200014fc
 8004298:	20001504 	.word	0x20001504

0800429c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042a4:	4b27      	ldr	r3, [pc, #156]	@ (8004344 <prvInsertBlockIntoFreeList+0xa8>)
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e002      	b.n	80042b0 <prvInsertBlockIntoFreeList+0x14>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d8f7      	bhi.n	80042aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	4413      	add	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d108      	bne.n	80042de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	441a      	add	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d118      	bne.n	8004324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b14      	ldr	r3, [pc, #80]	@ (8004348 <prvInsertBlockIntoFreeList+0xac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d00d      	beq.n	800431a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	441a      	add	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	e008      	b.n	800432c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800431a:	4b0b      	ldr	r3, [pc, #44]	@ (8004348 <prvInsertBlockIntoFreeList+0xac>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	e003      	b.n	800432c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d002      	beq.n	800433a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr
 8004344:	200014f0 	.word	0x200014f0
 8004348:	200014f8 	.word	0x200014f8

0800434c <memset>:
 800434c:	4603      	mov	r3, r0
 800434e:	4402      	add	r2, r0
 8004350:	4293      	cmp	r3, r2
 8004352:	d100      	bne.n	8004356 <memset+0xa>
 8004354:	4770      	bx	lr
 8004356:	f803 1b01 	strb.w	r1, [r3], #1
 800435a:	e7f9      	b.n	8004350 <memset+0x4>

0800435c <_reclaim_reent>:
 800435c:	4b29      	ldr	r3, [pc, #164]	@ (8004404 <_reclaim_reent+0xa8>)
 800435e:	b570      	push	{r4, r5, r6, lr}
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4604      	mov	r4, r0
 8004364:	4283      	cmp	r3, r0
 8004366:	d04b      	beq.n	8004400 <_reclaim_reent+0xa4>
 8004368:	69c3      	ldr	r3, [r0, #28]
 800436a:	b1ab      	cbz	r3, 8004398 <_reclaim_reent+0x3c>
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	b16b      	cbz	r3, 800438c <_reclaim_reent+0x30>
 8004370:	2500      	movs	r5, #0
 8004372:	69e3      	ldr	r3, [r4, #28]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	5959      	ldr	r1, [r3, r5]
 8004378:	2900      	cmp	r1, #0
 800437a:	d13b      	bne.n	80043f4 <_reclaim_reent+0x98>
 800437c:	3504      	adds	r5, #4
 800437e:	2d80      	cmp	r5, #128	@ 0x80
 8004380:	d1f7      	bne.n	8004372 <_reclaim_reent+0x16>
 8004382:	69e3      	ldr	r3, [r4, #28]
 8004384:	4620      	mov	r0, r4
 8004386:	68d9      	ldr	r1, [r3, #12]
 8004388:	f000 f864 	bl	8004454 <_free_r>
 800438c:	69e3      	ldr	r3, [r4, #28]
 800438e:	6819      	ldr	r1, [r3, #0]
 8004390:	b111      	cbz	r1, 8004398 <_reclaim_reent+0x3c>
 8004392:	4620      	mov	r0, r4
 8004394:	f000 f85e 	bl	8004454 <_free_r>
 8004398:	6961      	ldr	r1, [r4, #20]
 800439a:	b111      	cbz	r1, 80043a2 <_reclaim_reent+0x46>
 800439c:	4620      	mov	r0, r4
 800439e:	f000 f859 	bl	8004454 <_free_r>
 80043a2:	69e1      	ldr	r1, [r4, #28]
 80043a4:	b111      	cbz	r1, 80043ac <_reclaim_reent+0x50>
 80043a6:	4620      	mov	r0, r4
 80043a8:	f000 f854 	bl	8004454 <_free_r>
 80043ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80043ae:	b111      	cbz	r1, 80043b6 <_reclaim_reent+0x5a>
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 f84f 	bl	8004454 <_free_r>
 80043b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043b8:	b111      	cbz	r1, 80043c0 <_reclaim_reent+0x64>
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 f84a 	bl	8004454 <_free_r>
 80043c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80043c2:	b111      	cbz	r1, 80043ca <_reclaim_reent+0x6e>
 80043c4:	4620      	mov	r0, r4
 80043c6:	f000 f845 	bl	8004454 <_free_r>
 80043ca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80043cc:	b111      	cbz	r1, 80043d4 <_reclaim_reent+0x78>
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 f840 	bl	8004454 <_free_r>
 80043d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043d6:	b111      	cbz	r1, 80043de <_reclaim_reent+0x82>
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 f83b 	bl	8004454 <_free_r>
 80043de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80043e0:	b111      	cbz	r1, 80043e8 <_reclaim_reent+0x8c>
 80043e2:	4620      	mov	r0, r4
 80043e4:	f000 f836 	bl	8004454 <_free_r>
 80043e8:	6a23      	ldr	r3, [r4, #32]
 80043ea:	b14b      	cbz	r3, 8004400 <_reclaim_reent+0xa4>
 80043ec:	4620      	mov	r0, r4
 80043ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80043f2:	4718      	bx	r3
 80043f4:	680e      	ldr	r6, [r1, #0]
 80043f6:	4620      	mov	r0, r4
 80043f8:	f000 f82c 	bl	8004454 <_free_r>
 80043fc:	4631      	mov	r1, r6
 80043fe:	e7bb      	b.n	8004378 <_reclaim_reent+0x1c>
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	bf00      	nop
 8004404:	20000010 	.word	0x20000010

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	2600      	movs	r6, #0
 800440c:	4d0c      	ldr	r5, [pc, #48]	@ (8004440 <__libc_init_array+0x38>)
 800440e:	4c0d      	ldr	r4, [pc, #52]	@ (8004444 <__libc_init_array+0x3c>)
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	f000 f870 	bl	80044fc <_init>
 800441c:	2600      	movs	r6, #0
 800441e:	4d0a      	ldr	r5, [pc, #40]	@ (8004448 <__libc_init_array+0x40>)
 8004420:	4c0a      	ldr	r4, [pc, #40]	@ (800444c <__libc_init_array+0x44>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004670 	.word	0x08004670
 8004444:	08004670 	.word	0x08004670
 8004448:	08004670 	.word	0x08004670
 800444c:	08004674 	.word	0x08004674

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <_free_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4605      	mov	r5, r0
 8004458:	2900      	cmp	r1, #0
 800445a:	d040      	beq.n	80044de <_free_r+0x8a>
 800445c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004460:	1f0c      	subs	r4, r1, #4
 8004462:	2b00      	cmp	r3, #0
 8004464:	bfb8      	it	lt
 8004466:	18e4      	addlt	r4, r4, r3
 8004468:	f000 f83c 	bl	80044e4 <__malloc_lock>
 800446c:	4a1c      	ldr	r2, [pc, #112]	@ (80044e0 <_free_r+0x8c>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	b933      	cbnz	r3, 8004480 <_free_r+0x2c>
 8004472:	6063      	str	r3, [r4, #4]
 8004474:	6014      	str	r4, [r2, #0]
 8004476:	4628      	mov	r0, r5
 8004478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800447c:	f000 b838 	b.w	80044f0 <__malloc_unlock>
 8004480:	42a3      	cmp	r3, r4
 8004482:	d908      	bls.n	8004496 <_free_r+0x42>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	1821      	adds	r1, r4, r0
 8004488:	428b      	cmp	r3, r1
 800448a:	bf01      	itttt	eq
 800448c:	6819      	ldreq	r1, [r3, #0]
 800448e:	685b      	ldreq	r3, [r3, #4]
 8004490:	1809      	addeq	r1, r1, r0
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	e7ed      	b.n	8004472 <_free_r+0x1e>
 8004496:	461a      	mov	r2, r3
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	b10b      	cbz	r3, 80044a0 <_free_r+0x4c>
 800449c:	42a3      	cmp	r3, r4
 800449e:	d9fa      	bls.n	8004496 <_free_r+0x42>
 80044a0:	6811      	ldr	r1, [r2, #0]
 80044a2:	1850      	adds	r0, r2, r1
 80044a4:	42a0      	cmp	r0, r4
 80044a6:	d10b      	bne.n	80044c0 <_free_r+0x6c>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	4401      	add	r1, r0
 80044ac:	1850      	adds	r0, r2, r1
 80044ae:	4283      	cmp	r3, r0
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	d1e0      	bne.n	8004476 <_free_r+0x22>
 80044b4:	6818      	ldr	r0, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4408      	add	r0, r1
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	6053      	str	r3, [r2, #4]
 80044be:	e7da      	b.n	8004476 <_free_r+0x22>
 80044c0:	d902      	bls.n	80044c8 <_free_r+0x74>
 80044c2:	230c      	movs	r3, #12
 80044c4:	602b      	str	r3, [r5, #0]
 80044c6:	e7d6      	b.n	8004476 <_free_r+0x22>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	1821      	adds	r1, r4, r0
 80044cc:	428b      	cmp	r3, r1
 80044ce:	bf01      	itttt	eq
 80044d0:	6819      	ldreq	r1, [r3, #0]
 80044d2:	685b      	ldreq	r3, [r3, #4]
 80044d4:	1809      	addeq	r1, r1, r0
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6054      	str	r4, [r2, #4]
 80044dc:	e7cb      	b.n	8004476 <_free_r+0x22>
 80044de:	bd38      	pop	{r3, r4, r5, pc}
 80044e0:	20001644 	.word	0x20001644

080044e4 <__malloc_lock>:
 80044e4:	4801      	ldr	r0, [pc, #4]	@ (80044ec <__malloc_lock+0x8>)
 80044e6:	f7ff bfb3 	b.w	8004450 <__retarget_lock_acquire_recursive>
 80044ea:	bf00      	nop
 80044ec:	20001640 	.word	0x20001640

080044f0 <__malloc_unlock>:
 80044f0:	4801      	ldr	r0, [pc, #4]	@ (80044f8 <__malloc_unlock+0x8>)
 80044f2:	f7ff bfae 	b.w	8004452 <__retarget_lock_release_recursive>
 80044f6:	bf00      	nop
 80044f8:	20001640 	.word	0x20001640

080044fc <_init>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr

08004508 <_fini>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr
