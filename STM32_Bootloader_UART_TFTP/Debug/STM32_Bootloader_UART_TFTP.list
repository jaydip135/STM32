
STM32_Bootloader_UART_TFTP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014150  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020ec  08014334  08014334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016420  08016420  000181e0  2**0
                  CONTENTS
  4 .ARM          00000008  08016420  08016420  00017420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016428  08016428  000181e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016428  08016428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801642c  0801642c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08016430  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000955c  200001e0  08016610  000181e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000973c  08016610  0001873c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000181e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023071  00000000  00000000  00018209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006daa  00000000  00000000  0003b27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00042028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145b  00000000  00000000  00043a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd10  00000000  00000000  00044ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fc12  00000000  00000000  00072be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdb62  00000000  00000000  000a27f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  0017039c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001774e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	00000000 	.word	0x00000000
 8000204:	0801431c 	.word	0x0801431c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e4 	.word	0x200001e4
 8000220:	0801431c 	.word	0x0801431c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b968 	b.w	800051c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	fb07 1114 	mls	r1, r7, r4, r1
 800029e:	fa1f f68c 	uxth.w	r6, ip
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8110 	bcs.w	80004de <__udivmoddi4+0x27a>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810d 	bls.w	80004de <__udivmoddi4+0x27a>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	fb00 f606 	mul.w	r6, r0, r6
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fa 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f7 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	2100      	movs	r1, #0
 80002fa:	1b9b      	subs	r3, r3, r6
 80002fc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80ee 	bcc.w	800050c <__udivmoddi4+0x2a8>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 808f 	bne.w	8000466 <__udivmoddi4+0x202>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	2101      	movs	r1, #1
 800034e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000352:	fa1f f78c 	uxth.w	r7, ip
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	fb07 f006 	mul.w	r0, r7, r6
 8000362:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b0>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	fb00 f707 	mul.w	r7, r0, r7
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80ae 	bhi.w	8000506 <__udivmoddi4+0x2a2>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa24 f607 	lsr.w	r6, r4, r7
 80003c6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ca:	fbb6 f8f9 	udiv	r8, r6, r9
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	fb09 6618 	mls	r6, r9, r8, r6
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	408c      	lsls	r4, r1
 80003dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003e0:	fb08 f00e 	mul.w	r0, r8, lr
 80003e4:	431c      	orrs	r4, r3
 80003e6:	0c23      	lsrs	r3, r4, #16
 80003e8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ec:	4298      	cmp	r0, r3
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	eb1c 0303 	adds.w	r3, ip, r3
 80003f8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003fc:	f080 8081 	bcs.w	8000502 <__udivmoddi4+0x29e>
 8000400:	4298      	cmp	r0, r3
 8000402:	d97e      	bls.n	8000502 <__udivmoddi4+0x29e>
 8000404:	f1a8 0802 	sub.w	r8, r8, #2
 8000408:	4463      	add	r3, ip
 800040a:	1a1e      	subs	r6, r3, r0
 800040c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000410:	fb09 6613 	mls	r6, r9, r3, r6
 8000414:	fb03 fe0e 	mul.w	lr, r3, lr
 8000418:	b2a4      	uxth	r4, r4
 800041a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800041e:	45a6      	cmp	lr, r4
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x1d0>
 8000422:	eb1c 0404 	adds.w	r4, ip, r4
 8000426:	f103 30ff 	add.w	r0, r3, #4294967295
 800042a:	d266      	bcs.n	80004fa <__udivmoddi4+0x296>
 800042c:	45a6      	cmp	lr, r4
 800042e:	d964      	bls.n	80004fa <__udivmoddi4+0x296>
 8000430:	3b02      	subs	r3, #2
 8000432:	4464      	add	r4, ip
 8000434:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000438:	fba0 8302 	umull	r8, r3, r0, r2
 800043c:	eba4 040e 	sub.w	r4, r4, lr
 8000440:	429c      	cmp	r4, r3
 8000442:	46c6      	mov	lr, r8
 8000444:	461e      	mov	r6, r3
 8000446:	d350      	bcc.n	80004ea <__udivmoddi4+0x286>
 8000448:	d04d      	beq.n	80004e6 <__udivmoddi4+0x282>
 800044a:	b155      	cbz	r5, 8000462 <__udivmoddi4+0x1fe>
 800044c:	ebba 030e 	subs.w	r3, sl, lr
 8000450:	eb64 0406 	sbc.w	r4, r4, r6
 8000454:	fa04 f707 	lsl.w	r7, r4, r7
 8000458:	40cb      	lsrs	r3, r1
 800045a:	431f      	orrs	r7, r3
 800045c:	40cc      	lsrs	r4, r1
 800045e:	e9c5 7400 	strd	r7, r4, [r5]
 8000462:	2100      	movs	r1, #0
 8000464:	e751      	b.n	800030a <__udivmoddi4+0xa6>
 8000466:	fa0c fc02 	lsl.w	ip, ip, r2
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d9      	lsrs	r1, r3
 8000470:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000474:	fa20 f303 	lsr.w	r3, r0, r3
 8000478:	fa00 fe02 	lsl.w	lr, r0, r2
 800047c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000480:	fb08 1110 	mls	r1, r8, r0, r1
 8000484:	4094      	lsls	r4, r2
 8000486:	431c      	orrs	r4, r3
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x248>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29a>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b2:	fb08 3311 	mls	r3, r8, r1, r3
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x292>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x292>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e73b      	b.n	8000356 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f2      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e708      	b.n	80002f8 <__udivmoddi4+0x94>
 80004e6:	45c2      	cmp	sl, r8
 80004e8:	d2af      	bcs.n	800044a <__udivmoddi4+0x1e6>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 060c 	sbc.w	r6, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a9      	b.n	800044a <__udivmoddi4+0x1e6>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x272>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e79a      	b.n	8000434 <__udivmoddi4+0x1d0>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x248>
 8000502:	46b0      	mov	r8, r6
 8000504:	e781      	b.n	800040a <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74f      	b.n	80003ac <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e711      	b.n	8000338 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
   HAL_FLASH_Unlock();
 8000524:	f002 fe1a 	bl	800315c <HAL_FLASH_Unlock>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
int8_t FLASH_If_Erase(uint32_t StartSector)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t FlashAddress;

  FlashAddress = StartSector;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	61fb      	str	r3, [r7, #28]

  /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     be done by word */

  if (FlashAddress <= (uint32_t) USER_FLASH_LAST_PAGE_ADDRESS)
 8000538:	69fb      	ldr	r3, [r7, #28]
 800053a:	4a0f      	ldr	r2, [pc, #60]	@ (8000578 <FLASH_If_Erase+0x4c>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d814      	bhi.n	800056a <FLASH_If_Erase+0x3e>
  {
    FLASH_EraseInitTypeDef FLASH_EraseInitStruct;
    uint32_t sectornb = 0;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]

    //erase from sector 5 to 16
    FLASH_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
    FLASH_EraseInitStruct.PageAddress = USER_FLASH_FIRST_PAGE_ADDRESS;
 8000548:	4b0c      	ldr	r3, [pc, #48]	@ (800057c <FLASH_If_Erase+0x50>)
 800054a:	617b      	str	r3, [r7, #20]
    FLASH_EraseInitStruct.NbPages = 64;
 800054c:	2340      	movs	r3, #64	@ 0x40
 800054e:	61bb      	str	r3, [r7, #24]


    if (HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &sectornb) != HAL_OK)
 8000550:	f107 0208 	add.w	r2, r7, #8
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	4611      	mov	r1, r2
 800055a:	4618      	mov	r0, r3
 800055c:	f002 fee6 	bl	800332c <HAL_FLASHEx_Erase>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d003      	beq.n	800056e <FLASH_If_Erase+0x42>
      return (1);
 8000566:	2301      	movs	r3, #1
 8000568:	e002      	b.n	8000570 <FLASH_If_Erase+0x44>
  }
  else
  {
    return (1);
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <FLASH_If_Erase+0x44>
  }

  return (0);
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	0803f800 	.word	0x0803f800
 800057c:	08020000 	.word	0x08020000

08000580 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint16_t DataLength)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	4613      	mov	r3, r2
 800058c:	80fb      	strh	r3, [r7, #6]
  uint32_t i = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e028      	b.n	80005ea <FLASH_If_Write+0x6a>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, *FlashAddress,  *(uint32_t*)(Data+i)) == HAL_OK)
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	6819      	ldr	r1, [r3, #0]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	461c      	mov	r4, r3
 80005aa:	4615      	mov	r5, r2
 80005ac:	4622      	mov	r2, r4
 80005ae:	462b      	mov	r3, r5
 80005b0:	2002      	movs	r0, #2
 80005b2:	f002 fd63 	bl	800307c <HAL_FLASH_Program>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d111      	bne.n	80005e0 <FLASH_If_Write+0x60>
    {
     /* Check the written value */
      if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	697b      	ldr	r3, [r7, #20]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	68b9      	ldr	r1, [r7, #8]
 80005c8:	440b      	add	r3, r1
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d001      	beq.n	80005d4 <FLASH_If_Write+0x54>
      {
        /* Flash content doesn't match SRAM content */
        return(2);
 80005d0:	2302      	movs	r3, #2
 80005d2:	e014      	b.n	80005fe <FLASH_If_Write+0x7e>
      }
      /* Increment FLASH destination address */
      *FlashAddress += 4;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1d1a      	adds	r2, r3, #4
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	e001      	b.n	80005e4 <FLASH_If_Write+0x64>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (1);
 80005e0:	2301      	movs	r3, #1
 80005e2:	e00c      	b.n	80005fe <FLASH_If_Write+0x7e>
  for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3301      	adds	r3, #1
 80005e8:	617b      	str	r3, [r7, #20]
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	697a      	ldr	r2, [r7, #20]
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d204      	bcs.n	80005fc <FLASH_If_Write+0x7c>
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <FLASH_If_Write+0x88>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d9cd      	bls.n	8000598 <FLASH_If_Write+0x18>
    }
  }

  return (0);
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3718      	adds	r7, #24
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}
 8000606:	bf00      	nop
 8000608:	0803fffb 	.word	0x0803fffb

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 f8cd 	bl	80017b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f881 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f92f 	bl	800087c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800061e:	f000 f903 	bl	8000828 <MX_USART1_UART_Init>
  MX_LWIP_Init();
 8000622:	f007 fa2d 	bl	8007a80 <MX_LWIP_Init>
  MX_USB_DEVICE_Init();
 8000626:	f012 f827 	bl	8012678 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(4000);
 800062a:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800062e:	f001 f945 	bl	80018bc <HAL_Delay>

  uint8_t *data = (uint8_t *)"Bootloader v1:0 Started!!!\n";
 8000632:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <main+0xf8>)
 8000634:	617b      	str	r3, [r7, #20]
  CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000636:	6978      	ldr	r0, [r7, #20]
 8000638:	f7ff fdf4 	bl	8000224 <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	b29b      	uxth	r3, r3
 8000640:	4619      	mov	r1, r3
 8000642:	6978      	ldr	r0, [r7, #20]
 8000644:	f012 f8d6 	bl	80127f4 <CDC_Transmit_FS>
  HAL_Delay(1000);
 8000648:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800064c:	f001 f936 	bl	80018bc <HAL_Delay>
  uint8_t *data1 = (uint8_t *)"checking user button...\r\n";
 8000650:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <main+0xfc>)
 8000652:	613b      	str	r3, [r7, #16]
  CDC_Transmit_FS((uint8_t *)data1, strlen((char *)data1));
 8000654:	6938      	ldr	r0, [r7, #16]
 8000656:	f7ff fde5 	bl	8000224 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29b      	uxth	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	6938      	ldr	r0, [r7, #16]
 8000662:	f012 f8c7 	bl	80127f4 <CDC_Transmit_FS>
  HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800066a:	f001 f927 	bl	80018bc <HAL_Delay>
  if (HAL_GPIO_ReadPin(DP_0_GPIO_Port, DP_0_Pin) == 0x00)
 800066e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000672:	4826      	ldr	r0, [pc, #152]	@ (800070c <main+0x100>)
 8000674:	f003 f886 	bl	8003784 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d124      	bne.n	80006c8 <main+0xbc>
  {
	  uint8_t *data3 = (uint8_t *)"Update From TFTP Server\r\n";
 800067e:	4b24      	ldr	r3, [pc, #144]	@ (8000710 <main+0x104>)
 8000680:	60bb      	str	r3, [r7, #8]
	  CDC_Transmit_FS((uint8_t *)data3, strlen((char *)data3));
 8000682:	68b8      	ldr	r0, [r7, #8]
 8000684:	f7ff fdce 	bl	8000224 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29b      	uxth	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	68b8      	ldr	r0, [r7, #8]
 8000690:	f012 f8b0 	bl	80127f4 <CDC_Transmit_FS>
	  HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000698:	f001 f910 	bl	80018bc <HAL_Delay>
	  tftp_update();
 800069c:	f000 f972 	bl	8000984 <tftp_update>
	  HAL_Delay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a4:	f001 f90a 	bl	80018bc <HAL_Delay>
	  uint8_t *data4 = (uint8_t *)"start tftp server...\r\n";
 80006a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000714 <main+0x108>)
 80006aa:	607b      	str	r3, [r7, #4]
	  CDC_Transmit_FS((uint8_t *)data4, strlen((char *)data4));
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fdb9 	bl	8000224 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f012 f89b 	bl	80127f4 <CDC_Transmit_FS>
	  IAP_tftpd_init();
 80006be:	f001 f81b 	bl	80016f8 <IAP_tftpd_init>
	  while(1)
	  {
		  MX_LWIP_Process();
 80006c2:	f007 fb03 	bl	8007ccc <MX_LWIP_Process>
 80006c6:	e7fc      	b.n	80006c2 <main+0xb6>
	  }
  }
  else if (HAL_GPIO_ReadPin(DP_1_GPIO_Port, DP_1_Pin) == 0x00)
 80006c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006cc:	480f      	ldr	r0, [pc, #60]	@ (800070c <main+0x100>)
 80006ce:	f003 f859 	bl	8003784 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10f      	bne.n	80006f8 <main+0xec>
		{
	  	  uint8_t *data2 = (uint8_t *)"Update From UART\r\n";
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <main+0x10c>)
 80006da:	60fb      	str	r3, [r7, #12]
	  	  CDC_Transmit_FS((uint8_t *)data2, strlen((char *)data2));
 80006dc:	68f8      	ldr	r0, [r7, #12]
 80006de:	f7ff fda1 	bl	8000224 <strlen>
 80006e2:	4603      	mov	r3, r0
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	4619      	mov	r1, r3
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f012 f883 	bl	80127f4 <CDC_Transmit_FS>
	  	  Firmware_Update();
 80006ee:	f000 fa75 	bl	8000bdc <Firmware_Update>

	  	  goto_application();
 80006f2:	f000 fb87 	bl	8000e04 <goto_application>
 80006f6:	e002      	b.n	80006fe <main+0xf2>
		}
  else{
	  	  goto_application();
 80006f8:	f000 fb84 	bl	8000e04 <goto_application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while (1)
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	e7fd      	b.n	80006fe <main+0xf2>
 8000702:	bf00      	nop
 8000704:	08014334 	.word	0x08014334
 8000708:	08014350 	.word	0x08014350
 800070c:	40011400 	.word	0x40011400
 8000710:	0801436c 	.word	0x0801436c
 8000714:	08014388 	.word	0x08014388
 8000718:	080143a0 	.word	0x080143a0

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	@ 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000726:	2238      	movs	r2, #56	@ 0x38
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f012 fea4 	bl	8013478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f012 fe96 	bl	8013478 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074c:	2301      	movs	r3, #1
 800074e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000756:	2304      	movs	r3, #4
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	2301      	movs	r3, #1
 800075c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800075e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000768:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800076c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800076e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000772:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000778:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800077c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fa2c 	bl	8004be4 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000792:	f000 fb7d 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b0:	2102      	movs	r1, #2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 fd2c 	bl	8005210 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007be:	f000 fb67 	bl	8000e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80007c2:	2310      	movs	r3, #16
 80007c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV3;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  PeriphClkInit.PLLI2S.PLLI2SMUL = RCC_PLLI2S_MUL10;
 80007ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLI2S.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80007d0:	2340      	movs	r3, #64	@ 0x40
 80007d2:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 ff48 	bl	800566c <HAL_RCCEx_PeriphCLKConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007e2:	f000 fb55 	bl	8000e90 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 80007ec:	2000      	movs	r0, #0
 80007ee:	f004 fdf9 	bl	80053e4 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <SystemClock_Config+0x104>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <SystemClock_Config+0x104>)
 80007fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000800:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8000802:	4b07      	ldr	r3, [pc, #28]	@ (8000820 <SystemClock_Config+0x104>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800080a:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <SystemClock_Config+0x104>)
 800080c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000810:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000812:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SystemClock_Config+0x108>)
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	3770      	adds	r7, #112	@ 0x70
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	42420070 	.word	0x42420070

08000828 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_USART1_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USART1_UART_Init+0x4c>)
 8000860:	f005 f836 	bl	80058d0 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 fb11 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001fc 	.word	0x200001fc
 8000878:	40013800 	.word	0x40013800

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000890:	4b37      	ldr	r3, [pc, #220]	@ (8000970 <MX_GPIO_Init+0xf4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	4a36      	ldr	r2, [pc, #216]	@ (8000970 <MX_GPIO_Init+0xf4>)
 8000896:	f043 0310 	orr.w	r3, r3, #16
 800089a:	6193      	str	r3, [r2, #24]
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <MX_GPIO_Init+0xf4>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f003 0310 	and.w	r3, r3, #16
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a30      	ldr	r2, [pc, #192]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a24      	ldr	r2, [pc, #144]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_GPIO_Init+0xf4>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f6:	481f      	ldr	r0, [pc, #124]	@ (8000974 <MX_GPIO_Init+0xf8>)
 80008f8:	f002 ff5b 	bl	80037b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 80008fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2302      	movs	r3, #2
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	4817      	ldr	r0, [pc, #92]	@ (8000974 <MX_GPIO_Init+0xf8>)
 8000916:	f002 fdb1 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : DP_0_Pin */
  GPIO_InitStruct.Pin = DP_0_Pin;
 800091a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xfc>)
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DP_0_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4813      	ldr	r0, [pc, #76]	@ (800097c <MX_GPIO_Init+0x100>)
 8000930:	f002 fda4 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pins : DP_1_Pin DP_2_Pin */
  GPIO_InitStruct.Pin = DP_1_Pin|DP_2_Pin;
 8000934:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000938:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4619      	mov	r1, r3
 8000948:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_GPIO_Init+0x100>)
 800094a:	f002 fd97 	bl	800347c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800094e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_GPIO_Init+0x104>)
 8000964:	f002 fd8a 	bl	800347c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	40011000 	.word	0x40011000
 8000978:	10110000 	.word	0x10110000
 800097c:	40011400 	.word	0x40011400
 8000980:	40010800 	.word	0x40010800

08000984 <tftp_update>:

/* USER CODE BEGIN 4 */

void tftp_update()
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(DP_2_GPIO_Port, DP_2_Pin) == 0x01)
 800098a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800098e:	4824      	ldr	r0, [pc, #144]	@ (8000a20 <tftp_update+0x9c>)
 8000990:	f002 fef8 	bl	8003784 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b01      	cmp	r3, #1
 8000998:	d13e      	bne.n	8000a18 <tftp_update+0x94>
	{
		/* Check if valid stack address (RAM address) then jump to user application */
		if (((*(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS) & 0x2FFF0000 ) == 0x20010000)
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <tftp_update+0xa0>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <tftp_update+0xa4>)
 80009a0:	4013      	ands	r3, r2
 80009a2:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <tftp_update+0xa8>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d12c      	bne.n	8000a02 <tftp_update+0x7e>
		{
			uint8_t *data = (uint8_t *)"valid stack address! jump to application...\r\n";
 80009a8:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <tftp_update+0xac>)
 80009aa:	60bb      	str	r3, [r7, #8]
			CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	f7ff fc39 	bl	8000224 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	68b8      	ldr	r0, [r7, #8]
 80009ba:	f011 ff1b 	bl	80127f4 <CDC_Transmit_FS>

			/* Jump to user application */
			JumpAddress = *(__IO uint32_t*) (USER_FLASH_FIRST_PAGE_ADDRESS + 4);
 80009be:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <tftp_update+0xb0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a38 <tftp_update+0xb4>)
 80009c4:	6013      	str	r3, [r2, #0]
			Jump_To_Application = (pFunction) JumpAddress;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <tftp_update+0xb4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <tftp_update+0xb8>)
 80009ce:	601a      	str	r2, [r3, #0]
			/* Initialize user application's Stack Pointer */
			HAL_RCC_DeInit();
 80009d0:	f004 f838 	bl	8004a44 <HAL_RCC_DeInit>
			HAL_DeInit();
 80009d4:	f000 ff02 	bl	80017dc <HAL_DeInit>
			__set_MSP(*(__IO uint32_t*) USER_FLASH_FIRST_PAGE_ADDRESS);
 80009d8:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <tftp_update+0xa0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f383 8808 	msr	MSP, r3
}
 80009e4:	bf00      	nop
			SysTick->CTRL = 0;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <tftp_update+0xbc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
			SysTick->LOAD = 0;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <tftp_update+0xbc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	605a      	str	r2, [r3, #4]
			SysTick->VAL = 0;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <tftp_update+0xbc>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
			Jump_To_Application();
 80009f8:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <tftp_update+0xb8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4798      	blx	r3
			/* do nothing */
			while(1);
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <tftp_update+0x7a>
		}
		else
		{
			uint8_t *data1 = (uint8_t *)"Invalid stack address! Start TFTP Server\r\n";
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <tftp_update+0xc0>)
 8000a04:	60fb      	str	r3, [r7, #12]
			CDC_Transmit_FS((uint8_t *)data1, strlen((char *)data1));
 8000a06:	68f8      	ldr	r0, [r7, #12]
 8000a08:	f7ff fc0c 	bl	8000224 <strlen>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4619      	mov	r1, r3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f011 feee 	bl	80127f4 <CDC_Transmit_FS>
		}
	}
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40011400 	.word	0x40011400
 8000a24:	08020000 	.word	0x08020000
 8000a28:	2fff0000 	.word	0x2fff0000
 8000a2c:	20010000 	.word	0x20010000
 8000a30:	080143b4 	.word	0x080143b4
 8000a34:	08020004 	.word	0x08020004
 8000a38:	2000024c 	.word	0x2000024c
 8000a3c:	20000248 	.word	0x20000248
 8000a40:	e000e010 	.word	0xe000e010
 8000a44:	080143e4 	.word	0x080143e4

08000a48 <UART_Write_Loop>:


static int UART_Write_Loop( void )
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
  char tx = 'g';
 8000a4e:	2367      	movs	r3, #103	@ 0x67
 8000a50:	70fb      	strb	r3, [r7, #3]
  char rx = '0';
 8000a52:	2330      	movs	r3, #48	@ 0x30
 8000a54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ex;
  int ret = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
  int count = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  while(1)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000a5e:	1cf9      	adds	r1, r7, #3
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	2201      	movs	r2, #1
 8000a66:	481d      	ldr	r0, [pc, #116]	@ (8000adc <UART_Write_Loop+0x94>)
 8000a68:	f004 ff82 	bl	8005970 <HAL_UART_Transmit>
	  ex = HAL_UART_Receive(&huart1, (uint8_t *)&rx, 1, 10);
 8000a6c:	1cb9      	adds	r1, r7, #2
 8000a6e:	230a      	movs	r3, #10
 8000a70:	2201      	movs	r2, #1
 8000a72:	481a      	ldr	r0, [pc, #104]	@ (8000adc <UART_Write_Loop+0x94>)
 8000a74:	f004 ffff 	bl	8005a76 <HAL_UART_Receive>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	73fb      	strb	r3, [r7, #15]
	  if( ( ex == HAL_OK ) && ( rx == 'r' ) )
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d110      	bne.n	8000aa4 <UART_Write_Loop+0x5c>
 8000a82:	78bb      	ldrb	r3, [r7, #2]
 8000a84:	2b72      	cmp	r3, #114	@ 0x72
 8000a86:	d10d      	bne.n	8000aa4 <UART_Write_Loop+0x5c>
	  {
		  uint8_t *data = (uint8_t *)"Firmware Update Started\r\n";
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <UART_Write_Loop+0x98>)
 8000a8a:	60bb      	str	r3, [r7, #8]
		  CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000a8c:	68b8      	ldr	r0, [r7, #8]
 8000a8e:	f7ff fbc9 	bl	8000224 <strlen>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4619      	mov	r1, r3
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f011 feab 	bl	80127f4 <CDC_Transmit_FS>
		  ret = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
		  break;
 8000aa2:	e015      	b.n	8000ad0 <UART_Write_Loop+0x88>
	  }
	  if( count == 100 )
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	2b64      	cmp	r3, #100	@ 0x64
 8000aa8:	d10b      	bne.n	8000ac2 <UART_Write_Loop+0x7a>
	  {
		  uint8_t *data = (uint8_t *)"No Data Received for Firmware Update\r\n";
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <UART_Write_Loop+0x9c>)
 8000aac:	607b      	str	r3, [r7, #4]
		  CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff fbb8 	bl	8000224 <strlen>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	4619      	mov	r1, r3
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f011 fe9a 	bl	80127f4 <CDC_Transmit_FS>
		  break;
 8000ac0:	e006      	b.n	8000ad0 <UART_Write_Loop+0x88>
	  }
	  count++;
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
	  HAL_Delay(20);              //20ms delay
 8000ac8:	2014      	movs	r0, #20
 8000aca:	f000 fef7 	bl	80018bc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&tx, 1, HAL_MAX_DELAY);
 8000ace:	e7c6      	b.n	8000a5e <UART_Write_Loop+0x16>
  }
  return ret;
 8000ad0:	697b      	ldr	r3, [r7, #20]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200001fc 	.word	0x200001fc
 8000ae0:	08014410 	.word	0x08014410
 8000ae4:	0801442c 	.word	0x0801442c

08000ae8 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 8000ae8:	b5b0      	push	{r4, r5, r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	807b      	strh	r3, [r7, #2]
 8000af4:	4613      	mov	r3, r2
 8000af6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;
  do
  {
    HAL_FLASH_Unlock();
 8000af8:	f002 fb30 	bl	800315c <HAL_FLASH_Unlock>
    if( is_first_block )
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d01b      	beq.n	8000b3a <write_data_to_flash_app+0x52>
    {
      uint8_t *data = (uint8_t *)"Erasing the Flash memory...\r\n";
 8000b02:	4b33      	ldr	r3, [pc, #204]	@ (8000bd0 <write_data_to_flash_app+0xe8>)
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
      CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000b06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b08:	f7ff fb8c 	bl	8000224 <strlen>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000b14:	f011 fe6e 	bl	80127f4 <CDC_Transmit_FS>
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;
      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	613b      	str	r3, [r7, #16]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 8000b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <write_data_to_flash_app+0xec>)
 8000b1e:	61bb      	str	r3, [r7, #24]
      EraseInitStruct.NbPages       = 64;
 8000b20:	2340      	movs	r3, #64	@ 0x40
 8000b22:	61fb      	str	r3, [r7, #28]
      HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );
 8000b24:	f107 020c 	add.w	r2, r7, #12
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fbfc 	bl	800332c <HAL_FLASHEx_Erase>
      application_write_idx = 0;
 8000b34:	4b28      	ldr	r3, [pc, #160]	@ (8000bd8 <write_data_to_flash_app+0xf0>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	801a      	strh	r2, [r3, #0]
    }

    for(int i = 0; i < data_len/2; i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b3e:	e031      	b.n	8000ba4 <write_data_to_flash_app+0xbc>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	461a      	mov	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b21a      	sxth	r2, r3
 8000b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	3301      	adds	r3, #1
 8000b54:	6879      	ldr	r1, [r7, #4]
 8000b56:	440b      	add	r3, r1
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	847b      	strh	r3, [r7, #34]	@ 0x22
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <write_data_to_flash_app+0xf0>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000b6c:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000b70:	4619      	mov	r1, r3
 8000b72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000b74:	2200      	movs	r2, #0
 8000b76:	461c      	mov	r4, r3
 8000b78:	4615      	mov	r5, r2
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	462b      	mov	r3, r5
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f002 fa7c 	bl	800307c <HAL_FLASH_Program>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                               halfword_data
                             );
      if( ret == HAL_OK )
 8000b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d105      	bne.n	8000b9e <write_data_to_flash_app+0xb6>
      {
        application_write_idx += 2;
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <write_data_to_flash_app+0xf0>)
 8000b94:	881b      	ldrh	r3, [r3, #0]
 8000b96:	3302      	adds	r3, #2
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <write_data_to_flash_app+0xf0>)
 8000b9c:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < data_len/2; i++)
 8000b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	085b      	lsrs	r3, r3, #1
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	dbc6      	blt.n	8000b40 <write_data_to_flash_app+0x58>
      }
    }
    if( ret != HAL_OK )
 8000bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <write_data_to_flash_app+0xd8>
    {
      break;
    }
    HAL_FLASH_Lock();
 8000bba:	f002 faf5 	bl	80031a8 <HAL_FLASH_Lock>
 8000bbe:	e000      	b.n	8000bc2 <write_data_to_flash_app+0xda>
      break;
 8000bc0:	bf00      	nop
  }while( false );
  return ret;
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3730      	adds	r7, #48	@ 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	08014454 	.word	0x08014454
 8000bd4:	08020000 	.word	0x08020000
 8000bd8:	20000246 	.word	0x20000246

08000bdc <Firmware_Update>:
/**
  * @brief Check for Firmware Update and update the Firmware
  * @retval None
  */
static void Firmware_Update(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	f5ad 6d8f 	sub.w	sp, sp, #1144	@ 0x478
 8000be2:	af00      	add	r7, sp, #0
  uint8_t xx,yy;
  uint8_t x = 'x';
 8000be4:	2378      	movs	r3, #120	@ 0x78
 8000be6:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
  uint8_t y = 'y';
 8000bea:	2379      	movs	r3, #121	@ 0x79
 8000bec:	f887 346e 	strb.w	r3, [r7, #1134]	@ 0x46e
  HAL_StatusTypeDef ex = HAL_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
  uint16_t current_app_size = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8a7 3474 	strh.w	r3, [r7, #1140]	@ 0x474
  uint16_t i = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8a7 3472 	strh.w	r3, [r7, #1138]	@ 0x472
  uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 8000c02:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000c06:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	3304      	adds	r3, #4
 8000c10:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f012 fc2e 	bl	8013478 <memset>

  do
  {
    if( UART_Write_Loop() != 0 )
 8000c1c:	f7ff ff14 	bl	8000a48 <UART_Write_Loop>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f000 80da 	beq.w	8000ddc <Firmware_Update+0x200>
    {
      HAL_UART_Transmit(&huart1, &y, 1, HAL_MAX_DELAY);
 8000c28:	f207 416e 	addw	r1, r7, #1134	@ 0x46e
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2201      	movs	r2, #1
 8000c32:	4870      	ldr	r0, [pc, #448]	@ (8000df4 <Firmware_Update+0x218>)
 8000c34:	f004 fe9c 	bl	8005970 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart1, &yy, 1, 5000);
 8000c38:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8000c3c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c40:	2201      	movs	r2, #1
 8000c42:	486c      	ldr	r0, [pc, #432]	@ (8000df4 <Firmware_Update+0x218>)
 8000c44:	f004 ff17 	bl	8005a76 <HAL_UART_Receive>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477

      HAL_UART_Transmit(&huart1, &x, 1, HAL_MAX_DELAY);
 8000c4e:	f207 416f 	addw	r1, r7, #1135	@ 0x46f
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	2201      	movs	r2, #1
 8000c58:	4866      	ldr	r0, [pc, #408]	@ (8000df4 <Firmware_Update+0x218>)
 8000c5a:	f004 fe89 	bl	8005970 <HAL_UART_Transmit>
      ex = HAL_UART_Receive(&huart1, &xx, 1, 5000);
 8000c5e:	f207 4171 	addw	r1, r7, #1137	@ 0x471
 8000c62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000c66:	2201      	movs	r2, #1
 8000c68:	4862      	ldr	r0, [pc, #392]	@ (8000df4 <Firmware_Update+0x218>)
 8000c6a:	f004 ff04 	bl	8005a76 <HAL_UART_Receive>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477

      application_size = yy | (xx << 8);
 8000c74:	f897 3470 	ldrb.w	r3, [r7, #1136]	@ 0x470
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	f897 3471 	ldrb.w	r3, [r7, #1137]	@ 0x471
 8000c7e:	021b      	lsls	r3, r3, #8
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b5b      	ldr	r3, [pc, #364]	@ (8000df8 <Firmware_Update+0x21c>)
 8000c8a:	801a      	strh	r2, [r3, #0]
      uint8_t buffer[50]; // Buffer to hold the formatted string
      sprintf((char *)buffer, "Application Size = %d bytes\r\n", application_size);
 8000c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8000df8 <Firmware_Update+0x21c>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4959      	ldr	r1, [pc, #356]	@ (8000dfc <Firmware_Update+0x220>)
 8000c96:	4618      	mov	r0, r3
 8000c98:	f012 fae6 	bl	8013268 <siprintf>
      CDC_Transmit_FS(buffer, strlen((char *)buffer));
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fac0 	bl	8000224 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f011 fda1 	bl	80127f4 <CDC_Transmit_FS>
      while(1)
      {
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000cb2:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	@ 0x472
 8000cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cba:	d005      	beq.n	8000cc8 <Firmware_Update+0xec>
 8000cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8000df8 <Firmware_Update+0x21c>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	f8b7 2474 	ldrh.w	r2, [r7, #1140]	@ 0x474
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d338      	bcc.n	8000d3a <Firmware_Update+0x15e>
        {
          uint8_t buffer[50]; // Buffer to hold the formatted string
          sprintf((char *)buffer, "Received Block[%d]\r\n", current_app_size / MAX_BLOCK_SIZE);
 8000cc8:	f8b7 3474 	ldrh.w	r3, [r7, #1140]	@ 0x474
 8000ccc:	0a9b      	lsrs	r3, r3, #10
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cd6:	494a      	ldr	r1, [pc, #296]	@ (8000e00 <Firmware_Update+0x224>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f012 fac5 	bl	8013268 <siprintf>
          CDC_Transmit_FS(buffer, strlen((char *)buffer));
 8000cde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fa9e 	bl	8000224 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f011 fd7e 	bl	80127f4 <CDC_Transmit_FS>

          ex = write_data_to_flash_app(block, MAX_BLOCK_SIZE, (current_app_size <= MAX_BLOCK_SIZE) );
 8000cf8:	f8b7 3474 	ldrh.w	r3, [r7, #1140]	@ 0x474
 8000cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d00:	bf94      	ite	ls
 8000d02:	2301      	movls	r3, #1
 8000d04:	2300      	movhi	r3, #0
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fee9 	bl	8000ae8 <write_data_to_flash_app>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477

          if( ex != HAL_OK )
 8000d1c:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d15a      	bne.n	8000dda <Firmware_Update+0x1fe>
          {
            break;
          }

          memset(block, 0,MAX_BLOCK_SIZE);
 8000d24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f012 fba2 	bl	8013478 <memset>
          i = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8a7 3472 	strh.w	r3, [r7, #1138]	@ 0x472
        }

        if( current_app_size >= application_size)
 8000d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000df8 <Firmware_Update+0x21c>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	f8b7 2474 	ldrh.w	r2, [r7, #1140]	@ 0x474
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d303      	bcc.n	8000d4e <Firmware_Update+0x172>
        {
          ex = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
          break;
 8000d4c:	e046      	b.n	8000ddc <Firmware_Update+0x200>
        }

        HAL_UART_Transmit(&huart1, &y, 1, HAL_MAX_DELAY);
 8000d4e:	f207 416e 	addw	r1, r7, #1134	@ 0x46e
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	2201      	movs	r2, #1
 8000d58:	4826      	ldr	r0, [pc, #152]	@ (8000df4 <Firmware_Update+0x218>)
 8000d5a:	f004 fe09 	bl	8005970 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart1, &yy, 1, 5000);
 8000d5e:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8000d62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d66:	2201      	movs	r2, #1
 8000d68:	4822      	ldr	r0, [pc, #136]	@ (8000df4 <Firmware_Update+0x218>)
 8000d6a:	f004 fe84 	bl	8005a76 <HAL_UART_Receive>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477

        HAL_UART_Transmit(&huart1, &x, 1, HAL_MAX_DELAY);
 8000d74:	f207 416f 	addw	r1, r7, #1135	@ 0x46f
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	481d      	ldr	r0, [pc, #116]	@ (8000df4 <Firmware_Update+0x218>)
 8000d80:	f004 fdf6 	bl	8005970 <HAL_UART_Transmit>
        ex = HAL_UART_Receive(&huart1, &xx, 1, 5000);
 8000d84:	f207 4171 	addw	r1, r7, #1137	@ 0x471
 8000d88:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4819      	ldr	r0, [pc, #100]	@ (8000df4 <Firmware_Update+0x218>)
 8000d90:	f004 fe71 	bl	8005a76 <HAL_UART_Receive>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477

        block[i++] = yy;
 8000d9a:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	@ 0x472
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	f8a7 2472 	strh.w	r2, [r7, #1138]	@ 0x472
 8000da4:	461a      	mov	r2, r3
 8000da6:	f897 1470 	ldrb.w	r1, [r7, #1136]	@ 0x470
 8000daa:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000dae:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000db2:	5499      	strb	r1, [r3, r2]
        block[i++] = xx;
 8000db4:	f8b7 3472 	ldrh.w	r3, [r7, #1138]	@ 0x472
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	f8a7 2472 	strh.w	r2, [r7, #1138]	@ 0x472
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f897 1471 	ldrb.w	r1, [r7, #1137]	@ 0x471
 8000dc4:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8000dc8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000dcc:	5499      	strb	r1, [r3, r2]
        current_app_size += 2;
 8000dce:	f8b7 3474 	ldrh.w	r3, [r7, #1140]	@ 0x474
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f8a7 3474 	strh.w	r3, [r7, #1140]	@ 0x474
        if( ( i == MAX_BLOCK_SIZE ) || ( current_app_size >= application_size) )
 8000dd8:	e76b      	b.n	8000cb2 <Firmware_Update+0xd6>
            break;
 8000dda:	bf00      	nop
      }
    }
  }
  while( false );

  if( ex != HAL_OK )
 8000ddc:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <Firmware_Update+0x20c>
  {
    while(1);
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <Firmware_Update+0x208>
  }
}
 8000de8:	bf00      	nop
 8000dea:	f507 678f 	add.w	r7, r7, #1144	@ 0x478
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001fc 	.word	0x200001fc
 8000df8:	20000244 	.word	0x20000244
 8000dfc:	08014474 	.word	0x08014474
 8000e00:	08014494 	.word	0x08014494

08000e04 <goto_application>:

static void goto_application(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0

	if (((*(__IO uint32_t*)USER_FLASH_FIRST_PAGE_ADDRESS) & 0x2FFF0000 ) == 0x20010000)
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <goto_application+0x70>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <goto_application+0x74>)
 8000e10:	4013      	ands	r3, r2
 8000e12:	4a1a      	ldr	r2, [pc, #104]	@ (8000e7c <goto_application+0x78>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d129      	bne.n	8000e6c <goto_application+0x68>
	{
		uint8_t *data = (uint8_t *)"Gonna Jump to Application...\n";
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <goto_application+0x7c>)
 8000e1a:	60fb      	str	r3, [r7, #12]
		CDC_Transmit_FS((uint8_t *)data, strlen((char *)data));
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fa01 	bl	8000224 <strlen>
 8000e22:	4603      	mov	r3, r0
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f011 fce3 	bl	80127f4 <CDC_Transmit_FS>

		void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08020000 + 4U)));
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <goto_application+0x80>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET );    //Green LED OFF
 8000e34:	2200      	movs	r2, #0
 8000e36:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3a:	4813      	ldr	r0, [pc, #76]	@ (8000e88 <goto_application+0x84>)
 8000e3c:	f002 fcb9 	bl	80037b2 <HAL_GPIO_WritePin>

		/* Reset the Clock */
		HAL_RCC_DeInit();
 8000e40:	f003 fe00 	bl	8004a44 <HAL_RCC_DeInit>
		HAL_DeInit();
 8000e44:	f000 fcca 	bl	80017dc <HAL_DeInit>
		__set_MSP(*(volatile uint32_t*) 0x08020000);
 8000e48:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <goto_application+0x70>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f383 8808 	msr	MSP, r3
}
 8000e54:	bf00      	nop
		SysTick->CTRL = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <goto_application+0x88>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
		SysTick->LOAD = 0;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <goto_application+0x88>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <goto_application+0x88>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]

		/* Jump to application */
		app_reset_handler();    //call the app reset handler
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4798      	blx	r3
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	08020000 	.word	0x08020000
 8000e78:	2fff0000 	.word	0x2fff0000
 8000e7c:	20010000 	.word	0x20010000
 8000e80:	080144ac 	.word	0x080144ac
 8000e84:	08020004 	.word	0x08020004
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <HAL_UART_MspInit+0xb4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d145      	bne.n	8000fac <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f20:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a24      	ldr	r2, [pc, #144]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <HAL_UART_MspInit+0xb8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4816      	ldr	r0, [pc, #88]	@ (8000fbc <HAL_UART_MspInit+0xbc>)
 8000f64:	f002 fa8a 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <HAL_UART_MspInit+0xbc>)
 8000f7c:	f002 fa7e 	bl	800347c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_UART_MspInit+0xc0>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <HAL_UART_MspInit+0xc0>)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9a:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2025      	movs	r0, #37	@ 0x25
 8000fa2:	f000 fd9c 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fa6:	2025      	movs	r0, #37	@ 0x25
 8000fa8:	f000 fdb5 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <NMI_Handler+0x4>

08000fcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <BusFault_Handler+0x4>

08000fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <UsageFault_Handler+0x4>

08000fec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001014:	f000 fc36 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <USART1_IRQHandler+0x10>)
 8001022:	f004 fdbb 	bl	8005b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001fc 	.word	0x200001fc

08001030 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <ETH_IRQHandler+0x10>)
 8001036:	f001 fa78 	bl	800252a <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20004b04 	.word	0x20004b04

08001044 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <ETH_WKUP_IRQHandler+0x10>)
 800104a:	f001 fa6e 	bl	800252a <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20004b04 	.word	0x20004b04

08001058 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800105c:	4802      	ldr	r0, [pc, #8]	@ (8001068 <OTG_FS_IRQHandler+0x10>)
 800105e:	f002 fcff 	bl	8003a60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20008ecc 	.word	0x20008ecc

0800106c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
  }

  return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e009      	b.n	80010cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf1      	blt.n	80010b8 <_write+0x12>
  }
  return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_close>:

int _close(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001104:	605a      	str	r2, [r3, #4]
  return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001126:	b480      	push	{r7}
 8001128:	b085      	sub	sp, #20
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr
	...

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	@ (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d205      	bcs.n	800117c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <_sbrk+0x6c>)
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20010000 	.word	0x20010000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000250 	.word	0x20000250
 80011a8:	20009740 	.word	0x20009740
 80011ac:	2000972c 	.word	0x2000972c

080011b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <IAP_tftp_decode_op>:
  * @brief Returns the TFTP opcode
  * @param buf: pointer on the TFTP packet
  * @retval None
  */
static tftp_opcode IAP_tftp_decode_op(char *buf)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  return (tftp_opcode)(buf[1]);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3301      	adds	r3, #1
 80011c8:	781b      	ldrb	r3, [r3, #0]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <IAP_tftp_extract_block>:
  * @brief  Extracts the block number
  * @param  buf: pointer on the TFTP packet
  * @retval block number
  */
static u16_t IAP_tftp_extract_block(char *buf)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  u16_t *b = (u16_t*)buf;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	60fb      	str	r3, [r7, #12]
  return ntohs(b[1]);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	3302      	adds	r3, #2
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fcd6 	bl	8009b98 <lwip_htons>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <IAP_tftp_set_opcode>:
  * @param  buffer: pointer on the TFTP packet
  * @param  opcode: TFTP opcode
  * @retval None
  */
static void IAP_tftp_set_opcode(char *buffer, tftp_opcode opcode)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
  buffer[0] = 0;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  buffer[1] = (u8_t)opcode;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	78fa      	ldrb	r2, [r7, #3]
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr

0800121a <IAP_tftp_set_block>:
  * @param packet: pointer on the TFTP packet
  * @param  block: block number
  * @retval None
  */
static void IAP_tftp_set_block(char* packet, u16_t block)
{
 800121a:	b590      	push	{r4, r7, lr}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	807b      	strh	r3, [r7, #2]
  u16_t *p = (u16_t *)packet;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	60fb      	str	r3, [r7, #12]
  p[1] = htons(block);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1c9c      	adds	r4, r3, #2
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	4618      	mov	r0, r3
 8001232:	f008 fcb1 	bl	8009b98 <lwip_htons>
 8001236:	4603      	mov	r3, r0
 8001238:	8023      	strh	r3, [r4, #0]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
	...

08001244 <IAP_tftp_send_ack_packet>:
  * @param to_port: receive port number
  * @param block: block number
  * @retval: err_t: error code
  */
static err_t IAP_tftp_send_ack_packet(struct udp_pcb *upcb, const ip_addr_t *to, int to_port, int block)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	603b      	str	r3, [r7, #0]
  struct pbuf *pkt_buf; /* Chain of pbuf's to be sent */

  /* create the maximum possible size packet that a TFTP ACK packet can be */
  char packet[TFTP_ACK_PKT_LEN];

	memset(packet, 0, TFTP_ACK_PKT_LEN *sizeof(char));
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	2204      	movs	r2, #4
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f012 f90c 	bl	8013478 <memset>

  /* define the first two bytes of the packet */
  IAP_tftp_set_opcode(packet, TFTP_ACK);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	2104      	movs	r1, #4
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffc5 	bl	80011f6 <IAP_tftp_set_opcode>
   * If we are ACK'ing a DATA pkt then the block number echoes that of the DATA pkt being ACK'd (duh)
   * If we are ACK'ing a WRQ pkt then the block number is always 0
   * RRQ packets are never sent ACK pkts by the server, instead the server sends DATA pkts to the
   * host which are, obviously, used as the "acknowledgement".  This saves from having to sEndTransferboth
   * an ACK packet and a DATA packet for RRQs - see RFC1350 for more info.  */
  IAP_tftp_set_block(packet, block);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b29a      	uxth	r2, r3
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffcf 	bl	800121a <IAP_tftp_set_block>

  /* PBUF_TRANSPORT - specifies the transport layer */
  pkt_buf = pbuf_alloc(PBUF_TRANSPORT, TFTP_ACK_PKT_LEN, PBUF_POOL);
 800127c:	2203      	movs	r2, #3
 800127e:	2104      	movs	r1, #4
 8001280:	2000      	movs	r0, #0
 8001282:	f009 fa21 	bl	800a6c8 <pbuf_alloc>
 8001286:	61f8      	str	r0, [r7, #28]

  if (!pkt_buf)      /*if the packet pbuf == NULL exit and EndTransfertransmission */
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <IAP_tftp_send_ack_packet+0x56>
  {
#ifdef USE_PRINTF
    printf("Can not allocate pbuf\n");
 800128e:	480e      	ldr	r0, [pc, #56]	@ (80012c8 <IAP_tftp_send_ack_packet+0x84>)
 8001290:	f011 ffe2 	bl	8013258 <puts>
#endif
    return ERR_MEM;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	e011      	b.n	80012be <IAP_tftp_send_ack_packet+0x7a>
  }

  /* Copy the original data buffer over to the packet buffer's payload */
  memcpy(pkt_buf->payload, packet, TFTP_ACK_PKT_LEN);
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	601a      	str	r2, [r3, #0]

  /* Sending packet by UDP protocol */
  err = udp_sendto(upcb, pkt_buf, to, to_port);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	69f9      	ldr	r1, [r7, #28]
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f00e fdfc 	bl	800fea8 <udp_sendto>
 80012b0:	4603      	mov	r3, r0
 80012b2:	76fb      	strb	r3, [r7, #27]

  /* free the buffer pbuf */
  pbuf_free(pkt_buf);
 80012b4:	69f8      	ldr	r0, [r7, #28]
 80012b6:	f009 fd7f 	bl	800adb8 <pbuf_free>

  return err;
 80012ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3720      	adds	r7, #32
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	080144cc 	.word	0x080144cc

080012cc <IAP_wrq_recv_callback>:
  * @param  ip_addr: pointer on the receive IP_address structure
  * @param  port: receive port address
  * @retval None
  */
static void IAP_wrq_recv_callback(void *_args, struct udp_pcb *upcb, struct pbuf *pkt_buf, const ip_addr_t *addr, u16_t port)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	f507 7410 	add.w	r4, r7, #576	@ 0x240
 80012d8:	f5a4 740d 	sub.w	r4, r4, #564	@ 0x234
 80012dc:	6020      	str	r0, [r4, #0]
 80012de:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 80012e2:	f5a0 700e 	sub.w	r0, r0, #568	@ 0x238
 80012e6:	6001      	str	r1, [r0, #0]
 80012e8:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 80012ec:	f5a1 710f 	sub.w	r1, r1, #572	@ 0x23c
 80012f0:	600a      	str	r2, [r1, #0]
 80012f2:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80012f6:	f5a2 7210 	sub.w	r2, r2, #576	@ 0x240
 80012fa:	6013      	str	r3, [r2, #0]
  tftp_connection_args *args = (tftp_connection_args *)_args;
 80012fc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001300:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
  uint32_t data_buffer[128];
  uint16_t count=0;
 800130a:	2300      	movs	r3, #0
 800130c:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e

#ifdef USE_PRINTF
  char message[40];
#endif

  if (pkt_buf->len != pkt_buf->tot_len)
 8001310:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001314:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	895a      	ldrh	r2, [r3, #10]
 800131c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001320:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	891b      	ldrh	r3, [r3, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	d003      	beq.n	8001334 <IAP_wrq_recv_callback+0x68>
  {
#ifdef USE_PRINTF
    printf("Invalid data length\n");
 800132c:	4872      	ldr	r0, [pc, #456]	@ (80014f8 <IAP_wrq_recv_callback+0x22c>)
 800132e:	f011 ff93 	bl	8013258 <puts>
#endif
    return;
 8001332:	e0dd      	b.n	80014f0 <IAP_wrq_recv_callback+0x224>
  }

  /* Does this packet have any valid data to write? */
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001334:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001338:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	895b      	ldrh	r3, [r3, #10]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d96f      	bls.n	8001424 <IAP_wrq_recv_callback+0x158>
      (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1)))
 8001344:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001348:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff3f 	bl	80011d4 <IAP_tftp_extract_block>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800135e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001362:	3301      	adds	r3, #1
  if ((pkt_buf->len > TFTP_DATA_PKT_HDR_LEN) &&
 8001364:	429a      	cmp	r2, r3
 8001366:	d15d      	bne.n	8001424 <IAP_wrq_recv_callback+0x158>
  {
    /* copy packet payload to data_buffer */
    pbuf_copy_partial(pkt_buf, data_buffer, pkt_buf->len - TFTP_DATA_PKT_HDR_LEN,
 8001368:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800136c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	895b      	ldrh	r3, [r3, #10]
 8001374:	3b04      	subs	r3, #4
 8001376:	b29a      	uxth	r2, r3
 8001378:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800137c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001380:	f5a3 700f 	sub.w	r0, r3, #572	@ 0x23c
 8001384:	2304      	movs	r3, #4
 8001386:	6800      	ldr	r0, [r0, #0]
 8001388:	f009 ff14 	bl	800b1b4 <pbuf_copy_partial>
                      TFTP_DATA_PKT_HDR_LEN);

    total_count += pkt_buf->len - TFTP_DATA_PKT_HDR_LEN;
 800138c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001390:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	895b      	ldrh	r3, [r3, #10]
 8001398:	461a      	mov	r2, r3
 800139a:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <IAP_wrq_recv_callback+0x230>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	3b04      	subs	r3, #4
 80013a2:	4a56      	ldr	r2, [pc, #344]	@ (80014fc <IAP_wrq_recv_callback+0x230>)
 80013a4:	6013      	str	r3, [r2, #0]

    count = (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)/4;
 80013a6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80013aa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	895b      	ldrh	r3, [r3, #10]
 80013b2:	3b04      	subs	r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	da00      	bge.n	80013ba <IAP_wrq_recv_callback+0xee>
 80013b8:	3303      	adds	r3, #3
 80013ba:	109b      	asrs	r3, r3, #2
 80013bc:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e
    if (((pkt_buf->len - TFTP_DATA_PKT_HDR_LEN)%4)!=0)
 80013c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80013c4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	895b      	ldrh	r3, [r3, #10]
 80013cc:	3b04      	subs	r3, #4
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d004      	beq.n	80013e0 <IAP_wrq_recv_callback+0x114>
    count++;
 80013d6:	f8b7 323e 	ldrh.w	r3, [r7, #574]	@ 0x23e
 80013da:	3301      	adds	r3, #1
 80013dc:	f8a7 323e 	strh.w	r3, [r7, #574]	@ 0x23e

    /* Write received data in Flash */
    FLASH_If_Write(&Flash_Write_Address, data_buffer ,count);
 80013e0:	f8b7 223e 	ldrh.w	r2, [r7, #574]	@ 0x23e
 80013e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013e8:	4619      	mov	r1, r3
 80013ea:	4845      	ldr	r0, [pc, #276]	@ (8001500 <IAP_wrq_recv_callback+0x234>)
 80013ec:	f7ff f8c8 	bl	8000580 <FLASH_If_Write>

    /* update our block number to match the block number just received */
    args->block++;
 80013f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80013f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80013fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    /* update total bytes  */
    (args->tot_bytes) += (pkt_buf->len - TFTP_DATA_PKT_HDR_LEN);
 8001402:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001406:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800140a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800140e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	895b      	ldrh	r3, [r3, #10]
 8001416:	3b04      	subs	r3, #4
 8001418:	441a      	add	r2, r3
 800141a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800141e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
 8001422:	e01a      	b.n	800145a <IAP_wrq_recv_callback+0x18e>

    /* This is a valid pkt but it has no data.  This would occur if the file being
       written is an exact multiple of 512 bytes.  In this case, the args->block
       value must still be updated, but we can skip everything else.    */
  }
  else if (IAP_tftp_extract_block(pkt_buf->payload) == (args->block + 1))
 8001424:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001428:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fecf 	bl	80011d4 <IAP_tftp_extract_block>
 8001436:	4603      	mov	r3, r0
 8001438:	461a      	mov	r2, r3
 800143a:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800143e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001442:	3301      	adds	r3, #1
 8001444:	429a      	cmp	r2, r3
 8001446:	d108      	bne.n	800145a <IAP_wrq_recv_callback+0x18e>
  {
    /* update our block number to match the block number just received  */
    args->block++;
 8001448:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800144c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001456:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  /* Send the appropriate ACK pkt*/
  IAP_tftp_send_ack_packet(upcb, addr, port, args->block);
 800145a:	f8b7 2250 	ldrh.w	r2, [r7, #592]	@ 0x250
 800145e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8001462:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001466:	f507 7110 	add.w	r1, r7, #576	@ 0x240
 800146a:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 800146e:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 8001472:	f5a0 700e 	sub.w	r0, r0, #568	@ 0x238
 8001476:	6809      	ldr	r1, [r1, #0]
 8001478:	6800      	ldr	r0, [r0, #0]
 800147a:	f7ff fee3 	bl	8001244 <IAP_tftp_send_ack_packet>

  /* If the last write returned less than the maximum TFTP data pkt length,
   * then we've received the whole file and so we can quit (this is how TFTP
   * signals the EndTransferof a transfer!)
   */
  if (pkt_buf->len < TFTP_DATA_PKT_LEN_MAX)
 800147e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001482:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	895b      	ldrh	r3, [r3, #10]
 800148a:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800148e:	d227      	bcs.n	80014e0 <IAP_wrq_recv_callback+0x214>
  {
    IAP_tftp_cleanup_wr(upcb, args);
 8001490:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001494:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001498:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f000 f90d 	bl	80016bc <IAP_tftp_cleanup_wr>
    pbuf_free(pkt_buf);
 80014a2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80014a6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f009 fc84 	bl	800adb8 <pbuf_free>

#ifdef USE_PRINTF
    sprintf(message, "%d bytes ",(int)total_count);
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <IAP_wrq_recv_callback+0x230>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	f107 0310 	add.w	r3, r7, #16
 80014ba:	4912      	ldr	r1, [pc, #72]	@ (8001504 <IAP_wrq_recv_callback+0x238>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f011 fed3 	bl	8013268 <siprintf>
    printf("Tot bytes Received:, %s\n", message);
 80014c2:	f107 0310 	add.w	r3, r7, #16
 80014c6:	4619      	mov	r1, r3
 80014c8:	480f      	ldr	r0, [pc, #60]	@ (8001508 <IAP_wrq_recv_callback+0x23c>)
 80014ca:	f011 fe5d 	bl	8013188 <iprintf>
    printf("  State: Prog Finished \n");
 80014ce:	480f      	ldr	r0, [pc, #60]	@ (800150c <IAP_wrq_recv_callback+0x240>)
 80014d0:	f011 fec2 	bl	8013258 <puts>
    printf("Reset the board \n");
 80014d4:	480e      	ldr	r0, [pc, #56]	@ (8001510 <IAP_wrq_recv_callback+0x244>)
 80014d6:	f011 febf 	bl	8013258 <puts>
#endif

    HAL_NVIC_SystemReset();
 80014da:	f000 fb2a 	bl	8001b32 <HAL_NVIC_SystemReset>
 80014de:	e007      	b.n	80014f0 <IAP_wrq_recv_callback+0x224>
  }
  else
  {
    pbuf_free(pkt_buf);
 80014e0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80014e4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	f009 fc65 	bl	800adb8 <pbuf_free>
    return;
 80014ee:	bf00      	nop
  }
}
 80014f0:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	080144e4 	.word	0x080144e4
 80014fc:	2000025c 	.word	0x2000025c
 8001500:	20000254 	.word	0x20000254
 8001504:	080144f8 	.word	0x080144f8
 8001508:	08014504 	.word	0x08014504
 800150c:	08014520 	.word	0x08014520
 8001510:	08014538 	.word	0x08014538

08001514 <IAP_tftp_process_write>:
  * @param  to: pointer on the receive IP address
  * @param  to_port: receive port number
  * @retval None
  */
static int IAP_tftp_process_write(struct udp_pcb *upcb, const ip_addr_t *to, int to_port)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  tftp_connection_args *args = NULL;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  /* This function is called from a callback,
  * therefore interrupts are disabled,
  * therefore we can use regular malloc   */
  args = mem_malloc(sizeof *args);
 8001524:	f44f 700a 	mov.w	r0, #552	@ 0x228
 8001528:	f008 fd82 	bl	800a030 <mem_malloc>
 800152c:	6178      	str	r0, [r7, #20]
  if (!args)
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d108      	bne.n	8001546 <IAP_tftp_process_write+0x32>
  {
#ifdef USE_PRINTF
    printf("Memory error \n");
 8001534:	481e      	ldr	r0, [pc, #120]	@ (80015b0 <IAP_tftp_process_write+0x9c>)
 8001536:	f011 fe8f 	bl	8013258 <puts>
#endif
    IAP_tftp_cleanup_wr(upcb, args);
 800153a:	6979      	ldr	r1, [r7, #20]
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 f8bd 	bl	80016bc <IAP_tftp_cleanup_wr>
    return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e02f      	b.n	80015a6 <IAP_tftp_process_write+0x92>
  }

  args->op = TFTP_WRQ;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
  args->to_ip.addr = to->addr;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  args->to_port = to_port;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  /* the block # used as a positive response to a WRQ is _always_ 0!!! (see RFC1350)  */
  args->block = 0;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2200      	movs	r2, #0
 8001562:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  args->tot_bytes = 0;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2200      	movs	r2, #0
 800156a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  /* set callback for receives on this UDP PCB (Protocol Control Block) */
  udp_recv(upcb, IAP_wrq_recv_callback, args);
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	4910      	ldr	r1, [pc, #64]	@ (80015b4 <IAP_tftp_process_write+0xa0>)
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f00e fe20 	bl	80101b8 <udp_recv>

  total_count =0;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <IAP_tftp_process_write+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

  /* init flash */
  FLASH_If_Init();
 800157e:	f7fe ffcf 	bl	8000520 <FLASH_If_Init>

  /* erase user flash area */
  FLASH_If_Erase(USER_FLASH_FIRST_PAGE_ADDRESS);
 8001582:	480e      	ldr	r0, [pc, #56]	@ (80015bc <IAP_tftp_process_write+0xa8>)
 8001584:	f7fe ffd2 	bl	800052c <FLASH_If_Erase>

  Flash_Write_Address = USER_FLASH_FIRST_PAGE_ADDRESS;
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <IAP_tftp_process_write+0xac>)
 800158a:	4a0c      	ldr	r2, [pc, #48]	@ (80015bc <IAP_tftp_process_write+0xa8>)
 800158c:	601a      	str	r2, [r3, #0]
  /* initiate the write transaction by sending the first ack */
  IAP_tftp_send_ack_packet(upcb, to, to_port, args->block);
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff fe53 	bl	8001244 <IAP_tftp_send_ack_packet>
#ifdef USE_PRINTF
  printf("  State: Programming... \n");
 800159e:	4809      	ldr	r0, [pc, #36]	@ (80015c4 <IAP_tftp_process_write+0xb0>)
 80015a0:	f011 fe5a 	bl	8013258 <puts>
#endif
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	0801454c 	.word	0x0801454c
 80015b4:	080012cd 	.word	0x080012cd
 80015b8:	2000025c 	.word	0x2000025c
 80015bc:	08020000 	.word	0x08020000
 80015c0:	20000254 	.word	0x20000254
 80015c4:	0801455c 	.word	0x0801455c

080015c8 <IAP_tftp_recv_callback>:
  * @param  port: receive port number
  * @retval None
  */
static void IAP_tftp_recv_callback(void *arg, struct udp_pcb *upcb, struct pbuf *pkt_buf,
                        const ip_addr_t *addr, u16_t port)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09e      	sub	sp, #120	@ 0x78
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  uint32_t i;
  char filename[40],message[46], *ptr;
#endif

  /* create new UDP PCB structure */
  upcb_tftp_data = udp_new();
 80015d6:	f00e fe33 	bl	8010240 <udp_new>
 80015da:	6738      	str	r0, [r7, #112]	@ 0x70
  if (!upcb_tftp_data)
 80015dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d103      	bne.n	80015ea <IAP_tftp_recv_callback+0x22>
  {
    /* Error creating PCB. Out of Memory  */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 80015e2:	4830      	ldr	r0, [pc, #192]	@ (80016a4 <IAP_tftp_recv_callback+0xdc>)
 80015e4:	f011 fe38 	bl	8013258 <puts>
#endif
    return;
 80015e8:	e059      	b.n	800169e <IAP_tftp_recv_callback+0xd6>

  /* bind to port 0 to receive next available free port */
  /* NOTE:  This is how TFTP works.  There is a UDP PCB for the standard port
  * 69 which al transactions begin communication on, however, _all_ subsequent
  * transactions for a given "stream" occur on another port  */
  err = udp_bind(upcb_tftp_data, IP_ADDR_ANY, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	492e      	ldr	r1, [pc, #184]	@ (80016a8 <IAP_tftp_recv_callback+0xe0>)
 80015ee:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80015f0:	f00e fd5c 	bl	80100ac <udp_bind>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  if (err != ERR_OK)
 80015fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <IAP_tftp_recv_callback+0x42>
  {
    /* Unable to bind to port */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8001602:	4828      	ldr	r0, [pc, #160]	@ (80016a4 <IAP_tftp_recv_callback+0xdc>)
 8001604:	f011 fe28 	bl	8013258 <puts>
#endif
    return;
 8001608:	e049      	b.n	800169e <IAP_tftp_recv_callback+0xd6>
  }

  op = IAP_tftp_decode_op(pkt_buf->payload);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fdd4 	bl	80011bc <IAP_tftp_decode_op>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  if (op != TFTP_WRQ)
 800161a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800161e:	2b02      	cmp	r3, #2
 8001620:	d006      	beq.n	8001630 <IAP_tftp_recv_callback+0x68>
  {
    /* remove PCB */
#ifdef USE_PRINTF
    printf("Bad TFTP opcode \n");
 8001622:	4822      	ldr	r0, [pc, #136]	@ (80016ac <IAP_tftp_recv_callback+0xe4>)
 8001624:	f011 fe18 	bl	8013258 <puts>
#endif
    udp_remove(upcb_tftp_data);
 8001628:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800162a:	f00e fdd7 	bl	80101dc <udp_remove>
 800162e:	e033      	b.n	8001698 <IAP_tftp_recv_callback+0xd0>
  }
  else
  {

#ifdef USE_PRINTF
    ptr = pkt_buf->payload;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	66bb      	str	r3, [r7, #104]	@ 0x68
    ptr = ptr +2;
 8001636:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001638:	3302      	adds	r3, #2
 800163a:	66bb      	str	r3, [r7, #104]	@ 0x68
    /*extract file name info */
    i= 0;
 800163c:	2300      	movs	r3, #0
 800163e:	677b      	str	r3, [r7, #116]	@ 0x74
    while (*(ptr+i)!=0x0)
 8001640:	e002      	b.n	8001648 <IAP_tftp_recv_callback+0x80>
    {
      i++;
 8001642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001644:	3301      	adds	r3, #1
 8001646:	677b      	str	r3, [r7, #116]	@ 0x74
    while (*(ptr+i)!=0x0)
 8001648:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800164a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f6      	bne.n	8001642 <IAP_tftp_recv_callback+0x7a>
    }
    strncpy(filename, ptr, i+1);
 8001654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800165c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800165e:	4618      	mov	r0, r3
 8001660:	f011 ff12 	bl	8013488 <strncpy>

    printf("IAP using TFTP \n");
 8001664:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <IAP_tftp_recv_callback+0xe8>)
 8001666:	f011 fdf7 	bl	8013258 <puts>
    sprintf(message, "File: %s",filename);
 800166a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4910      	ldr	r1, [pc, #64]	@ (80016b4 <IAP_tftp_recv_callback+0xec>)
 8001674:	4618      	mov	r0, r3
 8001676:	f011 fdf7 	bl	8013268 <siprintf>
    printf("%s\n", message);
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	4618      	mov	r0, r3
 8001680:	f011 fdea 	bl	8013258 <puts>
    printf("  State: Erasing...\n");
 8001684:	480c      	ldr	r0, [pc, #48]	@ (80016b8 <IAP_tftp_recv_callback+0xf0>)
 8001686:	f011 fde7 	bl	8013258 <puts>
#endif

    /* Start the TFTP write mode*/
    IAP_tftp_process_write(upcb_tftp_data, addr, port);
 800168a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800168e:	461a      	mov	r2, r3
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001694:	f7ff ff3e 	bl	8001514 <IAP_tftp_process_write>
  }
  pbuf_free(pkt_buf);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f009 fb8d 	bl	800adb8 <pbuf_free>
}
 800169e:	3778      	adds	r7, #120	@ 0x78
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	08014578 	.word	0x08014578
 80016a8:	080163d8 	.word	0x080163d8
 80016ac:	0801458c 	.word	0x0801458c
 80016b0:	080145a0 	.word	0x080145a0
 80016b4:	080145b0 	.word	0x080145b0
 80016b8:	080145bc 	.word	0x080145bc

080016bc <IAP_tftp_cleanup_wr>:
  * @param  upcb: pointer on udp_pcb structure
  * @param  args: pointer on tftp_connection arguments
  * @retval None
  */
static void IAP_tftp_cleanup_wr(struct udp_pcb *upcb, tftp_connection_args *args)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* Free the tftp_connection_args structure */
  mem_free(args);
 80016c6:	6838      	ldr	r0, [r7, #0]
 80016c8:	f008 fb74 	bl	8009db4 <mem_free>

  /* Disconnect the udp_pcb */
  udp_disconnect(upcb);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f00e fd5d 	bl	801018c <udp_disconnect>

  /* close the connection */
  udp_remove(upcb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f00e fd82 	bl	80101dc <udp_remove>

  /* reset the callback function */
  udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <IAP_tftp_cleanup_wr+0x34>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2200      	movs	r2, #0
 80016de:	4905      	ldr	r1, [pc, #20]	@ (80016f4 <IAP_tftp_cleanup_wr+0x38>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f00e fd69 	bl	80101b8 <udp_recv>

}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000258 	.word	0x20000258
 80016f4:	080015c9 	.word	0x080015c9

080016f8 <IAP_tftpd_init>:
  * @brief  Creates and initializes a UDP PCB for TFTP receive operation
  * @param  None
  * @retval None
  */
void IAP_tftpd_init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  err_t err;
  unsigned port = 69; /* 69 is the port used for TFTP protocol initial transaction */
 80016fe:	2345      	movs	r3, #69	@ 0x45
 8001700:	607b      	str	r3, [r7, #4]

  /* create a new UDP PCB structure  */
  UDPpcb = udp_new();
 8001702:	f00e fd9d 	bl	8010240 <udp_new>
 8001706:	4603      	mov	r3, r0
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <IAP_tftpd_init+0x5c>)
 800170a:	6013      	str	r3, [r2, #0]
  if (!UDPpcb)
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <IAP_tftpd_init+0x5c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d103      	bne.n	800171c <IAP_tftpd_init+0x24>
  {
    /* Error creating PCB. Out of Memory  */
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8001714:	4810      	ldr	r0, [pc, #64]	@ (8001758 <IAP_tftpd_init+0x60>)
 8001716:	f011 fd9f 	bl	8013258 <puts>
#endif
    return;
 800171a:	e018      	b.n	800174e <IAP_tftpd_init+0x56>
  }

  /* Bind this PCB to port 69  */
  err = udp_bind(UDPpcb, IP_ADDR_ANY, port);
 800171c:	4b0d      	ldr	r3, [pc, #52]	@ (8001754 <IAP_tftpd_init+0x5c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	b292      	uxth	r2, r2
 8001724:	490d      	ldr	r1, [pc, #52]	@ (800175c <IAP_tftpd_init+0x64>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00e fcc0 	bl	80100ac <udp_bind>
 800172c:	4603      	mov	r3, r0
 800172e:	70fb      	strb	r3, [r7, #3]
  if (err == ERR_OK)
 8001730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d107      	bne.n	8001748 <IAP_tftpd_init+0x50>
  {
    /* Initialize receive callback function  */
    udp_recv(UDPpcb, IAP_tftp_recv_callback, NULL);
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <IAP_tftpd_init+0x5c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	4908      	ldr	r1, [pc, #32]	@ (8001760 <IAP_tftpd_init+0x68>)
 8001740:	4618      	mov	r0, r3
 8001742:	f00e fd39 	bl	80101b8 <udp_recv>
 8001746:	e002      	b.n	800174e <IAP_tftpd_init+0x56>
  }
  else
  {
#ifdef USE_PRINTF
    printf("Can not create pcb \n");
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <IAP_tftpd_init+0x60>)
 800174a:	f011 fd85 	bl	8013258 <puts>
#endif
  }
}
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000258 	.word	0x20000258
 8001758:	08014578 	.word	0x08014578
 800175c:	080163d8 	.word	0x080163d8
 8001760:	080015c9 	.word	0x080015c9

08001764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001764:	f7ff fd24 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	@ (8001798 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800176a:	490c      	ldr	r1, [pc, #48]	@ (800179c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800176c:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001780:	4c09      	ldr	r4, [pc, #36]	@ (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800178e:	f011 fed5 	bl	801353c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001792:	f7fe ff3b 	bl	800060c <main>
  bx lr
 8001796:	4770      	bx	lr
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017a0:	08016430 	.word	0x08016430
  ldr r2, =_sbss
 80017a4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017a8:	2000973c 	.word	0x2000973c

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_Init+0x28>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_Init+0x28>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f981 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f000 f82c 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fb66 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40022000 	.word	0x40022000

080017dc <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <HAL_DeInit+0x38>)
 80017e2:	f04f 32ff 	mov.w	r2, #4294967295
 80017e6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_DeInit+0x38>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <HAL_DeInit+0x38>)
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <HAL_DeInit+0x38>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]

#if defined(STM32F105xC) || defined(STM32F107xC)
  __HAL_RCC_AHB_FORCE_RESET();
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_DeInit+0x38>)
 80017fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8001804:	4b03      	ldr	r3, [pc, #12]	@ (8001814 <HAL_DeInit+0x38>)
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800180a:	f000 f805 	bl	8001818 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f979 	bl	8001b3a <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f93d 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	@ (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_IncTick+0x1c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_IncTick+0x20>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a03      	ldr	r2, [pc, #12]	@ (80018a4 <HAL_IncTick+0x20>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000260 	.word	0x20000260

080018a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b02      	ldr	r3, [pc, #8]	@ (80018b8 <HAL_GetTick+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000260 	.word	0x20000260

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffe0 	bl	80018a8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4906      	ldr	r1, [pc, #24]	@ (800199c <__NVIC_EnableIRQ+0x34>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	@ (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	@ 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a5c:	f3bf 8f4f 	dsb	sy
}
 8001a60:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <__NVIC_SystemReset+0x24>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a6a:	4904      	ldr	r1, [pc, #16]	@ (8001a7c <__NVIC_SystemReset+0x24>)
 8001a6c:	4b04      	ldr	r3, [pc, #16]	@ (8001a80 <__NVIC_SystemReset+0x28>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a72:	f3bf 8f4f 	dsb	sy
}
 8001a76:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <__NVIC_SystemReset+0x20>
 8001a7c:	e000ed00 	.word	0xe000ed00
 8001a80:	05fa0004 	.word	0x05fa0004

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff7a 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff17 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff2c 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff7a 	bl	80019f4 <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff49 	bl	80019a0 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff1f 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001b36:	f7ff ff8f 	bl	8001a58 <__NVIC_SystemReset>

08001b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff9e 	bl	8001a84 <SysTick_Config>
 8001b48:	4603      	mov	r3, r0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d008      	beq.n	8001b7c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e020      	b.n	8001bbe <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 020e 	bic.w	r2, r2, #14
 8001b8a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0201 	bic.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8001baa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d005      	beq.n	8001bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e0d6      	b.n	8001d9a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 020e 	bic.w	r2, r2, #14
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d958      	bls.n	8001cca <HAL_DMA_Abort_IT+0x102>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a62      	ldr	r2, [pc, #392]	@ (8001da8 <HAL_DMA_Abort_IT+0x1e0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d04f      	beq.n	8001cc2 <HAL_DMA_Abort_IT+0xfa>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a61      	ldr	r2, [pc, #388]	@ (8001dac <HAL_DMA_Abort_IT+0x1e4>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d048      	beq.n	8001cbe <HAL_DMA_Abort_IT+0xf6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5f      	ldr	r2, [pc, #380]	@ (8001db0 <HAL_DMA_Abort_IT+0x1e8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d040      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0xf0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001db4 <HAL_DMA_Abort_IT+0x1ec>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d038      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0xea>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a5c      	ldr	r2, [pc, #368]	@ (8001db8 <HAL_DMA_Abort_IT+0x1f0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d030      	beq.n	8001cac <HAL_DMA_Abort_IT+0xe4>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dbc <HAL_DMA_Abort_IT+0x1f4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d028      	beq.n	8001ca6 <HAL_DMA_Abort_IT+0xde>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a52      	ldr	r2, [pc, #328]	@ (8001da4 <HAL_DMA_Abort_IT+0x1dc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d020      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0xd8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a57      	ldr	r2, [pc, #348]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1f8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d019      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xd4>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a55      	ldr	r2, [pc, #340]	@ (8001dc4 <HAL_DMA_Abort_IT+0x1fc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d012      	beq.n	8001c98 <HAL_DMA_Abort_IT+0xd0>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a54      	ldr	r2, [pc, #336]	@ (8001dc8 <HAL_DMA_Abort_IT+0x200>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00a      	beq.n	8001c92 <HAL_DMA_Abort_IT+0xca>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a52      	ldr	r2, [pc, #328]	@ (8001dcc <HAL_DMA_Abort_IT+0x204>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d102      	bne.n	8001c8c <HAL_DMA_Abort_IT+0xc4>
 8001c86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c8a:	e01b      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001c8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c90:	e018      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001c92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c96:	e015      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001c98:	2310      	movs	r3, #16
 8001c9a:	e013      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e011      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001ca0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ca4:	e00e      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001ca6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001caa:	e00b      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001cac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cb0:	e008      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001cb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cb6:	e005      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001cb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cbc:	e002      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	e000      	b.n	8001cc4 <HAL_DMA_Abort_IT+0xfc>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	4a42      	ldr	r2, [pc, #264]	@ (8001dd0 <HAL_DMA_Abort_IT+0x208>)
 8001cc6:	6053      	str	r3, [r2, #4]
 8001cc8:	e057      	b.n	8001d7a <HAL_DMA_Abort_IT+0x1b2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a36      	ldr	r2, [pc, #216]	@ (8001da8 <HAL_DMA_Abort_IT+0x1e0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04f      	beq.n	8001d74 <HAL_DMA_Abort_IT+0x1ac>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	@ (8001dac <HAL_DMA_Abort_IT+0x1e4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d048      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x1a8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a33      	ldr	r2, [pc, #204]	@ (8001db0 <HAL_DMA_Abort_IT+0x1e8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d040      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x1a2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a31      	ldr	r2, [pc, #196]	@ (8001db4 <HAL_DMA_Abort_IT+0x1ec>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d038      	beq.n	8001d64 <HAL_DMA_Abort_IT+0x19c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a30      	ldr	r2, [pc, #192]	@ (8001db8 <HAL_DMA_Abort_IT+0x1f0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d030      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x196>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a2e      	ldr	r2, [pc, #184]	@ (8001dbc <HAL_DMA_Abort_IT+0x1f4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d028      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x190>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a26      	ldr	r2, [pc, #152]	@ (8001da4 <HAL_DMA_Abort_IT+0x1dc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d020      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x18a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc0 <HAL_DMA_Abort_IT+0x1f8>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_DMA_Abort_IT+0x186>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a29      	ldr	r2, [pc, #164]	@ (8001dc4 <HAL_DMA_Abort_IT+0x1fc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d012      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x182>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a27      	ldr	r2, [pc, #156]	@ (8001dc8 <HAL_DMA_Abort_IT+0x200>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00a      	beq.n	8001d44 <HAL_DMA_Abort_IT+0x17c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a26      	ldr	r2, [pc, #152]	@ (8001dcc <HAL_DMA_Abort_IT+0x204>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d102      	bne.n	8001d3e <HAL_DMA_Abort_IT+0x176>
 8001d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3c:	e01b      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d42:	e018      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d48:	e015      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d4a:	2310      	movs	r3, #16
 8001d4c:	e013      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e011      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d56:	e00e      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d5c:	e00b      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d62:	e008      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d68:	e005      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6e:	e002      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d70:	2310      	movs	r3, #16
 8001d72:	e000      	b.n	8001d76 <HAL_DMA_Abort_IT+0x1ae>
 8001d74:	2301      	movs	r3, #1
 8001d76:	4a17      	ldr	r2, [pc, #92]	@ (8001dd4 <HAL_DMA_Abort_IT+0x20c>)
 8001d78:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	4798      	blx	r3
    } 
  }
  return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40020080 	.word	0x40020080
 8001da8:	40020008 	.word	0x40020008
 8001dac:	4002001c 	.word	0x4002001c
 8001db0:	40020030 	.word	0x40020030
 8001db4:	40020044 	.word	0x40020044
 8001db8:	40020058 	.word	0x40020058
 8001dbc:	4002006c 	.word	0x4002006c
 8001dc0:	40020408 	.word	0x40020408
 8001dc4:	4002041c 	.word	0x4002041c
 8001dc8:	40020430 	.word	0x40020430
 8001dcc:	40020444 	.word	0x40020444
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001de8:	4ba4      	ldr	r3, [pc, #656]	@ (800207c <HAL_ETH_Init+0x2a4>)
 8001dea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e153      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f005 ff66 	bl	8007ce4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 8001e18:	4b99      	ldr	r3, [pc, #612]	@ (8002080 <HAL_ETH_Init+0x2a8>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a98      	ldr	r2, [pc, #608]	@ (8002080 <HAL_ETH_Init+0x2a8>)
 8001e1e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001e22:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 8001e24:	4b96      	ldr	r3, [pc, #600]	@ (8002080 <HAL_ETH_Init+0x2a8>)
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4994      	ldr	r1, [pc, #592]	@ (8002080 <HAL_ETH_Init+0x2a8>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e4a:	f7ff fd2d 	bl	80018a8 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e50:	e011      	b.n	8001e76 <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001e52:	f7ff fd29 	bl	80018a8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e60:	d909      	bls.n	8001e76 <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2203      	movs	r2, #3
 8001e66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e117      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e4      	bne.n	8001e52 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f023 031c 	bic.w	r3, r3, #28
 8001e96:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e98:	f003 fb98 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8001e9c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	4a78      	ldr	r2, [pc, #480]	@ (8002084 <HAL_ETH_Init+0x2ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d908      	bls.n	8001eb8 <HAL_ETH_Init+0xe0>
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	4a77      	ldr	r2, [pc, #476]	@ (8002088 <HAL_ETH_Init+0x2b0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d804      	bhi.n	8001eb8 <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	4a73      	ldr	r2, [pc, #460]	@ (8002088 <HAL_ETH_Init+0x2b0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d907      	bls.n	8001ed0 <HAL_ETH_Init+0xf8>
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800207c <HAL_ETH_Init+0x2a4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d203      	bcs.n	8001ed0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f043 030c 	orr.w	r3, r3, #12
 8001ece:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001ed8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001edc:	2100      	movs	r1, #0
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 fc0a 	bl	80026f8 <HAL_ETH_WritePHYRegister>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001eee:	6939      	ldr	r1, [r7, #16]
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fdbf 	bl	8002a74 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0d1      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f02:	20ff      	movs	r0, #255	@ 0xff
 8001f04:	f7ff fcda 	bl	80018bc <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8096 	beq.w	800203e <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f12:	f7ff fcc9 	bl	80018a8 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2101      	movs	r1, #1
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb81 	bl	8002628 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001f26:	f7ff fcbf 	bl	80018a8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d90f      	bls.n	8001f58 <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 fd98 	bl	8002a74 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0a6      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0da      	beq.n	8001f18 <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fbc5 	bl	80026f8 <HAL_ETH_WritePHYRegister>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f78:	6939      	ldr	r1, [r7, #16]
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fd7a 	bl	8002a74 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e08c      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f8c:	f7ff fc8c 	bl	80018a8 <HAL_GetTick>
 8001f90:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	461a      	mov	r2, r3
 8001f98:	2101      	movs	r1, #1
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fb44 	bl	8002628 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001fa0:	f7ff fc82 	bl	80018a8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d90f      	bls.n	8001fd2 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001fb6:	6939      	ldr	r1, [r7, #16]
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fd5b 	bl	8002a74 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e069      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d0da      	beq.n	8001f92 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fb1f 	bl	8002628 <HAL_ETH_ReadPHYRegister>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ff4:	6939      	ldr	r1, [r7, #16]
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fd3c 	bl	8002a74 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e04e      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0304 	and.w	r3, r3, #4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	e002      	b.n	8002022 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e02f      	b.n	8002094 <HAL_ETH_Init+0x2bc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	e02a      	b.n	8002094 <HAL_ETH_Init+0x2bc>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	08db      	lsrs	r3, r3, #3
 8002044:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800204e:	4313      	orrs	r3, r2
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fb4e 	bl	80026f8 <HAL_ETH_WritePHYRegister>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d014      	beq.n	800208c <HAL_ETH_Init+0x2b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002066:	6939      	ldr	r1, [r7, #16]
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fd03 	bl	8002a74 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e015      	b.n	80020a6 <HAL_ETH_Init+0x2ce>
 800207a:	bf00      	nop
 800207c:	03938700 	.word	0x03938700
 8002080:	40010000 	.word	0x40010000
 8002084:	01312cff 	.word	0x01312cff
 8002088:	02160ebf 	.word	0x02160ebf
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800208c:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8002090:	f7ff fc14 	bl	80018bc <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002094:	6939      	ldr	r1, [r7, #16]
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fcec 	bl	8002a74 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop

080020b0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_ETH_DMATxDescListInit+0x20>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e051      	b.n	8002174 <HAL_ETH_DMATxDescListInit+0xc4>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	e030      	b.n	800214e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4413      	add	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002104:	fb02 f303 	mul.w	r3, r2, r3
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	461a      	mov	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	3b01      	subs	r3, #1
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	429a      	cmp	r2, r3
 800212e:	d208      	bcs.n	8002142 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	4413      	add	r3, r2
 800213a:	461a      	mov	r2, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	e002      	b.n	8002148 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	3301      	adds	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d3ca      	bcc.n	80020ec <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002160:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_ETH_DMARxDescListInit+0x20>
 800219a:	2302      	movs	r3, #2
 800219c:	e055      	b.n	800224a <HAL_ETH_DMARxDescListInit+0xcc>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e034      	b.n	8002224 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80021ca:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80021d2:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	461a      	mov	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	3b01      	subs	r3, #1
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	429a      	cmp	r2, r3
 8002204:	d208      	bcs.n	8002218 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3301      	adds	r3, #1
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	e002      	b.n	800221e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d3c6      	bcc.n	80021ba <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002236:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_ETH_TransmitFrame+0x24>
 8002274:	2302      	movs	r3, #2
 8002276:	e0cc      	b.n	8002412 <HAL_ETH_TransmitFrame+0x1be>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0b7      	b.n	8002412 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da09      	bge.n	80022c0 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2212      	movs	r2, #18
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0a8      	b.n	8002412 <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d915      	bls.n	80022f6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	4a53      	ldr	r2, [pc, #332]	@ (800241c <HAL_ETH_TransmitFrame+0x1c8>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a9b      	lsrs	r3, r3, #10
 80022d4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	4b50      	ldr	r3, [pc, #320]	@ (800241c <HAL_ETH_TransmitFrame+0x1c8>)
 80022da:	fba3 1302 	umull	r1, r3, r3, r2
 80022de:	0a9b      	lsrs	r3, r3, #10
 80022e0:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e001      	b.n	80022fa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d11c      	bne.n	800233a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230a:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 800230e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800231a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800232a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	461a      	mov	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002338:	e04b      	b.n	80023d2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	e044      	b.n	80023ca <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800234e:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002364:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800236e:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3b01      	subs	r3, #1
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	429a      	cmp	r2, r3
 8002378:	d116      	bne.n	80023a8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002384:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002388:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4a24      	ldr	r2, [pc, #144]	@ (8002420 <HAL_ETH_TransmitFrame+0x1cc>)
 800238e:	fb03 f202 	mul.w	r2, r3, r2
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	4413      	add	r3, r2
 8002396:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 800239a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80023a6:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80023b6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	461a      	mov	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	3301      	adds	r3, #1
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d3b6      	bcc.n	8002340 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	461a      	mov	r2, r3
 80023ee:	2304      	movs	r3, #4
 80023f0:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	461a      	mov	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	371c      	adds	r7, #28
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	ac02b00b 	.word	0xac02b00b
 8002420:	fffffa0c 	.word	0xfffffa0c

08002424 <HAL_ETH_GetReceivedFrame>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_ETH_GetReceivedFrame+0x1a>
 800243a:	2302      	movs	r3, #2
 800243c:	e070      	b.n	8002520 <HAL_ETH_GetReceivedFrame+0xfc>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db5a      	blt.n	800250e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d030      	beq.n	80024c8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002474:	2b01      	cmp	r3, #1
 8002476:	d103      	bne.n	8002480 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	0c1b      	lsrs	r3, r3, #16
 8002490:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002494:	3b04      	subs	r3, #4
 8002496:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	461a      	mov	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e02b      	b.n	8002520 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80024f6:	e00a      	b.n	800250e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d112      	bne.n	800256a <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f85d 	bl	8002604 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002552:	461a      	mov	r2, r3
 8002554:	2340      	movs	r3, #64	@ 0x40
 8002556:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002568:	e01a      	b.n	80025a0 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d111      	bne.n	80025a0 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f838 	bl	80025f2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800258a:	461a      	mov	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025a8:	461a      	mov	r2, r3
 80025aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025ae:	6153      	str	r3, [r2, #20]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025c2:	d112      	bne.n	80025ea <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f826 	bl	8002616 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025d2:	461a      	mov	r2, r3
 80025d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025d8:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	460b      	mov	r3, r1
 8002632:	607a      	str	r2, [r7, #4]
 8002634:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b82      	cmp	r3, #130	@ 0x82
 8002648:	d101      	bne.n	800264e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	e050      	b.n	80026f0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2282      	movs	r2, #130	@ 0x82
 8002652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 031c 	and.w	r3, r3, #28
 8002664:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8a1b      	ldrh	r3, [r3, #16]
 800266a:	02db      	lsls	r3, r3, #11
 800266c:	b29b      	uxth	r3, r3
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	019b      	lsls	r3, r3, #6
 8002678:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f023 0302 	bic.w	r3, r3, #2
 8002688:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800269a:	f7ff f905 	bl	80018a8 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026a0:	e015      	b.n	80026ce <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80026a2:	f7ff f901 	bl	80018a8 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b0:	d309      	bcc.n	80026c6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e014      	b.n	80026f0 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e4      	bne.n	80026a2 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	461a      	mov	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	460b      	mov	r3, r1
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b42      	cmp	r3, #66	@ 0x42
 8002718:	d101      	bne.n	800271e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800271a:	2302      	movs	r3, #2
 800271c:	e04e      	b.n	80027bc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2242      	movs	r2, #66	@ 0x42
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 031c 	and.w	r3, r3, #28
 8002734:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8a1b      	ldrh	r3, [r3, #16]
 800273a:	02db      	lsls	r3, r3, #11
 800273c:	b29b      	uxth	r3, r3
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	019b      	lsls	r3, r3, #6
 8002748:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	b29a      	uxth	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002774:	f7ff f898 	bl	80018a8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800277a:	e015      	b.n	80027a8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800277c:	f7ff f894 	bl	80018a8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278a:	d309      	bcc.n	80027a0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e00d      	b.n	80027bc <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e4      	bne.n	800277c <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ETH_Start+0x16>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e01f      	b.n	800281a <HAL_ETH_Start+0x56>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 fb3a 	bl	8002e64 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fb71 	bl	8002ed8 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fbfc 	bl	8002ff4 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fba5 	bl	8002f4c <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fbcc 	bl	8002fa0 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002830:	2b01      	cmp	r3, #1
 8002832:	d101      	bne.n	8002838 <HAL_ETH_Stop+0x16>
 8002834:	2302      	movs	r3, #2
 8002836:	e01f      	b.n	8002878 <HAL_ETH_Stop+0x56>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fb94 	bl	8002f76 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fbbb 	bl	8002fca <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fb5c 	bl	8002f12 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fbca 	bl	8002ff4 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fb1c 	bl	8002e9e <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ETH_ConfigMAC+0x1c>
 8002898:	2302      	movs	r3, #2
 800289a:	e0e4      	b.n	8002a66 <HAL_ETH_ConfigMAC+0x1e6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80b1 	beq.w	8002a16 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <HAL_ETH_ConfigMAC+0x1f0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80028cc:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80028d2:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80028d8:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80028de:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80028e4:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80028ea:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80028f0:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 80028f6:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80028fc:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002902:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8002908:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 800290e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002926:	2001      	movs	r0, #1
 8002928:	f7fe ffc8 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800293c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 8002942:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8002948:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 800294e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8002954:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 800295a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002966:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002968:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002972:	2001      	movs	r0, #1
 8002974:	f7fe ffa2 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002988:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002992:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80029a2:	4013      	ands	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029b0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 80029b6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 80029bc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 80029c2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 80029c8:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7fe ff6b 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7fe ff58 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	61da      	str	r2, [r3, #28]
 8002a14:	e01e      	b.n	8002a54 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002a24:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a46:	2001      	movs	r0, #1
 8002a48:	f7fe ff38 	bl	80018bc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	ff20810f 	.word	0xff20810f

08002a74 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b0b0      	sub	sp, #192	@ 0xc0
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a90:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ac0:	e001      	b.n	8002ac6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aca:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002ae0:	2340      	movs	r3, #64	@ 0x40
 8002ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b4c:	4ba8      	ldr	r3, [pc, #672]	@ (8002df0 <ETH_MACDMAConfig+0x37c>)
 8002b4e:	4013      	ands	r3, r2
 8002b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8002b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b58:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8002b5c:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8002b60:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002b66:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002b68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8002b6a:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8002b6e:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002b74:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002b76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8002b78:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8002b7c:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8002b80:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8002b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002b84:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002b86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8002b88:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002b8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f7fe fe87 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002bb6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002bb8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8002bba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002bbc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8002bc0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8002bc6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8002bcc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8002bd2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8002bd8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002bdc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002be4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002be6:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fe fe62 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c00:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c14:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c24:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002c28:	4013      	ands	r3, r2
 8002c2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c32:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002c38:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8002c3e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002c40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8002c44:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8002c4a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8002c50:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c64:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fe fe23 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002c7e:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002c80:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8002c84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f7fe fe0e 	bl	80018bc <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002ca8:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb2:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002cb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002cbc:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd6:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d04:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <ETH_MACDMAConfig+0x380>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002d0c:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 8002d0e:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002d10:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002d12:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8002d14:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002d16:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8002d18:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002d1a:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8002d1c:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8002d20:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardErrorFrames |
 8002d24:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8002d28:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                        dmainit.ReceiveThresholdControl |
 8002d2c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002d2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d40:	461a      	mov	r2, r3
 8002d42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d46:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7fe fdb0 	bl	80018bc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d64:	461a      	mov	r2, r3
 8002d66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d6a:	6193      	str	r3, [r2, #24]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
                                        dmainit.FixedBurst |
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d70:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.FixedBurst |
 8002d74:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002d76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d78:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d7c:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 8002d7e:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002d82:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d90:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f7fe fd8b 	bl	80018bc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dae:	461a      	mov	r2, r3
 8002db0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002db4:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d10d      	bne.n	8002dda <ETH_MACDMAConfig+0x366>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002dd8:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	461a      	mov	r2, r3
 8002de0:	2100      	movs	r1, #0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f808 	bl	8002df8 <ETH_MACAddressConfig>
}
 8002de8:	bf00      	nop
 8002dea:	37c0      	adds	r7, #192	@ 0xc0
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	ff20810f 	.word	0xff20810f
 8002df4:	f8de3f23 	.word	0xf8de3f23

08002df8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3305      	adds	r3, #5
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	3204      	adds	r2, #4
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4b10      	ldr	r3, [pc, #64]	@ (8002e5c <ETH_MACAddressConfig+0x64>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3303      	adds	r3, #3
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	061a      	lsls	r2, r3, #24
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	3302      	adds	r3, #2
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3301      	adds	r3, #1
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	7812      	ldrb	r2, [r2, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <ETH_MACAddressConfig+0x68>)
 8002e4a:	4413      	add	r3, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	6013      	str	r3, [r2, #0]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr
 8002e5c:	40028040 	.word	0x40028040
 8002e60:	40028044 	.word	0x40028044

08002e64 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0208 	orr.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f000 f8d9 	bl	8003040 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
}
 8002e96:	bf00      	nop
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f000 f8bc 	bl	8003040 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0204 	orr.w	r2, r2, #4
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002efc:	2001      	movs	r0, #1
 8002efe:	f000 f89f 	bl	8003040 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0204 	bic.w	r2, r2, #4
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f000 f882 	bl	8003040 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	601a      	str	r2, [r3, #0]
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f6a:	6193      	str	r3, [r2, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f94:	6193      	str	r3, [r2, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fbe:	6193      	str	r3, [r2, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	f023 0302 	bic.w	r3, r3, #2
 8002fe4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fe8:	6193      	str	r3, [r2, #24]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003012:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003016:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003024:	2001      	movs	r0, #1
 8003026:	f000 f80b 	bl	8003040 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003034:	6193      	str	r3, [r2, #24]
}
 8003036:	bf00      	nop
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <ETH_Delay+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <ETH_Delay+0x38>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800305c:	bf00      	nop
  }
  while (Delay --);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <ETH_Delay+0x1c>
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000000 	.word	0x20000000
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003096:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <HAL_FLASH_Program+0xd8>)
 8003098:	7e1b      	ldrb	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_FLASH_Program+0x26>
 800309e:	2302      	movs	r3, #2
 80030a0:	e054      	b.n	800314c <HAL_FLASH_Program+0xd0>
 80030a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <HAL_FLASH_Program+0xd8>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80030a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80030ac:	f000 f8a8 	bl	8003200 <FLASH_WaitForLastOperation>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d144      	bne.n	8003144 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80030c0:	2301      	movs	r3, #1
 80030c2:	757b      	strb	r3, [r7, #21]
 80030c4:	e007      	b.n	80030d6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d102      	bne.n	80030d2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80030cc:	2302      	movs	r3, #2
 80030ce:	757b      	strb	r3, [r7, #21]
 80030d0:	e001      	b.n	80030d6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80030d2:	2304      	movs	r3, #4
 80030d4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	75bb      	strb	r3, [r7, #22]
 80030da:	e02d      	b.n	8003138 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80030dc:	7dbb      	ldrb	r3, [r7, #22]
 80030de:	005a      	lsls	r2, r3, #1
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	eb02 0c03 	add.w	ip, r2, r3
 80030e6:	7dbb      	ldrb	r3, [r7, #22]
 80030e8:	0119      	lsls	r1, r3, #4
 80030ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030ee:	f1c1 0620 	rsb	r6, r1, #32
 80030f2:	f1a1 0020 	sub.w	r0, r1, #32
 80030f6:	fa22 f401 	lsr.w	r4, r2, r1
 80030fa:	fa03 f606 	lsl.w	r6, r3, r6
 80030fe:	4334      	orrs	r4, r6
 8003100:	fa23 f000 	lsr.w	r0, r3, r0
 8003104:	4304      	orrs	r4, r0
 8003106:	fa23 f501 	lsr.w	r5, r3, r1
 800310a:	b2a3      	uxth	r3, r4
 800310c:	4619      	mov	r1, r3
 800310e:	4660      	mov	r0, ip
 8003110:	f000 f85a 	bl	80031c8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003114:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003118:	f000 f872 	bl	8003200 <FLASH_WaitForLastOperation>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003120:	4b0d      	ldr	r3, [pc, #52]	@ (8003158 <HAL_FLASH_Program+0xdc>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	4a0c      	ldr	r2, [pc, #48]	@ (8003158 <HAL_FLASH_Program+0xdc>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003132:	7dbb      	ldrb	r3, [r7, #22]
 8003134:	3301      	adds	r3, #1
 8003136:	75bb      	strb	r3, [r7, #22]
 8003138:	7dba      	ldrb	r2, [r7, #22]
 800313a:	7d7b      	ldrb	r3, [r7, #21]
 800313c:	429a      	cmp	r2, r3
 800313e:	d3cd      	bcc.n	80030dc <HAL_FLASH_Program+0x60>
 8003140:	e000      	b.n	8003144 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003142:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003144:	4b03      	ldr	r3, [pc, #12]	@ (8003154 <HAL_FLASH_Program+0xd8>)
 8003146:	2200      	movs	r2, #0
 8003148:	761a      	strb	r2, [r3, #24]

  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003154:	20000268 	.word	0x20000268
 8003158:	40022000 	.word	0x40022000

0800315c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <HAL_FLASH_Unlock+0x40>)
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00d      	beq.n	800318e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_FLASH_Unlock+0x40>)
 8003174:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <HAL_FLASH_Unlock+0x44>)
 8003176:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_FLASH_Unlock+0x40>)
 800317a:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <HAL_FLASH_Unlock+0x48>)
 800317c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800317e:	4b07      	ldr	r3, [pc, #28]	@ (800319c <HAL_FLASH_Unlock+0x40>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800318e:	79fb      	ldrb	r3, [r7, #7]
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	45670123 	.word	0x45670123
 80031a4:	cdef89ab 	.word	0xcdef89ab

080031a8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80031ac:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_FLASH_Lock+0x1c>)
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	4a04      	ldr	r2, [pc, #16]	@ (80031c4 <HAL_FLASH_Lock+0x1c>)
 80031b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40022000 	.word	0x40022000

080031c8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031d4:	4b08      	ldr	r3, [pc, #32]	@ (80031f8 <FLASH_Program_HalfWord+0x30>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <FLASH_Program_HalfWord+0x34>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4a07      	ldr	r2, [pc, #28]	@ (80031fc <FLASH_Program_HalfWord+0x34>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	887a      	ldrh	r2, [r7, #2]
 80031ea:	801a      	strh	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000268 	.word	0x20000268
 80031fc:	40022000 	.word	0x40022000

08003200 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7fe fb4e 	bl	80018a8 <HAL_GetTick>
 800320c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800320e:	e010      	b.n	8003232 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d00c      	beq.n	8003232 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <FLASH_WaitForLastOperation+0x2e>
 800321e:	f7fe fb43 	bl	80018a8 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d201      	bcs.n	8003232 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e025      	b.n	800327e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1e8      	bne.n	8003210 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800323e:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800324a:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 800324c:	2220      	movs	r2, #32
 800324e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003250:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10b      	bne.n	8003274 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800325c:	4b0a      	ldr	r3, [pc, #40]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003268:	4b07      	ldr	r3, [pc, #28]	@ (8003288 <FLASH_WaitForLastOperation+0x88>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003274:	f000 f80a 	bl	800328c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40022000 	.word	0x40022000

0800328c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003296:	4b23      	ldr	r3, [pc, #140]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80032a2:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032ac:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f043 0310 	orr.w	r3, r3, #16
 80032b4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80032b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80032c2:	4b19      	ldr	r3, [pc, #100]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032cc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f043 0304 	orr.w	r3, r3, #4
 80032d4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	4a0f      	ldr	r2, [pc, #60]	@ (8003328 <FLASH_SetErrorCode+0x9c>)
 80032ec:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 80032f4:	f023 0301 	bic.w	r3, r3, #1
 80032f8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f240 1201 	movw	r2, #257	@ 0x101
 8003300:	4293      	cmp	r3, r2
 8003302:	d106      	bne.n	8003312 <FLASH_SetErrorCode+0x86>
 8003304:	4b07      	ldr	r3, [pc, #28]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a06      	ldr	r2, [pc, #24]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	61d3      	str	r3, [r2, #28]
}  
 8003310:	e002      	b.n	8003318 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003312:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <FLASH_SetErrorCode+0x98>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60d3      	str	r3, [r2, #12]
}  
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	bc80      	pop	{r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40022000 	.word	0x40022000
 8003328:	20000268 	.word	0x20000268

0800332c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800333e:	4b2f      	ldr	r3, [pc, #188]	@ (80033fc <HAL_FLASHEx_Erase+0xd0>)
 8003340:	7e1b      	ldrb	r3, [r3, #24]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_FLASHEx_Erase+0x1e>
 8003346:	2302      	movs	r3, #2
 8003348:	e053      	b.n	80033f2 <HAL_FLASHEx_Erase+0xc6>
 800334a:	4b2c      	ldr	r3, [pc, #176]	@ (80033fc <HAL_FLASHEx_Erase+0xd0>)
 800334c:	2201      	movs	r2, #1
 800334e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d116      	bne.n	8003386 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003358:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800335c:	f7ff ff50 	bl	8003200 <FLASH_WaitForLastOperation>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d141      	bne.n	80033ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003366:	2001      	movs	r0, #1
 8003368:	f000 f84c 	bl	8003404 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800336c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003370:	f7ff ff46 	bl	8003200 <FLASH_WaitForLastOperation>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003378:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_FLASHEx_Erase+0xd4>)
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	4a20      	ldr	r2, [pc, #128]	@ (8003400 <HAL_FLASHEx_Erase+0xd4>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	6113      	str	r3, [r2, #16]
 8003384:	e031      	b.n	80033ea <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003386:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800338a:	f7ff ff39 	bl	8003200 <FLASH_WaitForLastOperation>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d12a      	bne.n	80033ea <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f04f 32ff 	mov.w	r2, #4294967295
 800339a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	e019      	b.n	80033d8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80033a4:	68b8      	ldr	r0, [r7, #8]
 80033a6:	f000 f849 	bl	800343c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033aa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033ae:	f7ff ff27 	bl	8003200 <FLASH_WaitForLastOperation>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_FLASHEx_Erase+0xd4>)
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	4a11      	ldr	r2, [pc, #68]	@ (8003400 <HAL_FLASHEx_Erase+0xd4>)
 80033bc:	f023 0302 	bic.w	r3, r3, #2
 80033c0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	601a      	str	r2, [r3, #0]
            break;
 80033ce:	e00c      	b.n	80033ea <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	02da      	lsls	r2, r3, #11
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4413      	add	r3, r2
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3dc      	bcc.n	80033a4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033ea:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <HAL_FLASHEx_Erase+0xd0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	761a      	strb	r2, [r3, #24]

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000268 	.word	0x20000268
 8003400:	40022000 	.word	0x40022000

08003404 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800340c:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <FLASH_MassErase+0x30>)
 800340e:	2200      	movs	r2, #0
 8003410:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <FLASH_MassErase+0x34>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <FLASH_MassErase+0x34>)
 8003418:	f043 0304 	orr.w	r3, r3, #4
 800341c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <FLASH_MassErase+0x34>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	4a05      	ldr	r2, [pc, #20]	@ (8003438 <FLASH_MassErase+0x34>)
 8003424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003428:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	20000268 	.word	0x20000268
 8003438:	40022000 	.word	0x40022000

0800343c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003444:	4b0b      	ldr	r3, [pc, #44]	@ (8003474 <FLASH_PageErase+0x38>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800344a:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <FLASH_PageErase+0x3c>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <FLASH_PageErase+0x3c>)
 8003450:	f043 0302 	orr.w	r3, r3, #2
 8003454:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003456:	4a08      	ldr	r2, [pc, #32]	@ (8003478 <FLASH_PageErase+0x3c>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <FLASH_PageErase+0x3c>)
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	4a05      	ldr	r2, [pc, #20]	@ (8003478 <FLASH_PageErase+0x3c>)
 8003462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003466:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000268 	.word	0x20000268
 8003478:	40022000 	.word	0x40022000

0800347c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800347c:	b480      	push	{r7}
 800347e:	b08b      	sub	sp, #44	@ 0x2c
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800348a:	2300      	movs	r3, #0
 800348c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348e:	e169      	b.n	8003764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003490:	2201      	movs	r2, #1
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	f040 8158 	bne.w	800375e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4a9a      	ldr	r2, [pc, #616]	@ (800371c <HAL_GPIO_Init+0x2a0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d05e      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034b8:	4a98      	ldr	r2, [pc, #608]	@ (800371c <HAL_GPIO_Init+0x2a0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d875      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034be:	4a98      	ldr	r2, [pc, #608]	@ (8003720 <HAL_GPIO_Init+0x2a4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d058      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034c4:	4a96      	ldr	r2, [pc, #600]	@ (8003720 <HAL_GPIO_Init+0x2a4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d86f      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034ca:	4a96      	ldr	r2, [pc, #600]	@ (8003724 <HAL_GPIO_Init+0x2a8>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d052      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034d0:	4a94      	ldr	r2, [pc, #592]	@ (8003724 <HAL_GPIO_Init+0x2a8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d869      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034d6:	4a94      	ldr	r2, [pc, #592]	@ (8003728 <HAL_GPIO_Init+0x2ac>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d04c      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034dc:	4a92      	ldr	r2, [pc, #584]	@ (8003728 <HAL_GPIO_Init+0x2ac>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d863      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034e2:	4a92      	ldr	r2, [pc, #584]	@ (800372c <HAL_GPIO_Init+0x2b0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d046      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
 80034e8:	4a90      	ldr	r2, [pc, #576]	@ (800372c <HAL_GPIO_Init+0x2b0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d85d      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034ee:	2b12      	cmp	r3, #18
 80034f0:	d82a      	bhi.n	8003548 <HAL_GPIO_Init+0xcc>
 80034f2:	2b12      	cmp	r3, #18
 80034f4:	d859      	bhi.n	80035aa <HAL_GPIO_Init+0x12e>
 80034f6:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <HAL_GPIO_Init+0x80>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	08003577 	.word	0x08003577
 8003500:	08003551 	.word	0x08003551
 8003504:	08003563 	.word	0x08003563
 8003508:	080035a5 	.word	0x080035a5
 800350c:	080035ab 	.word	0x080035ab
 8003510:	080035ab 	.word	0x080035ab
 8003514:	080035ab 	.word	0x080035ab
 8003518:	080035ab 	.word	0x080035ab
 800351c:	080035ab 	.word	0x080035ab
 8003520:	080035ab 	.word	0x080035ab
 8003524:	080035ab 	.word	0x080035ab
 8003528:	080035ab 	.word	0x080035ab
 800352c:	080035ab 	.word	0x080035ab
 8003530:	080035ab 	.word	0x080035ab
 8003534:	080035ab 	.word	0x080035ab
 8003538:	080035ab 	.word	0x080035ab
 800353c:	080035ab 	.word	0x080035ab
 8003540:	08003559 	.word	0x08003559
 8003544:	0800356d 	.word	0x0800356d
 8003548:	4a79      	ldr	r2, [pc, #484]	@ (8003730 <HAL_GPIO_Init+0x2b4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800354e:	e02c      	b.n	80035aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	623b      	str	r3, [r7, #32]
          break;
 8003556:	e029      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	3304      	adds	r3, #4
 800355e:	623b      	str	r3, [r7, #32]
          break;
 8003560:	e024      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	3308      	adds	r3, #8
 8003568:	623b      	str	r3, [r7, #32]
          break;
 800356a:	e01f      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	330c      	adds	r3, #12
 8003572:	623b      	str	r3, [r7, #32]
          break;
 8003574:	e01a      	b.n	80035ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800357e:	2304      	movs	r3, #4
 8003580:	623b      	str	r3, [r7, #32]
          break;
 8003582:	e013      	b.n	80035ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800358c:	2308      	movs	r3, #8
 800358e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69fa      	ldr	r2, [r7, #28]
 8003594:	611a      	str	r2, [r3, #16]
          break;
 8003596:	e009      	b.n	80035ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003598:	2308      	movs	r3, #8
 800359a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	615a      	str	r2, [r3, #20]
          break;
 80035a2:	e003      	b.n	80035ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80035a4:	2300      	movs	r3, #0
 80035a6:	623b      	str	r3, [r7, #32]
          break;
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x130>
          break;
 80035aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2bff      	cmp	r3, #255	@ 0xff
 80035b0:	d801      	bhi.n	80035b6 <HAL_GPIO_Init+0x13a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	e001      	b.n	80035ba <HAL_GPIO_Init+0x13e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2bff      	cmp	r3, #255	@ 0xff
 80035c0:	d802      	bhi.n	80035c8 <HAL_GPIO_Init+0x14c>
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	e002      	b.n	80035ce <HAL_GPIO_Init+0x152>
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	3b08      	subs	r3, #8
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	210f      	movs	r1, #15
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	6a39      	ldr	r1, [r7, #32]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	fa01 f303 	lsl.w	r3, r1, r3
 80035e8:	431a      	orrs	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80b1 	beq.w	800375e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035fc:	4b4d      	ldr	r3, [pc, #308]	@ (8003734 <HAL_GPIO_Init+0x2b8>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	4a4c      	ldr	r2, [pc, #304]	@ (8003734 <HAL_GPIO_Init+0x2b8>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6193      	str	r3, [r2, #24]
 8003608:	4b4a      	ldr	r3, [pc, #296]	@ (8003734 <HAL_GPIO_Init+0x2b8>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003614:	4a48      	ldr	r2, [pc, #288]	@ (8003738 <HAL_GPIO_Init+0x2bc>)
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	089b      	lsrs	r3, r3, #2
 800361a:	3302      	adds	r3, #2
 800361c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a40      	ldr	r2, [pc, #256]	@ (800373c <HAL_GPIO_Init+0x2c0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d013      	beq.n	8003668 <HAL_GPIO_Init+0x1ec>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3f      	ldr	r2, [pc, #252]	@ (8003740 <HAL_GPIO_Init+0x2c4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00d      	beq.n	8003664 <HAL_GPIO_Init+0x1e8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3e      	ldr	r2, [pc, #248]	@ (8003744 <HAL_GPIO_Init+0x2c8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <HAL_GPIO_Init+0x1e4>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3d      	ldr	r2, [pc, #244]	@ (8003748 <HAL_GPIO_Init+0x2cc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d101      	bne.n	800365c <HAL_GPIO_Init+0x1e0>
 8003658:	2303      	movs	r3, #3
 800365a:	e006      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 800365c:	2304      	movs	r3, #4
 800365e:	e004      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003660:	2302      	movs	r3, #2
 8003662:	e002      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <HAL_GPIO_Init+0x1ee>
 8003668:	2300      	movs	r3, #0
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	f002 0203 	and.w	r2, r2, #3
 8003670:	0092      	lsls	r2, r2, #2
 8003672:	4093      	lsls	r3, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800367a:	492f      	ldr	r1, [pc, #188]	@ (8003738 <HAL_GPIO_Init+0x2bc>)
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	3302      	adds	r3, #2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003694:	4b2d      	ldr	r3, [pc, #180]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	492c      	ldr	r1, [pc, #176]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	608b      	str	r3, [r1, #8]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036a2:	4b2a      	ldr	r3, [pc, #168]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4928      	ldr	r1, [pc, #160]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d006      	beq.n	80036ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80036bc:	4b23      	ldr	r3, [pc, #140]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4922      	ldr	r1, [pc, #136]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	43db      	mvns	r3, r3
 80036d2:	491e      	ldr	r1, [pc, #120]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d006      	beq.n	80036f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	4918      	ldr	r1, [pc, #96]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	604b      	str	r3, [r1, #4]
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	4914      	ldr	r1, [pc, #80]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d021      	beq.n	8003750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800370c:	4b0f      	ldr	r3, [pc, #60]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	490e      	ldr	r1, [pc, #56]	@ (800374c <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e021      	b.n	800375e <HAL_GPIO_Init+0x2e2>
 800371a:	bf00      	nop
 800371c:	10320000 	.word	0x10320000
 8003720:	10310000 	.word	0x10310000
 8003724:	10220000 	.word	0x10220000
 8003728:	10210000 	.word	0x10210000
 800372c:	10120000 	.word	0x10120000
 8003730:	10110000 	.word	0x10110000
 8003734:	40021000 	.word	0x40021000
 8003738:	40010000 	.word	0x40010000
 800373c:	40010800 	.word	0x40010800
 8003740:	40010c00 	.word	0x40010c00
 8003744:	40011000 	.word	0x40011000
 8003748:	40011400 	.word	0x40011400
 800374c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003750:	4b0b      	ldr	r3, [pc, #44]	@ (8003780 <HAL_GPIO_Init+0x304>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	43db      	mvns	r3, r3
 8003758:	4909      	ldr	r1, [pc, #36]	@ (8003780 <HAL_GPIO_Init+0x304>)
 800375a:	4013      	ands	r3, r2
 800375c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	3301      	adds	r3, #1
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	f47f ae8e 	bne.w	8003490 <HAL_GPIO_Init+0x14>
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	372c      	adds	r7, #44	@ 0x2c
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40010400 	.word	0x40010400

08003784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	807b      	strh	r3, [r7, #2]
 80037be:	4613      	mov	r3, r2
 80037c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037c2:	787b      	ldrb	r3, [r7, #1]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c8:	887a      	ldrh	r2, [r7, #2]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80037ce:	e003      	b.n	80037d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	041a      	lsls	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	611a      	str	r2, [r3, #16]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e4:	b08f      	sub	sp, #60	@ 0x3c
 80037e6:	af0a      	add	r7, sp, #40	@ 0x28
 80037e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e10f      	b.n	8003a14 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f00f f924 	bl	8012a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f002 ffd0 	bl	80067d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	687e      	ldr	r6, [r7, #4]
 8003840:	466d      	mov	r5, sp
 8003842:	f106 0410 	add.w	r4, r6, #16
 8003846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003852:	e885 0003 	stmia.w	r5, {r0, r1}
 8003856:	1d33      	adds	r3, r6, #4
 8003858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f002 feee 	bl	800663c <USB_CoreInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0d0      	b.n	8003a14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f002 ffbd 	bl	80067f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e04a      	b.n	800391a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	333d      	adds	r3, #61	@ 0x3d
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	333c      	adds	r3, #60	@ 0x3c
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	b298      	uxth	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3356      	adds	r3, #86	@ 0x56
 80038c0:	4602      	mov	r2, r0
 80038c2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3340      	adds	r3, #64	@ 0x40
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3344      	adds	r3, #68	@ 0x44
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3348      	adds	r3, #72	@ 0x48
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334c      	adds	r3, #76	@ 0x4c
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3af      	bcc.n	8003884 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e044      	b.n	80039b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b5      	bcc.n	800392a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	687e      	ldr	r6, [r7, #4]
 80039c6:	466d      	mov	r5, sp
 80039c8:	f106 0410 	add.w	r4, r6, #16
 80039cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039dc:	1d33      	adds	r3, r6, #4
 80039de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f002 ff55 	bl	8006890 <USB_DevInit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00d      	b.n	8003a14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fedf 	bl	80077d0 <USB_DevDisconnect>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_PCD_Start+0x16>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e012      	b.n	8003a58 <HAL_PCD_Start+0x3c>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 feba 	bl	80067b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fea1 	bl	8007790 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b08d      	sub	sp, #52	@ 0x34
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 ff58 	bl	800792c <USB_GetMode>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f040 8443 	bne.w	800430a <HAL_PCD_IRQHandler+0x8aa>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 fec1 	bl	8007810 <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8439 	beq.w	8004308 <HAL_PCD_IRQHandler+0x8a8>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f003 feae 	bl	8007810 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d107      	bne.n	8003ace <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 0202 	and.w	r2, r2, #2
 8003acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f003 fe9c 	bl	8007810 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f003 0310 	and.w	r3, r3, #16
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d161      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699a      	ldr	r2, [r3, #24]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0210 	bic.w	r2, r2, #16
 8003af0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3304      	adds	r3, #4
 8003b10:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	0c5b      	lsrs	r3, r3, #17
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d124      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d035      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6a38      	ldr	r0, [r7, #32]
 8003b3e:	f003 fcd9 	bl	80074f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4e:	441a      	add	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	695a      	ldr	r2, [r3, #20]
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b60:	441a      	add	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	615a      	str	r2, [r3, #20]
 8003b66:	e016      	b.n	8003b96 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	0c5b      	lsrs	r3, r3, #17
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2b06      	cmp	r3, #6
 8003b72:	d110      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	6a38      	ldr	r0, [r7, #32]
 8003b80:	f003 fcb8 	bl	80074f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b90:	441a      	add	r2, r3
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0210 	orr.w	r2, r2, #16
 8003ba4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 fe30 	bl	8007810 <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bba:	f040 80a7 	bne.w	8003d0c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f003 fe34 	bl	8007834 <USB_ReadDevAllOutEpInterrupt>
 8003bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003bce:	e099      	b.n	8003d04 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 808e 	beq.w	8003cf8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fe56 	bl	8007898 <USB_ReadDevOutEPInterrupt>
 8003bec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	2301      	movs	r3, #1
 8003c08:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fe41 	bl	8004894 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fe7d 	bl	8004930 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0310 	and.w	r3, r3, #16
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	2310      	movs	r3, #16
 8003c50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d030      	beq.n	8003cbe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c64:	2b80      	cmp	r3, #128	@ 0x80
 8003c66:	d109      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c7a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	78db      	ldrb	r3, [r3, #3]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d108      	bne.n	8003cac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f00e ffa4 	bl	8012bf4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2302      	movs	r3, #2
 8003cbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	2320      	movs	r3, #32
 8003cd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d009      	beq.n	8003cf8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cf6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f af62 	bne.w	8003bd0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 fd7d 	bl	8007810 <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d20:	f040 80a4 	bne.w	8003e6c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 fd9c 	bl	8007866 <USB_ReadDevAllInEpInterrupt>
 8003d2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003d34:	e096      	b.n	8003e64 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 808b 	beq.w	8003e58 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f003 fdc0 	bl	80078d2 <USB_ReadDevInEPInterrupt>
 8003d52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d020      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	2201      	movs	r2, #1
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	69f9      	ldr	r1, [r7, #28]
 8003d7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d7e:	4013      	ands	r3, r2
 8003d80:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2301      	movs	r3, #1
 8003d92:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f00e feaf 	bl	8012afe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003db6:	461a      	mov	r2, r3
 8003db8:	2308      	movs	r3, #8
 8003dba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dee:	461a      	mov	r2, r3
 8003df0:	2340      	movs	r3, #64	@ 0x40
 8003df2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d023      	beq.n	8003e46 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003dfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e00:	6a38      	ldr	r0, [r7, #32]
 8003e02:	f002 fe67 	bl	8006ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	3338      	adds	r3, #56	@ 0x38
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4413      	add	r3, r2
 8003e16:	3304      	adds	r3, #4
 8003e18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	78db      	ldrb	r3, [r3, #3]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d108      	bne.n	8003e34 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2200      	movs	r2, #0
 8003e26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f00e fef2 	bl	8012c18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e40:	461a      	mov	r2, r3
 8003e42:	2302      	movs	r3, #2
 8003e44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fc96 	bl	8004784 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e60:	085b      	lsrs	r3, r3, #1
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f47f af65 	bne.w	8003d36 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fccd 	bl	8007810 <USB_ReadInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e80:	d114      	bne.n	8003eac <HAL_PCD_IRQHandler+0x44c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f00e fe9e 	bl	8012bd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695a      	ldr	r2, [r3, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f003 fcad 	bl	8007810 <USB_ReadInterrupts>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d112      	bne.n	8003ee8 <HAL_PCD_IRQHandler+0x488>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d102      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x478>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f00e fe5a 	bl	8012b8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695a      	ldr	r2, [r3, #20]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ee6:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 fc8f 	bl	8007810 <USB_ReadInterrupts>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	f040 80b5 	bne.w	800406a <HAL_PCD_IRQHandler+0x60a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2110      	movs	r1, #16
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f002 fdda 	bl	8006ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f24:	e046      	b.n	8003fb4 <HAL_PCD_IRQHandler+0x554>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f32:	461a      	mov	r2, r3
 8003f34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003f54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f58:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f6c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f7e:	0151      	lsls	r1, r2, #5
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	440a      	add	r2, r1
 8003f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f8c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	69fa      	ldr	r2, [r7, #28]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003fa8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d3b3      	bcc.n	8003f26 <HAL_PCD_IRQHandler+0x4c6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fcc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003fd0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_PCD_IRQHandler+0x5a8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe4:	69fa      	ldr	r2, [r7, #28]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003fea:	f043 030b 	orr.w	r3, r3, #11
 8003fee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	69fa      	ldr	r2, [r7, #28]
 8003ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004000:	f043 030b 	orr.w	r3, r3, #11
 8004004:	6453      	str	r3, [r2, #68]	@ 0x44
 8004006:	e015      	b.n	8004034 <HAL_PCD_IRQHandler+0x5d4>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	69fa      	ldr	r2, [r7, #28]
 8004012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004016:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800401a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800401e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800402e:	f043 030b 	orr.w	r3, r3, #11
 8004032:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004042:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004046:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f003 fc99 	bl	800798c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f003 fbce 	bl	8007810 <USB_ReadInterrupts>
 8004074:	4603      	mov	r3, r0
 8004076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800407e:	d124      	bne.n	80040ca <HAL_PCD_IRQHandler+0x66a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f003 fc5e 	bl	8007946 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f002 fd9c 	bl	8006bcc <USB_GetDevSpeed>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681c      	ldr	r4, [r3, #0]
 80040a0:	f001 fa94 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80040a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	4620      	mov	r0, r4
 80040b0:	f002 fae6 	bl	8006680 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f00e fd4a 	bl	8012b4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 fb9e 	bl	8007810 <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d10a      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x694>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f00e fd27 	bl	8012b32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695a      	ldr	r2, [r3, #20]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f002 0208 	and.w	r2, r2, #8
 80040f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 fb89 	bl	8007810 <USB_ReadInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d122      	bne.n	800414e <HAL_PCD_IRQHandler+0x6ee>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
 8004118:	e014      	b.n	8004144 <HAL_PCD_IRQHandler+0x6e4>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_PCD_IRQHandler+0x6de>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	b2db      	uxtb	r3, r3
 8004136:	4619      	mov	r1, r3
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 faf2 	bl	8004722 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	@ 0x24
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414a:	429a      	cmp	r2, r3
 800414c:	d3e5      	bcc.n	800411a <HAL_PCD_IRQHandler+0x6ba>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f003 fb5c 	bl	8007810 <USB_ReadInterrupts>
 8004158:	4603      	mov	r3, r0
 800415a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004162:	d13b      	bne.n	80041dc <HAL_PCD_IRQHandler+0x77c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004164:	2301      	movs	r3, #1
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
 8004168:	e02b      	b.n	80041c2 <HAL_PCD_IRQHandler+0x762>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417e:	4613      	mov	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	3340      	adds	r3, #64	@ 0x40
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d115      	bne.n	80041bc <HAL_PCD_IRQHandler+0x75c>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004190:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004192:	2b00      	cmp	r3, #0
 8004194:	da12      	bge.n	80041bc <HAL_PCD_IRQHandler+0x75c>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	333f      	adds	r3, #63	@ 0x3f
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80041aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	4619      	mov	r1, r3
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fab3 	bl	8004722 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	3301      	adds	r3, #1
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d3ce      	bcc.n	800416a <HAL_PCD_IRQHandler+0x70a>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80041da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f003 fb15 	bl	8007810 <USB_ReadInterrupts>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041f0:	d155      	bne.n	800429e <HAL_PCD_IRQHandler+0x83e>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041f2:	2301      	movs	r3, #1
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f6:	e045      	b.n	8004284 <HAL_PCD_IRQHandler+0x824>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d12e      	bne.n	800427e <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004220:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004222:	2b00      	cmp	r3, #0
 8004224:	da2b      	bge.n	800427e <HAL_PCD_IRQHandler+0x81e>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004232:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004236:	429a      	cmp	r2, r3
 8004238:	d121      	bne.n	800427e <HAL_PCD_IRQHandler+0x81e>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423e:	4613      	mov	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800424c:	2201      	movs	r2, #1
 800424e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <HAL_PCD_IRQHandler+0x81e>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004276:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800427a:	6053      	str	r3, [r2, #4]
            break;
 800427c:	e007      	b.n	800428e <HAL_PCD_IRQHandler+0x82e>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	3301      	adds	r3, #1
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428a:	429a      	cmp	r2, r3
 800428c:	d3b4      	bcc.n	80041f8 <HAL_PCD_IRQHandler+0x798>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fab4 	bl	8007810 <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b2:	d10a      	bne.n	80042ca <HAL_PCD_IRQHandler+0x86a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f00e fcc1 	bl	8012c3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695a      	ldr	r2, [r3, #20]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80042c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f003 fa9e 	bl	8007810 <USB_ReadInterrupts>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d115      	bne.n	800430a <HAL_PCD_IRQHandler+0x8aa>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_PCD_IRQHandler+0x896>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f00e fcb1 	bl	8012c58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	e000      	b.n	800430a <HAL_PCD_IRQHandler+0x8aa>
      return;
 8004308:	bf00      	nop
    }
  }
}
 800430a:	3734      	adds	r7, #52	@ 0x34
 800430c:	46bd      	mov	sp, r7
 800430e:	bd90      	pop	{r4, r7, pc}

08004310 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_PCD_SetAddress+0x1a>
 8004326:	2302      	movs	r3, #2
 8004328:	e013      	b.n	8004352 <HAL_PCD_SetAddress+0x42>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	4611      	mov	r1, r2
 8004342:	4618      	mov	r0, r3
 8004344:	f003 f9ff 	bl	8007746 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	461a      	mov	r2, r3
 8004368:	4603      	mov	r3, r0
 800436a:	70fb      	strb	r3, [r7, #3]
 800436c:	460b      	mov	r3, r1
 800436e:	803b      	strh	r3, [r7, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004378:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800437c:	2b00      	cmp	r3, #0
 800437e:	da0f      	bge.n	80043a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 020f 	and.w	r2, r3, #15
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	3338      	adds	r3, #56	@ 0x38
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	705a      	strb	r2, [r3, #1]
 800439e:	e00f      	b.n	80043c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	4613      	mov	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043cc:	883a      	ldrh	r2, [r7, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	78ba      	ldrb	r2, [r7, #2]
 80043d6:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	785b      	ldrb	r3, [r3, #1]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043ea:	78bb      	ldrb	r3, [r7, #2]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d102      	bne.n	80043f6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_PCD_EP_Open+0xaa>
 8004400:	2302      	movs	r3, #2
 8004402:	e00e      	b.n	8004422 <HAL_PCD_EP_Open+0xc8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	4618      	mov	r0, r3
 8004414:	f002 fbf8 	bl	8006c08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004420:	7afb      	ldrb	r3, [r7, #11]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	da0f      	bge.n	800445e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	3338      	adds	r3, #56	@ 0x38
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4413      	add	r3, r2
 8004452:	3304      	adds	r3, #4
 8004454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	705a      	strb	r2, [r3, #1]
 800445c:	e00f      	b.n	800447e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	f003 020f 	and.w	r2, r3, #15
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	4413      	add	r3, r2
 8004474:	3304      	adds	r3, #4
 8004476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_PCD_EP_Close+0x6e>
 8004494:	2302      	movs	r3, #2
 8004496:	e00e      	b.n	80044b6 <HAL_PCD_EP_Close+0x8c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 fc34 	bl	8006d14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b086      	sub	sp, #24
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	460b      	mov	r3, r1
 80044cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ce:	7afb      	ldrb	r3, [r7, #11]
 80044d0:	f003 020f 	and.w	r2, r3, #15
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	3304      	adds	r3, #4
 80044e6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2200      	movs	r2, #0
 80044f8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004500:	7afb      	ldrb	r3, [r7, #11]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	b2da      	uxtb	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6979      	ldr	r1, [r7, #20]
 8004512:	4618      	mov	r0, r3
 8004514:	f002 fcda 	bl	8006ecc <USB_EPStartXfer>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	f003 020f 	and.w	r2, r3, #15
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004544:	681b      	ldr	r3, [r3, #0]
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	460b      	mov	r3, r1
 800455e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	f003 020f 	and.w	r2, r3, #15
 8004566:	4613      	mov	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	3338      	adds	r3, #56	@ 0x38
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2200      	movs	r2, #0
 8004588:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2201      	movs	r2, #1
 800458e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004590:	7afb      	ldrb	r3, [r7, #11]
 8004592:	f003 030f 	and.w	r3, r3, #15
 8004596:	b2da      	uxtb	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f002 fc92 	bl	8006ecc <USB_EPStartXfer>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d901      	bls.n	80045d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e04e      	b.n	800466e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	da0f      	bge.n	80045f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	4613      	mov	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	3338      	adds	r3, #56	@ 0x38
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4413      	add	r3, r2
 80045ec:	3304      	adds	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	705a      	strb	r2, [r3, #1]
 80045f6:	e00d      	b.n	8004614 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	3304      	adds	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800461a:	78fb      	ldrb	r3, [r7, #3]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_PCD_EP_SetStall+0x82>
 8004630:	2302      	movs	r3, #2
 8004632:	e01c      	b.n	800466e <HAL_PCD_EP_SetStall+0xbc>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68f9      	ldr	r1, [r7, #12]
 8004642:	4618      	mov	r0, r3
 8004644:	f002 ffad 	bl	80075a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f003 f994 	bl	800798c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d901      	bls.n	8004694 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e042      	b.n	800471a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004698:	2b00      	cmp	r3, #0
 800469a:	da0f      	bge.n	80046bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	f003 020f 	and.w	r2, r3, #15
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	3338      	adds	r3, #56	@ 0x38
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4413      	add	r3, r2
 80046b0:	3304      	adds	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2201      	movs	r2, #1
 80046b8:	705a      	strb	r2, [r3, #1]
 80046ba:	e00f      	b.n	80046dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	f003 020f 	and.w	r2, r3, #15
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	3304      	adds	r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_PCD_EP_ClrStall+0x86>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e00e      	b.n	800471a <HAL_PCD_EP_ClrStall+0xa4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68f9      	ldr	r1, [r7, #12]
 800470a:	4618      	mov	r0, r3
 800470c:	f002 ffb6 	bl	800767c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800472e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da0c      	bge.n	8004750 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	3338      	adds	r3, #56	@ 0x38
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e00c      	b.n	800476a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	4413      	add	r3, r2
 8004766:	3304      	adds	r3, #4
 8004768:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68f9      	ldr	r1, [r7, #12]
 8004770:	4618      	mov	r0, r3
 8004772:	f002 fddd 	bl	8007330 <USB_EPStopXfer>
 8004776:	4603      	mov	r3, r0
 8004778:	72fb      	strb	r3, [r7, #11]

  return ret;
 800477a:	7afb      	ldrb	r3, [r7, #11]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	4613      	mov	r3, r2
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	3338      	adds	r3, #56	@ 0x38
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4413      	add	r3, r2
 80047a8:	3304      	adds	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d901      	bls.n	80047bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e067      	b.n	800488c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d902      	bls.n	80047d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	3303      	adds	r3, #3
 80047dc:	089b      	lsrs	r3, r3, #2
 80047de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047e0:	e026      	b.n	8004830 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d902      	bls.n	80047fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3303      	adds	r3, #3
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	68d9      	ldr	r1, [r3, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	b29b      	uxth	r3, r3
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f002 fe35 	bl	8007482 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	441a      	add	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	695a      	ldr	r2, [r3, #20]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	441a      	add	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d809      	bhi.n	800485a <PCD_WriteEmptyTxFifo+0xd6>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800484e:	429a      	cmp	r2, r3
 8004850:	d203      	bcs.n	800485a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1c3      	bne.n	80047e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	429a      	cmp	r2, r3
 8004864:	d811      	bhi.n	800488a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2201      	movs	r2, #1
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	43db      	mvns	r3, r3
 8004880:	6939      	ldr	r1, [r7, #16]
 8004882:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004886:	4013      	ands	r3, r2
 8004888:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3720      	adds	r7, #32
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	333c      	adds	r3, #60	@ 0x3c
 80048ac:	3304      	adds	r3, #4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4a19      	ldr	r2, [pc, #100]	@ (800492c <PCD_EP_OutXfrComplete_int+0x98>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d124      	bne.n	8004914 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e0:	461a      	mov	r2, r3
 80048e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e6:	6093      	str	r3, [r2, #8]
 80048e8:	e01a      	b.n	8004920 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	2320      	movs	r3, #32
 8004904:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00e f8db 	bl	8012ac8 <HAL_PCD_DataOutStageCallback>
 8004912:	e005      	b.n	8004920 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f00e f8d4 	bl	8012ac8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	4f54310a 	.word	0x4f54310a

08004930 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	333c      	adds	r3, #60	@ 0x3c
 8004948:	3304      	adds	r3, #4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a0c      	ldr	r2, [pc, #48]	@ (8004994 <PCD_EP_OutSetupPacket_int+0x64>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d90e      	bls.n	8004984 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800497c:	461a      	mov	r2, r3
 800497e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004982:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f00e f88d 	bl	8012aa4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	4f54300a 	.word	0x4f54300a

08004998 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
 80049a4:	4613      	mov	r3, r2
 80049a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049b6:	883b      	ldrh	r3, [r7, #0]
 80049b8:	0419      	lsls	r1, r3, #16
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049c4:	e028      	b.n	8004a18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e00d      	b.n	80049f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	3340      	adds	r3, #64	@ 0x40
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	3301      	adds	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3ec      	bcc.n	80049da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a00:	883b      	ldrh	r3, [r7, #0]
 8004a02:	0418      	lsls	r0, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6819      	ldr	r1, [r3, #0]
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	4302      	orrs	r2, r0
 8004a10:	3340      	adds	r3, #64	@ 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004a4a:	f7fc ff2d 	bl	80018a8 <HAL_GetTick>
 8004a4e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a50:	4b60      	ldr	r3, [pc, #384]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a5f      	ldr	r2, [pc, #380]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7fc ff23 	bl	80018a8 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e0ac      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004a70:	4b58      	ldr	r3, [pc, #352]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8004a7c:	4b55      	ldr	r3, [pc, #340]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004a84:	4a53      	ldr	r2, [pc, #332]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004a8c:	f7fc ff0c 	bl	80018a8 <HAL_GetTick>
 8004a90:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004a92:	4b50      	ldr	r3, [pc, #320]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9a:	f7fc ff05 	bl	80018a8 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e08c      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8004ab0:	4b48      	ldr	r3, [pc, #288]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8004abc:	4b46      	ldr	r3, [pc, #280]	@ (8004bd8 <HAL_RCC_DeInit+0x194>)
 8004abe:	4a47      	ldr	r2, [pc, #284]	@ (8004bdc <HAL_RCC_DeInit+0x198>)
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ac2:	4b47      	ldr	r3, [pc, #284]	@ (8004be0 <HAL_RCC_DeInit+0x19c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc feac 	bl	8001824 <HAL_InitTick>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e079      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004ad6:	f7fc fee7 	bl	80018a8 <HAL_GetTick>
 8004ada:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004adc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fc fedd 	bl	80018a8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e066      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004afc:	4b35      	ldr	r3, [pc, #212]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f0      	bne.n	8004aea <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8004b08:	4b32      	ldr	r3, [pc, #200]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004b0e:	f7fc fecb 	bl	80018a8 <HAL_GetTick>
 8004b12:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8004b14:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b1a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004b1e:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b22:	f7fc fec1 	bl	80018a8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b64      	cmp	r3, #100	@ 0x64
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e04a      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8004b34:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004b40:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a23      	ldr	r2, [pc, #140]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

#if defined(RCC_PLL2_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004b4c:	f7fc feac 	bl	80018a8 <HAL_GetTick>
 8004b50:	6078      	str	r0, [r7, #4]

  /* Clear PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8004b52:	4b20      	ldr	r3, [pc, #128]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b5c:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_DeInit+0x12e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b60:	f7fc fea2 	bl	80018a8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_DeInit+0x12e>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e02b      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 8004b72:	4b18      	ldr	r3, [pc, #96]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_DeInit+0x11c>
  }
#endif /* RCC_PLL2_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8004b7e:	f7fc fe93 	bl	80018a8 <HAL_GetTick>
 8004b82:	6078      	str	r0, [r7, #4]

  /* Clear PLL3ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8004b84:	4b13      	ldr	r3, [pc, #76]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a12      	ldr	r2, [pc, #72]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_DeInit+0x160>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b92:	f7fc fe89 	bl	80018a8 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b64      	cmp	r3, #100	@ 0x64
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_DeInit+0x160>
    {
      return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e012      	b.n	8004bca <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_DeInit+0x14e>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_CFGR2_PREDIV1)
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8004bb0:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004bb6:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bba:	4a06      	ldr	r2, [pc, #24]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004bbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bc0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <HAL_RCC_DeInit+0x190>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	20000000 	.word	0x20000000
 8004bdc:	007a1200 	.word	0x007a1200
 8004be0:	20000004 	.word	0x20000004

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e304      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 8087 	beq.w	8004d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c04:	4b92      	ldr	r3, [pc, #584]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d00c      	beq.n	8004c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c10:	4b8f      	ldr	r3, [pc, #572]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 030c 	and.w	r3, r3, #12
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d112      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5e>
 8004c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c28:	d10b      	bne.n	8004c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2a:	4b89      	ldr	r3, [pc, #548]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d06c      	beq.n	8004d10 <HAL_RCC_OscConfig+0x12c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d168      	bne.n	8004d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e2de      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCC_OscConfig+0x76>
 8004c4c:	4b80      	ldr	r3, [pc, #512]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a7f      	ldr	r2, [pc, #508]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e02e      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x98>
 8004c62:	4b7b      	ldr	r3, [pc, #492]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7a      	ldr	r2, [pc, #488]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	4b78      	ldr	r3, [pc, #480]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a77      	ldr	r2, [pc, #476]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	e01d      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0xbc>
 8004c86:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a71      	ldr	r2, [pc, #452]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	4b6f      	ldr	r3, [pc, #444]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6e      	ldr	r2, [pc, #440]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0xd4>
 8004ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b68      	ldr	r3, [pc, #416]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a67      	ldr	r2, [pc, #412]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fc fdf2 	bl	80018a8 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fc fdee 	bl	80018a8 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	@ 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e292      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b5d      	ldr	r3, [pc, #372]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xe4>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fc fdde 	bl	80018a8 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf0:	f7fc fdda 	bl	80018a8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e27e      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	4b53      	ldr	r3, [pc, #332]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x10c>
 8004d0e:	e000      	b.n	8004d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d063      	beq.n	8004de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 030c 	and.w	r3, r3, #12
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00b      	beq.n	8004d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d2a:	4b49      	ldr	r3, [pc, #292]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b08      	cmp	r3, #8
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x18c>
 8004d36:	4b46      	ldr	r3, [pc, #280]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d116      	bne.n	8004d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	4b43      	ldr	r3, [pc, #268]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_RCC_OscConfig+0x176>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d001      	beq.n	8004d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e252      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4939      	ldr	r1, [pc, #228]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d6e:	e03a      	b.n	8004de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d78:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <HAL_RCC_OscConfig+0x270>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fc fd93 	bl	80018a8 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d86:	f7fc fd8f 	bl	80018a8 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e233      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d98:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da4:	4b2a      	ldr	r3, [pc, #168]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4927      	ldr	r1, [pc, #156]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	600b      	str	r3, [r1, #0]
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	4b26      	ldr	r3, [pc, #152]	@ (8004e54 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc0:	f7fc fd72 	bl	80018a8 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc8:	f7fc fd6e 	bl	80018a8 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e212      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dda:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d03a      	beq.n	8004e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d019      	beq.n	8004e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dfa:	4b17      	ldr	r3, [pc, #92]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e00:	f7fc fd52 	bl	80018a8 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e08:	f7fc fd4e 	bl	80018a8 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1f2      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e50 <HAL_RCC_OscConfig+0x26c>)
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f0      	beq.n	8004e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e26:	2001      	movs	r0, #1
 8004e28:	f000 fc02 	bl	8005630 <RCC_Delay>
 8004e2c:	e01c      	b.n	8004e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e58 <HAL_RCC_OscConfig+0x274>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e34:	f7fc fd38 	bl	80018a8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e3a:	e00f      	b.n	8004e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e3c:	f7fc fd34 	bl	80018a8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d908      	bls.n	8004e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e1d8      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	42420000 	.word	0x42420000
 8004e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e5c:	4b9b      	ldr	r3, [pc, #620]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e9      	bne.n	8004e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a6 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e76:	2300      	movs	r3, #0
 8004e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e7a:	4b94      	ldr	r3, [pc, #592]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e86:	4b91      	ldr	r3, [pc, #580]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	4a90      	ldr	r2, [pc, #576]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e90:	61d3      	str	r3, [r2, #28]
 8004e92:	4b8e      	ldr	r3, [pc, #568]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e9a:	60bb      	str	r3, [r7, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d118      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a87      	ldr	r2, [pc, #540]	@ (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eba:	f7fc fcf5 	bl	80018a8 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec2:	f7fc fcf1 	bl	80018a8 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b64      	cmp	r3, #100	@ 0x64
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e195      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80050d0 <HAL_RCC_OscConfig+0x4ec>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d106      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x312>
 8004ee8:	4b78      	ldr	r3, [pc, #480]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	4a77      	ldr	r2, [pc, #476]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6213      	str	r3, [r2, #32]
 8004ef4:	e02d      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x334>
 8004efe:	4b73      	ldr	r3, [pc, #460]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	4a72      	ldr	r2, [pc, #456]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6213      	str	r3, [r2, #32]
 8004f0a:	4b70      	ldr	r3, [pc, #448]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a6f      	ldr	r2, [pc, #444]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f10:	f023 0304 	bic.w	r3, r3, #4
 8004f14:	6213      	str	r3, [r2, #32]
 8004f16:	e01c      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCC_OscConfig+0x356>
 8004f20:	4b6a      	ldr	r3, [pc, #424]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4a69      	ldr	r2, [pc, #420]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6213      	str	r3, [r2, #32]
 8004f2c:	4b67      	ldr	r3, [pc, #412]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	4a66      	ldr	r2, [pc, #408]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6213      	str	r3, [r2, #32]
 8004f38:	e00b      	b.n	8004f52 <HAL_RCC_OscConfig+0x36e>
 8004f3a:	4b64      	ldr	r3, [pc, #400]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	4a63      	ldr	r2, [pc, #396]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6213      	str	r3, [r2, #32]
 8004f46:	4b61      	ldr	r3, [pc, #388]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	4a60      	ldr	r2, [pc, #384]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fca5 	bl	80018a8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fc fca1 	bl	80018a8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e143      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f78:	4b54      	ldr	r3, [pc, #336]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ee      	beq.n	8004f62 <HAL_RCC_OscConfig+0x37e>
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fc fc8f 	bl	80018a8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fc fc8b 	bl	80018a8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e12d      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa4:	4b49      	ldr	r3, [pc, #292]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4b45      	ldr	r3, [pc, #276]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	4a44      	ldr	r2, [pc, #272]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fc0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 808c 	beq.w	80050e4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004fda:	4b3c      	ldr	r3, [pc, #240]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d108      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8004fe6:	4b39      	ldr	r3, [pc, #228]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8004fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e103      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d14e      	bne.n	800509e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005000:	4b32      	ldr	r3, [pc, #200]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800500c:	4b2f      	ldr	r3, [pc, #188]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e0ef      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8005020:	4b2c      	ldr	r3, [pc, #176]	@ (80050d4 <HAL_RCC_OscConfig+0x4f0>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005026:	f7fc fc3f 	bl	80018a8 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502e:	f7fc fc3b 	bl	80018a8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b64      	cmp	r3, #100	@ 0x64
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0df      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8005040:	4b22      	ldr	r3, [pc, #136]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 800504c:	4b1f      	ldr	r3, [pc, #124]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005058:	491c      	ldr	r1, [pc, #112]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 800505a:	4313      	orrs	r3, r2
 800505c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	4918      	ldr	r1, [pc, #96]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 800506c:	4313      	orrs	r3, r2
 800506e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8005070:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <HAL_RCC_OscConfig+0x4f0>)
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005076:	f7fc fc17 	bl	80018a8 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800507e:	f7fc fc13 	bl	80018a8 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b64      	cmp	r3, #100	@ 0x64
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e0b7      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8005090:	4b0e      	ldr	r3, [pc, #56]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x49a>
 800509c:	e022      	b.n	80050e4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a2:	4a0a      	ldr	r2, [pc, #40]	@ (80050cc <HAL_RCC_OscConfig+0x4e8>)
 80050a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80050aa:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <HAL_RCC_OscConfig+0x4f0>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b0:	f7fc fbfa 	bl	80018a8 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80050b6:	e00f      	b.n	80050d8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050b8:	f7fc fbf6 	bl	80018a8 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	@ 0x64
 80050c4:	d908      	bls.n	80050d8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e09a      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
 80050d4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80050d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e9      	bne.n	80050b8 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8088 	beq.w	80051fe <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050ee:	4b46      	ldr	r3, [pc, #280]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 030c 	and.w	r3, r3, #12
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d068      	beq.n	80051cc <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d14d      	bne.n	800519e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005102:	4b42      	ldr	r3, [pc, #264]	@ (800520c <HAL_RCC_OscConfig+0x628>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fc fbce 	bl	80018a8 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fc fbca 	bl	80018a8 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e06e      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005122:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005136:	d10f      	bne.n	8005158 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8005138:	4b33      	ldr	r3, [pc, #204]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 800513a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4931      	ldr	r1, [pc, #196]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 8005142:	4313      	orrs	r3, r2
 8005144:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005146:	4b30      	ldr	r3, [pc, #192]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 8005148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514a:	f023 020f 	bic.w	r2, r3, #15
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	492d      	ldr	r1, [pc, #180]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 8005154:	4313      	orrs	r3, r2
 8005156:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005158:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	430b      	orrs	r3, r1
 800516a:	4927      	ldr	r1, [pc, #156]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 800516c:	4313      	orrs	r3, r2
 800516e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005170:	4b26      	ldr	r3, [pc, #152]	@ (800520c <HAL_RCC_OscConfig+0x628>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005176:	f7fc fb97 	bl	80018a8 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517e:	f7fc fb93 	bl	80018a8 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e037      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x59a>
 800519c:	e02f      	b.n	80051fe <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519e:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RCC_OscConfig+0x628>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fc fb80 	bl	80018a8 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ac:	f7fc fb7c 	bl	80018a8 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e020      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051be:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f0      	bne.n	80051ac <HAL_RCC_OscConfig+0x5c8>
 80051ca:	e018      	b.n	80051fe <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e013      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <HAL_RCC_OscConfig+0x624>)
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d106      	bne.n	80051fa <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40021000 	.word	0x40021000
 800520c:	42420060 	.word	0x42420060

08005210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e0d0      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005224:	4b6a      	ldr	r3, [pc, #424]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d910      	bls.n	8005254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005232:	4b67      	ldr	r3, [pc, #412]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 0207 	bic.w	r2, r3, #7
 800523a:	4965      	ldr	r1, [pc, #404]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b63      	ldr	r3, [pc, #396]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0b8      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d020      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800526c:	4b59      	ldr	r3, [pc, #356]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	4a58      	ldr	r2, [pc, #352]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005284:	4b53      	ldr	r3, [pc, #332]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800528e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005290:	4b50      	ldr	r3, [pc, #320]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	494d      	ldr	r1, [pc, #308]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d040      	beq.n	8005330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052b6:	4b47      	ldr	r3, [pc, #284]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d115      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ce:	4b41      	ldr	r3, [pc, #260]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e073      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052de:	4b3d      	ldr	r3, [pc, #244]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06b      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052ee:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 0203 	bic.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4936      	ldr	r1, [pc, #216]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005300:	f7fc fad2 	bl	80018a8 <HAL_GetTick>
 8005304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005306:	e00a      	b.n	800531e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005308:	f7fc face 	bl	80018a8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e053      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531e:	4b2d      	ldr	r3, [pc, #180]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 020c 	and.w	r2, r3, #12
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	429a      	cmp	r2, r3
 800532e:	d1eb      	bne.n	8005308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005330:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d210      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b24      	ldr	r3, [pc, #144]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 0207 	bic.w	r2, r3, #7
 8005346:	4922      	ldr	r1, [pc, #136]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b20      	ldr	r3, [pc, #128]	@ (80053d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e032      	b.n	80053c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800536c:	4b19      	ldr	r3, [pc, #100]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	4916      	ldr	r1, [pc, #88]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	4313      	orrs	r3, r2
 800537c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800538a:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	490e      	ldr	r1, [pc, #56]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 800539a:	4313      	orrs	r3, r2
 800539c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800539e:	f000 f859 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 80053a2:	4602      	mov	r2, r0
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 030f 	and.w	r3, r3, #15
 80053ae:	490a      	ldr	r1, [pc, #40]	@ (80053d8 <HAL_RCC_ClockConfig+0x1c8>)
 80053b0:	5ccb      	ldrb	r3, [r1, r3]
 80053b2:	fa22 f303 	lsr.w	r3, r2, r3
 80053b6:	4a09      	ldr	r2, [pc, #36]	@ (80053dc <HAL_RCC_ClockConfig+0x1cc>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <HAL_RCC_ClockConfig+0x1d0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fc fa30 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40022000 	.word	0x40022000
 80053d4:	40021000 	.word	0x40021000
 80053d8:	080162d0 	.word	0x080162d0
 80053dc:	20000000 	.word	0x20000000
 80053e0:	20000004 	.word	0x20000004

080053e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	@ 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80053fe:	2302      	movs	r3, #2
 8005400:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005402:	2303      	movs	r3, #3
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800540a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800540e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8005410:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <HAL_RCC_MCOConfig+0x68>)
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	4a0d      	ldr	r2, [pc, #52]	@ (800544c <HAL_RCC_MCOConfig+0x68>)
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	6193      	str	r3, [r2, #24]
 800541c:	4b0b      	ldr	r3, [pc, #44]	@ (800544c <HAL_RCC_MCOConfig+0x68>)
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8005428:	f107 0318 	add.w	r3, r7, #24
 800542c:	4619      	mov	r1, r3
 800542e:	4808      	ldr	r0, [pc, #32]	@ (8005450 <HAL_RCC_MCOConfig+0x6c>)
 8005430:	f7fe f824 	bl	800347c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8005434:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_MCOConfig+0x68>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800543c:	4903      	ldr	r1, [pc, #12]	@ (800544c <HAL_RCC_MCOConfig+0x68>)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
}
 8005444:	bf00      	nop
 8005446:	3728      	adds	r7, #40	@ 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	40010800 	.word	0x40010800

08005454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b08e      	sub	sp, #56	@ 0x38
 800545a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005464:	2300      	movs	r3, #0
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005478:	4b4e      	ldr	r3, [pc, #312]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005480:	f003 030c 	and.w	r3, r3, #12
 8005484:	2b04      	cmp	r3, #4
 8005486:	d002      	beq.n	800548e <HAL_RCC_GetSysClockFreq+0x3a>
 8005488:	2b08      	cmp	r3, #8
 800548a:	d003      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x40>
 800548c:	e089      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800548e:	4b4a      	ldr	r3, [pc, #296]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005490:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005492:	e089      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	0c9b      	lsrs	r3, r3, #18
 8005498:	f003 020f 	and.w	r2, r3, #15
 800549c:	4b47      	ldr	r3, [pc, #284]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x168>)
 800549e:	5c9b      	ldrb	r3, [r3, r2]
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d072      	beq.n	8005592 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80054ac:	4b41      	ldr	r3, [pc, #260]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b0:	f003 020f 	and.w	r2, r3, #15
 80054b4:	4b42      	ldr	r3, [pc, #264]	@ (80055c0 <HAL_RCC_GetSysClockFreq+0x16c>)
 80054b6:	5c9b      	ldrb	r3, [r3, r2]
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80054ba:	4b3e      	ldr	r3, [pc, #248]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d053      	beq.n	800556e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80054c6:	4b3b      	ldr	r3, [pc, #236]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	3301      	adds	r3, #1
 80054d2:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80054d4:	4b37      	ldr	r3, [pc, #220]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	3302      	adds	r3, #2
 80054e0:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	2200      	movs	r2, #0
 80054e6:	469a      	mov	sl, r3
 80054e8:	4693      	mov	fp, r2
 80054ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ec:	2200      	movs	r2, #0
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	617a      	str	r2, [r7, #20]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	fb03 f20b 	mul.w	r2, r3, fp
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fb0a f303 	mul.w	r3, sl, r3
 80054fe:	4413      	add	r3, r2
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	fbaa 0102 	umull	r0, r1, sl, r2
 8005506:	440b      	add	r3, r1
 8005508:	4619      	mov	r1, r3
 800550a:	4b2b      	ldr	r3, [pc, #172]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x164>)
 800550c:	fb03 f201 	mul.w	r2, r3, r1
 8005510:	2300      	movs	r3, #0
 8005512:	fb00 f303 	mul.w	r3, r0, r3
 8005516:	4413      	add	r3, r2
 8005518:	4a27      	ldr	r2, [pc, #156]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x164>)
 800551a:	fba0 4502 	umull	r4, r5, r0, r2
 800551e:	442b      	add	r3, r5
 8005520:	461d      	mov	r5, r3
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2200      	movs	r2, #0
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	60fa      	str	r2, [r7, #12]
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	2200      	movs	r2, #0
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	607a      	str	r2, [r7, #4]
 8005532:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005536:	460b      	mov	r3, r1
 8005538:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800553c:	4652      	mov	r2, sl
 800553e:	fb02 f203 	mul.w	r2, r2, r3
 8005542:	465b      	mov	r3, fp
 8005544:	4684      	mov	ip, r0
 8005546:	fb0c f303 	mul.w	r3, ip, r3
 800554a:	4413      	add	r3, r2
 800554c:	4602      	mov	r2, r0
 800554e:	4651      	mov	r1, sl
 8005550:	fba2 8901 	umull	r8, r9, r2, r1
 8005554:	444b      	add	r3, r9
 8005556:	4699      	mov	r9, r3
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fa fe68 	bl	8000234 <__aeabi_uldivmod>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4613      	mov	r3, r2
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
 800556c:	e007      	b.n	800557e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	4a11      	ldr	r2, [pc, #68]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005572:	fb03 f202 	mul.w	r2, r3, r2
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	fbb2 f3f3 	udiv	r3, r2, r3
 800557c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <HAL_RCC_GetSysClockFreq+0x168>)
 8005580:	7b5b      	ldrb	r3, [r3, #13]
 8005582:	461a      	mov	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800558a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005590:	e004      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	4a0b      	ldr	r2, [pc, #44]	@ (80055c4 <HAL_RCC_GetSysClockFreq+0x170>)
 8005596:	fb02 f303 	mul.w	r3, r2, r3
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055a0:	e002      	b.n	80055a8 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055a2:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <HAL_RCC_GetSysClockFreq+0x174>)
 80055a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3738      	adds	r7, #56	@ 0x38
 80055ae:	46bd      	mov	sp, r7
 80055b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055b4:	40021000 	.word	0x40021000
 80055b8:	017d7840 	.word	0x017d7840
 80055bc:	080162e8 	.word	0x080162e8
 80055c0:	080162f8 	.word	0x080162f8
 80055c4:	003d0900 	.word	0x003d0900
 80055c8:	007a1200 	.word	0x007a1200

080055cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055d0:	4b02      	ldr	r3, [pc, #8]	@ (80055dc <HAL_RCC_GetHCLKFreq+0x10>)
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	20000000 	.word	0x20000000

080055e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055e4:	f7ff fff2 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b05      	ldr	r3, [pc, #20]	@ (8005600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	4903      	ldr	r1, [pc, #12]	@ (8005604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f6:	5ccb      	ldrb	r3, [r1, r3]
 80055f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40021000 	.word	0x40021000
 8005604:	080162e0 	.word	0x080162e0

08005608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800560c:	f7ff ffde 	bl	80055cc <HAL_RCC_GetHCLKFreq>
 8005610:	4602      	mov	r2, r0
 8005612:	4b05      	ldr	r3, [pc, #20]	@ (8005628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	0adb      	lsrs	r3, r3, #11
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	4903      	ldr	r1, [pc, #12]	@ (800562c <HAL_RCC_GetPCLK2Freq+0x24>)
 800561e:	5ccb      	ldrb	r3, [r1, r3]
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	080162e0 	.word	0x080162e0

08005630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005638:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <RCC_Delay+0x34>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0a      	ldr	r2, [pc, #40]	@ (8005668 <RCC_Delay+0x38>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	0a5b      	lsrs	r3, r3, #9
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800564c:	bf00      	nop
  }
  while (Delay --);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1e5a      	subs	r2, r3, #1
 8005652:	60fa      	str	r2, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f9      	bne.n	800564c <RCC_Delay+0x1c>
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	20000000 	.word	0x20000000
 8005668:	10624dd3 	.word	0x10624dd3

0800566c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	d07d      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 800568c:	2300      	movs	r3, #0
 800568e:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005690:	4b8b      	ldr	r3, [pc, #556]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10d      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b88      	ldr	r3, [pc, #544]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	4a87      	ldr	r2, [pc, #540]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056a6:	61d3      	str	r3, [r2, #28]
 80056a8:	4b85      	ldr	r3, [pc, #532]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056b4:	2301      	movs	r3, #1
 80056b6:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b82      	ldr	r3, [pc, #520]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d118      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c4:	4b7f      	ldr	r3, [pc, #508]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a7e      	ldr	r2, [pc, #504]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d0:	f7fc f8ea 	bl	80018a8 <HAL_GetTick>
 80056d4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	e008      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fc f8e6 	bl	80018a8 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e0e5      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b76      	ldr	r3, [pc, #472]	@ (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f6:	4b72      	ldr	r3, [pc, #456]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02e      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	429a      	cmp	r2, r3
 8005712:	d027      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005714:	4b6a      	ldr	r3, [pc, #424]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800571e:	4b6a      	ldr	r3, [pc, #424]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005724:	4b68      	ldr	r3, [pc, #416]	@ (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800572a:	4a65      	ldr	r2, [pc, #404]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d014      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573a:	f7fc f8b5 	bl	80018a8 <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005740:	e00a      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005742:	f7fc f8b1 	bl	80018a8 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e0ae      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005758:	4b59      	ldr	r3, [pc, #356]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0ee      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005764:	4b56      	ldr	r3, [pc, #344]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4953      	ldr	r1, [pc, #332]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005772:	4313      	orrs	r3, r2
 8005774:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005776:	7efb      	ldrb	r3, [r7, #27]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d105      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800577c:	4b50      	ldr	r3, [pc, #320]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800577e:	69db      	ldr	r3, [r3, #28]
 8005780:	4a4f      	ldr	r2, [pc, #316]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005794:	4b4a      	ldr	r3, [pc, #296]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4947      	ldr	r1, [pc, #284]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0304 	and.w	r3, r3, #4
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d008      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80057b2:	4b43      	ldr	r3, [pc, #268]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	4940      	ldr	r1, [pc, #256]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d008      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80057d0:	4b3b      	ldr	r3, [pc, #236]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	4938      	ldr	r1, [pc, #224]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80057e2:	4b37      	ldr	r3, [pc, #220]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80057ee:	4b34      	ldr	r3, [pc, #208]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80057f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 80057fa:	2301      	movs	r3, #1
 80057fc:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d148      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8005804:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d138      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005810:	4b2b      	ldr	r3, [pc, #172]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800581c:	4b28      	ldr	r3, [pc, #160]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8005828:	429a      	cmp	r2, r3
 800582a:	d001      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e042      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8005830:	4b23      	ldr	r3, [pc, #140]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	4920      	ldr	r1, [pc, #128]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800583e:	4313      	orrs	r3, r2
 8005840:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8005842:	4b1f      	ldr	r3, [pc, #124]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	f423 4270 	bic.w	r2, r3, #61440	@ 0xf000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	491c      	ldr	r1, [pc, #112]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005850:	4313      	orrs	r3, r2
 8005852:	62cb      	str	r3, [r1, #44]	@ 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8005854:	4b1d      	ldr	r3, [pc, #116]	@ (80058cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800585a:	f7fc f825 	bl	80018a8 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005862:	f7fc f821 	bl	80018a8 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b64      	cmp	r3, #100	@ 0x64
 800586e:	d901      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e020      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8005880:	e009      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8005882:	4b0f      	ldr	r3, [pc, #60]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005886:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	429a      	cmp	r2, r3
 8005890:	d001      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e00f      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0310 	and.w	r3, r3, #16
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	4904      	ldr	r1, [pc, #16]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3720      	adds	r7, #32
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
 80058c4:	40007000 	.word	0x40007000
 80058c8:	42420440 	.word	0x42420440
 80058cc:	42420070 	.word	0x42420070

080058d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e042      	b.n	8005968 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d106      	bne.n	80058fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fb fb02 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2224      	movs	r2, #36	@ 0x24
 8005900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005912:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fe03 	bl	8006520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005928:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005938:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005948:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	@ 0x28
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b20      	cmp	r3, #32
 800598e:	d16d      	bne.n	8005a6c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Transmit+0x2c>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e066      	b.n	8005a6e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2221      	movs	r2, #33	@ 0x21
 80059aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ae:	f7fb ff7b 	bl	80018a8 <HAL_GetTick>
 80059b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Transmit+0x6c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059e4:	e02a      	b.n	8005a3c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2180      	movs	r1, #128	@ 0x80
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fb8b 	bl	800610c <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e036      	b.n	8005a6e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e007      	b.n	8005a2e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1cf      	bne.n	80059e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2140      	movs	r1, #64	@ 0x40
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fb5b 	bl	800610c <UART_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b08a      	sub	sp, #40	@ 0x28
 8005a7a:	af02      	add	r7, sp, #8
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d17c      	bne.n	8005b90 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_UART_Receive+0x2c>
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e075      	b.n	8005b92 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2222      	movs	r2, #34	@ 0x22
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aba:	f7fb fef5 	bl	80018a8 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88fa      	ldrh	r2, [r7, #6]
 8005ac4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad4:	d108      	bne.n	8005ae8 <HAL_UART_Receive+0x72>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e003      	b.n	8005af0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005af0:	e043      	b.n	8005b7a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2120      	movs	r1, #32
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fb05 	bl	800610c <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d001      	beq.n	8005b0c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e042      	b.n	8005b92 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10c      	bne.n	8005b2c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	3302      	adds	r3, #2
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e01f      	b.n	8005b6c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b34:	d007      	beq.n	8005b46 <HAL_UART_Receive+0xd0>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <HAL_UART_Receive+0xde>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e008      	b.n	8005b66 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1b6      	bne.n	8005af2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e000      	b.n	8005b92 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b90:	2302      	movs	r3, #2
  }
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3720      	adds	r7, #32
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b0ba      	sub	sp, #232	@ 0xe8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10f      	bne.n	8005c02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f003 0320 	and.w	r3, r3, #32
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <HAL_UART_IRQHandler+0x66>
 8005bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fbd1 	bl	80063a2 <UART_Receive_IT>
      return;
 8005c00:	e25b      	b.n	80060ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80de 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x22c>
 8005c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 80d1 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00b      	beq.n	8005c4a <HAL_UART_IRQHandler+0xae>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c42:	f043 0201 	orr.w	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00b      	beq.n	8005c6e <HAL_UART_IRQHandler+0xd2>
 8005c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f043 0202 	orr.w	r2, r3, #2
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <HAL_UART_IRQHandler+0xf6>
 8005c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	f043 0204 	orr.w	r2, r3, #4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d011      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x126>
 8005c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cba:	f043 0208 	orr.w	r2, r3, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 81f2 	beq.w	80060b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_UART_IRQHandler+0x14e>
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb5c 	bl	80063a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf14      	ite	ne
 8005cf8:	2301      	movne	r3, #1
 8005cfa:	2300      	moveq	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	f003 0308 	and.w	r3, r3, #8
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <HAL_UART_IRQHandler+0x17a>
 8005d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d04f      	beq.n	8005db6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa66 	bl	80061e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d041      	beq.n	8005dae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3314      	adds	r3, #20
 8005d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3314      	adds	r3, #20
 8005d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d66:	e841 2300 	strex	r3, r2, [r1]
 8005d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1d9      	bne.n	8005d2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d013      	beq.n	8005da6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d82:	4a7e      	ldr	r2, [pc, #504]	@ (8005f7c <HAL_UART_IRQHandler+0x3e0>)
 8005d84:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fb ff1c 	bl	8001bc8 <HAL_DMA_Abort_IT>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005da0:	4610      	mov	r0, r2
 8005da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e00e      	b.n	8005dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f99c 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e00a      	b.n	8005dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f998 	bl	80060e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db4:	e006      	b.n	8005dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f994 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005dc2:	e175      	b.n	80060b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	bf00      	nop
    return;
 8005dc6:	e173      	b.n	80060b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	f040 814f 	bne.w	8006070 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 8148 	beq.w	8006070 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8141 	beq.w	8006070 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60bb      	str	r3, [r7, #8]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	60bb      	str	r3, [r7, #8]
 8005e02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80b6 	beq.w	8005f80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8145 	beq.w	80060b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e32:	429a      	cmp	r2, r3
 8005e34:	f080 813e 	bcs.w	80060b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b20      	cmp	r3, #32
 8005e48:	f000 8088 	beq.w	8005f5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e5a:	e853 3f00 	ldrex	r3, [r3]
 8005e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e66:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e78:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e84:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e88:	e841 2300 	strex	r3, r2, [r1]
 8005e8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1d9      	bne.n	8005e4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3314      	adds	r3, #20
 8005e9e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005eaa:	f023 0301 	bic.w	r3, r3, #1
 8005eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ebc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ec0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ec8:	e841 2300 	strex	r3, r2, [r1]
 8005ecc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ece:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e1      	bne.n	8005e98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005edc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ede:	e853 3f00 	ldrex	r3, [r3]
 8005ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ee4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ef8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005efa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005efe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f00:	e841 2300 	strex	r3, r2, [r1]
 8005f04:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e3      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f2c:	f023 0310 	bic.w	r3, r3, #16
 8005f30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f40:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f46:	e841 2300 	strex	r3, r2, [r1]
 8005f4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1e3      	bne.n	8005f1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fb fdfb 	bl	8001b52 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f8bf 	bl	80060f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f78:	e09c      	b.n	80060b4 <HAL_UART_IRQHandler+0x518>
 8005f7a:	bf00      	nop
 8005f7c:	080062ad 	.word	0x080062ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 808e 	beq.w	80060b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8089 	beq.w	80060b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb0:	e853 3f00 	ldrex	r3, [r3]
 8005fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fca:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e3      	bne.n	8005fa6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3314      	adds	r3, #20
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	623b      	str	r3, [r7, #32]
   return(result);
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	f023 0301 	bic.w	r3, r3, #1
 8005ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3314      	adds	r3, #20
 8005ffe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006002:	633a      	str	r2, [r7, #48]	@ 0x30
 8006004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e3      	bne.n	8005fde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60fb      	str	r3, [r7, #12]
   return(result);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006048:	61fa      	str	r2, [r7, #28]
 800604a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	e841 2300 	strex	r3, r2, [r1]
 8006054:	617b      	str	r3, [r7, #20]
   return(result);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1e3      	bne.n	8006024 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006062:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f844 	bl	80060f6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800606e:	e023      	b.n	80060b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <HAL_UART_IRQHandler+0x4f4>
 800607c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f923 	bl	80062d4 <UART_Transmit_IT>
    return;
 800608e:	e014      	b.n	80060ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00e      	beq.n	80060ba <HAL_UART_IRQHandler+0x51e>
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f962 	bl	8006372 <UART_EndTransmit_IT>
    return;
 80060ae:	e004      	b.n	80060ba <HAL_UART_IRQHandler+0x51e>
    return;
 80060b0:	bf00      	nop
 80060b2:	e002      	b.n	80060ba <HAL_UART_IRQHandler+0x51e>
      return;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <HAL_UART_IRQHandler+0x51e>
      return;
 80060b8:	bf00      	nop
  }
}
 80060ba:	37e8      	adds	r7, #232	@ 0xe8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr

080060d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d2:	b480      	push	{r7}
 80060d4:	b083      	sub	sp, #12
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060da:	bf00      	nop
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	bc80      	pop	{r7}
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr

080060f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b090      	sub	sp, #64	@ 0x40
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	e050      	b.n	80061c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d04c      	beq.n	80061c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <UART_WaitOnFlagUntilTimeout+0x30>
 800612c:	f7fb fbbc 	bl	80018a8 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006138:	429a      	cmp	r2, r3
 800613a:	d241      	bcs.n	80061c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	330c      	adds	r3, #12
 800615a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800615c:	637a      	str	r2, [r7, #52]	@ 0x34
 800615e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006160:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006164:	e841 2300 	strex	r3, r2, [r1]
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800616a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e5      	bne.n	800613c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	613b      	str	r3, [r7, #16]
   return(result);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 0301 	bic.w	r3, r3, #1
 8006186:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	3314      	adds	r3, #20
 800618e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006190:	623a      	str	r2, [r7, #32]
 8006192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	61bb      	str	r3, [r7, #24]
   return(result);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e5      	bne.n	8006170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e00f      	b.n	80061e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d09f      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3740      	adds	r7, #64	@ 0x40
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b095      	sub	sp, #84	@ 0x54
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061fa:	e853 3f00 	ldrex	r3, [r3]
 80061fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006202:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006206:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	330c      	adds	r3, #12
 800620e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006210:	643a      	str	r2, [r7, #64]	@ 0x40
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e5      	bne.n	80061f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	61fb      	str	r3, [r7, #28]
   return(result);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	f023 0301 	bic.w	r3, r3, #1
 800623a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3314      	adds	r3, #20
 8006242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006244:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800624a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800624c:	e841 2300 	strex	r3, r2, [r1]
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1e5      	bne.n	8006224 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800625c:	2b01      	cmp	r3, #1
 800625e:	d119      	bne.n	8006294 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	330c      	adds	r3, #12
 8006266:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	e853 3f00 	ldrex	r3, [r3]
 800626e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f023 0310 	bic.w	r3, r3, #16
 8006276:	647b      	str	r3, [r7, #68]	@ 0x44
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006280:	61ba      	str	r2, [r7, #24]
 8006282:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006284:	6979      	ldr	r1, [r7, #20]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	e841 2300 	strex	r3, r2, [r1]
 800628c:	613b      	str	r3, [r7, #16]
   return(result);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1e5      	bne.n	8006260 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062a2:	bf00      	nop
 80062a4:	3754      	adds	r7, #84	@ 0x54
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr

080062ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff ff0c 	bl	80060e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b21      	cmp	r3, #33	@ 0x21
 80062e6:	d13e      	bne.n	8006366 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f0:	d114      	bne.n	800631c <UART_Transmit_IT+0x48>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d110      	bne.n	800631c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800630e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	1c9a      	adds	r2, r3, #2
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	621a      	str	r2, [r3, #32]
 800631a:	e008      	b.n	800632e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	1c59      	adds	r1, r3, #1
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6211      	str	r1, [r2, #32]
 8006326:	781a      	ldrb	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29b      	uxth	r3, r3
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4619      	mov	r1, r3
 800633c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006350:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006360:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	e000      	b.n	8006368 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006366:	2302      	movs	r3, #2
  }
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fe94 	bl	80060c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b08c      	sub	sp, #48	@ 0x30
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b22      	cmp	r3, #34	@ 0x22
 80063b4:	f040 80ae 	bne.w	8006514 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c0:	d117      	bne.n	80063f2 <UART_Receive_IT+0x50>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d113      	bne.n	80063f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	1c9a      	adds	r2, r3, #2
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80063f0:	e026      	b.n	8006440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006404:	d007      	beq.n	8006416 <UART_Receive_IT+0x74>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10a      	bne.n	8006424 <UART_Receive_IT+0x82>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	b2da      	uxtb	r2, r3
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e008      	b.n	8006436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	b2db      	uxtb	r3, r3
 800642c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006430:	b2da      	uxtb	r2, r3
 8006432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29b      	uxth	r3, r3
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	4619      	mov	r1, r3
 800644e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006450:	2b00      	cmp	r3, #0
 8006452:	d15d      	bne.n	8006510 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0220 	bic.w	r2, r2, #32
 8006462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695a      	ldr	r2, [r3, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0201 	bic.w	r2, r2, #1
 8006482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	2b01      	cmp	r3, #1
 8006498:	d135      	bne.n	8006506 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	613b      	str	r3, [r7, #16]
   return(result);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f023 0310 	bic.w	r3, r3, #16
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c0:	623a      	str	r2, [r7, #32]
 80064c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	69f9      	ldr	r1, [r7, #28]
 80064c6:	6a3a      	ldr	r2, [r7, #32]
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b10      	cmp	r3, #16
 80064e0:	d10a      	bne.n	80064f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff fdf9 	bl	80060f6 <HAL_UARTEx_RxEventCallback>
 8006504:	e002      	b.n	800650c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff fde3 	bl	80060d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	e002      	b.n	8006516 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	e000      	b.n	8006516 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3730      	adds	r7, #48	@ 0x30
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	431a      	orrs	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800655a:	f023 030c 	bic.w	r3, r3, #12
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6812      	ldr	r2, [r2, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	430b      	orrs	r3, r1
 8006566:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a2c      	ldr	r2, [pc, #176]	@ (8006634 <UART_SetConfig+0x114>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d103      	bne.n	8006590 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7ff f83e 	bl	8005608 <HAL_RCC_GetPCLK2Freq>
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	e002      	b.n	8006596 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7ff f826 	bl	80055e0 <HAL_RCC_GetPCLK1Freq>
 8006594:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009a      	lsls	r2, r3, #2
 80065a0:	441a      	add	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	4a22      	ldr	r2, [pc, #136]	@ (8006638 <UART_SetConfig+0x118>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	0119      	lsls	r1, r3, #4
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4613      	mov	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	009a      	lsls	r2, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80065cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006638 <UART_SetConfig+0x118>)
 80065ce:	fba3 0302 	umull	r0, r3, r3, r2
 80065d2:	095b      	lsrs	r3, r3, #5
 80065d4:	2064      	movs	r0, #100	@ 0x64
 80065d6:	fb00 f303 	mul.w	r3, r0, r3
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	3332      	adds	r3, #50	@ 0x32
 80065e0:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <UART_SetConfig+0x118>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80065ec:	4419      	add	r1, r3
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009a      	lsls	r2, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	fbb2 f2f3 	udiv	r2, r2, r3
 8006604:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <UART_SetConfig+0x118>)
 8006606:	fba3 0302 	umull	r0, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2064      	movs	r0, #100	@ 0x64
 800660e:	fb00 f303 	mul.w	r3, r0, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	@ 0x32
 8006618:	4a07      	ldr	r2, [pc, #28]	@ (8006638 <UART_SetConfig+0x118>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	440a      	add	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800662c:	bf00      	nop
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40013800 	.word	0x40013800
 8006638:	51eb851f 	.word	0x51eb851f

0800663c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800663c:	b084      	sub	sp, #16
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	f107 001c 	add.w	r0, r7, #28
 800664a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 f9de 	bl	8007a1c <USB_CoreReset>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800667c:	b004      	add	sp, #16
 800667e:	4770      	bx	lr

08006680 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	2b02      	cmp	r3, #2
 8006692:	d165      	bne.n	8006760 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4a3e      	ldr	r2, [pc, #248]	@ (8006790 <USB_SetTurnaroundTime+0x110>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d906      	bls.n	80066aa <USB_SetTurnaroundTime+0x2a>
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	4a3d      	ldr	r2, [pc, #244]	@ (8006794 <USB_SetTurnaroundTime+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d202      	bcs.n	80066aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066a4:	230f      	movs	r3, #15
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e05c      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4a39      	ldr	r2, [pc, #228]	@ (8006794 <USB_SetTurnaroundTime+0x114>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d306      	bcc.n	80066c0 <USB_SetTurnaroundTime+0x40>
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	4a38      	ldr	r2, [pc, #224]	@ (8006798 <USB_SetTurnaroundTime+0x118>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d202      	bcs.n	80066c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066ba:	230e      	movs	r3, #14
 80066bc:	617b      	str	r3, [r7, #20]
 80066be:	e051      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4a35      	ldr	r2, [pc, #212]	@ (8006798 <USB_SetTurnaroundTime+0x118>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d306      	bcc.n	80066d6 <USB_SetTurnaroundTime+0x56>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4a34      	ldr	r2, [pc, #208]	@ (800679c <USB_SetTurnaroundTime+0x11c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d202      	bcs.n	80066d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066d0:	230d      	movs	r3, #13
 80066d2:	617b      	str	r3, [r7, #20]
 80066d4:	e046      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	4a30      	ldr	r2, [pc, #192]	@ (800679c <USB_SetTurnaroundTime+0x11c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d306      	bcc.n	80066ec <USB_SetTurnaroundTime+0x6c>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4a2f      	ldr	r2, [pc, #188]	@ (80067a0 <USB_SetTurnaroundTime+0x120>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d802      	bhi.n	80066ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066e6:	230c      	movs	r3, #12
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e03b      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4a2c      	ldr	r2, [pc, #176]	@ (80067a0 <USB_SetTurnaroundTime+0x120>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d906      	bls.n	8006702 <USB_SetTurnaroundTime+0x82>
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	4a2b      	ldr	r2, [pc, #172]	@ (80067a4 <USB_SetTurnaroundTime+0x124>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d802      	bhi.n	8006702 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066fc:	230b      	movs	r3, #11
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e030      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	4a27      	ldr	r2, [pc, #156]	@ (80067a4 <USB_SetTurnaroundTime+0x124>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d906      	bls.n	8006718 <USB_SetTurnaroundTime+0x98>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	4a26      	ldr	r2, [pc, #152]	@ (80067a8 <USB_SetTurnaroundTime+0x128>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d802      	bhi.n	8006718 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006712:	230a      	movs	r3, #10
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	e025      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4a23      	ldr	r2, [pc, #140]	@ (80067a8 <USB_SetTurnaroundTime+0x128>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d906      	bls.n	800672e <USB_SetTurnaroundTime+0xae>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4a22      	ldr	r2, [pc, #136]	@ (80067ac <USB_SetTurnaroundTime+0x12c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d202      	bcs.n	800672e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006728:	2309      	movs	r3, #9
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	e01a      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a1e      	ldr	r2, [pc, #120]	@ (80067ac <USB_SetTurnaroundTime+0x12c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d306      	bcc.n	8006744 <USB_SetTurnaroundTime+0xc4>
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4a1d      	ldr	r2, [pc, #116]	@ (80067b0 <USB_SetTurnaroundTime+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d802      	bhi.n	8006744 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800673e:	2308      	movs	r3, #8
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	e00f      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	4a1a      	ldr	r2, [pc, #104]	@ (80067b0 <USB_SetTurnaroundTime+0x130>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d906      	bls.n	800675a <USB_SetTurnaroundTime+0xda>
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4a19      	ldr	r2, [pc, #100]	@ (80067b4 <USB_SetTurnaroundTime+0x134>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d202      	bcs.n	800675a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006754:	2307      	movs	r3, #7
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e004      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800675a:	2306      	movs	r3, #6
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e001      	b.n	8006764 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006760:	2309      	movs	r3, #9
 8006762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	029b      	lsls	r3, r3, #10
 8006778:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800677c:	431a      	orrs	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	00d8acbf 	.word	0x00d8acbf
 8006794:	00e4e1c0 	.word	0x00e4e1c0
 8006798:	00f42400 	.word	0x00f42400
 800679c:	01067380 	.word	0x01067380
 80067a0:	011a499f 	.word	0x011a499f
 80067a4:	01312cff 	.word	0x01312cff
 80067a8:	014ca43f 	.word	0x014ca43f
 80067ac:	016e3600 	.word	0x016e3600
 80067b0:	01a6ab1f 	.word	0x01a6ab1f
 80067b4:	01e84800 	.word	0x01e84800

080067b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f043 0201 	orr.w	r2, r3, #1
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f023 0201 	bic.w	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d115      	bne.n	8006846 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006826:	2001      	movs	r0, #1
 8006828:	f7fb f848 	bl	80018bc <HAL_Delay>
      ms++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f87a 	bl	800792c <USB_GetMode>
 8006838:	4603      	mov	r3, r0
 800683a:	2b01      	cmp	r3, #1
 800683c:	d01e      	beq.n	800687c <USB_SetCurrentMode+0x84>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2b31      	cmp	r3, #49	@ 0x31
 8006842:	d9f0      	bls.n	8006826 <USB_SetCurrentMode+0x2e>
 8006844:	e01a      	b.n	800687c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d115      	bne.n	8006878 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006858:	2001      	movs	r0, #1
 800685a:	f7fb f82f 	bl	80018bc <HAL_Delay>
      ms++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f861 	bl	800792c <USB_GetMode>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <USB_SetCurrentMode+0x84>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b31      	cmp	r3, #49	@ 0x31
 8006874:	d9f0      	bls.n	8006858 <USB_SetCurrentMode+0x60>
 8006876:	e001      	b.n	800687c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e005      	b.n	8006888 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2b32      	cmp	r3, #50	@ 0x32
 8006880:	d101      	bne.n	8006886 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006890:	b084      	sub	sp, #16
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800689e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068aa:	2300      	movs	r3, #0
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	e009      	b.n	80068c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	3340      	adds	r3, #64	@ 0x40
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	3301      	adds	r3, #1
 80068c2:	613b      	str	r3, [r7, #16]
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b0e      	cmp	r3, #14
 80068c8:	d9f2      	bls.n	80068b0 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068dc:	461a      	mov	r2, r3
 80068de:	2300      	movs	r3, #0
 80068e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80068e2:	2103      	movs	r1, #3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f959 	bl	8006b9c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80068ea:	2110      	movs	r1, #16
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f8f1 	bl	8006ad4 <USB_FlushTxFifo>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <USB_DevInit+0x6c>
  {
    ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f91d 	bl	8006b3c <USB_FlushRxFifo>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <USB_DevInit+0x7c>
  {
    ret = HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006912:	461a      	mov	r2, r3
 8006914:	2300      	movs	r3, #0
 8006916:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800691e:	461a      	mov	r2, r3
 8006920:	2300      	movs	r3, #0
 8006922:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800692a:	461a      	mov	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	e043      	b.n	80069be <USB_DevInit+0x12e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800694c:	d118      	bne.n	8006980 <USB_DevInit+0xf0>
    {
      if (i == 0U)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <USB_DevInit+0xda>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006960:	461a      	mov	r2, r3
 8006962:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	e013      	b.n	8006992 <USB_DevInit+0x102>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006976:	461a      	mov	r2, r3
 8006978:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	e008      	b.n	8006992 <USB_DevInit+0x102>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699e:	461a      	mov	r2, r3
 80069a0:	2300      	movs	r3, #0
 80069a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b0:	461a      	mov	r2, r3
 80069b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	3301      	adds	r3, #1
 80069bc:	613b      	str	r3, [r7, #16]
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	693a      	ldr	r2, [r7, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d3b7      	bcc.n	8006936 <USB_DevInit+0xa6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069c6:	2300      	movs	r3, #0
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	e043      	b.n	8006a54 <USB_DevInit+0x1c4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e2:	d118      	bne.n	8006a16 <USB_DevInit+0x186>
    {
      if (i == 0U)
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <USB_DevInit+0x170>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f6:	461a      	mov	r2, r3
 80069f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e013      	b.n	8006a28 <USB_DevInit+0x198>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e008      	b.n	8006a28 <USB_DevInit+0x198>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a22:	461a      	mov	r2, r3
 8006a24:	2300      	movs	r3, #0
 8006a26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a46:	461a      	mov	r2, r3
 8006a48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	3301      	adds	r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d3b7      	bcc.n	80069cc <USB_DevInit+0x13c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f043 0210 	orr.w	r2, r3, #16
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <USB_DevInit+0x240>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f043 0208 	orr.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d107      	bne.n	8006abe <USB_DevInit+0x22e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ab6:	f043 0304 	orr.w	r3, r3, #4
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aca:	b004      	add	sp, #16
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	803c3800 	.word	0x803c3800

08006ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4a13      	ldr	r2, [pc, #76]	@ (8006b38 <USB_FlushTxFifo+0x64>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d901      	bls.n	8006af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e01b      	b.n	8006b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	daf2      	bge.n	8006ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	019b      	lsls	r3, r3, #6
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a08      	ldr	r2, [pc, #32]	@ (8006b38 <USB_FlushTxFifo+0x64>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d901      	bls.n	8006b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e006      	b.n	8006b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d0f0      	beq.n	8006b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	00030d40 	.word	0x00030d40

08006b3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4a11      	ldr	r2, [pc, #68]	@ (8006b98 <USB_FlushRxFifo+0x5c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e018      	b.n	8006b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	daf2      	bge.n	8006b48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2210      	movs	r2, #16
 8006b6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4a08      	ldr	r2, [pc, #32]	@ (8006b98 <USB_FlushRxFifo+0x5c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e006      	b.n	8006b8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f003 0310 	and.w	r3, r3, #16
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d0f0      	beq.n	8006b6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bc80      	pop	{r7}
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	00030d40 	.word	0x00030d40

08006b9c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 0306 	and.w	r3, r3, #6
 8006be4:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d002      	beq.n	8006bf2 <USB_GetDevSpeed+0x26>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	d102      	bne.n	8006bf8 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	75fb      	strb	r3, [r7, #23]
 8006bf6:	e001      	b.n	8006bfc <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8006bf8:	230f      	movs	r3, #15
 8006bfa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc80      	pop	{r7}
 8006c06:	4770      	bx	lr

08006c08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d13a      	bne.n	8006c9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	f003 030f 	and.w	r3, r3, #15
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f303 	lsl.w	r3, r1, r3
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c42:	4313      	orrs	r3, r2
 8006c44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d155      	bne.n	8006d08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	059b      	lsls	r3, r3, #22
 8006c7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006c80:	4313      	orrs	r3, r2
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e036      	b.n	8006d08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ca0:	69da      	ldr	r2, [r3, #28]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	2101      	movs	r1, #1
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	041b      	lsls	r3, r3, #16
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d11a      	bne.n	8006d08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	791b      	ldrb	r3, [r3, #4]
 8006cec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bc80      	pop	{r7}
 8006d12:	4770      	bx	lr

08006d14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	785b      	ldrb	r3, [r3, #1]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d161      	bne.n	8006df4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d46:	d11f      	bne.n	8006d88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	2101      	movs	r1, #1
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	43db      	mvns	r3, r3
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006da8:	4013      	ands	r3, r2
 8006daa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	68f9      	ldr	r1, [r7, #12]
 8006dc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dcc:	4013      	ands	r3, r2
 8006dce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	0159      	lsls	r1, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	440b      	add	r3, r1
 8006de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dea:	4619      	mov	r1, r3
 8006dec:	4b35      	ldr	r3, [pc, #212]	@ (8006ec4 <USB_DeactivateEndpoint+0x1b0>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	600b      	str	r3, [r1, #0]
 8006df2:	e060      	b.n	8006eb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e0a:	d11f      	bne.n	8006e4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	43db      	mvns	r3, r3
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	2101      	movs	r1, #1
 8006e82:	fa01 f303 	lsl.w	r3, r1, r3
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	68f9      	ldr	r1, [r7, #12]
 8006e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e90:	4013      	ands	r3, r2
 8006e92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	0159      	lsls	r1, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	440b      	add	r3, r1
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <USB_DeactivateEndpoint+0x1b4>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3714      	adds	r7, #20
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bc80      	pop	{r7}
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	ec337800 	.word	0xec337800
 8006ec8:	eff37800 	.word	0xeff37800

08006ecc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	f040 8128 	bne.w	800713a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d132      	bne.n	8006f58 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f0c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f10:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f50:	0cdb      	lsrs	r3, r3, #19
 8006f52:	04db      	lsls	r3, r3, #19
 8006f54:	6113      	str	r3, [r2, #16]
 8006f56:	e092      	b.n	800707e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f72:	0cdb      	lsrs	r3, r3, #19
 8006f74:	04db      	lsls	r3, r3, #19
 8006f76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f96:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f9a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d11a      	bne.n	8006fd8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d903      	bls.n	8006fb6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fd4:	6113      	str	r3, [r2, #16]
 8006fd6:	e01b      	b.n	8007010 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6919      	ldr	r1, [r3, #16]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	440b      	add	r3, r1
 8006ff0:	1e59      	subs	r1, r3, #1
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ffa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ffc:	4b8d      	ldr	r3, [pc, #564]	@ (8007234 <USB_EPStartXfer+0x368>)
 8006ffe:	400b      	ands	r3, r1
 8007000:	6939      	ldr	r1, [r7, #16]
 8007002:	0148      	lsls	r0, r1, #5
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	4401      	add	r1, r0
 8007008:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800700c:	4313      	orrs	r3, r2
 800700e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701c:	691a      	ldr	r2, [r3, #16]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007026:	6939      	ldr	r1, [r7, #16]
 8007028:	0148      	lsls	r0, r1, #5
 800702a:	6979      	ldr	r1, [r7, #20]
 800702c:	4401      	add	r1, r0
 800702e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007032:	4313      	orrs	r3, r2
 8007034:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d11f      	bne.n	800707e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007058:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800705c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	440a      	add	r2, r1
 8007074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007078:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800707c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	440a      	add	r2, r1
 8007094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007098:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800709c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d015      	beq.n	80070d2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8139 	beq.w	8007322 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f303 	lsl.w	r3, r1, r3
 80070c6:	6979      	ldr	r1, [r7, #20]
 80070c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070cc:	4313      	orrs	r3, r2
 80070ce:	634b      	str	r3, [r1, #52]	@ 0x34
 80070d0:	e127      	b.n	8007322 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d110      	bne.n	8007104 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e00f      	b.n	8007124 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	440a      	add	r2, r1
 800711a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800711e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007122:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68d9      	ldr	r1, [r3, #12]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	b29b      	uxth	r3, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f9a5 	bl	8007482 <USB_WritePacket>
 8007138:	e0f3      	b.n	8007322 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007154:	0cdb      	lsrs	r3, r3, #19
 8007156:	04db      	lsls	r3, r3, #19
 8007158:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007174:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007178:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800717c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12f      	bne.n	80071e4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b2:	6939      	ldr	r1, [r7, #16]
 80071b4:	0148      	lsls	r0, r1, #5
 80071b6:	6979      	ldr	r1, [r7, #20]
 80071b8:	4401      	add	r1, r0
 80071ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071be:	4313      	orrs	r3, r2
 80071c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071e0:	6113      	str	r3, [r2, #16]
 80071e2:	e061      	b.n	80072a8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d125      	bne.n	8007238 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f8:	691a      	ldr	r2, [r3, #16]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007202:	6939      	ldr	r1, [r7, #16]
 8007204:	0148      	lsls	r0, r1, #5
 8007206:	6979      	ldr	r1, [r7, #20]
 8007208:	4401      	add	r1, r0
 800720a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800720e:	4313      	orrs	r3, r2
 8007210:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	0151      	lsls	r1, r2, #5
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	440a      	add	r2, r1
 8007228:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800722c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007230:	6113      	str	r3, [r2, #16]
 8007232:	e039      	b.n	80072a8 <USB_EPStartXfer+0x3dc>
 8007234:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4413      	add	r3, r2
 8007242:	1e5a      	subs	r2, r3, #1
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	fbb2 f3f3 	udiv	r3, r2, r3
 800724c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	89fa      	ldrh	r2, [r7, #14]
 8007254:	fb03 f202 	mul.w	r2, r3, r2
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	89fb      	ldrh	r3, [r7, #14]
 800726c:	04d9      	lsls	r1, r3, #19
 800726e:	4b2f      	ldr	r3, [pc, #188]	@ (800732c <USB_EPStartXfer+0x460>)
 8007270:	400b      	ands	r3, r1
 8007272:	6939      	ldr	r1, [r7, #16]
 8007274:	0148      	lsls	r0, r1, #5
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	4401      	add	r1, r0
 800727a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800727e:	4313      	orrs	r3, r2
 8007280:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	691a      	ldr	r2, [r3, #16]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007298:	6939      	ldr	r1, [r7, #16]
 800729a:	0148      	lsls	r0, r1, #5
 800729c:	6979      	ldr	r1, [r7, #20]
 800729e:	4401      	add	r1, r0
 80072a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072a4:	4313      	orrs	r3, r2
 80072a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	791b      	ldrb	r3, [r3, #4]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d128      	bne.n	8007302 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d110      	bne.n	80072e2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	e00f      	b.n	8007302 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007300:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	015a      	lsls	r2, r3, #5
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	0151      	lsls	r1, r2, #5
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	440a      	add	r2, r1
 8007318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007320:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	1ff80000 	.word	0x1ff80000

08007330 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	785b      	ldrb	r3, [r3, #1]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d14a      	bne.n	80073e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007362:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007366:	f040 8086 	bne.w	8007476 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007388:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800738c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073be:	4293      	cmp	r3, r2
 80073c0:	d902      	bls.n	80073c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
          break;
 80073c6:	e056      	b.n	8007476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e0:	d0e7      	beq.n	80073b2 <USB_EPStopXfer+0x82>
 80073e2:	e048      	b.n	8007476 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fc:	d13b      	bne.n	8007476 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800741c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007420:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4413      	add	r3, r2
 800742c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	7812      	ldrb	r2, [r2, #0]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007440:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007444:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	3301      	adds	r3, #1
 800744a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007452:	4293      	cmp	r3, r2
 8007454:	d902      	bls.n	800745c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	75fb      	strb	r3, [r7, #23]
          break;
 800745a:	e00c      	b.n	8007476 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007474:	d0e7      	beq.n	8007446 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	371c      	adds	r7, #28
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr

08007482 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007482:	b480      	push	{r7}
 8007484:	b089      	sub	sp, #36	@ 0x24
 8007486:	af00      	add	r7, sp, #0
 8007488:	60f8      	str	r0, [r7, #12]
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	4611      	mov	r1, r2
 800748e:	461a      	mov	r2, r3
 8007490:	460b      	mov	r3, r1
 8007492:	71fb      	strb	r3, [r7, #7]
 8007494:	4613      	mov	r3, r2
 8007496:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80074a0:	88bb      	ldrh	r3, [r7, #4]
 80074a2:	3303      	adds	r3, #3
 80074a4:	089b      	lsrs	r3, r3, #2
 80074a6:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	e018      	b.n	80074e0 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074ae:	79fb      	ldrb	r3, [r7, #7]
 80074b0:	031a      	lsls	r2, r3, #12
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ba:	461a      	mov	r2, r3
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6013      	str	r3, [r2, #0]
    pSrc++;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3301      	adds	r3, #1
 80074c6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	3301      	adds	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	3301      	adds	r3, #1
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d3e2      	bcc.n	80074ae <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3724      	adds	r7, #36	@ 0x24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bc80      	pop	{r7}
 80074f2:	4770      	bx	lr

080074f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b08b      	sub	sp, #44	@ 0x2c
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	089b      	lsrs	r3, r3, #2
 800750e:	b29b      	uxth	r3, r3
 8007510:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007512:	88fb      	ldrh	r3, [r7, #6]
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800751a:	2300      	movs	r3, #0
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	e014      	b.n	800754a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	601a      	str	r2, [r3, #0]
    pDest++;
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	3301      	adds	r3, #1
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	3301      	adds	r3, #1
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	3301      	adds	r3, #1
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007540:	3301      	adds	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	3301      	adds	r3, #1
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	429a      	cmp	r2, r3
 8007550:	d3e6      	bcc.n	8007520 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007552:	8bfb      	ldrh	r3, [r7, #30]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d01e      	beq.n	8007596 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007562:	461a      	mov	r2, r3
 8007564:	f107 0310 	add.w	r3, r7, #16
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	fa22 f303 	lsr.w	r3, r2, r3
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	701a      	strb	r2, [r3, #0]
      i++;
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	3301      	adds	r3, #1
 8007582:	623b      	str	r3, [r7, #32]
      pDest++;
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	3301      	adds	r3, #1
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800758a:	8bfb      	ldrh	r3, [r7, #30]
 800758c:	3b01      	subs	r3, #1
 800758e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007590:	8bfb      	ldrh	r3, [r7, #30]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1ea      	bne.n	800756c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007598:	4618      	mov	r0, r3
 800759a:	372c      	adds	r7, #44	@ 0x2c
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr

080075a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d12c      	bne.n	8007618 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	db12      	blt.n	80075f6 <USB_EPSetStall+0x54>
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00f      	beq.n	80075f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e02b      	b.n	8007670 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	db12      	blt.n	8007650 <USB_EPSetStall+0xae>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00f      	beq.n	8007650 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800764a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800764e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800766a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800766e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d128      	bne.n	80076ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d003      	beq.n	80076c8 <USB_EPClearStall+0x4c>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	791b      	ldrb	r3, [r3, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d138      	bne.n	800773a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e027      	b.n	800773a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007704:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007708:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d003      	beq.n	800771a <USB_EPClearStall+0x9e>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	791b      	ldrb	r3, [r3, #4]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d10f      	bne.n	800773a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007738:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	bc80      	pop	{r7}
 8007744:	4770      	bx	lr

08007746 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	460b      	mov	r3, r1
 8007750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007764:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007768:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800777a:	68f9      	ldr	r1, [r7, #12]
 800777c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007780:	4313      	orrs	r3, r2
 8007782:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	bc80      	pop	{r7}
 800778e:	4770      	bx	lr

08007790 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077be:	f023 0302 	bic.w	r3, r3, #2
 80077c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr

080077d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fe:	f043 0302 	orr.w	r3, r3, #2
 8007802:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3714      	adds	r7, #20
 800780a:	46bd      	mov	sp, r7
 800780c:	bc80      	pop	{r7}
 800780e:	4770      	bx	lr

08007810 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	4013      	ands	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007828:	68fb      	ldr	r3, [r7, #12]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	0c1b      	lsrs	r3, r3, #16
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007882:	69db      	ldr	r3, [r3, #28]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	4013      	ands	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	b29b      	uxth	r3, r3
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bc80      	pop	{r7}
 8007896:	4770      	bx	lr

08007898 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007898:	b480      	push	{r7}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078a8:	78fb      	ldrb	r3, [r7, #3]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	4013      	ands	r3, r2
 80078c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c6:	68bb      	ldr	r3, [r7, #8]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3714      	adds	r7, #20
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bc80      	pop	{r7}
 80078d0:	4770      	bx	lr

080078d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b087      	sub	sp, #28
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	f003 030f 	and.w	r3, r3, #15
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007902:	01db      	lsls	r3, r3, #7
 8007904:	b2db      	uxtb	r3, r3
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4013      	ands	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007920:	68bb      	ldr	r3, [r7, #8]
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	bc80      	pop	{r7}
 800792a:	4770      	bx	lr

0800792c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	f003 0301 	and.w	r3, r3, #1
}
 800793c:	4618      	mov	r0, r3
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr

08007946 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007960:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007964:	f023 0307 	bic.w	r3, r3, #7
 8007968:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800797c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
	...

0800798c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	333c      	adds	r3, #60	@ 0x3c
 800799e:	3304      	adds	r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a18 <USB_EP0_OutStart+0x8c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d90a      	bls.n	80079c2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079bc:	d101      	bne.n	80079c2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e024      	b.n	8007a0c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c8:	461a      	mov	r2, r3
 80079ca:	2300      	movs	r3, #0
 80079cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80079e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079f0:	f043 0318 	orr.w	r3, r3, #24
 80079f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a08:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bc80      	pop	{r7}
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	4f54300a 	.word	0x4f54300a

08007a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	4a12      	ldr	r2, [pc, #72]	@ (8007a7c <USB_CoreReset+0x60>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d901      	bls.n	8007a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e01b      	b.n	8007a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	daf2      	bge.n	8007a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	f043 0201 	orr.w	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4a08      	ldr	r2, [pc, #32]	@ (8007a7c <USB_CoreReset+0x60>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d901      	bls.n	8007a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e006      	b.n	8007a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d0f0      	beq.n	8007a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bc80      	pop	{r7}
 8007a7a:	4770      	bx	lr
 8007a7c:	00030d40 	.word	0x00030d40

08007a80 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007a86:	4b87      	ldr	r3, [pc, #540]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007a88:	22c0      	movs	r2, #192	@ 0xc0
 8007a8a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007a8c:	4b85      	ldr	r3, [pc, #532]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007a8e:	22a8      	movs	r2, #168	@ 0xa8
 8007a90:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 31;
 8007a92:	4b84      	ldr	r3, [pc, #528]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007a94:	221f      	movs	r2, #31
 8007a96:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 201;
 8007a98:	4b82      	ldr	r3, [pc, #520]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007a9a:	22c9      	movs	r2, #201	@ 0xc9
 8007a9c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007a9e:	4b82      	ldr	r3, [pc, #520]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007aa0:	22ff      	movs	r2, #255	@ 0xff
 8007aa2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007aa4:	4b80      	ldr	r3, [pc, #512]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007aa6:	22ff      	movs	r2, #255	@ 0xff
 8007aa8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007aac:	22ff      	movs	r2, #255	@ 0xff
 8007aae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007ab8:	22c0      	movs	r2, #192	@ 0xc0
 8007aba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007abc:	4b7b      	ldr	r3, [pc, #492]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007abe:	22a8      	movs	r2, #168	@ 0xa8
 8007ac0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 31;
 8007ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007ac4:	221f      	movs	r2, #31
 8007ac6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007ac8:	4b78      	ldr	r3, [pc, #480]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8007ace:	f002 f888 	bl	8009be2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007ad2:	4b74      	ldr	r3, [pc, #464]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	061a      	lsls	r2, r3, #24
 8007ad8:	4b72      	ldr	r3, [pc, #456]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	4b70      	ldr	r3, [pc, #448]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007ae2:	789b      	ldrb	r3, [r3, #2]
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007aea:	78d2      	ldrb	r2, [r2, #3]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	061a      	lsls	r2, r3, #24
 8007af0:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	0619      	lsls	r1, r3, #24
 8007af6:	4b6b      	ldr	r3, [pc, #428]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	4319      	orrs	r1, r3
 8007afe:	4b69      	ldr	r3, [pc, #420]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b00:	789b      	ldrb	r3, [r3, #2]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	430b      	orrs	r3, r1
 8007b06:	4967      	ldr	r1, [pc, #412]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b08:	78c9      	ldrb	r1, [r1, #3]
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b12:	431a      	orrs	r2, r3
 8007b14:	4b63      	ldr	r3, [pc, #396]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	0619      	lsls	r1, r3, #24
 8007b1a:	4b62      	ldr	r3, [pc, #392]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	041b      	lsls	r3, r3, #16
 8007b20:	4319      	orrs	r1, r3
 8007b22:	4b60      	ldr	r3, [pc, #384]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b24:	789b      	ldrb	r3, [r3, #2]
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	495e      	ldr	r1, [pc, #376]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b2c:	78c9      	ldrb	r1, [r1, #3]
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b36:	431a      	orrs	r2, r3
 8007b38:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	0619      	lsls	r1, r3, #24
 8007b3e:	4b59      	ldr	r3, [pc, #356]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	041b      	lsls	r3, r3, #16
 8007b44:	4319      	orrs	r1, r3
 8007b46:	4b57      	ldr	r3, [pc, #348]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b48:	789b      	ldrb	r3, [r3, #2]
 8007b4a:	021b      	lsls	r3, r3, #8
 8007b4c:	430b      	orrs	r3, r1
 8007b4e:	4955      	ldr	r1, [pc, #340]	@ (8007ca4 <MX_LWIP_Init+0x224>)
 8007b50:	78c9      	ldrb	r1, [r1, #3]
 8007b52:	430b      	orrs	r3, r1
 8007b54:	0e1b      	lsrs	r3, r3, #24
 8007b56:	4313      	orrs	r3, r2
 8007b58:	4a55      	ldr	r2, [pc, #340]	@ (8007cb0 <MX_LWIP_Init+0x230>)
 8007b5a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007b5c:	4b52      	ldr	r3, [pc, #328]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	061a      	lsls	r2, r3, #24
 8007b62:	4b51      	ldr	r3, [pc, #324]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b64:	785b      	ldrb	r3, [r3, #1]
 8007b66:	041b      	lsls	r3, r3, #16
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b6c:	789b      	ldrb	r3, [r3, #2]
 8007b6e:	021b      	lsls	r3, r3, #8
 8007b70:	4313      	orrs	r3, r2
 8007b72:	4a4d      	ldr	r2, [pc, #308]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b74:	78d2      	ldrb	r2, [r2, #3]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	061a      	lsls	r2, r3, #24
 8007b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	0619      	lsls	r1, r3, #24
 8007b80:	4b49      	ldr	r3, [pc, #292]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b82:	785b      	ldrb	r3, [r3, #1]
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	4319      	orrs	r1, r3
 8007b88:	4b47      	ldr	r3, [pc, #284]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b8a:	789b      	ldrb	r3, [r3, #2]
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	4945      	ldr	r1, [pc, #276]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007b92:	78c9      	ldrb	r1, [r1, #3]
 8007b94:	430b      	orrs	r3, r1
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b9c:	431a      	orrs	r2, r3
 8007b9e:	4b42      	ldr	r3, [pc, #264]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	0619      	lsls	r1, r3, #24
 8007ba4:	4b40      	ldr	r3, [pc, #256]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	4319      	orrs	r1, r3
 8007bac:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bae:	789b      	ldrb	r3, [r3, #2]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	430b      	orrs	r3, r1
 8007bb4:	493c      	ldr	r1, [pc, #240]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bb6:	78c9      	ldrb	r1, [r1, #3]
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	0a1b      	lsrs	r3, r3, #8
 8007bbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	4b39      	ldr	r3, [pc, #228]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	0619      	lsls	r1, r3, #24
 8007bc8:	4b37      	ldr	r3, [pc, #220]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	4319      	orrs	r1, r3
 8007bd0:	4b35      	ldr	r3, [pc, #212]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bd2:	789b      	ldrb	r3, [r3, #2]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	4933      	ldr	r1, [pc, #204]	@ (8007ca8 <MX_LWIP_Init+0x228>)
 8007bda:	78c9      	ldrb	r1, [r1, #3]
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	0e1b      	lsrs	r3, r3, #24
 8007be0:	4313      	orrs	r3, r2
 8007be2:	4a34      	ldr	r2, [pc, #208]	@ (8007cb4 <MX_LWIP_Init+0x234>)
 8007be4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007be6:	4b31      	ldr	r3, [pc, #196]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	061a      	lsls	r2, r3, #24
 8007bec:	4b2f      	ldr	r3, [pc, #188]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	041b      	lsls	r3, r3, #16
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007bf6:	789b      	ldrb	r3, [r3, #2]
 8007bf8:	021b      	lsls	r3, r3, #8
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007bfe:	78d2      	ldrb	r2, [r2, #3]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	061a      	lsls	r2, r3, #24
 8007c04:	4b29      	ldr	r3, [pc, #164]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	0619      	lsls	r1, r3, #24
 8007c0a:	4b28      	ldr	r3, [pc, #160]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	4319      	orrs	r1, r3
 8007c12:	4b26      	ldr	r3, [pc, #152]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c14:	789b      	ldrb	r3, [r3, #2]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	4924      	ldr	r1, [pc, #144]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c1c:	78c9      	ldrb	r1, [r1, #3]
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c26:	431a      	orrs	r2, r3
 8007c28:	4b20      	ldr	r3, [pc, #128]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	0619      	lsls	r1, r3, #24
 8007c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	4319      	orrs	r1, r3
 8007c36:	4b1d      	ldr	r3, [pc, #116]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	491b      	ldr	r1, [pc, #108]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c40:	78c9      	ldrb	r1, [r1, #3]
 8007c42:	430b      	orrs	r3, r1
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	4b17      	ldr	r3, [pc, #92]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	0619      	lsls	r1, r3, #24
 8007c52:	4b16      	ldr	r3, [pc, #88]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c54:	785b      	ldrb	r3, [r3, #1]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	4319      	orrs	r1, r3
 8007c5a:	4b14      	ldr	r3, [pc, #80]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c5c:	789b      	ldrb	r3, [r3, #2]
 8007c5e:	021b      	lsls	r3, r3, #8
 8007c60:	430b      	orrs	r3, r1
 8007c62:	4912      	ldr	r1, [pc, #72]	@ (8007cac <MX_LWIP_Init+0x22c>)
 8007c64:	78c9      	ldrb	r1, [r1, #3]
 8007c66:	430b      	orrs	r3, r1
 8007c68:	0e1b      	lsrs	r3, r3, #24
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	4a12      	ldr	r2, [pc, #72]	@ (8007cb8 <MX_LWIP_Init+0x238>)
 8007c6e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007c70:	4b12      	ldr	r3, [pc, #72]	@ (8007cbc <MX_LWIP_Init+0x23c>)
 8007c72:	9302      	str	r3, [sp, #8]
 8007c74:	4b12      	ldr	r3, [pc, #72]	@ (8007cc0 <MX_LWIP_Init+0x240>)
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb8 <MX_LWIP_Init+0x238>)
 8007c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8007cb4 <MX_LWIP_Init+0x234>)
 8007c80:	490b      	ldr	r1, [pc, #44]	@ (8007cb0 <MX_LWIP_Init+0x230>)
 8007c82:	4810      	ldr	r0, [pc, #64]	@ (8007cc4 <MX_LWIP_Init+0x244>)
 8007c84:	f002 fbac 	bl	800a3e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007c88:	480e      	ldr	r0, [pc, #56]	@ (8007cc4 <MX_LWIP_Init+0x244>)
 8007c8a:	f002 fc8b 	bl	800a5a4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007c8e:	480d      	ldr	r0, [pc, #52]	@ (8007cc4 <MX_LWIP_Init+0x244>)
 8007c90:	f002 fc96 	bl	800a5c0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007c94:	490c      	ldr	r1, [pc, #48]	@ (8007cc8 <MX_LWIP_Init+0x248>)
 8007c96:	480b      	ldr	r0, [pc, #44]	@ (8007cc4 <MX_LWIP_Init+0x244>)
 8007c98:	f002 fcd6 	bl	800a648 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007c9c:	bf00      	nop
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200002c8 	.word	0x200002c8
 8007ca8:	200002cc 	.word	0x200002cc
 8007cac:	200002d0 	.word	0x200002d0
 8007cb0:	200002bc 	.word	0x200002bc
 8007cb4:	200002c0 	.word	0x200002c0
 8007cb8:	200002c4 	.word	0x200002c4
 8007cbc:	080124bd 	.word	0x080124bd
 8007cc0:	080082dd 	.word	0x080082dd
 8007cc4:	20000288 	.word	0x20000288
 8007cc8:	08008349 	.word	0x08008349

08007ccc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007cd0:	4803      	ldr	r0, [pc, #12]	@ (8007ce0 <MX_LWIP_Process+0x14>)
 8007cd2:	f000 fae3 	bl	800829c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007cd6:	f007 ff37 	bl	800fb48 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007cda:	bf00      	nop
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000288 	.word	0x20000288

08007ce4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08e      	sub	sp, #56	@ 0x38
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]
 8007cf4:	605a      	str	r2, [r3, #4]
 8007cf6:	609a      	str	r2, [r3, #8]
 8007cf8:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8007e70 <HAL_ETH_MspInit+0x18c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	f040 80b0 	bne.w	8007e66 <HAL_ETH_MspInit+0x182>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007d06:	4b5b      	ldr	r3, [pc, #364]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d10:	6153      	str	r3, [r2, #20]
 8007d12:	4b58      	ldr	r3, [pc, #352]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d1a:	623b      	str	r3, [r7, #32]
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	4b55      	ldr	r3, [pc, #340]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	4a54      	ldr	r2, [pc, #336]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d28:	6153      	str	r3, [r2, #20]
 8007d2a:	4b52      	ldr	r3, [pc, #328]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4b4f      	ldr	r3, [pc, #316]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d38:	695b      	ldr	r3, [r3, #20]
 8007d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d40:	6153      	str	r3, [r2, #20]
 8007d42:	4b4c      	ldr	r3, [pc, #304]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d4a:	61bb      	str	r3, [r7, #24]
 8007d4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d4e:	4b49      	ldr	r3, [pc, #292]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	4a48      	ldr	r2, [pc, #288]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d54:	f043 0310 	orr.w	r3, r3, #16
 8007d58:	6193      	str	r3, [r2, #24]
 8007d5a:	4b46      	ldr	r3, [pc, #280]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	617b      	str	r3, [r7, #20]
 8007d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d66:	4b43      	ldr	r3, [pc, #268]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	4a42      	ldr	r2, [pc, #264]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d6c:	f043 0304 	orr.w	r3, r3, #4
 8007d70:	6193      	str	r3, [r2, #24]
 8007d72:	4b40      	ldr	r3, [pc, #256]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	613b      	str	r3, [r7, #16]
 8007d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	4a3c      	ldr	r2, [pc, #240]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d84:	f043 0308 	orr.w	r3, r3, #8
 8007d88:	6193      	str	r3, [r2, #24]
 8007d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d96:	4b37      	ldr	r3, [pc, #220]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	4a36      	ldr	r2, [pc, #216]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007d9c:	f043 0320 	orr.w	r3, r3, #32
 8007da0:	6193      	str	r3, [r2, #24]
 8007da2:	4b34      	ldr	r3, [pc, #208]	@ (8007e74 <HAL_ETH_MspInit+0x190>)
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	60bb      	str	r3, [r7, #8]
 8007dac:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> ETH_TXD1
    PD8     ------> ETH_CRS_DV
    PD9     ------> ETH_RXD0
    PD10     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007dae:	2302      	movs	r3, #2
 8007db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007db2:	2302      	movs	r3, #2
 8007db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007db6:	2303      	movs	r3, #3
 8007db8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	482d      	ldr	r0, [pc, #180]	@ (8007e78 <HAL_ETH_MspInit+0x194>)
 8007dc2:	f7fb fb5b 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4828      	ldr	r0, [pc, #160]	@ (8007e7c <HAL_ETH_MspInit+0x198>)
 8007dda:	f7fb fb4f 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007dde:	2304      	movs	r3, #4
 8007de0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007de2:	2302      	movs	r3, #2
 8007de4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007de6:	2303      	movs	r3, #3
 8007de8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007dee:	4619      	mov	r1, r3
 8007df0:	4822      	ldr	r0, [pc, #136]	@ (8007e7c <HAL_ETH_MspInit+0x198>)
 8007df2:	f7fb fb43 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007df6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8007dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e00:	2303      	movs	r3, #3
 8007e02:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e08:	4619      	mov	r1, r3
 8007e0a:	481d      	ldr	r0, [pc, #116]	@ (8007e80 <HAL_ETH_MspInit+0x19c>)
 8007e0c:	f7fb fb36 	bl	800347c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8007e10:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e16:	2300      	movs	r3, #0
 8007e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e22:	4619      	mov	r1, r3
 8007e24:	4817      	ldr	r0, [pc, #92]	@ (8007e84 <HAL_ETH_MspInit+0x1a0>)
 8007e26:	f7fb fb29 	bl	800347c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_ETH_ENABLE();
 8007e2a:	4b17      	ldr	r3, [pc, #92]	@ (8007e88 <HAL_ETH_MspInit+0x1a4>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e32:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8007e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e40:	4a11      	ldr	r2, [pc, #68]	@ (8007e88 <HAL_ETH_MspInit+0x1a4>)
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	6053      	str	r3, [r2, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8007e46:	2200      	movs	r2, #0
 8007e48:	2100      	movs	r1, #0
 8007e4a:	203d      	movs	r0, #61	@ 0x3d
 8007e4c:	f7f9 fe47 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007e50:	203d      	movs	r0, #61	@ 0x3d
 8007e52:	f7f9 fe60 	bl	8001b16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 8007e56:	2200      	movs	r2, #0
 8007e58:	2100      	movs	r1, #0
 8007e5a:	203e      	movs	r0, #62	@ 0x3e
 8007e5c:	f7f9 fe3f 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8007e60:	203e      	movs	r0, #62	@ 0x3e
 8007e62:	f7f9 fe58 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007e66:	bf00      	nop
 8007e68:	3738      	adds	r7, #56	@ 0x38
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40028000 	.word	0x40028000
 8007e74:	40021000 	.word	0x40021000
 8007e78:	40011000 	.word	0x40011000
 8007e7c:	40010800 	.word	0x40010800
 8007e80:	40010c00 	.word	0x40010c00
 8007e84:	40011400 	.word	0x40011400
 8007e88:	40010000 	.word	0x40010000

08007e8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e98:	4b52      	ldr	r3, [pc, #328]	@ (8007fe4 <low_level_init+0x158>)
 8007e9a:	4a53      	ldr	r2, [pc, #332]	@ (8007fe8 <low_level_init+0x15c>)
 8007e9c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007e9e:	4b51      	ldr	r3, [pc, #324]	@ (8007fe4 <low_level_init+0x158>)
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8007fe4 <low_level_init+0x158>)
 8007ea6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007eaa:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007eac:	4b4d      	ldr	r3, [pc, #308]	@ (8007fe4 <low_level_init+0x158>)
 8007eae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007eb2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8007eb4:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe4 <low_level_init+0x158>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007ebe:	2380      	movs	r3, #128	@ 0x80
 8007ec0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ec2:	23e1      	movs	r3, #225	@ 0xe1
 8007ec4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007ed2:	4a44      	ldr	r2, [pc, #272]	@ (8007fe4 <low_level_init+0x158>)
 8007ed4:	f107 0308 	add.w	r3, r7, #8
 8007ed8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007eda:	4b42      	ldr	r3, [pc, #264]	@ (8007fe4 <low_level_init+0x158>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007ee0:	4b40      	ldr	r3, [pc, #256]	@ (8007fe4 <low_level_init+0x158>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007ee6:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe4 <low_level_init+0x158>)
 8007ee8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007eec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007eee:	483d      	ldr	r0, [pc, #244]	@ (8007fe4 <low_level_init+0x158>)
 8007ef0:	f7f9 ff72 	bl	8001dd8 <HAL_ETH_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007ef8:	7dfb      	ldrb	r3, [r7, #23]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d108      	bne.n	8007f10 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f04:	f043 0304 	orr.w	r3, r3, #4
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007f10:	2304      	movs	r3, #4
 8007f12:	4a36      	ldr	r2, [pc, #216]	@ (8007fec <low_level_init+0x160>)
 8007f14:	4936      	ldr	r1, [pc, #216]	@ (8007ff0 <low_level_init+0x164>)
 8007f16:	4833      	ldr	r0, [pc, #204]	@ (8007fe4 <low_level_init+0x158>)
 8007f18:	f7fa f8ca 	bl	80020b0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	4a35      	ldr	r2, [pc, #212]	@ (8007ff4 <low_level_init+0x168>)
 8007f20:	4935      	ldr	r1, [pc, #212]	@ (8007ff8 <low_level_init+0x16c>)
 8007f22:	4830      	ldr	r0, [pc, #192]	@ (8007fe4 <low_level_init+0x158>)
 8007f24:	f7fa f92b 	bl	800217e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2206      	movs	r2, #6
 8007f2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f30:	4b2c      	ldr	r3, [pc, #176]	@ (8007fe4 <low_level_init+0x158>)
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	781a      	ldrb	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f3c:	4b29      	ldr	r3, [pc, #164]	@ (8007fe4 <low_level_init+0x158>)
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	785a      	ldrb	r2, [r3, #1]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f48:	4b26      	ldr	r3, [pc, #152]	@ (8007fe4 <low_level_init+0x158>)
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	789a      	ldrb	r2, [r3, #2]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f54:	4b23      	ldr	r3, [pc, #140]	@ (8007fe4 <low_level_init+0x158>)
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	78da      	ldrb	r2, [r3, #3]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f60:	4b20      	ldr	r3, [pc, #128]	@ (8007fe4 <low_level_init+0x158>)
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	791a      	ldrb	r2, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <low_level_init+0x158>)
 8007f6e:	695b      	ldr	r3, [r3, #20]
 8007f70:	795a      	ldrb	r2, [r3, #5]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007f7e:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007f86:	f043 030a 	orr.w	r3, r3, #10
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007f92:	4814      	ldr	r0, [pc, #80]	@ (8007fe4 <low_level_init+0x158>)
 8007f94:	f7fa fc16 	bl	80027c4 <HAL_ETH_Start>

/* USER CODE END PHY_PRE_CONFIG */

  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8007f98:	f107 0310 	add.w	r3, r7, #16
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2111      	movs	r1, #17
 8007fa0:	4810      	ldr	r0, [pc, #64]	@ (8007fe4 <low_level_init+0x158>)
 8007fa2:	f7fa fb41 	bl	8002628 <HAL_ETH_ReadPHYRegister>

  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f043 0303 	orr.w	r3, r3, #3
 8007fac:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2111      	movs	r1, #17
 8007fb4:	480b      	ldr	r0, [pc, #44]	@ (8007fe4 <low_level_init+0x158>)
 8007fb6:	f7fa fb9f 	bl	80026f8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8007fba:	f107 0310 	add.w	r3, r7, #16
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	2112      	movs	r1, #18
 8007fc2:	4808      	ldr	r0, [pc, #32]	@ (8007fe4 <low_level_init+0x158>)
 8007fc4:	f7fa fb30 	bl	8002628 <HAL_ETH_ReadPHYRegister>

  regvalue |= PHY_MISR_LINK_INT_EN;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f043 0320 	orr.w	r3, r3, #32
 8007fce:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2112      	movs	r1, #18
 8007fd6:	4803      	ldr	r0, [pc, #12]	@ (8007fe4 <low_level_init+0x158>)
 8007fd8:	f7fa fb8e 	bl	80026f8 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fdc:	bf00      	nop
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	20004b04 	.word	0x20004b04
 8007fe8:	40028000 	.word	0x40028000
 8007fec:	20003334 	.word	0x20003334
 8007ff0:	20000354 	.word	0x20000354
 8007ff4:	20000394 	.word	0x20000394
 8007ff8:	200002d4 	.word	0x200002d4

08007ffc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	@ 0x28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008006:	4b4b      	ldr	r3, [pc, #300]	@ (8008134 <low_level_output+0x138>)
 8008008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800801e:	4b45      	ldr	r3, [pc, #276]	@ (8008134 <low_level_output+0x138>)
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	623b      	str	r3, [r7, #32]
 800802c:	e05a      	b.n	80080e4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da03      	bge.n	800803e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008036:	23f8      	movs	r3, #248	@ 0xf8
 8008038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 800803c:	e05c      	b.n	80080f8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	895b      	ldrh	r3, [r3, #10]
 8008042:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008048:	e02f      	b.n	80080aa <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	18d0      	adds	r0, r2, r3
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	685a      	ldr	r2, [r3, #4]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	18d1      	adds	r1, r2, r3
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800805e:	3304      	adds	r3, #4
 8008060:	461a      	mov	r2, r3
 8008062:	f00b fa92 	bl	801358a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	da03      	bge.n	800807c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008074:	23f8      	movs	r3, #248	@ 0xf8
 8008076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 800807a:	e03d      	b.n	80080f8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 800808c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8008098:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80080a4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4413      	add	r3, r2
 80080b0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d8c8      	bhi.n	800804a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	18d0      	adds	r0, r2, r3
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	685a      	ldr	r2, [r3, #4]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	4413      	add	r3, r2
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4619      	mov	r1, r3
 80080ca:	f00b fa5e 	bl	801358a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	623b      	str	r3, [r7, #32]
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1a1      	bne.n	800802e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80080ea:	6979      	ldr	r1, [r7, #20]
 80080ec:	4811      	ldr	r0, [pc, #68]	@ (8008134 <low_level_output+0x138>)
 80080ee:	f7fa f8b1 	bl	8002254 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80080f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008134 <low_level_output+0x138>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00d      	beq.n	8008126 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800810a:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <low_level_output+0x138>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008112:	461a      	mov	r2, r3
 8008114:	2320      	movs	r3, #32
 8008116:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008118:	4b06      	ldr	r3, [pc, #24]	@ (8008134 <low_level_output+0x138>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008120:	461a      	mov	r2, r3
 8008122:	2300      	movs	r3, #0
 8008124:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8008126:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800812a:	4618      	mov	r0, r3
 800812c:	3728      	adds	r7, #40	@ 0x28
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20004b04 	.word	0x20004b04

08008138 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08c      	sub	sp, #48	@ 0x30
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008140:	2300      	movs	r3, #0
 8008142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800815c:	484e      	ldr	r0, [pc, #312]	@ (8008298 <low_level_input+0x160>)
 800815e:	f7fa f961 	bl	8002424 <HAL_ETH_GetReceivedFrame>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <low_level_input+0x34>

    return NULL;
 8008168:	2300      	movs	r3, #0
 800816a:	e090      	b.n	800828e <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800816c:	4b4a      	ldr	r3, [pc, #296]	@ (8008298 <low_level_input+0x160>)
 800816e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008170:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008172:	4b49      	ldr	r3, [pc, #292]	@ (8008298 <low_level_input+0x160>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008176:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d006      	beq.n	800818c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800817e:	89fb      	ldrh	r3, [r7, #14]
 8008180:	2203      	movs	r2, #3
 8008182:	4619      	mov	r1, r3
 8008184:	2004      	movs	r0, #4
 8008186:	f002 fa9f 	bl	800a6c8 <pbuf_alloc>
 800818a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d04b      	beq.n	800822a <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008192:	4b41      	ldr	r3, [pc, #260]	@ (8008298 <low_level_input+0x160>)
 8008194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008196:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800819c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800819e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a0:	e040      	b.n	8008224 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80081a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a4:	895b      	ldrh	r3, [r3, #10]
 80081a6:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80081ac:	e021      	b.n	80081f2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	18d0      	adds	r0, r2, r3
 80081b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	18d1      	adds	r1, r2, r3
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 80081c2:	3304      	adds	r3, #4
 80081c4:	461a      	mov	r2, r3
 80081c6:	f00b f9e0 	bl	801358a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80081ca:	6a3b      	ldr	r3, [r7, #32]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	4413      	add	r3, r2
 80081dc:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 80081e0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	1ad3      	subs	r3, r2, r3
 80081e8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80081ec:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	69fb      	ldr	r3, [r7, #28]
 80081f6:	4413      	add	r3, r2
 80081f8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d8d6      	bhi.n	80081ae <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	18d0      	adds	r0, r2, r3
 8008208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	4619      	mov	r1, r3
 8008212:	f00b f9ba 	bl	801358a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008216:	69fa      	ldr	r2, [r7, #28]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	4413      	add	r3, r2
 800821c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800821e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1bb      	bne.n	80081a2 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800822a:	4b1b      	ldr	r3, [pc, #108]	@ (8008298 <low_level_input+0x160>)
 800822c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800822e:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
 8008234:	e00b      	b.n	800824e <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
 800824e:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <low_level_input+0x160>)
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	429a      	cmp	r2, r3
 8008256:	d3ee      	bcc.n	8008236 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008258:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <low_level_input+0x160>)
 800825a:	2200      	movs	r2, #0
 800825c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800825e:	4b0e      	ldr	r3, [pc, #56]	@ (8008298 <low_level_input+0x160>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008266:	695b      	ldr	r3, [r3, #20]
 8008268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00d      	beq.n	800828c <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008270:	4b09      	ldr	r3, [pc, #36]	@ (8008298 <low_level_input+0x160>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008278:	461a      	mov	r2, r3
 800827a:	2380      	movs	r3, #128	@ 0x80
 800827c:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800827e:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <low_level_input+0x160>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008286:	461a      	mov	r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	6093      	str	r3, [r2, #8]
  }
  return p;
 800828c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800828e:	4618      	mov	r0, r3
 8008290:	3730      	adds	r7, #48	@ 0x30
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20004b04 	.word	0x20004b04

0800829c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff ff47 	bl	8008138 <low_level_input>
 80082aa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d010      	beq.n	80082d4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	4798      	blx	r3
 80082bc:	4603      	mov	r3, r0
 80082be:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80082c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f002 fd75 	bl	800adb8 <pbuf_free>
    p = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	e000      	b.n	80082d6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80082d4:	bf00      	nop
  }
}
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <ethernetif_init+0x1c>
 80082ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008324 <ethernetif_init+0x48>)
 80082ec:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80082f0:	490d      	ldr	r1, [pc, #52]	@ (8008328 <ethernetif_init+0x4c>)
 80082f2:	480e      	ldr	r0, [pc, #56]	@ (800832c <ethernetif_init+0x50>)
 80082f4:	f00a ff48 	bl	8013188 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2273      	movs	r2, #115	@ 0x73
 80082fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2274      	movs	r2, #116	@ 0x74
 8008304:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a09      	ldr	r2, [pc, #36]	@ (8008330 <ethernetif_init+0x54>)
 800830c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a08      	ldr	r2, [pc, #32]	@ (8008334 <ethernetif_init+0x58>)
 8008312:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7ff fdb9 	bl	8007e8c <low_level_init>

  return ERR_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	080145d0 	.word	0x080145d0
 8008328:	080145ec 	.word	0x080145ec
 800832c:	080145fc 	.word	0x080145fc
 8008330:	08010aa9 	.word	0x08010aa9
 8008334:	08007ffd 	.word	0x08007ffd

08008338 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800833c:	f7f9 fab4 	bl	80018a8 <HAL_GetTick>
 8008340:	4603      	mov	r3, r0
}
 8008342:	4618      	mov	r0, r3
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800835e:	089b      	lsrs	r3, r3, #2
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d05d      	beq.n	8008426 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800836a:	4b34      	ldr	r3, [pc, #208]	@ (800843c <ethernetif_update_config+0xf4>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d03f      	beq.n	80083f2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008372:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008376:	2100      	movs	r1, #0
 8008378:	4830      	ldr	r0, [pc, #192]	@ (800843c <ethernetif_update_config+0xf4>)
 800837a:	f7fa f9bd 	bl	80026f8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800837e:	f7f9 fa93 	bl	80018a8 <HAL_GetTick>
 8008382:	4603      	mov	r3, r0
 8008384:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008386:	f107 0308 	add.w	r3, r7, #8
 800838a:	461a      	mov	r2, r3
 800838c:	2101      	movs	r1, #1
 800838e:	482b      	ldr	r0, [pc, #172]	@ (800843c <ethernetif_update_config+0xf4>)
 8008390:	f7fa f94a 	bl	8002628 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008394:	f7f9 fa88 	bl	80018a8 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083a2:	d828      	bhi.n	80083f6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0eb      	beq.n	8008386 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80083ae:	f107 0308 	add.w	r3, r7, #8
 80083b2:	461a      	mov	r2, r3
 80083b4:	2110      	movs	r1, #16
 80083b6:	4821      	ldr	r0, [pc, #132]	@ (800843c <ethernetif_update_config+0xf4>)
 80083b8:	f7fa f936 	bl	8002628 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f003 0304 	and.w	r3, r3, #4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80083c6:	4b1d      	ldr	r3, [pc, #116]	@ (800843c <ethernetif_update_config+0xf4>)
 80083c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	e002      	b.n	80083d6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80083d0:	4b1a      	ldr	r3, [pc, #104]	@ (800843c <ethernetif_update_config+0xf4>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80083e0:	4b16      	ldr	r3, [pc, #88]	@ (800843c <ethernetif_update_config+0xf4>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	609a      	str	r2, [r3, #8]
 80083e6:	e016      	b.n	8008416 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80083e8:	4b14      	ldr	r3, [pc, #80]	@ (800843c <ethernetif_update_config+0xf4>)
 80083ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80083ee:	609a      	str	r2, [r3, #8]
 80083f0:	e011      	b.n	8008416 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80083f2:	bf00      	nop
 80083f4:	e000      	b.n	80083f8 <ethernetif_update_config+0xb0>
          goto error;
 80083f6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80083f8:	4b10      	ldr	r3, [pc, #64]	@ (800843c <ethernetif_update_config+0xf4>)
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008400:	4b0e      	ldr	r3, [pc, #56]	@ (800843c <ethernetif_update_config+0xf4>)
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008408:	4313      	orrs	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	2100      	movs	r1, #0
 8008410:	480a      	ldr	r0, [pc, #40]	@ (800843c <ethernetif_update_config+0xf4>)
 8008412:	f7fa f971 	bl	80026f8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008416:	2100      	movs	r1, #0
 8008418:	4808      	ldr	r0, [pc, #32]	@ (800843c <ethernetif_update_config+0xf4>)
 800841a:	f7fa fa31 	bl	8002880 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800841e:	4807      	ldr	r0, [pc, #28]	@ (800843c <ethernetif_update_config+0xf4>)
 8008420:	f7fa f9d0 	bl	80027c4 <HAL_ETH_Start>
 8008424:	e002      	b.n	800842c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008426:	4805      	ldr	r0, [pc, #20]	@ (800843c <ethernetif_update_config+0xf4>)
 8008428:	f7fa f9fb 	bl	8002822 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f807 	bl	8008440 <ethernetif_notify_conn_changed>
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20004b04 	.word	0x20004b04

08008440 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b084      	sub	sp, #16
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	460b      	mov	r3, r1
 800845c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7c1b      	ldrb	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d115      	bne.n	8008496 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800846a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800846e:	2202      	movs	r2, #2
 8008470:	2181      	movs	r1, #129	@ 0x81
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f00a fc5d 	bl	8012d32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800847e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008482:	2202      	movs	r2, #2
 8008484:	2101      	movs	r1, #1
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f00a fc53 	bl	8012d32 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008494:	e012      	b.n	80084bc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008496:	2340      	movs	r3, #64	@ 0x40
 8008498:	2202      	movs	r2, #2
 800849a:	2181      	movs	r1, #129	@ 0x81
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f00a fc48 	bl	8012d32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80084a8:	2340      	movs	r3, #64	@ 0x40
 80084aa:	2202      	movs	r2, #2
 80084ac:	2101      	movs	r1, #1
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f00a fc3f 	bl	8012d32 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80084bc:	2308      	movs	r3, #8
 80084be:	2203      	movs	r2, #3
 80084c0:	2182      	movs	r1, #130	@ 0x82
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f00a fc35 	bl	8012d32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084ce:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80084d2:	f00a fd55 	bl	8012f80 <USBD_static_malloc>
 80084d6:	4602      	mov	r2, r0
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80084e8:	2301      	movs	r3, #1
 80084ea:	73fb      	strb	r3, [r7, #15]
 80084ec:	e026      	b.n	800853c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	7c1b      	ldrb	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800851e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008522:	2101      	movs	r1, #1
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f00a fcf4 	bl	8012f12 <USBD_LL_PrepareReceive>
 800852a:	e007      	b.n	800853c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008532:	2340      	movs	r3, #64	@ 0x40
 8008534:	2101      	movs	r1, #1
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f00a fceb 	bl	8012f12 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008556:	2181      	movs	r1, #129	@ 0x81
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f00a fc10 	bl	8012d7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f00a fc09 	bl	8012d7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008574:	2182      	movs	r1, #130	@ 0x82
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f00a fc01 	bl	8012d7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00e      	beq.n	80085aa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800859c:	4618      	mov	r0, r3
 800859e:	f00a fcfb 	bl	8012f98 <USBD_static_free>
    pdev->pClassData = NULL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d039      	beq.n	8008652 <USBD_CDC_Setup+0x9e>
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d17f      	bne.n	80086e2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	88db      	ldrh	r3, [r3, #6]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d029      	beq.n	800863e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b25b      	sxtb	r3, r3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da11      	bge.n	8008618 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008600:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	88d2      	ldrh	r2, [r2, #6]
 8008606:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008608:	6939      	ldr	r1, [r7, #16]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	88db      	ldrh	r3, [r3, #6]
 800860e:	461a      	mov	r2, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fa3d 	bl	8009a90 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008616:	e06b      	b.n	80086f0 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	785a      	ldrb	r2, [r3, #1]
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	88db      	ldrh	r3, [r3, #6]
 8008626:	b2da      	uxtb	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800862e:	6939      	ldr	r1, [r7, #16]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	88db      	ldrh	r3, [r3, #6]
 8008634:	461a      	mov	r2, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fa58 	bl	8009aec <USBD_CtlPrepareRx>
      break;
 800863c:	e058      	b.n	80086f0 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	7850      	ldrb	r0, [r2, #1]
 800864a:	2200      	movs	r2, #0
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	4798      	blx	r3
      break;
 8008650:	e04e      	b.n	80086f0 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b0b      	cmp	r3, #11
 8008658:	d02e      	beq.n	80086b8 <USBD_CDC_Setup+0x104>
 800865a:	2b0b      	cmp	r3, #11
 800865c:	dc38      	bgt.n	80086d0 <USBD_CDC_Setup+0x11c>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <USBD_CDC_Setup+0xb4>
 8008662:	2b0a      	cmp	r3, #10
 8008664:	d014      	beq.n	8008690 <USBD_CDC_Setup+0xdc>
 8008666:	e033      	b.n	80086d0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800866e:	2b03      	cmp	r3, #3
 8008670:	d107      	bne.n	8008682 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	2202      	movs	r2, #2
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f001 fa08 	bl	8009a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008680:	e02e      	b.n	80086e0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f001 f999 	bl	80099bc <USBD_CtlError>
            ret = USBD_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	75fb      	strb	r3, [r7, #23]
          break;
 800868e:	e027      	b.n	80086e0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008696:	2b03      	cmp	r3, #3
 8008698:	d107      	bne.n	80086aa <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800869a:	f107 030f 	add.w	r3, r7, #15
 800869e:	2201      	movs	r2, #1
 80086a0:	4619      	mov	r1, r3
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 f9f4 	bl	8009a90 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086a8:	e01a      	b.n	80086e0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 f985 	bl	80099bc <USBD_CtlError>
            ret = USBD_FAIL;
 80086b2:	2302      	movs	r3, #2
 80086b4:	75fb      	strb	r3, [r7, #23]
          break;
 80086b6:	e013      	b.n	80086e0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d00d      	beq.n	80086de <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80086c2:	6839      	ldr	r1, [r7, #0]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f979 	bl	80099bc <USBD_CtlError>
            ret = USBD_FAIL;
 80086ca:	2302      	movs	r3, #2
 80086cc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80086ce:	e006      	b.n	80086de <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f972 	bl	80099bc <USBD_CtlError>
          ret = USBD_FAIL;
 80086d8:	2302      	movs	r3, #2
 80086da:	75fb      	strb	r3, [r7, #23]
          break;
 80086dc:	e000      	b.n	80086e0 <USBD_CDC_Setup+0x12c>
          break;
 80086de:	bf00      	nop
      }
      break;
 80086e0:	e006      	b.n	80086f0 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 f969 	bl	80099bc <USBD_CtlError>
      ret = USBD_FAIL;
 80086ea:	2302      	movs	r3, #2
 80086ec:	75fb      	strb	r3, [r7, #23]
      break;
 80086ee:	bf00      	nop
  }

  return ret;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008714:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d03a      	beq.n	8008796 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008720:	78fa      	ldrb	r2, [r7, #3]
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	4613      	mov	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4413      	add	r3, r2
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	440b      	add	r3, r1
 800872e:	331c      	adds	r3, #28
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d029      	beq.n	800878a <USBD_CDC_DataIn+0x90>
 8008736:	78fa      	ldrb	r2, [r7, #3]
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	331c      	adds	r3, #28
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	78f9      	ldrb	r1, [r7, #3]
 800874a:	68b8      	ldr	r0, [r7, #8]
 800874c:	460b      	mov	r3, r1
 800874e:	00db      	lsls	r3, r3, #3
 8008750:	440b      	add	r3, r1
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	4403      	add	r3, r0
 8008756:	3344      	adds	r3, #68	@ 0x44
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	fbb2 f1f3 	udiv	r1, r2, r3
 800875e:	fb01 f303 	mul.w	r3, r1, r3
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b00      	cmp	r3, #0
 8008766:	d110      	bne.n	800878a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	440b      	add	r3, r1
 8008776:	331c      	adds	r3, #28
 8008778:	2200      	movs	r2, #0
 800877a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800877c:	78f9      	ldrb	r1, [r7, #3]
 800877e:	2300      	movs	r3, #0
 8008780:	2200      	movs	r2, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f00a fba2 	bl	8012ecc <USBD_LL_Transmit>
 8008788:	e003      	b.n	8008792 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	e000      	b.n	8008798 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008796:	2302      	movs	r3, #2
  }
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f00a fbcd 	bl	8012f58 <USBD_LL_GetRxDataSize>
 80087be:	4602      	mov	r2, r0
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00d      	beq.n	80087ec <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80087e4:	4611      	mov	r1, r2
 80087e6:	4798      	blx	r3

    return USBD_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e000      	b.n	80087ee <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80087ec:	2302      	movs	r3, #2
  }
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008804:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800880c:	2b00      	cmp	r3, #0
 800880e:	d014      	beq.n	800883a <USBD_CDC_EP0_RxReady+0x44>
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008816:	2bff      	cmp	r3, #255	@ 0xff
 8008818:	d00f      	beq.n	800883a <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008828:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008830:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	22ff      	movs	r2, #255	@ 0xff
 8008836:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3710      	adds	r7, #16
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2243      	movs	r2, #67	@ 0x43
 8008850:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	20000094 	.word	0x20000094

08008864 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2243      	movs	r2, #67	@ 0x43
 8008870:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008872:	4b03      	ldr	r3, [pc, #12]	@ (8008880 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	bc80      	pop	{r7}
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000050 	.word	0x20000050

08008884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2243      	movs	r2, #67	@ 0x43
 8008890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008892:	4b03      	ldr	r3, [pc, #12]	@ (80088a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	200000d8 	.word	0x200000d8

080088a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	220a      	movs	r2, #10
 80088b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80088b2:	4b03      	ldr	r3, [pc, #12]	@ (80088c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bc80      	pop	{r7}
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	2000000c 	.word	0x2000000c

080088c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80088ce:	2302      	movs	r3, #2
 80088d0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d005      	beq.n	80088e4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bc80      	pop	{r7}
 80088ee:	4770      	bx	lr

080088f0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008904:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800890e:	88fa      	ldrh	r2, [r7, #6]
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	371c      	adds	r7, #28
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr

08008922 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008932:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	bc80      	pop	{r7}
 8008946:	4770      	bx	lr

08008948 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008956:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01c      	beq.n	800899c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008968:	2b00      	cmp	r3, #0
 800896a:	d115      	bne.n	8008998 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2201      	movs	r2, #1
 8008970:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800898a:	b29b      	uxth	r3, r3
 800898c:	2181      	movs	r1, #129	@ 0x81
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f00a fa9c 	bl	8012ecc <USBD_LL_Transmit>

      return USBD_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e002      	b.n	800899e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800899c:	2302      	movs	r3, #2
  }
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d017      	beq.n	80089f0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	7c1b      	ldrb	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089d2:	2101      	movs	r1, #1
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f00a fa9c 	bl	8012f12 <USBD_LL_PrepareReceive>
 80089da:	e007      	b.n	80089ec <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80089e2:	2340      	movs	r3, #64	@ 0x40
 80089e4:	2101      	movs	r1, #1
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f00a fa93 	bl	8012f12 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	e000      	b.n	80089f2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80089f0:	2302      	movs	r3, #2
  }
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	4613      	mov	r3, r2
 8008a06:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008a0e:	2302      	movs	r3, #2
 8008a10:	e01a      	b.n	8008a48 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	79fa      	ldrb	r2, [r7, #7]
 8008a3e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f00a f917 	bl	8012c74 <USBD_LL_Init>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d006      	beq.n	8008a72 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e001      	b.n	8008a76 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr

08008a82 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b082      	sub	sp, #8
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f00a f936 	bl	8012cfc <USBD_LL_Start>

  return USBD_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3708      	adds	r7, #8
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bc80      	pop	{r7}
 8008aac:	4770      	bx	lr

08008aae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008aba:	2302      	movs	r3, #2
 8008abc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00c      	beq.n	8008ae2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	4798      	blx	r3
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d101      	bne.n	8008ae2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4611      	mov	r1, r2
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	4798      	blx	r3

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 ff10 	bl	800994a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008b46:	f003 031f 	and.w	r3, r3, #31
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d016      	beq.n	8008b7c <USBD_LL_SetupStage+0x6a>
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d81c      	bhi.n	8008b8c <USBD_LL_SetupStage+0x7a>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d002      	beq.n	8008b5c <USBD_LL_SetupStage+0x4a>
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d008      	beq.n	8008b6c <USBD_LL_SetupStage+0x5a>
 8008b5a:	e017      	b.n	8008b8c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fa03 	bl	8008f70 <USBD_StdDevReq>
      break;
 8008b6a:	e01a      	b.n	8008ba2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fa65 	bl	8009044 <USBD_StdItfReq>
      break;
 8008b7a:	e012      	b.n	8008ba2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 faa5 	bl	80090d4 <USBD_StdEPReq>
      break;
 8008b8a:	e00a      	b.n	8008ba2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008b92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f00a f90e 	bl	8012dbc <USBD_LL_StallEP>
      break;
 8008ba0:	bf00      	nop
  }

  return USBD_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d14b      	bne.n	8008c58 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008bc6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008bce:	2b03      	cmp	r3, #3
 8008bd0:	d134      	bne.n	8008c3c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d919      	bls.n	8008c12 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	1ad2      	subs	r2, r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d203      	bcs.n	8008c00 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	e002      	b.n	8008c06 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 ff8c 	bl	8009b28 <USBD_CtlContinueRx>
 8008c10:	e038      	b.n	8008c84 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d105      	bne.n	8008c34 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 ff89 	bl	8009b4c <USBD_CtlSendStatus>
 8008c3a:	e023      	b.n	8008c84 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008c42:	2b05      	cmp	r3, #5
 8008c44:	d11e      	bne.n	8008c84 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008c4e:	2100      	movs	r1, #0
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f00a f8b3 	bl	8012dbc <USBD_LL_StallEP>
 8008c56:	e015      	b.n	8008c84 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00d      	beq.n	8008c80 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d108      	bne.n	8008c80 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	7afa      	ldrb	r2, [r7, #11]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	4798      	blx	r3
 8008c7e:	e001      	b.n	8008c84 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008c80:	2302      	movs	r3, #2
 8008c82:	e000      	b.n	8008c86 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b086      	sub	sp, #24
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	60f8      	str	r0, [r7, #12]
 8008c96:	460b      	mov	r3, r1
 8008c98:	607a      	str	r2, [r7, #4]
 8008c9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d17f      	bne.n	8008da2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d15c      	bne.n	8008d6c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d915      	bls.n	8008cea <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	68da      	ldr	r2, [r3, #12]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	1ad2      	subs	r2, r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fef6 	bl	8009ac8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f00a f915 	bl	8012f12 <USBD_LL_PrepareReceive>
 8008ce8:	e04e      	b.n	8008d88 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	6912      	ldr	r2, [r2, #16]
 8008cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008cf6:	fb01 f202 	mul.w	r2, r1, r2
 8008cfa:	1a9b      	subs	r3, r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d11c      	bne.n	8008d3a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d316      	bcc.n	8008d3a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d20f      	bcs.n	8008d3a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 fed2 	bl	8009ac8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f00a f8ed 	bl	8012f12 <USBD_LL_PrepareReceive>
 8008d38:	e026      	b.n	8008d88 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d105      	bne.n	8008d5c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008d5c:	2180      	movs	r1, #128	@ 0x80
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f00a f82c 	bl	8012dbc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 ff04 	bl	8009b72 <USBD_CtlReceiveStatus>
 8008d6a:	e00d      	b.n	8008d88 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d004      	beq.n	8008d80 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d103      	bne.n	8008d88 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008d80:	2180      	movs	r1, #128	@ 0x80
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f00a f81a 	bl	8012dbc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d11d      	bne.n	8008dce <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff fe81 	bl	8008a9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008da0:	e015      	b.n	8008dce <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00d      	beq.n	8008dca <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008db4:	2b03      	cmp	r3, #3
 8008db6:	d108      	bne.n	8008dca <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	7afa      	ldrb	r2, [r7, #11]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	68f8      	ldr	r0, [r7, #12]
 8008dc6:	4798      	blx	r3
 8008dc8:	e001      	b.n	8008dce <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	e000      	b.n	8008dd0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008de0:	2340      	movs	r3, #64	@ 0x40
 8008de2:	2200      	movs	r2, #0
 8008de4:	2100      	movs	r1, #0
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f009 ffa3 	bl	8012d32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2240      	movs	r2, #64	@ 0x40
 8008df8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dfc:	2340      	movs	r3, #64	@ 0x40
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2180      	movs	r1, #128	@ 0x80
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f009 ff95 	bl	8012d32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2240      	movs	r2, #64	@ 0x40
 8008e12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d009      	beq.n	8008e50 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	6852      	ldr	r2, [r2, #4]
 8008e48:	b2d2      	uxtb	r2, r2
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	4798      	blx	r3
  }

  return USBD_OK;
 8008e50:	2300      	movs	r3, #0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	78fa      	ldrb	r2, [r7, #3]
 8008e6a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d105      	bne.n	8008ebe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr

08008eca <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b082      	sub	sp, #8
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d10b      	bne.n	8008ef4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008efe:	b480      	push	{r7}
 8008f00:	b083      	sub	sp, #12
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	460b      	mov	r3, r1
 8008f08:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr

08008f16 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bc80      	pop	{r7}
 8008f2c:	4770      	bx	lr

08008f2e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bc80      	pop	{r7}
 8008f40:	4770      	bx	lr

08008f42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6852      	ldr	r2, [r2, #4]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	4611      	mov	r1, r2
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3

  return USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d005      	beq.n	8008f96 <USBD_StdDevReq+0x26>
 8008f8a:	2b40      	cmp	r3, #64	@ 0x40
 8008f8c:	d84f      	bhi.n	800902e <USBD_StdDevReq+0xbe>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d009      	beq.n	8008fa6 <USBD_StdDevReq+0x36>
 8008f92:	2b20      	cmp	r3, #32
 8008f94:	d14b      	bne.n	800902e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
      break;
 8008fa4:	e048      	b.n	8009038 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	785b      	ldrb	r3, [r3, #1]
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	d839      	bhi.n	8009022 <USBD_StdDevReq+0xb2>
 8008fae:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb4 <USBD_StdDevReq+0x44>)
 8008fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb4:	08009005 	.word	0x08009005
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	08009023 	.word	0x08009023
 8008fc0:	0800900f 	.word	0x0800900f
 8008fc4:	08009023 	.word	0x08009023
 8008fc8:	08008fe7 	.word	0x08008fe7
 8008fcc:	08008fdd 	.word	0x08008fdd
 8008fd0:	08009023 	.word	0x08009023
 8008fd4:	08008ffb 	.word	0x08008ffb
 8008fd8:	08008ff1 	.word	0x08008ff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9dc 	bl	800939c <USBD_GetDescriptor>
          break;
 8008fe4:	e022      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb3f 	bl	800966c <USBD_SetAddress>
          break;
 8008fee:	e01d      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb7e 	bl	80096f4 <USBD_SetConfig>
          break;
 8008ff8:	e018      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc07 	bl	8009810 <USBD_GetConfig>
          break;
 8009002:	e013      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009004:	6839      	ldr	r1, [r7, #0]
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fc37 	bl	800987a <USBD_GetStatus>
          break;
 800900c:	e00e      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc65 	bl	80098e0 <USBD_SetFeature>
          break;
 8009016:	e009      	b.n	800902c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009018:	6839      	ldr	r1, [r7, #0]
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fc74 	bl	8009908 <USBD_ClrFeature>
          break;
 8009020:	e004      	b.n	800902c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fcc9 	bl	80099bc <USBD_CtlError>
          break;
 800902a:	bf00      	nop
      }
      break;
 800902c:	e004      	b.n	8009038 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fcc3 	bl	80099bc <USBD_CtlError>
      break;
 8009036:	bf00      	nop
  }

  return ret;
 8009038:	7bfb      	ldrb	r3, [r7, #15]
}
 800903a:	4618      	mov	r0, r3
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop

08009044 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800905a:	2b40      	cmp	r3, #64	@ 0x40
 800905c:	d005      	beq.n	800906a <USBD_StdItfReq+0x26>
 800905e:	2b40      	cmp	r3, #64	@ 0x40
 8009060:	d82e      	bhi.n	80090c0 <USBD_StdItfReq+0x7c>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <USBD_StdItfReq+0x26>
 8009066:	2b20      	cmp	r3, #32
 8009068:	d12a      	bne.n	80090c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009070:	3b01      	subs	r3, #1
 8009072:	2b02      	cmp	r3, #2
 8009074:	d81d      	bhi.n	80090b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	889b      	ldrh	r3, [r3, #4]
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b01      	cmp	r3, #1
 800907e:	d813      	bhi.n	80090a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	4798      	blx	r3
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	88db      	ldrh	r3, [r3, #6]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d110      	bne.n	80090bc <USBD_StdItfReq+0x78>
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10d      	bne.n	80090bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fd53 	bl	8009b4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80090a6:	e009      	b.n	80090bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fc86 	bl	80099bc <USBD_CtlError>
          break;
 80090b0:	e004      	b.n	80090bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fc81 	bl	80099bc <USBD_CtlError>
          break;
 80090ba:	e000      	b.n	80090be <USBD_StdItfReq+0x7a>
          break;
 80090bc:	bf00      	nop
      }
      break;
 80090be:	e004      	b.n	80090ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fc7a 	bl	80099bc <USBD_CtlError>
      break;
 80090c8:	bf00      	nop
  }

  return USBD_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	889b      	ldrh	r3, [r3, #4]
 80090e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090f0:	2b40      	cmp	r3, #64	@ 0x40
 80090f2:	d007      	beq.n	8009104 <USBD_StdEPReq+0x30>
 80090f4:	2b40      	cmp	r3, #64	@ 0x40
 80090f6:	f200 8146 	bhi.w	8009386 <USBD_StdEPReq+0x2b2>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <USBD_StdEPReq+0x40>
 80090fe:	2b20      	cmp	r3, #32
 8009100:	f040 8141 	bne.w	8009386 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	6839      	ldr	r1, [r7, #0]
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	4798      	blx	r3
      break;
 8009112:	e13d      	b.n	8009390 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800911c:	2b20      	cmp	r3, #32
 800911e:	d10a      	bne.n	8009136 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	4798      	blx	r3
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	e12d      	b.n	8009392 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d007      	beq.n	800914e <USBD_StdEPReq+0x7a>
 800913e:	2b03      	cmp	r3, #3
 8009140:	f300 811b 	bgt.w	800937a <USBD_StdEPReq+0x2a6>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d072      	beq.n	800922e <USBD_StdEPReq+0x15a>
 8009148:	2b01      	cmp	r3, #1
 800914a:	d03a      	beq.n	80091c2 <USBD_StdEPReq+0xee>
 800914c:	e115      	b.n	800937a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009154:	2b02      	cmp	r3, #2
 8009156:	d002      	beq.n	800915e <USBD_StdEPReq+0x8a>
 8009158:	2b03      	cmp	r3, #3
 800915a:	d015      	beq.n	8009188 <USBD_StdEPReq+0xb4>
 800915c:	e02b      	b.n	80091b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00c      	beq.n	800917e <USBD_StdEPReq+0xaa>
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b80      	cmp	r3, #128	@ 0x80
 8009168:	d009      	beq.n	800917e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800916a:	7bbb      	ldrb	r3, [r7, #14]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f009 fe24 	bl	8012dbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009174:	2180      	movs	r1, #128	@ 0x80
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f009 fe20 	bl	8012dbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800917c:	e020      	b.n	80091c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800917e:	6839      	ldr	r1, [r7, #0]
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fc1b 	bl	80099bc <USBD_CtlError>
              break;
 8009186:	e01b      	b.n	80091c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	885b      	ldrh	r3, [r3, #2]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d10e      	bne.n	80091ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00b      	beq.n	80091ae <USBD_StdEPReq+0xda>
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	2b80      	cmp	r3, #128	@ 0x80
 800919a:	d008      	beq.n	80091ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	88db      	ldrh	r3, [r3, #6]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f009 fe07 	bl	8012dbc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fccc 	bl	8009b4c <USBD_CtlSendStatus>

              break;
 80091b4:	e004      	b.n	80091c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbff 	bl	80099bc <USBD_CtlError>
              break;
 80091be:	bf00      	nop
          }
          break;
 80091c0:	e0e0      	b.n	8009384 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d002      	beq.n	80091d2 <USBD_StdEPReq+0xfe>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	d015      	beq.n	80091fc <USBD_StdEPReq+0x128>
 80091d0:	e026      	b.n	8009220 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00c      	beq.n	80091f2 <USBD_StdEPReq+0x11e>
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	2b80      	cmp	r3, #128	@ 0x80
 80091dc:	d009      	beq.n	80091f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f009 fdea 	bl	8012dbc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80091e8:	2180      	movs	r1, #128	@ 0x80
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f009 fde6 	bl	8012dbc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091f0:	e01c      	b.n	800922c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fbe1 	bl	80099bc <USBD_CtlError>
              break;
 80091fa:	e017      	b.n	800922c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	885b      	ldrh	r3, [r3, #2]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d112      	bne.n	800922a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800920e:	7bbb      	ldrb	r3, [r7, #14]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f009 fdf1 	bl	8012dfa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fc97 	bl	8009b4c <USBD_CtlSendStatus>
              }
              break;
 800921e:	e004      	b.n	800922a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fbca 	bl	80099bc <USBD_CtlError>
              break;
 8009228:	e000      	b.n	800922c <USBD_StdEPReq+0x158>
              break;
 800922a:	bf00      	nop
          }
          break;
 800922c:	e0aa      	b.n	8009384 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009234:	2b02      	cmp	r3, #2
 8009236:	d002      	beq.n	800923e <USBD_StdEPReq+0x16a>
 8009238:	2b03      	cmp	r3, #3
 800923a:	d032      	beq.n	80092a2 <USBD_StdEPReq+0x1ce>
 800923c:	e097      	b.n	800936e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <USBD_StdEPReq+0x180>
 8009244:	7bbb      	ldrb	r3, [r7, #14]
 8009246:	2b80      	cmp	r3, #128	@ 0x80
 8009248:	d004      	beq.n	8009254 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fbb5 	bl	80099bc <USBD_CtlError>
                break;
 8009252:	e091      	b.n	8009378 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009254:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	da0b      	bge.n	8009274 <USBD_StdEPReq+0x1a0>
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	3310      	adds	r3, #16
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	4413      	add	r3, r2
 8009270:	3304      	adds	r3, #4
 8009272:	e00b      	b.n	800928c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800927a:	4613      	mov	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4413      	add	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	3304      	adds	r3, #4
 800928c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2202      	movs	r2, #2
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fbf8 	bl	8009a90 <USBD_CtlSendData>
              break;
 80092a0:	e06a      	b.n	8009378 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	da11      	bge.n	80092ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	f003 020f 	and.w	r2, r3, #15
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	4613      	mov	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	4413      	add	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	440b      	add	r3, r1
 80092bc:	3318      	adds	r3, #24
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d117      	bne.n	80092f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fb78 	bl	80099bc <USBD_CtlError>
                  break;
 80092cc:	e054      	b.n	8009378 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fb65 	bl	80099bc <USBD_CtlError>
                  break;
 80092f2:	e041      	b.n	8009378 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	da0b      	bge.n	8009314 <USBD_StdEPReq+0x240>
 80092fc:	7bbb      	ldrb	r3, [r7, #14]
 80092fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	3310      	adds	r3, #16
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	4413      	add	r3, r2
 8009310:	3304      	adds	r3, #4
 8009312:	e00b      	b.n	800932c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009314:	7bbb      	ldrb	r3, [r7, #14]
 8009316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800931a:	4613      	mov	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	3304      	adds	r3, #4
 800932c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <USBD_StdEPReq+0x266>
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2b80      	cmp	r3, #128	@ 0x80
 8009338:	d103      	bne.n	8009342 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	e00e      	b.n	8009360 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009342:	7bbb      	ldrb	r3, [r7, #14]
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f009 fd76 	bl	8012e38 <USBD_LL_IsStallEP>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2201      	movs	r2, #1
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e002      	b.n	8009360 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2202      	movs	r2, #2
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fb92 	bl	8009a90 <USBD_CtlSendData>
              break;
 800936c:	e004      	b.n	8009378 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fb23 	bl	80099bc <USBD_CtlError>
              break;
 8009376:	bf00      	nop
          }
          break;
 8009378:	e004      	b.n	8009384 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800937a:	6839      	ldr	r1, [r7, #0]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fb1d 	bl	80099bc <USBD_CtlError>
          break;
 8009382:	bf00      	nop
      }
      break;
 8009384:	e004      	b.n	8009390 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009386:	6839      	ldr	r1, [r7, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fb17 	bl	80099bc <USBD_CtlError>
      break;
 800938e:	bf00      	nop
  }

  return ret;
 8009390:	7bfb      	ldrb	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
	...

0800939c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093a6:	2300      	movs	r3, #0
 80093a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ae:	2300      	movs	r3, #0
 80093b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	885b      	ldrh	r3, [r3, #2]
 80093b6:	0a1b      	lsrs	r3, r3, #8
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	3b01      	subs	r3, #1
 80093bc:	2b06      	cmp	r3, #6
 80093be:	f200 8128 	bhi.w	8009612 <USBD_GetDescriptor+0x276>
 80093c2:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <USBD_GetDescriptor+0x2c>)
 80093c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c8:	080093e5 	.word	0x080093e5
 80093cc:	080093fd 	.word	0x080093fd
 80093d0:	0800943d 	.word	0x0800943d
 80093d4:	08009613 	.word	0x08009613
 80093d8:	08009613 	.word	0x08009613
 80093dc:	080095b3 	.word	0x080095b3
 80093e0:	080095df 	.word	0x080095df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	7c12      	ldrb	r2, [r2, #16]
 80093f0:	f107 0108 	add.w	r1, r7, #8
 80093f4:	4610      	mov	r0, r2
 80093f6:	4798      	blx	r3
 80093f8:	60f8      	str	r0, [r7, #12]
      break;
 80093fa:	e112      	b.n	8009622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7c1b      	ldrb	r3, [r3, #16]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10d      	bne.n	8009420 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800940a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940c:	f107 0208 	add.w	r2, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3301      	adds	r3, #1
 800941a:	2202      	movs	r2, #2
 800941c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800941e:	e100      	b.n	8009622 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009428:	f107 0208 	add.w	r2, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3301      	adds	r3, #1
 8009436:	2202      	movs	r2, #2
 8009438:	701a      	strb	r2, [r3, #0]
      break;
 800943a:	e0f2      	b.n	8009622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	885b      	ldrh	r3, [r3, #2]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b05      	cmp	r3, #5
 8009444:	f200 80ac 	bhi.w	80095a0 <USBD_GetDescriptor+0x204>
 8009448:	a201      	add	r2, pc, #4	@ (adr r2, 8009450 <USBD_GetDescriptor+0xb4>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009469 	.word	0x08009469
 8009454:	0800949d 	.word	0x0800949d
 8009458:	080094d1 	.word	0x080094d1
 800945c:	08009505 	.word	0x08009505
 8009460:	08009539 	.word	0x08009539
 8009464:	0800956d 	.word	0x0800956d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	7c12      	ldrb	r2, [r2, #16]
 8009480:	f107 0108 	add.w	r1, r7, #8
 8009484:	4610      	mov	r0, r2
 8009486:	4798      	blx	r3
 8009488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800948a:	e091      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fa94 	bl	80099bc <USBD_CtlError>
            err++;
 8009494:	7afb      	ldrb	r3, [r7, #11]
 8009496:	3301      	adds	r3, #1
 8009498:	72fb      	strb	r3, [r7, #11]
          break;
 800949a:	e089      	b.n	80095b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	7c12      	ldrb	r2, [r2, #16]
 80094b4:	f107 0108 	add.w	r1, r7, #8
 80094b8:	4610      	mov	r0, r2
 80094ba:	4798      	blx	r3
 80094bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094be:	e077      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094c0:	6839      	ldr	r1, [r7, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa7a 	bl	80099bc <USBD_CtlError>
            err++;
 80094c8:	7afb      	ldrb	r3, [r7, #11]
 80094ca:	3301      	adds	r3, #1
 80094cc:	72fb      	strb	r3, [r7, #11]
          break;
 80094ce:	e06f      	b.n	80095b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00b      	beq.n	80094f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	7c12      	ldrb	r2, [r2, #16]
 80094e8:	f107 0108 	add.w	r1, r7, #8
 80094ec:	4610      	mov	r0, r2
 80094ee:	4798      	blx	r3
 80094f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094f2:	e05d      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fa60 	bl	80099bc <USBD_CtlError>
            err++;
 80094fc:	7afb      	ldrb	r3, [r7, #11]
 80094fe:	3301      	adds	r3, #1
 8009500:	72fb      	strb	r3, [r7, #11]
          break;
 8009502:	e055      	b.n	80095b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	7c12      	ldrb	r2, [r2, #16]
 800951c:	f107 0108 	add.w	r1, r7, #8
 8009520:	4610      	mov	r0, r2
 8009522:	4798      	blx	r3
 8009524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009526:	e043      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa46 	bl	80099bc <USBD_CtlError>
            err++;
 8009530:	7afb      	ldrb	r3, [r7, #11]
 8009532:	3301      	adds	r3, #1
 8009534:	72fb      	strb	r3, [r7, #11]
          break;
 8009536:	e03b      	b.n	80095b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7c12      	ldrb	r2, [r2, #16]
 8009550:	f107 0108 	add.w	r1, r7, #8
 8009554:	4610      	mov	r0, r2
 8009556:	4798      	blx	r3
 8009558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800955a:	e029      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 fa2c 	bl	80099bc <USBD_CtlError>
            err++;
 8009564:	7afb      	ldrb	r3, [r7, #11]
 8009566:	3301      	adds	r3, #1
 8009568:	72fb      	strb	r3, [r7, #11]
          break;
 800956a:	e021      	b.n	80095b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00b      	beq.n	8009590 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	7c12      	ldrb	r2, [r2, #16]
 8009584:	f107 0108 	add.w	r1, r7, #8
 8009588:	4610      	mov	r0, r2
 800958a:	4798      	blx	r3
 800958c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800958e:	e00f      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fa12 	bl	80099bc <USBD_CtlError>
            err++;
 8009598:	7afb      	ldrb	r3, [r7, #11]
 800959a:	3301      	adds	r3, #1
 800959c:	72fb      	strb	r3, [r7, #11]
          break;
 800959e:	e007      	b.n	80095b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fa0a 	bl	80099bc <USBD_CtlError>
          err++;
 80095a8:	7afb      	ldrb	r3, [r7, #11]
 80095aa:	3301      	adds	r3, #1
 80095ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80095ae:	e038      	b.n	8009622 <USBD_GetDescriptor+0x286>
 80095b0:	e037      	b.n	8009622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	7c1b      	ldrb	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095c2:	f107 0208 	add.w	r2, r7, #8
 80095c6:	4610      	mov	r0, r2
 80095c8:	4798      	blx	r3
 80095ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095cc:	e029      	b.n	8009622 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f9f3 	bl	80099bc <USBD_CtlError>
        err++;
 80095d6:	7afb      	ldrb	r3, [r7, #11]
 80095d8:	3301      	adds	r3, #1
 80095da:	72fb      	strb	r3, [r7, #11]
      break;
 80095dc:	e021      	b.n	8009622 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	7c1b      	ldrb	r3, [r3, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10d      	bne.n	8009602 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ee:	f107 0208 	add.w	r2, r7, #8
 80095f2:	4610      	mov	r0, r2
 80095f4:	4798      	blx	r3
 80095f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	2207      	movs	r2, #7
 80095fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009600:	e00f      	b.n	8009622 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9d9 	bl	80099bc <USBD_CtlError>
        err++;
 800960a:	7afb      	ldrb	r3, [r7, #11]
 800960c:	3301      	adds	r3, #1
 800960e:	72fb      	strb	r3, [r7, #11]
      break;
 8009610:	e007      	b.n	8009622 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009612:	6839      	ldr	r1, [r7, #0]
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f9d1 	bl	80099bc <USBD_CtlError>
      err++;
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	3301      	adds	r3, #1
 800961e:	72fb      	strb	r3, [r7, #11]
      break;
 8009620:	bf00      	nop
  }

  if (err != 0U)
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d11c      	bne.n	8009662 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009628:	893b      	ldrh	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d011      	beq.n	8009652 <USBD_GetDescriptor+0x2b6>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88db      	ldrh	r3, [r3, #6]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00d      	beq.n	8009652 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	88da      	ldrh	r2, [r3, #6]
 800963a:	893b      	ldrh	r3, [r7, #8]
 800963c:	4293      	cmp	r3, r2
 800963e:	bf28      	it	cs
 8009640:	4613      	movcs	r3, r2
 8009642:	b29b      	uxth	r3, r3
 8009644:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009646:	893b      	ldrh	r3, [r7, #8]
 8009648:	461a      	mov	r2, r3
 800964a:	68f9      	ldr	r1, [r7, #12]
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fa1f 	bl	8009a90 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	88db      	ldrh	r3, [r3, #6]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fa76 	bl	8009b4c <USBD_CtlSendStatus>
 8009660:	e000      	b.n	8009664 <USBD_GetDescriptor+0x2c8>
    return;
 8009662:	bf00      	nop
    }
  }
}
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop

0800966c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	889b      	ldrh	r3, [r3, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d130      	bne.n	80096e0 <USBD_SetAddress+0x74>
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88db      	ldrh	r3, [r3, #6]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d12c      	bne.n	80096e0 <USBD_SetAddress+0x74>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	885b      	ldrh	r3, [r3, #2]
 800968a:	2b7f      	cmp	r3, #127	@ 0x7f
 800968c:	d828      	bhi.n	80096e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	885b      	ldrh	r3, [r3, #2]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009698:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d104      	bne.n	80096ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f988 	bl	80099bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ac:	e01d      	b.n	80096ea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	7bfa      	ldrb	r2, [r7, #15]
 80096b2:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f009 fbe7 	bl	8012e8e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 fa43 	bl	8009b4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d4:	e009      	b.n	80096ea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096de:	e004      	b.n	80096ea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f96a 	bl	80099bc <USBD_CtlError>
  }
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	4b41      	ldr	r3, [pc, #260]	@ (800980c <USBD_SetConfig+0x118>)
 8009706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009708:	4b40      	ldr	r3, [pc, #256]	@ (800980c <USBD_SetConfig+0x118>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d904      	bls.n	800971a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f952 	bl	80099bc <USBD_CtlError>
 8009718:	e075      	b.n	8009806 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009720:	2b02      	cmp	r3, #2
 8009722:	d002      	beq.n	800972a <USBD_SetConfig+0x36>
 8009724:	2b03      	cmp	r3, #3
 8009726:	d023      	beq.n	8009770 <USBD_SetConfig+0x7c>
 8009728:	e062      	b.n	80097f0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800972a:	4b38      	ldr	r3, [pc, #224]	@ (800980c <USBD_SetConfig+0x118>)
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d01a      	beq.n	8009768 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009732:	4b36      	ldr	r3, [pc, #216]	@ (800980c <USBD_SetConfig+0x118>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2203      	movs	r2, #3
 8009740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009744:	4b31      	ldr	r3, [pc, #196]	@ (800980c <USBD_SetConfig+0x118>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff f9af 	bl	8008aae <USBD_SetClassConfig>
 8009750:	4603      	mov	r3, r0
 8009752:	2b02      	cmp	r3, #2
 8009754:	d104      	bne.n	8009760 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f92f 	bl	80099bc <USBD_CtlError>
            return;
 800975e:	e052      	b.n	8009806 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 f9f3 	bl	8009b4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009766:	e04e      	b.n	8009806 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 f9ef 	bl	8009b4c <USBD_CtlSendStatus>
        break;
 800976e:	e04a      	b.n	8009806 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009770:	4b26      	ldr	r3, [pc, #152]	@ (800980c <USBD_SetConfig+0x118>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d112      	bne.n	800979e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2202      	movs	r2, #2
 800977c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009780:	4b22      	ldr	r3, [pc, #136]	@ (800980c <USBD_SetConfig+0x118>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800978a:	4b20      	ldr	r3, [pc, #128]	@ (800980c <USBD_SetConfig+0x118>)
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff f9ab 	bl	8008aec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f9d8 	bl	8009b4c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800979c:	e033      	b.n	8009806 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800979e:	4b1b      	ldr	r3, [pc, #108]	@ (800980c <USBD_SetConfig+0x118>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d01d      	beq.n	80097e8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff f999 	bl	8008aec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80097ba:	4b14      	ldr	r3, [pc, #80]	@ (800980c <USBD_SetConfig+0x118>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80097c4:	4b11      	ldr	r3, [pc, #68]	@ (800980c <USBD_SetConfig+0x118>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff f96f 	bl	8008aae <USBD_SetClassConfig>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d104      	bne.n	80097e0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f8ef 	bl	80099bc <USBD_CtlError>
            return;
 80097de:	e012      	b.n	8009806 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f9b3 	bl	8009b4c <USBD_CtlSendStatus>
        break;
 80097e6:	e00e      	b.n	8009806 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f9af 	bl	8009b4c <USBD_CtlSendStatus>
        break;
 80097ee:	e00a      	b.n	8009806 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f8e2 	bl	80099bc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80097f8:	4b04      	ldr	r3, [pc, #16]	@ (800980c <USBD_SetConfig+0x118>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff f974 	bl	8008aec <USBD_ClrClassConfig>
        break;
 8009804:	bf00      	nop
    }
  }
}
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20004b4c 	.word	0x20004b4c

08009810 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	88db      	ldrh	r3, [r3, #6]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d004      	beq.n	800982c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 f8c9 	bl	80099bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800982a:	e022      	b.n	8009872 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009832:	2b02      	cmp	r3, #2
 8009834:	dc02      	bgt.n	800983c <USBD_GetConfig+0x2c>
 8009836:	2b00      	cmp	r3, #0
 8009838:	dc03      	bgt.n	8009842 <USBD_GetConfig+0x32>
 800983a:	e015      	b.n	8009868 <USBD_GetConfig+0x58>
 800983c:	2b03      	cmp	r3, #3
 800983e:	d00b      	beq.n	8009858 <USBD_GetConfig+0x48>
 8009840:	e012      	b.n	8009868 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3308      	adds	r3, #8
 800984c:	2201      	movs	r2, #1
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f91d 	bl	8009a90 <USBD_CtlSendData>
        break;
 8009856:	e00c      	b.n	8009872 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	3304      	adds	r3, #4
 800985c:	2201      	movs	r2, #1
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f915 	bl	8009a90 <USBD_CtlSendData>
        break;
 8009866:	e004      	b.n	8009872 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f8a6 	bl	80099bc <USBD_CtlError>
        break;
 8009870:	bf00      	nop
}
 8009872:	bf00      	nop
 8009874:	3708      	adds	r7, #8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800988a:	3b01      	subs	r3, #1
 800988c:	2b02      	cmp	r3, #2
 800988e:	d81e      	bhi.n	80098ce <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	88db      	ldrh	r3, [r3, #6]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d004      	beq.n	80098a2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f88e 	bl	80099bc <USBD_CtlError>
        break;
 80098a0:	e01a      	b.n	80098d8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	f043 0202 	orr.w	r2, r3, #2
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	330c      	adds	r3, #12
 80098c2:	2202      	movs	r2, #2
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8e2 	bl	8009a90 <USBD_CtlSendData>
      break;
 80098cc:	e004      	b.n	80098d8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f873 	bl	80099bc <USBD_CtlError>
      break;
 80098d6:	bf00      	nop
  }
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	885b      	ldrh	r3, [r3, #2]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d106      	bne.n	8009900 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f926 	bl	8009b4c <USBD_CtlSendStatus>
  }
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009918:	3b01      	subs	r3, #1
 800991a:	2b02      	cmp	r3, #2
 800991c:	d80b      	bhi.n	8009936 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	2b01      	cmp	r3, #1
 8009924:	d10c      	bne.n	8009940 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f90c 	bl	8009b4c <USBD_CtlSendStatus>
      }
      break;
 8009934:	e004      	b.n	8009940 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f83f 	bl	80099bc <USBD_CtlError>
      break;
 800993e:	e000      	b.n	8009942 <USBD_ClrFeature+0x3a>
      break;
 8009940:	bf00      	nop
  }
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800994a:	b480      	push	{r7}
 800994c:	b083      	sub	sp, #12
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781a      	ldrb	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	785a      	ldrb	r2, [r3, #1]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	3302      	adds	r3, #2
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	3303      	adds	r3, #3
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	021b      	lsls	r3, r3, #8
 8009974:	b29b      	uxth	r3, r3
 8009976:	4413      	add	r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	3304      	adds	r3, #4
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	461a      	mov	r2, r3
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	3305      	adds	r3, #5
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	021b      	lsls	r3, r3, #8
 800998e:	b29b      	uxth	r3, r3
 8009990:	4413      	add	r3, r2
 8009992:	b29a      	uxth	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	3306      	adds	r3, #6
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	3307      	adds	r3, #7
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	80da      	strh	r2, [r3, #6]

}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bc80      	pop	{r7}
 80099ba:	4770      	bx	lr

080099bc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80099c6:	2180      	movs	r1, #128	@ 0x80
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f009 f9f7 	bl	8012dbc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80099ce:	2100      	movs	r1, #0
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f009 f9f3 	bl	8012dbc <USBD_LL_StallEP>
}
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b086      	sub	sp, #24
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d032      	beq.n	8009a5a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f000 f834 	bl	8009a62 <USBD_GetLen>
 80099fa:	4603      	mov	r3, r0
 80099fc:	3301      	adds	r3, #1
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	b29a      	uxth	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009a08:	7dfb      	ldrb	r3, [r7, #23]
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	75fa      	strb	r2, [r7, #23]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	4413      	add	r3, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	7812      	ldrb	r2, [r2, #0]
 8009a18:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	75fa      	strb	r2, [r7, #23]
 8009a20:	461a      	mov	r2, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	4413      	add	r3, r2
 8009a26:	2203      	movs	r2, #3
 8009a28:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009a2a:	e012      	b.n	8009a52 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	60fa      	str	r2, [r7, #12]
 8009a32:	7dfa      	ldrb	r2, [r7, #23]
 8009a34:	1c51      	adds	r1, r2, #1
 8009a36:	75f9      	strb	r1, [r7, #23]
 8009a38:	4611      	mov	r1, r2
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	440a      	add	r2, r1
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	1c5a      	adds	r2, r3, #1
 8009a46:	75fa      	strb	r2, [r7, #23]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e8      	bne.n	8009a2c <USBD_GetString+0x4e>
    }
  }
}
 8009a5a:	bf00      	nop
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b085      	sub	sp, #20
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009a6e:	e005      	b.n	8009a7c <USBD_GetLen+0x1a>
  {
    len++;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	3301      	adds	r3, #1
 8009a74:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1f5      	bne.n	8009a70 <USBD_GetLen+0xe>
  }

  return len;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr

08009a90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009aac:	88fa      	ldrh	r2, [r7, #6]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	68ba      	ldr	r2, [r7, #8]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f009 fa07 	bl	8012ecc <USBD_LL_Transmit>

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	60b9      	str	r1, [r7, #8]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	68ba      	ldr	r2, [r7, #8]
 8009ada:	2100      	movs	r1, #0
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f009 f9f5 	bl	8012ecc <USBD_LL_Transmit>

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	4613      	mov	r3, r2
 8009af8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2203      	movs	r2, #3
 8009afe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009b02:	88fa      	ldrh	r2, [r7, #6]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009b0a:	88fa      	ldrh	r2, [r7, #6]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	2100      	movs	r1, #0
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	f009 f9fa 	bl	8012f12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	4613      	mov	r3, r2
 8009b34:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b36:	88fb      	ldrh	r3, [r7, #6]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f009 f9e8 	bl	8012f12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2204      	movs	r2, #4
 8009b58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2200      	movs	r2, #0
 8009b60:	2100      	movs	r1, #0
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f009 f9b2 	bl	8012ecc <USBD_LL_Transmit>

  return USBD_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2205      	movs	r2, #5
 8009b7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b82:	2300      	movs	r3, #0
 8009b84:	2200      	movs	r2, #0
 8009b86:	2100      	movs	r1, #0
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f009 f9c2 	bl	8012f12 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	ba5b      	rev16	r3, r3
 8009ba6:	b29b      	uxth	r3, r3
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bc80      	pop	{r7}
 8009bb0:	4770      	bx	lr

08009bb2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b083      	sub	sp, #12
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	061a      	lsls	r2, r3, #24
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	021b      	lsls	r3, r3, #8
 8009bc2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	0a1b      	lsrs	r3, r3, #8
 8009bcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	0e1b      	lsrs	r3, r3, #24
 8009bd6:	4313      	orrs	r3, r2
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bc80      	pop	{r7}
 8009be0:	4770      	bx	lr

08009be2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009be2:	b580      	push	{r7, lr}
 8009be4:	b082      	sub	sp, #8
 8009be6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009be8:	2300      	movs	r3, #0
 8009bea:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009bec:	f000 f8a6 	bl	8009d3c <mem_init>
  memp_init();
 8009bf0:	f000 fb36 	bl	800a260 <memp_init>
  pbuf_init();
  netif_init();
 8009bf4:	f000 fbee 	bl	800a3d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009bf8:	f005 fff8 	bl	800fbec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009bfc:	f001 fb54 	bl	800b2a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009c00:	f005 fed6 	bl	800f9b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009c14:	4b40      	ldr	r3, [pc, #256]	@ (8009d18 <plug_holes+0x10c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d206      	bcs.n	8009c2c <plug_holes+0x20>
 8009c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8009d1c <plug_holes+0x110>)
 8009c20:	f240 125d 	movw	r2, #349	@ 0x15d
 8009c24:	493e      	ldr	r1, [pc, #248]	@ (8009d20 <plug_holes+0x114>)
 8009c26:	483f      	ldr	r0, [pc, #252]	@ (8009d24 <plug_holes+0x118>)
 8009c28:	f009 faae 	bl	8013188 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d28 <plug_holes+0x11c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d306      	bcc.n	8009c44 <plug_holes+0x38>
 8009c36:	4b39      	ldr	r3, [pc, #228]	@ (8009d1c <plug_holes+0x110>)
 8009c38:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8009c3c:	493b      	ldr	r1, [pc, #236]	@ (8009d2c <plug_holes+0x120>)
 8009c3e:	4839      	ldr	r0, [pc, #228]	@ (8009d24 <plug_holes+0x118>)
 8009c40:	f009 faa2 	bl	8013188 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	791b      	ldrb	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d006      	beq.n	8009c5a <plug_holes+0x4e>
 8009c4c:	4b33      	ldr	r3, [pc, #204]	@ (8009d1c <plug_holes+0x110>)
 8009c4e:	f240 125f 	movw	r2, #351	@ 0x15f
 8009c52:	4937      	ldr	r1, [pc, #220]	@ (8009d30 <plug_holes+0x124>)
 8009c54:	4833      	ldr	r0, [pc, #204]	@ (8009d24 <plug_holes+0x118>)
 8009c56:	f009 fa97 	bl	8013188 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009c62:	d906      	bls.n	8009c72 <plug_holes+0x66>
 8009c64:	4b2d      	ldr	r3, [pc, #180]	@ (8009d1c <plug_holes+0x110>)
 8009c66:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 8009c6a:	4932      	ldr	r1, [pc, #200]	@ (8009d34 <plug_holes+0x128>)
 8009c6c:	482d      	ldr	r0, [pc, #180]	@ (8009d24 <plug_holes+0x118>)
 8009c6e:	f009 fa8b 	bl	8013188 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8009c72:	4b29      	ldr	r3, [pc, #164]	@ (8009d18 <plug_holes+0x10c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	8812      	ldrh	r2, [r2, #0]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d01f      	beq.n	8009cc6 <plug_holes+0xba>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	791b      	ldrb	r3, [r3, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d11b      	bne.n	8009cc6 <plug_holes+0xba>
 8009c8e:	4b26      	ldr	r3, [pc, #152]	@ (8009d28 <plug_holes+0x11c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d016      	beq.n	8009cc6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009c98:	4b27      	ldr	r3, [pc, #156]	@ (8009d38 <plug_holes+0x12c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d102      	bne.n	8009ca8 <plug_holes+0x9c>
      lfree = mem;
 8009ca2:	4a25      	ldr	r2, [pc, #148]	@ (8009d38 <plug_holes+0x12c>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	881a      	ldrh	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8009cb0:	4b19      	ldr	r3, [pc, #100]	@ (8009d18 <plug_holes+0x10c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	1ad1      	subs	r1, r2, r3
 8009cb8:	4b17      	ldr	r3, [pc, #92]	@ (8009d18 <plug_holes+0x10c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	8812      	ldrh	r2, [r2, #0]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	b28a      	uxth	r2, r1
 8009cc4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8009cc6:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <plug_holes+0x10c>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	8852      	ldrh	r2, [r2, #2]
 8009cce:	4413      	add	r3, r2
 8009cd0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d01a      	beq.n	8009d10 <plug_holes+0x104>
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d116      	bne.n	8009d10 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009ce2:	4b15      	ldr	r3, [pc, #84]	@ (8009d38 <plug_holes+0x12c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d102      	bne.n	8009cf2 <plug_holes+0xe6>
      lfree = pmem;
 8009cec:	4a12      	ldr	r2, [pc, #72]	@ (8009d38 <plug_holes+0x12c>)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	881a      	ldrh	r2, [r3, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8009cfa:	4b07      	ldr	r3, [pc, #28]	@ (8009d18 <plug_holes+0x10c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	1ad1      	subs	r1, r2, r3
 8009d02:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <plug_holes+0x10c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	8812      	ldrh	r2, [r2, #0]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	b28a      	uxth	r2, r1
 8009d0e:	805a      	strh	r2, [r3, #2]
  }
}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	200051bc 	.word	0x200051bc
 8009d1c:	08014624 	.word	0x08014624
 8009d20:	08014654 	.word	0x08014654
 8009d24:	0801466c 	.word	0x0801466c
 8009d28:	200051c0 	.word	0x200051c0
 8009d2c:	08014694 	.word	0x08014694
 8009d30:	080146b0 	.word	0x080146b0
 8009d34:	080146cc 	.word	0x080146cc
 8009d38:	200051c4 	.word	0x200051c4

08009d3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009d42:	4b18      	ldr	r3, [pc, #96]	@ (8009da4 <mem_init+0x68>)
 8009d44:	3303      	adds	r3, #3
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	4b16      	ldr	r3, [pc, #88]	@ (8009da8 <mem_init+0x6c>)
 8009d4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009d50:	4b15      	ldr	r3, [pc, #84]	@ (8009da8 <mem_init+0x6c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8009d5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8009d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8009da8 <mem_init+0x6c>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8009d72:	4a0e      	ldr	r2, [pc, #56]	@ (8009dac <mem_init+0x70>)
 8009d74:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009d76:	4b0d      	ldr	r3, [pc, #52]	@ (8009dac <mem_init+0x70>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009dac <mem_init+0x70>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8009d86:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009d88:	4b08      	ldr	r3, [pc, #32]	@ (8009dac <mem_init+0x70>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8009d90:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009d92:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <mem_init+0x6c>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a06      	ldr	r2, [pc, #24]	@ (8009db0 <mem_init+0x74>)
 8009d98:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009d9a:	bf00      	nop
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr
 8009da4:	20004b68 	.word	0x20004b68
 8009da8:	200051bc 	.word	0x200051bc
 8009dac:	200051c0 	.word	0x200051c0
 8009db0:	200051c4 	.word	0x200051c4

08009db4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d043      	beq.n	8009e4a <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f003 0303 	and.w	r3, r3, #3
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d006      	beq.n	8009dda <mem_free+0x26>
 8009dcc:	4b22      	ldr	r3, [pc, #136]	@ (8009e58 <mem_free+0xa4>)
 8009dce:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8009dd2:	4922      	ldr	r1, [pc, #136]	@ (8009e5c <mem_free+0xa8>)
 8009dd4:	4822      	ldr	r0, [pc, #136]	@ (8009e60 <mem_free+0xac>)
 8009dd6:	f009 f9d7 	bl	8013188 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009dda:	4b22      	ldr	r3, [pc, #136]	@ (8009e64 <mem_free+0xb0>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d304      	bcc.n	8009dee <mem_free+0x3a>
 8009de4:	4b20      	ldr	r3, [pc, #128]	@ (8009e68 <mem_free+0xb4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d306      	bcc.n	8009dfc <mem_free+0x48>
 8009dee:	4b1a      	ldr	r3, [pc, #104]	@ (8009e58 <mem_free+0xa4>)
 8009df0:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8009df4:	491d      	ldr	r1, [pc, #116]	@ (8009e6c <mem_free+0xb8>)
 8009df6:	481a      	ldr	r0, [pc, #104]	@ (8009e60 <mem_free+0xac>)
 8009df8:	f009 f9c6 	bl	8013188 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009dfc:	4b19      	ldr	r3, [pc, #100]	@ (8009e64 <mem_free+0xb0>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d323      	bcc.n	8009e4e <mem_free+0x9a>
 8009e06:	4b18      	ldr	r3, [pc, #96]	@ (8009e68 <mem_free+0xb4>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d21e      	bcs.n	8009e4e <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3b08      	subs	r3, #8
 8009e14:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	791b      	ldrb	r3, [r3, #4]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <mem_free+0x78>
 8009e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8009e58 <mem_free+0xa4>)
 8009e20:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8009e24:	4912      	ldr	r1, [pc, #72]	@ (8009e70 <mem_free+0xbc>)
 8009e26:	480e      	ldr	r0, [pc, #56]	@ (8009e60 <mem_free+0xac>)
 8009e28:	f009 f9ae 	bl	8013188 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <mem_free+0xc0>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d202      	bcs.n	8009e42 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009e74 <mem_free+0xc0>)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009e42:	68f8      	ldr	r0, [r7, #12]
 8009e44:	f7ff fee2 	bl	8009c0c <plug_holes>
 8009e48:	e002      	b.n	8009e50 <mem_free+0x9c>
    return;
 8009e4a:	bf00      	nop
 8009e4c:	e000      	b.n	8009e50 <mem_free+0x9c>
    return;
 8009e4e:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	08014624 	.word	0x08014624
 8009e5c:	080146f8 	.word	0x080146f8
 8009e60:	0801466c 	.word	0x0801466c
 8009e64:	200051bc 	.word	0x200051bc
 8009e68:	200051c0 	.word	0x200051c0
 8009e6c:	0801471c 	.word	0x0801471c
 8009e70:	08014734 	.word	0x08014734
 8009e74:	200051c4 	.word	0x200051c4

08009e78 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8009e84:	887b      	ldrh	r3, [r7, #2]
 8009e86:	3303      	adds	r3, #3
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f023 0303 	bic.w	r3, r3, #3
 8009e8e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8009e90:	887b      	ldrh	r3, [r7, #2]
 8009e92:	2b0b      	cmp	r3, #11
 8009e94:	d801      	bhi.n	8009e9a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009e96:	230c      	movs	r3, #12
 8009e98:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8009e9a:	887b      	ldrh	r3, [r7, #2]
 8009e9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009ea0:	d901      	bls.n	8009ea6 <mem_trim+0x2e>
    return NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e0b1      	b.n	800a00a <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009ea6:	4b5b      	ldr	r3, [pc, #364]	@ (800a014 <mem_trim+0x19c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d304      	bcc.n	8009eba <mem_trim+0x42>
 8009eb0:	4b59      	ldr	r3, [pc, #356]	@ (800a018 <mem_trim+0x1a0>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d306      	bcc.n	8009ec8 <mem_trim+0x50>
 8009eba:	4b58      	ldr	r3, [pc, #352]	@ (800a01c <mem_trim+0x1a4>)
 8009ebc:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8009ec0:	4957      	ldr	r1, [pc, #348]	@ (800a020 <mem_trim+0x1a8>)
 8009ec2:	4858      	ldr	r0, [pc, #352]	@ (800a024 <mem_trim+0x1ac>)
 8009ec4:	f009 f960 	bl	8013188 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009ec8:	4b52      	ldr	r3, [pc, #328]	@ (800a014 <mem_trim+0x19c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d304      	bcc.n	8009edc <mem_trim+0x64>
 8009ed2:	4b51      	ldr	r3, [pc, #324]	@ (800a018 <mem_trim+0x1a0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d301      	bcc.n	8009ee0 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	e094      	b.n	800a00a <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	3b08      	subs	r3, #8
 8009ee4:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009ee6:	4b4b      	ldr	r3, [pc, #300]	@ (800a014 <mem_trim+0x19c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	881a      	ldrh	r2, [r3, #0]
 8009ef4:	8a7b      	ldrh	r3, [r7, #18]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b08      	subs	r3, #8
 8009efc:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009efe:	887a      	ldrh	r2, [r7, #2]
 8009f00:	8a3b      	ldrh	r3, [r7, #16]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d906      	bls.n	8009f14 <mem_trim+0x9c>
 8009f06:	4b45      	ldr	r3, [pc, #276]	@ (800a01c <mem_trim+0x1a4>)
 8009f08:	f240 2206 	movw	r2, #518	@ 0x206
 8009f0c:	4946      	ldr	r1, [pc, #280]	@ (800a028 <mem_trim+0x1b0>)
 8009f0e:	4845      	ldr	r0, [pc, #276]	@ (800a024 <mem_trim+0x1ac>)
 8009f10:	f009 f93a 	bl	8013188 <iprintf>
  if (newsize > size) {
 8009f14:	887a      	ldrh	r2, [r7, #2]
 8009f16:	8a3b      	ldrh	r3, [r7, #16]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d901      	bls.n	8009f20 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e074      	b.n	800a00a <mem_trim+0x192>
  }
  if (newsize == size) {
 8009f20:	887a      	ldrh	r2, [r7, #2]
 8009f22:	8a3b      	ldrh	r3, [r7, #16]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d101      	bne.n	8009f2c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	e06e      	b.n	800a00a <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8009f2c:	4b39      	ldr	r3, [pc, #228]	@ (800a014 <mem_trim+0x19c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	8812      	ldrh	r2, [r2, #0]
 8009f34:	4413      	add	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	791b      	ldrb	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d131      	bne.n	8009fa4 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009f46:	8a7a      	ldrh	r2, [r7, #18]
 8009f48:	887b      	ldrh	r3, [r7, #2]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3308      	adds	r3, #8
 8009f50:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8009f52:	4b36      	ldr	r3, [pc, #216]	@ (800a02c <mem_trim+0x1b4>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d105      	bne.n	8009f68 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8009f5c:	4b2d      	ldr	r3, [pc, #180]	@ (800a014 <mem_trim+0x19c>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	897b      	ldrh	r3, [r7, #10]
 8009f62:	4413      	add	r3, r2
 8009f64:	4a31      	ldr	r2, [pc, #196]	@ (800a02c <mem_trim+0x1b4>)
 8009f66:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009f68:	4b2a      	ldr	r3, [pc, #168]	@ (800a014 <mem_trim+0x19c>)
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	897b      	ldrh	r3, [r7, #10]
 8009f6e:	4413      	add	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	893a      	ldrh	r2, [r7, #8]
 8009f7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	8a7a      	ldrh	r2, [r7, #18]
 8009f82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	897a      	ldrh	r2, [r7, #10]
 8009f88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009f92:	d039      	beq.n	800a008 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009f94:	4b1f      	ldr	r3, [pc, #124]	@ (800a014 <mem_trim+0x19c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	8812      	ldrh	r2, [r2, #0]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	897a      	ldrh	r2, [r7, #10]
 8009fa0:	805a      	strh	r2, [r3, #2]
 8009fa2:	e031      	b.n	800a008 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009fa4:	887b      	ldrh	r3, [r7, #2]
 8009fa6:	f103 0214 	add.w	r2, r3, #20
 8009faa:	8a3b      	ldrh	r3, [r7, #16]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d82b      	bhi.n	800a008 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009fb0:	8a7a      	ldrh	r2, [r7, #18]
 8009fb2:	887b      	ldrh	r3, [r7, #2]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3308      	adds	r3, #8
 8009fba:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009fbc:	4b15      	ldr	r3, [pc, #84]	@ (800a014 <mem_trim+0x19c>)
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	897b      	ldrh	r3, [r7, #10]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8009fc6:	4b19      	ldr	r3, [pc, #100]	@ (800a02c <mem_trim+0x1b4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d202      	bcs.n	8009fd6 <mem_trim+0x15e>
      lfree = mem2;
 8009fd0:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <mem_trim+0x1b4>)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	881a      	ldrh	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	8a7a      	ldrh	r2, [r7, #18]
 8009fe8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	897a      	ldrh	r2, [r7, #10]
 8009fee:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8009ff8:	d006      	beq.n	800a008 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009ffa:	4b06      	ldr	r3, [pc, #24]	@ (800a014 <mem_trim+0x19c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	8812      	ldrh	r2, [r2, #0]
 800a002:	4413      	add	r3, r2
 800a004:	897a      	ldrh	r2, [r7, #10]
 800a006:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a008:	687b      	ldr	r3, [r7, #4]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200051bc 	.word	0x200051bc
 800a018:	200051c0 	.word	0x200051c0
 800a01c:	08014624 	.word	0x08014624
 800a020:	08014748 	.word	0x08014748
 800a024:	0801466c 	.word	0x0801466c
 800a028:	08014760 	.word	0x08014760
 800a02c:	200051c4 	.word	0x200051c4

0800a030 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <mem_malloc+0x14>
    return NULL;
 800a040:	2300      	movs	r3, #0
 800a042:	e0c7      	b.n	800a1d4 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	3303      	adds	r3, #3
 800a048:	b29b      	uxth	r3, r3
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	2b0b      	cmp	r3, #11
 800a054:	d801      	bhi.n	800a05a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a056:	230c      	movs	r3, #12
 800a058:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a060:	d901      	bls.n	800a066 <mem_malloc+0x36>
    return NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	e0b6      	b.n	800a1d4 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800a066:	4b5d      	ldr	r3, [pc, #372]	@ (800a1dc <mem_malloc+0x1ac>)
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	4b5d      	ldr	r3, [pc, #372]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	83fb      	strh	r3, [r7, #30]
 800a072:	e0a7      	b.n	800a1c4 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800a074:	4b5a      	ldr	r3, [pc, #360]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	8bfb      	ldrh	r3, [r7, #30]
 800a07a:	4413      	add	r3, r2
 800a07c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	791b      	ldrb	r3, [r3, #4]
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 8098 	bne.w	800a1b8 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	8bfb      	ldrh	r3, [r7, #30]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	f1a3 0208 	sub.w	r2, r3, #8
 800a096:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800a098:	429a      	cmp	r2, r3
 800a09a:	f0c0 808d 	bcc.w	800a1b8 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	8bfb      	ldrh	r3, [r7, #30]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	f1a3 0208 	sub.w	r2, r3, #8
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	3314      	adds	r3, #20
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d327      	bcc.n	800a104 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800a0b4:	8bfa      	ldrh	r2, [r7, #30]
 800a0b6:	88fb      	ldrh	r3, [r7, #6]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3308      	adds	r3, #8
 800a0be:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800a0c0:	4b47      	ldr	r3, [pc, #284]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	8a7b      	ldrh	r3, [r7, #18]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	881a      	ldrh	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8bfa      	ldrh	r2, [r7, #30]
 800a0dc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	8a7a      	ldrh	r2, [r7, #18]
 800a0e2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800a0f2:	d00a      	beq.n	800a10a <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a0f4:	4b3a      	ldr	r3, [pc, #232]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	8812      	ldrh	r2, [r2, #0]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	8a7a      	ldrh	r2, [r7, #18]
 800a100:	805a      	strh	r2, [r3, #2]
 800a102:	e002      	b.n	800a10a <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	2201      	movs	r2, #1
 800a108:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a10a:	4b34      	ldr	r3, [pc, #208]	@ (800a1dc <mem_malloc+0x1ac>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	429a      	cmp	r2, r3
 800a112:	d127      	bne.n	800a164 <mem_malloc+0x134>
          struct mem *cur = lfree;
 800a114:	4b31      	ldr	r3, [pc, #196]	@ (800a1dc <mem_malloc+0x1ac>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a11a:	e005      	b.n	800a128 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800a11c:	4b30      	ldr	r3, [pc, #192]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69ba      	ldr	r2, [r7, #24]
 800a122:	8812      	ldrh	r2, [r2, #0]
 800a124:	4413      	add	r3, r2
 800a126:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	791b      	ldrb	r3, [r3, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d004      	beq.n	800a13a <mem_malloc+0x10a>
 800a130:	4b2c      	ldr	r3, [pc, #176]	@ (800a1e4 <mem_malloc+0x1b4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	69ba      	ldr	r2, [r7, #24]
 800a136:	429a      	cmp	r2, r3
 800a138:	d1f0      	bne.n	800a11c <mem_malloc+0xec>
          }
          lfree = cur;
 800a13a:	4a28      	ldr	r2, [pc, #160]	@ (800a1dc <mem_malloc+0x1ac>)
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a140:	4b26      	ldr	r3, [pc, #152]	@ (800a1dc <mem_malloc+0x1ac>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	4b27      	ldr	r3, [pc, #156]	@ (800a1e4 <mem_malloc+0x1b4>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d00b      	beq.n	800a164 <mem_malloc+0x134>
 800a14c:	4b23      	ldr	r3, [pc, #140]	@ (800a1dc <mem_malloc+0x1ac>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	791b      	ldrb	r3, [r3, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d006      	beq.n	800a164 <mem_malloc+0x134>
 800a156:	4b24      	ldr	r3, [pc, #144]	@ (800a1e8 <mem_malloc+0x1b8>)
 800a158:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800a15c:	4923      	ldr	r1, [pc, #140]	@ (800a1ec <mem_malloc+0x1bc>)
 800a15e:	4824      	ldr	r0, [pc, #144]	@ (800a1f0 <mem_malloc+0x1c0>)
 800a160:	f009 f812 	bl	8013188 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a164:	88fa      	ldrh	r2, [r7, #6]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	4413      	add	r3, r2
 800a16a:	3308      	adds	r3, #8
 800a16c:	4a1d      	ldr	r2, [pc, #116]	@ (800a1e4 <mem_malloc+0x1b4>)
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	4293      	cmp	r3, r2
 800a172:	d906      	bls.n	800a182 <mem_malloc+0x152>
 800a174:	4b1c      	ldr	r3, [pc, #112]	@ (800a1e8 <mem_malloc+0x1b8>)
 800a176:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800a17a:	491e      	ldr	r1, [pc, #120]	@ (800a1f4 <mem_malloc+0x1c4>)
 800a17c:	481c      	ldr	r0, [pc, #112]	@ (800a1f0 <mem_malloc+0x1c0>)
 800a17e:	f009 f803 	bl	8013188 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f003 0303 	and.w	r3, r3, #3
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d006      	beq.n	800a19a <mem_malloc+0x16a>
 800a18c:	4b16      	ldr	r3, [pc, #88]	@ (800a1e8 <mem_malloc+0x1b8>)
 800a18e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800a192:	4919      	ldr	r1, [pc, #100]	@ (800a1f8 <mem_malloc+0x1c8>)
 800a194:	4816      	ldr	r0, [pc, #88]	@ (800a1f0 <mem_malloc+0x1c0>)
 800a196:	f008 fff7 	bl	8013188 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d006      	beq.n	800a1b2 <mem_malloc+0x182>
 800a1a4:	4b10      	ldr	r3, [pc, #64]	@ (800a1e8 <mem_malloc+0x1b8>)
 800a1a6:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800a1aa:	4914      	ldr	r1, [pc, #80]	@ (800a1fc <mem_malloc+0x1cc>)
 800a1ac:	4810      	ldr	r0, [pc, #64]	@ (800a1f0 <mem_malloc+0x1c0>)
 800a1ae:	f008 ffeb 	bl	8013188 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	e00d      	b.n	800a1d4 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800a1b8:	4b09      	ldr	r3, [pc, #36]	@ (800a1e0 <mem_malloc+0x1b0>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	8bfb      	ldrh	r3, [r7, #30]
 800a1be:	4413      	add	r3, r2
 800a1c0:	881b      	ldrh	r3, [r3, #0]
 800a1c2:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800a1c4:	8bfa      	ldrh	r2, [r7, #30]
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	f4ff af51 	bcc.w	800a074 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3720      	adds	r7, #32
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	200051c4 	.word	0x200051c4
 800a1e0:	200051bc 	.word	0x200051bc
 800a1e4:	200051c0 	.word	0x200051c0
 800a1e8:	08014624 	.word	0x08014624
 800a1ec:	08014780 	.word	0x08014780
 800a1f0:	0801466c 	.word	0x0801466c
 800a1f4:	0801479c 	.word	0x0801479c
 800a1f8:	080147cc 	.word	0x080147cc
 800a1fc:	080147fc 	.word	0x080147fc

0800a200 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	3303      	adds	r3, #3
 800a216:	f023 0303 	bic.w	r3, r3, #3
 800a21a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e011      	b.n	800a246 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	3301      	adds	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	461a      	mov	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4293      	cmp	r3, r2
 800a250:	dbe7      	blt.n	800a222 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a252:	bf00      	nop
 800a254:	bf00      	nop
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	bc80      	pop	{r7}
 800a25c:	4770      	bx	lr
	...

0800a260 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a266:	2300      	movs	r3, #0
 800a268:	80fb      	strh	r3, [r7, #6]
 800a26a:	e009      	b.n	800a280 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	4a08      	ldr	r2, [pc, #32]	@ (800a290 <memp_init+0x30>)
 800a270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ffc3 	bl	800a200 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a27a:	88fb      	ldrh	r3, [r7, #6]
 800a27c:	3301      	adds	r3, #1
 800a27e:	80fb      	strh	r3, [r7, #6]
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	2b08      	cmp	r3, #8
 800a284:	d9f2      	bls.n	800a26c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	08016374 	.word	0x08016374

0800a294 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d012      	beq.n	800a2d0 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d006      	beq.n	800a2cc <do_memp_malloc_pool+0x38>
 800a2be:	4b07      	ldr	r3, [pc, #28]	@ (800a2dc <do_memp_malloc_pool+0x48>)
 800a2c0:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800a2c4:	4906      	ldr	r1, [pc, #24]	@ (800a2e0 <do_memp_malloc_pool+0x4c>)
 800a2c6:	4807      	ldr	r0, [pc, #28]	@ (800a2e4 <do_memp_malloc_pool+0x50>)
 800a2c8:	f008 ff5e 	bl	8013188 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	e000      	b.n	800a2d2 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	08014820 	.word	0x08014820
 800a2e0:	08014850 	.word	0x08014850
 800a2e4:	08014874 	.word	0x08014874

0800a2e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a2f2:	79fb      	ldrb	r3, [r7, #7]
 800a2f4:	2b08      	cmp	r3, #8
 800a2f6:	d908      	bls.n	800a30a <memp_malloc+0x22>
 800a2f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a324 <memp_malloc+0x3c>)
 800a2fa:	f240 1287 	movw	r2, #391	@ 0x187
 800a2fe:	490a      	ldr	r1, [pc, #40]	@ (800a328 <memp_malloc+0x40>)
 800a300:	480a      	ldr	r0, [pc, #40]	@ (800a32c <memp_malloc+0x44>)
 800a302:	f008 ff41 	bl	8013188 <iprintf>
 800a306:	2300      	movs	r3, #0
 800a308:	e008      	b.n	800a31c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	4a08      	ldr	r2, [pc, #32]	@ (800a330 <memp_malloc+0x48>)
 800a30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff ffbe 	bl	800a294 <do_memp_malloc_pool>
 800a318:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a31a:	68fb      	ldr	r3, [r7, #12]
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}
 800a324:	08014820 	.word	0x08014820
 800a328:	080148b0 	.word	0x080148b0
 800a32c:	08014874 	.word	0x08014874
 800a330:	08016374 	.word	0x08016374

0800a334 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d006      	beq.n	800a356 <do_memp_free_pool+0x22>
 800a348:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <do_memp_free_pool+0x40>)
 800a34a:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a34e:	490a      	ldr	r1, [pc, #40]	@ (800a378 <do_memp_free_pool+0x44>)
 800a350:	480a      	ldr	r0, [pc, #40]	@ (800a37c <do_memp_free_pool+0x48>)
 800a352:	f008 ff19 	bl	8013188 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a36c:	bf00      	nop
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	08014820 	.word	0x08014820
 800a378:	080148d0 	.word	0x080148d0
 800a37c:	08014874 	.word	0x08014874

0800a380 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b08      	cmp	r3, #8
 800a390:	d907      	bls.n	800a3a2 <memp_free+0x22>
 800a392:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c4 <memp_free+0x44>)
 800a394:	f240 12db 	movw	r2, #475	@ 0x1db
 800a398:	490b      	ldr	r1, [pc, #44]	@ (800a3c8 <memp_free+0x48>)
 800a39a:	480c      	ldr	r0, [pc, #48]	@ (800a3cc <memp_free+0x4c>)
 800a39c:	f008 fef4 	bl	8013188 <iprintf>
 800a3a0:	e00c      	b.n	800a3bc <memp_free+0x3c>

  if (mem == NULL) {
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d008      	beq.n	800a3ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	4a09      	ldr	r2, [pc, #36]	@ (800a3d0 <memp_free+0x50>)
 800a3ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b0:	6839      	ldr	r1, [r7, #0]
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff ffbe 	bl	800a334 <do_memp_free_pool>
 800a3b8:	e000      	b.n	800a3bc <memp_free+0x3c>
    return;
 800a3ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	08014820 	.word	0x08014820
 800a3c8:	080148f0 	.word	0x080148f0
 800a3cc:	08014874 	.word	0x08014874
 800a3d0:	08016374 	.word	0x08016374

0800a3d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a3d8:	bf00      	nop
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr

0800a3e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d105      	bne.n	800a400 <netif_add+0x20>
 800a3f4:	4b21      	ldr	r3, [pc, #132]	@ (800a47c <netif_add+0x9c>)
 800a3f6:	22fb      	movs	r2, #251	@ 0xfb
 800a3f8:	4921      	ldr	r1, [pc, #132]	@ (800a480 <netif_add+0xa0>)
 800a3fa:	4822      	ldr	r0, [pc, #136]	@ (800a484 <netif_add+0xa4>)
 800a3fc:	f008 fec4 	bl	8013188 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2203      	movs	r2, #3
 800a41e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	69ba      	ldr	r2, [r7, #24]
 800a42c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800a42e:	4b16      	ldr	r3, [pc, #88]	@ (800a488 <netif_add+0xa8>)
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	b2d1      	uxtb	r1, r2
 800a436:	4a14      	ldr	r2, [pc, #80]	@ (800a488 <netif_add+0xa8>)
 800a438:	7011      	strb	r1, [r2, #0]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6a3a      	ldr	r2, [r7, #32]
 800a444:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	68b9      	ldr	r1, [r7, #8]
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 f81f 	bl	800a490 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	68f8      	ldr	r0, [r7, #12]
 800a456:	4798      	blx	r3
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <netif_add+0x82>
    return NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	e007      	b.n	800a472 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a462:	4b0a      	ldr	r3, [pc, #40]	@ (800a48c <netif_add+0xac>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a46a:	4a08      	ldr	r2, [pc, #32]	@ (800a48c <netif_add+0xac>)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800a470:	68fb      	ldr	r3, [r7, #12]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	0801490c 	.word	0x0801490c
 800a480:	08014940 	.word	0x08014940
 800a484:	08014958 	.word	0x08014958
 800a488:	200080a8 	.word	0x200080a8
 800a48c:	200080a0 	.word	0x200080a0

0800a490 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <netif_set_addr+0x1c>
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10c      	bne.n	800a4c6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800a4ac:	68b9      	ldr	r1, [r7, #8]
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 f81a 	bl	800a4e8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f861 	bl	800a57e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800a4bc:	6839      	ldr	r1, [r7, #0]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f000 f84a 	bl	800a558 <netif_set_gw>
 800a4c4:	e00c      	b.n	800a4e0 <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800a4c6:	6879      	ldr	r1, [r7, #4]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 f858 	bl	800a57e <netif_set_netmask>
    netif_set_gw(netif, gw);
 800a4ce:	6839      	ldr	r1, [r7, #0]
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f000 f841 	bl	800a558 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f000 f805 	bl	800a4e8 <netif_set_ipaddr>
  }
}
 800a4de:	bf00      	nop
 800a4e0:	bf00      	nop
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d003      	beq.n	800a500 <netif_set_ipaddr+0x18>
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e002      	b.n	800a506 <netif_set_ipaddr+0x1e>
 800a500:	4b14      	ldr	r3, [pc, #80]	@ (800a554 <netif_set_ipaddr+0x6c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3304      	adds	r3, #4
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d01c      	beq.n	800a54c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3304      	adds	r3, #4
 800a516:	f107 020c 	add.w	r2, r7, #12
 800a51a:	4611      	mov	r1, r2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f002 f859 	bl	800c5d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3304      	adds	r3, #4
 800a526:	f107 020c 	add.w	r2, r7, #12
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f005 fe9f 	bl	8010270 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d002      	beq.n	800a53e <netif_set_ipaddr+0x56>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	e000      	b.n	800a540 <netif_set_ipaddr+0x58>
 800a53e:	2300      	movs	r3, #0
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a544:	2101      	movs	r1, #1
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 f85d 	bl	800a606 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	080163d8 	.word	0x080163d8

0800a558 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <netif_set_gw+0x16>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	e000      	b.n	800a570 <netif_set_gw+0x18>
 800a56e:	2300      	movs	r3, #0
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc80      	pop	{r7}
 800a57c:	4770      	bx	lr

0800a57e <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <netif_set_netmask+0x16>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	e000      	b.n	800a596 <netif_set_netmask+0x18>
 800a594:	2300      	movs	r3, #0
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bc80      	pop	{r7}
 800a5a2:	4770      	bx	lr

0800a5a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a5ac:	4a03      	ldr	r2, [pc, #12]	@ (800a5bc <netif_set_default+0x18>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr
 800a5bc:	200080a4 	.word	0x200080a4

0800a5c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d113      	bne.n	800a5fe <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a5dc:	f043 0301 	orr.w	r3, r3, #1
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d003      	beq.n	800a5fe <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800a5f6:	2103      	movs	r1, #3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f804 	bl	800a606 <netif_issue_reports>
    }
  }
}
 800a5fe:	bf00      	nop
 800a600:	3708      	adds	r7, #8
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	460b      	mov	r3, r1
 800a610:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a612:	78fb      	ldrb	r3, [r7, #3]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d011      	beq.n	800a640 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00c      	beq.n	800a640 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a62c:	f003 0308 	and.w	r3, r3, #8
 800a630:	2b00      	cmp	r3, #0
 800a632:	d005      	beq.n	800a640 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3304      	adds	r3, #4
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f006 fd18 	bl	8011070 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  if (netif) {
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	61da      	str	r2, [r3, #28]
  }
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	bc80      	pop	{r7}
 800a666:	4770      	bx	lr

0800a668 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a66e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <pbuf_free_ooseq+0x40>)
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a674:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <pbuf_free_ooseq+0x44>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	607b      	str	r3, [r7, #4]
 800a67a:	e00f      	b.n	800a69c <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fce0 	bl	800c04e <tcp_segs_free>
      pcb->ooseq = NULL;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 800a694:	e005      	b.n	800a6a2 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	607b      	str	r3, [r7, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1ec      	bne.n	800a67c <pbuf_free_ooseq+0x14>
    }
  }
}
 800a6a2:	3708      	adds	r7, #8
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	200080a9 	.word	0x200080a9
 800a6ac:	200080b8 	.word	0x200080b8

0800a6b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800a6b4:	4b03      	ldr	r3, [pc, #12]	@ (800a6c4 <pbuf_pool_is_empty+0x14>)
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a6ba:	bf00      	nop
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bc80      	pop	{r7}
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	200080a9 	.word	0x200080a9

0800a6c8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b088      	sub	sp, #32
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	71fb      	strb	r3, [r7, #7]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	80bb      	strh	r3, [r7, #4]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d81c      	bhi.n	800a71a <pbuf_alloc+0x52>
 800a6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e8 <pbuf_alloc+0x20>)
 800a6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e6:	bf00      	nop
 800a6e8:	0800a6fd 	.word	0x0800a6fd
 800a6ec:	0800a703 	.word	0x0800a703
 800a6f0:	0800a709 	.word	0x0800a709
 800a6f4:	0800a70f 	.word	0x0800a70f
 800a6f8:	0800a715 	.word	0x0800a715
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a6fc:	2336      	movs	r3, #54	@ 0x36
 800a6fe:	82fb      	strh	r3, [r7, #22]
    break;
 800a700:	e014      	b.n	800a72c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a702:	2322      	movs	r3, #34	@ 0x22
 800a704:	82fb      	strh	r3, [r7, #22]
    break;
 800a706:	e011      	b.n	800a72c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a708:	230e      	movs	r3, #14
 800a70a:	82fb      	strh	r3, [r7, #22]
    break;
 800a70c:	e00e      	b.n	800a72c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a70e:	2300      	movs	r3, #0
 800a710:	82fb      	strh	r3, [r7, #22]
    break;
 800a712:	e00b      	b.n	800a72c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	82fb      	strh	r3, [r7, #22]
    break;
 800a718:	e008      	b.n	800a72c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800a71a:	4ba1      	ldr	r3, [pc, #644]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a71c:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800a720:	49a0      	ldr	r1, [pc, #640]	@ (800a9a4 <pbuf_alloc+0x2dc>)
 800a722:	48a1      	ldr	r0, [pc, #644]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a724:	f008 fd30 	bl	8013188 <iprintf>
    return NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	e15c      	b.n	800a9e6 <pbuf_alloc+0x31e>
  }

  switch (type) {
 800a72c:	79bb      	ldrb	r3, [r7, #6]
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d00d      	beq.n	800a74e <pbuf_alloc+0x86>
 800a732:	2b03      	cmp	r3, #3
 800a734:	f300 8146 	bgt.w	800a9c4 <pbuf_alloc+0x2fc>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 80d0 	beq.w	800a8de <pbuf_alloc+0x216>
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f2c0 8140 	blt.w	800a9c4 <pbuf_alloc+0x2fc>
 800a744:	3b01      	subs	r3, #1
 800a746:	2b01      	cmp	r3, #1
 800a748:	f200 813c 	bhi.w	800a9c4 <pbuf_alloc+0x2fc>
 800a74c:	e10d      	b.n	800a96a <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a74e:	2008      	movs	r0, #8
 800a750:	f7ff fdca 	bl	800a2e8 <memp_malloc>
 800a754:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d103      	bne.n	800a764 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800a75c:	f7ff ffa8 	bl	800a6b0 <pbuf_pool_is_empty>
      return NULL;
 800a760:	2300      	movs	r3, #0
 800a762:	e140      	b.n	800a9e6 <pbuf_alloc+0x31e>
    }
    p->type = type;
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	79ba      	ldrb	r2, [r7, #6]
 800a768:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800a770:	8afb      	ldrh	r3, [r7, #22]
 800a772:	3310      	adds	r3, #16
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	3303      	adds	r3, #3
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	461a      	mov	r2, r3
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f003 0303 	and.w	r3, r3, #3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d006      	beq.n	800a79e <pbuf_alloc+0xd6>
 800a790:	4b83      	ldr	r3, [pc, #524]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a792:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a796:	4985      	ldr	r1, [pc, #532]	@ (800a9ac <pbuf_alloc+0x2e4>)
 800a798:	4883      	ldr	r0, [pc, #524]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a79a:	f008 fcf5 	bl	8013188 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	88ba      	ldrh	r2, [r7, #4]
 800a7a2:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800a7a4:	8afb      	ldrh	r3, [r7, #22]
 800a7a6:	3303      	adds	r3, #3
 800a7a8:	f023 0303 	bic.w	r3, r3, #3
 800a7ac:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 800a7b0:	88bb      	ldrh	r3, [r7, #4]
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	bf28      	it	cs
 800a7b6:	4613      	movcs	r3, r2
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	69fa      	ldr	r2, [r7, #28]
 800a7c4:	8952      	ldrh	r2, [r2, #10]
 800a7c6:	441a      	add	r2, r3
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d906      	bls.n	800a7e0 <pbuf_alloc+0x118>
 800a7d2:	4b73      	ldr	r3, [pc, #460]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a7d4:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800a7d8:	4975      	ldr	r1, [pc, #468]	@ (800a9b0 <pbuf_alloc+0x2e8>)
 800a7da:	4873      	ldr	r0, [pc, #460]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a7dc:	f008 fcd4 	bl	8013188 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a7e0:	8afb      	ldrh	r3, [r7, #22]
 800a7e2:	3303      	adds	r3, #3
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800a7ec:	d106      	bne.n	800a7fc <pbuf_alloc+0x134>
 800a7ee:	4b6c      	ldr	r3, [pc, #432]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a7f0:	f240 1231 	movw	r2, #305	@ 0x131
 800a7f4:	496f      	ldr	r1, [pc, #444]	@ (800a9b4 <pbuf_alloc+0x2ec>)
 800a7f6:	486c      	ldr	r0, [pc, #432]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a7f8:	f008 fcc6 	bl	8013188 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2201      	movs	r2, #1
 800a800:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800a806:	88bb      	ldrh	r3, [r7, #4]
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	8952      	ldrh	r2, [r2, #10]
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800a810:	e061      	b.n	800a8d6 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a812:	2008      	movs	r0, #8
 800a814:	f7ff fd68 	bl	800a2e8 <memp_malloc>
 800a818:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d106      	bne.n	800a82e <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800a820:	f7ff ff46 	bl	800a6b0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800a824:	69f8      	ldr	r0, [r7, #28]
 800a826:	f000 fac7 	bl	800adb8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800a82a:	2300      	movs	r3, #0
 800a82c:	e0db      	b.n	800a9e6 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	79ba      	ldrb	r2, [r7, #6]
 800a832:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a84c:	4293      	cmp	r3, r2
 800a84e:	dd06      	ble.n	800a85e <pbuf_alloc+0x196>
 800a850:	4b53      	ldr	r3, [pc, #332]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a852:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800a856:	4958      	ldr	r1, [pc, #352]	@ (800a9b8 <pbuf_alloc+0x2f0>)
 800a858:	4853      	ldr	r0, [pc, #332]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a85a:	f008 fc95 	bl	8013188 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	b29a      	uxth	r2, r3
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800a86e:	bf28      	it	cs
 800a870:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f103 0210 	add.w	r2, r3, #16
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	f003 0303 	and.w	r3, r3, #3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d006      	beq.n	800a89e <pbuf_alloc+0x1d6>
 800a890:	4b43      	ldr	r3, [pc, #268]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a892:	f240 1251 	movw	r2, #337	@ 0x151
 800a896:	4949      	ldr	r1, [pc, #292]	@ (800a9bc <pbuf_alloc+0x2f4>)
 800a898:	4843      	ldr	r0, [pc, #268]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a89a:	f008 fc75 	bl	8013188 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	8952      	ldrh	r2, [r2, #10]
 800a8a6:	441a      	add	r2, r3
 800a8a8:	69fb      	ldr	r3, [r7, #28]
 800a8aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d906      	bls.n	800a8c0 <pbuf_alloc+0x1f8>
 800a8b2:	4b3b      	ldr	r3, [pc, #236]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a8b4:	f240 1253 	movw	r2, #339	@ 0x153
 800a8b8:	493d      	ldr	r1, [pc, #244]	@ (800a9b0 <pbuf_alloc+0x2e8>)
 800a8ba:	483b      	ldr	r0, [pc, #236]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a8bc:	f008 fc64 	bl	8013188 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	895b      	ldrh	r3, [r3, #10]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	dc9a      	bgt.n	800a812 <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800a8dc:	e07c      	b.n	800a9d8 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800a8de:	8afb      	ldrh	r3, [r7, #22]
 800a8e0:	3313      	adds	r3, #19
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f023 0303 	bic.w	r3, r3, #3
 800a8e8:	b29a      	uxth	r2, r3
 800a8ea:	88bb      	ldrh	r3, [r7, #4]
 800a8ec:	3303      	adds	r3, #3
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f023 0303 	bic.w	r3, r3, #3
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800a8fa:	897a      	ldrh	r2, [r7, #10]
 800a8fc:	88bb      	ldrh	r3, [r7, #4]
 800a8fe:	3303      	adds	r3, #3
 800a900:	f023 0303 	bic.w	r3, r3, #3
 800a904:	429a      	cmp	r2, r3
 800a906:	d201      	bcs.n	800a90c <pbuf_alloc+0x244>
        return NULL;
 800a908:	2300      	movs	r3, #0
 800a90a:	e06c      	b.n	800a9e6 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800a90c:	897b      	ldrh	r3, [r7, #10]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fb8e 	bl	800a030 <mem_malloc>
 800a914:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <pbuf_alloc+0x258>
      return NULL;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e062      	b.n	800a9e6 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800a920:	8afb      	ldrh	r3, [r7, #22]
 800a922:	3310      	adds	r3, #16
 800a924:	69fa      	ldr	r2, [r7, #28]
 800a926:	4413      	add	r3, r2
 800a928:	3303      	adds	r3, #3
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	461a      	mov	r2, r3
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	88ba      	ldrh	r2, [r7, #4]
 800a938:	811a      	strh	r2, [r3, #8]
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	891a      	ldrh	r2, [r3, #8]
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	2200      	movs	r2, #0
 800a946:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	79ba      	ldrb	r2, [r7, #6]
 800a94c:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d03d      	beq.n	800a9d6 <pbuf_alloc+0x30e>
 800a95a:	4b11      	ldr	r3, [pc, #68]	@ (800a9a0 <pbuf_alloc+0x2d8>)
 800a95c:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 800a960:	4917      	ldr	r1, [pc, #92]	@ (800a9c0 <pbuf_alloc+0x2f8>)
 800a962:	4811      	ldr	r0, [pc, #68]	@ (800a9a8 <pbuf_alloc+0x2e0>)
 800a964:	f008 fc10 	bl	8013188 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800a968:	e035      	b.n	800a9d6 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a96a:	2007      	movs	r0, #7
 800a96c:	f7ff fcbc 	bl	800a2e8 <memp_malloc>
 800a970:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d101      	bne.n	800a97c <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	e034      	b.n	800a9e6 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800a97c:	69fb      	ldr	r3, [r7, #28]
 800a97e:	2200      	movs	r2, #0
 800a980:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	88ba      	ldrh	r2, [r7, #4]
 800a986:	811a      	strh	r2, [r3, #8]
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	891a      	ldrh	r2, [r3, #8]
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	79ba      	ldrb	r2, [r7, #6]
 800a99a:	731a      	strb	r2, [r3, #12]
    break;
 800a99c:	e01c      	b.n	800a9d8 <pbuf_alloc+0x310>
 800a99e:	bf00      	nop
 800a9a0:	08014980 	.word	0x08014980
 800a9a4:	080149b0 	.word	0x080149b0
 800a9a8:	080149cc 	.word	0x080149cc
 800a9ac:	080149f4 	.word	0x080149f4
 800a9b0:	08014a24 	.word	0x08014a24
 800a9b4:	08014a58 	.word	0x08014a58
 800a9b8:	08014a8c 	.word	0x08014a8c
 800a9bc:	08014aa0 	.word	0x08014aa0
 800a9c0:	08014ad0 	.word	0x08014ad0
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a9c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f0 <pbuf_alloc+0x328>)
 800a9c6:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800a9ca:	490a      	ldr	r1, [pc, #40]	@ (800a9f4 <pbuf_alloc+0x32c>)
 800a9cc:	480a      	ldr	r0, [pc, #40]	@ (800a9f8 <pbuf_alloc+0x330>)
 800a9ce:	f008 fbdb 	bl	8013188 <iprintf>
    return NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	e007      	b.n	800a9e6 <pbuf_alloc+0x31e>
    break;
 800a9d6:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800a9de:	69fb      	ldr	r3, [r7, #28]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a9e4:	69fb      	ldr	r3, [r7, #28]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3720      	adds	r7, #32
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	08014980 	.word	0x08014980
 800a9f4:	08014afc 	.word	0x08014afc
 800a9f8:	080149cc 	.word	0x080149cc

0800a9fc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	603b      	str	r3, [r7, #0]
 800aa04:	4603      	mov	r3, r0
 800aa06:	71fb      	strb	r3, [r7, #7]
 800aa08:	460b      	mov	r3, r1
 800aa0a:	80bb      	strh	r3, [r7, #4]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d81b      	bhi.n	800aa4e <pbuf_alloced_custom+0x52>
 800aa16:	a201      	add	r2, pc, #4	@ (adr r2, 800aa1c <pbuf_alloced_custom+0x20>)
 800aa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa1c:	0800aa31 	.word	0x0800aa31
 800aa20:	0800aa37 	.word	0x0800aa37
 800aa24:	0800aa3d 	.word	0x0800aa3d
 800aa28:	0800aa43 	.word	0x0800aa43
 800aa2c:	0800aa49 	.word	0x0800aa49
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800aa30:	2336      	movs	r3, #54	@ 0x36
 800aa32:	81fb      	strh	r3, [r7, #14]
    break;
 800aa34:	e014      	b.n	800aa60 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800aa36:	2322      	movs	r3, #34	@ 0x22
 800aa38:	81fb      	strh	r3, [r7, #14]
    break;
 800aa3a:	e011      	b.n	800aa60 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800aa3c:	230e      	movs	r3, #14
 800aa3e:	81fb      	strh	r3, [r7, #14]
    break;
 800aa40:	e00e      	b.n	800aa60 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800aa42:	2300      	movs	r3, #0
 800aa44:	81fb      	strh	r3, [r7, #14]
    break;
 800aa46:	e00b      	b.n	800aa60 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	81fb      	strh	r3, [r7, #14]
    break;
 800aa4c:	e008      	b.n	800aa60 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800aa4e:	4b1d      	ldr	r3, [pc, #116]	@ (800aac4 <pbuf_alloced_custom+0xc8>)
 800aa50:	f240 12c5 	movw	r2, #453	@ 0x1c5
 800aa54:	491c      	ldr	r1, [pc, #112]	@ (800aac8 <pbuf_alloced_custom+0xcc>)
 800aa56:	481d      	ldr	r0, [pc, #116]	@ (800aacc <pbuf_alloced_custom+0xd0>)
 800aa58:	f008 fb96 	bl	8013188 <iprintf>
    return NULL;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	e02d      	b.n	800aabc <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800aa60:	89fb      	ldrh	r3, [r7, #14]
 800aa62:	3303      	adds	r3, #3
 800aa64:	f023 0203 	bic.w	r2, r3, #3
 800aa68:	88bb      	ldrh	r3, [r7, #4]
 800aa6a:	441a      	add	r2, r3
 800aa6c:	8bbb      	ldrh	r3, [r7, #28]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d901      	bls.n	800aa76 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e022      	b.n	800aabc <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d008      	beq.n	800aa94 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800aa82:	89fb      	ldrh	r3, [r7, #14]
 800aa84:	3303      	adds	r3, #3
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	69ba      	ldr	r2, [r7, #24]
 800aa8c:	441a      	add	r2, r3
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	605a      	str	r2, [r3, #4]
 800aa92:	e002      	b.n	800aa9a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2202      	movs	r2, #2
 800aa9e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	88ba      	ldrh	r2, [r7, #4]
 800aaa4:	811a      	strh	r2, [r3, #8]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	891a      	ldrh	r2, [r3, #8]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	79ba      	ldrb	r2, [r7, #6]
 800aab2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2201      	movs	r2, #1
 800aab8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800aaba:	683b      	ldr	r3, [r7, #0]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	08014980 	.word	0x08014980
 800aac8:	08014b18 	.word	0x08014b18
 800aacc:	080149cc 	.word	0x080149cc

0800aad0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <pbuf_realloc+0x20>
 800aae2:	4b4b      	ldr	r3, [pc, #300]	@ (800ac10 <pbuf_realloc+0x140>)
 800aae4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800aae8:	494a      	ldr	r1, [pc, #296]	@ (800ac14 <pbuf_realloc+0x144>)
 800aaea:	484b      	ldr	r0, [pc, #300]	@ (800ac18 <pbuf_realloc+0x148>)
 800aaec:	f008 fb4c 	bl	8013188 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7b1b      	ldrb	r3, [r3, #12]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d012      	beq.n	800ab1e <pbuf_realloc+0x4e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	7b1b      	ldrb	r3, [r3, #12]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d00e      	beq.n	800ab1e <pbuf_realloc+0x4e>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7b1b      	ldrb	r3, [r3, #12]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <pbuf_realloc+0x4e>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	7b1b      	ldrb	r3, [r3, #12]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d006      	beq.n	800ab1e <pbuf_realloc+0x4e>
 800ab10:	4b3f      	ldr	r3, [pc, #252]	@ (800ac10 <pbuf_realloc+0x140>)
 800ab12:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800ab16:	4941      	ldr	r1, [pc, #260]	@ (800ac1c <pbuf_realloc+0x14c>)
 800ab18:	483f      	ldr	r0, [pc, #252]	@ (800ac18 <pbuf_realloc+0x148>)
 800ab1a:	f008 fb35 	bl	8013188 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	891b      	ldrh	r3, [r3, #8]
 800ab22:	887a      	ldrh	r2, [r7, #2]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d26e      	bcs.n	800ac06 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800ab28:	887b      	ldrh	r3, [r7, #2]
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	8912      	ldrh	r2, [r2, #8]
 800ab2e:	1a9b      	subs	r3, r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ab32:	887b      	ldrh	r3, [r7, #2]
 800ab34:	827b      	strh	r3, [r7, #18]
  q = p;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ab3a:	e025      	b.n	800ab88 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	895b      	ldrh	r3, [r3, #10]
 800ab40:	8a7a      	ldrh	r2, [r7, #18]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	dd06      	ble.n	800ab5e <pbuf_realloc+0x8e>
 800ab50:	4b2f      	ldr	r3, [pc, #188]	@ (800ac10 <pbuf_realloc+0x140>)
 800ab52:	f240 220b 	movw	r2, #523	@ 0x20b
 800ab56:	4932      	ldr	r1, [pc, #200]	@ (800ac20 <pbuf_realloc+0x150>)
 800ab58:	482f      	ldr	r0, [pc, #188]	@ (800ac18 <pbuf_realloc+0x148>)
 800ab5a:	f008 fb15 	bl	8013188 <iprintf>
    q->tot_len += (u16_t)grow;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	891a      	ldrh	r2, [r3, #8]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	4413      	add	r3, r2
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d106      	bne.n	800ab88 <pbuf_realloc+0xb8>
 800ab7a:	4b25      	ldr	r3, [pc, #148]	@ (800ac10 <pbuf_realloc+0x140>)
 800ab7c:	f240 220f 	movw	r2, #527	@ 0x20f
 800ab80:	4928      	ldr	r1, [pc, #160]	@ (800ac24 <pbuf_realloc+0x154>)
 800ab82:	4825      	ldr	r0, [pc, #148]	@ (800ac18 <pbuf_realloc+0x148>)
 800ab84:	f008 fb00 	bl	8013188 <iprintf>
  while (rem_len > q->len) {
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	895b      	ldrh	r3, [r3, #10]
 800ab8c:	8a7a      	ldrh	r2, [r7, #18]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d8d4      	bhi.n	800ab3c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	7b1b      	ldrb	r3, [r3, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d121      	bne.n	800abde <pbuf_realloc+0x10e>
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	895b      	ldrh	r3, [r3, #10]
 800ab9e:	8a7a      	ldrh	r2, [r7, #18]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d01c      	beq.n	800abde <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	7b5b      	ldrb	r3, [r3, #13]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d116      	bne.n	800abde <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	b29a      	uxth	r2, r3
 800abba:	8a7b      	ldrh	r3, [r7, #18]
 800abbc:	4413      	add	r3, r2
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	4619      	mov	r1, r3
 800abc2:	6978      	ldr	r0, [r7, #20]
 800abc4:	f7ff f958 	bl	8009e78 <mem_trim>
 800abc8:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d106      	bne.n	800abde <pbuf_realloc+0x10e>
 800abd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ac10 <pbuf_realloc+0x140>)
 800abd2:	f240 221d 	movw	r2, #541	@ 0x21d
 800abd6:	4914      	ldr	r1, [pc, #80]	@ (800ac28 <pbuf_realloc+0x158>)
 800abd8:	480f      	ldr	r0, [pc, #60]	@ (800ac18 <pbuf_realloc+0x148>)
 800abda:	f008 fad5 	bl	8013188 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	8a7a      	ldrh	r2, [r7, #18]
 800abe2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	895a      	ldrh	r2, [r3, #10]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f8dd 	bl	800adb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e000      	b.n	800ac08 <pbuf_realloc+0x138>
    return;
 800ac06:	bf00      	nop

}
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	08014980 	.word	0x08014980
 800ac14:	08014b3c 	.word	0x08014b3c
 800ac18:	080149cc 	.word	0x080149cc
 800ac1c:	08014b54 	.word	0x08014b54
 800ac20:	08014b70 	.word	0x08014b70
 800ac24:	08014b84 	.word	0x08014b84
 800ac28:	08014b9c 	.word	0x08014b9c

0800ac2c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	807b      	strh	r3, [r7, #2]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d106      	bne.n	800ac50 <pbuf_header_impl+0x24>
 800ac42:	4b46      	ldr	r3, [pc, #280]	@ (800ad5c <pbuf_header_impl+0x130>)
 800ac44:	f240 223f 	movw	r2, #575	@ 0x23f
 800ac48:	4945      	ldr	r1, [pc, #276]	@ (800ad60 <pbuf_header_impl+0x134>)
 800ac4a:	4846      	ldr	r0, [pc, #280]	@ (800ad64 <pbuf_header_impl+0x138>)
 800ac4c:	f008 fa9c 	bl	8013188 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800ac50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d002      	beq.n	800ac5e <pbuf_header_impl+0x32>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <pbuf_header_impl+0x36>
    return 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e078      	b.n	800ad54 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800ac62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	da10      	bge.n	800ac8c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800ac6a:	887b      	ldrh	r3, [r7, #2]
 800ac6c:	425b      	negs	r3, r3
 800ac6e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	895b      	ldrh	r3, [r3, #10]
 800ac74:	89fa      	ldrh	r2, [r7, #14]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d90a      	bls.n	800ac90 <pbuf_header_impl+0x64>
 800ac7a:	4b38      	ldr	r3, [pc, #224]	@ (800ad5c <pbuf_header_impl+0x130>)
 800ac7c:	f240 2247 	movw	r2, #583	@ 0x247
 800ac80:	4939      	ldr	r1, [pc, #228]	@ (800ad68 <pbuf_header_impl+0x13c>)
 800ac82:	4838      	ldr	r0, [pc, #224]	@ (800ad64 <pbuf_header_impl+0x138>)
 800ac84:	f008 fa80 	bl	8013188 <iprintf>
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e063      	b.n	800ad54 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800ac8c:	887b      	ldrh	r3, [r7, #2]
 800ac8e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	7b1b      	ldrb	r3, [r3, #12]
 800ac94:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800ac9c:	89bb      	ldrh	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <pbuf_header_impl+0x7c>
 800aca2:	89bb      	ldrh	r3, [r7, #12]
 800aca4:	2b03      	cmp	r3, #3
 800aca6:	d112      	bne.n	800acce <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acb0:	425b      	negs	r3, r3
 800acb2:	441a      	add	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	3310      	adds	r3, #16
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d238      	bcs.n	800ad36 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68ba      	ldr	r2, [r7, #8]
 800acc8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800acca:	2301      	movs	r3, #1
 800accc:	e042      	b.n	800ad54 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800acce:	89bb      	ldrh	r3, [r7, #12]
 800acd0:	2b02      	cmp	r3, #2
 800acd2:	d002      	beq.n	800acda <pbuf_header_impl+0xae>
 800acd4:	89bb      	ldrh	r3, [r7, #12]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d124      	bne.n	800ad24 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800acda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	da0d      	bge.n	800acfe <pbuf_header_impl+0xd2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	895b      	ldrh	r3, [r3, #10]
 800ace6:	89fa      	ldrh	r2, [r7, #14]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d808      	bhi.n	800acfe <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800acf4:	425b      	negs	r3, r3
 800acf6:	441a      	add	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	605a      	str	r2, [r3, #4]
 800acfc:	e011      	b.n	800ad22 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800acfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dd0b      	ble.n	800ad1e <pbuf_header_impl+0xf2>
 800ad06:	787b      	ldrb	r3, [r7, #1]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad14:	425b      	negs	r3, r3
 800ad16:	441a      	add	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
 800ad1c:	e001      	b.n	800ad22 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e018      	b.n	800ad54 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800ad22:	e008      	b.n	800ad36 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800ad24:	4b0d      	ldr	r3, [pc, #52]	@ (800ad5c <pbuf_header_impl+0x130>)
 800ad26:	f240 2277 	movw	r2, #631	@ 0x277
 800ad2a:	4910      	ldr	r1, [pc, #64]	@ (800ad6c <pbuf_header_impl+0x140>)
 800ad2c:	480d      	ldr	r0, [pc, #52]	@ (800ad64 <pbuf_header_impl+0x138>)
 800ad2e:	f008 fa2b 	bl	8013188 <iprintf>
    return 1;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e00e      	b.n	800ad54 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	895a      	ldrh	r2, [r3, #10]
 800ad3a:	887b      	ldrh	r3, [r7, #2]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	b29a      	uxth	r2, r3
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	891a      	ldrh	r2, [r3, #8]
 800ad48:	887b      	ldrh	r3, [r7, #2]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	08014980 	.word	0x08014980
 800ad60:	08014bb8 	.word	0x08014bb8
 800ad64:	080149cc 	.word	0x080149cc
 800ad68:	08014bc4 	.word	0x08014bc4
 800ad6c:	08014be4 	.word	0x08014be4

0800ad70 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800ad7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ad80:	2200      	movs	r2, #0
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7ff ff51 	bl	800ac2c <pbuf_header_impl>
 800ad8a:	4603      	mov	r3, r0
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800ada0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ada4:	2201      	movs	r2, #1
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ff3f 	bl	800ac2c <pbuf_header_impl>
 800adae:	4603      	mov	r3, r0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10b      	bne.n	800adde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d106      	bne.n	800adda <pbuf_free+0x22>
 800adcc:	4b3e      	ldr	r3, [pc, #248]	@ (800aec8 <pbuf_free+0x110>)
 800adce:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800add2:	493e      	ldr	r1, [pc, #248]	@ (800aecc <pbuf_free+0x114>)
 800add4:	483e      	ldr	r0, [pc, #248]	@ (800aed0 <pbuf_free+0x118>)
 800add6:	f008 f9d7 	bl	8013188 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800adda:	2300      	movs	r3, #0
 800addc:	e070      	b.n	800aec0 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7b1b      	ldrb	r3, [r3, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d012      	beq.n	800ae0c <pbuf_free+0x54>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	7b1b      	ldrb	r3, [r3, #12]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d00e      	beq.n	800ae0c <pbuf_free+0x54>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	7b1b      	ldrb	r3, [r3, #12]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d00a      	beq.n	800ae0c <pbuf_free+0x54>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	7b1b      	ldrb	r3, [r3, #12]
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d006      	beq.n	800ae0c <pbuf_free+0x54>
 800adfe:	4b32      	ldr	r3, [pc, #200]	@ (800aec8 <pbuf_free+0x110>)
 800ae00:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800ae04:	4933      	ldr	r1, [pc, #204]	@ (800aed4 <pbuf_free+0x11c>)
 800ae06:	4832      	ldr	r0, [pc, #200]	@ (800aed0 <pbuf_free+0x118>)
 800ae08:	f008 f9be 	bl	8013188 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ae10:	e052      	b.n	800aeb8 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	89db      	ldrh	r3, [r3, #14]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <pbuf_free+0x70>
 800ae1a:	4b2b      	ldr	r3, [pc, #172]	@ (800aec8 <pbuf_free+0x110>)
 800ae1c:	f240 22eb 	movw	r2, #747	@ 0x2eb
 800ae20:	492d      	ldr	r1, [pc, #180]	@ (800aed8 <pbuf_free+0x120>)
 800ae22:	482b      	ldr	r0, [pc, #172]	@ (800aed0 <pbuf_free+0x118>)
 800ae24:	f008 f9b0 	bl	8013188 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	89db      	ldrh	r3, [r3, #14]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	81da      	strh	r2, [r3, #14]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	89db      	ldrh	r3, [r3, #14]
 800ae38:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ae3a:	8abb      	ldrh	r3, [r7, #20]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d139      	bne.n	800aeb4 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	7b1b      	ldrb	r3, [r3, #12]
 800ae4a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7b5b      	ldrb	r3, [r3, #13]
 800ae50:	f003 0302 	and.w	r3, r3, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d011      	beq.n	800ae7c <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <pbuf_free+0xba>
 800ae64:	4b18      	ldr	r3, [pc, #96]	@ (800aec8 <pbuf_free+0x110>)
 800ae66:	f240 22f9 	movw	r2, #761	@ 0x2f9
 800ae6a:	491c      	ldr	r1, [pc, #112]	@ (800aedc <pbuf_free+0x124>)
 800ae6c:	4818      	ldr	r0, [pc, #96]	@ (800aed0 <pbuf_free+0x118>)
 800ae6e:	f008 f98b 	bl	8013188 <iprintf>
        pc->custom_free_function(p);
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
 800ae7a:	e015      	b.n	800aea8 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800ae7c:	89fb      	ldrh	r3, [r7, #14]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d104      	bne.n	800ae8c <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	2008      	movs	r0, #8
 800ae86:	f7ff fa7b 	bl	800a380 <memp_free>
 800ae8a:	e00d      	b.n	800aea8 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ae8c:	89fb      	ldrh	r3, [r7, #14]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d002      	beq.n	800ae98 <pbuf_free+0xe0>
 800ae92:	89fb      	ldrh	r3, [r7, #14]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	d104      	bne.n	800aea2 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800ae98:	6879      	ldr	r1, [r7, #4]
 800ae9a:	2007      	movs	r0, #7
 800ae9c:	f7ff fa70 	bl	800a380 <memp_free>
 800aea0:	e002      	b.n	800aea8 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7fe ff86 	bl	8009db4 <mem_free>
        }
      }
      count++;
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	607b      	str	r3, [r7, #4]
 800aeb2:	e001      	b.n	800aeb8 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1a9      	bne.n	800ae12 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800aebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	08014980 	.word	0x08014980
 800aecc:	08014bb8 	.word	0x08014bb8
 800aed0:	080149cc 	.word	0x080149cc
 800aed4:	08014bf4 	.word	0x08014bf4
 800aed8:	08014c0c 	.word	0x08014c0c
 800aedc:	08014c24 	.word	0x08014c24

0800aee0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b085      	sub	sp, #20
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aeec:	e005      	b.n	800aefa <pbuf_clen+0x1a>
    ++len;
 800aeee:	89fb      	ldrh	r3, [r7, #14]
 800aef0:	3301      	adds	r3, #1
 800aef2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d1f6      	bne.n	800aeee <pbuf_clen+0xe>
  }
  return len;
 800af00:	89fb      	ldrh	r3, [r7, #14]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	bc80      	pop	{r7}
 800af0a:	4770      	bx	lr

0800af0c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	89db      	ldrh	r3, [r3, #14]
 800af1e:	3301      	adds	r3, #1
 800af20:	b29a      	uxth	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	89db      	ldrh	r3, [r3, #14]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <pbuf_ref+0x30>
 800af2e:	4b05      	ldr	r3, [pc, #20]	@ (800af44 <pbuf_ref+0x38>)
 800af30:	f240 3239 	movw	r2, #825	@ 0x339
 800af34:	4904      	ldr	r1, [pc, #16]	@ (800af48 <pbuf_ref+0x3c>)
 800af36:	4805      	ldr	r0, [pc, #20]	@ (800af4c <pbuf_ref+0x40>)
 800af38:	f008 f926 	bl	8013188 <iprintf>
  }
}
 800af3c:	bf00      	nop
 800af3e:	3708      	adds	r7, #8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	08014980 	.word	0x08014980
 800af48:	08014c48 	.word	0x08014c48
 800af4c:	080149cc 	.word	0x080149cc

0800af50 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <pbuf_cat+0x16>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d107      	bne.n	800af76 <pbuf_cat+0x26>
 800af66:	4b20      	ldr	r3, [pc, #128]	@ (800afe8 <pbuf_cat+0x98>)
 800af68:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800af6c:	491f      	ldr	r1, [pc, #124]	@ (800afec <pbuf_cat+0x9c>)
 800af6e:	4820      	ldr	r0, [pc, #128]	@ (800aff0 <pbuf_cat+0xa0>)
 800af70:	f008 f90a 	bl	8013188 <iprintf>
 800af74:	e034      	b.n	800afe0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e00a      	b.n	800af92 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	891a      	ldrh	r2, [r3, #8]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	891b      	ldrh	r3, [r3, #8]
 800af84:	4413      	add	r3, r2
 800af86:	b29a      	uxth	r2, r3
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f0      	bne.n	800af7c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	891a      	ldrh	r2, [r3, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	895b      	ldrh	r3, [r3, #10]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d006      	beq.n	800afb4 <pbuf_cat+0x64>
 800afa6:	4b10      	ldr	r3, [pc, #64]	@ (800afe8 <pbuf_cat+0x98>)
 800afa8:	f240 3255 	movw	r2, #853	@ 0x355
 800afac:	4911      	ldr	r1, [pc, #68]	@ (800aff4 <pbuf_cat+0xa4>)
 800afae:	4810      	ldr	r0, [pc, #64]	@ (800aff0 <pbuf_cat+0xa0>)
 800afb0:	f008 f8ea 	bl	8013188 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d006      	beq.n	800afca <pbuf_cat+0x7a>
 800afbc:	4b0a      	ldr	r3, [pc, #40]	@ (800afe8 <pbuf_cat+0x98>)
 800afbe:	f240 3256 	movw	r2, #854	@ 0x356
 800afc2:	490d      	ldr	r1, [pc, #52]	@ (800aff8 <pbuf_cat+0xa8>)
 800afc4:	480a      	ldr	r0, [pc, #40]	@ (800aff0 <pbuf_cat+0xa0>)
 800afc6:	f008 f8df 	bl	8013188 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	891a      	ldrh	r2, [r3, #8]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	891b      	ldrh	r3, [r3, #8]
 800afd2:	4413      	add	r3, r2
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	08014980 	.word	0x08014980
 800afec:	08014c5c 	.word	0x08014c5c
 800aff0:	080149cc 	.word	0x080149cc
 800aff4:	08014c94 	.word	0x08014c94
 800aff8:	08014cc4 	.word	0x08014cc4

0800affc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff ffa1 	bl	800af50 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b00e:	6838      	ldr	r0, [r7, #0]
 800b010:	f7ff ff7c 	bl	800af0c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800b026:	2300      	movs	r3, #0
 800b028:	81fb      	strh	r3, [r7, #14]
 800b02a:	2300      	movs	r3, #0
 800b02c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d008      	beq.n	800b046 <pbuf_copy+0x2a>
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <pbuf_copy+0x2a>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	891a      	ldrh	r2, [r3, #8]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	891b      	ldrh	r3, [r3, #8]
 800b042:	429a      	cmp	r2, r3
 800b044:	d209      	bcs.n	800b05a <pbuf_copy+0x3e>
 800b046:	4b54      	ldr	r3, [pc, #336]	@ (800b198 <pbuf_copy+0x17c>)
 800b048:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 800b04c:	4953      	ldr	r1, [pc, #332]	@ (800b19c <pbuf_copy+0x180>)
 800b04e:	4854      	ldr	r0, [pc, #336]	@ (800b1a0 <pbuf_copy+0x184>)
 800b050:	f008 f89a 	bl	8013188 <iprintf>
 800b054:	f06f 030f 	mvn.w	r3, #15
 800b058:	e099      	b.n	800b18e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	895b      	ldrh	r3, [r3, #10]
 800b05e:	461a      	mov	r2, r3
 800b060:	89fb      	ldrh	r3, [r7, #14]
 800b062:	1ad2      	subs	r2, r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	895b      	ldrh	r3, [r3, #10]
 800b068:	4619      	mov	r1, r3
 800b06a:	89bb      	ldrh	r3, [r7, #12]
 800b06c:	1acb      	subs	r3, r1, r3
 800b06e:	429a      	cmp	r2, r3
 800b070:	db05      	blt.n	800b07e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	895a      	ldrh	r2, [r3, #10]
 800b076:	89bb      	ldrh	r3, [r7, #12]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	817b      	strh	r3, [r7, #10]
 800b07c:	e004      	b.n	800b088 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	895a      	ldrh	r2, [r3, #10]
 800b082:	89fb      	ldrh	r3, [r7, #14]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	89fb      	ldrh	r3, [r7, #14]
 800b08e:	18d0      	adds	r0, r2, r3
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	685a      	ldr	r2, [r3, #4]
 800b094:	89bb      	ldrh	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	897a      	ldrh	r2, [r7, #10]
 800b09a:	4619      	mov	r1, r3
 800b09c:	f008 fa75 	bl	801358a <memcpy>
    offset_to += len;
 800b0a0:	89fa      	ldrh	r2, [r7, #14]
 800b0a2:	897b      	ldrh	r3, [r7, #10]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800b0a8:	89ba      	ldrh	r2, [r7, #12]
 800b0aa:	897b      	ldrh	r3, [r7, #10]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	895b      	ldrh	r3, [r3, #10]
 800b0b4:	89fa      	ldrh	r2, [r7, #14]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d906      	bls.n	800b0c8 <pbuf_copy+0xac>
 800b0ba:	4b37      	ldr	r3, [pc, #220]	@ (800b198 <pbuf_copy+0x17c>)
 800b0bc:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800b0c0:	4938      	ldr	r1, [pc, #224]	@ (800b1a4 <pbuf_copy+0x188>)
 800b0c2:	4837      	ldr	r0, [pc, #220]	@ (800b1a0 <pbuf_copy+0x184>)
 800b0c4:	f008 f860 	bl	8013188 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	895b      	ldrh	r3, [r3, #10]
 800b0cc:	89ba      	ldrh	r2, [r7, #12]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d906      	bls.n	800b0e0 <pbuf_copy+0xc4>
 800b0d2:	4b31      	ldr	r3, [pc, #196]	@ (800b198 <pbuf_copy+0x17c>)
 800b0d4:	f240 32ce 	movw	r2, #974	@ 0x3ce
 800b0d8:	4933      	ldr	r1, [pc, #204]	@ (800b1a8 <pbuf_copy+0x18c>)
 800b0da:	4831      	ldr	r0, [pc, #196]	@ (800b1a0 <pbuf_copy+0x184>)
 800b0dc:	f008 f854 	bl	8013188 <iprintf>
    if (offset_from >= p_from->len) {
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	895b      	ldrh	r3, [r3, #10]
 800b0e4:	89ba      	ldrh	r2, [r7, #12]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d304      	bcc.n	800b0f4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	895b      	ldrh	r3, [r3, #10]
 800b0f8:	89fa      	ldrh	r2, [r7, #14]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d114      	bne.n	800b128 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10c      	bne.n	800b128 <pbuf_copy+0x10c>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d009      	beq.n	800b128 <pbuf_copy+0x10c>
 800b114:	4b20      	ldr	r3, [pc, #128]	@ (800b198 <pbuf_copy+0x17c>)
 800b116:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800b11a:	4924      	ldr	r1, [pc, #144]	@ (800b1ac <pbuf_copy+0x190>)
 800b11c:	4820      	ldr	r0, [pc, #128]	@ (800b1a0 <pbuf_copy+0x184>)
 800b11e:	f008 f833 	bl	8013188 <iprintf>
 800b122:	f06f 030f 	mvn.w	r3, #15
 800b126:	e032      	b.n	800b18e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d013      	beq.n	800b156 <pbuf_copy+0x13a>
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	895a      	ldrh	r2, [r3, #10]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	891b      	ldrh	r3, [r3, #8]
 800b136:	429a      	cmp	r2, r3
 800b138:	d10d      	bne.n	800b156 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <pbuf_copy+0x13a>
 800b142:	4b15      	ldr	r3, [pc, #84]	@ (800b198 <pbuf_copy+0x17c>)
 800b144:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800b148:	4919      	ldr	r1, [pc, #100]	@ (800b1b0 <pbuf_copy+0x194>)
 800b14a:	4815      	ldr	r0, [pc, #84]	@ (800b1a0 <pbuf_copy+0x184>)
 800b14c:	f008 f81c 	bl	8013188 <iprintf>
 800b150:	f06f 0305 	mvn.w	r3, #5
 800b154:	e01b      	b.n	800b18e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d013      	beq.n	800b184 <pbuf_copy+0x168>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	895a      	ldrh	r2, [r3, #10]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	891b      	ldrh	r3, [r3, #8]
 800b164:	429a      	cmp	r2, r3
 800b166:	d10d      	bne.n	800b184 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d009      	beq.n	800b184 <pbuf_copy+0x168>
 800b170:	4b09      	ldr	r3, [pc, #36]	@ (800b198 <pbuf_copy+0x17c>)
 800b172:	f240 32e2 	movw	r2, #994	@ 0x3e2
 800b176:	490e      	ldr	r1, [pc, #56]	@ (800b1b0 <pbuf_copy+0x194>)
 800b178:	4809      	ldr	r0, [pc, #36]	@ (800b1a0 <pbuf_copy+0x184>)
 800b17a:	f008 f805 	bl	8013188 <iprintf>
 800b17e:	f06f 0305 	mvn.w	r3, #5
 800b182:	e004      	b.n	800b18e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	f47f af67 	bne.w	800b05a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	08014980 	.word	0x08014980
 800b19c:	08014d10 	.word	0x08014d10
 800b1a0:	080149cc 	.word	0x080149cc
 800b1a4:	08014d40 	.word	0x08014d40
 800b1a8:	08014d58 	.word	0x08014d58
 800b1ac:	08014d74 	.word	0x08014d74
 800b1b0:	08014d84 	.word	0x08014d84

0800b1b4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b088      	sub	sp, #32
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	4611      	mov	r1, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	80fb      	strh	r3, [r7, #6]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d108      	bne.n	800b1e6 <pbuf_copy_partial+0x32>
 800b1d4:	4b30      	ldr	r3, [pc, #192]	@ (800b298 <pbuf_copy_partial+0xe4>)
 800b1d6:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800b1da:	4930      	ldr	r1, [pc, #192]	@ (800b29c <pbuf_copy_partial+0xe8>)
 800b1dc:	4830      	ldr	r0, [pc, #192]	@ (800b2a0 <pbuf_copy_partial+0xec>)
 800b1de:	f007 ffd3 	bl	8013188 <iprintf>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e054      	b.n	800b290 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d108      	bne.n	800b1fe <pbuf_copy_partial+0x4a>
 800b1ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b298 <pbuf_copy_partial+0xe4>)
 800b1ee:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800b1f2:	492c      	ldr	r1, [pc, #176]	@ (800b2a4 <pbuf_copy_partial+0xf0>)
 800b1f4:	482a      	ldr	r0, [pc, #168]	@ (800b2a0 <pbuf_copy_partial+0xec>)
 800b1f6:	f007 ffc7 	bl	8013188 <iprintf>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e048      	b.n	800b290 <pbuf_copy_partial+0xdc>

  left = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <pbuf_copy_partial+0x5a>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <pbuf_copy_partial+0x5e>
    return 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	e03e      	b.n	800b290 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	e034      	b.n	800b282 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800b218:	88bb      	ldrh	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d00a      	beq.n	800b234 <pbuf_copy_partial+0x80>
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	895b      	ldrh	r3, [r3, #10]
 800b222:	88ba      	ldrh	r2, [r7, #4]
 800b224:	429a      	cmp	r2, r3
 800b226:	d305      	bcc.n	800b234 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	895b      	ldrh	r3, [r3, #10]
 800b22c:	88ba      	ldrh	r2, [r7, #4]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	80bb      	strh	r3, [r7, #4]
 800b232:	e023      	b.n	800b27c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	895a      	ldrh	r2, [r3, #10]
 800b238:	88bb      	ldrh	r3, [r7, #4]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b23e:	8b3a      	ldrh	r2, [r7, #24]
 800b240:	88fb      	ldrh	r3, [r7, #6]
 800b242:	429a      	cmp	r2, r3
 800b244:	d901      	bls.n	800b24a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800b246:	88fb      	ldrh	r3, [r7, #6]
 800b248:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b24a:	8b7b      	ldrh	r3, [r7, #26]
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	18d0      	adds	r0, r2, r3
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	88bb      	ldrh	r3, [r7, #4]
 800b256:	4413      	add	r3, r2
 800b258:	8b3a      	ldrh	r2, [r7, #24]
 800b25a:	4619      	mov	r1, r3
 800b25c:	f008 f995 	bl	801358a <memcpy>
      copied_total += buf_copy_len;
 800b260:	8afa      	ldrh	r2, [r7, #22]
 800b262:	8b3b      	ldrh	r3, [r7, #24]
 800b264:	4413      	add	r3, r2
 800b266:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800b268:	8b7a      	ldrh	r2, [r7, #26]
 800b26a:	8b3b      	ldrh	r3, [r7, #24]
 800b26c:	4413      	add	r3, r2
 800b26e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800b270:	88fa      	ldrh	r2, [r7, #6]
 800b272:	8b3b      	ldrh	r3, [r7, #24]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	61fb      	str	r3, [r7, #28]
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <pbuf_copy_partial+0xda>
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1c4      	bne.n	800b218 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800b28e:	8afb      	ldrh	r3, [r7, #22]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3720      	adds	r7, #32
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	08014980 	.word	0x08014980
 800b29c:	08014db0 	.word	0x08014db0
 800b2a0:	080149cc 	.word	0x080149cc
 800b2a4:	08014dd0 	.word	0x08014dd0

0800b2a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800b2ac:	bf00      	nop
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bc80      	pop	{r7}
 800b2b2:	4770      	bx	lr

0800b2b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b2b8:	f000 fdfc 	bl	800beb4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b2bc:	4b07      	ldr	r3, [pc, #28]	@ (800b2dc <tcp_tmr+0x28>)
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	4b05      	ldr	r3, [pc, #20]	@ (800b2dc <tcp_tmr+0x28>)
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	4b04      	ldr	r3, [pc, #16]	@ (800b2dc <tcp_tmr+0x28>)
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b2d4:	f000 fb2a 	bl	800b92c <tcp_slowtmr>
  }
}
 800b2d8:	bf00      	nop
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	200080c1 	.word	0x200080c1

0800b2e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	e00a      	b.n	800b306 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d102      	bne.n	800b300 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f1      	bne.n	800b2f0 <tcp_remove_listener+0x10>
      }
   }
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	3714      	adds	r7, #20
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr

0800b318 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d105      	bne.n	800b332 <tcp_listen_closed+0x1a>
 800b326:	4b13      	ldr	r3, [pc, #76]	@ (800b374 <tcp_listen_closed+0x5c>)
 800b328:	22c0      	movs	r2, #192	@ 0xc0
 800b32a:	4913      	ldr	r1, [pc, #76]	@ (800b378 <tcp_listen_closed+0x60>)
 800b32c:	4813      	ldr	r0, [pc, #76]	@ (800b37c <tcp_listen_closed+0x64>)
 800b32e:	f007 ff2b 	bl	8013188 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	7d1b      	ldrb	r3, [r3, #20]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d005      	beq.n	800b346 <tcp_listen_closed+0x2e>
 800b33a:	4b0e      	ldr	r3, [pc, #56]	@ (800b374 <tcp_listen_closed+0x5c>)
 800b33c:	22c1      	movs	r2, #193	@ 0xc1
 800b33e:	4910      	ldr	r1, [pc, #64]	@ (800b380 <tcp_listen_closed+0x68>)
 800b340:	480e      	ldr	r0, [pc, #56]	@ (800b37c <tcp_listen_closed+0x64>)
 800b342:	f007 ff21 	bl	8013188 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b346:	2301      	movs	r3, #1
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	e00b      	b.n	800b364 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800b34c:	4a0d      	ldr	r2, [pc, #52]	@ (800b384 <tcp_listen_closed+0x6c>)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6879      	ldr	r1, [r7, #4]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff ffc1 	bl	800b2e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d9f0      	bls.n	800b34c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b36a:	bf00      	nop
 800b36c:	bf00      	nop
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	08014f04 	.word	0x08014f04
 800b378:	08014f34 	.word	0x08014f34
 800b37c:	08014f40 	.word	0x08014f40
 800b380:	08014f68 	.word	0x08014f68
 800b384:	080163b0 	.word	0x080163b0

0800b388 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b388:	b5b0      	push	{r4, r5, r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af02      	add	r7, sp, #8
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d075      	beq.n	800b486 <tcp_close_shutdown+0xfe>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	7d1b      	ldrb	r3, [r3, #20]
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d003      	beq.n	800b3aa <tcp_close_shutdown+0x22>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	7d1b      	ldrb	r3, [r3, #20]
 800b3a6:	2b07      	cmp	r3, #7
 800b3a8:	d16d      	bne.n	800b486 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d104      	bne.n	800b3bc <tcp_close_shutdown+0x34>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3b6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b3ba:	d064      	beq.n	800b486 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7e9b      	ldrb	r3, [r3, #26]
 800b3c0:	f003 0310 	and.w	r3, r3, #16
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <tcp_close_shutdown+0x4e>
 800b3c8:	4b5b      	ldr	r3, [pc, #364]	@ (800b538 <tcp_close_shutdown+0x1b0>)
 800b3ca:	f240 120f 	movw	r2, #271	@ 0x10f
 800b3ce:	495b      	ldr	r1, [pc, #364]	@ (800b53c <tcp_close_shutdown+0x1b4>)
 800b3d0:	485b      	ldr	r0, [pc, #364]	@ (800b540 <tcp_close_shutdown+0x1b8>)
 800b3d2:	f007 fed9 	bl	8013188 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b3de:	687c      	ldr	r4, [r7, #4]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	1d1d      	adds	r5, r3, #4
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	8adb      	ldrh	r3, [r3, #22]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	8b12      	ldrh	r2, [r2, #24]
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	f004 f85e 	bl	800f4b4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 ffd1 	bl	800c3a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b3fe:	4b51      	ldr	r3, [pc, #324]	@ (800b544 <tcp_close_shutdown+0x1bc>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	429a      	cmp	r2, r3
 800b406:	d105      	bne.n	800b414 <tcp_close_shutdown+0x8c>
 800b408:	4b4e      	ldr	r3, [pc, #312]	@ (800b544 <tcp_close_shutdown+0x1bc>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	4a4d      	ldr	r2, [pc, #308]	@ (800b544 <tcp_close_shutdown+0x1bc>)
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e013      	b.n	800b43c <tcp_close_shutdown+0xb4>
 800b414:	4b4b      	ldr	r3, [pc, #300]	@ (800b544 <tcp_close_shutdown+0x1bc>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	e00c      	b.n	800b436 <tcp_close_shutdown+0xae>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	429a      	cmp	r2, r3
 800b424:	d104      	bne.n	800b430 <tcp_close_shutdown+0xa8>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	60da      	str	r2, [r3, #12]
 800b42e:	e005      	b.n	800b43c <tcp_close_shutdown+0xb4>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1ef      	bne.n	800b41c <tcp_close_shutdown+0x94>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2200      	movs	r2, #0
 800b440:	60da      	str	r2, [r3, #12]
 800b442:	4b41      	ldr	r3, [pc, #260]	@ (800b548 <tcp_close_shutdown+0x1c0>)
 800b444:	2201      	movs	r2, #1
 800b446:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	7d1b      	ldrb	r3, [r3, #20]
 800b44c:	2b04      	cmp	r3, #4
 800b44e:	d10c      	bne.n	800b46a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	220a      	movs	r2, #10
 800b454:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b456:	4b3d      	ldr	r3, [pc, #244]	@ (800b54c <tcp_close_shutdown+0x1c4>)
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60da      	str	r2, [r3, #12]
 800b45e:	4a3b      	ldr	r2, [pc, #236]	@ (800b54c <tcp_close_shutdown+0x1c4>)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6013      	str	r3, [r2, #0]
 800b464:	f004 fa6e 	bl	800f944 <tcp_timer_needed>
 800b468:	e00b      	b.n	800b482 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800b46a:	4b39      	ldr	r3, [pc, #228]	@ (800b550 <tcp_close_shutdown+0x1c8>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d102      	bne.n	800b47a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800b474:	f003 faf2 	bl	800ea5c <tcp_trigger_input_pcb_close>
 800b478:	e003      	b.n	800b482 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800b47a:	6879      	ldr	r1, [r7, #4]
 800b47c:	2001      	movs	r0, #1
 800b47e:	f7fe ff7f 	bl	800a380 <memp_free>
        }
      }
      return ERR_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	e053      	b.n	800b52e <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	7d1b      	ldrb	r3, [r3, #20]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d03d      	beq.n	800b50a <tcp_close_shutdown+0x182>
 800b48e:	2b02      	cmp	r3, #2
 800b490:	dc47      	bgt.n	800b522 <tcp_close_shutdown+0x19a>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d002      	beq.n	800b49c <tcp_close_shutdown+0x114>
 800b496:	2b01      	cmp	r3, #1
 800b498:	d02b      	beq.n	800b4f2 <tcp_close_shutdown+0x16a>
 800b49a:	e042      	b.n	800b522 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	8adb      	ldrh	r3, [r3, #22]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d021      	beq.n	800b4e8 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4a4:	4b2b      	ldr	r3, [pc, #172]	@ (800b554 <tcp_close_shutdown+0x1cc>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d105      	bne.n	800b4ba <tcp_close_shutdown+0x132>
 800b4ae:	4b29      	ldr	r3, [pc, #164]	@ (800b554 <tcp_close_shutdown+0x1cc>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	4a27      	ldr	r2, [pc, #156]	@ (800b554 <tcp_close_shutdown+0x1cc>)
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	e013      	b.n	800b4e2 <tcp_close_shutdown+0x15a>
 800b4ba:	4b26      	ldr	r3, [pc, #152]	@ (800b554 <tcp_close_shutdown+0x1cc>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	60bb      	str	r3, [r7, #8]
 800b4c0:	e00c      	b.n	800b4dc <tcp_close_shutdown+0x154>
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d104      	bne.n	800b4d6 <tcp_close_shutdown+0x14e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	60da      	str	r2, [r3, #12]
 800b4d4:	e005      	b.n	800b4e2 <tcp_close_shutdown+0x15a>
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	60bb      	str	r3, [r7, #8]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d1ef      	bne.n	800b4c2 <tcp_close_shutdown+0x13a>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	2001      	movs	r0, #1
 800b4ec:	f7fe ff48 	bl	800a380 <memp_free>
    break;
 800b4f0:	e01c      	b.n	800b52c <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7ff ff10 	bl	800b318 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	4817      	ldr	r0, [pc, #92]	@ (800b558 <tcp_close_shutdown+0x1d0>)
 800b4fc:	f000 ff92 	bl	800c424 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	2002      	movs	r0, #2
 800b504:	f7fe ff3c 	bl	800a380 <memp_free>
    break;
 800b508:	e010      	b.n	800b52c <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	480d      	ldr	r0, [pc, #52]	@ (800b544 <tcp_close_shutdown+0x1bc>)
 800b50e:	f000 ff89 	bl	800c424 <tcp_pcb_remove>
 800b512:	4b0d      	ldr	r3, [pc, #52]	@ (800b548 <tcp_close_shutdown+0x1c0>)
 800b514:	2201      	movs	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800b518:	6879      	ldr	r1, [r7, #4]
 800b51a:	2001      	movs	r0, #1
 800b51c:	f7fe ff30 	bl	800a380 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800b520:	e004      	b.n	800b52c <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f81a 	bl	800b55c <tcp_close_shutdown_fin>
 800b528:	4603      	mov	r3, r0
 800b52a:	e000      	b.n	800b52e <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bdb0      	pop	{r4, r5, r7, pc}
 800b536:	bf00      	nop
 800b538:	08014f04 	.word	0x08014f04
 800b53c:	08014f80 	.word	0x08014f80
 800b540:	08014f40 	.word	0x08014f40
 800b544:	200080b8 	.word	0x200080b8
 800b548:	200080c0 	.word	0x200080c0
 800b54c:	200080bc 	.word	0x200080bc
 800b550:	200080f8 	.word	0x200080f8
 800b554:	200080b0 	.word	0x200080b0
 800b558:	200080b4 	.word	0x200080b4

0800b55c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <tcp_close_shutdown_fin+0x1c>
 800b56a:	4b2e      	ldr	r3, [pc, #184]	@ (800b624 <tcp_close_shutdown_fin+0xc8>)
 800b56c:	f240 124d 	movw	r2, #333	@ 0x14d
 800b570:	492d      	ldr	r1, [pc, #180]	@ (800b628 <tcp_close_shutdown_fin+0xcc>)
 800b572:	482e      	ldr	r0, [pc, #184]	@ (800b62c <tcp_close_shutdown_fin+0xd0>)
 800b574:	f007 fe08 	bl	8013188 <iprintf>

  switch (pcb->state) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7d1b      	ldrb	r3, [r3, #20]
 800b57c:	2b07      	cmp	r3, #7
 800b57e:	d020      	beq.n	800b5c2 <tcp_close_shutdown_fin+0x66>
 800b580:	2b07      	cmp	r3, #7
 800b582:	dc2b      	bgt.n	800b5dc <tcp_close_shutdown_fin+0x80>
 800b584:	2b03      	cmp	r3, #3
 800b586:	d002      	beq.n	800b58e <tcp_close_shutdown_fin+0x32>
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d00d      	beq.n	800b5a8 <tcp_close_shutdown_fin+0x4c>
 800b58c:	e026      	b.n	800b5dc <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f003 faee 	bl	800eb70 <tcp_send_fin>
 800b594:	4603      	mov	r3, r0
 800b596:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d11f      	bne.n	800b5e0 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2205      	movs	r2, #5
 800b5a4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b5a6:	e01b      	b.n	800b5e0 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f003 fae1 	bl	800eb70 <tcp_send_fin>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d114      	bne.n	800b5e4 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2205      	movs	r2, #5
 800b5be:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b5c0:	e010      	b.n	800b5e4 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f003 fad4 	bl	800eb70 <tcp_send_fin>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b5cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2209      	movs	r2, #9
 800b5d8:	751a      	strb	r2, [r3, #20]
    }
    break;
 800b5da:	e005      	b.n	800b5e8 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e01c      	b.n	800b61a <tcp_close_shutdown_fin+0xbe>
    break;
 800b5e0:	bf00      	nop
 800b5e2:	e002      	b.n	800b5ea <tcp_close_shutdown_fin+0x8e>
    break;
 800b5e4:	bf00      	nop
 800b5e6:	e000      	b.n	800b5ea <tcp_close_shutdown_fin+0x8e>
    break;
 800b5e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d103      	bne.n	800b5fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f003 fcda 	bl	800efac <tcp_output>
 800b5f8:	e00d      	b.n	800b616 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b602:	d108      	bne.n	800b616 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7e9b      	ldrb	r3, [r3, #26]
 800b608:	f043 0308 	orr.w	r3, r3, #8
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	e001      	b.n	800b61a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b616:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	08014f04 	.word	0x08014f04
 800b628:	08014f34 	.word	0x08014f34
 800b62c:	08014f40 	.word	0x08014f40

0800b630 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7d1b      	ldrb	r3, [r3, #20]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d006      	beq.n	800b64e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7e9b      	ldrb	r3, [r3, #26]
 800b644:	f043 0310 	orr.w	r3, r3, #16
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b64e:	2101      	movs	r1, #1
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f7ff fe99 	bl	800b388 <tcp_close_shutdown>
 800b656:	4603      	mov	r3, r0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08c      	sub	sp, #48	@ 0x30
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	7d1b      	ldrb	r3, [r3, #20]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d106      	bne.n	800b680 <tcp_abandon+0x20>
 800b672:	4b4d      	ldr	r3, [pc, #308]	@ (800b7a8 <tcp_abandon+0x148>)
 800b674:	f240 12df 	movw	r2, #479	@ 0x1df
 800b678:	494c      	ldr	r1, [pc, #304]	@ (800b7ac <tcp_abandon+0x14c>)
 800b67a:	484d      	ldr	r0, [pc, #308]	@ (800b7b0 <tcp_abandon+0x150>)
 800b67c:	f007 fd84 	bl	8013188 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7d1b      	ldrb	r3, [r3, #20]
 800b684:	2b0a      	cmp	r3, #10
 800b686:	d108      	bne.n	800b69a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	484a      	ldr	r0, [pc, #296]	@ (800b7b4 <tcp_abandon+0x154>)
 800b68c:	f000 feca 	bl	800c424 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800b690:	6879      	ldr	r1, [r7, #4]
 800b692:	2001      	movs	r0, #1
 800b694:	f7fe fe74 	bl	800a380 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800b698:	e081      	b.n	800b79e <tcp_abandon+0x13e>
    int send_rst = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ac:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b6b4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	7d1b      	ldrb	r3, [r3, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d126      	bne.n	800b712 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	8adb      	ldrh	r3, [r3, #22]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d02e      	beq.n	800b72a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b6cc:	4b3a      	ldr	r3, [pc, #232]	@ (800b7b8 <tcp_abandon+0x158>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d105      	bne.n	800b6e2 <tcp_abandon+0x82>
 800b6d6:	4b38      	ldr	r3, [pc, #224]	@ (800b7b8 <tcp_abandon+0x158>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	4a36      	ldr	r2, [pc, #216]	@ (800b7b8 <tcp_abandon+0x158>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	e013      	b.n	800b70a <tcp_abandon+0xaa>
 800b6e2:	4b35      	ldr	r3, [pc, #212]	@ (800b7b8 <tcp_abandon+0x158>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	61fb      	str	r3, [r7, #28]
 800b6e8:	e00c      	b.n	800b704 <tcp_abandon+0xa4>
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d104      	bne.n	800b6fe <tcp_abandon+0x9e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68da      	ldr	r2, [r3, #12]
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	60da      	str	r2, [r3, #12]
 800b6fc:	e005      	b.n	800b70a <tcp_abandon+0xaa>
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	61fb      	str	r3, [r7, #28]
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1ef      	bne.n	800b6ea <tcp_abandon+0x8a>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	60da      	str	r2, [r3, #12]
 800b710:	e00b      	b.n	800b72a <tcp_abandon+0xca>
      send_rst = reset;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	8adb      	ldrh	r3, [r3, #22]
 800b71a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b71c:	6879      	ldr	r1, [r7, #4]
 800b71e:	4827      	ldr	r0, [pc, #156]	@ (800b7bc <tcp_abandon+0x15c>)
 800b720:	f000 fe80 	bl	800c424 <tcp_pcb_remove>
 800b724:	4b26      	ldr	r3, [pc, #152]	@ (800b7c0 <tcp_abandon+0x160>)
 800b726:	2201      	movs	r2, #1
 800b728:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b736:	4618      	mov	r0, r3
 800b738:	f000 fc89 	bl	800c04e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b740:	2b00      	cmp	r3, #0
 800b742:	d004      	beq.n	800b74e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 fc80 	bl	800c04e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b75a:	4618      	mov	r0, r3
 800b75c:	f000 fc77 	bl	800c04e <tcp_segs_free>
    if (send_rst) {
 800b760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00c      	beq.n	800b780 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	1d19      	adds	r1, r3, #4
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8b1b      	ldrh	r3, [r3, #24]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	460b      	mov	r3, r1
 800b778:	6979      	ldr	r1, [r7, #20]
 800b77a:	69b8      	ldr	r0, [r7, #24]
 800b77c:	f003 fe9a 	bl	800f4b4 <tcp_rst>
    last_state = pcb->state;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	7d1b      	ldrb	r3, [r3, #20]
 800b784:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	2001      	movs	r0, #1
 800b78a:	f7fe fdf9 	bl	800a380 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d004      	beq.n	800b79e <tcp_abandon+0x13e>
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f06f 010c 	mvn.w	r1, #12
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	4798      	blx	r3
}
 800b79e:	bf00      	nop
 800b7a0:	3728      	adds	r7, #40	@ 0x28
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	08014f04 	.word	0x08014f04
 800b7ac:	08014f9c 	.word	0x08014f9c
 800b7b0:	08014f40 	.word	0x08014f40
 800b7b4:	200080bc 	.word	0x200080bc
 800b7b8:	200080b0 	.word	0x200080b0
 800b7bc:	200080b8 	.word	0x200080b8
 800b7c0:	200080c0 	.word	0x200080c0

0800b7c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff ff46 	bl	800b660 <tcp_abandon>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b7ec:	4413      	add	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800b7f8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800b7fc:	bf28      	it	cs
 800b7fe:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800b802:	b292      	uxth	r2, r2
 800b804:	4413      	add	r3, r2
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	db08      	blt.n	800b820 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	e020      	b.n	800b862 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	dd03      	ble.n	800b836 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b834:	e014      	b.n	800b860 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b848:	d306      	bcc.n	800b858 <tcp_update_rcv_ann_wnd+0x7c>
 800b84a:	4b08      	ldr	r3, [pc, #32]	@ (800b86c <tcp_update_rcv_ann_wnd+0x90>)
 800b84c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800b850:	4907      	ldr	r1, [pc, #28]	@ (800b870 <tcp_update_rcv_ann_wnd+0x94>)
 800b852:	4808      	ldr	r0, [pc, #32]	@ (800b874 <tcp_update_rcv_ann_wnd+0x98>)
 800b854:	f007 fc98 	bl	8013188 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800b860:	2300      	movs	r3, #0
  }
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	08014f04 	.word	0x08014f04
 800b870:	0801501c 	.word	0x0801501c
 800b874:	08014f40 	.word	0x08014f40

0800b878 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	7d1b      	ldrb	r3, [r3, #20]
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d106      	bne.n	800b89a <tcp_recved+0x22>
 800b88c:	4b23      	ldr	r3, [pc, #140]	@ (800b91c <tcp_recved+0xa4>)
 800b88e:	f240 321f 	movw	r2, #799	@ 0x31f
 800b892:	4923      	ldr	r1, [pc, #140]	@ (800b920 <tcp_recved+0xa8>)
 800b894:	4823      	ldr	r0, [pc, #140]	@ (800b924 <tcp_recved+0xac>)
 800b896:	f007 fc77 	bl	8013188 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b89e:	887b      	ldrh	r3, [r7, #2]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	b29a      	uxth	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b8b0:	d904      	bls.n	800b8bc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b8b8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b8ba:	e017      	b.n	800b8ec <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d113      	bne.n	800b8ec <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	7d1b      	ldrb	r3, [r3, #20]
 800b8c8:	2b07      	cmp	r3, #7
 800b8ca:	d003      	beq.n	800b8d4 <tcp_recved+0x5c>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7d1b      	ldrb	r3, [r3, #20]
 800b8d0:	2b09      	cmp	r3, #9
 800b8d2:	d104      	bne.n	800b8de <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b8da:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b8dc:	e006      	b.n	800b8ec <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b8de:	4b0f      	ldr	r3, [pc, #60]	@ (800b91c <tcp_recved+0xa4>)
 800b8e0:	f240 322d 	movw	r2, #813	@ 0x32d
 800b8e4:	4910      	ldr	r1, [pc, #64]	@ (800b928 <tcp_recved+0xb0>)
 800b8e6:	480f      	ldr	r0, [pc, #60]	@ (800b924 <tcp_recved+0xac>)
 800b8e8:	f007 fc4e 	bl	8013188 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff ff75 	bl	800b7dc <tcp_update_rcv_ann_wnd>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800b8fc:	db09      	blt.n	800b912 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	7e9b      	ldrb	r3, [r3, #26]
 800b902:	f043 0302 	orr.w	r3, r3, #2
 800b906:	b2da      	uxtb	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f003 fb4d 	bl	800efac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b912:	bf00      	nop
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	08014f04 	.word	0x08014f04
 800b920:	08015038 	.word	0x08015038
 800b924:	08014f40 	.word	0x08014f40
 800b928:	08015060 	.word	0x08015060

0800b92c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b92c:	b5b0      	push	{r4, r5, r7, lr}
 800b92e:	b08c      	sub	sp, #48	@ 0x30
 800b930:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800b936:	4b98      	ldr	r3, [pc, #608]	@ (800bb98 <tcp_slowtmr+0x26c>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3301      	adds	r3, #1
 800b93c:	4a96      	ldr	r2, [pc, #600]	@ (800bb98 <tcp_slowtmr+0x26c>)
 800b93e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b940:	4b96      	ldr	r3, [pc, #600]	@ (800bb9c <tcp_slowtmr+0x270>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	b2da      	uxtb	r2, r3
 800b948:	4b94      	ldr	r3, [pc, #592]	@ (800bb9c <tcp_slowtmr+0x270>)
 800b94a:	701a      	strb	r2, [r3, #0]
 800b94c:	e000      	b.n	800b950 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800b94e:	bf00      	nop
  prev = NULL;
 800b950:	2300      	movs	r3, #0
 800b952:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800b954:	4b92      	ldr	r3, [pc, #584]	@ (800bba0 <tcp_slowtmr+0x274>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800b95a:	e227      	b.n	800bdac <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95e:	7d1b      	ldrb	r3, [r3, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d106      	bne.n	800b972 <tcp_slowtmr+0x46>
 800b964:	4b8f      	ldr	r3, [pc, #572]	@ (800bba4 <tcp_slowtmr+0x278>)
 800b966:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 800b96a:	498f      	ldr	r1, [pc, #572]	@ (800bba8 <tcp_slowtmr+0x27c>)
 800b96c:	488f      	ldr	r0, [pc, #572]	@ (800bbac <tcp_slowtmr+0x280>)
 800b96e:	f007 fc0b 	bl	8013188 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b974:	7d1b      	ldrb	r3, [r3, #20]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d106      	bne.n	800b988 <tcp_slowtmr+0x5c>
 800b97a:	4b8a      	ldr	r3, [pc, #552]	@ (800bba4 <tcp_slowtmr+0x278>)
 800b97c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800b980:	498b      	ldr	r1, [pc, #556]	@ (800bbb0 <tcp_slowtmr+0x284>)
 800b982:	488a      	ldr	r0, [pc, #552]	@ (800bbac <tcp_slowtmr+0x280>)
 800b984:	f007 fc00 	bl	8013188 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	7d1b      	ldrb	r3, [r3, #20]
 800b98c:	2b0a      	cmp	r3, #10
 800b98e:	d106      	bne.n	800b99e <tcp_slowtmr+0x72>
 800b990:	4b84      	ldr	r3, [pc, #528]	@ (800bba4 <tcp_slowtmr+0x278>)
 800b992:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800b996:	4987      	ldr	r1, [pc, #540]	@ (800bbb4 <tcp_slowtmr+0x288>)
 800b998:	4884      	ldr	r0, [pc, #528]	@ (800bbac <tcp_slowtmr+0x280>)
 800b99a:	f007 fbf5 	bl	8013188 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a0:	7f5a      	ldrb	r2, [r3, #29]
 800b9a2:	4b7e      	ldr	r3, [pc, #504]	@ (800bb9c <tcp_slowtmr+0x270>)
 800b9a4:	781b      	ldrb	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d103      	bne.n	800b9b2 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800b9b0:	e1fc      	b.n	800bdac <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 800b9b2:	4b7a      	ldr	r3, [pc, #488]	@ (800bb9c <tcp_slowtmr+0x270>)
 800b9b4:	781a      	ldrb	r2, [r3, #0]
 800b9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b8:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	7d1b      	ldrb	r3, [r3, #20]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d108      	bne.n	800b9dc <tcp_slowtmr+0xb0>
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9d0:	2b05      	cmp	r3, #5
 800b9d2:	d903      	bls.n	800b9dc <tcp_slowtmr+0xb0>
      ++pcb_remove;
 800b9d4:	7ffb      	ldrb	r3, [r7, #31]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	77fb      	strb	r3, [r7, #31]
 800b9da:	e0a2      	b.n	800bb22 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b9e2:	2b0b      	cmp	r3, #11
 800b9e4:	d903      	bls.n	800b9ee <tcp_slowtmr+0xc2>
      ++pcb_remove;
 800b9e6:	7ffb      	ldrb	r3, [r7, #31]
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	77fb      	strb	r3, [r7, #31]
 800b9ec:	e099      	b.n	800bb22 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d032      	beq.n	800ba5e <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fa:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800b9fe:	3b01      	subs	r3, #1
 800ba00:	4a6d      	ldr	r2, [pc, #436]	@ (800bbb8 <tcp_slowtmr+0x28c>)
 800ba02:	5cd3      	ldrb	r3, [r2, r3]
 800ba04:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ba0c:	7cfa      	ldrb	r2, [r7, #19]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d907      	bls.n	800ba22 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 800ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba14:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ba18:	3301      	adds	r3, #1
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba24:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ba28:	7cfa      	ldrb	r2, [r7, #19]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d879      	bhi.n	800bb22 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800ba2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba30:	f003 fec7 	bl	800f7c2 <tcp_zero_window_probe>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d173      	bne.n	800bb22 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ba48:	2b06      	cmp	r3, #6
 800ba4a:	d86a      	bhi.n	800bb22 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ba52:	3301      	adds	r3, #1
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba58:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800ba5c:	e061      	b.n	800bb22 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	db08      	blt.n	800ba7a <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	3301      	adds	r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	b21a      	sxth	r2, r3
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d04f      	beq.n	800bb22 <tcp_slowtmr+0x1f6>
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	db47      	blt.n	800bb22 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	7d1b      	ldrb	r3, [r3, #20]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d018      	beq.n	800bacc <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800ba9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800baa0:	2b0c      	cmp	r3, #12
 800baa2:	bf28      	it	cs
 800baa4:	230c      	movcs	r3, #12
 800baa6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800baa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800baae:	10db      	asrs	r3, r3, #3
 800bab0:	b21b      	sxth	r3, r3
 800bab2:	461a      	mov	r2, r3
 800bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800baba:	4413      	add	r3, r2
 800babc:	7dfa      	ldrb	r2, [r7, #23]
 800babe:	493f      	ldr	r1, [pc, #252]	@ (800bbbc <tcp_slowtmr+0x290>)
 800bac0:	5c8a      	ldrb	r2, [r1, r2]
 800bac2:	4093      	lsls	r3, r2
 800bac4:	b21a      	sxth	r2, r3
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 800bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bace:	2200      	movs	r2, #0
 800bad0:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800bad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bada:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bade:	4293      	cmp	r3, r2
 800bae0:	bf28      	it	cs
 800bae2:	4613      	movcs	r3, r2
 800bae4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800bae6:	8abb      	ldrh	r3, [r7, #20]
 800bae8:	085b      	lsrs	r3, r3, #1
 800baea:	b29a      	uxth	r2, r3
 800baec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800baf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d206      	bcs.n	800bb12 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800bb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 800bb1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb1e:	f003 fd3f 	bl	800f5a0 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb24:	7d1b      	ldrb	r3, [r3, #20]
 800bb26:	2b06      	cmp	r3, #6
 800bb28:	d10f      	bne.n	800bb4a <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 800bb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2c:	7e9b      	ldrb	r3, [r3, #26]
 800bb2e:	f003 0310 	and.w	r3, r3, #16
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d009      	beq.n	800bb4a <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb36:	4b18      	ldr	r3, [pc, #96]	@ (800bb98 <tcp_slowtmr+0x26c>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b28      	cmp	r3, #40	@ 0x28
 800bb42:	d902      	bls.n	800bb4a <tcp_slowtmr+0x21e>
          ++pcb_remove;
 800bb44:	7ffb      	ldrb	r3, [r7, #31]
 800bb46:	3301      	adds	r3, #1
 800bb48:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	7a1b      	ldrb	r3, [r3, #8]
 800bb4e:	f003 0308 	and.w	r3, r3, #8
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d05d      	beq.n	800bc12 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 800bb56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb58:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb5a:	2b04      	cmp	r3, #4
 800bb5c:	d003      	beq.n	800bb66 <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb60:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800bb62:	2b07      	cmp	r3, #7
 800bb64:	d155      	bne.n	800bc12 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb66:	4b0c      	ldr	r3, [pc, #48]	@ (800bb98 <tcp_slowtmr+0x26c>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb76:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800bb7a:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800bb7e:	4910      	ldr	r1, [pc, #64]	@ (800bbc0 <tcp_slowtmr+0x294>)
 800bb80:	fba1 1303 	umull	r1, r3, r1, r3
 800bb84:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d91c      	bls.n	800bbc4 <tcp_slowtmr+0x298>
        ++pcb_remove;
 800bb8a:	7ffb      	ldrb	r3, [r7, #31]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800bb90:	7fbb      	ldrb	r3, [r7, #30]
 800bb92:	3301      	adds	r3, #1
 800bb94:	77bb      	strb	r3, [r7, #30]
 800bb96:	e03c      	b.n	800bc12 <tcp_slowtmr+0x2e6>
 800bb98:	200080ac 	.word	0x200080ac
 800bb9c:	200080c2 	.word	0x200080c2
 800bba0:	200080b8 	.word	0x200080b8
 800bba4:	08014f04 	.word	0x08014f04
 800bba8:	080150b4 	.word	0x080150b4
 800bbac:	08014f40 	.word	0x08014f40
 800bbb0:	080150e0 	.word	0x080150e0
 800bbb4:	0801510c 	.word	0x0801510c
 800bbb8:	080163a8 	.word	0x080163a8
 800bbbc:	08016398 	.word	0x08016398
 800bbc0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbc4:	4b97      	ldr	r3, [pc, #604]	@ (800be24 <tcp_slowtmr+0x4f8>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800bbda:	4618      	mov	r0, r3
 800bbdc:	4b92      	ldr	r3, [pc, #584]	@ (800be28 <tcp_slowtmr+0x4fc>)
 800bbde:	fb00 f303 	mul.w	r3, r0, r3
 800bbe2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800bbe4:	4991      	ldr	r1, [pc, #580]	@ (800be2c <tcp_slowtmr+0x500>)
 800bbe6:	fba1 1303 	umull	r1, r3, r1, r3
 800bbea:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d910      	bls.n	800bc12 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 800bbf0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbf2:	f003 fda9 	bl	800f748 <tcp_keepalive>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800bbfa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d107      	bne.n	800bc12 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 800bc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc04:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800bc08:	3301      	adds	r3, #1
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d016      	beq.n	800bc48 <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800bc1a:	4b82      	ldr	r3, [pc, #520]	@ (800be24 <tcp_slowtmr+0x4f8>)
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	1ad2      	subs	r2, r2, r3
 800bc24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc26:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	440b      	add	r3, r1
 800bc32:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d307      	bcc.n	800bc48 <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 800bc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f000 fa06 	bl	800c04e <tcp_segs_free>
      pcb->ooseq = NULL;
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	2200      	movs	r2, #0
 800bc46:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 800bc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4a:	7d1b      	ldrb	r3, [r3, #20]
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d109      	bne.n	800bc64 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc50:	4b74      	ldr	r3, [pc, #464]	@ (800be24 <tcp_slowtmr+0x4f8>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	2b28      	cmp	r3, #40	@ 0x28
 800bc5c:	d902      	bls.n	800bc64 <tcp_slowtmr+0x338>
        ++pcb_remove;
 800bc5e:	7ffb      	ldrb	r3, [r7, #31]
 800bc60:	3301      	adds	r3, #1
 800bc62:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 800bc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc66:	7d1b      	ldrb	r3, [r3, #20]
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d109      	bne.n	800bc80 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bc6c:	4b6d      	ldr	r3, [pc, #436]	@ (800be24 <tcp_slowtmr+0x4f8>)
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc72:	6a1b      	ldr	r3, [r3, #32]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	2bf0      	cmp	r3, #240	@ 0xf0
 800bc78:	d902      	bls.n	800bc80 <tcp_slowtmr+0x354>
        ++pcb_remove;
 800bc7a:	7ffb      	ldrb	r3, [r7, #31]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 800bc80:	7ffb      	ldrb	r3, [r7, #31]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d05d      	beq.n	800bd42 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 800bc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc8c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800bc8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc90:	f000 fb86 	bl	800c3a0 <tcp_pcb_purge>
      if (prev != NULL) {
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d010      	beq.n	800bcbc <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc9a:	4b65      	ldr	r3, [pc, #404]	@ (800be30 <tcp_slowtmr+0x504>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d106      	bne.n	800bcb2 <tcp_slowtmr+0x386>
 800bca4:	4b63      	ldr	r3, [pc, #396]	@ (800be34 <tcp_slowtmr+0x508>)
 800bca6:	f240 4289 	movw	r2, #1161	@ 0x489
 800bcaa:	4963      	ldr	r1, [pc, #396]	@ (800be38 <tcp_slowtmr+0x50c>)
 800bcac:	4863      	ldr	r0, [pc, #396]	@ (800be3c <tcp_slowtmr+0x510>)
 800bcae:	f007 fa6b 	bl	8013188 <iprintf>
        prev->next = pcb->next;
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	68da      	ldr	r2, [r3, #12]
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	60da      	str	r2, [r3, #12]
 800bcba:	e00f      	b.n	800bcdc <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bcbc:	4b5c      	ldr	r3, [pc, #368]	@ (800be30 <tcp_slowtmr+0x504>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d006      	beq.n	800bcd4 <tcp_slowtmr+0x3a8>
 800bcc6:	4b5b      	ldr	r3, [pc, #364]	@ (800be34 <tcp_slowtmr+0x508>)
 800bcc8:	f240 428d 	movw	r2, #1165	@ 0x48d
 800bccc:	495c      	ldr	r1, [pc, #368]	@ (800be40 <tcp_slowtmr+0x514>)
 800bcce:	485b      	ldr	r0, [pc, #364]	@ (800be3c <tcp_slowtmr+0x510>)
 800bcd0:	f007 fa5a 	bl	8013188 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	4a55      	ldr	r2, [pc, #340]	@ (800be30 <tcp_slowtmr+0x504>)
 800bcda:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800bcdc:	7fbb      	ldrb	r3, [r7, #30]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d010      	beq.n	800bd04 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bcea:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	1d1d      	adds	r5, r3, #4
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf2:	8adb      	ldrh	r3, [r3, #22]
 800bcf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcf6:	8b12      	ldrh	r2, [r2, #24]
 800bcf8:	9201      	str	r2, [sp, #4]
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	462b      	mov	r3, r5
 800bcfe:	4622      	mov	r2, r4
 800bd00:	f003 fbd8 	bl	800f4b4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800bd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	7d1b      	ldrb	r3, [r3, #20]
 800bd0e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	2001      	movs	r0, #1
 800bd1e:	f7fe fb2f 	bl	800a380 <memp_free>
      tcp_active_pcbs_changed = 0;
 800bd22:	4b48      	ldr	r3, [pc, #288]	@ (800be44 <tcp_slowtmr+0x518>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d004      	beq.n	800bd38 <tcp_slowtmr+0x40c>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f06f 010c 	mvn.w	r1, #12
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bd38:	4b42      	ldr	r3, [pc, #264]	@ (800be44 <tcp_slowtmr+0x518>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d035      	beq.n	800bdac <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 800bd40:	e606      	b.n	800b950 <tcp_slowtmr+0x24>
      prev = pcb;
 800bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd44:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800bd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	7edb      	ldrb	r3, [r3, #27]
 800bd50:	3301      	adds	r3, #1
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800bd58:	6a3b      	ldr	r3, [r7, #32]
 800bd5a:	7eda      	ldrb	r2, [r3, #27]
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	7f1b      	ldrb	r3, [r3, #28]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d323      	bcc.n	800bdac <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	2200      	movs	r2, #0
 800bd68:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 800bd6a:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <tcp_slowtmr+0x518>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00a      	beq.n	800bd90 <tcp_slowtmr+0x464>
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd80:	6a3a      	ldr	r2, [r7, #32]
 800bd82:	6912      	ldr	r2, [r2, #16]
 800bd84:	6a39      	ldr	r1, [r7, #32]
 800bd86:	4610      	mov	r0, r2
 800bd88:	4798      	blx	r3
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	777b      	strb	r3, [r7, #29]
 800bd8e:	e001      	b.n	800bd94 <tcp_slowtmr+0x468>
 800bd90:	2300      	movs	r3, #0
 800bd92:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800bd94:	4b2b      	ldr	r3, [pc, #172]	@ (800be44 <tcp_slowtmr+0x518>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f47f add8 	bne.w	800b94e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bd9e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d102      	bne.n	800bdac <tcp_slowtmr+0x480>
          tcp_output(prev);
 800bda6:	6a38      	ldr	r0, [r7, #32]
 800bda8:	f003 f900 	bl	800efac <tcp_output>
  while (pcb != NULL) {
 800bdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f47f add4 	bne.w	800b95c <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800bdb8:	4b23      	ldr	r3, [pc, #140]	@ (800be48 <tcp_slowtmr+0x51c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800bdbe:	e068      	b.n	800be92 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	7d1b      	ldrb	r3, [r3, #20]
 800bdc4:	2b0a      	cmp	r3, #10
 800bdc6:	d006      	beq.n	800bdd6 <tcp_slowtmr+0x4aa>
 800bdc8:	4b1a      	ldr	r3, [pc, #104]	@ (800be34 <tcp_slowtmr+0x508>)
 800bdca:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800bdce:	491f      	ldr	r1, [pc, #124]	@ (800be4c <tcp_slowtmr+0x520>)
 800bdd0:	481a      	ldr	r0, [pc, #104]	@ (800be3c <tcp_slowtmr+0x510>)
 800bdd2:	f007 f9d9 	bl	8013188 <iprintf>
    pcb_remove = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bdda:	4b12      	ldr	r3, [pc, #72]	@ (800be24 <tcp_slowtmr+0x4f8>)
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	2bf0      	cmp	r3, #240	@ 0xf0
 800bde6:	d902      	bls.n	800bdee <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 800bde8:	7ffb      	ldrb	r3, [r7, #31]
 800bdea:	3301      	adds	r3, #1
 800bdec:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bdee:	7ffb      	ldrb	r3, [r7, #31]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d049      	beq.n	800be88 <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800bdf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdf6:	f000 fad3 	bl	800c3a0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d029      	beq.n	800be54 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800be00:	4b11      	ldr	r3, [pc, #68]	@ (800be48 <tcp_slowtmr+0x51c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be06:	429a      	cmp	r2, r3
 800be08:	d106      	bne.n	800be18 <tcp_slowtmr+0x4ec>
 800be0a:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <tcp_slowtmr+0x508>)
 800be0c:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 800be10:	490f      	ldr	r1, [pc, #60]	@ (800be50 <tcp_slowtmr+0x524>)
 800be12:	480a      	ldr	r0, [pc, #40]	@ (800be3c <tcp_slowtmr+0x510>)
 800be14:	f007 f9b8 	bl	8013188 <iprintf>
        prev->next = pcb->next;
 800be18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1a:	68da      	ldr	r2, [r3, #12]
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	60da      	str	r2, [r3, #12]
 800be20:	e028      	b.n	800be74 <tcp_slowtmr+0x548>
 800be22:	bf00      	nop
 800be24:	200080ac 	.word	0x200080ac
 800be28:	000124f8 	.word	0x000124f8
 800be2c:	10624dd3 	.word	0x10624dd3
 800be30:	200080b8 	.word	0x200080b8
 800be34:	08014f04 	.word	0x08014f04
 800be38:	0801513c 	.word	0x0801513c
 800be3c:	08014f40 	.word	0x08014f40
 800be40:	08015168 	.word	0x08015168
 800be44:	200080c0 	.word	0x200080c0
 800be48:	200080bc 	.word	0x200080bc
 800be4c:	08015194 	.word	0x08015194
 800be50:	080151c4 	.word	0x080151c4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800be54:	4b13      	ldr	r3, [pc, #76]	@ (800bea4 <tcp_slowtmr+0x578>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d006      	beq.n	800be6c <tcp_slowtmr+0x540>
 800be5e:	4b12      	ldr	r3, [pc, #72]	@ (800bea8 <tcp_slowtmr+0x57c>)
 800be60:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 800be64:	4911      	ldr	r1, [pc, #68]	@ (800beac <tcp_slowtmr+0x580>)
 800be66:	4812      	ldr	r0, [pc, #72]	@ (800beb0 <tcp_slowtmr+0x584>)
 800be68:	f007 f98e 	bl	8013188 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	4a0c      	ldr	r2, [pc, #48]	@ (800bea4 <tcp_slowtmr+0x578>)
 800be72:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be76:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800be7e:	69b9      	ldr	r1, [r7, #24]
 800be80:	2001      	movs	r0, #1
 800be82:	f7fe fa7d 	bl	800a380 <memp_free>
 800be86:	e004      	b.n	800be92 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800be92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be94:	2b00      	cmp	r3, #0
 800be96:	d193      	bne.n	800bdc0 <tcp_slowtmr+0x494>
    }
  }
}
 800be98:	bf00      	nop
 800be9a:	bf00      	nop
 800be9c:	3728      	adds	r7, #40	@ 0x28
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bdb0      	pop	{r4, r5, r7, pc}
 800bea2:	bf00      	nop
 800bea4:	200080bc 	.word	0x200080bc
 800bea8:	08014f04 	.word	0x08014f04
 800beac:	080151ec 	.word	0x080151ec
 800beb0:	08014f40 	.word	0x08014f40

0800beb4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800beba:	4b2d      	ldr	r3, [pc, #180]	@ (800bf70 <tcp_fasttmr+0xbc>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	3301      	adds	r3, #1
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	4b2b      	ldr	r3, [pc, #172]	@ (800bf70 <tcp_fasttmr+0xbc>)
 800bec4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bec6:	4b2b      	ldr	r3, [pc, #172]	@ (800bf74 <tcp_fasttmr+0xc0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800becc:	e048      	b.n	800bf60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7f5a      	ldrb	r2, [r3, #29]
 800bed2:	4b27      	ldr	r3, [pc, #156]	@ (800bf70 <tcp_fasttmr+0xbc>)
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d03f      	beq.n	800bf5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800beda:	4b25      	ldr	r3, [pc, #148]	@ (800bf70 <tcp_fasttmr+0xbc>)
 800bedc:	781a      	ldrb	r2, [r3, #0]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	7e9b      	ldrb	r3, [r3, #26]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d010      	beq.n	800bf10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7e9b      	ldrb	r3, [r3, #26]
 800bef2:	f043 0302 	orr.w	r3, r3, #2
 800bef6:	b2da      	uxtb	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f003 f855 	bl	800efac <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	7e9b      	ldrb	r3, [r3, #26]
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7e9b      	ldrb	r3, [r3, #26]
 800bf14:	f003 0308 	and.w	r3, r3, #8
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d009      	beq.n	800bf30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	7e9b      	ldrb	r3, [r3, #26]
 800bf20:	f023 0308 	bic.w	r3, r3, #8
 800bf24:	b2da      	uxtb	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fb16 	bl	800b55c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00a      	beq.n	800bf54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bf3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <tcp_fasttmr+0xc4>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f819 	bl	800bf7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bf4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf78 <tcp_fasttmr+0xc4>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d000      	beq.n	800bf54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bf52:	e7b8      	b.n	800bec6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	607b      	str	r3, [r7, #4]
 800bf58:	e002      	b.n	800bf60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1b3      	bne.n	800bece <tcp_fasttmr+0x1a>
    }
  }
}
 800bf66:	bf00      	nop
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	200080c2 	.word	0x200080c2
 800bf74:	200080b8 	.word	0x200080b8
 800bf78:	200080c0 	.word	0x200080c0

0800bf7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bf7c:	b590      	push	{r4, r7, lr}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf88:	7b5b      	ldrb	r3, [r3, #13]
 800bf8a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf90:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <tcp_process_refused_data+0x3e>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6918      	ldr	r0, [r3, #16]
 800bfac:	2300      	movs	r3, #0
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	47a0      	blx	r4
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]
 800bfb8:	e007      	b.n	800bfca <tcp_process_refused_data+0x4e>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	6879      	ldr	r1, [r7, #4]
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f000 f88d 	bl	800c0e0 <tcp_recv_null>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d12a      	bne.n	800c028 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800bfd2:	7bbb      	ldrb	r3, [r7, #14]
 800bfd4:	f003 0320 	and.w	r3, r3, #32
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d033      	beq.n	800c044 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfe0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bfe4:	d005      	beq.n	800bff2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bfea:	3301      	adds	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00b      	beq.n	800c014 <tcp_process_refused_data+0x98>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6918      	ldr	r0, [r3, #16]
 800c006:	2300      	movs	r3, #0
 800c008:	2200      	movs	r2, #0
 800c00a:	6879      	ldr	r1, [r7, #4]
 800c00c:	47a0      	blx	r4
 800c00e:	4603      	mov	r3, r0
 800c010:	73fb      	strb	r3, [r7, #15]
 800c012:	e001      	b.n	800c018 <tcp_process_refused_data+0x9c>
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01c:	f113 0f0d 	cmn.w	r3, #13
 800c020:	d110      	bne.n	800c044 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800c022:	f06f 030c 	mvn.w	r3, #12
 800c026:	e00e      	b.n	800c046 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800c028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c02c:	f113 0f0d 	cmn.w	r3, #13
 800c030:	d102      	bne.n	800c038 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c032:	f06f 030c 	mvn.w	r3, #12
 800c036:	e006      	b.n	800c046 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800c03e:	f06f 0304 	mvn.w	r3, #4
 800c042:	e000      	b.n	800c046 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd90      	pop	{r4, r7, pc}

0800c04e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c056:	e007      	b.n	800c068 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 f80a 	bl	800c078 <tcp_seg_free>
    seg = next;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1f4      	bne.n	800c058 <tcp_segs_free+0xa>
  }
}
 800c06e:	bf00      	nop
 800c070:	bf00      	nop
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00c      	beq.n	800c0a0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d004      	beq.n	800c098 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fe90 	bl	800adb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	2003      	movs	r0, #3
 800c09c:	f7fe f970 	bl	800a380 <memp_free>
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c0b0:	2003      	movs	r0, #3
 800c0b2:	f7fe f919 	bl	800a2e8 <memp_malloc>
 800c0b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d101      	bne.n	800c0c2 <tcp_seg_copy+0x1a>
    return NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	e00a      	b.n	800c0d8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c0c2:	2210      	movs	r2, #16
 800c0c4:	6879      	ldr	r1, [r7, #4]
 800c0c6:	68f8      	ldr	r0, [r7, #12]
 800c0c8:	f007 fa5f 	bl	801358a <memcpy>
  pbuf_ref(cseg->p);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	685b      	ldr	r3, [r3, #4]
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe ff1b 	bl	800af0c <pbuf_ref>
  return cseg;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]
 800c0ec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d009      	beq.n	800c108 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	891b      	ldrh	r3, [r3, #8]
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	68b8      	ldr	r0, [r7, #8]
 800c0fc:	f7ff fbbc 	bl	800b878 <tcp_recved>
    pbuf_free(p);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f7fe fe59 	bl	800adb8 <pbuf_free>
 800c106:	e008      	b.n	800c11a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800c108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d104      	bne.n	800c11a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800c110:	68b8      	ldr	r0, [r7, #8]
 800c112:	f7ff fa8d 	bl	800b630 <tcp_close>
 800c116:	4603      	mov	r3, r0
 800c118:	e000      	b.n	800c11c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c132:	2b00      	cmp	r3, #0
 800c134:	db01      	blt.n	800c13a <tcp_kill_prio+0x16>
 800c136:	79fb      	ldrb	r3, [r7, #7]
 800c138:	e000      	b.n	800c13c <tcp_kill_prio+0x18>
 800c13a:	237f      	movs	r3, #127	@ 0x7f
 800c13c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c146:	4b16      	ldr	r3, [pc, #88]	@ (800c1a0 <tcp_kill_prio+0x7c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	617b      	str	r3, [r7, #20]
 800c14c:	e01a      	b.n	800c184 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	7d5b      	ldrb	r3, [r3, #21]
 800c152:	7afa      	ldrb	r2, [r7, #11]
 800c154:	429a      	cmp	r2, r3
 800c156:	d312      	bcc.n	800c17e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c158:	4b12      	ldr	r3, [pc, #72]	@ (800c1a4 <tcp_kill_prio+0x80>)
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	429a      	cmp	r2, r3
 800c166:	d80a      	bhi.n	800c17e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800c168:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a4 <tcp_kill_prio+0x80>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	6a1b      	ldr	r3, [r3, #32]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	7d5b      	ldrb	r3, [r3, #21]
 800c17c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	617b      	str	r3, [r7, #20]
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e1      	bne.n	800c14e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c190:	6938      	ldr	r0, [r7, #16]
 800c192:	f7ff fb17 	bl	800b7c4 <tcp_abort>
  }
}
 800c196:	bf00      	nop
 800c198:	3718      	adds	r7, #24
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200080b8 	.word	0x200080b8
 800c1a4:	200080ac 	.word	0x200080ac

0800c1a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b086      	sub	sp, #24
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	2b08      	cmp	r3, #8
 800c1b6:	d009      	beq.n	800c1cc <tcp_kill_state+0x24>
 800c1b8:	79fb      	ldrb	r3, [r7, #7]
 800c1ba:	2b09      	cmp	r3, #9
 800c1bc:	d006      	beq.n	800c1cc <tcp_kill_state+0x24>
 800c1be:	4b1a      	ldr	r3, [pc, #104]	@ (800c228 <tcp_kill_state+0x80>)
 800c1c0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c1c4:	4919      	ldr	r1, [pc, #100]	@ (800c22c <tcp_kill_state+0x84>)
 800c1c6:	481a      	ldr	r0, [pc, #104]	@ (800c230 <tcp_kill_state+0x88>)
 800c1c8:	f006 ffde 	bl	8013188 <iprintf>

  inactivity = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1d4:	4b17      	ldr	r3, [pc, #92]	@ (800c234 <tcp_kill_state+0x8c>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	e017      	b.n	800c20c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	79fa      	ldrb	r2, [r7, #7]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d10f      	bne.n	800c206 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c1e6:	4b14      	ldr	r3, [pc, #80]	@ (800c238 <tcp_kill_state+0x90>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	6a1b      	ldr	r3, [r3, #32]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d807      	bhi.n	800c206 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c1f6:	4b10      	ldr	r3, [pc, #64]	@ (800c238 <tcp_kill_state+0x90>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	1ad3      	subs	r3, r2, r3
 800c200:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e4      	bne.n	800c1dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c218:	2100      	movs	r1, #0
 800c21a:	6938      	ldr	r0, [r7, #16]
 800c21c:	f7ff fa20 	bl	800b660 <tcp_abandon>
  }
}
 800c220:	bf00      	nop
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	08014f04 	.word	0x08014f04
 800c22c:	08015214 	.word	0x08015214
 800c230:	08014f40 	.word	0x08014f40
 800c234:	200080b8 	.word	0x200080b8
 800c238:	200080ac 	.word	0x200080ac

0800c23c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c24a:	4b12      	ldr	r3, [pc, #72]	@ (800c294 <tcp_kill_timewait+0x58>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	e012      	b.n	800c278 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c252:	4b11      	ldr	r3, [pc, #68]	@ (800c298 <tcp_kill_timewait+0x5c>)
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	1ad3      	subs	r3, r2, r3
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d807      	bhi.n	800c272 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c262:	4b0d      	ldr	r3, [pc, #52]	@ (800c298 <tcp_kill_timewait+0x5c>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e9      	bne.n	800c252 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d002      	beq.n	800c28a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c284:	68b8      	ldr	r0, [r7, #8]
 800c286:	f7ff fa9d 	bl	800b7c4 <tcp_abort>
  }
}
 800c28a:	bf00      	nop
 800c28c:	3710      	adds	r7, #16
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	200080bc 	.word	0x200080bc
 800c298:	200080ac 	.word	0x200080ac

0800c29c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	f7fe f81e 	bl	800a2e8 <memp_malloc>
 800c2ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d124      	bne.n	800c2fe <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c2b4:	f7ff ffc2 	bl	800c23c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	f7fe f815 	bl	800a2e8 <memp_malloc>
 800c2be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d11b      	bne.n	800c2fe <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c2c6:	2009      	movs	r0, #9
 800c2c8:	f7ff ff6e 	bl	800c1a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	f7fe f80b 	bl	800a2e8 <memp_malloc>
 800c2d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d111      	bne.n	800c2fe <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c2da:	2008      	movs	r0, #8
 800c2dc:	f7ff ff64 	bl	800c1a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f7fe f801 	bl	800a2e8 <memp_malloc>
 800c2e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d107      	bne.n	800c2fe <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c2ee:	79fb      	ldrb	r3, [r7, #7]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff ff17 	bl	800c124 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f7fd fff6 	bl	800a2e8 <memp_malloc>
 800c2fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d03f      	beq.n	800c384 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c304:	2298      	movs	r2, #152	@ 0x98
 800c306:	2100      	movs	r1, #0
 800c308:	68f8      	ldr	r0, [r7, #12]
 800c30a:	f007 f8b5 	bl	8013478 <memset>
    pcb->prio = prio;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	79fa      	ldrb	r2, [r7, #7]
 800c312:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c31a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c324:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	22ff      	movs	r2, #255	@ 0xff
 800c332:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c33a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2206      	movs	r2, #6
 800c340:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2206      	movs	r2, #6
 800c348:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c350:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2201      	movs	r2, #1
 800c356:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800c35a:	4b0d      	ldr	r3, [pc, #52]	@ (800c390 <tcp_alloc+0xf4>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c362:	4b0c      	ldr	r3, [pc, #48]	@ (800c394 <tcp_alloc+0xf8>)
 800c364:	781a      	ldrb	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c370:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	4a08      	ldr	r2, [pc, #32]	@ (800c398 <tcp_alloc+0xfc>)
 800c378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	4a07      	ldr	r2, [pc, #28]	@ (800c39c <tcp_alloc+0x100>)
 800c380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c384:	68fb      	ldr	r3, [r7, #12]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	200080ac 	.word	0x200080ac
 800c394:	200080c2 	.word	0x200080c2
 800c398:	0800c0e1 	.word	0x0800c0e1
 800c39c:	006ddd00 	.word	0x006ddd00

0800c3a0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	7d1b      	ldrb	r3, [r3, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d034      	beq.n	800c41a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c3b4:	2b0a      	cmp	r3, #10
 800c3b6:	d030      	beq.n	800c41a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d02c      	beq.n	800c41a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d007      	beq.n	800c3d8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7fe fcf3 	bl	800adb8 <pbuf_free>
      pcb->refused_data = NULL;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff fe36 	bl	800c04e <tcp_segs_free>
    pcb->ooseq = NULL;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c3ee:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fe2a 	bl	800c04e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff fe25 	bl	800c04e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	669a      	str	r2, [r3, #104]	@ 0x68
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2200      	movs	r2, #0
 800c416:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800c41a:	bf00      	nop
 800c41c:	3708      	adds	r7, #8
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d105      	bne.n	800c444 <tcp_pcb_remove+0x20>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	68da      	ldr	r2, [r3, #12]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	601a      	str	r2, [r3, #0]
 800c442:	e013      	b.n	800c46c <tcp_pcb_remove+0x48>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	60fb      	str	r3, [r7, #12]
 800c44a:	e00c      	b.n	800c466 <tcp_pcb_remove+0x42>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	429a      	cmp	r2, r3
 800c454:	d104      	bne.n	800c460 <tcp_pcb_remove+0x3c>
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	68da      	ldr	r2, [r3, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	60da      	str	r2, [r3, #12]
 800c45e:	e005      	b.n	800c46c <tcp_pcb_remove+0x48>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1ef      	bne.n	800c44c <tcp_pcb_remove+0x28>
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c472:	6838      	ldr	r0, [r7, #0]
 800c474:	f7ff ff94 	bl	800c3a0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	7d1b      	ldrb	r3, [r3, #20]
 800c47c:	2b0a      	cmp	r3, #10
 800c47e:	d013      	beq.n	800c4a8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800c484:	2b01      	cmp	r3, #1
 800c486:	d00f      	beq.n	800c4a8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	7e9b      	ldrb	r3, [r3, #26]
 800c48c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800c490:	2b00      	cmp	r3, #0
 800c492:	d009      	beq.n	800c4a8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	7e9b      	ldrb	r3, [r3, #26]
 800c498:	f043 0302 	orr.w	r3, r3, #2
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c4a2:	6838      	ldr	r0, [r7, #0]
 800c4a4:	f002 fd82 	bl	800efac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	7d1b      	ldrb	r3, [r3, #20]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d020      	beq.n	800c4f2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d006      	beq.n	800c4c6 <tcp_pcb_remove+0xa2>
 800c4b8:	4b13      	ldr	r3, [pc, #76]	@ (800c508 <tcp_pcb_remove+0xe4>)
 800c4ba:	f240 7253 	movw	r2, #1875	@ 0x753
 800c4be:	4913      	ldr	r1, [pc, #76]	@ (800c50c <tcp_pcb_remove+0xe8>)
 800c4c0:	4813      	ldr	r0, [pc, #76]	@ (800c510 <tcp_pcb_remove+0xec>)
 800c4c2:	f006 fe61 	bl	8013188 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d006      	beq.n	800c4dc <tcp_pcb_remove+0xb8>
 800c4ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c508 <tcp_pcb_remove+0xe4>)
 800c4d0:	f240 7254 	movw	r2, #1876	@ 0x754
 800c4d4:	490f      	ldr	r1, [pc, #60]	@ (800c514 <tcp_pcb_remove+0xf0>)
 800c4d6:	480e      	ldr	r0, [pc, #56]	@ (800c510 <tcp_pcb_remove+0xec>)
 800c4d8:	f006 fe56 	bl	8013188 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <tcp_pcb_remove+0xce>
 800c4e4:	4b08      	ldr	r3, [pc, #32]	@ (800c508 <tcp_pcb_remove+0xe4>)
 800c4e6:	f240 7256 	movw	r2, #1878	@ 0x756
 800c4ea:	490b      	ldr	r1, [pc, #44]	@ (800c518 <tcp_pcb_remove+0xf4>)
 800c4ec:	4808      	ldr	r0, [pc, #32]	@ (800c510 <tcp_pcb_remove+0xec>)
 800c4ee:	f006 fe4b 	bl	8013188 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	08014f04 	.word	0x08014f04
 800c50c:	080152bc 	.word	0x080152bc
 800c510:	08014f40 	.word	0x08014f40
 800c514:	080152d4 	.word	0x080152d4
 800c518:	080152f0 	.word	0x080152f0

0800c51c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c524:	4b06      	ldr	r3, [pc, #24]	@ (800c540 <tcp_next_iss+0x24>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	4b06      	ldr	r3, [pc, #24]	@ (800c544 <tcp_next_iss+0x28>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4413      	add	r3, r2
 800c52e:	4a04      	ldr	r2, [pc, #16]	@ (800c540 <tcp_next_iss+0x24>)
 800c530:	6013      	str	r3, [r2, #0]
  return iss;
 800c532:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <tcp_next_iss+0x24>)
 800c534:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c536:	4618      	mov	r0, r3
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bc80      	pop	{r7}
 800c53e:	4770      	bx	lr
 800c540:	2000011c 	.word	0x2000011c
 800c544:	200080ac 	.word	0x200080ac

0800c548 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	4603      	mov	r3, r0
 800c550:	6039      	str	r1, [r7, #0]
 800c552:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800c554:	6838      	ldr	r0, [r7, #0]
 800c556:	f004 ff2b 	bl	80113b0 <ip4_route>
 800c55a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800c562:	88fb      	ldrh	r3, [r7, #6]
 800c564:	e010      	b.n	800c588 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c56a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c56c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d008      	beq.n	800c586 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800c574:	897b      	ldrh	r3, [r7, #10]
 800c576:	3b28      	subs	r3, #40	@ 0x28
 800c578:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c57a:	893a      	ldrh	r2, [r7, #8]
 800c57c:	88fb      	ldrh	r3, [r7, #6]
 800c57e:	4293      	cmp	r3, r2
 800c580:	bf28      	it	cs
 800c582:	4613      	movcs	r3, r2
 800c584:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800c586:	88fb      	ldrh	r3, [r7, #6]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
 800c598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c59e:	e011      	b.n	800c5c4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d108      	bne.n	800c5be <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f7ff f906 	bl	800b7c4 <tcp_abort>
      pcb = next;
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	e002      	b.n	800c5c4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1ea      	bne.n	800c5a0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d02c      	beq.n	800c63e <tcp_netif_ip_addr_changed+0x6a>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d028      	beq.n	800c63e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c5ec:	4b16      	ldr	r3, [pc, #88]	@ (800c648 <tcp_netif_ip_addr_changed+0x74>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff ffcc 	bl	800c590 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c5f8:	4b14      	ldr	r3, [pc, #80]	@ (800c64c <tcp_netif_ip_addr_changed+0x78>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff ffc6 	bl	800c590 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d019      	beq.n	800c63e <tcp_netif_ip_addr_changed+0x6a>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d015      	beq.n	800c63e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c612:	4b0f      	ldr	r3, [pc, #60]	@ (800c650 <tcp_netif_ip_addr_changed+0x7c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
 800c618:	e00e      	b.n	800c638 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d103      	bne.n	800c634 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1ed      	bne.n	800c61a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c63e:	bf00      	nop
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200080b8 	.word	0x200080b8
 800c64c:	200080b0 	.word	0x200080b0
 800c650:	200080b4 	.word	0x200080b4

0800c654 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b08b      	sub	sp, #44	@ 0x2c
 800c658:	af02      	add	r7, sp, #8
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	4a81      	ldr	r2, [pc, #516]	@ (800c868 <tcp_input+0x214>)
 800c664:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	895b      	ldrh	r3, [r3, #10]
 800c66a:	2b13      	cmp	r3, #19
 800c66c:	f240 8396 	bls.w	800cd9c <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c670:	4b7e      	ldr	r3, [pc, #504]	@ (800c86c <tcp_input+0x218>)
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	4a7d      	ldr	r2, [pc, #500]	@ (800c86c <tcp_input+0x218>)
 800c676:	6812      	ldr	r2, [r2, #0]
 800c678:	4611      	mov	r1, r2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f005 f912 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	f040 838c 	bne.w	800cda0 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c688:	4b78      	ldr	r3, [pc, #480]	@ (800c86c <tcp_input+0x218>)
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c690:	2be0      	cmp	r3, #224	@ 0xe0
 800c692:	f000 8385 	beq.w	800cda0 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800c696:	4b74      	ldr	r3, [pc, #464]	@ (800c868 <tcp_input+0x214>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	899b      	ldrh	r3, [r3, #12]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fd fa7a 	bl	8009b98 <lwip_htons>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	0b1b      	lsrs	r3, r3, #12
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c6b0:	7cbb      	ldrb	r3, [r7, #18]
 800c6b2:	2b13      	cmp	r3, #19
 800c6b4:	f240 8376 	bls.w	800cda4 <tcp_input+0x750>
 800c6b8:	7cbb      	ldrb	r3, [r7, #18]
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	891b      	ldrh	r3, [r3, #8]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	f200 836f 	bhi.w	800cda4 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800c6c6:	7cbb      	ldrb	r3, [r7, #18]
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	3b14      	subs	r3, #20
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	4b68      	ldr	r3, [pc, #416]	@ (800c870 <tcp_input+0x21c>)
 800c6d0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c6d2:	4b68      	ldr	r3, [pc, #416]	@ (800c874 <tcp_input+0x220>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	895a      	ldrh	r2, [r3, #10]
 800c6dc:	7cbb      	ldrb	r3, [r7, #18]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d30d      	bcc.n	800c700 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c6e4:	4b62      	ldr	r3, [pc, #392]	@ (800c870 <tcp_input+0x21c>)
 800c6e6:	881a      	ldrh	r2, [r3, #0]
 800c6e8:	4b63      	ldr	r3, [pc, #396]	@ (800c878 <tcp_input+0x224>)
 800c6ea:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800c6ec:	7cbb      	ldrb	r3, [r7, #18]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	425b      	negs	r3, r3
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	b21b      	sxth	r3, r3
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7fe fb39 	bl	800ad70 <pbuf_header>
 800c6fe:	e055      	b.n	800c7ac <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d105      	bne.n	800c714 <tcp_input+0xc0>
 800c708:	4b5c      	ldr	r3, [pc, #368]	@ (800c87c <tcp_input+0x228>)
 800c70a:	22b2      	movs	r2, #178	@ 0xb2
 800c70c:	495c      	ldr	r1, [pc, #368]	@ (800c880 <tcp_input+0x22c>)
 800c70e:	485d      	ldr	r0, [pc, #372]	@ (800c884 <tcp_input+0x230>)
 800c710:	f006 fd3a 	bl	8013188 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800c714:	f06f 0113 	mvn.w	r1, #19
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7fe fb29 	bl	800ad70 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	895a      	ldrh	r2, [r3, #10]
 800c722:	4b55      	ldr	r3, [pc, #340]	@ (800c878 <tcp_input+0x224>)
 800c724:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800c726:	4b52      	ldr	r3, [pc, #328]	@ (800c870 <tcp_input+0x21c>)
 800c728:	881a      	ldrh	r2, [r3, #0]
 800c72a:	4b53      	ldr	r3, [pc, #332]	@ (800c878 <tcp_input+0x224>)
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c732:	4b51      	ldr	r3, [pc, #324]	@ (800c878 <tcp_input+0x224>)
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	425b      	negs	r3, r3
 800c738:	b29b      	uxth	r3, r3
 800c73a:	b21b      	sxth	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7fe fb16 	bl	800ad70 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	895b      	ldrh	r3, [r3, #10]
 800c74a:	8a3a      	ldrh	r2, [r7, #16]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	f200 832b 	bhi.w	800cda8 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	4a46      	ldr	r2, [pc, #280]	@ (800c874 <tcp_input+0x220>)
 800c75a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	8a3b      	ldrh	r3, [r7, #16]
 800c762:	425b      	negs	r3, r3
 800c764:	b29b      	uxth	r3, r3
 800c766:	b21b      	sxth	r3, r3
 800c768:	4619      	mov	r1, r3
 800c76a:	4610      	mov	r0, r2
 800c76c:	f7fe fb00 	bl	800ad70 <pbuf_header>
    p->tot_len -= opt2len;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	891a      	ldrh	r2, [r3, #8]
 800c774:	8a3b      	ldrh	r3, [r7, #16]
 800c776:	1ad3      	subs	r3, r2, r3
 800c778:	b29a      	uxth	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	895b      	ldrh	r3, [r3, #10]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d005      	beq.n	800c792 <tcp_input+0x13e>
 800c786:	4b3d      	ldr	r3, [pc, #244]	@ (800c87c <tcp_input+0x228>)
 800c788:	22cf      	movs	r2, #207	@ 0xcf
 800c78a:	493f      	ldr	r1, [pc, #252]	@ (800c888 <tcp_input+0x234>)
 800c78c:	483d      	ldr	r0, [pc, #244]	@ (800c884 <tcp_input+0x230>)
 800c78e:	f006 fcfb 	bl	8013188 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	891a      	ldrh	r2, [r3, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	891b      	ldrh	r3, [r3, #8]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d005      	beq.n	800c7ac <tcp_input+0x158>
 800c7a0:	4b36      	ldr	r3, [pc, #216]	@ (800c87c <tcp_input+0x228>)
 800c7a2:	22d0      	movs	r2, #208	@ 0xd0
 800c7a4:	4939      	ldr	r1, [pc, #228]	@ (800c88c <tcp_input+0x238>)
 800c7a6:	4837      	ldr	r0, [pc, #220]	@ (800c884 <tcp_input+0x230>)
 800c7a8:	f006 fcee 	bl	8013188 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c7ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c868 <tcp_input+0x214>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	4a2c      	ldr	r2, [pc, #176]	@ (800c868 <tcp_input+0x214>)
 800c7b6:	6814      	ldr	r4, [r2, #0]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fd f9ed 	bl	8009b98 <lwip_htons>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c7c2:	4b29      	ldr	r3, [pc, #164]	@ (800c868 <tcp_input+0x214>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	885b      	ldrh	r3, [r3, #2]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	4a27      	ldr	r2, [pc, #156]	@ (800c868 <tcp_input+0x214>)
 800c7cc:	6814      	ldr	r4, [r2, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd f9e2 	bl	8009b98 <lwip_htons>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c7d8:	4b23      	ldr	r3, [pc, #140]	@ (800c868 <tcp_input+0x214>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	4a22      	ldr	r2, [pc, #136]	@ (800c868 <tcp_input+0x214>)
 800c7e0:	6814      	ldr	r4, [r2, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fd f9e5 	bl	8009bb2 <lwip_htonl>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	6063      	str	r3, [r4, #4]
 800c7ec:	6863      	ldr	r3, [r4, #4]
 800c7ee:	4a28      	ldr	r2, [pc, #160]	@ (800c890 <tcp_input+0x23c>)
 800c7f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c7f2:	4b1d      	ldr	r3, [pc, #116]	@ (800c868 <tcp_input+0x214>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c868 <tcp_input+0x214>)
 800c7fa:	6814      	ldr	r4, [r2, #0]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd f9d8 	bl	8009bb2 <lwip_htonl>
 800c802:	4603      	mov	r3, r0
 800c804:	60a3      	str	r3, [r4, #8]
 800c806:	68a3      	ldr	r3, [r4, #8]
 800c808:	4a22      	ldr	r2, [pc, #136]	@ (800c894 <tcp_input+0x240>)
 800c80a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c80c:	4b16      	ldr	r3, [pc, #88]	@ (800c868 <tcp_input+0x214>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	89db      	ldrh	r3, [r3, #14]
 800c812:	b29b      	uxth	r3, r3
 800c814:	4a14      	ldr	r2, [pc, #80]	@ (800c868 <tcp_input+0x214>)
 800c816:	6814      	ldr	r4, [r2, #0]
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fd f9bd 	bl	8009b98 <lwip_htons>
 800c81e:	4603      	mov	r3, r0
 800c820:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c822:	4b11      	ldr	r3, [pc, #68]	@ (800c868 <tcp_input+0x214>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	899b      	ldrh	r3, [r3, #12]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fd f9b4 	bl	8009b98 <lwip_htons>
 800c830:	4603      	mov	r3, r0
 800c832:	b2db      	uxtb	r3, r3
 800c834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c838:	b2da      	uxtb	r2, r3
 800c83a:	4b17      	ldr	r3, [pc, #92]	@ (800c898 <tcp_input+0x244>)
 800c83c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	891b      	ldrh	r3, [r3, #8]
 800c842:	4a15      	ldr	r2, [pc, #84]	@ (800c898 <tcp_input+0x244>)
 800c844:	7812      	ldrb	r2, [r2, #0]
 800c846:	f002 0203 	and.w	r2, r2, #3
 800c84a:	2a00      	cmp	r2, #0
 800c84c:	bf14      	ite	ne
 800c84e:	2201      	movne	r2, #1
 800c850:	2200      	moveq	r2, #0
 800c852:	b2d2      	uxtb	r2, r2
 800c854:	4413      	add	r3, r2
 800c856:	b29a      	uxth	r2, r3
 800c858:	4b10      	ldr	r3, [pc, #64]	@ (800c89c <tcp_input+0x248>)
 800c85a:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c85c:	2300      	movs	r3, #0
 800c85e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c860:	4b0f      	ldr	r3, [pc, #60]	@ (800c8a0 <tcp_input+0x24c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	61fb      	str	r3, [r7, #28]
 800c866:	e081      	b.n	800c96c <tcp_input+0x318>
 800c868:	200080d4 	.word	0x200080d4
 800c86c:	20004b50 	.word	0x20004b50
 800c870:	200080d8 	.word	0x200080d8
 800c874:	200080dc 	.word	0x200080dc
 800c878:	200080da 	.word	0x200080da
 800c87c:	08015308 	.word	0x08015308
 800c880:	0801533c 	.word	0x0801533c
 800c884:	0801534c 	.word	0x0801534c
 800c888:	08015374 	.word	0x08015374
 800c88c:	08015380 	.word	0x08015380
 800c890:	200080e4 	.word	0x200080e4
 800c894:	200080e8 	.word	0x200080e8
 800c898:	200080f0 	.word	0x200080f0
 800c89c:	200080ee 	.word	0x200080ee
 800c8a0:	200080b8 	.word	0x200080b8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	7d1b      	ldrb	r3, [r3, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d105      	bne.n	800c8b8 <tcp_input+0x264>
 800c8ac:	4b6e      	ldr	r3, [pc, #440]	@ (800ca68 <tcp_input+0x414>)
 800c8ae:	22e2      	movs	r2, #226	@ 0xe2
 800c8b0:	496e      	ldr	r1, [pc, #440]	@ (800ca6c <tcp_input+0x418>)
 800c8b2:	486f      	ldr	r0, [pc, #444]	@ (800ca70 <tcp_input+0x41c>)
 800c8b4:	f006 fc68 	bl	8013188 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	7d1b      	ldrb	r3, [r3, #20]
 800c8bc:	2b0a      	cmp	r3, #10
 800c8be:	d105      	bne.n	800c8cc <tcp_input+0x278>
 800c8c0:	4b69      	ldr	r3, [pc, #420]	@ (800ca68 <tcp_input+0x414>)
 800c8c2:	22e3      	movs	r2, #227	@ 0xe3
 800c8c4:	496b      	ldr	r1, [pc, #428]	@ (800ca74 <tcp_input+0x420>)
 800c8c6:	486a      	ldr	r0, [pc, #424]	@ (800ca70 <tcp_input+0x41c>)
 800c8c8:	f006 fc5e 	bl	8013188 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	7d1b      	ldrb	r3, [r3, #20]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d105      	bne.n	800c8e0 <tcp_input+0x28c>
 800c8d4:	4b64      	ldr	r3, [pc, #400]	@ (800ca68 <tcp_input+0x414>)
 800c8d6:	22e4      	movs	r2, #228	@ 0xe4
 800c8d8:	4967      	ldr	r1, [pc, #412]	@ (800ca78 <tcp_input+0x424>)
 800c8da:	4865      	ldr	r0, [pc, #404]	@ (800ca70 <tcp_input+0x41c>)
 800c8dc:	f006 fc54 	bl	8013188 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800c8e0:	69fb      	ldr	r3, [r7, #28]
 800c8e2:	8b1a      	ldrh	r2, [r3, #24]
 800c8e4:	4b65      	ldr	r3, [pc, #404]	@ (800ca7c <tcp_input+0x428>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	881b      	ldrh	r3, [r3, #0]
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d138      	bne.n	800c962 <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	8ada      	ldrh	r2, [r3, #22]
 800c8f4:	4b61      	ldr	r3, [pc, #388]	@ (800ca7c <tcp_input+0x428>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	885b      	ldrh	r3, [r3, #2]
 800c8fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d130      	bne.n	800c962 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	4b5e      	ldr	r3, [pc, #376]	@ (800ca80 <tcp_input+0x42c>)
 800c906:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c908:	429a      	cmp	r2, r3
 800c90a:	d12a      	bne.n	800c962 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c90c:	69fb      	ldr	r3, [r7, #28]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	4b5b      	ldr	r3, [pc, #364]	@ (800ca80 <tcp_input+0x42c>)
 800c912:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c914:	429a      	cmp	r2, r3
 800c916:	d124      	bne.n	800c962 <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	68db      	ldr	r3, [r3, #12]
 800c91c:	69fa      	ldr	r2, [r7, #28]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d105      	bne.n	800c92e <tcp_input+0x2da>
 800c922:	4b51      	ldr	r3, [pc, #324]	@ (800ca68 <tcp_input+0x414>)
 800c924:	22ec      	movs	r2, #236	@ 0xec
 800c926:	4957      	ldr	r1, [pc, #348]	@ (800ca84 <tcp_input+0x430>)
 800c928:	4851      	ldr	r0, [pc, #324]	@ (800ca70 <tcp_input+0x41c>)
 800c92a:	f006 fc2d 	bl	8013188 <iprintf>
      if (prev != NULL) {
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00a      	beq.n	800c94a <tcp_input+0x2f6>
        prev->next = pcb->next;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	68da      	ldr	r2, [r3, #12]
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c93c:	4b52      	ldr	r3, [pc, #328]	@ (800ca88 <tcp_input+0x434>)
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c944:	4a50      	ldr	r2, [pc, #320]	@ (800ca88 <tcp_input+0x434>)
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	69fa      	ldr	r2, [r7, #28]
 800c950:	429a      	cmp	r2, r3
 800c952:	d10f      	bne.n	800c974 <tcp_input+0x320>
 800c954:	4b44      	ldr	r3, [pc, #272]	@ (800ca68 <tcp_input+0x414>)
 800c956:	22f4      	movs	r2, #244	@ 0xf4
 800c958:	494c      	ldr	r1, [pc, #304]	@ (800ca8c <tcp_input+0x438>)
 800c95a:	4845      	ldr	r0, [pc, #276]	@ (800ca70 <tcp_input+0x41c>)
 800c95c:	f006 fc14 	bl	8013188 <iprintf>
      break;
 800c960:	e008      	b.n	800c974 <tcp_input+0x320>
    }
    prev = pcb;
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	61fb      	str	r3, [r7, #28]
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d198      	bne.n	800c8a4 <tcp_input+0x250>
 800c972:	e000      	b.n	800c976 <tcp_input+0x322>
      break;
 800c974:	bf00      	nop
  }

  if (pcb == NULL) {
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f040 808f 	bne.w	800ca9c <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c97e:	4b44      	ldr	r3, [pc, #272]	@ (800ca90 <tcp_input+0x43c>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	61fb      	str	r3, [r7, #28]
 800c984:	e02f      	b.n	800c9e6 <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	7d1b      	ldrb	r3, [r3, #20]
 800c98a:	2b0a      	cmp	r3, #10
 800c98c:	d005      	beq.n	800c99a <tcp_input+0x346>
 800c98e:	4b36      	ldr	r3, [pc, #216]	@ (800ca68 <tcp_input+0x414>)
 800c990:	22fe      	movs	r2, #254	@ 0xfe
 800c992:	4940      	ldr	r1, [pc, #256]	@ (800ca94 <tcp_input+0x440>)
 800c994:	4836      	ldr	r0, [pc, #216]	@ (800ca70 <tcp_input+0x41c>)
 800c996:	f006 fbf7 	bl	8013188 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	8b1a      	ldrh	r2, [r3, #24]
 800c99e:	4b37      	ldr	r3, [pc, #220]	@ (800ca7c <tcp_input+0x428>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	881b      	ldrh	r3, [r3, #0]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d11a      	bne.n	800c9e0 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	8ada      	ldrh	r2, [r3, #22]
 800c9ae:	4b33      	ldr	r3, [pc, #204]	@ (800ca7c <tcp_input+0x428>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	885b      	ldrh	r3, [r3, #2]
 800c9b4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d112      	bne.n	800c9e0 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	4b30      	ldr	r3, [pc, #192]	@ (800ca80 <tcp_input+0x42c>)
 800c9c0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d10c      	bne.n	800c9e0 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4b2d      	ldr	r3, [pc, #180]	@ (800ca80 <tcp_input+0x42c>)
 800c9cc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d106      	bne.n	800c9e0 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800c9d2:	69f8      	ldr	r0, [r7, #28]
 800c9d4:	f000 fb16 	bl	800d004 <tcp_timewait_input>
        pbuf_free(p);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe f9ed 	bl	800adb8 <pbuf_free>
        return;
 800c9de:	e1e9      	b.n	800cdb4 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9e0:	69fb      	ldr	r3, [r7, #28]
 800c9e2:	68db      	ldr	r3, [r3, #12]
 800c9e4:	61fb      	str	r3, [r7, #28]
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1cc      	bne.n	800c986 <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c9f0:	4b29      	ldr	r3, [pc, #164]	@ (800ca98 <tcp_input+0x444>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	617b      	str	r3, [r7, #20]
 800c9f6:	e019      	b.n	800ca2c <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	8ada      	ldrh	r2, [r3, #22]
 800c9fc:	4b1f      	ldr	r3, [pc, #124]	@ (800ca7c <tcp_input+0x428>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	885b      	ldrh	r3, [r3, #2]
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d10c      	bne.n	800ca22 <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ca80 <tcp_input+0x42c>)
 800ca0e:	695b      	ldr	r3, [r3, #20]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d00f      	beq.n	800ca34 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00d      	beq.n	800ca36 <tcp_input+0x3e2>
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d009      	beq.n	800ca36 <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e2      	bne.n	800c9f8 <tcp_input+0x3a4>
 800ca32:	e000      	b.n	800ca36 <tcp_input+0x3e2>
            break;
 800ca34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d02f      	beq.n	800ca9c <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00a      	beq.n	800ca58 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ca4a:	4b13      	ldr	r3, [pc, #76]	@ (800ca98 <tcp_input+0x444>)
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ca52:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <tcp_input+0x444>)
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800ca58:	6978      	ldr	r0, [r7, #20]
 800ca5a:	f000 f9f3 	bl	800ce44 <tcp_listen_input>
      pbuf_free(p);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7fe f9aa 	bl	800adb8 <pbuf_free>
      return;
 800ca64:	e1a6      	b.n	800cdb4 <tcp_input+0x760>
 800ca66:	bf00      	nop
 800ca68:	08015308 	.word	0x08015308
 800ca6c:	080153a0 	.word	0x080153a0
 800ca70:	0801534c 	.word	0x0801534c
 800ca74:	080153c8 	.word	0x080153c8
 800ca78:	080153f4 	.word	0x080153f4
 800ca7c:	200080d4 	.word	0x200080d4
 800ca80:	20004b50 	.word	0x20004b50
 800ca84:	0801541c 	.word	0x0801541c
 800ca88:	200080b8 	.word	0x200080b8
 800ca8c:	08015448 	.word	0x08015448
 800ca90:	200080bc 	.word	0x200080bc
 800ca94:	08015474 	.word	0x08015474
 800ca98:	200080b4 	.word	0x200080b4
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	f000 8156 	beq.w	800cd50 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800caa4:	4b94      	ldr	r3, [pc, #592]	@ (800ccf8 <tcp_input+0x6a4>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	891a      	ldrh	r2, [r3, #8]
 800caae:	4b92      	ldr	r3, [pc, #584]	@ (800ccf8 <tcp_input+0x6a4>)
 800cab0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800cab2:	4a91      	ldr	r2, [pc, #580]	@ (800ccf8 <tcp_input+0x6a4>)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cab8:	4b90      	ldr	r3, [pc, #576]	@ (800ccfc <tcp_input+0x6a8>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	4a8e      	ldr	r2, [pc, #568]	@ (800ccf8 <tcp_input+0x6a4>)
 800cabe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800cac0:	4b8f      	ldr	r3, [pc, #572]	@ (800cd00 <tcp_input+0x6ac>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800cac6:	4b8f      	ldr	r3, [pc, #572]	@ (800cd04 <tcp_input+0x6b0>)
 800cac8:	2200      	movs	r2, #0
 800caca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800cacc:	4b8e      	ldr	r3, [pc, #568]	@ (800cd08 <tcp_input+0x6b4>)
 800cace:	2200      	movs	r2, #0
 800cad0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800cad2:	4b8e      	ldr	r3, [pc, #568]	@ (800cd0c <tcp_input+0x6b8>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	f003 0308 	and.w	r3, r3, #8
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d006      	beq.n	800caec <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	7b5b      	ldrb	r3, [r3, #13]
 800cae2:	f043 0301 	orr.w	r3, r3, #1
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d017      	beq.n	800cb24 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800caf4:	69f8      	ldr	r0, [r7, #28]
 800caf6:	f7ff fa41 	bl	800bf7c <tcp_process_refused_data>
 800cafa:	4603      	mov	r3, r0
 800cafc:	f113 0f0d 	cmn.w	r3, #13
 800cb00:	d007      	beq.n	800cb12 <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00c      	beq.n	800cb24 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cb0a:	4b81      	ldr	r3, [pc, #516]	@ (800cd10 <tcp_input+0x6bc>)
 800cb0c:	881b      	ldrh	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d008      	beq.n	800cb24 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f040 80e2 	bne.w	800cce0 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cb1c:	69f8      	ldr	r0, [r7, #28]
 800cb1e:	f002 f9e9 	bl	800eef4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cb22:	e0dd      	b.n	800cce0 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 800cb24:	4a7b      	ldr	r2, [pc, #492]	@ (800cd14 <tcp_input+0x6c0>)
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cb2a:	69f8      	ldr	r0, [r7, #28]
 800cb2c:	f000 fad2 	bl	800d0d4 <tcp_process>
 800cb30:	4603      	mov	r3, r0
 800cb32:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cb34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb38:	f113 0f0d 	cmn.w	r3, #13
 800cb3c:	f000 80d2 	beq.w	800cce4 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 800cb40:	4b70      	ldr	r3, [pc, #448]	@ (800cd04 <tcp_input+0x6b0>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	f003 0308 	and.w	r3, r3, #8
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d016      	beq.n	800cb7a <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d008      	beq.n	800cb68 <tcp_input+0x514>
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb5c:	69fa      	ldr	r2, [r7, #28]
 800cb5e:	6912      	ldr	r2, [r2, #16]
 800cb60:	f06f 010d 	mvn.w	r1, #13
 800cb64:	4610      	mov	r0, r2
 800cb66:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cb68:	69f9      	ldr	r1, [r7, #28]
 800cb6a:	486b      	ldr	r0, [pc, #428]	@ (800cd18 <tcp_input+0x6c4>)
 800cb6c:	f7ff fc5a 	bl	800c424 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800cb70:	69f9      	ldr	r1, [r7, #28]
 800cb72:	2001      	movs	r0, #1
 800cb74:	f7fd fc04 	bl	800a380 <memp_free>
 800cb78:	e0d7      	b.n	800cd2a <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cb7e:	4b62      	ldr	r3, [pc, #392]	@ (800cd08 <tcp_input+0x6b4>)
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d01b      	beq.n	800cbbe <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cb86:	4b60      	ldr	r3, [pc, #384]	@ (800cd08 <tcp_input+0x6b4>)
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d009      	beq.n	800cba8 <tcp_input+0x554>
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	6910      	ldr	r0, [r2, #16]
 800cb9c:	89fa      	ldrh	r2, [r7, #14]
 800cb9e:	69f9      	ldr	r1, [r7, #28]
 800cba0:	4798      	blx	r3
 800cba2:	4603      	mov	r3, r0
 800cba4:	74fb      	strb	r3, [r7, #19]
 800cba6:	e001      	b.n	800cbac <tcp_input+0x558>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cbac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cbb0:	f113 0f0d 	cmn.w	r3, #13
 800cbb4:	f000 8098 	beq.w	800cce8 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cbb8:	4b53      	ldr	r3, [pc, #332]	@ (800cd08 <tcp_input+0x6b4>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cbbe:	69f8      	ldr	r0, [r7, #28]
 800cbc0:	f000 f90e 	bl	800cde0 <tcp_input_delayed_close>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f040 8090 	bne.w	800ccec <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cbcc:	4b4c      	ldr	r3, [pc, #304]	@ (800cd00 <tcp_input+0x6ac>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d041      	beq.n	800cc58 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d006      	beq.n	800cbea <tcp_input+0x596>
 800cbdc:	4b4f      	ldr	r3, [pc, #316]	@ (800cd1c <tcp_input+0x6c8>)
 800cbde:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 800cbe2:	494f      	ldr	r1, [pc, #316]	@ (800cd20 <tcp_input+0x6cc>)
 800cbe4:	484f      	ldr	r0, [pc, #316]	@ (800cd24 <tcp_input+0x6d0>)
 800cbe6:	f006 facf 	bl	8013188 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800cbea:	69fb      	ldr	r3, [r7, #28]
 800cbec:	7e9b      	ldrb	r3, [r3, #26]
 800cbee:	f003 0310 	and.w	r3, r3, #16
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d008      	beq.n	800cc08 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800cbf6:	4b42      	ldr	r3, [pc, #264]	@ (800cd00 <tcp_input+0x6ac>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe f8dc 	bl	800adb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800cc00:	69f8      	ldr	r0, [r7, #28]
 800cc02:	f7fe fddf 	bl	800b7c4 <tcp_abort>
            goto aborted;
 800cc06:	e090      	b.n	800cd2a <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00c      	beq.n	800cc2c <tcp_input+0x5d8>
 800cc12:	69fb      	ldr	r3, [r7, #28]
 800cc14:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	6918      	ldr	r0, [r3, #16]
 800cc1c:	4b38      	ldr	r3, [pc, #224]	@ (800cd00 <tcp_input+0x6ac>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	2300      	movs	r3, #0
 800cc22:	69f9      	ldr	r1, [r7, #28]
 800cc24:	47a0      	blx	r4
 800cc26:	4603      	mov	r3, r0
 800cc28:	74fb      	strb	r3, [r7, #19]
 800cc2a:	e008      	b.n	800cc3e <tcp_input+0x5ea>
 800cc2c:	4b34      	ldr	r3, [pc, #208]	@ (800cd00 <tcp_input+0x6ac>)
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	2300      	movs	r3, #0
 800cc32:	69f9      	ldr	r1, [r7, #28]
 800cc34:	2000      	movs	r0, #0
 800cc36:	f7ff fa53 	bl	800c0e0 <tcp_recv_null>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800cc3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc42:	f113 0f0d 	cmn.w	r3, #13
 800cc46:	d053      	beq.n	800ccf0 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800cc48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d003      	beq.n	800cc58 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800cc50:	4b2b      	ldr	r3, [pc, #172]	@ (800cd00 <tcp_input+0x6ac>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800cc58:	4b2a      	ldr	r3, [pc, #168]	@ (800cd04 <tcp_input+0x6b0>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f003 0320 	and.w	r3, r3, #32
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d030      	beq.n	800ccc6 <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d009      	beq.n	800cc80 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc70:	7b5a      	ldrb	r2, [r3, #13]
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc76:	f042 0220 	orr.w	r2, r2, #32
 800cc7a:	b2d2      	uxtb	r2, r2
 800cc7c:	735a      	strb	r2, [r3, #13]
 800cc7e:	e022      	b.n	800ccc6 <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc84:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800cc88:	d005      	beq.n	800cc96 <tcp_input+0x642>
              pcb->rcv_wnd++;
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc8e:	3301      	adds	r3, #1
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00b      	beq.n	800ccb8 <tcp_input+0x664>
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800cca6:	69fb      	ldr	r3, [r7, #28]
 800cca8:	6918      	ldr	r0, [r3, #16]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	2200      	movs	r2, #0
 800ccae:	69f9      	ldr	r1, [r7, #28]
 800ccb0:	47a0      	blx	r4
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	74fb      	strb	r3, [r7, #19]
 800ccb6:	e001      	b.n	800ccbc <tcp_input+0x668>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ccbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ccc0:	f113 0f0d 	cmn.w	r3, #13
 800ccc4:	d016      	beq.n	800ccf4 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ccc6:	4b13      	ldr	r3, [pc, #76]	@ (800cd14 <tcp_input+0x6c0>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cccc:	69f8      	ldr	r0, [r7, #28]
 800ccce:	f000 f887 	bl	800cde0 <tcp_input_delayed_close>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d127      	bne.n	800cd28 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ccd8:	69f8      	ldr	r0, [r7, #28]
 800ccda:	f002 f967 	bl	800efac <tcp_output>
 800ccde:	e024      	b.n	800cd2a <tcp_input+0x6d6>
        goto aborted;
 800cce0:	bf00      	nop
 800cce2:	e022      	b.n	800cd2a <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cce4:	bf00      	nop
 800cce6:	e020      	b.n	800cd2a <tcp_input+0x6d6>
              goto aborted;
 800cce8:	bf00      	nop
 800ccea:	e01e      	b.n	800cd2a <tcp_input+0x6d6>
          goto aborted;
 800ccec:	bf00      	nop
 800ccee:	e01c      	b.n	800cd2a <tcp_input+0x6d6>
            goto aborted;
 800ccf0:	bf00      	nop
 800ccf2:	e01a      	b.n	800cd2a <tcp_input+0x6d6>
              goto aborted;
 800ccf4:	bf00      	nop
 800ccf6:	e018      	b.n	800cd2a <tcp_input+0x6d6>
 800ccf8:	200080c4 	.word	0x200080c4
 800ccfc:	200080d4 	.word	0x200080d4
 800cd00:	200080f4 	.word	0x200080f4
 800cd04:	200080f1 	.word	0x200080f1
 800cd08:	200080ec 	.word	0x200080ec
 800cd0c:	200080f0 	.word	0x200080f0
 800cd10:	200080ee 	.word	0x200080ee
 800cd14:	200080f8 	.word	0x200080f8
 800cd18:	200080b8 	.word	0x200080b8
 800cd1c:	08015308 	.word	0x08015308
 800cd20:	080154a4 	.word	0x080154a4
 800cd24:	0801534c 	.word	0x0801534c
          goto aborted;
 800cd28:	bf00      	nop
    tcp_input_pcb = NULL;
 800cd2a:	4b24      	ldr	r3, [pc, #144]	@ (800cdbc <tcp_input+0x768>)
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cd30:	4b23      	ldr	r3, [pc, #140]	@ (800cdc0 <tcp_input+0x76c>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800cd36:	4b23      	ldr	r3, [pc, #140]	@ (800cdc4 <tcp_input+0x770>)
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d039      	beq.n	800cdb2 <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 800cd3e:	4b21      	ldr	r3, [pc, #132]	@ (800cdc4 <tcp_input+0x770>)
 800cd40:	685b      	ldr	r3, [r3, #4]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7fe f838 	bl	800adb8 <pbuf_free>
      inseg.p = NULL;
 800cd48:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc4 <tcp_input+0x770>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cd4e:	e030      	b.n	800cdb2 <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd50:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <tcp_input+0x774>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7fc ff1d 	bl	8009b98 <lwip_htons>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	f003 0304 	and.w	r3, r3, #4
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d115      	bne.n	800cd94 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd68:	4b18      	ldr	r3, [pc, #96]	@ (800cdcc <tcp_input+0x778>)
 800cd6a:	6818      	ldr	r0, [r3, #0]
 800cd6c:	4b18      	ldr	r3, [pc, #96]	@ (800cdd0 <tcp_input+0x77c>)
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	461a      	mov	r2, r3
 800cd72:	4b18      	ldr	r3, [pc, #96]	@ (800cdd4 <tcp_input+0x780>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd78:	4b13      	ldr	r3, [pc, #76]	@ (800cdc8 <tcp_input+0x774>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd7c:	885b      	ldrh	r3, [r3, #2]
 800cd7e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd80:	4a11      	ldr	r2, [pc, #68]	@ (800cdc8 <tcp_input+0x774>)
 800cd82:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd84:	8812      	ldrh	r2, [r2, #0]
 800cd86:	b292      	uxth	r2, r2
 800cd88:	9201      	str	r2, [sp, #4]
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	4b12      	ldr	r3, [pc, #72]	@ (800cdd8 <tcp_input+0x784>)
 800cd8e:	4a13      	ldr	r2, [pc, #76]	@ (800cddc <tcp_input+0x788>)
 800cd90:	f002 fb90 	bl	800f4b4 <tcp_rst>
    pbuf_free(p);
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7fe f80f 	bl	800adb8 <pbuf_free>
  return;
 800cd9a:	e00a      	b.n	800cdb2 <tcp_input+0x75e>
    goto dropped;
 800cd9c:	bf00      	nop
 800cd9e:	e004      	b.n	800cdaa <tcp_input+0x756>
    goto dropped;
 800cda0:	bf00      	nop
 800cda2:	e002      	b.n	800cdaa <tcp_input+0x756>
    goto dropped;
 800cda4:	bf00      	nop
 800cda6:	e000      	b.n	800cdaa <tcp_input+0x756>
      goto dropped;
 800cda8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7fe f804 	bl	800adb8 <pbuf_free>
 800cdb0:	e000      	b.n	800cdb4 <tcp_input+0x760>
  return;
 800cdb2:	bf00      	nop
}
 800cdb4:	3724      	adds	r7, #36	@ 0x24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd90      	pop	{r4, r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	200080f8 	.word	0x200080f8
 800cdc0:	200080f4 	.word	0x200080f4
 800cdc4:	200080c4 	.word	0x200080c4
 800cdc8:	200080d4 	.word	0x200080d4
 800cdcc:	200080e8 	.word	0x200080e8
 800cdd0:	200080ee 	.word	0x200080ee
 800cdd4:	200080e4 	.word	0x200080e4
 800cdd8:	20004b60 	.word	0x20004b60
 800cddc:	20004b64 	.word	0x20004b64

0800cde0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800cde8:	4b14      	ldr	r3, [pc, #80]	@ (800ce3c <tcp_input_delayed_close+0x5c>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	f003 0310 	and.w	r3, r3, #16
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d01d      	beq.n	800ce30 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	7e9b      	ldrb	r3, [r3, #26]
 800cdf8:	f003 0310 	and.w	r3, r3, #16
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d10d      	bne.n	800ce1c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <tcp_input_delayed_close+0x3c>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	6912      	ldr	r2, [r2, #16]
 800ce14:	f06f 010e 	mvn.w	r1, #14
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ce1c:	6879      	ldr	r1, [r7, #4]
 800ce1e:	4808      	ldr	r0, [pc, #32]	@ (800ce40 <tcp_input_delayed_close+0x60>)
 800ce20:	f7ff fb00 	bl	800c424 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ce24:	6879      	ldr	r1, [r7, #4]
 800ce26:	2001      	movs	r0, #1
 800ce28:	f7fd faaa 	bl	800a380 <memp_free>
    return 1;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	200080f1 	.word	0x200080f1
 800ce40:	200080b8 	.word	0x200080b8

0800ce44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b088      	sub	sp, #32
 800ce48:	af02      	add	r7, sp, #8
 800ce4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ce4c:	4b63      	ldr	r3, [pc, #396]	@ (800cfdc <tcp_listen_input+0x198>)
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	f003 0304 	and.w	r3, r3, #4
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f040 80bb 	bne.w	800cfd0 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ce5a:	4b60      	ldr	r3, [pc, #384]	@ (800cfdc <tcp_listen_input+0x198>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	f003 0310 	and.w	r3, r3, #16
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d016      	beq.n	800ce94 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce66:	4b5e      	ldr	r3, [pc, #376]	@ (800cfe0 <tcp_listen_input+0x19c>)
 800ce68:	6818      	ldr	r0, [r3, #0]
 800ce6a:	4b5e      	ldr	r3, [pc, #376]	@ (800cfe4 <tcp_listen_input+0x1a0>)
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	4b5d      	ldr	r3, [pc, #372]	@ (800cfe8 <tcp_listen_input+0x1a4>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce76:	4b5d      	ldr	r3, [pc, #372]	@ (800cfec <tcp_listen_input+0x1a8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce7a:	885b      	ldrh	r3, [r3, #2]
 800ce7c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ce7e:	4a5b      	ldr	r2, [pc, #364]	@ (800cfec <tcp_listen_input+0x1a8>)
 800ce80:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ce82:	8812      	ldrh	r2, [r2, #0]
 800ce84:	b292      	uxth	r2, r2
 800ce86:	9201      	str	r2, [sp, #4]
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	4b59      	ldr	r3, [pc, #356]	@ (800cff0 <tcp_listen_input+0x1ac>)
 800ce8c:	4a59      	ldr	r2, [pc, #356]	@ (800cff4 <tcp_listen_input+0x1b0>)
 800ce8e:	f002 fb11 	bl	800f4b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ce92:	e09f      	b.n	800cfd4 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800ce94:	4b51      	ldr	r3, [pc, #324]	@ (800cfdc <tcp_listen_input+0x198>)
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	f003 0302 	and.w	r3, r3, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 8099 	beq.w	800cfd4 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7d5b      	ldrb	r3, [r3, #21]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff f9f8 	bl	800c29c <tcp_alloc>
 800ceac:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d111      	bne.n	800ced8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	699b      	ldr	r3, [r3, #24]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00a      	beq.n	800ced2 <tcp_listen_input+0x8e>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	699b      	ldr	r3, [r3, #24]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	6910      	ldr	r0, [r2, #16]
 800cec4:	f04f 32ff 	mov.w	r2, #4294967295
 800cec8:	2100      	movs	r1, #0
 800ceca:	4798      	blx	r3
 800cecc:	4603      	mov	r3, r0
 800cece:	73bb      	strb	r3, [r7, #14]
      return;
 800ced0:	e081      	b.n	800cfd6 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ced2:	23f0      	movs	r3, #240	@ 0xf0
 800ced4:	73bb      	strb	r3, [r7, #14]
      return;
 800ced6:	e07e      	b.n	800cfd6 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ced8:	4b47      	ldr	r3, [pc, #284]	@ (800cff8 <tcp_listen_input+0x1b4>)
 800ceda:	695a      	ldr	r2, [r3, #20]
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cee0:	4b45      	ldr	r3, [pc, #276]	@ (800cff8 <tcp_listen_input+0x1b4>)
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	8ada      	ldrh	r2, [r3, #22]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800cef0:	4b3e      	ldr	r3, [pc, #248]	@ (800cfec <tcp_listen_input+0x1a8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2203      	movs	r2, #3
 800cf00:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800cf02:	4b39      	ldr	r3, [pc, #228]	@ (800cfe8 <tcp_listen_input+0x1a4>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	1c5a      	adds	r2, r3, #1
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800cf14:	6978      	ldr	r0, [r7, #20]
 800cf16:	f7ff fb01 	bl	800c51c <tcp_next_iss>
 800cf1a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cf34:	4b2c      	ldr	r3, [pc, #176]	@ (800cfe8 <tcp_listen_input+0x1a4>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	1e5a      	subs	r2, r3, #1
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691a      	ldr	r2, [r3, #16]
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	7a1b      	ldrb	r3, [r3, #8]
 800cf50:	f003 030c 	and.w	r3, r3, #12
 800cf54:	b2da      	uxtb	r2, r3
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cf5a:	4b28      	ldr	r3, [pc, #160]	@ (800cffc <tcp_listen_input+0x1b8>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	60da      	str	r2, [r3, #12]
 800cf62:	4a26      	ldr	r2, [pc, #152]	@ (800cffc <tcp_listen_input+0x1b8>)
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	6013      	str	r3, [r2, #0]
 800cf68:	f002 fcec 	bl	800f944 <tcp_timer_needed>
 800cf6c:	4b24      	ldr	r3, [pc, #144]	@ (800d000 <tcp_listen_input+0x1bc>)
 800cf6e:	2201      	movs	r2, #1
 800cf70:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cf72:	6978      	ldr	r0, [r7, #20]
 800cf74:	f001 fd0c 	bl	800e990 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cf78:	4b1c      	ldr	r3, [pc, #112]	@ (800cfec <tcp_listen_input+0x1a8>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	89db      	ldrh	r3, [r3, #14]
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	f7ff fad3 	bl	800c548 <tcp_eff_send_mss_impl>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cfaa:	2112      	movs	r1, #18
 800cfac:	6978      	ldr	r0, [r7, #20]
 800cfae:	f001 fea5 	bl	800ecfc <tcp_enqueue_flags>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cfb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d004      	beq.n	800cfc8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	6978      	ldr	r0, [r7, #20]
 800cfc2:	f7fe fb4d 	bl	800b660 <tcp_abandon>
      return;
 800cfc6:	e006      	b.n	800cfd6 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800cfc8:	6978      	ldr	r0, [r7, #20]
 800cfca:	f001 ffef 	bl	800efac <tcp_output>
  return;
 800cfce:	e001      	b.n	800cfd4 <tcp_listen_input+0x190>
    return;
 800cfd0:	bf00      	nop
 800cfd2:	e000      	b.n	800cfd6 <tcp_listen_input+0x192>
  return;
 800cfd4:	bf00      	nop
}
 800cfd6:	3718      	adds	r7, #24
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	200080f0 	.word	0x200080f0
 800cfe0:	200080e8 	.word	0x200080e8
 800cfe4:	200080ee 	.word	0x200080ee
 800cfe8:	200080e4 	.word	0x200080e4
 800cfec:	200080d4 	.word	0x200080d4
 800cff0:	20004b60 	.word	0x20004b60
 800cff4:	20004b64 	.word	0x20004b64
 800cff8:	20004b50 	.word	0x20004b50
 800cffc:	200080b8 	.word	0x200080b8
 800d000:	200080c0 	.word	0x200080c0

0800d004 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af02      	add	r7, sp, #8
 800d00a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d00c:	4b29      	ldr	r3, [pc, #164]	@ (800d0b4 <tcp_timewait_input+0xb0>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 0304 	and.w	r3, r3, #4
 800d014:	2b00      	cmp	r3, #0
 800d016:	d146      	bne.n	800d0a6 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d018:	4b26      	ldr	r3, [pc, #152]	@ (800d0b4 <tcp_timewait_input+0xb0>)
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 0302 	and.w	r3, r3, #2
 800d020:	2b00      	cmp	r3, #0
 800d022:	d027      	beq.n	800d074 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d024:	4b24      	ldr	r3, [pc, #144]	@ (800d0b8 <tcp_timewait_input+0xb4>)
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	2b00      	cmp	r3, #0
 800d030:	db2a      	blt.n	800d088 <tcp_timewait_input+0x84>
 800d032:	4b21      	ldr	r3, [pc, #132]	@ (800d0b8 <tcp_timewait_input+0xb4>)
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03a:	6879      	ldr	r1, [r7, #4]
 800d03c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d03e:	440b      	add	r3, r1
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	dc20      	bgt.n	800d088 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d046:	4b1d      	ldr	r3, [pc, #116]	@ (800d0bc <tcp_timewait_input+0xb8>)
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	4b1d      	ldr	r3, [pc, #116]	@ (800d0c0 <tcp_timewait_input+0xbc>)
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	461a      	mov	r2, r3
 800d050:	4b19      	ldr	r3, [pc, #100]	@ (800d0b8 <tcp_timewait_input+0xb4>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d056:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c4 <tcp_timewait_input+0xc0>)
 800d058:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d05a:	885b      	ldrh	r3, [r3, #2]
 800d05c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d05e:	4a19      	ldr	r2, [pc, #100]	@ (800d0c4 <tcp_timewait_input+0xc0>)
 800d060:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d062:	8812      	ldrh	r2, [r2, #0]
 800d064:	b292      	uxth	r2, r2
 800d066:	9201      	str	r2, [sp, #4]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	4b17      	ldr	r3, [pc, #92]	@ (800d0c8 <tcp_timewait_input+0xc4>)
 800d06c:	4a17      	ldr	r2, [pc, #92]	@ (800d0cc <tcp_timewait_input+0xc8>)
 800d06e:	f002 fa21 	bl	800f4b4 <tcp_rst>
      return;
 800d072:	e01b      	b.n	800d0ac <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 800d074:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b4 <tcp_timewait_input+0xb0>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d003      	beq.n	800d088 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d080:	4b13      	ldr	r3, [pc, #76]	@ (800d0d0 <tcp_timewait_input+0xcc>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d088:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c0 <tcp_timewait_input+0xbc>)
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00c      	beq.n	800d0aa <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7e9b      	ldrb	r3, [r3, #26]
 800d094:	f043 0302 	orr.w	r3, r3, #2
 800d098:	b2da      	uxtb	r2, r3
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 ff84 	bl	800efac <tcp_output>
  }
  return;
 800d0a4:	e001      	b.n	800d0aa <tcp_timewait_input+0xa6>
    return;
 800d0a6:	bf00      	nop
 800d0a8:	e000      	b.n	800d0ac <tcp_timewait_input+0xa8>
  return;
 800d0aa:	bf00      	nop
}
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200080f0 	.word	0x200080f0
 800d0b8:	200080e4 	.word	0x200080e4
 800d0bc:	200080e8 	.word	0x200080e8
 800d0c0:	200080ee 	.word	0x200080ee
 800d0c4:	200080d4 	.word	0x200080d4
 800d0c8:	20004b60 	.word	0x20004b60
 800d0cc:	20004b64 	.word	0x20004b64
 800d0d0:	200080ac 	.word	0x200080ac

0800d0d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08a      	sub	sp, #40	@ 0x28
 800d0d8:	af02      	add	r7, sp, #8
 800d0da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d0e4:	4b93      	ldr	r3, [pc, #588]	@ (800d334 <tcp_process+0x260>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	f003 0304 	and.w	r3, r3, #4
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d04e      	beq.n	800d18e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7d1b      	ldrb	r3, [r3, #20]
 800d0f4:	2b02      	cmp	r3, #2
 800d0f6:	d108      	bne.n	800d10a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0fc:	4b8e      	ldr	r3, [pc, #568]	@ (800d338 <tcp_process+0x264>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	429a      	cmp	r2, r3
 800d102:	d123      	bne.n	800d14c <tcp_process+0x78>
        acceptable = 1;
 800d104:	2301      	movs	r3, #1
 800d106:	76fb      	strb	r3, [r7, #27]
 800d108:	e020      	b.n	800d14c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d10e:	4b8b      	ldr	r3, [pc, #556]	@ (800d33c <tcp_process+0x268>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d102      	bne.n	800d11c <tcp_process+0x48>
        acceptable = 1;
 800d116:	2301      	movs	r3, #1
 800d118:	76fb      	strb	r3, [r7, #27]
 800d11a:	e017      	b.n	800d14c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d11c:	4b87      	ldr	r3, [pc, #540]	@ (800d33c <tcp_process+0x268>)
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d124:	1ad3      	subs	r3, r2, r3
 800d126:	2b00      	cmp	r3, #0
 800d128:	db10      	blt.n	800d14c <tcp_process+0x78>
 800d12a:	4b84      	ldr	r3, [pc, #528]	@ (800d33c <tcp_process+0x268>)
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d132:	6879      	ldr	r1, [r7, #4]
 800d134:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d136:	440b      	add	r3, r1
 800d138:	1ad3      	subs	r3, r2, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	dc06      	bgt.n	800d14c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	7e9b      	ldrb	r3, [r3, #26]
 800d142:	f043 0302 	orr.w	r3, r3, #2
 800d146:	b2da      	uxtb	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d14c:	7efb      	ldrb	r3, [r7, #27]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01b      	beq.n	800d18a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	7d1b      	ldrb	r3, [r3, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d106      	bne.n	800d168 <tcp_process+0x94>
 800d15a:	4b79      	ldr	r3, [pc, #484]	@ (800d340 <tcp_process+0x26c>)
 800d15c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 800d160:	4978      	ldr	r1, [pc, #480]	@ (800d344 <tcp_process+0x270>)
 800d162:	4879      	ldr	r0, [pc, #484]	@ (800d348 <tcp_process+0x274>)
 800d164:	f006 f810 	bl	8013188 <iprintf>
      recv_flags |= TF_RESET;
 800d168:	4b78      	ldr	r3, [pc, #480]	@ (800d34c <tcp_process+0x278>)
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	f043 0308 	orr.w	r3, r3, #8
 800d170:	b2da      	uxtb	r2, r3
 800d172:	4b76      	ldr	r3, [pc, #472]	@ (800d34c <tcp_process+0x278>)
 800d174:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7e9b      	ldrb	r3, [r3, #26]
 800d17a:	f023 0301 	bic.w	r3, r3, #1
 800d17e:	b2da      	uxtb	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800d184:	f06f 030d 	mvn.w	r3, #13
 800d188:	e348      	b.n	800d81c <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	e346      	b.n	800d81c <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d18e:	4b69      	ldr	r3, [pc, #420]	@ (800d334 <tcp_process+0x260>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0302 	and.w	r3, r3, #2
 800d196:	2b00      	cmp	r3, #0
 800d198:	d010      	beq.n	800d1bc <tcp_process+0xe8>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d00c      	beq.n	800d1bc <tcp_process+0xe8>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	7d1b      	ldrb	r3, [r3, #20]
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d008      	beq.n	800d1bc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7e9b      	ldrb	r3, [r3, #26]
 800d1ae:	f043 0302 	orr.w	r3, r3, #2
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	e32f      	b.n	800d81c <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	7e9b      	ldrb	r3, [r3, #26]
 800d1c0:	f003 0310 	and.w	r3, r3, #16
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d103      	bne.n	800d1d0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d1c8:	4b61      	ldr	r3, [pc, #388]	@ (800d350 <tcp_process+0x27c>)
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f001 fbd9 	bl	800e990 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	7d1b      	ldrb	r3, [r3, #20]
 800d1e2:	3b02      	subs	r3, #2
 800d1e4:	2b07      	cmp	r3, #7
 800d1e6:	f200 8309 	bhi.w	800d7fc <tcp_process+0x728>
 800d1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f0 <tcp_process+0x11c>)
 800d1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f0:	0800d211 	.word	0x0800d211
 800d1f4:	0800d407 	.word	0x0800d407
 800d1f8:	0800d55f 	.word	0x0800d55f
 800d1fc:	0800d589 	.word	0x0800d589
 800d200:	0800d6ab 	.word	0x0800d6ab
 800d204:	0800d55f 	.word	0x0800d55f
 800d208:	0800d737 	.word	0x0800d737
 800d20c:	0800d7c7 	.word	0x0800d7c7
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d210:	4b48      	ldr	r3, [pc, #288]	@ (800d334 <tcp_process+0x260>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	f003 0310 	and.w	r3, r3, #16
 800d218:	2b00      	cmp	r3, #0
 800d21a:	f000 80ca 	beq.w	800d3b2 <tcp_process+0x2de>
 800d21e:	4b45      	ldr	r3, [pc, #276]	@ (800d334 <tcp_process+0x260>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	f003 0302 	and.w	r3, r3, #2
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 80c3 	beq.w	800d3b2 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	4b41      	ldr	r3, [pc, #260]	@ (800d338 <tcp_process+0x264>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	429a      	cmp	r2, r3
 800d238:	f040 80bb 	bne.w	800d3b2 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 800d23c:	4b3f      	ldr	r3, [pc, #252]	@ (800d33c <tcp_process+0x268>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 800d24e:	4b3a      	ldr	r3, [pc, #232]	@ (800d338 <tcp_process+0x264>)
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800d256:	4b3f      	ldr	r3, [pc, #252]	@ (800d354 <tcp_process+0x280>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	89db      	ldrh	r3, [r3, #14]
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d270:	4b32      	ldr	r3, [pc, #200]	@ (800d33c <tcp_process+0x268>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	1e5a      	subs	r2, r3, #1
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2204      	movs	r2, #4
 800d27e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3304      	adds	r3, #4
 800d288:	4619      	mov	r1, r3
 800d28a:	4610      	mov	r0, r2
 800d28c:	f7ff f95c 	bl	800c548 <tcp_eff_send_mss_impl>
 800d290:	4603      	mov	r3, r0
 800d292:	461a      	mov	r2, r3
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d29c:	005b      	lsls	r3, r3, #1
 800d29e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	bf38      	it	cc
 800d2a6:	461a      	movcc	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2ac:	009b      	lsls	r3, r3, #2
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	bf28      	it	cs
 800d2b2:	4613      	movcs	r3, r2
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d106      	bne.n	800d2d4 <tcp_process+0x200>
 800d2c6:	4b1e      	ldr	r3, [pc, #120]	@ (800d340 <tcp_process+0x26c>)
 800d2c8:	f240 321a 	movw	r2, #794	@ 0x31a
 800d2cc:	4922      	ldr	r1, [pc, #136]	@ (800d358 <tcp_process+0x284>)
 800d2ce:	481e      	ldr	r0, [pc, #120]	@ (800d348 <tcp_process+0x274>)
 800d2d0:	f005 ff5a 	bl	8013188 <iprintf>
      --pcb->snd_queuelen;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d2da:	3b01      	subs	r3, #1
 800d2dc:	b29a      	uxth	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d111      	bne.n	800d314 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2f4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d106      	bne.n	800d30a <tcp_process+0x236>
 800d2fc:	4b10      	ldr	r3, [pc, #64]	@ (800d340 <tcp_process+0x26c>)
 800d2fe:	f240 3222 	movw	r2, #802	@ 0x322
 800d302:	4916      	ldr	r1, [pc, #88]	@ (800d35c <tcp_process+0x288>)
 800d304:	4810      	ldr	r0, [pc, #64]	@ (800d348 <tcp_process+0x274>)
 800d306:	f005 ff3f 	bl	8013188 <iprintf>
        pcb->unsent = rseg->next;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	669a      	str	r2, [r3, #104]	@ 0x68
 800d312:	e003      	b.n	800d31c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 800d31c:	69f8      	ldr	r0, [r7, #28]
 800d31e:	f7fe feab 	bl	800c078 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d326:	2b00      	cmp	r3, #0
 800d328:	d11a      	bne.n	800d360 <tcp_process+0x28c>
        pcb->rtime = -1;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d330:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d332:	e01c      	b.n	800d36e <tcp_process+0x29a>
 800d334:	200080f0 	.word	0x200080f0
 800d338:	200080e8 	.word	0x200080e8
 800d33c:	200080e4 	.word	0x200080e4
 800d340:	08015308 	.word	0x08015308
 800d344:	080154c0 	.word	0x080154c0
 800d348:	0801534c 	.word	0x0801534c
 800d34c:	200080f1 	.word	0x200080f1
 800d350:	200080ac 	.word	0x200080ac
 800d354:	200080d4 	.word	0x200080d4
 800d358:	080154e0 	.word	0x080154e0
 800d35c:	080154f8 	.word	0x080154f8
      } else {
        pcb->rtime = 0;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2200      	movs	r2, #0
 800d364:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d374:	2b00      	cmp	r3, #0
 800d376:	d00a      	beq.n	800d38e <tcp_process+0x2ba>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	6910      	ldr	r0, [r2, #16]
 800d382:	2200      	movs	r2, #0
 800d384:	6879      	ldr	r1, [r7, #4]
 800d386:	4798      	blx	r3
 800d388:	4603      	mov	r3, r0
 800d38a:	76bb      	strb	r3, [r7, #26]
 800d38c:	e001      	b.n	800d392 <tcp_process+0x2be>
 800d38e:	2300      	movs	r3, #0
 800d390:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800d392:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d396:	f113 0f0d 	cmn.w	r3, #13
 800d39a:	d102      	bne.n	800d3a2 <tcp_process+0x2ce>
        return ERR_ABRT;
 800d39c:	f06f 030c 	mvn.w	r3, #12
 800d3a0:	e23c      	b.n	800d81c <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	7e9b      	ldrb	r3, [r3, #26]
 800d3a6:	f043 0302 	orr.w	r3, r3, #2
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800d3b0:	e226      	b.n	800d800 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 800d3b2:	4b93      	ldr	r3, [pc, #588]	@ (800d600 <tcp_process+0x52c>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	f003 0310 	and.w	r3, r3, #16
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 8220 	beq.w	800d800 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3c0:	4b90      	ldr	r3, [pc, #576]	@ (800d604 <tcp_process+0x530>)
 800d3c2:	6818      	ldr	r0, [r3, #0]
 800d3c4:	4b90      	ldr	r3, [pc, #576]	@ (800d608 <tcp_process+0x534>)
 800d3c6:	881b      	ldrh	r3, [r3, #0]
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	4b90      	ldr	r3, [pc, #576]	@ (800d60c <tcp_process+0x538>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3d0:	4b8f      	ldr	r3, [pc, #572]	@ (800d610 <tcp_process+0x53c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3d8:	4a8d      	ldr	r2, [pc, #564]	@ (800d610 <tcp_process+0x53c>)
 800d3da:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3dc:	8812      	ldrh	r2, [r2, #0]
 800d3de:	b292      	uxth	r2, r2
 800d3e0:	9201      	str	r2, [sp, #4]
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	4b8b      	ldr	r3, [pc, #556]	@ (800d614 <tcp_process+0x540>)
 800d3e6:	4a8c      	ldr	r2, [pc, #560]	@ (800d618 <tcp_process+0x544>)
 800d3e8:	f002 f864 	bl	800f4b4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d3f2:	2b05      	cmp	r3, #5
 800d3f4:	f200 8204 	bhi.w	800d800 <tcp_process+0x72c>
        pcb->rtime = 0;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f002 f8ce 	bl	800f5a0 <tcp_rexmit_rto>
    break;
 800d404:	e1fc      	b.n	800d800 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800d406:	4b7e      	ldr	r3, [pc, #504]	@ (800d600 <tcp_process+0x52c>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	f003 0310 	and.w	r3, r3, #16
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 8091 	beq.w	800d536 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d414:	4b7b      	ldr	r3, [pc, #492]	@ (800d604 <tcp_process+0x530>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	3b01      	subs	r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	db71      	blt.n	800d508 <tcp_process+0x434>
 800d424:	4b77      	ldr	r3, [pc, #476]	@ (800d604 <tcp_process+0x530>)
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	2b00      	cmp	r3, #0
 800d430:	dc6a      	bgt.n	800d508 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2204      	movs	r2, #4
 800d436:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <tcp_process+0x384>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d106      	bne.n	800d458 <tcp_process+0x384>
 800d44a:	4b74      	ldr	r3, [pc, #464]	@ (800d61c <tcp_process+0x548>)
 800d44c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d450:	4973      	ldr	r1, [pc, #460]	@ (800d620 <tcp_process+0x54c>)
 800d452:	4874      	ldr	r0, [pc, #464]	@ (800d624 <tcp_process+0x550>)
 800d454:	f005 fe98 	bl	8013188 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d102      	bne.n	800d466 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800d460:	23fa      	movs	r3, #250	@ 0xfa
 800d462:	76bb      	strb	r3, [r7, #26]
 800d464:	e011      	b.n	800d48a <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00a      	beq.n	800d486 <tcp_process+0x3b2>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6910      	ldr	r0, [r2, #16]
 800d47a:	2200      	movs	r2, #0
 800d47c:	6879      	ldr	r1, [r7, #4]
 800d47e:	4798      	blx	r3
 800d480:	4603      	mov	r3, r0
 800d482:	76bb      	strb	r3, [r7, #26]
 800d484:	e001      	b.n	800d48a <tcp_process+0x3b6>
 800d486:	23f0      	movs	r3, #240	@ 0xf0
 800d488:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800d48a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800d492:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d496:	f113 0f0d 	cmn.w	r3, #13
 800d49a:	d002      	beq.n	800d4a2 <tcp_process+0x3ce>
            tcp_abort(pcb);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f7fe f991 	bl	800b7c4 <tcp_abort>
          }
          return ERR_ABRT;
 800d4a2:	f06f 030c 	mvn.w	r3, #12
 800d4a6:	e1b9      	b.n	800d81c <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa3d 	bl	800d928 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800d4ae:	4b5e      	ldr	r3, [pc, #376]	@ (800d628 <tcp_process+0x554>)
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d005      	beq.n	800d4c2 <tcp_process+0x3ee>
          recv_acked--;
 800d4b6:	4b5c      	ldr	r3, [pc, #368]	@ (800d628 <tcp_process+0x554>)
 800d4b8:	881b      	ldrh	r3, [r3, #0]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	b29a      	uxth	r2, r3
 800d4be:	4b5a      	ldr	r3, [pc, #360]	@ (800d628 <tcp_process+0x554>)
 800d4c0:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	bf38      	it	cc
 800d4d0:	461a      	movcc	r2, r3
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	bf28      	it	cs
 800d4dc:	4613      	movcs	r3, r2
 800d4de:	b29a      	uxth	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800d4e6:	4b51      	ldr	r3, [pc, #324]	@ (800d62c <tcp_process+0x558>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	f003 0320 	and.w	r3, r3, #32
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d034      	beq.n	800d55c <tcp_process+0x488>
          tcp_ack_now(pcb);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	7e9b      	ldrb	r3, [r3, #26]
 800d4f6:	f043 0302 	orr.w	r3, r3, #2
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2207      	movs	r2, #7
 800d504:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800d506:	e029      	b.n	800d55c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d508:	4b3e      	ldr	r3, [pc, #248]	@ (800d604 <tcp_process+0x530>)
 800d50a:	6818      	ldr	r0, [r3, #0]
 800d50c:	4b3e      	ldr	r3, [pc, #248]	@ (800d608 <tcp_process+0x534>)
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	461a      	mov	r2, r3
 800d512:	4b3e      	ldr	r3, [pc, #248]	@ (800d60c <tcp_process+0x538>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d518:	4b3d      	ldr	r3, [pc, #244]	@ (800d610 <tcp_process+0x53c>)
 800d51a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d51c:	885b      	ldrh	r3, [r3, #2]
 800d51e:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d520:	4a3b      	ldr	r2, [pc, #236]	@ (800d610 <tcp_process+0x53c>)
 800d522:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d524:	8812      	ldrh	r2, [r2, #0]
 800d526:	b292      	uxth	r2, r2
 800d528:	9201      	str	r2, [sp, #4]
 800d52a:	9300      	str	r3, [sp, #0]
 800d52c:	4b39      	ldr	r3, [pc, #228]	@ (800d614 <tcp_process+0x540>)
 800d52e:	4a3a      	ldr	r2, [pc, #232]	@ (800d618 <tcp_process+0x544>)
 800d530:	f001 ffc0 	bl	800f4b4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800d534:	e166      	b.n	800d804 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d536:	4b32      	ldr	r3, [pc, #200]	@ (800d600 <tcp_process+0x52c>)
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f000 8160 	beq.w	800d804 <tcp_process+0x730>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d548:	1e5a      	subs	r2, r3, #1
 800d54a:	4b30      	ldr	r3, [pc, #192]	@ (800d60c <tcp_process+0x538>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	429a      	cmp	r2, r3
 800d550:	f040 8158 	bne.w	800d804 <tcp_process+0x730>
      tcp_rexmit(pcb);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f002 f859 	bl	800f60c <tcp_rexmit>
    break;
 800d55a:	e153      	b.n	800d804 <tcp_process+0x730>
 800d55c:	e152      	b.n	800d804 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f9e2 	bl	800d928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d564:	4b31      	ldr	r3, [pc, #196]	@ (800d62c <tcp_process+0x558>)
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	f003 0320 	and.w	r3, r3, #32
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 814b 	beq.w	800d808 <tcp_process+0x734>
      tcp_ack_now(pcb);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	7e9b      	ldrb	r3, [r3, #26]
 800d576:	f043 0302 	orr.w	r3, r3, #2
 800d57a:	b2da      	uxtb	r2, r3
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2207      	movs	r2, #7
 800d584:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d586:	e13f      	b.n	800d808 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f9cd 	bl	800d928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d58e:	4b27      	ldr	r3, [pc, #156]	@ (800d62c <tcp_process+0x558>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d070      	beq.n	800d67c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d59a:	4b19      	ldr	r3, [pc, #100]	@ (800d600 <tcp_process+0x52c>)
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	f003 0310 	and.w	r3, r3, #16
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d05f      	beq.n	800d666 <tcp_process+0x592>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5aa:	4b16      	ldr	r3, [pc, #88]	@ (800d604 <tcp_process+0x530>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d159      	bne.n	800d666 <tcp_process+0x592>
          pcb->unsent == NULL) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d155      	bne.n	800d666 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	7e9b      	ldrb	r3, [r3, #26]
 800d5be:	f043 0302 	orr.w	r3, r3, #2
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7fe fee9 	bl	800c3a0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d5ce:	4b18      	ldr	r3, [pc, #96]	@ (800d630 <tcp_process+0x55c>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d105      	bne.n	800d5e4 <tcp_process+0x510>
 800d5d8:	4b15      	ldr	r3, [pc, #84]	@ (800d630 <tcp_process+0x55c>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	4a14      	ldr	r2, [pc, #80]	@ (800d630 <tcp_process+0x55c>)
 800d5e0:	6013      	str	r3, [r2, #0]
 800d5e2:	e02d      	b.n	800d640 <tcp_process+0x56c>
 800d5e4:	4b12      	ldr	r3, [pc, #72]	@ (800d630 <tcp_process+0x55c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	617b      	str	r3, [r7, #20]
 800d5ea:	e026      	b.n	800d63a <tcp_process+0x566>
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d11e      	bne.n	800d634 <tcp_process+0x560>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	68da      	ldr	r2, [r3, #12]
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	60da      	str	r2, [r3, #12]
 800d5fe:	e01f      	b.n	800d640 <tcp_process+0x56c>
 800d600:	200080f0 	.word	0x200080f0
 800d604:	200080e8 	.word	0x200080e8
 800d608:	200080ee 	.word	0x200080ee
 800d60c:	200080e4 	.word	0x200080e4
 800d610:	200080d4 	.word	0x200080d4
 800d614:	20004b60 	.word	0x20004b60
 800d618:	20004b64 	.word	0x20004b64
 800d61c:	08015308 	.word	0x08015308
 800d620:	0801550c 	.word	0x0801550c
 800d624:	0801534c 	.word	0x0801534c
 800d628:	200080ec 	.word	0x200080ec
 800d62c:	200080f1 	.word	0x200080f1
 800d630:	200080b8 	.word	0x200080b8
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1d5      	bne.n	800d5ec <tcp_process+0x518>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	60da      	str	r2, [r3, #12]
 800d646:	4b77      	ldr	r3, [pc, #476]	@ (800d824 <tcp_process+0x750>)
 800d648:	2201      	movs	r2, #1
 800d64a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	220a      	movs	r2, #10
 800d650:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d652:	4b75      	ldr	r3, [pc, #468]	@ (800d828 <tcp_process+0x754>)
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60da      	str	r2, [r3, #12]
 800d65a:	4a73      	ldr	r2, [pc, #460]	@ (800d828 <tcp_process+0x754>)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6013      	str	r3, [r2, #0]
 800d660:	f002 f970 	bl	800f944 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800d664:	e0d2      	b.n	800d80c <tcp_process+0x738>
        tcp_ack_now(pcb);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	7e9b      	ldrb	r3, [r3, #26]
 800d66a:	f043 0302 	orr.w	r3, r3, #2
 800d66e:	b2da      	uxtb	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2208      	movs	r2, #8
 800d678:	751a      	strb	r2, [r3, #20]
    break;
 800d67a:	e0c7      	b.n	800d80c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d67c:	4b6b      	ldr	r3, [pc, #428]	@ (800d82c <tcp_process+0x758>)
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f003 0310 	and.w	r3, r3, #16
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80c1 	beq.w	800d80c <tcp_process+0x738>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d68e:	4b68      	ldr	r3, [pc, #416]	@ (800d830 <tcp_process+0x75c>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	429a      	cmp	r2, r3
 800d694:	f040 80ba 	bne.w	800d80c <tcp_process+0x738>
               pcb->unsent == NULL) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f040 80b5 	bne.w	800d80c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2206      	movs	r2, #6
 800d6a6:	751a      	strb	r2, [r3, #20]
    break;
 800d6a8:	e0b0      	b.n	800d80c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f93c 	bl	800d928 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d6b0:	4b60      	ldr	r3, [pc, #384]	@ (800d834 <tcp_process+0x760>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 80a9 	beq.w	800d810 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	7e9b      	ldrb	r3, [r3, #26]
 800d6c2:	f043 0302 	orr.w	r3, r3, #2
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7fe fe67 	bl	800c3a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d6d2:	4b59      	ldr	r3, [pc, #356]	@ (800d838 <tcp_process+0x764>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d105      	bne.n	800d6e8 <tcp_process+0x614>
 800d6dc:	4b56      	ldr	r3, [pc, #344]	@ (800d838 <tcp_process+0x764>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	4a55      	ldr	r2, [pc, #340]	@ (800d838 <tcp_process+0x764>)
 800d6e4:	6013      	str	r3, [r2, #0]
 800d6e6:	e013      	b.n	800d710 <tcp_process+0x63c>
 800d6e8:	4b53      	ldr	r3, [pc, #332]	@ (800d838 <tcp_process+0x764>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	613b      	str	r3, [r7, #16]
 800d6ee:	e00c      	b.n	800d70a <tcp_process+0x636>
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d104      	bne.n	800d704 <tcp_process+0x630>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	68da      	ldr	r2, [r3, #12]
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	60da      	str	r2, [r3, #12]
 800d702:	e005      	b.n	800d710 <tcp_process+0x63c>
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	613b      	str	r3, [r7, #16]
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d1ef      	bne.n	800d6f0 <tcp_process+0x61c>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	4b43      	ldr	r3, [pc, #268]	@ (800d824 <tcp_process+0x750>)
 800d718:	2201      	movs	r2, #1
 800d71a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	220a      	movs	r2, #10
 800d720:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d722:	4b41      	ldr	r3, [pc, #260]	@ (800d828 <tcp_process+0x754>)
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	60da      	str	r2, [r3, #12]
 800d72a:	4a3f      	ldr	r2, [pc, #252]	@ (800d828 <tcp_process+0x754>)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	f002 f908 	bl	800f944 <tcp_timer_needed>
    }
    break;
 800d734:	e06c      	b.n	800d810 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f8f6 	bl	800d928 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d73c:	4b3b      	ldr	r3, [pc, #236]	@ (800d82c <tcp_process+0x758>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f003 0310 	and.w	r3, r3, #16
 800d744:	2b00      	cmp	r3, #0
 800d746:	d065      	beq.n	800d814 <tcp_process+0x740>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d74c:	4b38      	ldr	r3, [pc, #224]	@ (800d830 <tcp_process+0x75c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	429a      	cmp	r2, r3
 800d752:	d15f      	bne.n	800d814 <tcp_process+0x740>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d15b      	bne.n	800d814 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7fe fe1f 	bl	800c3a0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d762:	4b35      	ldr	r3, [pc, #212]	@ (800d838 <tcp_process+0x764>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d105      	bne.n	800d778 <tcp_process+0x6a4>
 800d76c:	4b32      	ldr	r3, [pc, #200]	@ (800d838 <tcp_process+0x764>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	4a31      	ldr	r2, [pc, #196]	@ (800d838 <tcp_process+0x764>)
 800d774:	6013      	str	r3, [r2, #0]
 800d776:	e013      	b.n	800d7a0 <tcp_process+0x6cc>
 800d778:	4b2f      	ldr	r3, [pc, #188]	@ (800d838 <tcp_process+0x764>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	60fb      	str	r3, [r7, #12]
 800d77e:	e00c      	b.n	800d79a <tcp_process+0x6c6>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d104      	bne.n	800d794 <tcp_process+0x6c0>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	68da      	ldr	r2, [r3, #12]
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]
 800d792:	e005      	b.n	800d7a0 <tcp_process+0x6cc>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	60fb      	str	r3, [r7, #12]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1ef      	bne.n	800d780 <tcp_process+0x6ac>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	60da      	str	r2, [r3, #12]
 800d7a6:	4b1f      	ldr	r3, [pc, #124]	@ (800d824 <tcp_process+0x750>)
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	220a      	movs	r2, #10
 800d7b0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d7b2:	4b1d      	ldr	r3, [pc, #116]	@ (800d828 <tcp_process+0x754>)
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	60da      	str	r2, [r3, #12]
 800d7ba:	4a1b      	ldr	r2, [pc, #108]	@ (800d828 <tcp_process+0x754>)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6013      	str	r3, [r2, #0]
 800d7c0:	f002 f8c0 	bl	800f944 <tcp_timer_needed>
    }
    break;
 800d7c4:	e026      	b.n	800d814 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f8ae 	bl	800d928 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d7cc:	4b17      	ldr	r3, [pc, #92]	@ (800d82c <tcp_process+0x758>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01f      	beq.n	800d818 <tcp_process+0x744>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7dc:	4b14      	ldr	r3, [pc, #80]	@ (800d830 <tcp_process+0x75c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d119      	bne.n	800d818 <tcp_process+0x744>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d115      	bne.n	800d818 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800d7ec:	4b11      	ldr	r3, [pc, #68]	@ (800d834 <tcp_process+0x760>)
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	f043 0310 	orr.w	r3, r3, #16
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d834 <tcp_process+0x760>)
 800d7f8:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d7fa:	e00d      	b.n	800d818 <tcp_process+0x744>
  default:
    break;
 800d7fc:	bf00      	nop
 800d7fe:	e00c      	b.n	800d81a <tcp_process+0x746>
    break;
 800d800:	bf00      	nop
 800d802:	e00a      	b.n	800d81a <tcp_process+0x746>
    break;
 800d804:	bf00      	nop
 800d806:	e008      	b.n	800d81a <tcp_process+0x746>
    break;
 800d808:	bf00      	nop
 800d80a:	e006      	b.n	800d81a <tcp_process+0x746>
    break;
 800d80c:	bf00      	nop
 800d80e:	e004      	b.n	800d81a <tcp_process+0x746>
    break;
 800d810:	bf00      	nop
 800d812:	e002      	b.n	800d81a <tcp_process+0x746>
    break;
 800d814:	bf00      	nop
 800d816:	e000      	b.n	800d81a <tcp_process+0x746>
    break;
 800d818:	bf00      	nop
  }
  return ERR_OK;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3720      	adds	r7, #32
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	200080c0 	.word	0x200080c0
 800d828:	200080bc 	.word	0x200080bc
 800d82c:	200080f0 	.word	0x200080f0
 800d830:	200080e8 	.word	0x200080e8
 800d834:	200080f1 	.word	0x200080f1
 800d838:	200080b8 	.word	0x200080b8

0800d83c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d83c:	b590      	push	{r4, r7, lr}
 800d83e:	b085      	sub	sp, #20
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	899b      	ldrh	r3, [r3, #12]
 800d84c:	b29b      	uxth	r3, r3
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fc f9a2 	bl	8009b98 <lwip_htons>
 800d854:	4603      	mov	r3, r0
 800d856:	f003 0301 	and.w	r3, r3, #1
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d027      	beq.n	800d8ae <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d85e:	6838      	ldr	r0, [r7, #0]
 800d860:	f7fe fbf5 	bl	800c04e <tcp_segs_free>
    next = NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	e055      	b.n	800d916 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	899b      	ldrh	r3, [r3, #12]
 800d870:	b29b      	uxth	r3, r3
 800d872:	4618      	mov	r0, r3
 800d874:	f7fc f990 	bl	8009b98 <lwip_htons>
 800d878:	4603      	mov	r3, r0
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00d      	beq.n	800d89e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	899b      	ldrh	r3, [r3, #12]
 800d888:	b29c      	uxth	r4, r3
 800d88a:	2001      	movs	r0, #1
 800d88c:	f7fc f984 	bl	8009b98 <lwip_htons>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	4322      	orrs	r2, r4
 800d89a:	b292      	uxth	r2, r2
 800d89c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7fe fbe5 	bl	800c078 <tcp_seg_free>
    while (next &&
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00e      	beq.n	800d8d2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	891b      	ldrh	r3, [r3, #8]
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	4b1a      	ldr	r3, [pc, #104]	@ (800d924 <tcp_oos_insert_segment+0xe8>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	441a      	add	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	6839      	ldr	r1, [r7, #0]
 800d8c8:	8909      	ldrh	r1, [r1, #8]
 800d8ca:	440b      	add	r3, r1
 800d8cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	dacb      	bge.n	800d86a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d01e      	beq.n	800d916 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	891b      	ldrh	r3, [r3, #8]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	4b11      	ldr	r3, [pc, #68]	@ (800d924 <tcp_oos_insert_segment+0xe8>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	441a      	add	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	dd12      	ble.n	800d916 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800d924 <tcp_oos_insert_segment+0xe8>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	b29a      	uxth	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685a      	ldr	r2, [r3, #4]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	891b      	ldrh	r3, [r3, #8]
 800d90e:	4619      	mov	r1, r3
 800d910:	4610      	mov	r0, r2
 800d912:	f7fd f8dd 	bl	800aad0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	683a      	ldr	r2, [r7, #0]
 800d91a:	601a      	str	r2, [r3, #0]
}
 800d91c:	bf00      	nop
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	bd90      	pop	{r4, r7, pc}
 800d924:	200080e4 	.word	0x200080e4

0800d928 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d92a:	b08d      	sub	sp, #52	@ 0x34
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800d930:	2300      	movs	r3, #0
 800d932:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	7d1b      	ldrb	r3, [r3, #20]
 800d938:	2b03      	cmp	r3, #3
 800d93a:	d806      	bhi.n	800d94a <tcp_receive+0x22>
 800d93c:	4b98      	ldr	r3, [pc, #608]	@ (800dba0 <tcp_receive+0x278>)
 800d93e:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800d942:	4998      	ldr	r1, [pc, #608]	@ (800dba4 <tcp_receive+0x27c>)
 800d944:	4898      	ldr	r0, [pc, #608]	@ (800dba8 <tcp_receive+0x280>)
 800d946:	f005 fc1f 	bl	8013188 <iprintf>

  if (flags & TCP_ACK) {
 800d94a:	4b98      	ldr	r3, [pc, #608]	@ (800dbac <tcp_receive+0x284>)
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	f003 0310 	and.w	r3, r3, #16
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 82c1 	beq.w	800deda <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d95e:	461a      	mov	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d964:	4413      	add	r3, r2
 800d966:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d96c:	4b90      	ldr	r3, [pc, #576]	@ (800dbb0 <tcp_receive+0x288>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	1ad3      	subs	r3, r2, r3
 800d972:	2b00      	cmp	r3, #0
 800d974:	db1b      	blt.n	800d9ae <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d97a:	4b8d      	ldr	r3, [pc, #564]	@ (800dbb0 <tcp_receive+0x288>)
 800d97c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d97e:	429a      	cmp	r2, r3
 800d980:	d106      	bne.n	800d990 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d986:	4b8b      	ldr	r3, [pc, #556]	@ (800dbb4 <tcp_receive+0x28c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	1ad3      	subs	r3, r2, r3
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	db0e      	blt.n	800d9ae <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d994:	4b87      	ldr	r3, [pc, #540]	@ (800dbb4 <tcp_receive+0x28c>)
 800d996:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d998:	429a      	cmp	r2, r3
 800d99a:	d141      	bne.n	800da20 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d99c:	4b86      	ldr	r3, [pc, #536]	@ (800dbb8 <tcp_receive+0x290>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	89db      	ldrh	r3, [r3, #14]
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d938      	bls.n	800da20 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d9ae:	4b82      	ldr	r3, [pc, #520]	@ (800dbb8 <tcp_receive+0x290>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	89db      	ldrh	r3, [r3, #14]
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d205      	bcs.n	800d9d8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 800d9d8:	4b75      	ldr	r3, [pc, #468]	@ (800dbb0 <tcp_receive+0x288>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 800d9e0:	4b74      	ldr	r3, [pc, #464]	@ (800dbb4 <tcp_receive+0x28c>)
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10d      	bne.n	800da0e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d111      	bne.n	800da20 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800da0c:	e008      	b.n	800da20 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800da14:	2b00      	cmp	r3, #0
 800da16:	d003      	beq.n	800da20 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800da20:	4b64      	ldr	r3, [pc, #400]	@ (800dbb4 <tcp_receive+0x28c>)
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	dc53      	bgt.n	800dad6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800da2e:	4b63      	ldr	r3, [pc, #396]	@ (800dbbc <tcp_receive+0x294>)
 800da30:	881b      	ldrh	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d146      	bne.n	800dac4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da3a:	687a      	ldr	r2, [r7, #4]
 800da3c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800da40:	4413      	add	r3, r2
 800da42:	697a      	ldr	r2, [r7, #20]
 800da44:	429a      	cmp	r2, r3
 800da46:	d13d      	bne.n	800dac4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800da4e:	2b00      	cmp	r3, #0
 800da50:	db38      	blt.n	800dac4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da56:	4b57      	ldr	r3, [pc, #348]	@ (800dbb4 <tcp_receive+0x28c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d132      	bne.n	800dac4 <tcp_receive+0x19c>
              found_dupack = 1;
 800da5e:	2301      	movs	r3, #1
 800da60:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da68:	2bff      	cmp	r3, #255	@ 0xff
 800da6a:	d007      	beq.n	800da7c <tcp_receive+0x154>
                ++pcb->dupacks;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da72:	3301      	adds	r3, #1
 800da74:	b2da      	uxtb	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800da82:	2b03      	cmp	r3, #3
 800da84:	d916      	bls.n	800dab4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da90:	4413      	add	r3, r2
 800da92:	b29a      	uxth	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d912      	bls.n	800dac4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800daa8:	4413      	add	r3, r2
 800daaa:	b29a      	uxth	r2, r3
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800dab2:	e007      	b.n	800dac4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d102      	bne.n	800dac4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f001 fdf4 	bl	800f6ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f040 816a 	bne.w	800dda0 <tcp_receive+0x478>
        pcb->dupacks = 0;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dad4:	e164      	b.n	800dda0 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800dad6:	4b37      	ldr	r3, [pc, #220]	@ (800dbb4 <tcp_receive+0x28c>)
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	3b01      	subs	r3, #1
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f2c0 8108 	blt.w	800dcf8 <tcp_receive+0x3d0>
 800dae8:	4b32      	ldr	r3, [pc, #200]	@ (800dbb4 <tcp_receive+0x28c>)
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	f300 8100 	bgt.w	800dcf8 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7e9b      	ldrb	r3, [r3, #26]
 800dafc:	f003 0304 	and.w	r3, r3, #4
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00c      	beq.n	800db1e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7e9b      	ldrb	r3, [r3, #26]
 800db08:	f023 0304 	bic.w	r3, r3, #4
 800db0c:	b2da      	uxtb	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800db2c:	10db      	asrs	r3, r3, #3
 800db2e:	b21b      	sxth	r3, r3
 800db30:	b29a      	uxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800db38:	b29b      	uxth	r3, r3
 800db3a:	4413      	add	r3, r2
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	b21a      	sxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2200      	movs	r2, #0
 800db4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800db4e:	4b19      	ldr	r3, [pc, #100]	@ (800dbb4 <tcp_receive+0x28c>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	7d1b      	ldrb	r3, [r3, #20]
 800db5a:	2b03      	cmp	r3, #3
 800db5c:	f240 8095 	bls.w	800dc8a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d227      	bcs.n	800dbc0 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db7a:	4413      	add	r3, r2
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800db84:	429a      	cmp	r2, r3
 800db86:	f240 8080 	bls.w	800dc8a <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800db94:	4413      	add	r3, r2
 800db96:	b29a      	uxth	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800db9e:	e074      	b.n	800dc8a <tcp_receive+0x362>
 800dba0:	08015308 	.word	0x08015308
 800dba4:	0801552c 	.word	0x0801552c
 800dba8:	0801534c 	.word	0x0801534c
 800dbac:	200080f0 	.word	0x200080f0
 800dbb0:	200080e4 	.word	0x200080e4
 800dbb4:	200080e8 	.word	0x200080e8
 800dbb8:	200080d4 	.word	0x200080d4
 800dbbc:	200080ee 	.word	0x200080ee
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dbca:	4619      	mov	r1, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dbd0:	fb01 f303 	mul.w	r3, r1, r3
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 800dbda:	fb93 f3f1 	sdiv	r3, r3, r1
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	4413      	add	r3, r2
 800dbe2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dbea:	8a7a      	ldrh	r2, [r7, #18]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d94c      	bls.n	800dc8a <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	8a7a      	ldrh	r2, [r7, #18]
 800dbf4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800dbf8:	e047      	b.n	800dc8a <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 800dc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fd f963 	bl	800aee0 <pbuf_clen>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	429c      	cmp	r4, r3
 800dc1e:	d206      	bcs.n	800dc2e <tcp_receive+0x306>
 800dc20:	4b70      	ldr	r3, [pc, #448]	@ (800dde4 <tcp_receive+0x4bc>)
 800dc22:	f240 429e 	movw	r2, #1182	@ 0x49e
 800dc26:	4970      	ldr	r1, [pc, #448]	@ (800dde8 <tcp_receive+0x4c0>)
 800dc28:	4870      	ldr	r0, [pc, #448]	@ (800ddec <tcp_receive+0x4c4>)
 800dc2a:	f005 faad 	bl	8013188 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800dc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd f954 	bl	800aee0 <pbuf_clen>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc42:	1a9b      	subs	r3, r3, r2
 800dc44:	b29a      	uxth	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 800dc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4e:	891a      	ldrh	r2, [r3, #8]
 800dc50:	4b67      	ldr	r3, [pc, #412]	@ (800ddf0 <tcp_receive+0x4c8>)
 800dc52:	881b      	ldrh	r3, [r3, #0]
 800dc54:	4413      	add	r3, r2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	4b65      	ldr	r3, [pc, #404]	@ (800ddf0 <tcp_receive+0x4c8>)
 800dc5a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800dc5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dc5e:	f7fe fa0b 	bl	800c078 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00e      	beq.n	800dc8a <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d10a      	bne.n	800dc8a <tcp_receive+0x362>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d106      	bne.n	800dc8a <tcp_receive+0x362>
 800dc7c:	4b59      	ldr	r3, [pc, #356]	@ (800dde4 <tcp_receive+0x4bc>)
 800dc7e:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 800dc82:	495c      	ldr	r1, [pc, #368]	@ (800ddf4 <tcp_receive+0x4cc>)
 800dc84:	4859      	ldr	r0, [pc, #356]	@ (800ddec <tcp_receive+0x4c4>)
 800dc86:	f005 fa7f 	bl	8013188 <iprintf>
      while (pcb->unacked != NULL &&
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d022      	beq.n	800dcd8 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fb ff89 	bl	8009bb2 <lwip_htonl>
 800dca0:	4604      	mov	r4, r0
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dca6:	891b      	ldrh	r3, [r3, #8]
 800dca8:	461d      	mov	r5, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcae:	68db      	ldr	r3, [r3, #12]
 800dcb0:	899b      	ldrh	r3, [r3, #12]
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fb ff6f 	bl	8009b98 <lwip_htons>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f003 0303 	and.w	r3, r3, #3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d001      	beq.n	800dcc8 <tcp_receive+0x3a0>
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e000      	b.n	800dcca <tcp_receive+0x3a2>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	442b      	add	r3, r5
 800dccc:	18e2      	adds	r2, r4, r3
 800dcce:	4b4a      	ldr	r3, [pc, #296]	@ (800ddf8 <tcp_receive+0x4d0>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	dd90      	ble.n	800dbfa <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d104      	bne.n	800dcea <tcp_receive+0x3c2>
        pcb->rtime = -1;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dce6:	861a      	strh	r2, [r3, #48]	@ 0x30
 800dce8:	e002      	b.n	800dcf0 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2200      	movs	r2, #0
 800dcee:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	76da      	strb	r2, [r3, #27]
 800dcf6:	e002      	b.n	800dcfe <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f001 f8fb 	bl	800eef4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800dcfe:	e04f      	b.n	800dda0 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 800dd26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fd f8d8 	bl	800aee0 <pbuf_clen>
 800dd30:	4603      	mov	r3, r0
 800dd32:	429c      	cmp	r4, r3
 800dd34:	d206      	bcs.n	800dd44 <tcp_receive+0x41c>
 800dd36:	4b2b      	ldr	r3, [pc, #172]	@ (800dde4 <tcp_receive+0x4bc>)
 800dd38:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800dd3c:	492a      	ldr	r1, [pc, #168]	@ (800dde8 <tcp_receive+0x4c0>)
 800dd3e:	482b      	ldr	r0, [pc, #172]	@ (800ddec <tcp_receive+0x4c4>)
 800dd40:	f005 fa22 	bl	8013188 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800dd44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f7fd f8c9 	bl	800aee0 <pbuf_clen>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	461a      	mov	r2, r3
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd58:	1a9b      	subs	r3, r3, r2
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 800dd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd64:	891a      	ldrh	r2, [r3, #8]
 800dd66:	4b22      	ldr	r3, [pc, #136]	@ (800ddf0 <tcp_receive+0x4c8>)
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	4b20      	ldr	r3, [pc, #128]	@ (800ddf0 <tcp_receive+0x4c8>)
 800dd70:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800dd72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd74:	f7fe f980 	bl	800c078 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d00e      	beq.n	800dda0 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d10a      	bne.n	800dda0 <tcp_receive+0x478>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d106      	bne.n	800dda0 <tcp_receive+0x478>
 800dd92:	4b14      	ldr	r3, [pc, #80]	@ (800dde4 <tcp_receive+0x4bc>)
 800dd94:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 800dd98:	4916      	ldr	r1, [pc, #88]	@ (800ddf4 <tcp_receive+0x4cc>)
 800dd9a:	4814      	ldr	r0, [pc, #80]	@ (800ddec <tcp_receive+0x4c4>)
 800dd9c:	f005 f9f4 	bl	8013188 <iprintf>
    while (pcb->unsent != NULL &&
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d037      	beq.n	800de18 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800dda8:	4b13      	ldr	r3, [pc, #76]	@ (800ddf8 <tcp_receive+0x4d0>)
 800ddaa:	681c      	ldr	r4, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fb fefc 	bl	8009bb2 <lwip_htonl>
 800ddba:	4605      	mov	r5, r0
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ddc0:	891b      	ldrh	r3, [r3, #8]
 800ddc2:	461e      	mov	r6, r3
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	899b      	ldrh	r3, [r3, #12]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fb fee2 	bl	8009b98 <lwip_htons>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	f003 0303 	and.w	r3, r3, #3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d00e      	beq.n	800ddfc <tcp_receive+0x4d4>
 800ddde:	2301      	movs	r3, #1
 800dde0:	e00d      	b.n	800ddfe <tcp_receive+0x4d6>
 800dde2:	bf00      	nop
 800dde4:	08015308 	.word	0x08015308
 800dde8:	08015548 	.word	0x08015548
 800ddec:	0801534c 	.word	0x0801534c
 800ddf0:	200080ec 	.word	0x200080ec
 800ddf4:	08015570 	.word	0x08015570
 800ddf8:	200080e8 	.word	0x200080e8
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4433      	add	r3, r6
 800de00:	442b      	add	r3, r5
 800de02:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800de04:	2b00      	cmp	r3, #0
 800de06:	db07      	blt.n	800de18 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800de08:	4b8d      	ldr	r3, [pc, #564]	@ (800e040 <tcp_receive+0x718>)
 800de0a:	681a      	ldr	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	2b00      	cmp	r3, #0
 800de14:	f77f af74 	ble.w	800dd00 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800de1e:	4b89      	ldr	r3, [pc, #548]	@ (800e044 <tcp_receive+0x71c>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	4413      	add	r3, r2
 800de24:	b29a      	uxth	r2, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de30:	2b00      	cmp	r3, #0
 800de32:	d052      	beq.n	800deda <tcp_receive+0x5b2>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de38:	4b81      	ldr	r3, [pc, #516]	@ (800e040 <tcp_receive+0x718>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	2b00      	cmp	r3, #0
 800de40:	da4b      	bge.n	800deda <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800de42:	4b81      	ldr	r3, [pc, #516]	@ (800e048 <tcp_receive+0x720>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	b29a      	uxth	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	1ad3      	subs	r3, r2, r3
 800de50:	b29b      	uxth	r3, r3
 800de52:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800de54:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800de5c:	10db      	asrs	r3, r3, #3
 800de5e:	b21b      	sxth	r3, r3
 800de60:	b29b      	uxth	r3, r3
 800de62:	1ad3      	subs	r3, r2, r3
 800de64:	b29b      	uxth	r3, r3
 800de66:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800de6e:	b29a      	uxth	r2, r3
 800de70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de72:	4413      	add	r3, r2
 800de74:	b29b      	uxth	r3, r3
 800de76:	b21a      	sxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800de7c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800de80:	2b00      	cmp	r3, #0
 800de82:	da03      	bge.n	800de8c <tcp_receive+0x564>
        m = -m;
 800de84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800de86:	425b      	negs	r3, r3
 800de88:	b29b      	uxth	r3, r3
 800de8a:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 800de8c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800de94:	109b      	asrs	r3, r3, #2
 800de96:	b21b      	sxth	r3, r3
 800de98:	b29b      	uxth	r3, r3
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	b29b      	uxth	r3, r3
 800de9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dea6:	b29a      	uxth	r2, r3
 800dea8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800deaa:	4413      	add	r3, r2
 800deac:	b29b      	uxth	r3, r3
 800deae:	b21a      	sxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800deba:	10db      	asrs	r3, r3, #3
 800debc:	b21b      	sxth	r3, r3
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	4413      	add	r3, r2
 800deca:	b29b      	uxth	r3, r3
 800decc:	b21a      	sxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800deda:	4b5c      	ldr	r3, [pc, #368]	@ (800e04c <tcp_receive+0x724>)
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f000 84f1 	beq.w	800e8c6 <tcp_receive+0xf9e>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7d1b      	ldrb	r3, [r3, #20]
 800dee8:	2b06      	cmp	r3, #6
 800deea:	f200 84ec 	bhi.w	800e8c6 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800def2:	4b57      	ldr	r3, [pc, #348]	@ (800e050 <tcp_receive+0x728>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	1ad3      	subs	r3, r2, r3
 800def8:	3b01      	subs	r3, #1
 800defa:	2b00      	cmp	r3, #0
 800defc:	f2c0 80b8 	blt.w	800e070 <tcp_receive+0x748>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df04:	4b51      	ldr	r3, [pc, #324]	@ (800e04c <tcp_receive+0x724>)
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	4619      	mov	r1, r3
 800df0a:	4b51      	ldr	r3, [pc, #324]	@ (800e050 <tcp_receive+0x728>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	440b      	add	r3, r1
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	3301      	adds	r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	f300 80ab 	bgt.w	800e070 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800df1a:	4b4e      	ldr	r3, [pc, #312]	@ (800e054 <tcp_receive+0x72c>)
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df24:	4b4a      	ldr	r3, [pc, #296]	@ (800e050 <tcp_receive+0x728>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800df2c:	4b49      	ldr	r3, [pc, #292]	@ (800e054 <tcp_receive+0x72c>)
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d106      	bne.n	800df42 <tcp_receive+0x61a>
 800df34:	4b48      	ldr	r3, [pc, #288]	@ (800e058 <tcp_receive+0x730>)
 800df36:	f240 523c 	movw	r2, #1340	@ 0x53c
 800df3a:	4948      	ldr	r1, [pc, #288]	@ (800e05c <tcp_receive+0x734>)
 800df3c:	4848      	ldr	r0, [pc, #288]	@ (800e060 <tcp_receive+0x738>)
 800df3e:	f005 f923 	bl	8013188 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800df42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df44:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800df48:	4293      	cmp	r3, r2
 800df4a:	dd06      	ble.n	800df5a <tcp_receive+0x632>
 800df4c:	4b42      	ldr	r3, [pc, #264]	@ (800e058 <tcp_receive+0x730>)
 800df4e:	f240 523d 	movw	r2, #1341	@ 0x53d
 800df52:	4944      	ldr	r1, [pc, #272]	@ (800e064 <tcp_receive+0x73c>)
 800df54:	4842      	ldr	r0, [pc, #264]	@ (800e060 <tcp_receive+0x738>)
 800df56:	f005 f917 	bl	8013188 <iprintf>
      if (inseg.p->len < off) {
 800df5a:	4b3e      	ldr	r3, [pc, #248]	@ (800e054 <tcp_receive+0x72c>)
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	895b      	ldrh	r3, [r3, #10]
 800df60:	461a      	mov	r2, r3
 800df62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df64:	4293      	cmp	r3, r2
 800df66:	dd3e      	ble.n	800dfe6 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800df68:	4b3a      	ldr	r3, [pc, #232]	@ (800e054 <tcp_receive+0x72c>)
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	891b      	ldrh	r3, [r3, #8]
 800df6e:	461a      	mov	r2, r3
 800df70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df72:	4293      	cmp	r3, r2
 800df74:	dd06      	ble.n	800df84 <tcp_receive+0x65c>
 800df76:	4b38      	ldr	r3, [pc, #224]	@ (800e058 <tcp_receive+0x730>)
 800df78:	f240 523f 	movw	r2, #1343	@ 0x53f
 800df7c:	493a      	ldr	r1, [pc, #232]	@ (800e068 <tcp_receive+0x740>)
 800df7e:	4838      	ldr	r0, [pc, #224]	@ (800e060 <tcp_receive+0x738>)
 800df80:	f005 f902 	bl	8013188 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800df84:	4b33      	ldr	r3, [pc, #204]	@ (800e054 <tcp_receive+0x72c>)
 800df86:	685b      	ldr	r3, [r3, #4]
 800df88:	891a      	ldrh	r2, [r3, #8]
 800df8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	1ad3      	subs	r3, r2, r3
 800df90:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800df92:	e00e      	b.n	800dfb2 <tcp_receive+0x68a>
          off -= p->len;
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	895b      	ldrh	r3, [r3, #10]
 800df98:	461a      	mov	r2, r3
 800df9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9c:	1a9b      	subs	r3, r3, r2
 800df9e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	8a3a      	ldrh	r2, [r7, #16]
 800dfa4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800dfac:	69bb      	ldr	r3, [r7, #24]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	895b      	ldrh	r3, [r3, #10]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	dcea      	bgt.n	800df94 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800dfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	425b      	negs	r3, r3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	b21b      	sxth	r3, r3
 800dfc8:	4619      	mov	r1, r3
 800dfca:	69b8      	ldr	r0, [r7, #24]
 800dfcc:	f7fc fed0 	bl	800ad70 <pbuf_header>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d01c      	beq.n	800e010 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800dfd6:	4b20      	ldr	r3, [pc, #128]	@ (800e058 <tcp_receive+0x730>)
 800dfd8:	f240 524c 	movw	r2, #1356	@ 0x54c
 800dfdc:	4923      	ldr	r1, [pc, #140]	@ (800e06c <tcp_receive+0x744>)
 800dfde:	4820      	ldr	r0, [pc, #128]	@ (800e060 <tcp_receive+0x738>)
 800dfe0:	f005 f8d2 	bl	8013188 <iprintf>
 800dfe4:	e014      	b.n	800e010 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	@ (800e054 <tcp_receive+0x72c>)
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfec:	b292      	uxth	r2, r2
 800dfee:	4252      	negs	r2, r2
 800dff0:	b292      	uxth	r2, r2
 800dff2:	b212      	sxth	r2, r2
 800dff4:	4611      	mov	r1, r2
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7fc feba 	bl	800ad70 <pbuf_header>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d006      	beq.n	800e010 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800e002:	4b15      	ldr	r3, [pc, #84]	@ (800e058 <tcp_receive+0x730>)
 800e004:	f240 5251 	movw	r2, #1361	@ 0x551
 800e008:	4918      	ldr	r1, [pc, #96]	@ (800e06c <tcp_receive+0x744>)
 800e00a:	4815      	ldr	r0, [pc, #84]	@ (800e060 <tcp_receive+0x738>)
 800e00c:	f005 f8bc 	bl	8013188 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800e010:	4b10      	ldr	r3, [pc, #64]	@ (800e054 <tcp_receive+0x72c>)
 800e012:	891a      	ldrh	r2, [r3, #8]
 800e014:	4b0e      	ldr	r3, [pc, #56]	@ (800e050 <tcp_receive+0x728>)
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	b299      	uxth	r1, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e01e:	b29b      	uxth	r3, r3
 800e020:	1acb      	subs	r3, r1, r3
 800e022:	b29b      	uxth	r3, r3
 800e024:	4413      	add	r3, r2
 800e026:	b29a      	uxth	r2, r3
 800e028:	4b0a      	ldr	r3, [pc, #40]	@ (800e054 <tcp_receive+0x72c>)
 800e02a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e030:	4a07      	ldr	r2, [pc, #28]	@ (800e050 <tcp_receive+0x728>)
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	4b07      	ldr	r3, [pc, #28]	@ (800e054 <tcp_receive+0x72c>)
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	4a05      	ldr	r2, [pc, #20]	@ (800e050 <tcp_receive+0x728>)
 800e03a:	6812      	ldr	r2, [r2, #0]
 800e03c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e03e:	e025      	b.n	800e08c <tcp_receive+0x764>
 800e040:	200080e8 	.word	0x200080e8
 800e044:	200080ec 	.word	0x200080ec
 800e048:	200080ac 	.word	0x200080ac
 800e04c:	200080ee 	.word	0x200080ee
 800e050:	200080e4 	.word	0x200080e4
 800e054:	200080c4 	.word	0x200080c4
 800e058:	08015308 	.word	0x08015308
 800e05c:	08015590 	.word	0x08015590
 800e060:	0801534c 	.word	0x0801534c
 800e064:	080155a0 	.word	0x080155a0
 800e068:	080155b0 	.word	0x080155b0
 800e06c:	080155c0 	.word	0x080155c0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e070:	4b87      	ldr	r3, [pc, #540]	@ (800e290 <tcp_receive+0x968>)
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	da06      	bge.n	800e08c <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	7e9b      	ldrb	r3, [r3, #26]
 800e082:	f043 0302 	orr.w	r3, r3, #2
 800e086:	b2da      	uxtb	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e08c:	4b80      	ldr	r3, [pc, #512]	@ (800e290 <tcp_receive+0x968>)
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	2b00      	cmp	r3, #0
 800e098:	f2c0 8410 	blt.w	800e8bc <tcp_receive+0xf94>
 800e09c:	4b7c      	ldr	r3, [pc, #496]	@ (800e290 <tcp_receive+0x968>)
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0a4:	6879      	ldr	r1, [r7, #4]
 800e0a6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e0a8:	440b      	add	r3, r1
 800e0aa:	1ad3      	subs	r3, r2, r3
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f300 8404 	bgt.w	800e8bc <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e0b8:	4b75      	ldr	r3, [pc, #468]	@ (800e290 <tcp_receive+0x968>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	f040 8287 	bne.w	800e5d0 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e0c2:	4b74      	ldr	r3, [pc, #464]	@ (800e294 <tcp_receive+0x96c>)
 800e0c4:	891c      	ldrh	r4, [r3, #8]
 800e0c6:	4b73      	ldr	r3, [pc, #460]	@ (800e294 <tcp_receive+0x96c>)
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	899b      	ldrh	r3, [r3, #12]
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fb fd62 	bl	8009b98 <lwip_htons>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	f003 0303 	and.w	r3, r3, #3
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <tcp_receive+0x7ba>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <tcp_receive+0x7bc>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	4423      	add	r3, r4
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	4b6b      	ldr	r3, [pc, #428]	@ (800e298 <tcp_receive+0x970>)
 800e0ea:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e0f0:	4b69      	ldr	r3, [pc, #420]	@ (800e298 <tcp_receive+0x970>)
 800e0f2:	881b      	ldrh	r3, [r3, #0]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d26e      	bcs.n	800e1d6 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e0f8:	4b66      	ldr	r3, [pc, #408]	@ (800e294 <tcp_receive+0x96c>)
 800e0fa:	68db      	ldr	r3, [r3, #12]
 800e0fc:	899b      	ldrh	r3, [r3, #12]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4618      	mov	r0, r3
 800e102:	f7fb fd49 	bl	8009b98 <lwip_htons>
 800e106:	4603      	mov	r3, r0
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d01b      	beq.n	800e148 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e110:	4b60      	ldr	r3, [pc, #384]	@ (800e294 <tcp_receive+0x96c>)
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	899b      	ldrh	r3, [r3, #12]
 800e116:	b29b      	uxth	r3, r3
 800e118:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e11c:	b29c      	uxth	r4, r3
 800e11e:	4b5d      	ldr	r3, [pc, #372]	@ (800e294 <tcp_receive+0x96c>)
 800e120:	68db      	ldr	r3, [r3, #12]
 800e122:	899b      	ldrh	r3, [r3, #12]
 800e124:	b29b      	uxth	r3, r3
 800e126:	4618      	mov	r0, r3
 800e128:	f7fb fd36 	bl	8009b98 <lwip_htons>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e132:	b29b      	uxth	r3, r3
 800e134:	4618      	mov	r0, r3
 800e136:	f7fb fd2f 	bl	8009b98 <lwip_htons>
 800e13a:	4603      	mov	r3, r0
 800e13c:	461a      	mov	r2, r3
 800e13e:	4b55      	ldr	r3, [pc, #340]	@ (800e294 <tcp_receive+0x96c>)
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	4322      	orrs	r2, r4
 800e144:	b292      	uxth	r2, r2
 800e146:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e14c:	4b51      	ldr	r3, [pc, #324]	@ (800e294 <tcp_receive+0x96c>)
 800e14e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e150:	4b50      	ldr	r3, [pc, #320]	@ (800e294 <tcp_receive+0x96c>)
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	899b      	ldrh	r3, [r3, #12]
 800e156:	b29b      	uxth	r3, r3
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fb fd1d 	bl	8009b98 <lwip_htons>
 800e15e:	4603      	mov	r3, r0
 800e160:	f003 0302 	and.w	r3, r3, #2
 800e164:	2b00      	cmp	r3, #0
 800e166:	d005      	beq.n	800e174 <tcp_receive+0x84c>
            inseg.len -= 1;
 800e168:	4b4a      	ldr	r3, [pc, #296]	@ (800e294 <tcp_receive+0x96c>)
 800e16a:	891b      	ldrh	r3, [r3, #8]
 800e16c:	3b01      	subs	r3, #1
 800e16e:	b29a      	uxth	r2, r3
 800e170:	4b48      	ldr	r3, [pc, #288]	@ (800e294 <tcp_receive+0x96c>)
 800e172:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e174:	4b47      	ldr	r3, [pc, #284]	@ (800e294 <tcp_receive+0x96c>)
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	4a46      	ldr	r2, [pc, #280]	@ (800e294 <tcp_receive+0x96c>)
 800e17a:	8912      	ldrh	r2, [r2, #8]
 800e17c:	4611      	mov	r1, r2
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fc fca6 	bl	800aad0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e184:	4b43      	ldr	r3, [pc, #268]	@ (800e294 <tcp_receive+0x96c>)
 800e186:	891c      	ldrh	r4, [r3, #8]
 800e188:	4b42      	ldr	r3, [pc, #264]	@ (800e294 <tcp_receive+0x96c>)
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	899b      	ldrh	r3, [r3, #12]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	4618      	mov	r0, r3
 800e192:	f7fb fd01 	bl	8009b98 <lwip_htons>
 800e196:	4603      	mov	r3, r0
 800e198:	f003 0303 	and.w	r3, r3, #3
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <tcp_receive+0x87c>
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	e000      	b.n	800e1a6 <tcp_receive+0x87e>
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	4423      	add	r3, r4
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	4b3b      	ldr	r3, [pc, #236]	@ (800e298 <tcp_receive+0x970>)
 800e1ac:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e1ae:	4b3a      	ldr	r3, [pc, #232]	@ (800e298 <tcp_receive+0x970>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	4b36      	ldr	r3, [pc, #216]	@ (800e290 <tcp_receive+0x968>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	441a      	add	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1be:	6879      	ldr	r1, [r7, #4]
 800e1c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e1c2:	440b      	add	r3, r1
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d006      	beq.n	800e1d6 <tcp_receive+0x8ae>
 800e1c8:	4b34      	ldr	r3, [pc, #208]	@ (800e29c <tcp_receive+0x974>)
 800e1ca:	f240 527e 	movw	r2, #1406	@ 0x57e
 800e1ce:	4934      	ldr	r1, [pc, #208]	@ (800e2a0 <tcp_receive+0x978>)
 800e1d0:	4834      	ldr	r0, [pc, #208]	@ (800e2a4 <tcp_receive+0x97c>)
 800e1d2:	f004 ffd9 	bl	8013188 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 80e1 	beq.w	800e3a2 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e1e0:	4b2c      	ldr	r3, [pc, #176]	@ (800e294 <tcp_receive+0x96c>)
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	899b      	ldrh	r3, [r3, #12]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fb fcd5 	bl	8009b98 <lwip_htons>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	f003 0301 	and.w	r3, r3, #1
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d010      	beq.n	800e21a <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e1f8:	e00a      	b.n	800e210 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e1fe:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 800e20a:	68b8      	ldr	r0, [r7, #8]
 800e20c:	f7fd ff34 	bl	800c078 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e214:	2b00      	cmp	r3, #0
 800e216:	d1f0      	bne.n	800e1fa <tcp_receive+0x8d2>
 800e218:	e0c3      	b.n	800e3a2 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e21e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e220:	e04f      	b.n	800e2c2 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	899b      	ldrh	r3, [r3, #12]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fb fcb4 	bl	8009b98 <lwip_htons>
 800e230:	4603      	mov	r3, r0
 800e232:	f003 0301 	and.w	r3, r3, #1
 800e236:	2b00      	cmp	r3, #0
 800e238:	d03b      	beq.n	800e2b2 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e23a:	4b16      	ldr	r3, [pc, #88]	@ (800e294 <tcp_receive+0x96c>)
 800e23c:	68db      	ldr	r3, [r3, #12]
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	b29b      	uxth	r3, r3
 800e242:	4618      	mov	r0, r3
 800e244:	f7fb fca8 	bl	8009b98 <lwip_htons>
 800e248:	4603      	mov	r3, r0
 800e24a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d12f      	bne.n	800e2b2 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e252:	4b10      	ldr	r3, [pc, #64]	@ (800e294 <tcp_receive+0x96c>)
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	899b      	ldrh	r3, [r3, #12]
 800e258:	b29c      	uxth	r4, r3
 800e25a:	2001      	movs	r0, #1
 800e25c:	f7fb fc9c 	bl	8009b98 <lwip_htons>
 800e260:	4603      	mov	r3, r0
 800e262:	461a      	mov	r2, r3
 800e264:	4b0b      	ldr	r3, [pc, #44]	@ (800e294 <tcp_receive+0x96c>)
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	4322      	orrs	r2, r4
 800e26a:	b292      	uxth	r2, r2
 800e26c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e26e:	4b09      	ldr	r3, [pc, #36]	@ (800e294 <tcp_receive+0x96c>)
 800e270:	891c      	ldrh	r4, [r3, #8]
 800e272:	4b08      	ldr	r3, [pc, #32]	@ (800e294 <tcp_receive+0x96c>)
 800e274:	68db      	ldr	r3, [r3, #12]
 800e276:	899b      	ldrh	r3, [r3, #12]
 800e278:	b29b      	uxth	r3, r3
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fb fc8c 	bl	8009b98 <lwip_htons>
 800e280:	4603      	mov	r3, r0
 800e282:	f003 0303 	and.w	r3, r3, #3
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00e      	beq.n	800e2a8 <tcp_receive+0x980>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e00d      	b.n	800e2aa <tcp_receive+0x982>
 800e28e:	bf00      	nop
 800e290:	200080e4 	.word	0x200080e4
 800e294:	200080c4 	.word	0x200080c4
 800e298:	200080ee 	.word	0x200080ee
 800e29c:	08015308 	.word	0x08015308
 800e2a0:	080155d4 	.word	0x080155d4
 800e2a4:	0801534c 	.word	0x0801534c
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	4423      	add	r3, r4
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	4b95      	ldr	r3, [pc, #596]	@ (800e504 <tcp_receive+0xbdc>)
 800e2b0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800e2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 800e2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 800e2bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2be:	f7fd fedb 	bl	800c078 <tcp_seg_free>
            while (next &&
 800e2c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d00e      	beq.n	800e2e6 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e2c8:	4b8e      	ldr	r3, [pc, #568]	@ (800e504 <tcp_receive+0xbdc>)
 800e2ca:	881b      	ldrh	r3, [r3, #0]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	4b8e      	ldr	r3, [pc, #568]	@ (800e508 <tcp_receive+0xbe0>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	441a      	add	r2, r3
 800e2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2dc:	8909      	ldrh	r1, [r1, #8]
 800e2de:	440b      	add	r3, r1
 800e2e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	da9d      	bge.n	800e222 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d057      	beq.n	800e39c <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 800e2ec:	4b85      	ldr	r3, [pc, #532]	@ (800e504 <tcp_receive+0xbdc>)
 800e2ee:	881b      	ldrh	r3, [r3, #0]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	4b85      	ldr	r3, [pc, #532]	@ (800e508 <tcp_receive+0xbe0>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	441a      	add	r2, r3
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e300:	2b00      	cmp	r3, #0
 800e302:	dd4b      	ble.n	800e39c <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	4b7e      	ldr	r3, [pc, #504]	@ (800e508 <tcp_receive+0xbe0>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	b29b      	uxth	r3, r3
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	b29a      	uxth	r2, r3
 800e316:	4b7d      	ldr	r3, [pc, #500]	@ (800e50c <tcp_receive+0xbe4>)
 800e318:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e31a:	4b7c      	ldr	r3, [pc, #496]	@ (800e50c <tcp_receive+0xbe4>)
 800e31c:	68db      	ldr	r3, [r3, #12]
 800e31e:	899b      	ldrh	r3, [r3, #12]
 800e320:	b29b      	uxth	r3, r3
 800e322:	4618      	mov	r0, r3
 800e324:	f7fb fc38 	bl	8009b98 <lwip_htons>
 800e328:	4603      	mov	r3, r0
 800e32a:	f003 0302 	and.w	r3, r3, #2
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d005      	beq.n	800e33e <tcp_receive+0xa16>
                inseg.len -= 1;
 800e332:	4b76      	ldr	r3, [pc, #472]	@ (800e50c <tcp_receive+0xbe4>)
 800e334:	891b      	ldrh	r3, [r3, #8]
 800e336:	3b01      	subs	r3, #1
 800e338:	b29a      	uxth	r2, r3
 800e33a:	4b74      	ldr	r3, [pc, #464]	@ (800e50c <tcp_receive+0xbe4>)
 800e33c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e33e:	4b73      	ldr	r3, [pc, #460]	@ (800e50c <tcp_receive+0xbe4>)
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	4a72      	ldr	r2, [pc, #456]	@ (800e50c <tcp_receive+0xbe4>)
 800e344:	8912      	ldrh	r2, [r2, #8]
 800e346:	4611      	mov	r1, r2
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fc fbc1 	bl	800aad0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e34e:	4b6f      	ldr	r3, [pc, #444]	@ (800e50c <tcp_receive+0xbe4>)
 800e350:	891c      	ldrh	r4, [r3, #8]
 800e352:	4b6e      	ldr	r3, [pc, #440]	@ (800e50c <tcp_receive+0xbe4>)
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	899b      	ldrh	r3, [r3, #12]
 800e358:	b29b      	uxth	r3, r3
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fb fc1c 	bl	8009b98 <lwip_htons>
 800e360:	4603      	mov	r3, r0
 800e362:	f003 0303 	and.w	r3, r3, #3
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <tcp_receive+0xa46>
 800e36a:	2301      	movs	r3, #1
 800e36c:	e000      	b.n	800e370 <tcp_receive+0xa48>
 800e36e:	2300      	movs	r3, #0
 800e370:	4423      	add	r3, r4
 800e372:	b29a      	uxth	r2, r3
 800e374:	4b63      	ldr	r3, [pc, #396]	@ (800e504 <tcp_receive+0xbdc>)
 800e376:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e378:	4b62      	ldr	r3, [pc, #392]	@ (800e504 <tcp_receive+0xbdc>)
 800e37a:	881b      	ldrh	r3, [r3, #0]
 800e37c:	461a      	mov	r2, r3
 800e37e:	4b62      	ldr	r3, [pc, #392]	@ (800e508 <tcp_receive+0xbe0>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	441a      	add	r2, r3
 800e384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e386:	68db      	ldr	r3, [r3, #12]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d006      	beq.n	800e39c <tcp_receive+0xa74>
 800e38e:	4b60      	ldr	r3, [pc, #384]	@ (800e510 <tcp_receive+0xbe8>)
 800e390:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800e394:	495f      	ldr	r1, [pc, #380]	@ (800e514 <tcp_receive+0xbec>)
 800e396:	4860      	ldr	r0, [pc, #384]	@ (800e518 <tcp_receive+0xbf0>)
 800e398:	f004 fef6 	bl	8013188 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3a0:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e3a2:	4b58      	ldr	r3, [pc, #352]	@ (800e504 <tcp_receive+0xbdc>)
 800e3a4:	881b      	ldrh	r3, [r3, #0]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4b57      	ldr	r3, [pc, #348]	@ (800e508 <tcp_receive+0xbe0>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	441a      	add	r2, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e3b6:	4b53      	ldr	r3, [pc, #332]	@ (800e504 <tcp_receive+0xbdc>)
 800e3b8:	881b      	ldrh	r3, [r3, #0]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d206      	bcs.n	800e3cc <tcp_receive+0xaa4>
 800e3be:	4b54      	ldr	r3, [pc, #336]	@ (800e510 <tcp_receive+0xbe8>)
 800e3c0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e3c4:	4955      	ldr	r1, [pc, #340]	@ (800e51c <tcp_receive+0xbf4>)
 800e3c6:	4854      	ldr	r0, [pc, #336]	@ (800e518 <tcp_receive+0xbf0>)
 800e3c8:	f004 fede 	bl	8013188 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e3d0:	4b4c      	ldr	r3, [pc, #304]	@ (800e504 <tcp_receive+0xbdc>)
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f7fd f9fd 	bl	800b7dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e3e2:	4b4a      	ldr	r3, [pc, #296]	@ (800e50c <tcp_receive+0xbe4>)
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	891b      	ldrh	r3, [r3, #8]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d006      	beq.n	800e3fa <tcp_receive+0xad2>
          recv_data = inseg.p;
 800e3ec:	4b47      	ldr	r3, [pc, #284]	@ (800e50c <tcp_receive+0xbe4>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	4a4b      	ldr	r2, [pc, #300]	@ (800e520 <tcp_receive+0xbf8>)
 800e3f2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e3f4:	4b45      	ldr	r3, [pc, #276]	@ (800e50c <tcp_receive+0xbe4>)
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e3fa:	4b44      	ldr	r3, [pc, #272]	@ (800e50c <tcp_receive+0xbe4>)
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	899b      	ldrh	r3, [r3, #12]
 800e400:	b29b      	uxth	r3, r3
 800e402:	4618      	mov	r0, r3
 800e404:	f7fb fbc8 	bl	8009b98 <lwip_htons>
 800e408:	4603      	mov	r3, r0
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f000 80b4 	beq.w	800e57c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e414:	4b43      	ldr	r3, [pc, #268]	@ (800e524 <tcp_receive+0xbfc>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f043 0320 	orr.w	r3, r3, #32
 800e41c:	b2da      	uxtb	r2, r3
 800e41e:	4b41      	ldr	r3, [pc, #260]	@ (800e524 <tcp_receive+0xbfc>)
 800e420:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e422:	e0ab      	b.n	800e57c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e428:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	4a35      	ldr	r2, [pc, #212]	@ (800e508 <tcp_receive+0xbe0>)
 800e434:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	891b      	ldrh	r3, [r3, #8]
 800e43a:	461c      	mov	r4, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	899b      	ldrh	r3, [r3, #12]
 800e442:	b29b      	uxth	r3, r3
 800e444:	4618      	mov	r0, r3
 800e446:	f7fb fba7 	bl	8009b98 <lwip_htons>
 800e44a:	4603      	mov	r3, r0
 800e44c:	f003 0303 	and.w	r3, r3, #3
 800e450:	2b00      	cmp	r3, #0
 800e452:	d001      	beq.n	800e458 <tcp_receive+0xb30>
 800e454:	2301      	movs	r3, #1
 800e456:	e000      	b.n	800e45a <tcp_receive+0xb32>
 800e458:	2300      	movs	r3, #0
 800e45a:	191a      	adds	r2, r3, r4
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e460:	441a      	add	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e46a:	461c      	mov	r4, r3
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	891b      	ldrh	r3, [r3, #8]
 800e470:	461d      	mov	r5, r3
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	68db      	ldr	r3, [r3, #12]
 800e476:	899b      	ldrh	r3, [r3, #12]
 800e478:	b29b      	uxth	r3, r3
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fb fb8c 	bl	8009b98 <lwip_htons>
 800e480:	4603      	mov	r3, r0
 800e482:	f003 0303 	and.w	r3, r3, #3
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <tcp_receive+0xb66>
 800e48a:	2301      	movs	r3, #1
 800e48c:	e000      	b.n	800e490 <tcp_receive+0xb68>
 800e48e:	2300      	movs	r3, #0
 800e490:	442b      	add	r3, r5
 800e492:	429c      	cmp	r4, r3
 800e494:	d206      	bcs.n	800e4a4 <tcp_receive+0xb7c>
 800e496:	4b1e      	ldr	r3, [pc, #120]	@ (800e510 <tcp_receive+0xbe8>)
 800e498:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 800e49c:	4922      	ldr	r1, [pc, #136]	@ (800e528 <tcp_receive+0xc00>)
 800e49e:	481e      	ldr	r0, [pc, #120]	@ (800e518 <tcp_receive+0xbf0>)
 800e4a0:	f004 fe72 	bl	8013188 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	891b      	ldrh	r3, [r3, #8]
 800e4a8:	461c      	mov	r4, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	68db      	ldr	r3, [r3, #12]
 800e4ae:	899b      	ldrh	r3, [r3, #12]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fb fb70 	bl	8009b98 <lwip_htons>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f003 0303 	and.w	r3, r3, #3
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <tcp_receive+0xb9e>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e000      	b.n	800e4c8 <tcp_receive+0xba0>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	1919      	adds	r1, r3, r4
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e4ce:	b28b      	uxth	r3, r1
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fd f97f 	bl	800b7dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	891b      	ldrh	r3, [r3, #8]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d028      	beq.n	800e53a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e4e8:	4b0d      	ldr	r3, [pc, #52]	@ (800e520 <tcp_receive+0xbf8>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01d      	beq.n	800e52c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 800e4f0:	4b0b      	ldr	r3, [pc, #44]	@ (800e520 <tcp_receive+0xbf8>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f7fc fd28 	bl	800af50 <pbuf_cat>
 800e500:	e018      	b.n	800e534 <tcp_receive+0xc0c>
 800e502:	bf00      	nop
 800e504:	200080ee 	.word	0x200080ee
 800e508:	200080e4 	.word	0x200080e4
 800e50c:	200080c4 	.word	0x200080c4
 800e510:	08015308 	.word	0x08015308
 800e514:	0801560c 	.word	0x0801560c
 800e518:	0801534c 	.word	0x0801534c
 800e51c:	08015648 	.word	0x08015648
 800e520:	200080f4 	.word	0x200080f4
 800e524:	200080f1 	.word	0x200080f1
 800e528:	08015668 	.word	0x08015668
            } else {
              recv_data = cseg->p;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	4a71      	ldr	r2, [pc, #452]	@ (800e6f8 <tcp_receive+0xdd0>)
 800e532:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	899b      	ldrh	r3, [r3, #12]
 800e540:	b29b      	uxth	r3, r3
 800e542:	4618      	mov	r0, r3
 800e544:	f7fb fb28 	bl	8009b98 <lwip_htons>
 800e548:	4603      	mov	r3, r0
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00d      	beq.n	800e56e <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e552:	4b6a      	ldr	r3, [pc, #424]	@ (800e6fc <tcp_receive+0xdd4>)
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	f043 0320 	orr.w	r3, r3, #32
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	4b67      	ldr	r3, [pc, #412]	@ (800e6fc <tcp_receive+0xdd4>)
 800e55e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	7d1b      	ldrb	r3, [r3, #20]
 800e564:	2b04      	cmp	r3, #4
 800e566:	d102      	bne.n	800e56e <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2207      	movs	r2, #7
 800e56c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f7fd fd7e 	bl	800c078 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e580:	2b00      	cmp	r3, #0
 800e582:	d008      	beq.n	800e596 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800e590:	429a      	cmp	r2, r3
 800e592:	f43f af47 	beq.w	800e424 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7e9b      	ldrb	r3, [r3, #26]
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00e      	beq.n	800e5c0 <tcp_receive+0xc98>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7e9b      	ldrb	r3, [r3, #26]
 800e5a6:	f023 0301 	bic.w	r3, r3, #1
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	769a      	strb	r2, [r3, #26]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	7e9b      	ldrb	r3, [r3, #26]
 800e5b4:	f043 0302 	orr.w	r3, r3, #2
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5be:	e181      	b.n	800e8c4 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	7e9b      	ldrb	r3, [r3, #26]
 800e5c4:	f043 0301 	orr.w	r3, r3, #1
 800e5c8:	b2da      	uxtb	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e5ce:	e179      	b.n	800e8c4 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fc8f 	bl	800eef4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d106      	bne.n	800e5ec <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e5de:	4848      	ldr	r0, [pc, #288]	@ (800e700 <tcp_receive+0xdd8>)
 800e5e0:	f7fd fd62 	bl	800c0a8 <tcp_seg_copy>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 800e5ea:	e16b      	b.n	800e8c4 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e5f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e5f6:	e150      	b.n	800e89a <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 800e5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5fa:	68db      	ldr	r3, [r3, #12]
 800e5fc:	685a      	ldr	r2, [r3, #4]
 800e5fe:	4b41      	ldr	r3, [pc, #260]	@ (800e704 <tcp_receive+0xddc>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	429a      	cmp	r2, r3
 800e604:	d11d      	bne.n	800e642 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e606:	4b3e      	ldr	r3, [pc, #248]	@ (800e700 <tcp_receive+0xdd8>)
 800e608:	891a      	ldrh	r2, [r3, #8]
 800e60a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60c:	891b      	ldrh	r3, [r3, #8]
 800e60e:	429a      	cmp	r2, r3
 800e610:	f240 8148 	bls.w	800e8a4 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800e614:	483a      	ldr	r0, [pc, #232]	@ (800e700 <tcp_receive+0xdd8>)
 800e616:	f7fd fd47 	bl	800c0a8 <tcp_seg_copy>
 800e61a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f000 8142 	beq.w	800e8a8 <tcp_receive+0xf80>
                  if (prev != NULL) {
 800e624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <tcp_receive+0xd0a>
                    prev->next = cseg;
 800e62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	e002      	b.n	800e638 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	68fa      	ldr	r2, [r7, #12]
 800e636:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7ff f8fe 	bl	800d83c <tcp_oos_insert_segment>
                }
                break;
 800e640:	e132      	b.n	800e8a8 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e644:	2b00      	cmp	r3, #0
 800e646:	d117      	bne.n	800e678 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e648:	4b2e      	ldr	r3, [pc, #184]	@ (800e704 <tcp_receive+0xddc>)
 800e64a:	681a      	ldr	r2, [r3, #0]
 800e64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64e:	68db      	ldr	r3, [r3, #12]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	da57      	bge.n	800e708 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800e658:	4829      	ldr	r0, [pc, #164]	@ (800e700 <tcp_receive+0xdd8>)
 800e65a:	f7fd fd25 	bl	800c0a8 <tcp_seg_copy>
 800e65e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 8122 	beq.w	800e8ac <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 800e66e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f7ff f8e3 	bl	800d83c <tcp_oos_insert_segment>
                  }
                  break;
 800e676:	e119      	b.n	800e8ac <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800e678:	4b22      	ldr	r3, [pc, #136]	@ (800e704 <tcp_receive+0xddc>)
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	1ad3      	subs	r3, r2, r3
 800e684:	3b01      	subs	r3, #1
 800e686:	2b00      	cmp	r3, #0
 800e688:	db3e      	blt.n	800e708 <tcp_receive+0xde0>
 800e68a:	4b1e      	ldr	r3, [pc, #120]	@ (800e704 <tcp_receive+0xddc>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	3301      	adds	r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	dc35      	bgt.n	800e708 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800e69c:	4818      	ldr	r0, [pc, #96]	@ (800e700 <tcp_receive+0xdd8>)
 800e69e:	f7fd fd03 	bl	800c0a8 <tcp_seg_copy>
 800e6a2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 8102 	beq.w	800e8b0 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e6b4:	8912      	ldrh	r2, [r2, #8]
 800e6b6:	441a      	add	r2, r3
 800e6b8:	4b12      	ldr	r3, [pc, #72]	@ (800e704 <tcp_receive+0xddc>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	dd12      	ble.n	800e6e8 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e6c2:	4b10      	ldr	r3, [pc, #64]	@ (800e704 <tcp_receive+0xddc>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6da:	685a      	ldr	r2, [r3, #4]
 800e6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6de:	891b      	ldrh	r3, [r3, #8]
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	f7fc f9f4 	bl	800aad0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e6e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7ff f8a3 	bl	800d83c <tcp_oos_insert_segment>
                  }
                  break;
 800e6f6:	e0db      	b.n	800e8b0 <tcp_receive+0xf88>
 800e6f8:	200080f4 	.word	0x200080f4
 800e6fc:	200080f1 	.word	0x200080f1
 800e700:	200080c4 	.word	0x200080c4
 800e704:	200080e4 	.word	0x200080e4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f040 80bf 	bne.w	800e890 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e712:	4b7c      	ldr	r3, [pc, #496]	@ (800e904 <tcp_receive+0xfdc>)
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f340 80b6 	ble.w	800e890 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	899b      	ldrh	r3, [r3, #12]
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fb fa33 	bl	8009b98 <lwip_htons>
 800e732:	4603      	mov	r3, r0
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	2b00      	cmp	r3, #0
 800e73a:	f040 80bb 	bne.w	800e8b4 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e73e:	4872      	ldr	r0, [pc, #456]	@ (800e908 <tcp_receive+0xfe0>)
 800e740:	f7fd fcb2 	bl	800c0a8 <tcp_seg_copy>
 800e744:	4602      	mov	r2, r0
 800e746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e748:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e74a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f000 80b2 	beq.w	800e8b8 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e756:	68db      	ldr	r3, [r3, #12]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e75c:	8912      	ldrh	r2, [r2, #8]
 800e75e:	441a      	add	r2, r3
 800e760:	4b68      	ldr	r3, [pc, #416]	@ (800e904 <tcp_receive+0xfdc>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	dd12      	ble.n	800e790 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e76a:	4b66      	ldr	r3, [pc, #408]	@ (800e904 <tcp_receive+0xfdc>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	b29a      	uxth	r2, r3
 800e770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	b29b      	uxth	r3, r3
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e77e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e786:	891b      	ldrh	r3, [r3, #8]
 800e788:	4619      	mov	r1, r3
 800e78a:	4610      	mov	r0, r2
 800e78c:	f7fc f9a0 	bl	800aad0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e790:	4b5e      	ldr	r3, [pc, #376]	@ (800e90c <tcp_receive+0xfe4>)
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	461a      	mov	r2, r3
 800e796:	4b5b      	ldr	r3, [pc, #364]	@ (800e904 <tcp_receive+0xfdc>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	441a      	add	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e7a4:	440b      	add	r3, r1
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	f340 8085 	ble.w	800e8b8 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e7ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	899b      	ldrh	r3, [r3, #12]
 800e7b6:	b29b      	uxth	r3, r3
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7fb f9ed 	bl	8009b98 <lwip_htons>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d01e      	beq.n	800e806 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e7c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	899b      	ldrh	r3, [r3, #12]
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e7d6:	b29c      	uxth	r4, r3
 800e7d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	899b      	ldrh	r3, [r3, #12]
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fb f9d8 	bl	8009b98 <lwip_htons>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fb f9d1 	bl	8009b98 <lwip_htons>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	68db      	ldr	r3, [r3, #12]
 800e800:	4322      	orrs	r2, r4
 800e802:	b292      	uxth	r2, r2
 800e804:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e810:	4413      	add	r3, r2
 800e812:	b299      	uxth	r1, r3
 800e814:	4b3b      	ldr	r3, [pc, #236]	@ (800e904 <tcp_receive+0xfdc>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	b29a      	uxth	r2, r3
 800e81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	1a8a      	subs	r2, r1, r2
 800e820:	b292      	uxth	r2, r2
 800e822:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	891b      	ldrh	r3, [r3, #8]
 800e830:	4619      	mov	r1, r3
 800e832:	4610      	mov	r0, r2
 800e834:	f7fc f94c 	bl	800aad0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	891c      	ldrh	r4, [r3, #8]
 800e83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	899b      	ldrh	r3, [r3, #12]
 800e846:	b29b      	uxth	r3, r3
 800e848:	4618      	mov	r0, r3
 800e84a:	f7fb f9a5 	bl	8009b98 <lwip_htons>
 800e84e:	4603      	mov	r3, r0
 800e850:	f003 0303 	and.w	r3, r3, #3
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <tcp_receive+0xf34>
 800e858:	2301      	movs	r3, #1
 800e85a:	e000      	b.n	800e85e <tcp_receive+0xf36>
 800e85c:	2300      	movs	r3, #0
 800e85e:	4423      	add	r3, r4
 800e860:	b29a      	uxth	r2, r3
 800e862:	4b2a      	ldr	r3, [pc, #168]	@ (800e90c <tcp_receive+0xfe4>)
 800e864:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e866:	4b29      	ldr	r3, [pc, #164]	@ (800e90c <tcp_receive+0xfe4>)
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	461a      	mov	r2, r3
 800e86c:	4b25      	ldr	r3, [pc, #148]	@ (800e904 <tcp_receive+0xfdc>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	441a      	add	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e87a:	440b      	add	r3, r1
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d01b      	beq.n	800e8b8 <tcp_receive+0xf90>
 800e880:	4b23      	ldr	r3, [pc, #140]	@ (800e910 <tcp_receive+0xfe8>)
 800e882:	f240 627a 	movw	r2, #1658	@ 0x67a
 800e886:	4923      	ldr	r1, [pc, #140]	@ (800e914 <tcp_receive+0xfec>)
 800e888:	4823      	ldr	r0, [pc, #140]	@ (800e918 <tcp_receive+0xff0>)
 800e88a:	f004 fc7d 	bl	8013188 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e88e:	e013      	b.n	800e8b8 <tcp_receive+0xf90>
              }
            }
            prev = next;
 800e890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e892:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f47f aeab 	bne.w	800e5f8 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 800e8a2:	e00f      	b.n	800e8c4 <tcp_receive+0xf9c>
                break;
 800e8a4:	bf00      	nop
 800e8a6:	e00d      	b.n	800e8c4 <tcp_receive+0xf9c>
                break;
 800e8a8:	bf00      	nop
 800e8aa:	e00b      	b.n	800e8c4 <tcp_receive+0xf9c>
                  break;
 800e8ac:	bf00      	nop
 800e8ae:	e009      	b.n	800e8c4 <tcp_receive+0xf9c>
                  break;
 800e8b0:	bf00      	nop
 800e8b2:	e007      	b.n	800e8c4 <tcp_receive+0xf9c>
                  break;
 800e8b4:	bf00      	nop
 800e8b6:	e005      	b.n	800e8c4 <tcp_receive+0xf9c>
                break;
 800e8b8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800e8ba:	e003      	b.n	800e8c4 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fb19 	bl	800eef4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8c2:	e01a      	b.n	800e8fa <tcp_receive+0xfd2>
 800e8c4:	e019      	b.n	800e8fa <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800e904 <tcp_receive+0xfdc>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	db0a      	blt.n	800e8ea <tcp_receive+0xfc2>
 800e8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800e904 <tcp_receive+0xfdc>)
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e8e0:	440b      	add	r3, r1
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	dd07      	ble.n	800e8fa <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	7e9b      	ldrb	r3, [r3, #26]
 800e8ee:	f043 0302 	orr.w	r3, r3, #2
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800e8f8:	e7ff      	b.n	800e8fa <tcp_receive+0xfd2>
 800e8fa:	bf00      	nop
 800e8fc:	3734      	adds	r7, #52	@ 0x34
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e902:	bf00      	nop
 800e904:	200080e4 	.word	0x200080e4
 800e908:	200080c4 	.word	0x200080c4
 800e90c:	200080ee 	.word	0x200080ee
 800e910:	08015308 	.word	0x08015308
 800e914:	080155d4 	.word	0x080155d4
 800e918:	0801534c 	.word	0x0801534c

0800e91c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800e922:	4b17      	ldr	r3, [pc, #92]	@ (800e980 <tcp_getoptbyte+0x64>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d005      	beq.n	800e936 <tcp_getoptbyte+0x1a>
 800e92a:	4b16      	ldr	r3, [pc, #88]	@ (800e984 <tcp_getoptbyte+0x68>)
 800e92c:	881a      	ldrh	r2, [r3, #0]
 800e92e:	4b16      	ldr	r3, [pc, #88]	@ (800e988 <tcp_getoptbyte+0x6c>)
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	d20e      	bcs.n	800e954 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800e936:	4b15      	ldr	r3, [pc, #84]	@ (800e98c <tcp_getoptbyte+0x70>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3314      	adds	r3, #20
 800e93c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800e93e:	4b11      	ldr	r3, [pc, #68]	@ (800e984 <tcp_getoptbyte+0x68>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	1c5a      	adds	r2, r3, #1
 800e944:	b291      	uxth	r1, r2
 800e946:	4a0f      	ldr	r2, [pc, #60]	@ (800e984 <tcp_getoptbyte+0x68>)
 800e948:	8011      	strh	r1, [r2, #0]
 800e94a:	461a      	mov	r2, r3
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	4413      	add	r3, r2
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	e010      	b.n	800e976 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800e954:	4b0b      	ldr	r3, [pc, #44]	@ (800e984 <tcp_getoptbyte+0x68>)
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	b291      	uxth	r1, r2
 800e95c:	4a09      	ldr	r2, [pc, #36]	@ (800e984 <tcp_getoptbyte+0x68>)
 800e95e:	8011      	strh	r1, [r2, #0]
 800e960:	b2da      	uxtb	r2, r3
 800e962:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <tcp_getoptbyte+0x6c>)
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800e96c:	4b04      	ldr	r3, [pc, #16]	@ (800e980 <tcp_getoptbyte+0x64>)
 800e96e:	681a      	ldr	r2, [r3, #0]
 800e970:	79fb      	ldrb	r3, [r7, #7]
 800e972:	4413      	add	r3, r2
 800e974:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e976:	4618      	mov	r0, r3
 800e978:	370c      	adds	r7, #12
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bc80      	pop	{r7}
 800e97e:	4770      	bx	lr
 800e980:	200080dc 	.word	0x200080dc
 800e984:	200080e0 	.word	0x200080e0
 800e988:	200080da 	.word	0x200080da
 800e98c:	200080d4 	.word	0x200080d4

0800e990 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e998:	4b2e      	ldr	r3, [pc, #184]	@ (800ea54 <tcp_parseopt+0xc4>)
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d056      	beq.n	800ea4e <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e9a0:	4b2d      	ldr	r3, [pc, #180]	@ (800ea58 <tcp_parseopt+0xc8>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	801a      	strh	r2, [r3, #0]
 800e9a6:	e046      	b.n	800ea36 <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 800e9a8:	f7ff ffb8 	bl	800e91c <tcp_getoptbyte>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d006      	beq.n	800e9c4 <tcp_parseopt+0x34>
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	dc2a      	bgt.n	800ea10 <tcp_parseopt+0x80>
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d042      	beq.n	800ea44 <tcp_parseopt+0xb4>
 800e9be:	2b01      	cmp	r3, #1
 800e9c0:	d038      	beq.n	800ea34 <tcp_parseopt+0xa4>
 800e9c2:	e025      	b.n	800ea10 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e9c4:	f7ff ffaa 	bl	800e91c <tcp_getoptbyte>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	d13c      	bne.n	800ea48 <tcp_parseopt+0xb8>
 800e9ce:	4b22      	ldr	r3, [pc, #136]	@ (800ea58 <tcp_parseopt+0xc8>)
 800e9d0:	881b      	ldrh	r3, [r3, #0]
 800e9d2:	3301      	adds	r3, #1
 800e9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800ea54 <tcp_parseopt+0xc4>)
 800e9d6:	8812      	ldrh	r2, [r2, #0]
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	da35      	bge.n	800ea48 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800e9dc:	f7ff ff9e 	bl	800e91c <tcp_getoptbyte>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	021b      	lsls	r3, r3, #8
 800e9e4:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800e9e6:	f7ff ff99 	bl	800e91c <tcp_getoptbyte>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	89bb      	ldrh	r3, [r7, #12]
 800e9f0:	4313      	orrs	r3, r2
 800e9f2:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e9f4:	89bb      	ldrh	r3, [r7, #12]
 800e9f6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e9fa:	d804      	bhi.n	800ea06 <tcp_parseopt+0x76>
 800e9fc:	89bb      	ldrh	r3, [r7, #12]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <tcp_parseopt+0x76>
 800ea02:	89ba      	ldrh	r2, [r7, #12]
 800ea04:	e001      	b.n	800ea0a <tcp_parseopt+0x7a>
 800ea06:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 800ea0e:	e012      	b.n	800ea36 <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800ea10:	f7ff ff84 	bl	800e91c <tcp_getoptbyte>
 800ea14:	4603      	mov	r3, r0
 800ea16:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800ea18:	7afb      	ldrb	r3, [r7, #11]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d916      	bls.n	800ea4c <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800ea1e:	7afb      	ldrb	r3, [r7, #11]
 800ea20:	b29a      	uxth	r2, r3
 800ea22:	4b0d      	ldr	r3, [pc, #52]	@ (800ea58 <tcp_parseopt+0xc8>)
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	4413      	add	r3, r2
 800ea28:	b29b      	uxth	r3, r3
 800ea2a:	3b02      	subs	r3, #2
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ea58 <tcp_parseopt+0xc8>)
 800ea30:	801a      	strh	r2, [r3, #0]
 800ea32:	e000      	b.n	800ea36 <tcp_parseopt+0xa6>
        break;
 800ea34:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ea36:	4b08      	ldr	r3, [pc, #32]	@ (800ea58 <tcp_parseopt+0xc8>)
 800ea38:	881a      	ldrh	r2, [r3, #0]
 800ea3a:	4b06      	ldr	r3, [pc, #24]	@ (800ea54 <tcp_parseopt+0xc4>)
 800ea3c:	881b      	ldrh	r3, [r3, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d3b2      	bcc.n	800e9a8 <tcp_parseopt+0x18>
 800ea42:	e004      	b.n	800ea4e <tcp_parseopt+0xbe>
        return;
 800ea44:	bf00      	nop
 800ea46:	e002      	b.n	800ea4e <tcp_parseopt+0xbe>
          return;
 800ea48:	bf00      	nop
 800ea4a:	e000      	b.n	800ea4e <tcp_parseopt+0xbe>
          return;
 800ea4c:	bf00      	nop
      }
    }
  }
}
 800ea4e:	3710      	adds	r7, #16
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	200080d8 	.word	0x200080d8
 800ea58:	200080e0 	.word	0x200080e0

0800ea5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ea60:	4b05      	ldr	r3, [pc, #20]	@ (800ea78 <tcp_trigger_input_pcb_close+0x1c>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f043 0310 	orr.w	r3, r3, #16
 800ea68:	b2da      	uxtb	r2, r3
 800ea6a:	4b03      	ldr	r3, [pc, #12]	@ (800ea78 <tcp_trigger_input_pcb_close+0x1c>)
 800ea6c:	701a      	strb	r2, [r3, #0]
}
 800ea6e:	bf00      	nop
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bc80      	pop	{r7}
 800ea74:	4770      	bx	lr
 800ea76:	bf00      	nop
 800ea78:	200080f1 	.word	0x200080f1

0800ea7c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b086      	sub	sp, #24
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	607b      	str	r3, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	817b      	strh	r3, [r7, #10]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ea8e:	897a      	ldrh	r2, [r7, #10]
 800ea90:	893b      	ldrh	r3, [r7, #8]
 800ea92:	4413      	add	r3, r2
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	3314      	adds	r3, #20
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	f7fb fe12 	bl	800a6c8 <pbuf_alloc>
 800eaa4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d056      	beq.n	800eb5a <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eaac:	897b      	ldrh	r3, [r7, #10]
 800eaae:	3313      	adds	r3, #19
 800eab0:	697a      	ldr	r2, [r7, #20]
 800eab2:	8952      	ldrh	r2, [r2, #10]
 800eab4:	4293      	cmp	r3, r2
 800eab6:	db05      	blt.n	800eac4 <tcp_output_alloc_header+0x48>
 800eab8:	4b2a      	ldr	r3, [pc, #168]	@ (800eb64 <tcp_output_alloc_header+0xe8>)
 800eaba:	2272      	movs	r2, #114	@ 0x72
 800eabc:	492a      	ldr	r1, [pc, #168]	@ (800eb68 <tcp_output_alloc_header+0xec>)
 800eabe:	482b      	ldr	r0, [pc, #172]	@ (800eb6c <tcp_output_alloc_header+0xf0>)
 800eac0:	f004 fb62 	bl	8013188 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	8adb      	ldrh	r3, [r3, #22]
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fb f862 	bl	8009b98 <lwip_htons>
 800ead4:	4603      	mov	r3, r0
 800ead6:	461a      	mov	r2, r3
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	8b1b      	ldrh	r3, [r3, #24]
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb f859 	bl	8009b98 <lwip_htons>
 800eae6:	4603      	mov	r3, r0
 800eae8:	461a      	mov	r2, r3
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f7fb f85a 	bl	8009bb2 <lwip_htonl>
 800eafe:	4602      	mov	r2, r0
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800eb04:	897b      	ldrh	r3, [r7, #10]
 800eb06:	089b      	lsrs	r3, r3, #2
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	3305      	adds	r3, #5
 800eb0c:	b29b      	uxth	r3, r3
 800eb0e:	031b      	lsls	r3, r3, #12
 800eb10:	b29b      	uxth	r3, r3
 800eb12:	f043 0310 	orr.w	r3, r3, #16
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fb f83d 	bl	8009b98 <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	461a      	mov	r2, r3
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7fb f834 	bl	8009b98 <lwip_htons>
 800eb30:	4603      	mov	r3, r0
 800eb32:	461a      	mov	r2, r3
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	741a      	strb	r2, [r3, #16]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2200      	movs	r2, #0
 800eb46:	749a      	strb	r2, [r3, #18]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800eb54:	441a      	add	r2, r3
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800eb5a:	697b      	ldr	r3, [r7, #20]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3718      	adds	r7, #24
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	08015690 	.word	0x08015690
 800eb68:	080156c4 	.word	0x080156c4
 800eb6c:	080156f4 	.word	0x080156f4

0800eb70 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800eb70:	b590      	push	{r4, r7, lr}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d02d      	beq.n	800ebdc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eb84:	60fb      	str	r3, [r7, #12]
 800eb86:	e002      	b.n	800eb8e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d1f8      	bne.n	800eb88 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	899b      	ldrh	r3, [r3, #12]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fa fffa 	bl	8009b98 <lwip_htons>
 800eba4:	4603      	mov	r3, r0
 800eba6:	f003 0307 	and.w	r3, r3, #7
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d116      	bne.n	800ebdc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	899b      	ldrh	r3, [r3, #12]
 800ebb4:	b29c      	uxth	r4, r3
 800ebb6:	2001      	movs	r0, #1
 800ebb8:	f7fa ffee 	bl	8009b98 <lwip_htons>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	4322      	orrs	r2, r4
 800ebc6:	b292      	uxth	r2, r2
 800ebc8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7e9b      	ldrb	r3, [r3, #26]
 800ebce:	f043 0320 	orr.w	r3, r3, #32
 800ebd2:	b2da      	uxtb	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e004      	b.n	800ebe6 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ebdc:	2101      	movs	r1, #1
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f88c 	bl	800ecfc <tcp_enqueue_flags>
 800ebe4:	4603      	mov	r3, r0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3714      	adds	r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd90      	pop	{r4, r7, pc}
	...

0800ebf0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	60f8      	str	r0, [r7, #12]
 800ebf8:	60b9      	str	r1, [r7, #8]
 800ebfa:	603b      	str	r3, [r7, #0]
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ec00:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	b2db      	uxtb	r3, r3
 800ec08:	f003 0304 	and.w	r3, r3, #4
 800ec0c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ec0e:	2003      	movs	r0, #3
 800ec10:	f7fb fb6a 	bl	800a2e8 <memp_malloc>
 800ec14:	6138      	str	r0, [r7, #16]
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d104      	bne.n	800ec26 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ec1c:	68b8      	ldr	r0, [r7, #8]
 800ec1e:	f7fc f8cb 	bl	800adb8 <pbuf_free>
    return NULL;
 800ec22:	2300      	movs	r3, #0
 800ec24:	e060      	b.n	800ece8 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800ec2c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2200      	movs	r2, #0
 800ec32:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	68ba      	ldr	r2, [r7, #8]
 800ec38:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	891a      	ldrh	r2, [r3, #8]
 800ec3e:	7dfb      	ldrb	r3, [r7, #23]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d205      	bcs.n	800ec52 <tcp_create_segment+0x62>
 800ec46:	4b2a      	ldr	r3, [pc, #168]	@ (800ecf0 <tcp_create_segment+0x100>)
 800ec48:	22ba      	movs	r2, #186	@ 0xba
 800ec4a:	492a      	ldr	r1, [pc, #168]	@ (800ecf4 <tcp_create_segment+0x104>)
 800ec4c:	482a      	ldr	r0, [pc, #168]	@ (800ecf8 <tcp_create_segment+0x108>)
 800ec4e:	f004 fa9b 	bl	8013188 <iprintf>
  seg->len = p->tot_len - optlen;
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	891a      	ldrh	r2, [r3, #8]
 800ec56:	7dfb      	ldrb	r3, [r7, #23]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800ec62:	2114      	movs	r1, #20
 800ec64:	68b8      	ldr	r0, [r7, #8]
 800ec66:	f7fc f883 	bl	800ad70 <pbuf_header>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d004      	beq.n	800ec7a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ec70:	6938      	ldr	r0, [r7, #16]
 800ec72:	f7fd fa01 	bl	800c078 <tcp_seg_free>
    return NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	e036      	b.n	800ece8 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	8ada      	ldrh	r2, [r3, #22]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	68dc      	ldr	r4, [r3, #12]
 800ec8c:	4610      	mov	r0, r2
 800ec8e:	f7fa ff83 	bl	8009b98 <lwip_htons>
 800ec92:	4603      	mov	r3, r0
 800ec94:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	8b1a      	ldrh	r2, [r3, #24]
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	68dc      	ldr	r4, [r3, #12]
 800ec9e:	4610      	mov	r0, r2
 800eca0:	f7fa ff7a 	bl	8009b98 <lwip_htons>
 800eca4:	4603      	mov	r3, r0
 800eca6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	68dc      	ldr	r4, [r3, #12]
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f7fa ff80 	bl	8009bb2 <lwip_htonl>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	089b      	lsrs	r3, r3, #2
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	3305      	adds	r3, #5
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	031b      	lsls	r3, r3, #12
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	68dc      	ldr	r4, [r3, #12]
 800ecd0:	4610      	mov	r0, r2
 800ecd2:	f7fa ff61 	bl	8009b98 <lwip_htons>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	749a      	strb	r2, [r3, #18]
 800ece2:	2200      	movs	r2, #0
 800ece4:	74da      	strb	r2, [r3, #19]
  return seg;
 800ece6:	693b      	ldr	r3, [r7, #16]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd90      	pop	{r4, r7, pc}
 800ecf0:	08015690 	.word	0x08015690
 800ecf4:	0801571c 	.word	0x0801571c
 800ecf8:	080156f4 	.word	0x080156f4

0800ecfc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b08a      	sub	sp, #40	@ 0x28
 800ed00:	af02      	add	r7, sp, #8
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ed10:	78fb      	ldrb	r3, [r7, #3]
 800ed12:	f003 0303 	and.w	r3, r3, #3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d106      	bne.n	800ed28 <tcp_enqueue_flags+0x2c>
 800ed1a:	4b6f      	ldr	r3, [pc, #444]	@ (800eed8 <tcp_enqueue_flags+0x1dc>)
 800ed1c:	f240 321a 	movw	r2, #794	@ 0x31a
 800ed20:	496e      	ldr	r1, [pc, #440]	@ (800eedc <tcp_enqueue_flags+0x1e0>)
 800ed22:	486f      	ldr	r0, [pc, #444]	@ (800eee0 <tcp_enqueue_flags+0x1e4>)
 800ed24:	f004 fa30 	bl	8013188 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ed2e:	2b08      	cmp	r3, #8
 800ed30:	d806      	bhi.n	800ed40 <tcp_enqueue_flags+0x44>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ed38:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d90e      	bls.n	800ed5e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800ed40:	78fb      	ldrb	r3, [r7, #3]
 800ed42:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d109      	bne.n	800ed5e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	7e9b      	ldrb	r3, [r3, #26]
 800ed4e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800ed58:	f04f 33ff 	mov.w	r3, #4294967295
 800ed5c:	e0b7      	b.n	800eece <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800ed5e:	78fb      	ldrb	r3, [r7, #3]
 800ed60:	f003 0302 	and.w	r3, r3, #2
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ed6c:	7ffb      	ldrb	r3, [r7, #31]
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	f003 0304 	and.w	r3, r3, #4
 800ed76:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ed78:	7dfb      	ldrb	r3, [r7, #23]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	4619      	mov	r1, r3
 800ed80:	2000      	movs	r0, #0
 800ed82:	f7fb fca1 	bl	800a6c8 <pbuf_alloc>
 800ed86:	6138      	str	r0, [r7, #16]
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d109      	bne.n	800eda2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	7e9b      	ldrb	r3, [r3, #26]
 800ed92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ed96:	b2da      	uxtb	r2, r3
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	e095      	b.n	800eece <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	895a      	ldrh	r2, [r3, #10]
 800eda6:	7dfb      	ldrb	r3, [r7, #23]
 800eda8:	b29b      	uxth	r3, r3
 800edaa:	429a      	cmp	r2, r3
 800edac:	d206      	bcs.n	800edbc <tcp_enqueue_flags+0xc0>
 800edae:	4b4a      	ldr	r3, [pc, #296]	@ (800eed8 <tcp_enqueue_flags+0x1dc>)
 800edb0:	f44f 7250 	mov.w	r2, #832	@ 0x340
 800edb4:	494b      	ldr	r1, [pc, #300]	@ (800eee4 <tcp_enqueue_flags+0x1e8>)
 800edb6:	484a      	ldr	r0, [pc, #296]	@ (800eee0 <tcp_enqueue_flags+0x1e4>)
 800edb8:	f004 f9e6 	bl	8013188 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800edc0:	78fa      	ldrb	r2, [r7, #3]
 800edc2:	7ffb      	ldrb	r3, [r7, #31]
 800edc4:	9300      	str	r3, [sp, #0]
 800edc6:	460b      	mov	r3, r1
 800edc8:	6939      	ldr	r1, [r7, #16]
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7ff ff10 	bl	800ebf0 <tcp_create_segment>
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d109      	bne.n	800edec <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7e9b      	ldrb	r3, [r3, #26]
 800eddc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295
 800edea:	e070      	b.n	800eece <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	f003 0303 	and.w	r3, r3, #3
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d006      	beq.n	800ee06 <tcp_enqueue_flags+0x10a>
 800edf8:	4b37      	ldr	r3, [pc, #220]	@ (800eed8 <tcp_enqueue_flags+0x1dc>)
 800edfa:	f240 3249 	movw	r2, #841	@ 0x349
 800edfe:	493a      	ldr	r1, [pc, #232]	@ (800eee8 <tcp_enqueue_flags+0x1ec>)
 800ee00:	4837      	ldr	r0, [pc, #220]	@ (800eee0 <tcp_enqueue_flags+0x1e4>)
 800ee02:	f004 f9c1 	bl	8013188 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	891b      	ldrh	r3, [r3, #8]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d006      	beq.n	800ee1c <tcp_enqueue_flags+0x120>
 800ee0e:	4b32      	ldr	r3, [pc, #200]	@ (800eed8 <tcp_enqueue_flags+0x1dc>)
 800ee10:	f240 324a 	movw	r2, #842	@ 0x34a
 800ee14:	4935      	ldr	r1, [pc, #212]	@ (800eeec <tcp_enqueue_flags+0x1f0>)
 800ee16:	4832      	ldr	r0, [pc, #200]	@ (800eee0 <tcp_enqueue_flags+0x1e4>)
 800ee18:	f004 f9b6 	bl	8013188 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d103      	bne.n	800ee2c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	669a      	str	r2, [r3, #104]	@ 0x68
 800ee2a:	e00d      	b.n	800ee48 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ee30:	61bb      	str	r3, [r7, #24]
 800ee32:	e002      	b.n	800ee3a <tcp_enqueue_flags+0x13e>
 800ee34:	69bb      	ldr	r3, [r7, #24]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	61bb      	str	r3, [r7, #24]
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d1f8      	bne.n	800ee34 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800ee42:	69bb      	ldr	r3, [r7, #24]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ee50:	78fb      	ldrb	r3, [r7, #3]
 800ee52:	f003 0302 	and.w	r3, r3, #2
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d104      	bne.n	800ee64 <tcp_enqueue_flags+0x168>
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	f003 0301 	and.w	r3, r3, #1
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d004      	beq.n	800ee6e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	f003 0301 	and.w	r3, r3, #1
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d006      	beq.n	800ee86 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	7e9b      	ldrb	r3, [r3, #26]
 800ee7c:	f043 0320 	orr.w	r3, r3, #32
 800ee80:	b2da      	uxtb	r2, r3
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fc f828 	bl	800aee0 <pbuf_clen>
 800ee90:	4603      	mov	r3, r0
 800ee92:	461a      	mov	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ee9a:	4413      	add	r3, r2
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d00e      	beq.n	800eecc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10a      	bne.n	800eecc <tcp_enqueue_flags+0x1d0>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d106      	bne.n	800eecc <tcp_enqueue_flags+0x1d0>
 800eebe:	4b06      	ldr	r3, [pc, #24]	@ (800eed8 <tcp_enqueue_flags+0x1dc>)
 800eec0:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800eec4:	490a      	ldr	r1, [pc, #40]	@ (800eef0 <tcp_enqueue_flags+0x1f4>)
 800eec6:	4806      	ldr	r0, [pc, #24]	@ (800eee0 <tcp_enqueue_flags+0x1e4>)
 800eec8:	f004 f95e 	bl	8013188 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3720      	adds	r7, #32
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	08015690 	.word	0x08015690
 800eedc:	08015994 	.word	0x08015994
 800eee0:	080156f4 	.word	0x080156f4
 800eee4:	080159ec 	.word	0x080159ec
 800eee8:	08015a28 	.word	0x08015a28
 800eeec:	08015a40 	.word	0x08015a40
 800eef0:	08015a6c 	.word	0x08015a6c

0800eef4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800eef4:	b590      	push	{r4, r7, lr}
 800eef6:	b08b      	sub	sp, #44	@ 0x2c
 800eef8:	af04      	add	r7, sp, #16
 800eefa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ef00:	7dbb      	ldrb	r3, [r7, #22]
 800ef02:	b29c      	uxth	r4, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fa fe52 	bl	8009bb2 <lwip_htonl>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	2200      	movs	r2, #0
 800ef12:	4621      	mov	r1, r4
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff fdb1 	bl	800ea7c <tcp_output_alloc_header>
 800ef1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ef1c:	693b      	ldr	r3, [r7, #16]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d109      	bne.n	800ef36 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	7e9b      	ldrb	r3, [r3, #26]
 800ef26:	f043 0303 	orr.w	r3, r3, #3
 800ef2a:	b2da      	uxtb	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ef30:	f06f 0301 	mvn.w	r3, #1
 800ef34:	e036      	b.n	800efa4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	3304      	adds	r3, #4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f002 fa38 	bl	80113b0 <ip4_route>
 800ef40:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800ef48:	23fc      	movs	r3, #252	@ 0xfc
 800ef4a:	75fb      	strb	r3, [r7, #23]
 800ef4c:	e012      	b.n	800ef74 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	1d18      	adds	r0, r3, #4
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	7a9c      	ldrb	r4, [r3, #10]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	7a5b      	ldrb	r3, [r3, #9]
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	9202      	str	r2, [sp, #8]
 800ef60:	2206      	movs	r2, #6
 800ef62:	9201      	str	r2, [sp, #4]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	4623      	mov	r3, r4
 800ef68:	4602      	mov	r2, r0
 800ef6a:	6938      	ldr	r0, [r7, #16]
 800ef6c:	f002 fbc8 	bl	8011700 <ip4_output_if>
 800ef70:	4603      	mov	r3, r0
 800ef72:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800ef74:	6938      	ldr	r0, [r7, #16]
 800ef76:	f7fb ff1f 	bl	800adb8 <pbuf_free>

  if (err != ERR_OK) {
 800ef7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d007      	beq.n	800ef92 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	7e9b      	ldrb	r3, [r3, #26]
 800ef86:	f043 0303 	orr.w	r3, r3, #3
 800ef8a:	b2da      	uxtb	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	769a      	strb	r2, [r3, #26]
 800ef90:	e006      	b.n	800efa0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	7e9b      	ldrb	r3, [r3, #26]
 800ef96:	f023 0303 	bic.w	r3, r3, #3
 800ef9a:	b2da      	uxtb	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800efa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	371c      	adds	r7, #28
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd90      	pop	{r4, r7, pc}

0800efac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800efac:	b5b0      	push	{r4, r5, r7, lr}
 800efae:	b08a      	sub	sp, #40	@ 0x28
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	7d1b      	ldrb	r3, [r3, #20]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d106      	bne.n	800efca <tcp_output+0x1e>
 800efbc:	4b99      	ldr	r3, [pc, #612]	@ (800f224 <tcp_output+0x278>)
 800efbe:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800efc2:	4999      	ldr	r1, [pc, #612]	@ (800f228 <tcp_output+0x27c>)
 800efc4:	4899      	ldr	r0, [pc, #612]	@ (800f22c <tcp_output+0x280>)
 800efc6:	f004 f8df 	bl	8013188 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800efca:	4b99      	ldr	r3, [pc, #612]	@ (800f230 <tcp_output+0x284>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d101      	bne.n	800efd8 <tcp_output+0x2c>
    return ERR_OK;
 800efd4:	2300      	movs	r3, #0
 800efd6:	e1cb      	b.n	800f370 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800efe4:	4293      	cmp	r3, r2
 800efe6:	bf28      	it	cs
 800efe8:	4613      	movcs	r3, r2
 800efea:	b29b      	uxth	r3, r3
 800efec:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800eff2:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	7e9b      	ldrb	r3, [r3, #26]
 800eff8:	f003 0302 	and.w	r3, r3, #2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d017      	beq.n	800f030 <tcp_output+0x84>
 800f000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00f      	beq.n	800f026 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800f006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fa fdd0 	bl	8009bb2 <lwip_htonl>
 800f012:	4602      	mov	r2, r0
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f018:	1ad3      	subs	r3, r2, r3
 800f01a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f01c:	8912      	ldrh	r2, [r2, #8]
 800f01e:	4413      	add	r3, r2
     (seg == NULL ||
 800f020:	69ba      	ldr	r2, [r7, #24]
 800f022:	429a      	cmp	r2, r3
 800f024:	d204      	bcs.n	800f030 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f7ff ff64 	bl	800eef4 <tcp_send_empty_ack>
 800f02c:	4603      	mov	r3, r0
 800f02e:	e19f      	b.n	800f370 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f034:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d007      	beq.n	800f04c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 800f03c:	e002      	b.n	800f044 <tcp_output+0x98>
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	623b      	str	r3, [r7, #32]
 800f044:	6a3b      	ldr	r3, [r7, #32]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1f8      	bne.n	800f03e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	3304      	adds	r3, #4
 800f050:	4618      	mov	r0, r3
 800f052:	f002 f9ad 	bl	80113b0 <ip4_route>
 800f056:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d102      	bne.n	800f064 <tcp_output+0xb8>
    return ERR_RTE;
 800f05e:	f06f 0303 	mvn.w	r3, #3
 800f062:	e185      	b.n	800f370 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d003      	beq.n	800f072 <tcp_output+0xc6>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d111      	bne.n	800f096 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d002      	beq.n	800f07e <tcp_output+0xd2>
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	3304      	adds	r3, #4
 800f07c:	e000      	b.n	800f080 <tcp_output+0xd4>
 800f07e:	2300      	movs	r3, #0
 800f080:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d102      	bne.n	800f08e <tcp_output+0xe2>
      return ERR_RTE;
 800f088:	f06f 0303 	mvn.w	r3, #3
 800f08c:	e170      	b.n	800f370 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800f096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f000 813f 	beq.w	800f31c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f09e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fa fd84 	bl	8009bb2 <lwip_htonl>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f0b4:	8912      	ldrh	r2, [r2, #8]
 800f0b6:	4413      	add	r3, r2
  if (seg != NULL &&
 800f0b8:	69ba      	ldr	r2, [r7, #24]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	f080 812e 	bcs.w	800f31c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f0c0:	69bb      	ldr	r3, [r7, #24]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 812a 	beq.w	800f31c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	f040 8122 	bne.w	800f31c <tcp_output+0x370>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f040 811d 	bne.w	800f31c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	f040 812c 	bne.w	800f346 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 800f0fe:	e122      	b.n	800f346 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	899b      	ldrh	r3, [r3, #12]
 800f106:	b29b      	uxth	r3, r3
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fa fd45 	bl	8009b98 <lwip_htons>
 800f10e:	4603      	mov	r3, r0
 800f110:	f003 0304 	and.w	r3, r3, #4
 800f114:	2b00      	cmp	r3, #0
 800f116:	d006      	beq.n	800f126 <tcp_output+0x17a>
 800f118:	4b42      	ldr	r3, [pc, #264]	@ (800f224 <tcp_output+0x278>)
 800f11a:	f240 4245 	movw	r2, #1093	@ 0x445
 800f11e:	4945      	ldr	r1, [pc, #276]	@ (800f234 <tcp_output+0x288>)
 800f120:	4842      	ldr	r0, [pc, #264]	@ (800f22c <tcp_output+0x280>)
 800f122:	f004 f831 	bl	8013188 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d01f      	beq.n	800f16e <tcp_output+0x1c2>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	7e9b      	ldrb	r3, [r3, #26]
 800f132:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800f136:	2b00      	cmp	r3, #0
 800f138:	d119      	bne.n	800f16e <tcp_output+0x1c2>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00b      	beq.n	800f15a <tcp_output+0x1ae>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d110      	bne.n	800f16e <tcp_output+0x1c2>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f150:	891a      	ldrh	r2, [r3, #8]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f156:	429a      	cmp	r2, r3
 800f158:	d209      	bcs.n	800f16e <tcp_output+0x1c2>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f160:	2b00      	cmp	r3, #0
 800f162:	d004      	beq.n	800f16e <tcp_output+0x1c2>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800f16a:	2b08      	cmp	r3, #8
 800f16c:	d901      	bls.n	800f172 <tcp_output+0x1c6>
 800f16e:	2301      	movs	r3, #1
 800f170:	e000      	b.n	800f174 <tcp_output+0x1c8>
 800f172:	2300      	movs	r3, #0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d106      	bne.n	800f186 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7e9b      	ldrb	r3, [r3, #26]
 800f17c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f180:	2b00      	cmp	r3, #0
 800f182:	f000 80e2 	beq.w	800f34a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	7d1b      	ldrb	r3, [r3, #20]
 800f18a:	2b02      	cmp	r3, #2
 800f18c:	d00d      	beq.n	800f1aa <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	899b      	ldrh	r3, [r3, #12]
 800f194:	b29c      	uxth	r4, r3
 800f196:	2010      	movs	r0, #16
 800f198:	f7fa fcfe 	bl	8009b98 <lwip_htons>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461a      	mov	r2, r3
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	4322      	orrs	r2, r4
 800f1a6:	b292      	uxth	r2, r2
 800f1a8:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800f1aa:	697a      	ldr	r2, [r7, #20]
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1b0:	f000 f8e2 	bl	800f378 <tcp_output_segment>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d009      	beq.n	800f1d4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	7e9b      	ldrb	r3, [r3, #26]
 800f1c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f1c8:	b2da      	uxtb	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	769a      	strb	r2, [r3, #26]
      return err;
 800f1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1d2:	e0cd      	b.n	800f370 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	7d1b      	ldrb	r3, [r3, #20]
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	d006      	beq.n	800f1f2 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	7e9b      	ldrb	r3, [r3, #26]
 800f1e8:	f023 0303 	bic.w	r3, r3, #3
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7fa fcda 	bl	8009bb2 <lwip_htonl>
 800f1fe:	4604      	mov	r4, r0
 800f200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f202:	891b      	ldrh	r3, [r3, #8]
 800f204:	461d      	mov	r5, r3
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	899b      	ldrh	r3, [r3, #12]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fa fcc2 	bl	8009b98 <lwip_htons>
 800f214:	4603      	mov	r3, r0
 800f216:	f003 0303 	and.w	r3, r3, #3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00c      	beq.n	800f238 <tcp_output+0x28c>
 800f21e:	2301      	movs	r3, #1
 800f220:	e00b      	b.n	800f23a <tcp_output+0x28e>
 800f222:	bf00      	nop
 800f224:	08015690 	.word	0x08015690
 800f228:	08015a94 	.word	0x08015a94
 800f22c:	080156f4 	.word	0x080156f4
 800f230:	200080f8 	.word	0x200080f8
 800f234:	08015abc 	.word	0x08015abc
 800f238:	2300      	movs	r3, #0
 800f23a:	442b      	add	r3, r5
 800f23c:	4423      	add	r3, r4
 800f23e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	1ad3      	subs	r3, r2, r3
 800f248:	2b00      	cmp	r3, #0
 800f24a:	da02      	bge.n	800f252 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f254:	891b      	ldrh	r3, [r3, #8]
 800f256:	461c      	mov	r4, r3
 800f258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	899b      	ldrh	r3, [r3, #12]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	4618      	mov	r0, r3
 800f262:	f7fa fc99 	bl	8009b98 <lwip_htons>
 800f266:	4603      	mov	r3, r0
 800f268:	f003 0303 	and.w	r3, r3, #3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <tcp_output+0x2c8>
 800f270:	2301      	movs	r3, #1
 800f272:	e000      	b.n	800f276 <tcp_output+0x2ca>
 800f274:	2300      	movs	r3, #0
 800f276:	4423      	add	r3, r4
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d049      	beq.n	800f310 <tcp_output+0x364>
      seg->next = NULL;
 800f27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f286:	2b00      	cmp	r3, #0
 800f288:	d105      	bne.n	800f296 <tcp_output+0x2ea>
        pcb->unacked = seg;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f28e:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 800f290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f292:	623b      	str	r3, [r7, #32]
 800f294:	e03f      	b.n	800f316 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f298:	68db      	ldr	r3, [r3, #12]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fa fc88 	bl	8009bb2 <lwip_htonl>
 800f2a2:	4604      	mov	r4, r0
 800f2a4:	6a3b      	ldr	r3, [r7, #32]
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fa fc81 	bl	8009bb2 <lwip_htonl>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	1ae3      	subs	r3, r4, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da24      	bge.n	800f302 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	336c      	adds	r3, #108	@ 0x6c
 800f2bc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f2be:	e002      	b.n	800f2c6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d011      	beq.n	800f2f2 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fa fc6b 	bl	8009bb2 <lwip_htonl>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f7fa fc64 	bl	8009bb2 <lwip_htonl>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	dbe6      	blt.n	800f2c0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2fe:	601a      	str	r2, [r3, #0]
 800f300:	e009      	b.n	800f316 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f306:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f308:	6a3b      	ldr	r3, [r7, #32]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	623b      	str	r3, [r7, #32]
 800f30e:	e002      	b.n	800f316 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f310:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f312:	f7fc feb1 	bl	800c078 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f31a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800f31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d015      	beq.n	800f34e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fa fc42 	bl	8009bb2 <lwip_htonl>
 800f32e:	4602      	mov	r2, r0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f338:	8912      	ldrh	r2, [r2, #8]
 800f33a:	4413      	add	r3, r2
  while (seg != NULL &&
 800f33c:	69ba      	ldr	r2, [r7, #24]
 800f33e:	429a      	cmp	r2, r3
 800f340:	f4bf aede 	bcs.w	800f100 <tcp_output+0x154>
  }
output_done:
 800f344:	e003      	b.n	800f34e <tcp_output+0x3a2>
    goto output_done;
 800f346:	bf00      	nop
 800f348:	e002      	b.n	800f350 <tcp_output+0x3a4>
      break;
 800f34a:	bf00      	nop
 800f34c:	e000      	b.n	800f350 <tcp_output+0x3a4>
output_done:
 800f34e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f354:	2b00      	cmp	r3, #0
 800f356:	d103      	bne.n	800f360 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7e9b      	ldrb	r3, [r3, #26]
 800f364:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3728      	adds	r7, #40	@ 0x28
 800f374:	46bd      	mov	sp, r7
 800f376:	bdb0      	pop	{r4, r5, r7, pc}

0800f378 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f378:	b5b0      	push	{r4, r5, r7, lr}
 800f37a:	b08c      	sub	sp, #48	@ 0x30
 800f37c:	af04      	add	r7, sp, #16
 800f37e:	60f8      	str	r0, [r7, #12]
 800f380:	60b9      	str	r1, [r7, #8]
 800f382:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	89db      	ldrh	r3, [r3, #14]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d001      	beq.n	800f392 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800f38e:	2300      	movs	r3, #0
 800f390:	e08a      	b.n	800f4a8 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68dc      	ldr	r4, [r3, #12]
 800f39a:	4610      	mov	r0, r2
 800f39c:	f7fa fc09 	bl	8009bb2 <lwip_htonl>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	68dc      	ldr	r4, [r3, #12]
 800f3ac:	4610      	mov	r0, r2
 800f3ae:	f7fa fbf3 	bl	8009b98 <lwip_htons>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f3be:	441a      	add	r2, r3
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	3314      	adds	r3, #20
 800f3ca:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	7a9b      	ldrb	r3, [r3, #10]
 800f3d0:	f003 0301 	and.w	r3, r3, #1
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d014      	beq.n	800f402 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4619      	mov	r1, r3
 800f3de:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800f3e2:	f7fd f8b1 	bl	800c548 <tcp_eff_send_mss_impl>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f3ea:	8b7b      	ldrh	r3, [r7, #26]
 800f3ec:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fa fbde 	bl	8009bb2 <lwip_htonl>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f3fc:	69fb      	ldr	r3, [r7, #28]
 800f3fe:	3304      	adds	r3, #4
 800f400:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f408:	2b00      	cmp	r3, #0
 800f40a:	da02      	bge.n	800f412 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2200      	movs	r2, #0
 800f410:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10c      	bne.n	800f434 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800f41a:	4b25      	ldr	r3, [pc, #148]	@ (800f4b0 <tcp_output_segment+0x138>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fa fbc2 	bl	8009bb2 <lwip_htonl>
 800f42e:	4602      	mov	r2, r0
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68da      	ldr	r2, [r3, #12]
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	685b      	ldr	r3, [r3, #4]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	1ad3      	subs	r3, r2, r3
 800f440:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	8959      	ldrh	r1, [r3, #10]
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	8b3a      	ldrh	r2, [r7, #24]
 800f44e:	1a8a      	subs	r2, r1, r2
 800f450:	b292      	uxth	r2, r2
 800f452:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	8919      	ldrh	r1, [r3, #8]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	8b3a      	ldrh	r2, [r7, #24]
 800f460:	1a8a      	subs	r2, r1, r2
 800f462:	b292      	uxth	r2, r2
 800f464:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	68fa      	ldr	r2, [r7, #12]
 800f46c:	68d2      	ldr	r2, [r2, #12]
 800f46e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	2200      	movs	r2, #0
 800f476:	741a      	strb	r2, [r3, #16]
 800f478:	2200      	movs	r2, #0
 800f47a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6858      	ldr	r0, [r3, #4]
 800f480:	68b9      	ldr	r1, [r7, #8]
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	1d1c      	adds	r4, r3, #4
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	7a9d      	ldrb	r5, [r3, #10]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	7a5b      	ldrb	r3, [r3, #9]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	9202      	str	r2, [sp, #8]
 800f492:	2206      	movs	r2, #6
 800f494:	9201      	str	r2, [sp, #4]
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	462b      	mov	r3, r5
 800f49a:	4622      	mov	r2, r4
 800f49c:	f002 f930 	bl	8011700 <ip4_output_if>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800f4a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3720      	adds	r7, #32
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f4b0:	200080ac 	.word	0x200080ac

0800f4b4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b08c      	sub	sp, #48	@ 0x30
 800f4b8:	af04      	add	r7, sp, #16
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
 800f4c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2114      	movs	r1, #20
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	f7fb f8fe 	bl	800a6c8 <pbuf_alloc>
 800f4cc:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d05b      	beq.n	800f58c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	895b      	ldrh	r3, [r3, #10]
 800f4d8:	2b13      	cmp	r3, #19
 800f4da:	d806      	bhi.n	800f4ea <tcp_rst+0x36>
 800f4dc:	4b2d      	ldr	r3, [pc, #180]	@ (800f594 <tcp_rst+0xe0>)
 800f4de:	f240 524c 	movw	r2, #1356	@ 0x54c
 800f4e2:	492d      	ldr	r1, [pc, #180]	@ (800f598 <tcp_rst+0xe4>)
 800f4e4:	482d      	ldr	r0, [pc, #180]	@ (800f59c <tcp_rst+0xe8>)
 800f4e6:	f003 fe4f 	bl	8013188 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800f4f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fa fb50 	bl	8009b98 <lwip_htons>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	69bb      	ldr	r3, [r7, #24]
 800f4fe:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800f500:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f502:	4618      	mov	r0, r3
 800f504:	f7fa fb48 	bl	8009b98 <lwip_htons>
 800f508:	4603      	mov	r3, r0
 800f50a:	461a      	mov	r2, r3
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7fa fb4e 	bl	8009bb2 <lwip_htonl>
 800f516:	4602      	mov	r2, r0
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800f51c:	68b8      	ldr	r0, [r7, #8]
 800f51e:	f7fa fb48 	bl	8009bb2 <lwip_htonl>
 800f522:	4602      	mov	r2, r0
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800f528:	f245 0014 	movw	r0, #20500	@ 0x5014
 800f52c:	f7fa fb34 	bl	8009b98 <lwip_htons>
 800f530:	4603      	mov	r3, r0
 800f532:	461a      	mov	r2, r3
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800f538:	69bb      	ldr	r3, [r7, #24]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f042 0208 	orr.w	r2, r2, #8
 800f540:	739a      	strb	r2, [r3, #14]
 800f542:	2200      	movs	r2, #0
 800f544:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800f548:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	2200      	movs	r2, #0
 800f54e:	741a      	strb	r2, [r3, #16]
 800f550:	2200      	movs	r2, #0
 800f552:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	2200      	movs	r2, #0
 800f558:	749a      	strb	r2, [r3, #18]
 800f55a:	2200      	movs	r2, #0
 800f55c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800f55e:	6838      	ldr	r0, [r7, #0]
 800f560:	f001 ff26 	bl	80113b0 <ip4_route>
 800f564:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	9302      	str	r3, [sp, #8]
 800f570:	2306      	movs	r3, #6
 800f572:	9301      	str	r3, [sp, #4]
 800f574:	2300      	movs	r3, #0
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	23ff      	movs	r3, #255	@ 0xff
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	6879      	ldr	r1, [r7, #4]
 800f57e:	69f8      	ldr	r0, [r7, #28]
 800f580:	f002 f8be 	bl	8011700 <ip4_output_if>
  }
  pbuf_free(p);
 800f584:	69f8      	ldr	r0, [r7, #28]
 800f586:	f7fb fc17 	bl	800adb8 <pbuf_free>
 800f58a:	e000      	b.n	800f58e <tcp_rst+0xda>
    return;
 800f58c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f58e:	3720      	adds	r7, #32
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	08015690 	.word	0x08015690
 800f598:	080156c4 	.word	0x080156c4
 800f59c:	080156f4 	.word	0x080156f4

0800f5a0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b084      	sub	sp, #16
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d029      	beq.n	800f604 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	e002      	b.n	800f5be <tcp_rexmit_rto+0x1e>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	60fb      	str	r3, [r7, #12]
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d1f8      	bne.n	800f5b8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f5e2:	2bff      	cmp	r3, #255	@ 0xff
 800f5e4:	d007      	beq.n	800f5f6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	b2da      	uxtb	r2, r3
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff fcd5 	bl	800efac <tcp_output>
 800f602:	e000      	b.n	800f606 <tcp_rexmit_rto+0x66>
    return;
 800f604:	bf00      	nop
}
 800f606:	3710      	adds	r7, #16
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}

0800f60c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b085      	sub	sp, #20
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d043      	beq.n	800f6a4 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f620:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	3368      	adds	r3, #104	@ 0x68
 800f62e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f630:	e002      	b.n	800f638 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d011      	beq.n	800f664 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fa fab2 	bl	8009bb2 <lwip_htonl>
 800f64e:	4604      	mov	r4, r0
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	f7fa faab 	bl	8009bb2 <lwip_htonl>
 800f65c:	4603      	mov	r3, r0
 800f65e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f660:	2b00      	cmp	r3, #0
 800f662:	dbe6      	blt.n	800f632 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d103      	bne.n	800f682 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f688:	2bff      	cmp	r3, #255	@ 0xff
 800f68a:	d007      	beq.n	800f69c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f692:	3301      	adds	r3, #1
 800f694:	b2da      	uxtb	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800f6a2:	e000      	b.n	800f6a6 <tcp_rexmit+0x9a>
    return;
 800f6a4:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd90      	pop	{r4, r7, pc}

0800f6ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d041      	beq.n	800f740 <tcp_rexmit_fast+0x94>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	7e9b      	ldrb	r3, [r3, #26]
 800f6c0:	f003 0304 	and.w	r3, r3, #4
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d13b      	bne.n	800f740 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f7ff ff9f 	bl	800f60c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	bf28      	it	cs
 800f6de:	4613      	movcs	r3, r2
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	0fda      	lsrs	r2, r3, #31
 800f6e4:	4413      	add	r3, r2
 800f6e6:	105b      	asrs	r3, r3, #1
 800f6e8:	b29a      	uxth	r2, r3
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f6fc:	005b      	lsls	r3, r3, #1
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d206      	bcs.n	800f710 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	b29a      	uxth	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f71a:	4619      	mov	r1, r3
 800f71c:	0049      	lsls	r1, r1, #1
 800f71e:	440b      	add	r3, r1
 800f720:	b29b      	uxth	r3, r3
 800f722:	4413      	add	r3, r2
 800f724:	b29a      	uxth	r2, r3
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	7e9b      	ldrb	r3, [r3, #26]
 800f730:	f043 0304 	orr.w	r3, r3, #4
 800f734:	b2da      	uxtb	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2200      	movs	r2, #0
 800f73e:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 800f740:	bf00      	nop
 800f742:	3708      	adds	r7, #8
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b08a      	sub	sp, #40	@ 0x28
 800f74c:	af04      	add	r7, sp, #16
 800f74e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f754:	3b01      	subs	r3, #1
 800f756:	4618      	mov	r0, r3
 800f758:	f7fa fa2b 	bl	8009bb2 <lwip_htonl>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2200      	movs	r2, #0
 800f760:	2100      	movs	r1, #0
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7ff f98a 	bl	800ea7c <tcp_output_alloc_header>
 800f768:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f770:	f04f 33ff 	mov.w	r3, #4294967295
 800f774:	e021      	b.n	800f7ba <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3304      	adds	r3, #4
 800f77a:	4618      	mov	r0, r3
 800f77c:	f001 fe18 	bl	80113b0 <ip4_route>
 800f780:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d102      	bne.n	800f78e <tcp_keepalive+0x46>
    err = ERR_RTE;
 800f788:	23fc      	movs	r3, #252	@ 0xfc
 800f78a:	75fb      	strb	r3, [r7, #23]
 800f78c:	e010      	b.n	800f7b0 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	1d1a      	adds	r2, r3, #4
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	7a98      	ldrb	r0, [r3, #10]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	9302      	str	r3, [sp, #8]
 800f79c:	2306      	movs	r3, #6
 800f79e:	9301      	str	r3, [sp, #4]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	6938      	ldr	r0, [r7, #16]
 800f7a8:	f001 ffaa 	bl	8011700 <ip4_output_if>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f7b0:	6938      	ldr	r0, [r7, #16]
 800f7b2:	f7fb fb01 	bl	800adb8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f7b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f7c2:	b590      	push	{r4, r7, lr}
 800f7c4:	b08f      	sub	sp, #60	@ 0x3c
 800f7c6:	af04      	add	r7, sp, #16
 800f7c8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7ce:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d102      	bne.n	800f7dc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7da:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800f7dc:	6a3b      	ldr	r3, [r7, #32]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d101      	bne.n	800f7e6 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	e085      	b.n	800f8f2 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f7e6:	6a3b      	ldr	r3, [r7, #32]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	899b      	ldrh	r3, [r3, #12]
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fa f9d2 	bl	8009b98 <lwip_htons>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d005      	beq.n	800f80a <tcp_zero_window_probe+0x48>
 800f7fe:	6a3b      	ldr	r3, [r7, #32]
 800f800:	891b      	ldrh	r3, [r3, #8]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <tcp_zero_window_probe+0x48>
 800f806:	2301      	movs	r3, #1
 800f808:	e000      	b.n	800f80c <tcp_zero_window_probe+0x4a>
 800f80a:	2300      	movs	r3, #0
 800f80c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f80e:	7ffb      	ldrb	r3, [r7, #31]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bf0c      	ite	eq
 800f814:	2301      	moveq	r3, #1
 800f816:	2300      	movne	r3, #0
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	685b      	ldr	r3, [r3, #4]
 800f822:	8bba      	ldrh	r2, [r7, #28]
 800f824:	2100      	movs	r1, #0
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff f928 	bl	800ea7c <tcp_output_alloc_header>
 800f82c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d102      	bne.n	800f83a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f834:	f04f 33ff 	mov.w	r3, #4294967295
 800f838:	e05b      	b.n	800f8f2 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f840:	7ffb      	ldrb	r3, [r7, #31]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00e      	beq.n	800f864 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	899b      	ldrh	r3, [r3, #12]
 800f84a:	b29b      	uxth	r3, r3
 800f84c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f850:	b29c      	uxth	r4, r3
 800f852:	2011      	movs	r0, #17
 800f854:	f7fa f9a0 	bl	8009b98 <lwip_htons>
 800f858:	4603      	mov	r3, r0
 800f85a:	4323      	orrs	r3, r4
 800f85c:	b29a      	uxth	r2, r3
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	819a      	strh	r2, [r3, #12]
 800f862:	e010      	b.n	800f886 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	3314      	adds	r3, #20
 800f86a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f86c:	6a3b      	ldr	r3, [r7, #32]
 800f86e:	6858      	ldr	r0, [r3, #4]
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	891a      	ldrh	r2, [r3, #8]
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	891b      	ldrh	r3, [r3, #8]
 800f87a:	1ad3      	subs	r3, r2, r3
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	2201      	movs	r2, #1
 800f880:	6939      	ldr	r1, [r7, #16]
 800f882:	f7fb fc97 	bl	800b1b4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fa f990 	bl	8009bb2 <lwip_htonl>
 800f892:	4603      	mov	r3, r0
 800f894:	3301      	adds	r3, #1
 800f896:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	1ad3      	subs	r3, r2, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	da02      	bge.n	800f8aa <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	3304      	adds	r3, #4
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f001 fd7e 	bl	80113b0 <ip4_route>
 800f8b4:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d103      	bne.n	800f8c4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800f8bc:	23fc      	movs	r3, #252	@ 0xfc
 800f8be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f8c2:	e011      	b.n	800f8e8 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f8c4:	6879      	ldr	r1, [r7, #4]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	1d1a      	adds	r2, r3, #4
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7a98      	ldrb	r0, [r3, #10]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	9302      	str	r3, [sp, #8]
 800f8d2:	2306      	movs	r3, #6
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	4603      	mov	r3, r0
 800f8dc:	69b8      	ldr	r0, [r7, #24]
 800f8de:	f001 ff0f 	bl	8011700 <ip4_output_if>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800f8e8:	69b8      	ldr	r0, [r7, #24]
 800f8ea:	f7fb fa65 	bl	800adb8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f8ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	372c      	adds	r7, #44	@ 0x2c
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd90      	pop	{r4, r7, pc}
	...

0800f8fc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f904:	f7fb fcd6 	bl	800b2b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f908:	4b0a      	ldr	r3, [pc, #40]	@ (800f934 <tcpip_tcp_timer+0x38>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d103      	bne.n	800f918 <tcpip_tcp_timer+0x1c>
 800f910:	4b09      	ldr	r3, [pc, #36]	@ (800f938 <tcpip_tcp_timer+0x3c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d005      	beq.n	800f924 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f918:	2200      	movs	r2, #0
 800f91a:	4908      	ldr	r1, [pc, #32]	@ (800f93c <tcpip_tcp_timer+0x40>)
 800f91c:	20fa      	movs	r0, #250	@ 0xfa
 800f91e:	f000 f86f 	bl	800fa00 <sys_timeout>
 800f922:	e003      	b.n	800f92c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f924:	4b06      	ldr	r3, [pc, #24]	@ (800f940 <tcpip_tcp_timer+0x44>)
 800f926:	2200      	movs	r2, #0
 800f928:	601a      	str	r2, [r3, #0]
  }
}
 800f92a:	bf00      	nop
 800f92c:	bf00      	nop
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	200080b8 	.word	0x200080b8
 800f938:	200080bc 	.word	0x200080bc
 800f93c:	0800f8fd 	.word	0x0800f8fd
 800f940:	20008104 	.word	0x20008104

0800f944 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f948:	4b0a      	ldr	r3, [pc, #40]	@ (800f974 <tcp_timer_needed+0x30>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10f      	bne.n	800f970 <tcp_timer_needed+0x2c>
 800f950:	4b09      	ldr	r3, [pc, #36]	@ (800f978 <tcp_timer_needed+0x34>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d103      	bne.n	800f960 <tcp_timer_needed+0x1c>
 800f958:	4b08      	ldr	r3, [pc, #32]	@ (800f97c <tcp_timer_needed+0x38>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d007      	beq.n	800f970 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f960:	4b04      	ldr	r3, [pc, #16]	@ (800f974 <tcp_timer_needed+0x30>)
 800f962:	2201      	movs	r2, #1
 800f964:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f966:	2200      	movs	r2, #0
 800f968:	4905      	ldr	r1, [pc, #20]	@ (800f980 <tcp_timer_needed+0x3c>)
 800f96a:	20fa      	movs	r0, #250	@ 0xfa
 800f96c:	f000 f848 	bl	800fa00 <sys_timeout>
  }
}
 800f970:	bf00      	nop
 800f972:	bd80      	pop	{r7, pc}
 800f974:	20008104 	.word	0x20008104
 800f978:	200080b8 	.word	0x200080b8
 800f97c:	200080bc 	.word	0x200080bc
 800f980:	0800f8fd 	.word	0x0800f8fd

0800f984 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	4903      	ldr	r1, [pc, #12]	@ (800f9ac <cyclic_timer+0x28>)
 800f99e:	4618      	mov	r0, r3
 800f9a0:	f000 f82e 	bl	800fa00 <sys_timeout>
}
 800f9a4:	bf00      	nop
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0800f985 	.word	0x0800f985

0800f9b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	607b      	str	r3, [r7, #4]
 800f9ba:	e00e      	b.n	800f9da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800f9bc:	4a0d      	ldr	r2, [pc, #52]	@ (800f9f4 <sys_timeouts_init+0x44>)
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	00db      	lsls	r3, r3, #3
 800f9c8:	4a0a      	ldr	r2, [pc, #40]	@ (800f9f4 <sys_timeouts_init+0x44>)
 800f9ca:	4413      	add	r3, r2
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	490a      	ldr	r1, [pc, #40]	@ (800f9f8 <sys_timeouts_init+0x48>)
 800f9d0:	f000 f816 	bl	800fa00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	607b      	str	r3, [r7, #4]
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d9ed      	bls.n	800f9bc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800f9e0:	f7f8 fcaa 	bl	8008338 <sys_now>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	4a05      	ldr	r2, [pc, #20]	@ (800f9fc <sys_timeouts_init+0x4c>)
 800f9e8:	6013      	str	r3, [r2, #0]
}
 800f9ea:	bf00      	nop
 800f9ec:	3708      	adds	r7, #8
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
 800f9f2:	bf00      	nop
 800f9f4:	080163c0 	.word	0x080163c0
 800f9f8:	0800f985 	.word	0x0800f985
 800f9fc:	20008100 	.word	0x20008100

0800fa00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b088      	sub	sp, #32
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fa0c:	2006      	movs	r0, #6
 800fa0e:	f7fa fc6b 	bl	800a2e8 <memp_malloc>
 800fa12:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10a      	bne.n	800fa30 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	f040 8084 	bne.w	800fb2a <sys_timeout+0x12a>
 800fa22:	4b44      	ldr	r3, [pc, #272]	@ (800fb34 <sys_timeout+0x134>)
 800fa24:	22d4      	movs	r2, #212	@ 0xd4
 800fa26:	4944      	ldr	r1, [pc, #272]	@ (800fb38 <sys_timeout+0x138>)
 800fa28:	4844      	ldr	r0, [pc, #272]	@ (800fb3c <sys_timeout+0x13c>)
 800fa2a:	f003 fbad 	bl	8013188 <iprintf>
    return;
 800fa2e:	e07c      	b.n	800fb2a <sys_timeout+0x12a>
  }

  now = sys_now();
 800fa30:	f7f8 fc82 	bl	8008338 <sys_now>
 800fa34:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800fa36:	4b42      	ldr	r3, [pc, #264]	@ (800fb40 <sys_timeout+0x140>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d105      	bne.n	800fa4a <sys_timeout+0x4a>
    diff = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800fa42:	4a40      	ldr	r2, [pc, #256]	@ (800fb44 <sys_timeout+0x144>)
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	6013      	str	r3, [r2, #0]
 800fa48:	e004      	b.n	800fa54 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800fa4a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb44 <sys_timeout+0x144>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	693a      	ldr	r2, [r7, #16]
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	2200      	movs	r2, #0
 800fa58:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	68ba      	ldr	r2, [r7, #8]
 800fa5e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	441a      	add	r2, r3
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fa70:	4b33      	ldr	r3, [pc, #204]	@ (800fb40 <sys_timeout+0x140>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d103      	bne.n	800fa80 <sys_timeout+0x80>
    next_timeout = timeout;
 800fa78:	4a31      	ldr	r2, [pc, #196]	@ (800fb40 <sys_timeout+0x140>)
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	6013      	str	r3, [r2, #0]
    return;
 800fa7e:	e055      	b.n	800fb2c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800fa80:	4b2f      	ldr	r3, [pc, #188]	@ (800fb40 <sys_timeout+0x140>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	429a      	cmp	r2, r3
 800fa8a:	d20f      	bcs.n	800faac <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800fa8c:	4b2c      	ldr	r3, [pc, #176]	@ (800fb40 <sys_timeout+0x140>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6859      	ldr	r1, [r3, #4]
 800fa92:	4b2b      	ldr	r3, [pc, #172]	@ (800fb40 <sys_timeout+0x140>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	1a8a      	subs	r2, r1, r2
 800fa9a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800fa9c:	4b28      	ldr	r3, [pc, #160]	@ (800fb40 <sys_timeout+0x140>)
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800faa4:	4a26      	ldr	r2, [pc, #152]	@ (800fb40 <sys_timeout+0x140>)
 800faa6:	697b      	ldr	r3, [r7, #20]
 800faa8:	6013      	str	r3, [r2, #0]
 800faaa:	e03f      	b.n	800fb2c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800faac:	4b24      	ldr	r3, [pc, #144]	@ (800fb40 <sys_timeout+0x140>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	61fb      	str	r3, [r7, #28]
 800fab2:	e036      	b.n	800fb22 <sys_timeout+0x122>
      timeout->time -= t->time;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	685a      	ldr	r2, [r3, #4]
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	1ad2      	subs	r2, r2, r3
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d006      	beq.n	800fad8 <sys_timeout+0xd8>
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	685a      	ldr	r2, [r3, #4]
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d921      	bls.n	800fb1c <sys_timeout+0x11c>
        if (t->next != NULL) {
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d009      	beq.n	800faf4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	6859      	ldr	r1, [r3, #4]
 800fae6:	697b      	ldr	r3, [r7, #20]
 800fae8:	685a      	ldr	r2, [r3, #4]
 800faea:	69fb      	ldr	r3, [r7, #28]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	1a8a      	subs	r2, r1, r2
 800faf0:	605a      	str	r2, [r3, #4]
 800faf2:	e00b      	b.n	800fb0c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d206      	bcs.n	800fb0c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800fafe:	4b10      	ldr	r3, [pc, #64]	@ (800fb40 <sys_timeout+0x140>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	685a      	ldr	r2, [r3, #4]
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	441a      	add	r2, r3
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	601a      	str	r2, [r3, #0]
        break;
 800fb1a:	e007      	b.n	800fb2c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	61fb      	str	r3, [r7, #28]
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1c5      	bne.n	800fab4 <sys_timeout+0xb4>
 800fb28:	e000      	b.n	800fb2c <sys_timeout+0x12c>
    return;
 800fb2a:	bf00      	nop
      }
    }
  }
}
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	08015ad4 	.word	0x08015ad4
 800fb38:	08015b08 	.word	0x08015b08
 800fb3c:	08015b48 	.word	0x08015b48
 800fb40:	200080fc 	.word	0x200080fc
 800fb44:	20008100 	.word	0x20008100

0800fb48 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800fb4e:	4b24      	ldr	r3, [pc, #144]	@ (800fbe0 <sys_check_timeouts+0x98>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d040      	beq.n	800fbd8 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800fb56:	f7f8 fbef 	bl	8008338 <sys_now>
 800fb5a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800fb5c:	4b21      	ldr	r3, [pc, #132]	@ (800fbe4 <sys_check_timeouts+0x9c>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	1ad3      	subs	r3, r2, r3
 800fb64:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800fb66:	4b20      	ldr	r3, [pc, #128]	@ (800fbe8 <sys_check_timeouts+0xa0>)
 800fb68:	781b      	ldrb	r3, [r3, #0]
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d001      	beq.n	800fb74 <sys_check_timeouts+0x2c>
 800fb70:	f7fa fd7a 	bl	800a668 <pbuf_free_ooseq>
      had_one = 0;
 800fb74:	2300      	movs	r3, #0
 800fb76:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800fb78:	4b19      	ldr	r3, [pc, #100]	@ (800fbe0 <sys_check_timeouts+0x98>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d026      	beq.n	800fbd2 <sys_check_timeouts+0x8a>
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d321      	bcc.n	800fbd2 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800fb8e:	2301      	movs	r3, #1
 800fb90:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	4b13      	ldr	r3, [pc, #76]	@ (800fbe4 <sys_check_timeouts+0x9c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	4a11      	ldr	r2, [pc, #68]	@ (800fbe4 <sys_check_timeouts+0x9c>)
 800fb9e:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	697a      	ldr	r2, [r7, #20]
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4a0c      	ldr	r2, [pc, #48]	@ (800fbe0 <sys_check_timeouts+0x98>)
 800fbb0:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fbbe:	68b9      	ldr	r1, [r7, #8]
 800fbc0:	2006      	movs	r0, #6
 800fbc2:	f7fa fbdd 	bl	800a380 <memp_free>
        if (handler != NULL) {
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6838      	ldr	r0, [r7, #0]
 800fbd0:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800fbd2:	7cfb      	ldrb	r3, [r7, #19]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1c6      	bne.n	800fb66 <sys_check_timeouts+0x1e>
  }
}
 800fbd8:	bf00      	nop
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	200080fc 	.word	0x200080fc
 800fbe4:	20008100 	.word	0x20008100
 800fbe8:	200080a9 	.word	0x200080a9

0800fbec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800fbec:	b480      	push	{r7}
 800fbee:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800fbf0:	bf00      	nop
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bc80      	pop	{r7}
 800fbf6:	4770      	bx	lr

0800fbf8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800fbf8:	b480      	push	{r7}
 800fbfa:	b083      	sub	sp, #12
 800fbfc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800fc02:	4b17      	ldr	r3, [pc, #92]	@ (800fc60 <udp_new_port+0x68>)
 800fc04:	881b      	ldrh	r3, [r3, #0]
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	b291      	uxth	r1, r2
 800fc0a:	4a15      	ldr	r2, [pc, #84]	@ (800fc60 <udp_new_port+0x68>)
 800fc0c:	8011      	strh	r1, [r2, #0]
 800fc0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d103      	bne.n	800fc1e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800fc16:	4b12      	ldr	r3, [pc, #72]	@ (800fc60 <udp_new_port+0x68>)
 800fc18:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800fc1c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc1e:	4b11      	ldr	r3, [pc, #68]	@ (800fc64 <udp_new_port+0x6c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	603b      	str	r3, [r7, #0]
 800fc24:	e011      	b.n	800fc4a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	8a5a      	ldrh	r2, [r3, #18]
 800fc2a:	4b0d      	ldr	r3, [pc, #52]	@ (800fc60 <udp_new_port+0x68>)
 800fc2c:	881b      	ldrh	r3, [r3, #0]
 800fc2e:	429a      	cmp	r2, r3
 800fc30:	d108      	bne.n	800fc44 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800fc32:	88fb      	ldrh	r3, [r7, #6]
 800fc34:	3301      	adds	r3, #1
 800fc36:	80fb      	strh	r3, [r7, #6]
 800fc38:	88fb      	ldrh	r3, [r7, #6]
 800fc3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fc3e:	d3e0      	bcc.n	800fc02 <udp_new_port+0xa>
        return 0;
 800fc40:	2300      	movs	r3, #0
 800fc42:	e007      	b.n	800fc54 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	603b      	str	r3, [r7, #0]
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1ea      	bne.n	800fc26 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800fc50:	4b03      	ldr	r3, [pc, #12]	@ (800fc60 <udp_new_port+0x68>)
 800fc52:	881b      	ldrh	r3, [r3, #0]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bc80      	pop	{r7}
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop
 800fc60:	20000120 	.word	0x20000120
 800fc64:	20008108 	.word	0x20008108

0800fc68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b085      	sub	sp, #20
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	60f8      	str	r0, [r7, #12]
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	4613      	mov	r3, r2
 800fc74:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800fc76:	79fb      	ldrb	r3, [r7, #7]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d018      	beq.n	800fcae <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d013      	beq.n	800fcaa <udp_input_local_match+0x42>
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00f      	beq.n	800fcaa <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fc8a:	4b13      	ldr	r3, [pc, #76]	@ (800fcd8 <udp_input_local_match+0x70>)
 800fc8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc92:	d00a      	beq.n	800fcaa <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd8 <udp_input_local_match+0x70>)
 800fc9a:	695b      	ldr	r3, [r3, #20]
 800fc9c:	405a      	eors	r2, r3
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	3308      	adds	r3, #8
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d110      	bne.n	800fccc <udp_input_local_match+0x64>
          return 1;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	e00f      	b.n	800fcce <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d009      	beq.n	800fcc8 <udp_input_local_match+0x60>
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <udp_input_local_match+0x60>
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	4b05      	ldr	r3, [pc, #20]	@ (800fcd8 <udp_input_local_match+0x70>)
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d101      	bne.n	800fccc <udp_input_local_match+0x64>
      return 1;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	e000      	b.n	800fcce <udp_input_local_match+0x66>
    }
  }

  return 0;
 800fccc:	2300      	movs	r3, #0
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3714      	adds	r7, #20
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bc80      	pop	{r7}
 800fcd6:	4770      	bx	lr
 800fcd8:	20004b50 	.word	0x20004b50

0800fcdc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800fcdc:	b590      	push	{r4, r7, lr}
 800fcde:	b08d      	sub	sp, #52	@ 0x34
 800fce0:	af02      	add	r7, sp, #8
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800fce6:	2300      	movs	r3, #0
 800fce8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	895b      	ldrh	r3, [r3, #10]
 800fcee:	2b07      	cmp	r3, #7
 800fcf0:	d803      	bhi.n	800fcfa <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7fb f860 	bl	800adb8 <pbuf_free>
    goto end;
 800fcf8:	e0c6      	b.n	800fe88 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800fd00:	4b63      	ldr	r3, [pc, #396]	@ (800fe90 <udp_input+0x1b4>)
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	4a62      	ldr	r2, [pc, #392]	@ (800fe90 <udp_input+0x1b4>)
 800fd06:	6812      	ldr	r2, [r2, #0]
 800fd08:	4611      	mov	r1, r2
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f001 fdca 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 800fd10:	4603      	mov	r3, r0
 800fd12:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	881b      	ldrh	r3, [r3, #0]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7f9 ff3c 	bl	8009b98 <lwip_htons>
 800fd20:	4603      	mov	r3, r0
 800fd22:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	885b      	ldrh	r3, [r3, #2]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7f9 ff34 	bl	8009b98 <lwip_htons>
 800fd30:	4603      	mov	r3, r0
 800fd32:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fd34:	2300      	movs	r3, #0
 800fd36:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd40:	4b54      	ldr	r3, [pc, #336]	@ (800fe94 <udp_input+0x1b8>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd46:	e03b      	b.n	800fdc0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fd48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4a:	8a5b      	ldrh	r3, [r3, #18]
 800fd4c:	89fa      	ldrh	r2, [r7, #14]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d131      	bne.n	800fdb6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fd52:	7cfb      	ldrb	r3, [r7, #19]
 800fd54:	461a      	mov	r2, r3
 800fd56:	6839      	ldr	r1, [r7, #0]
 800fd58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fd5a:	f7ff ff85 	bl	800fc68 <udp_input_local_match>
 800fd5e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d028      	beq.n	800fdb6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800fd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd66:	7c1b      	ldrb	r3, [r3, #16]
 800fd68:	f003 0304 	and.w	r3, r3, #4
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d104      	bne.n	800fd7a <udp_input+0x9e>
 800fd70:	69fb      	ldr	r3, [r7, #28]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800fd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd78:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7c:	8a9b      	ldrh	r3, [r3, #20]
 800fd7e:	8a3a      	ldrh	r2, [r7, #16]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d118      	bne.n	800fdb6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd86:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d005      	beq.n	800fd98 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8e:	685a      	ldr	r2, [r3, #4]
 800fd90:	4b3f      	ldr	r3, [pc, #252]	@ (800fe90 <udp_input+0x1b4>)
 800fd92:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d10e      	bne.n	800fdb6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fd98:	6a3b      	ldr	r3, [r7, #32]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d014      	beq.n	800fdc8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fda0:	68da      	ldr	r2, [r3, #12]
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fda6:	4b3b      	ldr	r3, [pc, #236]	@ (800fe94 <udp_input+0x1b8>)
 800fda8:	681a      	ldr	r2, [r3, #0]
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdac:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fdae:	4a39      	ldr	r2, [pc, #228]	@ (800fe94 <udp_input+0x1b8>)
 800fdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fdb4:	e008      	b.n	800fdc8 <udp_input+0xec>
      }
    }

    prev = pcb;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1c0      	bne.n	800fd48 <udp_input+0x6c>
 800fdc6:	e000      	b.n	800fdca <udp_input+0xee>
        break;
 800fdc8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <udp_input+0xf8>
    pcb = uncon_pcb;
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <udp_input+0x104>
    for_us = 1;
 800fdda:	2301      	movs	r3, #1
 800fddc:	76fb      	strb	r3, [r7, #27]
 800fdde:	e00a      	b.n	800fdf6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	3304      	adds	r3, #4
 800fde4:	681a      	ldr	r2, [r3, #0]
 800fde6:	4b2a      	ldr	r3, [pc, #168]	@ (800fe90 <udp_input+0x1b4>)
 800fde8:	695b      	ldr	r3, [r3, #20]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	bf0c      	ite	eq
 800fdee:	2301      	moveq	r3, #1
 800fdf0:	2300      	movne	r3, #0
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fdf6:	7efb      	ldrb	r3, [r7, #27]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d042      	beq.n	800fe82 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800fdfc:	f06f 0107 	mvn.w	r1, #7
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7fa ffb5 	bl	800ad70 <pbuf_header>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00a      	beq.n	800fe22 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800fe0c:	4b22      	ldr	r3, [pc, #136]	@ (800fe98 <udp_input+0x1bc>)
 800fe0e:	f240 1255 	movw	r2, #341	@ 0x155
 800fe12:	4922      	ldr	r1, [pc, #136]	@ (800fe9c <udp_input+0x1c0>)
 800fe14:	4822      	ldr	r0, [pc, #136]	@ (800fea0 <udp_input+0x1c4>)
 800fe16:	f003 f9b7 	bl	8013188 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fe1a:	6878      	ldr	r0, [r7, #4]
 800fe1c:	f7fa ffcc 	bl	800adb8 <pbuf_free>
      goto end;
 800fe20:	e032      	b.n	800fe88 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800fe22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d012      	beq.n	800fe4e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fe28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2a:	699b      	ldr	r3, [r3, #24]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00a      	beq.n	800fe46 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fe30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe32:	699c      	ldr	r4, [r3, #24]
 800fe34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe36:	69d8      	ldr	r0, [r3, #28]
 800fe38:	8a3b      	ldrh	r3, [r7, #16]
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	4b19      	ldr	r3, [pc, #100]	@ (800fea4 <udp_input+0x1c8>)
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe42:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fe44:	e021      	b.n	800fe8a <udp_input+0x1ae>
        pbuf_free(p);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f7fa ffb6 	bl	800adb8 <pbuf_free>
        goto end;
 800fe4c:	e01c      	b.n	800fe88 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe4e:	7cfb      	ldrb	r3, [r7, #19]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d112      	bne.n	800fe7a <udp_input+0x19e>
 800fe54:	4b0e      	ldr	r3, [pc, #56]	@ (800fe90 <udp_input+0x1b4>)
 800fe56:	695b      	ldr	r3, [r3, #20]
 800fe58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fe5c:	2be0      	cmp	r3, #224	@ 0xe0
 800fe5e:	d00c      	beq.n	800fe7a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fe60:	4b0b      	ldr	r3, [pc, #44]	@ (800fe90 <udp_input+0x1b4>)
 800fe62:	899b      	ldrh	r3, [r3, #12]
 800fe64:	3308      	adds	r3, #8
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	b21b      	sxth	r3, r3
 800fe6a:	4619      	mov	r1, r3
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fa ff91 	bl	800ad94 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fe72:	2103      	movs	r1, #3
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f001 fa13 	bl	80112a0 <icmp_dest_unreach>
      pbuf_free(p);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fa ff9c 	bl	800adb8 <pbuf_free>
  return;
 800fe80:	e003      	b.n	800fe8a <udp_input+0x1ae>
    pbuf_free(p);
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f7fa ff98 	bl	800adb8 <pbuf_free>
  return;
 800fe88:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fe8a:	372c      	adds	r7, #44	@ 0x2c
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd90      	pop	{r4, r7, pc}
 800fe90:	20004b50 	.word	0x20004b50
 800fe94:	20008108 	.word	0x20008108
 800fe98:	08015b70 	.word	0x08015b70
 800fe9c:	08015ba0 	.word	0x08015ba0
 800fea0:	08015bb4 	.word	0x08015bb4
 800fea4:	20004b60 	.word	0x20004b60

0800fea8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af02      	add	r7, sp, #8
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	60b9      	str	r1, [r7, #8]
 800feb2:	607a      	str	r2, [r7, #4]
 800feb4:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d002      	beq.n	800fec6 <udp_sendto+0x1e>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d102      	bne.n	800fecc <udp_sendto+0x24>
    return ERR_VAL;
 800fec6:	f06f 0305 	mvn.w	r3, #5
 800feca:	e013      	b.n	800fef4 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800fecc:	6978      	ldr	r0, [r7, #20]
 800fece:	f001 fa6f 	bl	80113b0 <ip4_route>
 800fed2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d102      	bne.n	800fee0 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800feda:	f06f 0303 	mvn.w	r3, #3
 800fede:	e009      	b.n	800fef4 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fee0:	887a      	ldrh	r2, [r7, #2]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	4613      	mov	r3, r2
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	68b9      	ldr	r1, [r7, #8]
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f000 f805 	bl	800fefc <udp_sendto_if>
 800fef2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3718      	adds	r7, #24
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af02      	add	r7, sp, #8
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
 800ff08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d002      	beq.n	800ff16 <udp_sendto_if+0x1a>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <udp_sendto_if+0x20>
    return ERR_VAL;
 800ff16:	f06f 0305 	mvn.w	r3, #5
 800ff1a:	e028      	b.n	800ff6e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d009      	beq.n	800ff36 <udp_sendto_if+0x3a>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d005      	beq.n	800ff36 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ff32:	2be0      	cmp	r3, #224	@ 0xe0
 800ff34:	d103      	bne.n	800ff3e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800ff36:	6a3b      	ldr	r3, [r7, #32]
 800ff38:	3304      	adds	r3, #4
 800ff3a:	617b      	str	r3, [r7, #20]
 800ff3c:	e00b      	b.n	800ff56 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681a      	ldr	r2, [r3, #0]
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	3304      	adds	r3, #4
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d002      	beq.n	800ff52 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800ff4c:	f06f 0303 	mvn.w	r3, #3
 800ff50:	e00d      	b.n	800ff6e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ff56:	887a      	ldrh	r2, [r7, #2]
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	9301      	str	r3, [sp, #4]
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	9300      	str	r3, [sp, #0]
 800ff60:	4613      	mov	r3, r2
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	68b9      	ldr	r1, [r7, #8]
 800ff66:	68f8      	ldr	r0, [r7, #12]
 800ff68:	f000 f806 	bl	800ff78 <udp_sendto_if_src>
 800ff6c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3718      	adds	r7, #24
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
	...

0800ff78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b08c      	sub	sp, #48	@ 0x30
 800ff7c:	af04      	add	r7, sp, #16
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
 800ff84:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d002      	beq.n	800ff92 <udp_sendto_if_src+0x1a>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d102      	bne.n	800ff98 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800ff92:	f06f 0305 	mvn.w	r3, #5
 800ff96:	e07e      	b.n	8010096 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	8a5b      	ldrh	r3, [r3, #18]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10f      	bne.n	800ffc0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ffa0:	68f9      	ldr	r1, [r7, #12]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	8a5b      	ldrh	r3, [r3, #18]
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f000 f87f 	bl	80100ac <udp_bind>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ffb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d002      	beq.n	800ffc0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ffba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ffbe:	e06a      	b.n	8010096 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ffc0:	2108      	movs	r1, #8
 800ffc2:	68b8      	ldr	r0, [r7, #8]
 800ffc4:	f7fa fed4 	bl	800ad70 <pbuf_header>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d014      	beq.n	800fff8 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ffce:	2200      	movs	r2, #0
 800ffd0:	2108      	movs	r1, #8
 800ffd2:	2001      	movs	r0, #1
 800ffd4:	f7fa fb78 	bl	800a6c8 <pbuf_alloc>
 800ffd8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d102      	bne.n	800ffe6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ffe0:	f04f 33ff 	mov.w	r3, #4294967295
 800ffe4:	e057      	b.n	8010096 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	891b      	ldrh	r3, [r3, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d006      	beq.n	800fffc <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ffee:	68b9      	ldr	r1, [r7, #8]
 800fff0:	69f8      	ldr	r0, [r7, #28]
 800fff2:	f7fb f803 	bl	800affc <pbuf_chain>
 800fff6:	e001      	b.n	800fffc <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	895b      	ldrh	r3, [r3, #10]
 8010000:	2b07      	cmp	r3, #7
 8010002:	d806      	bhi.n	8010012 <udp_sendto_if_src+0x9a>
 8010004:	4b26      	ldr	r3, [pc, #152]	@ (80100a0 <udp_sendto_if_src+0x128>)
 8010006:	f240 22db 	movw	r2, #731	@ 0x2db
 801000a:	4926      	ldr	r1, [pc, #152]	@ (80100a4 <udp_sendto_if_src+0x12c>)
 801000c:	4826      	ldr	r0, [pc, #152]	@ (80100a8 <udp_sendto_if_src+0x130>)
 801000e:	f003 f8bb 	bl	8013188 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	8a5b      	ldrh	r3, [r3, #18]
 801001c:	4618      	mov	r0, r3
 801001e:	f7f9 fdbb 	bl	8009b98 <lwip_htons>
 8010022:	4603      	mov	r3, r0
 8010024:	461a      	mov	r2, r3
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801002a:	887b      	ldrh	r3, [r7, #2]
 801002c:	4618      	mov	r0, r3
 801002e:	f7f9 fdb3 	bl	8009b98 <lwip_htons>
 8010032:	4603      	mov	r3, r0
 8010034:	461a      	mov	r2, r3
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	2200      	movs	r2, #0
 801003e:	719a      	strb	r2, [r3, #6]
 8010040:	2200      	movs	r2, #0
 8010042:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	891b      	ldrh	r3, [r3, #8]
 8010048:	4618      	mov	r0, r3
 801004a:	f7f9 fda5 	bl	8009b98 <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010056:	2311      	movs	r3, #17
 8010058:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7a9b      	ldrb	r3, [r3, #10]
 801005e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	7a5b      	ldrb	r3, [r3, #9]
 8010064:	7cb9      	ldrb	r1, [r7, #18]
 8010066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010068:	9202      	str	r2, [sp, #8]
 801006a:	7cfa      	ldrb	r2, [r7, #19]
 801006c:	9201      	str	r2, [sp, #4]
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	460b      	mov	r3, r1
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010076:	69f8      	ldr	r0, [r7, #28]
 8010078:	f001 fb6c 	bl	8011754 <ip4_output_if_src>
 801007c:	4603      	mov	r3, r0
 801007e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010080:	69fa      	ldr	r2, [r7, #28]
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	429a      	cmp	r2, r3
 8010086:	d004      	beq.n	8010092 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8010088:	69f8      	ldr	r0, [r7, #28]
 801008a:	f7fa fe95 	bl	800adb8 <pbuf_free>
    q = NULL;
 801008e:	2300      	movs	r3, #0
 8010090:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010092:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010096:	4618      	mov	r0, r3
 8010098:	3720      	adds	r7, #32
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}
 801009e:	bf00      	nop
 80100a0:	08015b70 	.word	0x08015b70
 80100a4:	08015bdc 	.word	0x08015bdc
 80100a8:	08015bb4 	.word	0x08015bb4

080100ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b086      	sub	sp, #24
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	60b9      	str	r1, [r7, #8]
 80100b6:	4613      	mov	r3, r2
 80100b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80100c0:	4b30      	ldr	r3, [pc, #192]	@ (8010184 <udp_bind+0xd8>)
 80100c2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <udp_bind+0x24>
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d102      	bne.n	80100d6 <udp_bind+0x2a>
    return ERR_VAL;
 80100d0:	f06f 0305 	mvn.w	r3, #5
 80100d4:	e052      	b.n	801017c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100da:	4b2b      	ldr	r3, [pc, #172]	@ (8010188 <udp_bind+0xdc>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	617b      	str	r3, [r7, #20]
 80100e0:	e009      	b.n	80100f6 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	697b      	ldr	r3, [r7, #20]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d102      	bne.n	80100f0 <udp_bind+0x44>
      rebind = 1;
 80100ea:	2301      	movs	r3, #1
 80100ec:	74fb      	strb	r3, [r7, #19]
      break;
 80100ee:	e005      	b.n	80100fc <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	617b      	str	r3, [r7, #20]
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1f2      	bne.n	80100e2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80100fc:	88fb      	ldrh	r3, [r7, #6]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d109      	bne.n	8010116 <udp_bind+0x6a>
    port = udp_new_port();
 8010102:	f7ff fd79 	bl	800fbf8 <udp_new_port>
 8010106:	4603      	mov	r3, r0
 8010108:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801010a:	88fb      	ldrh	r3, [r7, #6]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d11e      	bne.n	801014e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010110:	f06f 0307 	mvn.w	r3, #7
 8010114:	e032      	b.n	801017c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010116:	4b1c      	ldr	r3, [pc, #112]	@ (8010188 <udp_bind+0xdc>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	617b      	str	r3, [r7, #20]
 801011c:	e014      	b.n	8010148 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	429a      	cmp	r2, r3
 8010124:	d00d      	beq.n	8010142 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	8a5b      	ldrh	r3, [r3, #18]
 801012a:	88fa      	ldrh	r2, [r7, #6]
 801012c:	429a      	cmp	r2, r3
 801012e:	d108      	bne.n	8010142 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	681a      	ldr	r2, [r3, #0]
 8010134:	68bb      	ldr	r3, [r7, #8]
 8010136:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010138:	429a      	cmp	r2, r3
 801013a:	d102      	bne.n	8010142 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801013c:	f06f 0307 	mvn.w	r3, #7
 8010140:	e01c      	b.n	801017c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	68db      	ldr	r3, [r3, #12]
 8010146:	617b      	str	r3, [r7, #20]
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d1e7      	bne.n	801011e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d002      	beq.n	801015a <udp_bind+0xae>
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	e000      	b.n	801015c <udp_bind+0xb0>
 801015a:	2300      	movs	r3, #0
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	88fa      	ldrh	r2, [r7, #6]
 8010164:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010166:	7cfb      	ldrb	r3, [r7, #19]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d106      	bne.n	801017a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801016c:	4b06      	ldr	r3, [pc, #24]	@ (8010188 <udp_bind+0xdc>)
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010174:	4a04      	ldr	r2, [pc, #16]	@ (8010188 <udp_bind+0xdc>)
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801017a:	2300      	movs	r3, #0
}
 801017c:	4618      	mov	r0, r3
 801017e:	3718      	adds	r7, #24
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	080163d8 	.word	0x080163d8
 8010188:	20008108 	.word	0x20008108

0801018c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	7c1b      	ldrb	r3, [r3, #16]
 80101a4:	f023 0304 	bic.w	r3, r3, #4
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	741a      	strb	r2, [r3, #16]
}
 80101ae:	bf00      	nop
 80101b0:	370c      	adds	r7, #12
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bc80      	pop	{r7}
 80101b6:	4770      	bx	lr

080101b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b085      	sub	sp, #20
 80101bc:	af00      	add	r7, sp, #0
 80101be:	60f8      	str	r0, [r7, #12]
 80101c0:	60b9      	str	r1, [r7, #8]
 80101c2:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	61da      	str	r2, [r3, #28]
}
 80101d0:	bf00      	nop
 80101d2:	3714      	adds	r7, #20
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bc80      	pop	{r7}
 80101d8:	4770      	bx	lr
	...

080101dc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80101e4:	4b15      	ldr	r3, [pc, #84]	@ (801023c <udp_remove+0x60>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d105      	bne.n	80101fa <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80101ee:	4b13      	ldr	r3, [pc, #76]	@ (801023c <udp_remove+0x60>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	4a11      	ldr	r2, [pc, #68]	@ (801023c <udp_remove+0x60>)
 80101f6:	6013      	str	r3, [r2, #0]
 80101f8:	e017      	b.n	801022a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80101fa:	4b10      	ldr	r3, [pc, #64]	@ (801023c <udp_remove+0x60>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	e010      	b.n	8010224 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d009      	beq.n	801021e <udp_remove+0x42>
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	429a      	cmp	r2, r3
 8010212:	d104      	bne.n	801021e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	68da      	ldr	r2, [r3, #12]
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	60da      	str	r2, [r3, #12]
        break;
 801021c:	e005      	b.n	801022a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d1eb      	bne.n	8010202 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801022a:	6879      	ldr	r1, [r7, #4]
 801022c:	2000      	movs	r0, #0
 801022e:	f7fa f8a7 	bl	800a380 <memp_free>
}
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	20008108 	.word	0x20008108

08010240 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010246:	2000      	movs	r0, #0
 8010248:	f7fa f84e 	bl	800a2e8 <memp_malloc>
 801024c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d007      	beq.n	8010264 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010254:	2220      	movs	r2, #32
 8010256:	2100      	movs	r1, #0
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f003 f90d 	bl	8013478 <memset>
    pcb->ttl = UDP_TTL;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	22ff      	movs	r2, #255	@ 0xff
 8010262:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010264:	687b      	ldr	r3, [r7, #4]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
	...

08010270 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010270:	b480      	push	{r7}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d01e      	beq.n	80102be <udp_netif_ip_addr_changed+0x4e>
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d01a      	beq.n	80102be <udp_netif_ip_addr_changed+0x4e>
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d017      	beq.n	80102be <udp_netif_ip_addr_changed+0x4e>
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d013      	beq.n	80102be <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010296:	4b0c      	ldr	r3, [pc, #48]	@ (80102c8 <udp_netif_ip_addr_changed+0x58>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	60fb      	str	r3, [r7, #12]
 801029c:	e00c      	b.n	80102b8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d103      	bne.n	80102b2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1ef      	bne.n	801029e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80102be:	bf00      	nop
 80102c0:	3714      	adds	r7, #20
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bc80      	pop	{r7}
 80102c6:	4770      	bx	lr
 80102c8:	20008108 	.word	0x20008108

080102cc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b082      	sub	sp, #8
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80102d4:	4915      	ldr	r1, [pc, #84]	@ (801032c <etharp_free_entry+0x60>)
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d013      	beq.n	8010310 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80102e8:	4910      	ldr	r1, [pc, #64]	@ (801032c <etharp_free_entry+0x60>)
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	4613      	mov	r3, r2
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	4413      	add	r3, r2
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	440b      	add	r3, r1
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fa fd5d 	bl	800adb8 <pbuf_free>
    arp_table[i].q = NULL;
 80102fe:	490b      	ldr	r1, [pc, #44]	@ (801032c <etharp_free_entry+0x60>)
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	4613      	mov	r3, r2
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	4413      	add	r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	440b      	add	r3, r1
 801030c:	2200      	movs	r2, #0
 801030e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010310:	4906      	ldr	r1, [pc, #24]	@ (801032c <etharp_free_entry+0x60>)
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	4613      	mov	r3, r2
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	4413      	add	r3, r2
 801031a:	00db      	lsls	r3, r3, #3
 801031c:	440b      	add	r3, r1
 801031e:	3314      	adds	r3, #20
 8010320:	2200      	movs	r2, #0
 8010322:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010324:	bf00      	nop
 8010326:	3708      	adds	r7, #8
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	2000810c 	.word	0x2000810c

08010330 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010336:	2300      	movs	r3, #0
 8010338:	71fb      	strb	r3, [r7, #7]
 801033a:	e096      	b.n	801046a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801033c:	79fa      	ldrb	r2, [r7, #7]
 801033e:	494f      	ldr	r1, [pc, #316]	@ (801047c <etharp_tmr+0x14c>)
 8010340:	4613      	mov	r3, r2
 8010342:	005b      	lsls	r3, r3, #1
 8010344:	4413      	add	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	440b      	add	r3, r1
 801034a:	3314      	adds	r3, #20
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010350:	79bb      	ldrb	r3, [r7, #6]
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 8086 	beq.w	8010464 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010358:	79fa      	ldrb	r2, [r7, #7]
 801035a:	4948      	ldr	r1, [pc, #288]	@ (801047c <etharp_tmr+0x14c>)
 801035c:	4613      	mov	r3, r2
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	4413      	add	r3, r2
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	440b      	add	r3, r1
 8010366:	3312      	adds	r3, #18
 8010368:	881b      	ldrh	r3, [r3, #0]
 801036a:	3301      	adds	r3, #1
 801036c:	b298      	uxth	r0, r3
 801036e:	4943      	ldr	r1, [pc, #268]	@ (801047c <etharp_tmr+0x14c>)
 8010370:	4613      	mov	r3, r2
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	4413      	add	r3, r2
 8010376:	00db      	lsls	r3, r3, #3
 8010378:	440b      	add	r3, r1
 801037a:	3312      	adds	r3, #18
 801037c:	4602      	mov	r2, r0
 801037e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010380:	79fa      	ldrb	r2, [r7, #7]
 8010382:	493e      	ldr	r1, [pc, #248]	@ (801047c <etharp_tmr+0x14c>)
 8010384:	4613      	mov	r3, r2
 8010386:	005b      	lsls	r3, r3, #1
 8010388:	4413      	add	r3, r2
 801038a:	00db      	lsls	r3, r3, #3
 801038c:	440b      	add	r3, r1
 801038e:	3312      	adds	r3, #18
 8010390:	881b      	ldrh	r3, [r3, #0]
 8010392:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010396:	d215      	bcs.n	80103c4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010398:	79fa      	ldrb	r2, [r7, #7]
 801039a:	4938      	ldr	r1, [pc, #224]	@ (801047c <etharp_tmr+0x14c>)
 801039c:	4613      	mov	r3, r2
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	4413      	add	r3, r2
 80103a2:	00db      	lsls	r3, r3, #3
 80103a4:	440b      	add	r3, r1
 80103a6:	3314      	adds	r3, #20
 80103a8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80103aa:	2b01      	cmp	r3, #1
 80103ac:	d10f      	bne.n	80103ce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80103ae:	79fa      	ldrb	r2, [r7, #7]
 80103b0:	4932      	ldr	r1, [pc, #200]	@ (801047c <etharp_tmr+0x14c>)
 80103b2:	4613      	mov	r3, r2
 80103b4:	005b      	lsls	r3, r3, #1
 80103b6:	4413      	add	r3, r2
 80103b8:	00db      	lsls	r3, r3, #3
 80103ba:	440b      	add	r3, r1
 80103bc:	3312      	adds	r3, #18
 80103be:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80103c0:	2b04      	cmp	r3, #4
 80103c2:	d904      	bls.n	80103ce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80103c4:	79fb      	ldrb	r3, [r7, #7]
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7ff ff80 	bl	80102cc <etharp_free_entry>
 80103cc:	e04a      	b.n	8010464 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80103ce:	79fa      	ldrb	r2, [r7, #7]
 80103d0:	492a      	ldr	r1, [pc, #168]	@ (801047c <etharp_tmr+0x14c>)
 80103d2:	4613      	mov	r3, r2
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	4413      	add	r3, r2
 80103d8:	00db      	lsls	r3, r3, #3
 80103da:	440b      	add	r3, r1
 80103dc:	3314      	adds	r3, #20
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	2b03      	cmp	r3, #3
 80103e2:	d10a      	bne.n	80103fa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80103e4:	79fa      	ldrb	r2, [r7, #7]
 80103e6:	4925      	ldr	r1, [pc, #148]	@ (801047c <etharp_tmr+0x14c>)
 80103e8:	4613      	mov	r3, r2
 80103ea:	005b      	lsls	r3, r3, #1
 80103ec:	4413      	add	r3, r2
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	440b      	add	r3, r1
 80103f2:	3314      	adds	r3, #20
 80103f4:	2204      	movs	r2, #4
 80103f6:	701a      	strb	r2, [r3, #0]
 80103f8:	e034      	b.n	8010464 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80103fa:	79fa      	ldrb	r2, [r7, #7]
 80103fc:	491f      	ldr	r1, [pc, #124]	@ (801047c <etharp_tmr+0x14c>)
 80103fe:	4613      	mov	r3, r2
 8010400:	005b      	lsls	r3, r3, #1
 8010402:	4413      	add	r3, r2
 8010404:	00db      	lsls	r3, r3, #3
 8010406:	440b      	add	r3, r1
 8010408:	3314      	adds	r3, #20
 801040a:	781b      	ldrb	r3, [r3, #0]
 801040c:	2b04      	cmp	r3, #4
 801040e:	d10a      	bne.n	8010426 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010410:	79fa      	ldrb	r2, [r7, #7]
 8010412:	491a      	ldr	r1, [pc, #104]	@ (801047c <etharp_tmr+0x14c>)
 8010414:	4613      	mov	r3, r2
 8010416:	005b      	lsls	r3, r3, #1
 8010418:	4413      	add	r3, r2
 801041a:	00db      	lsls	r3, r3, #3
 801041c:	440b      	add	r3, r1
 801041e:	3314      	adds	r3, #20
 8010420:	2202      	movs	r2, #2
 8010422:	701a      	strb	r2, [r3, #0]
 8010424:	e01e      	b.n	8010464 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010426:	79fa      	ldrb	r2, [r7, #7]
 8010428:	4914      	ldr	r1, [pc, #80]	@ (801047c <etharp_tmr+0x14c>)
 801042a:	4613      	mov	r3, r2
 801042c:	005b      	lsls	r3, r3, #1
 801042e:	4413      	add	r3, r2
 8010430:	00db      	lsls	r3, r3, #3
 8010432:	440b      	add	r3, r1
 8010434:	3314      	adds	r3, #20
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	2b01      	cmp	r3, #1
 801043a:	d113      	bne.n	8010464 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801043c:	79fa      	ldrb	r2, [r7, #7]
 801043e:	490f      	ldr	r1, [pc, #60]	@ (801047c <etharp_tmr+0x14c>)
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	440b      	add	r3, r1
 801044a:	3308      	adds	r3, #8
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	79fa      	ldrb	r2, [r7, #7]
 8010450:	4613      	mov	r3, r2
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	4413      	add	r3, r2
 8010456:	00db      	lsls	r3, r3, #3
 8010458:	4a08      	ldr	r2, [pc, #32]	@ (801047c <etharp_tmr+0x14c>)
 801045a:	4413      	add	r3, r2
 801045c:	3304      	adds	r3, #4
 801045e:	4619      	mov	r1, r3
 8010460:	f000 fe06 	bl	8011070 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010464:	79fb      	ldrb	r3, [r7, #7]
 8010466:	3301      	adds	r3, #1
 8010468:	71fb      	strb	r3, [r7, #7]
 801046a:	79fb      	ldrb	r3, [r7, #7]
 801046c:	2b09      	cmp	r3, #9
 801046e:	f67f af65 	bls.w	801033c <etharp_tmr+0xc>
      }
    }
  }
}
 8010472:	bf00      	nop
 8010474:	bf00      	nop
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	2000810c 	.word	0x2000810c

08010480 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	460b      	mov	r3, r1
 801048a:	607a      	str	r2, [r7, #4]
 801048c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801048e:	230a      	movs	r3, #10
 8010490:	77fb      	strb	r3, [r7, #31]
 8010492:	230a      	movs	r3, #10
 8010494:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010496:	230a      	movs	r3, #10
 8010498:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801049a:	2300      	movs	r3, #0
 801049c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801049e:	230a      	movs	r3, #10
 80104a0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	833b      	strh	r3, [r7, #24]
 80104a6:	2300      	movs	r3, #0
 80104a8:	82fb      	strh	r3, [r7, #22]
 80104aa:	2300      	movs	r3, #0
 80104ac:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104ae:	2300      	movs	r3, #0
 80104b0:	773b      	strb	r3, [r7, #28]
 80104b2:	e093      	b.n	80105dc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80104b4:	7f3a      	ldrb	r2, [r7, #28]
 80104b6:	4990      	ldr	r1, [pc, #576]	@ (80106f8 <etharp_find_entry+0x278>)
 80104b8:	4613      	mov	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	4413      	add	r3, r2
 80104be:	00db      	lsls	r3, r3, #3
 80104c0:	440b      	add	r3, r1
 80104c2:	3314      	adds	r3, #20
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80104c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80104cc:	2b0a      	cmp	r3, #10
 80104ce:	d105      	bne.n	80104dc <etharp_find_entry+0x5c>
 80104d0:	7cfb      	ldrb	r3, [r7, #19]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d102      	bne.n	80104dc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80104d6:	7f3b      	ldrb	r3, [r7, #28]
 80104d8:	777b      	strb	r3, [r7, #29]
 80104da:	e07c      	b.n	80105d6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80104dc:	7cfb      	ldrb	r3, [r7, #19]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d079      	beq.n	80105d6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80104e2:	7cfb      	ldrb	r3, [r7, #19]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d009      	beq.n	80104fc <etharp_find_entry+0x7c>
 80104e8:	7cfb      	ldrb	r3, [r7, #19]
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d806      	bhi.n	80104fc <etharp_find_entry+0x7c>
 80104ee:	4b83      	ldr	r3, [pc, #524]	@ (80106fc <etharp_find_entry+0x27c>)
 80104f0:	f240 1225 	movw	r2, #293	@ 0x125
 80104f4:	4982      	ldr	r1, [pc, #520]	@ (8010700 <etharp_find_entry+0x280>)
 80104f6:	4883      	ldr	r0, [pc, #524]	@ (8010704 <etharp_find_entry+0x284>)
 80104f8:	f002 fe46 	bl	8013188 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00f      	beq.n	8010522 <etharp_find_entry+0xa2>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6819      	ldr	r1, [r3, #0]
 8010506:	7f3a      	ldrb	r2, [r7, #28]
 8010508:	487b      	ldr	r0, [pc, #492]	@ (80106f8 <etharp_find_entry+0x278>)
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	00db      	lsls	r3, r3, #3
 8010512:	4403      	add	r3, r0
 8010514:	3304      	adds	r3, #4
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4299      	cmp	r1, r3
 801051a:	d102      	bne.n	8010522 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801051c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010520:	e0e5      	b.n	80106ee <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010522:	7cfb      	ldrb	r3, [r7, #19]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d13b      	bne.n	80105a0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010528:	7f3a      	ldrb	r2, [r7, #28]
 801052a:	4973      	ldr	r1, [pc, #460]	@ (80106f8 <etharp_find_entry+0x278>)
 801052c:	4613      	mov	r3, r2
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	4413      	add	r3, r2
 8010532:	00db      	lsls	r3, r3, #3
 8010534:	440b      	add	r3, r1
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d018      	beq.n	801056e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801053c:	7f3a      	ldrb	r2, [r7, #28]
 801053e:	496e      	ldr	r1, [pc, #440]	@ (80106f8 <etharp_find_entry+0x278>)
 8010540:	4613      	mov	r3, r2
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	4413      	add	r3, r2
 8010546:	00db      	lsls	r3, r3, #3
 8010548:	440b      	add	r3, r1
 801054a:	3312      	adds	r3, #18
 801054c:	881b      	ldrh	r3, [r3, #0]
 801054e:	8b3a      	ldrh	r2, [r7, #24]
 8010550:	429a      	cmp	r2, r3
 8010552:	d840      	bhi.n	80105d6 <etharp_find_entry+0x156>
            old_queue = i;
 8010554:	7f3b      	ldrb	r3, [r7, #28]
 8010556:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8010558:	7f3a      	ldrb	r2, [r7, #28]
 801055a:	4967      	ldr	r1, [pc, #412]	@ (80106f8 <etharp_find_entry+0x278>)
 801055c:	4613      	mov	r3, r2
 801055e:	005b      	lsls	r3, r3, #1
 8010560:	4413      	add	r3, r2
 8010562:	00db      	lsls	r3, r3, #3
 8010564:	440b      	add	r3, r1
 8010566:	3312      	adds	r3, #18
 8010568:	881b      	ldrh	r3, [r3, #0]
 801056a:	833b      	strh	r3, [r7, #24]
 801056c:	e033      	b.n	80105d6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801056e:	7f3a      	ldrb	r2, [r7, #28]
 8010570:	4961      	ldr	r1, [pc, #388]	@ (80106f8 <etharp_find_entry+0x278>)
 8010572:	4613      	mov	r3, r2
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	4413      	add	r3, r2
 8010578:	00db      	lsls	r3, r3, #3
 801057a:	440b      	add	r3, r1
 801057c:	3312      	adds	r3, #18
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	8afa      	ldrh	r2, [r7, #22]
 8010582:	429a      	cmp	r2, r3
 8010584:	d827      	bhi.n	80105d6 <etharp_find_entry+0x156>
            old_pending = i;
 8010586:	7f3b      	ldrb	r3, [r7, #28]
 8010588:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801058a:	7f3a      	ldrb	r2, [r7, #28]
 801058c:	495a      	ldr	r1, [pc, #360]	@ (80106f8 <etharp_find_entry+0x278>)
 801058e:	4613      	mov	r3, r2
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	4413      	add	r3, r2
 8010594:	00db      	lsls	r3, r3, #3
 8010596:	440b      	add	r3, r1
 8010598:	3312      	adds	r3, #18
 801059a:	881b      	ldrh	r3, [r3, #0]
 801059c:	82fb      	strh	r3, [r7, #22]
 801059e:	e01a      	b.n	80105d6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80105a0:	7cfb      	ldrb	r3, [r7, #19]
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d917      	bls.n	80105d6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80105a6:	7f3a      	ldrb	r2, [r7, #28]
 80105a8:	4953      	ldr	r1, [pc, #332]	@ (80106f8 <etharp_find_entry+0x278>)
 80105aa:	4613      	mov	r3, r2
 80105ac:	005b      	lsls	r3, r3, #1
 80105ae:	4413      	add	r3, r2
 80105b0:	00db      	lsls	r3, r3, #3
 80105b2:	440b      	add	r3, r1
 80105b4:	3312      	adds	r3, #18
 80105b6:	881b      	ldrh	r3, [r3, #0]
 80105b8:	8aba      	ldrh	r2, [r7, #20]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	d80b      	bhi.n	80105d6 <etharp_find_entry+0x156>
            old_stable = i;
 80105be:	7f3b      	ldrb	r3, [r7, #28]
 80105c0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80105c2:	7f3a      	ldrb	r2, [r7, #28]
 80105c4:	494c      	ldr	r1, [pc, #304]	@ (80106f8 <etharp_find_entry+0x278>)
 80105c6:	4613      	mov	r3, r2
 80105c8:	005b      	lsls	r3, r3, #1
 80105ca:	4413      	add	r3, r2
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	440b      	add	r3, r1
 80105d0:	3312      	adds	r3, #18
 80105d2:	881b      	ldrh	r3, [r3, #0]
 80105d4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105d6:	7f3b      	ldrb	r3, [r7, #28]
 80105d8:	3301      	adds	r3, #1
 80105da:	773b      	strb	r3, [r7, #28]
 80105dc:	7f3b      	ldrb	r3, [r7, #28]
 80105de:	2b09      	cmp	r3, #9
 80105e0:	f67f af68 	bls.w	80104b4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80105e4:	7afb      	ldrb	r3, [r7, #11]
 80105e6:	f003 0302 	and.w	r3, r3, #2
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d108      	bne.n	8010600 <etharp_find_entry+0x180>
 80105ee:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80105f2:	2b0a      	cmp	r3, #10
 80105f4:	d107      	bne.n	8010606 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80105f6:	7afb      	ldrb	r3, [r7, #11]
 80105f8:	f003 0301 	and.w	r3, r3, #1
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d102      	bne.n	8010606 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010600:	f04f 33ff 	mov.w	r3, #4294967295
 8010604:	e073      	b.n	80106ee <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010606:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801060a:	2b09      	cmp	r3, #9
 801060c:	dc02      	bgt.n	8010614 <etharp_find_entry+0x194>
    i = empty;
 801060e:	7f7b      	ldrb	r3, [r7, #29]
 8010610:	773b      	strb	r3, [r7, #28]
 8010612:	e036      	b.n	8010682 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010614:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010618:	2b09      	cmp	r3, #9
 801061a:	dc13      	bgt.n	8010644 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801061c:	7fbb      	ldrb	r3, [r7, #30]
 801061e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010620:	7f3a      	ldrb	r2, [r7, #28]
 8010622:	4935      	ldr	r1, [pc, #212]	@ (80106f8 <etharp_find_entry+0x278>)
 8010624:	4613      	mov	r3, r2
 8010626:	005b      	lsls	r3, r3, #1
 8010628:	4413      	add	r3, r2
 801062a:	00db      	lsls	r3, r3, #3
 801062c:	440b      	add	r3, r1
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d018      	beq.n	8010666 <etharp_find_entry+0x1e6>
 8010634:	4b31      	ldr	r3, [pc, #196]	@ (80106fc <etharp_find_entry+0x27c>)
 8010636:	f240 126f 	movw	r2, #367	@ 0x16f
 801063a:	4933      	ldr	r1, [pc, #204]	@ (8010708 <etharp_find_entry+0x288>)
 801063c:	4831      	ldr	r0, [pc, #196]	@ (8010704 <etharp_find_entry+0x284>)
 801063e:	f002 fda3 	bl	8013188 <iprintf>
 8010642:	e010      	b.n	8010666 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010648:	2b09      	cmp	r3, #9
 801064a:	dc02      	bgt.n	8010652 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801064c:	7ffb      	ldrb	r3, [r7, #31]
 801064e:	773b      	strb	r3, [r7, #28]
 8010650:	e009      	b.n	8010666 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010652:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010656:	2b09      	cmp	r3, #9
 8010658:	dc02      	bgt.n	8010660 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801065a:	7efb      	ldrb	r3, [r7, #27]
 801065c:	773b      	strb	r3, [r7, #28]
 801065e:	e002      	b.n	8010666 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010660:	f04f 33ff 	mov.w	r3, #4294967295
 8010664:	e043      	b.n	80106ee <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010666:	7f3b      	ldrb	r3, [r7, #28]
 8010668:	2b09      	cmp	r3, #9
 801066a:	d906      	bls.n	801067a <etharp_find_entry+0x1fa>
 801066c:	4b23      	ldr	r3, [pc, #140]	@ (80106fc <etharp_find_entry+0x27c>)
 801066e:	f240 1281 	movw	r2, #385	@ 0x181
 8010672:	4926      	ldr	r1, [pc, #152]	@ (801070c <etharp_find_entry+0x28c>)
 8010674:	4823      	ldr	r0, [pc, #140]	@ (8010704 <etharp_find_entry+0x284>)
 8010676:	f002 fd87 	bl	8013188 <iprintf>
    etharp_free_entry(i);
 801067a:	7f3b      	ldrb	r3, [r7, #28]
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff fe25 	bl	80102cc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010682:	7f3b      	ldrb	r3, [r7, #28]
 8010684:	2b09      	cmp	r3, #9
 8010686:	d906      	bls.n	8010696 <etharp_find_entry+0x216>
 8010688:	4b1c      	ldr	r3, [pc, #112]	@ (80106fc <etharp_find_entry+0x27c>)
 801068a:	f240 1285 	movw	r2, #389	@ 0x185
 801068e:	491f      	ldr	r1, [pc, #124]	@ (801070c <etharp_find_entry+0x28c>)
 8010690:	481c      	ldr	r0, [pc, #112]	@ (8010704 <etharp_find_entry+0x284>)
 8010692:	f002 fd79 	bl	8013188 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010696:	7f3a      	ldrb	r2, [r7, #28]
 8010698:	4917      	ldr	r1, [pc, #92]	@ (80106f8 <etharp_find_entry+0x278>)
 801069a:	4613      	mov	r3, r2
 801069c:	005b      	lsls	r3, r3, #1
 801069e:	4413      	add	r3, r2
 80106a0:	00db      	lsls	r3, r3, #3
 80106a2:	440b      	add	r3, r1
 80106a4:	3314      	adds	r3, #20
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d006      	beq.n	80106ba <etharp_find_entry+0x23a>
 80106ac:	4b13      	ldr	r3, [pc, #76]	@ (80106fc <etharp_find_entry+0x27c>)
 80106ae:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 80106b2:	4917      	ldr	r1, [pc, #92]	@ (8010710 <etharp_find_entry+0x290>)
 80106b4:	4813      	ldr	r0, [pc, #76]	@ (8010704 <etharp_find_entry+0x284>)
 80106b6:	f002 fd67 	bl	8013188 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00a      	beq.n	80106d6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80106c0:	7f3a      	ldrb	r2, [r7, #28]
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6819      	ldr	r1, [r3, #0]
 80106c6:	480c      	ldr	r0, [pc, #48]	@ (80106f8 <etharp_find_entry+0x278>)
 80106c8:	4613      	mov	r3, r2
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	4413      	add	r3, r2
 80106ce:	00db      	lsls	r3, r3, #3
 80106d0:	4403      	add	r3, r0
 80106d2:	3304      	adds	r3, #4
 80106d4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80106d6:	7f3a      	ldrb	r2, [r7, #28]
 80106d8:	4907      	ldr	r1, [pc, #28]	@ (80106f8 <etharp_find_entry+0x278>)
 80106da:	4613      	mov	r3, r2
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4413      	add	r3, r2
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	440b      	add	r3, r1
 80106e4:	3312      	adds	r3, #18
 80106e6:	2200      	movs	r2, #0
 80106e8:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80106ea:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3720      	adds	r7, #32
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	2000810c 	.word	0x2000810c
 80106fc:	08015c0c 	.word	0x08015c0c
 8010700:	08015c44 	.word	0x08015c44
 8010704:	08015c84 	.word	0x08015c84
 8010708:	08015cac 	.word	0x08015cac
 801070c:	08015cc4 	.word	0x08015cc4
 8010710:	08015cd8 	.word	0x08015cd8

08010714 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af02      	add	r7, sp, #8
 801071a:	60f8      	str	r0, [r7, #12]
 801071c:	60b9      	str	r1, [r7, #8]
 801071e:	607a      	str	r2, [r7, #4]
 8010720:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010728:	2b06      	cmp	r3, #6
 801072a:	d006      	beq.n	801073a <etharp_update_arp_entry+0x26>
 801072c:	4b48      	ldr	r3, [pc, #288]	@ (8010850 <etharp_update_arp_entry+0x13c>)
 801072e:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8010732:	4948      	ldr	r1, [pc, #288]	@ (8010854 <etharp_update_arp_entry+0x140>)
 8010734:	4848      	ldr	r0, [pc, #288]	@ (8010858 <etharp_update_arp_entry+0x144>)
 8010736:	f002 fd27 	bl	8013188 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d012      	beq.n	8010766 <etharp_update_arp_entry+0x52>
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00e      	beq.n	8010766 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	68f9      	ldr	r1, [r7, #12]
 801074e:	4618      	mov	r0, r3
 8010750:	f001 f8a8 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8010754:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010756:	2b00      	cmp	r3, #0
 8010758:	d105      	bne.n	8010766 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010762:	2be0      	cmp	r3, #224	@ 0xe0
 8010764:	d102      	bne.n	801076c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010766:	f06f 030f 	mvn.w	r3, #15
 801076a:	e06c      	b.n	8010846 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801076c:	78fb      	ldrb	r3, [r7, #3]
 801076e:	68fa      	ldr	r2, [r7, #12]
 8010770:	4619      	mov	r1, r3
 8010772:	68b8      	ldr	r0, [r7, #8]
 8010774:	f7ff fe84 	bl	8010480 <etharp_find_entry>
 8010778:	4603      	mov	r3, r0
 801077a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801077c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010780:	2b00      	cmp	r3, #0
 8010782:	da02      	bge.n	801078a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010788:	e05d      	b.n	8010846 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801078a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801078e:	4933      	ldr	r1, [pc, #204]	@ (801085c <etharp_update_arp_entry+0x148>)
 8010790:	4613      	mov	r3, r2
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	4413      	add	r3, r2
 8010796:	00db      	lsls	r3, r3, #3
 8010798:	440b      	add	r3, r1
 801079a:	3314      	adds	r3, #20
 801079c:	2202      	movs	r2, #2
 801079e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80107a0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80107a4:	492d      	ldr	r1, [pc, #180]	@ (801085c <etharp_update_arp_entry+0x148>)
 80107a6:	4613      	mov	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4413      	add	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	440b      	add	r3, r1
 80107b0:	3308      	adds	r3, #8
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80107b6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80107ba:	4613      	mov	r3, r2
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	4413      	add	r3, r2
 80107c0:	00db      	lsls	r3, r3, #3
 80107c2:	3308      	adds	r3, #8
 80107c4:	4a25      	ldr	r2, [pc, #148]	@ (801085c <etharp_update_arp_entry+0x148>)
 80107c6:	4413      	add	r3, r2
 80107c8:	3304      	adds	r3, #4
 80107ca:	2206      	movs	r2, #6
 80107cc:	6879      	ldr	r1, [r7, #4]
 80107ce:	4618      	mov	r0, r3
 80107d0:	f002 fedb 	bl	801358a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80107d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80107d8:	4920      	ldr	r1, [pc, #128]	@ (801085c <etharp_update_arp_entry+0x148>)
 80107da:	4613      	mov	r3, r2
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	4413      	add	r3, r2
 80107e0:	00db      	lsls	r3, r3, #3
 80107e2:	440b      	add	r3, r1
 80107e4:	3312      	adds	r3, #18
 80107e6:	2200      	movs	r2, #0
 80107e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80107ea:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80107ee:	491b      	ldr	r1, [pc, #108]	@ (801085c <etharp_update_arp_entry+0x148>)
 80107f0:	4613      	mov	r3, r2
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	4413      	add	r3, r2
 80107f6:	00db      	lsls	r3, r3, #3
 80107f8:	440b      	add	r3, r1
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d021      	beq.n	8010844 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010800:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010804:	4915      	ldr	r1, [pc, #84]	@ (801085c <etharp_update_arp_entry+0x148>)
 8010806:	4613      	mov	r3, r2
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	4413      	add	r3, r2
 801080c:	00db      	lsls	r3, r3, #3
 801080e:	440b      	add	r3, r1
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010814:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010818:	4910      	ldr	r1, [pc, #64]	@ (801085c <etharp_update_arp_entry+0x148>)
 801081a:	4613      	mov	r3, r2
 801081c:	005b      	lsls	r3, r3, #1
 801081e:	4413      	add	r3, r2
 8010820:	00db      	lsls	r3, r3, #3
 8010822:	440b      	add	r3, r1
 8010824:	2200      	movs	r2, #0
 8010826:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 801082e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010832:	9300      	str	r3, [sp, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	6939      	ldr	r1, [r7, #16]
 8010838:	68f8      	ldr	r0, [r7, #12]
 801083a:	f001 fed5 	bl	80125e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801083e:	6938      	ldr	r0, [r7, #16]
 8010840:	f7fa faba 	bl	800adb8 <pbuf_free>
  }
  return ERR_OK;
 8010844:	2300      	movs	r3, #0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	08015c0c 	.word	0x08015c0c
 8010854:	08015d04 	.word	0x08015d04
 8010858:	08015c84 	.word	0x08015c84
 801085c:	2000810c 	.word	0x2000810c

08010860 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010860:	b5b0      	push	{r4, r5, r7, lr}
 8010862:	b08a      	sub	sp, #40	@ 0x28
 8010864:	af04      	add	r7, sp, #16
 8010866:	6078      	str	r0, [r7, #4]
 8010868:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d107      	bne.n	8010880 <etharp_input+0x20>
 8010870:	4b3d      	ldr	r3, [pc, #244]	@ (8010968 <etharp_input+0x108>)
 8010872:	f44f 7222 	mov.w	r2, #648	@ 0x288
 8010876:	493d      	ldr	r1, [pc, #244]	@ (801096c <etharp_input+0x10c>)
 8010878:	483d      	ldr	r0, [pc, #244]	@ (8010970 <etharp_input+0x110>)
 801087a:	f002 fc85 	bl	8013188 <iprintf>
 801087e:	e06f      	b.n	8010960 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	b29b      	uxth	r3, r3
 801088c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010890:	d10c      	bne.n	80108ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010896:	2b06      	cmp	r3, #6
 8010898:	d108      	bne.n	80108ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801089e:	2b04      	cmp	r3, #4
 80108a0:	d104      	bne.n	80108ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	885b      	ldrh	r3, [r3, #2]
 80108a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108a8:	2b08      	cmp	r3, #8
 80108aa:	d003      	beq.n	80108b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7fa fa83 	bl	800adb8 <pbuf_free>
    return;
 80108b2:	e055      	b.n	8010960 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	330e      	adds	r3, #14
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	3318      	adds	r3, #24
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	3304      	adds	r3, #4
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d102      	bne.n	80108d4 <etharp_input+0x74>
    for_us = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	75fb      	strb	r3, [r7, #23]
 80108d2:	e009      	b.n	80108e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80108d4:	68ba      	ldr	r2, [r7, #8]
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	3304      	adds	r3, #4
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	429a      	cmp	r2, r3
 80108de:	bf0c      	ite	eq
 80108e0:	2301      	moveq	r3, #1
 80108e2:	2300      	movne	r3, #0
 80108e4:	b2db      	uxtb	r3, r3
 80108e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80108e8:	693b      	ldr	r3, [r7, #16]
 80108ea:	f103 0208 	add.w	r2, r3, #8
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d001      	beq.n	80108f8 <etharp_input+0x98>
 80108f4:	2301      	movs	r3, #1
 80108f6:	e000      	b.n	80108fa <etharp_input+0x9a>
 80108f8:	2302      	movs	r3, #2
 80108fa:	f107 010c 	add.w	r1, r7, #12
 80108fe:	6838      	ldr	r0, [r7, #0]
 8010900:	f7ff ff08 	bl	8010714 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	88db      	ldrh	r3, [r3, #6]
 8010908:	b29b      	uxth	r3, r3
 801090a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801090e:	d003      	beq.n	8010918 <etharp_input+0xb8>
 8010910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010914:	d01e      	beq.n	8010954 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010916:	e020      	b.n	801095a <etharp_input+0xfa>
    if (for_us) {
 8010918:	7dfb      	ldrb	r3, [r7, #23]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d01c      	beq.n	8010958 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010934:	693a      	ldr	r2, [r7, #16]
 8010936:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010938:	2102      	movs	r1, #2
 801093a:	9103      	str	r1, [sp, #12]
 801093c:	f107 010c 	add.w	r1, r7, #12
 8010940:	9102      	str	r1, [sp, #8]
 8010942:	9201      	str	r2, [sp, #4]
 8010944:	9300      	str	r3, [sp, #0]
 8010946:	462b      	mov	r3, r5
 8010948:	4622      	mov	r2, r4
 801094a:	4601      	mov	r1, r0
 801094c:	6838      	ldr	r0, [r7, #0]
 801094e:	f000 fae1 	bl	8010f14 <etharp_raw>
    break;
 8010952:	e001      	b.n	8010958 <etharp_input+0xf8>
    break;
 8010954:	bf00      	nop
 8010956:	e000      	b.n	801095a <etharp_input+0xfa>
    break;
 8010958:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7fa fa2c 	bl	800adb8 <pbuf_free>
}
 8010960:	3718      	adds	r7, #24
 8010962:	46bd      	mov	sp, r7
 8010964:	bdb0      	pop	{r4, r5, r7, pc}
 8010966:	bf00      	nop
 8010968:	08015c0c 	.word	0x08015c0c
 801096c:	08015d5c 	.word	0x08015d5c
 8010970:	08015c84 	.word	0x08015c84

08010974 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af02      	add	r7, sp, #8
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	4613      	mov	r3, r2
 8010980:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010982:	79fa      	ldrb	r2, [r7, #7]
 8010984:	4944      	ldr	r1, [pc, #272]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010986:	4613      	mov	r3, r2
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	00db      	lsls	r3, r3, #3
 801098e:	440b      	add	r3, r1
 8010990:	3314      	adds	r3, #20
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d806      	bhi.n	80109a6 <etharp_output_to_arp_index+0x32>
 8010998:	4b40      	ldr	r3, [pc, #256]	@ (8010a9c <etharp_output_to_arp_index+0x128>)
 801099a:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 801099e:	4940      	ldr	r1, [pc, #256]	@ (8010aa0 <etharp_output_to_arp_index+0x12c>)
 80109a0:	4840      	ldr	r0, [pc, #256]	@ (8010aa4 <etharp_output_to_arp_index+0x130>)
 80109a2:	f002 fbf1 	bl	8013188 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80109a6:	79fa      	ldrb	r2, [r7, #7]
 80109a8:	493b      	ldr	r1, [pc, #236]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 80109aa:	4613      	mov	r3, r2
 80109ac:	005b      	lsls	r3, r3, #1
 80109ae:	4413      	add	r3, r2
 80109b0:	00db      	lsls	r3, r3, #3
 80109b2:	440b      	add	r3, r1
 80109b4:	3314      	adds	r3, #20
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	2b02      	cmp	r3, #2
 80109ba:	d153      	bne.n	8010a64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80109bc:	79fa      	ldrb	r2, [r7, #7]
 80109be:	4936      	ldr	r1, [pc, #216]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 80109c0:	4613      	mov	r3, r2
 80109c2:	005b      	lsls	r3, r3, #1
 80109c4:	4413      	add	r3, r2
 80109c6:	00db      	lsls	r3, r3, #3
 80109c8:	440b      	add	r3, r1
 80109ca:	3312      	adds	r3, #18
 80109cc:	881b      	ldrh	r3, [r3, #0]
 80109ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80109d2:	d919      	bls.n	8010a08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80109d4:	79fa      	ldrb	r2, [r7, #7]
 80109d6:	4613      	mov	r3, r2
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	4413      	add	r3, r2
 80109dc:	00db      	lsls	r3, r3, #3
 80109de:	4a2e      	ldr	r2, [pc, #184]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 80109e0:	4413      	add	r3, r2
 80109e2:	3304      	adds	r3, #4
 80109e4:	4619      	mov	r1, r3
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f000 fb42 	bl	8011070 <etharp_request>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d138      	bne.n	8010a64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80109f2:	79fa      	ldrb	r2, [r7, #7]
 80109f4:	4928      	ldr	r1, [pc, #160]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 80109f6:	4613      	mov	r3, r2
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	4413      	add	r3, r2
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	440b      	add	r3, r1
 8010a00:	3314      	adds	r3, #20
 8010a02:	2203      	movs	r2, #3
 8010a04:	701a      	strb	r2, [r3, #0]
 8010a06:	e02d      	b.n	8010a64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010a08:	79fa      	ldrb	r2, [r7, #7]
 8010a0a:	4923      	ldr	r1, [pc, #140]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	440b      	add	r3, r1
 8010a16:	3312      	adds	r3, #18
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010a1e:	d321      	bcc.n	8010a64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010a20:	79fa      	ldrb	r2, [r7, #7]
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	00db      	lsls	r3, r3, #3
 8010a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010a2c:	4413      	add	r3, r2
 8010a2e:	1d19      	adds	r1, r3, #4
 8010a30:	79fa      	ldrb	r2, [r7, #7]
 8010a32:	4613      	mov	r3, r2
 8010a34:	005b      	lsls	r3, r3, #1
 8010a36:	4413      	add	r3, r2
 8010a38:	00db      	lsls	r3, r3, #3
 8010a3a:	3308      	adds	r3, #8
 8010a3c:	4a16      	ldr	r2, [pc, #88]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010a3e:	4413      	add	r3, r2
 8010a40:	3304      	adds	r3, #4
 8010a42:	461a      	mov	r2, r3
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f000 faf1 	bl	801102c <etharp_request_dst>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d109      	bne.n	8010a64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a50:	79fa      	ldrb	r2, [r7, #7]
 8010a52:	4911      	ldr	r1, [pc, #68]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010a54:	4613      	mov	r3, r2
 8010a56:	005b      	lsls	r3, r3, #1
 8010a58:	4413      	add	r3, r2
 8010a5a:	00db      	lsls	r3, r3, #3
 8010a5c:	440b      	add	r3, r1
 8010a5e:	3314      	adds	r3, #20
 8010a60:	2203      	movs	r2, #3
 8010a62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 8010a6a:	79fa      	ldrb	r2, [r7, #7]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	3308      	adds	r3, #8
 8010a76:	4a08      	ldr	r2, [pc, #32]	@ (8010a98 <etharp_output_to_arp_index+0x124>)
 8010a78:	4413      	add	r3, r2
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a80:	9200      	str	r2, [sp, #0]
 8010a82:	460a      	mov	r2, r1
 8010a84:	68b9      	ldr	r1, [r7, #8]
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f001 fdae 	bl	80125e8 <ethernet_output>
 8010a8c:	4603      	mov	r3, r0
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	2000810c 	.word	0x2000810c
 8010a9c:	08015c0c 	.word	0x08015c0c
 8010aa0:	08015d7c 	.word	0x08015d7c
 8010aa4:	08015c84 	.word	0x08015c84

08010aa8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b08a      	sub	sp, #40	@ 0x28
 8010aac:	af02      	add	r7, sp, #8
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <etharp_output+0x24>
 8010abe:	4b69      	ldr	r3, [pc, #420]	@ (8010c64 <etharp_output+0x1bc>)
 8010ac0:	f240 321b 	movw	r2, #795	@ 0x31b
 8010ac4:	4968      	ldr	r1, [pc, #416]	@ (8010c68 <etharp_output+0x1c0>)
 8010ac6:	4869      	ldr	r0, [pc, #420]	@ (8010c6c <etharp_output+0x1c4>)
 8010ac8:	f002 fb5e 	bl	8013188 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <etharp_output+0x38>
 8010ad2:	4b64      	ldr	r3, [pc, #400]	@ (8010c64 <etharp_output+0x1bc>)
 8010ad4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010ad8:	4965      	ldr	r1, [pc, #404]	@ (8010c70 <etharp_output+0x1c8>)
 8010ada:	4864      	ldr	r0, [pc, #400]	@ (8010c6c <etharp_output+0x1c4>)
 8010adc:	f002 fb54 	bl	8013188 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d106      	bne.n	8010af4 <etharp_output+0x4c>
 8010ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8010c64 <etharp_output+0x1bc>)
 8010ae8:	f240 321d 	movw	r2, #797	@ 0x31d
 8010aec:	4961      	ldr	r1, [pc, #388]	@ (8010c74 <etharp_output+0x1cc>)
 8010aee:	485f      	ldr	r0, [pc, #380]	@ (8010c6c <etharp_output+0x1c4>)
 8010af0:	f002 fb4a 	bl	8013188 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68f9      	ldr	r1, [r7, #12]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f000 fed2 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8010b00:	4603      	mov	r3, r0
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d002      	beq.n	8010b0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010b06:	4b5c      	ldr	r3, [pc, #368]	@ (8010c78 <etharp_output+0x1d0>)
 8010b08:	61fb      	str	r3, [r7, #28]
 8010b0a:	e09b      	b.n	8010c44 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b14:	2be0      	cmp	r3, #224	@ 0xe0
 8010b16:	d118      	bne.n	8010b4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010b20:	235e      	movs	r3, #94	@ 0x5e
 8010b22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	3301      	adds	r3, #1
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	3302      	adds	r3, #2
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	3303      	adds	r3, #3
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010b42:	f107 0310 	add.w	r3, r7, #16
 8010b46:	61fb      	str	r3, [r7, #28]
 8010b48:	e07c      	b.n	8010c44 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681a      	ldr	r2, [r3, #0]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3304      	adds	r3, #4
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	405a      	eors	r2, r3
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3308      	adds	r3, #8
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	4013      	ands	r3, r2
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d012      	beq.n	8010b88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b68:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	d00b      	beq.n	8010b88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	330c      	adds	r3, #12
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d003      	beq.n	8010b82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	330c      	adds	r3, #12
 8010b7e:	61bb      	str	r3, [r7, #24]
 8010b80:	e002      	b.n	8010b88 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010b82:	f06f 0303 	mvn.w	r3, #3
 8010b86:	e069      	b.n	8010c5c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010b88:	4b3c      	ldr	r3, [pc, #240]	@ (8010c7c <etharp_output+0x1d4>)
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	4619      	mov	r1, r3
 8010b8e:	4a3c      	ldr	r2, [pc, #240]	@ (8010c80 <etharp_output+0x1d8>)
 8010b90:	460b      	mov	r3, r1
 8010b92:	005b      	lsls	r3, r3, #1
 8010b94:	440b      	add	r3, r1
 8010b96:	00db      	lsls	r3, r3, #3
 8010b98:	4413      	add	r3, r2
 8010b9a:	3314      	adds	r3, #20
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	2b01      	cmp	r3, #1
 8010ba0:	d917      	bls.n	8010bd2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	4b35      	ldr	r3, [pc, #212]	@ (8010c7c <etharp_output+0x1d4>)
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	4618      	mov	r0, r3
 8010bac:	4934      	ldr	r1, [pc, #208]	@ (8010c80 <etharp_output+0x1d8>)
 8010bae:	4603      	mov	r3, r0
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4403      	add	r3, r0
 8010bb4:	00db      	lsls	r3, r3, #3
 8010bb6:	440b      	add	r3, r1
 8010bb8:	3304      	adds	r3, #4
 8010bba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d108      	bne.n	8010bd2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8010c7c <etharp_output+0x1d4>)
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	68b9      	ldr	r1, [r7, #8]
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f7ff fed3 	bl	8010974 <etharp_output_to_arp_index>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	e044      	b.n	8010c5c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	75fb      	strb	r3, [r7, #23]
 8010bd6:	e02a      	b.n	8010c2e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010bd8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010bdc:	4928      	ldr	r1, [pc, #160]	@ (8010c80 <etharp_output+0x1d8>)
 8010bde:	4613      	mov	r3, r2
 8010be0:	005b      	lsls	r3, r3, #1
 8010be2:	4413      	add	r3, r2
 8010be4:	00db      	lsls	r3, r3, #3
 8010be6:	440b      	add	r3, r1
 8010be8:	3314      	adds	r3, #20
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d918      	bls.n	8010c22 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	6819      	ldr	r1, [r3, #0]
 8010bf4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010bf8:	4821      	ldr	r0, [pc, #132]	@ (8010c80 <etharp_output+0x1d8>)
 8010bfa:	4613      	mov	r3, r2
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	4413      	add	r3, r2
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	4403      	add	r3, r0
 8010c04:	3304      	adds	r3, #4
 8010c06:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c08:	4299      	cmp	r1, r3
 8010c0a:	d10a      	bne.n	8010c22 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010c0c:	7dfa      	ldrb	r2, [r7, #23]
 8010c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8010c7c <etharp_output+0x1d4>)
 8010c10:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010c12:	7dfb      	ldrb	r3, [r7, #23]
 8010c14:	461a      	mov	r2, r3
 8010c16:	68b9      	ldr	r1, [r7, #8]
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f7ff feab 	bl	8010974 <etharp_output_to_arp_index>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	e01c      	b.n	8010c5c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	3301      	adds	r3, #1
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	75fb      	strb	r3, [r7, #23]
 8010c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c32:	2b09      	cmp	r3, #9
 8010c34:	ddd0      	ble.n	8010bd8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010c36:	68ba      	ldr	r2, [r7, #8]
 8010c38:	69b9      	ldr	r1, [r7, #24]
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f000 f822 	bl	8010c84 <etharp_query>
 8010c40:	4603      	mov	r3, r0
 8010c42:	e00b      	b.n	8010c5c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8010c4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	68b9      	ldr	r1, [r7, #8]
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f001 fcc7 	bl	80125e8 <ethernet_output>
 8010c5a:	4603      	mov	r3, r0
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	3720      	adds	r7, #32
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	08015c0c 	.word	0x08015c0c
 8010c68:	08015d5c 	.word	0x08015d5c
 8010c6c:	08015c84 	.word	0x08015c84
 8010c70:	08015dac 	.word	0x08015dac
 8010c74:	08015d4c 	.word	0x08015d4c
 8010c78:	080163dc 	.word	0x080163dc
 8010c7c:	200081fc 	.word	0x200081fc
 8010c80:	2000810c 	.word	0x2000810c

08010c84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08c      	sub	sp, #48	@ 0x30
 8010c88:	af02      	add	r7, sp, #8
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	3329      	adds	r3, #41	@ 0x29
 8010c94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010c96:	23ff      	movs	r3, #255	@ 0xff
 8010c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	68f9      	ldr	r1, [r7, #12]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 fdfc 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d10c      	bne.n	8010ccc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010cba:	2be0      	cmp	r3, #224	@ 0xe0
 8010cbc:	d006      	beq.n	8010ccc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d003      	beq.n	8010ccc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010ccc:	f06f 030f 	mvn.w	r3, #15
 8010cd0:	e10e      	b.n	8010ef0 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	2101      	movs	r1, #1
 8010cd6:	68b8      	ldr	r0, [r7, #8]
 8010cd8:	f7ff fbd2 	bl	8010480 <etharp_find_entry>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010ce0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	da02      	bge.n	8010cee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8010ce8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010cec:	e100      	b.n	8010ef0 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010cee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010cf2:	4981      	ldr	r1, [pc, #516]	@ (8010ef8 <etharp_query+0x274>)
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	005b      	lsls	r3, r3, #1
 8010cf8:	4413      	add	r3, r2
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	440b      	add	r3, r1
 8010cfe:	3314      	adds	r3, #20
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d117      	bne.n	8010d36 <etharp_query+0xb2>
    is_new_entry = 1;
 8010d06:	2301      	movs	r3, #1
 8010d08:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010d0a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d0e:	497a      	ldr	r1, [pc, #488]	@ (8010ef8 <etharp_query+0x274>)
 8010d10:	4613      	mov	r3, r2
 8010d12:	005b      	lsls	r3, r3, #1
 8010d14:	4413      	add	r3, r2
 8010d16:	00db      	lsls	r3, r3, #3
 8010d18:	440b      	add	r3, r1
 8010d1a:	3314      	adds	r3, #20
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010d20:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d24:	4974      	ldr	r1, [pc, #464]	@ (8010ef8 <etharp_query+0x274>)
 8010d26:	4613      	mov	r3, r2
 8010d28:	005b      	lsls	r3, r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	00db      	lsls	r3, r3, #3
 8010d2e:	440b      	add	r3, r1
 8010d30:	3308      	adds	r3, #8
 8010d32:	68fa      	ldr	r2, [r7, #12]
 8010d34:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010d36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d3a:	496f      	ldr	r1, [pc, #444]	@ (8010ef8 <etharp_query+0x274>)
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	005b      	lsls	r3, r3, #1
 8010d40:	4413      	add	r3, r2
 8010d42:	00db      	lsls	r3, r3, #3
 8010d44:	440b      	add	r3, r1
 8010d46:	3314      	adds	r3, #20
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d012      	beq.n	8010d74 <etharp_query+0xf0>
 8010d4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010d52:	4969      	ldr	r1, [pc, #420]	@ (8010ef8 <etharp_query+0x274>)
 8010d54:	4613      	mov	r3, r2
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	4413      	add	r3, r2
 8010d5a:	00db      	lsls	r3, r3, #3
 8010d5c:	440b      	add	r3, r1
 8010d5e:	3314      	adds	r3, #20
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d806      	bhi.n	8010d74 <etharp_query+0xf0>
 8010d66:	4b65      	ldr	r3, [pc, #404]	@ (8010efc <etharp_query+0x278>)
 8010d68:	f240 32c7 	movw	r2, #967	@ 0x3c7
 8010d6c:	4964      	ldr	r1, [pc, #400]	@ (8010f00 <etharp_query+0x27c>)
 8010d6e:	4865      	ldr	r0, [pc, #404]	@ (8010f04 <etharp_query+0x280>)
 8010d70:	f002 fa0a 	bl	8013188 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d102      	bne.n	8010d80 <etharp_query+0xfc>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d10c      	bne.n	8010d9a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010d80:	68b9      	ldr	r1, [r7, #8]
 8010d82:	68f8      	ldr	r0, [r7, #12]
 8010d84:	f000 f974 	bl	8011070 <etharp_request>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d102      	bne.n	8010d9a <etharp_query+0x116>
      return result;
 8010d94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010d98:	e0aa      	b.n	8010ef0 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d106      	bne.n	8010dae <etharp_query+0x12a>
 8010da0:	4b56      	ldr	r3, [pc, #344]	@ (8010efc <etharp_query+0x278>)
 8010da2:	f240 32db 	movw	r2, #987	@ 0x3db
 8010da6:	4958      	ldr	r1, [pc, #352]	@ (8010f08 <etharp_query+0x284>)
 8010da8:	4856      	ldr	r0, [pc, #344]	@ (8010f04 <etharp_query+0x280>)
 8010daa:	f002 f9ed 	bl	8013188 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010dae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010db2:	4951      	ldr	r1, [pc, #324]	@ (8010ef8 <etharp_query+0x274>)
 8010db4:	4613      	mov	r3, r2
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	00db      	lsls	r3, r3, #3
 8010dbc:	440b      	add	r3, r1
 8010dbe:	3314      	adds	r3, #20
 8010dc0:	781b      	ldrb	r3, [r3, #0]
 8010dc2:	2b01      	cmp	r3, #1
 8010dc4:	d918      	bls.n	8010df8 <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8010dc6:	7cfa      	ldrb	r2, [r7, #19]
 8010dc8:	4b50      	ldr	r3, [pc, #320]	@ (8010f0c <etharp_query+0x288>)
 8010dca:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010dcc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010dd0:	4613      	mov	r3, r2
 8010dd2:	005b      	lsls	r3, r3, #1
 8010dd4:	4413      	add	r3, r2
 8010dd6:	00db      	lsls	r3, r3, #3
 8010dd8:	3308      	adds	r3, #8
 8010dda:	4a47      	ldr	r2, [pc, #284]	@ (8010ef8 <etharp_query+0x274>)
 8010ddc:	4413      	add	r3, r2
 8010dde:	3304      	adds	r3, #4
 8010de0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010de4:	9200      	str	r2, [sp, #0]
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	6879      	ldr	r1, [r7, #4]
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f001 fbfc 	bl	80125e8 <ethernet_output>
 8010df0:	4603      	mov	r3, r0
 8010df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010df6:	e079      	b.n	8010eec <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010df8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010dfc:	493e      	ldr	r1, [pc, #248]	@ (8010ef8 <etharp_query+0x274>)
 8010dfe:	4613      	mov	r3, r2
 8010e00:	005b      	lsls	r3, r3, #1
 8010e02:	4413      	add	r3, r2
 8010e04:	00db      	lsls	r3, r3, #3
 8010e06:	440b      	add	r3, r1
 8010e08:	3314      	adds	r3, #20
 8010e0a:	781b      	ldrb	r3, [r3, #0]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d16d      	bne.n	8010eec <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010e10:	2300      	movs	r3, #0
 8010e12:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010e18:	e01a      	b.n	8010e50 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010e1a:	69fb      	ldr	r3, [r7, #28]
 8010e1c:	895a      	ldrh	r2, [r3, #10]
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	891b      	ldrh	r3, [r3, #8]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d10a      	bne.n	8010e3c <etharp_query+0x1b8>
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d006      	beq.n	8010e3c <etharp_query+0x1b8>
 8010e2e:	4b33      	ldr	r3, [pc, #204]	@ (8010efc <etharp_query+0x278>)
 8010e30:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 8010e34:	4936      	ldr	r1, [pc, #216]	@ (8010f10 <etharp_query+0x28c>)
 8010e36:	4833      	ldr	r0, [pc, #204]	@ (8010f04 <etharp_query+0x280>)
 8010e38:	f002 f9a6 	bl	8013188 <iprintf>
      if (p->type != PBUF_ROM) {
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	7b1b      	ldrb	r3, [r3, #12]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d002      	beq.n	8010e4a <etharp_query+0x1c6>
        copy_needed = 1;
 8010e44:	2301      	movs	r3, #1
 8010e46:	61bb      	str	r3, [r7, #24]
        break;
 8010e48:	e005      	b.n	8010e56 <etharp_query+0x1d2>
      }
      p = p->next;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d1e1      	bne.n	8010e1a <etharp_query+0x196>
    }
    if (copy_needed) {
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d017      	beq.n	8010e8c <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8010e5c:	69fb      	ldr	r3, [r7, #28]
 8010e5e:	891b      	ldrh	r3, [r3, #8]
 8010e60:	2200      	movs	r2, #0
 8010e62:	4619      	mov	r1, r3
 8010e64:	2002      	movs	r0, #2
 8010e66:	f7f9 fc2f 	bl	800a6c8 <pbuf_alloc>
 8010e6a:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d011      	beq.n	8010e96 <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 8010e72:	6879      	ldr	r1, [r7, #4]
 8010e74:	69f8      	ldr	r0, [r7, #28]
 8010e76:	f7fa f8d1 	bl	800b01c <pbuf_copy>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d00a      	beq.n	8010e96 <etharp_query+0x212>
          pbuf_free(p);
 8010e80:	69f8      	ldr	r0, [r7, #28]
 8010e82:	f7f9 ff99 	bl	800adb8 <pbuf_free>
          p = NULL;
 8010e86:	2300      	movs	r3, #0
 8010e88:	61fb      	str	r3, [r7, #28]
 8010e8a:	e004      	b.n	8010e96 <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010e90:	69f8      	ldr	r0, [r7, #28]
 8010e92:	f7fa f83b 	bl	800af0c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d024      	beq.n	8010ee6 <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010e9c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010ea0:	4915      	ldr	r1, [pc, #84]	@ (8010ef8 <etharp_query+0x274>)
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	005b      	lsls	r3, r3, #1
 8010ea6:	4413      	add	r3, r2
 8010ea8:	00db      	lsls	r3, r3, #3
 8010eaa:	440b      	add	r3, r1
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00b      	beq.n	8010eca <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8010eb2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010eb6:	4910      	ldr	r1, [pc, #64]	@ (8010ef8 <etharp_query+0x274>)
 8010eb8:	4613      	mov	r3, r2
 8010eba:	005b      	lsls	r3, r3, #1
 8010ebc:	4413      	add	r3, r2
 8010ebe:	00db      	lsls	r3, r3, #3
 8010ec0:	440b      	add	r3, r1
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f9 ff77 	bl	800adb8 <pbuf_free>
      }
      arp_table[i].q = p;
 8010eca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8010ece:	490a      	ldr	r1, [pc, #40]	@ (8010ef8 <etharp_query+0x274>)
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	00db      	lsls	r3, r3, #3
 8010ed8:	440b      	add	r3, r1
 8010eda:	69fa      	ldr	r2, [r7, #28]
 8010edc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ee4:	e002      	b.n	8010eec <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010ee6:	23ff      	movs	r3, #255	@ 0xff
 8010ee8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010eec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3728      	adds	r7, #40	@ 0x28
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}
 8010ef8:	2000810c 	.word	0x2000810c
 8010efc:	08015c0c 	.word	0x08015c0c
 8010f00:	08015db8 	.word	0x08015db8
 8010f04:	08015c84 	.word	0x08015c84
 8010f08:	08015dac 	.word	0x08015dac
 8010f0c:	200081fc 	.word	0x200081fc
 8010f10:	08015de0 	.word	0x08015de0

08010f14 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b08a      	sub	sp, #40	@ 0x28
 8010f18:	af02      	add	r7, sp, #8
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]
 8010f20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010f22:	2300      	movs	r3, #0
 8010f24:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <etharp_raw+0x26>
 8010f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8011018 <etharp_raw+0x104>)
 8010f2e:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 8010f32:	493a      	ldr	r1, [pc, #232]	@ (801101c <etharp_raw+0x108>)
 8010f34:	483a      	ldr	r0, [pc, #232]	@ (8011020 <etharp_raw+0x10c>)
 8010f36:	f002 f927 	bl	8013188 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	211c      	movs	r1, #28
 8010f3e:	2002      	movs	r0, #2
 8010f40:	f7f9 fbc2 	bl	800a6c8 <pbuf_alloc>
 8010f44:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010f46:	69bb      	ldr	r3, [r7, #24]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d102      	bne.n	8010f52 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f50:	e05d      	b.n	801100e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010f52:	69bb      	ldr	r3, [r7, #24]
 8010f54:	895b      	ldrh	r3, [r3, #10]
 8010f56:	2b1b      	cmp	r3, #27
 8010f58:	d806      	bhi.n	8010f68 <etharp_raw+0x54>
 8010f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8011018 <etharp_raw+0x104>)
 8010f5c:	f240 4263 	movw	r2, #1123	@ 0x463
 8010f60:	4930      	ldr	r1, [pc, #192]	@ (8011024 <etharp_raw+0x110>)
 8010f62:	482f      	ldr	r0, [pc, #188]	@ (8011020 <etharp_raw+0x10c>)
 8010f64:	f002 f910 	bl	8013188 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010f6e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f8 fe11 	bl	8009b98 <lwip_htons>
 8010f76:	4603      	mov	r3, r0
 8010f78:	461a      	mov	r2, r3
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010f84:	2b06      	cmp	r3, #6
 8010f86:	d006      	beq.n	8010f96 <etharp_raw+0x82>
 8010f88:	4b23      	ldr	r3, [pc, #140]	@ (8011018 <etharp_raw+0x104>)
 8010f8a:	f240 426a 	movw	r2, #1130	@ 0x46a
 8010f8e:	4926      	ldr	r1, [pc, #152]	@ (8011028 <etharp_raw+0x114>)
 8010f90:	4823      	ldr	r0, [pc, #140]	@ (8011020 <etharp_raw+0x10c>)
 8010f92:	f002 f8f9 	bl	8013188 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	3308      	adds	r3, #8
 8010f9a:	2206      	movs	r2, #6
 8010f9c:	6839      	ldr	r1, [r7, #0]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f002 faf3 	bl	801358a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	3312      	adds	r3, #18
 8010fa8:	2206      	movs	r2, #6
 8010faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fac:	4618      	mov	r0, r3
 8010fae:	f002 faec 	bl	801358a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	330e      	adds	r3, #14
 8010fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010fb8:	6812      	ldr	r2, [r2, #0]
 8010fba:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8010fbc:	697b      	ldr	r3, [r7, #20]
 8010fbe:	3318      	adds	r3, #24
 8010fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010fc2:	6812      	ldr	r2, [r2, #0]
 8010fc4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	701a      	strb	r2, [r3, #0]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f042 0201 	orr.w	r2, r2, #1
 8010fd2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f042 0208 	orr.w	r2, r2, #8
 8010fdc:	709a      	strb	r2, [r3, #2]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	2206      	movs	r2, #6
 8010fe6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	2204      	movs	r2, #4
 8010fec:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010fee:	f640 0306 	movw	r3, #2054	@ 0x806
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	69b9      	ldr	r1, [r7, #24]
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f001 faf4 	bl	80125e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011000:	69b8      	ldr	r0, [r7, #24]
 8011002:	f7f9 fed9 	bl	800adb8 <pbuf_free>
  p = NULL;
 8011006:	2300      	movs	r3, #0
 8011008:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801100a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801100e:	4618      	mov	r0, r3
 8011010:	3720      	adds	r7, #32
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	08015c0c 	.word	0x08015c0c
 801101c:	08015d5c 	.word	0x08015d5c
 8011020:	08015c84 	.word	0x08015c84
 8011024:	08015dfc 	.word	0x08015dfc
 8011028:	08015e30 	.word	0x08015e30

0801102c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b088      	sub	sp, #32
 8011030:	af04      	add	r7, sp, #16
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011048:	2201      	movs	r2, #1
 801104a:	9203      	str	r2, [sp, #12]
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	9202      	str	r2, [sp, #8]
 8011050:	4a06      	ldr	r2, [pc, #24]	@ (801106c <etharp_request_dst+0x40>)
 8011052:	9201      	str	r2, [sp, #4]
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	4603      	mov	r3, r0
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	68f8      	ldr	r0, [r7, #12]
 801105c:	f7ff ff5a 	bl	8010f14 <etharp_raw>
 8011060:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011062:	4618      	mov	r0, r3
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	080163e4 	.word	0x080163e4

08011070 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801107a:	4a05      	ldr	r2, [pc, #20]	@ (8011090 <etharp_request+0x20>)
 801107c:	6839      	ldr	r1, [r7, #0]
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ffd4 	bl	801102c <etharp_request_dst>
 8011084:	4603      	mov	r3, r0
}
 8011086:	4618      	mov	r0, r3
 8011088:	3708      	adds	r7, #8
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
 801108e:	bf00      	nop
 8011090:	080163dc 	.word	0x080163dc

08011094 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b08e      	sub	sp, #56	@ 0x38
 8011098:	af04      	add	r7, sp, #16
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801109e:	4b7a      	ldr	r3, [pc, #488]	@ (8011288 <icmp_input+0x1f4>)
 80110a0:	689b      	ldr	r3, [r3, #8]
 80110a2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80110a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	f003 030f 	and.w	r3, r3, #15
 80110ac:	b29b      	uxth	r3, r3
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80110b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80110b4:	2b13      	cmp	r3, #19
 80110b6:	f240 80d1 	bls.w	801125c <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	895b      	ldrh	r3, [r3, #10]
 80110be:	2b03      	cmp	r3, #3
 80110c0:	f240 80ce 	bls.w	8011260 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80110ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 80bb 	beq.w	801124e <icmp_input+0x1ba>
 80110d8:	2b08      	cmp	r3, #8
 80110da:	f040 80bb 	bne.w	8011254 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80110de:	4b6b      	ldr	r3, [pc, #428]	@ (801128c <icmp_input+0x1f8>)
 80110e0:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110e2:	4b69      	ldr	r3, [pc, #420]	@ (8011288 <icmp_input+0x1f4>)
 80110e4:	695b      	ldr	r3, [r3, #20]
 80110e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80110ea:	2be0      	cmp	r3, #224	@ 0xe0
 80110ec:	f000 80bf 	beq.w	801126e <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80110f0:	4b65      	ldr	r3, [pc, #404]	@ (8011288 <icmp_input+0x1f4>)
 80110f2:	695b      	ldr	r3, [r3, #20]
 80110f4:	4a64      	ldr	r2, [pc, #400]	@ (8011288 <icmp_input+0x1f4>)
 80110f6:	6812      	ldr	r2, [r2, #0]
 80110f8:	4611      	mov	r1, r2
 80110fa:	4618      	mov	r0, r3
 80110fc:	f000 fbd2 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	f040 80b5 	bne.w	8011272 <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	2b07      	cmp	r3, #7
 801110e:	f240 80a9 	bls.w	8011264 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011114:	330e      	adds	r3, #14
 8011116:	b29b      	uxth	r3, r3
 8011118:	b21b      	sxth	r3, r3
 801111a:	4619      	mov	r1, r3
 801111c:	6878      	ldr	r0, [r7, #4]
 801111e:	f7f9 fe27 	bl	800ad70 <pbuf_header>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d046      	beq.n	80111b6 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	891a      	ldrh	r2, [r3, #8]
 801112c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801112e:	4413      	add	r3, r2
 8011130:	b29b      	uxth	r3, r3
 8011132:	2200      	movs	r2, #0
 8011134:	4619      	mov	r1, r3
 8011136:	2002      	movs	r0, #2
 8011138:	f7f9 fac6 	bl	800a6c8 <pbuf_alloc>
 801113c:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801113e:	69bb      	ldr	r3, [r7, #24]
 8011140:	2b00      	cmp	r3, #0
 8011142:	f000 8098 	beq.w	8011276 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011146:	69bb      	ldr	r3, [r7, #24]
 8011148:	895b      	ldrh	r3, [r3, #10]
 801114a:	461a      	mov	r2, r3
 801114c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801114e:	3308      	adds	r3, #8
 8011150:	429a      	cmp	r2, r3
 8011152:	d203      	bcs.n	801115c <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011154:	69b8      	ldr	r0, [r7, #24]
 8011156:	f7f9 fe2f 	bl	800adb8 <pbuf_free>
        goto icmperr;
 801115a:	e08d      	b.n	8011278 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011162:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011164:	4618      	mov	r0, r3
 8011166:	f002 fa10 	bl	801358a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801116a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801116c:	425b      	negs	r3, r3
 801116e:	b29b      	uxth	r3, r3
 8011170:	b21b      	sxth	r3, r3
 8011172:	4619      	mov	r1, r3
 8011174:	69b8      	ldr	r0, [r7, #24]
 8011176:	f7f9 fdfb 	bl	800ad70 <pbuf_header>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d009      	beq.n	8011194 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011180:	4b43      	ldr	r3, [pc, #268]	@ (8011290 <icmp_input+0x1fc>)
 8011182:	22af      	movs	r2, #175	@ 0xaf
 8011184:	4943      	ldr	r1, [pc, #268]	@ (8011294 <icmp_input+0x200>)
 8011186:	4844      	ldr	r0, [pc, #272]	@ (8011298 <icmp_input+0x204>)
 8011188:	f001 fffe 	bl	8013188 <iprintf>
        pbuf_free(r);
 801118c:	69b8      	ldr	r0, [r7, #24]
 801118e:	f7f9 fe13 	bl	800adb8 <pbuf_free>
        goto icmperr;
 8011192:	e071      	b.n	8011278 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	69b8      	ldr	r0, [r7, #24]
 8011198:	f7f9 ff40 	bl	800b01c <pbuf_copy>
 801119c:	4603      	mov	r3, r0
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d003      	beq.n	80111aa <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80111a2:	69b8      	ldr	r0, [r7, #24]
 80111a4:	f7f9 fe08 	bl	800adb8 <pbuf_free>
        goto icmperr;
 80111a8:	e066      	b.n	8011278 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7f9 fe04 	bl	800adb8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	607b      	str	r3, [r7, #4]
 80111b4:	e015      	b.n	80111e2 <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80111b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80111b8:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 80111bc:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 80111c0:	33f2      	adds	r3, #242	@ 0xf2
 80111c2:	b29b      	uxth	r3, r3
 80111c4:	b21b      	sxth	r3, r3
 80111c6:	4619      	mov	r1, r3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7f9 fdd1 	bl	800ad70 <pbuf_header>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d006      	beq.n	80111e2 <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80111d4:	4b2e      	ldr	r3, [pc, #184]	@ (8011290 <icmp_input+0x1fc>)
 80111d6:	22c0      	movs	r2, #192	@ 0xc0
 80111d8:	4930      	ldr	r1, [pc, #192]	@ (801129c <icmp_input+0x208>)
 80111da:	482f      	ldr	r0, [pc, #188]	@ (8011298 <icmp_input+0x204>)
 80111dc:	f001 ffd4 	bl	8013188 <iprintf>
        goto icmperr;
 80111e0:	e04a      	b.n	8011278 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80111e8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80111ec:	4619      	mov	r1, r3
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f7f9 fdbe 	bl	800ad70 <pbuf_header>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d12b      	bne.n	8011252 <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011208:	4b1f      	ldr	r3, [pc, #124]	@ (8011288 <icmp_input+0x1f4>)
 801120a:	691a      	ldr	r2, [r3, #16]
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	2200      	movs	r2, #0
 8011214:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	2200      	movs	r2, #0
 801121a:	709a      	strb	r2, [r3, #2]
 801121c:	2200      	movs	r2, #0
 801121e:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	22ff      	movs	r2, #255	@ 0xff
 8011224:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	2200      	movs	r2, #0
 801122a:	729a      	strb	r2, [r3, #10]
 801122c:	2200      	movs	r2, #0
 801122e:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	9302      	str	r3, [sp, #8]
 8011234:	2301      	movs	r3, #1
 8011236:	9301      	str	r3, [sp, #4]
 8011238:	2300      	movs	r3, #0
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	23ff      	movs	r3, #255	@ 0xff
 801123e:	2200      	movs	r2, #0
 8011240:	69f9      	ldr	r1, [r7, #28]
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fa5c 	bl	8011700 <ip4_output_if>
 8011248:	4603      	mov	r3, r0
 801124a:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801124c:	e001      	b.n	8011252 <icmp_input+0x1be>
    break;
 801124e:	bf00      	nop
 8011250:	e000      	b.n	8011254 <icmp_input+0x1c0>
    break;
 8011252:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7f9 fdaf 	bl	800adb8 <pbuf_free>
  return;
 801125a:	e011      	b.n	8011280 <icmp_input+0x1ec>
    goto lenerr;
 801125c:	bf00      	nop
 801125e:	e002      	b.n	8011266 <icmp_input+0x1d2>
    goto lenerr;
 8011260:	bf00      	nop
 8011262:	e000      	b.n	8011266 <icmp_input+0x1d2>
      goto lenerr;
 8011264:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7f9 fda6 	bl	800adb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801126c:	e008      	b.n	8011280 <icmp_input+0x1ec>
      goto icmperr;
 801126e:	bf00      	nop
 8011270:	e002      	b.n	8011278 <icmp_input+0x1e4>
      goto icmperr;
 8011272:	bf00      	nop
 8011274:	e000      	b.n	8011278 <icmp_input+0x1e4>
        goto icmperr;
 8011276:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f7f9 fd9d 	bl	800adb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801127e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011280:	3728      	adds	r7, #40	@ 0x28
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
 8011286:	bf00      	nop
 8011288:	20004b50 	.word	0x20004b50
 801128c:	20004b64 	.word	0x20004b64
 8011290:	08015e74 	.word	0x08015e74
 8011294:	08015eac 	.word	0x08015eac
 8011298:	08015ee4 	.word	0x08015ee4
 801129c:	08015f0c 	.word	0x08015f0c

080112a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	460b      	mov	r3, r1
 80112aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80112ac:	78fb      	ldrb	r3, [r7, #3]
 80112ae:	461a      	mov	r2, r3
 80112b0:	2103      	movs	r1, #3
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f000 f814 	bl	80112e0 <icmp_send_response>
}
 80112b8:	bf00      	nop
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}

080112c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80112cc:	78fb      	ldrb	r3, [r7, #3]
 80112ce:	461a      	mov	r2, r3
 80112d0:	210b      	movs	r1, #11
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 f804 	bl	80112e0 <icmp_send_response>
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b08c      	sub	sp, #48	@ 0x30
 80112e4:	af04      	add	r7, sp, #16
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
 80112ec:	4613      	mov	r3, r2
 80112ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80112f0:	2200      	movs	r2, #0
 80112f2:	2124      	movs	r1, #36	@ 0x24
 80112f4:	2001      	movs	r0, #1
 80112f6:	f7f9 f9e7 	bl	800a6c8 <pbuf_alloc>
 80112fa:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d04c      	beq.n	801139c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	895b      	ldrh	r3, [r3, #10]
 8011306:	2b23      	cmp	r3, #35	@ 0x23
 8011308:	d806      	bhi.n	8011318 <icmp_send_response+0x38>
 801130a:	4b26      	ldr	r3, [pc, #152]	@ (80113a4 <icmp_send_response+0xc4>)
 801130c:	f240 1261 	movw	r2, #353	@ 0x161
 8011310:	4925      	ldr	r1, [pc, #148]	@ (80113a8 <icmp_send_response+0xc8>)
 8011312:	4826      	ldr	r0, [pc, #152]	@ (80113ac <icmp_send_response+0xcc>)
 8011314:	f001 ff38 	bl	8013188 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	685b      	ldr	r3, [r3, #4]
 801131c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	78fa      	ldrb	r2, [r7, #3]
 8011328:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801132a:	697b      	ldr	r3, [r7, #20]
 801132c:	78ba      	ldrb	r2, [r7, #2]
 801132e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	2200      	movs	r2, #0
 8011334:	711a      	strb	r2, [r3, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	2200      	movs	r2, #0
 801133e:	719a      	strb	r2, [r3, #6]
 8011340:	2200      	movs	r2, #0
 8011342:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011344:	69fb      	ldr	r3, [r7, #28]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	f103 0008 	add.w	r0, r3, #8
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	221c      	movs	r2, #28
 8011352:	4619      	mov	r1, r3
 8011354:	f002 f919 	bl	801358a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801135e:	f107 030c 	add.w	r3, r7, #12
 8011362:	4618      	mov	r0, r3
 8011364:	f000 f824 	bl	80113b0 <ip4_route>
 8011368:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d011      	beq.n	8011394 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	2200      	movs	r2, #0
 8011374:	709a      	strb	r2, [r3, #2]
 8011376:	2200      	movs	r2, #0
 8011378:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801137a:	f107 020c 	add.w	r2, r7, #12
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	9302      	str	r3, [sp, #8]
 8011382:	2301      	movs	r3, #1
 8011384:	9301      	str	r3, [sp, #4]
 8011386:	2300      	movs	r3, #0
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	23ff      	movs	r3, #255	@ 0xff
 801138c:	2100      	movs	r1, #0
 801138e:	69f8      	ldr	r0, [r7, #28]
 8011390:	f000 f9b6 	bl	8011700 <ip4_output_if>
  }
  pbuf_free(q);
 8011394:	69f8      	ldr	r0, [r7, #28]
 8011396:	f7f9 fd0f 	bl	800adb8 <pbuf_free>
 801139a:	e000      	b.n	801139e <icmp_send_response+0xbe>
    return;
 801139c:	bf00      	nop
}
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	08015e74 	.word	0x08015e74
 80113a8:	08015f40 	.word	0x08015f40
 80113ac:	08015ee4 	.word	0x08015ee4

080113b0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80113b8:	4b30      	ldr	r3, [pc, #192]	@ (801147c <ip4_route+0xcc>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	60fb      	str	r3, [r7, #12]
 80113be:	e036      	b.n	801142e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d02b      	beq.n	8011428 <ip4_route+0x78>
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80113d6:	089b      	lsrs	r3, r3, #2
 80113d8:	f003 0301 	and.w	r3, r3, #1
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d022      	beq.n	8011428 <ip4_route+0x78>
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	3304      	adds	r3, #4
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d01d      	beq.n	8011428 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	3304      	adds	r3, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	405a      	eors	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	3308      	adds	r3, #8
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4013      	ands	r3, r2
 8011400:	2b00      	cmp	r3, #0
 8011402:	d101      	bne.n	8011408 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	e033      	b.n	8011470 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801140e:	f003 0302 	and.w	r3, r3, #2
 8011412:	2b00      	cmp	r3, #0
 8011414:	d108      	bne.n	8011428 <ip4_route+0x78>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681a      	ldr	r2, [r3, #0]
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	330c      	adds	r3, #12
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	429a      	cmp	r2, r3
 8011422:	d101      	bne.n	8011428 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	e023      	b.n	8011470 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	60fb      	str	r3, [r7, #12]
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d1c5      	bne.n	80113c0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011434:	4b12      	ldr	r3, [pc, #72]	@ (8011480 <ip4_route+0xd0>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d015      	beq.n	8011468 <ip4_route+0xb8>
 801143c:	4b10      	ldr	r3, [pc, #64]	@ (8011480 <ip4_route+0xd0>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011444:	f003 0301 	and.w	r3, r3, #1
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00d      	beq.n	8011468 <ip4_route+0xb8>
 801144c:	4b0c      	ldr	r3, [pc, #48]	@ (8011480 <ip4_route+0xd0>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011454:	f003 0304 	and.w	r3, r3, #4
 8011458:	2b00      	cmp	r3, #0
 801145a:	d005      	beq.n	8011468 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801145c:	4b08      	ldr	r3, [pc, #32]	@ (8011480 <ip4_route+0xd0>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	3304      	adds	r3, #4
 8011462:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011464:	2b00      	cmp	r3, #0
 8011466:	d101      	bne.n	801146c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011468:	2300      	movs	r3, #0
 801146a:	e001      	b.n	8011470 <ip4_route+0xc0>
  }

  return netif_default;
 801146c:	4b04      	ldr	r3, [pc, #16]	@ (8011480 <ip4_route+0xd0>)
 801146e:	681b      	ldr	r3, [r3, #0]
}
 8011470:	4618      	mov	r0, r3
 8011472:	3714      	adds	r7, #20
 8011474:	46bd      	mov	sp, r7
 8011476:	bc80      	pop	{r7}
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	200080a0 	.word	0x200080a0
 8011480:	200080a4 	.word	0x200080a4

08011484 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	091b      	lsrs	r3, r3, #4
 801149a:	b2db      	uxtb	r3, r3
 801149c:	2b04      	cmp	r3, #4
 801149e:	d004      	beq.n	80114aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7f9 fc89 	bl	800adb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80114a6:	2300      	movs	r3, #0
 80114a8:	e122      	b.n	80116f0 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	f003 030f 	and.w	r3, r3, #15
 80114b2:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80114b4:	897b      	ldrh	r3, [r7, #10]
 80114b6:	009b      	lsls	r3, r3, #2
 80114b8:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80114ba:	697b      	ldr	r3, [r7, #20]
 80114bc:	885b      	ldrh	r3, [r3, #2]
 80114be:	b29b      	uxth	r3, r3
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7f8 fb69 	bl	8009b98 <lwip_htons>
 80114c6:	4603      	mov	r3, r0
 80114c8:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	891b      	ldrh	r3, [r3, #8]
 80114ce:	893a      	ldrh	r2, [r7, #8]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d204      	bcs.n	80114de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80114d4:	893b      	ldrh	r3, [r7, #8]
 80114d6:	4619      	mov	r1, r3
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f7f9 faf9 	bl	800aad0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	895b      	ldrh	r3, [r3, #10]
 80114e2:	897a      	ldrh	r2, [r7, #10]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d807      	bhi.n	80114f8 <ip4_input+0x74>
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	891b      	ldrh	r3, [r3, #8]
 80114ec:	893a      	ldrh	r2, [r7, #8]
 80114ee:	429a      	cmp	r2, r3
 80114f0:	d802      	bhi.n	80114f8 <ip4_input+0x74>
 80114f2:	897b      	ldrh	r3, [r7, #10]
 80114f4:	2b13      	cmp	r3, #19
 80114f6:	d804      	bhi.n	8011502 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7f9 fc5d 	bl	800adb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	e0f6      	b.n	80116f0 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	691b      	ldr	r3, [r3, #16]
 8011506:	4a7c      	ldr	r2, [pc, #496]	@ (80116f8 <ip4_input+0x274>)
 8011508:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	4a7a      	ldr	r2, [pc, #488]	@ (80116f8 <ip4_input+0x274>)
 8011510:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011512:	4b79      	ldr	r3, [pc, #484]	@ (80116f8 <ip4_input+0x274>)
 8011514:	695b      	ldr	r3, [r3, #20]
 8011516:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801151a:	2be0      	cmp	r3, #224	@ 0xe0
 801151c:	d112      	bne.n	8011544 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011524:	f003 0301 	and.w	r3, r3, #1
 8011528:	b2db      	uxtb	r3, r3
 801152a:	2b00      	cmp	r3, #0
 801152c:	d007      	beq.n	801153e <ip4_input+0xba>
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	3304      	adds	r3, #4
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <ip4_input+0xba>
      netif = inp;
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	613b      	str	r3, [r7, #16]
 801153c:	e041      	b.n	80115c2 <ip4_input+0x13e>
    } else {
      netif = NULL;
 801153e:	2300      	movs	r3, #0
 8011540:	613b      	str	r3, [r7, #16]
 8011542:	e03e      	b.n	80115c2 <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8011544:	2301      	movs	r3, #1
 8011546:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011552:	f003 0301 	and.w	r3, r3, #1
 8011556:	b2db      	uxtb	r3, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	d014      	beq.n	8011586 <ip4_input+0x102>
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	3304      	adds	r3, #4
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00f      	beq.n	8011586 <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011566:	4b64      	ldr	r3, [pc, #400]	@ (80116f8 <ip4_input+0x274>)
 8011568:	695a      	ldr	r2, [r3, #20]
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	3304      	adds	r3, #4
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	d026      	beq.n	80115c2 <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011574:	4b60      	ldr	r3, [pc, #384]	@ (80116f8 <ip4_input+0x274>)
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	6939      	ldr	r1, [r7, #16]
 801157a:	4618      	mov	r0, r3
 801157c:	f000 f992 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8011580:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011582:	2b00      	cmp	r3, #0
 8011584:	d11d      	bne.n	80115c2 <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d00d      	beq.n	80115a8 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801158c:	4b5a      	ldr	r3, [pc, #360]	@ (80116f8 <ip4_input+0x274>)
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	b2db      	uxtb	r3, r3
 8011592:	2b7f      	cmp	r3, #127	@ 0x7f
 8011594:	d102      	bne.n	801159c <ip4_input+0x118>
          netif = NULL;
 8011596:	2300      	movs	r3, #0
 8011598:	613b      	str	r3, [r7, #16]
          break;
 801159a:	e012      	b.n	80115c2 <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80115a0:	4b56      	ldr	r3, [pc, #344]	@ (80116fc <ip4_input+0x278>)
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	613b      	str	r3, [r7, #16]
 80115a6:	e002      	b.n	80115ae <ip4_input+0x12a>
      } else {
        netif = netif->next;
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	429a      	cmp	r2, r3
 80115b4:	d102      	bne.n	80115bc <ip4_input+0x138>
        netif = netif->next;
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d1c4      	bne.n	801154c <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115c2:	4b4d      	ldr	r3, [pc, #308]	@ (80116f8 <ip4_input+0x274>)
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 f96b 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 80115ce:	4603      	mov	r3, r0
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d105      	bne.n	80115e0 <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80115d4:	4b48      	ldr	r3, [pc, #288]	@ (80116f8 <ip4_input+0x274>)
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80115dc:	2be0      	cmp	r3, #224	@ 0xe0
 80115de:	d104      	bne.n	80115ea <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7f9 fbe9 	bl	800adb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80115e6:	2300      	movs	r3, #0
 80115e8:	e082      	b.n	80116f0 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80115ea:	693b      	ldr	r3, [r7, #16]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d104      	bne.n	80115fa <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f7f9 fbe1 	bl	800adb8 <pbuf_free>
    return ERR_OK;
 80115f6:	2300      	movs	r3, #0
 80115f8:	e07a      	b.n	80116f0 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	88db      	ldrh	r3, [r3, #6]
 80115fe:	b29b      	uxth	r3, r3
 8011600:	461a      	mov	r2, r3
 8011602:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011606:	4013      	ands	r3, r2
 8011608:	2b00      	cmp	r3, #0
 801160a:	d00b      	beq.n	8011624 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f000 fc8d 	bl	8011f2c <ip4_reass>
 8011612:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d101      	bne.n	801161e <ip4_input+0x19a>
      return ERR_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	e068      	b.n	80116f0 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011624:	4a34      	ldr	r2, [pc, #208]	@ (80116f8 <ip4_input+0x274>)
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801162a:	4a33      	ldr	r2, [pc, #204]	@ (80116f8 <ip4_input+0x274>)
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011630:	4a31      	ldr	r2, [pc, #196]	@ (80116f8 <ip4_input+0x274>)
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	781b      	ldrb	r3, [r3, #0]
 801163a:	f003 030f 	and.w	r3, r3, #15
 801163e:	b29b      	uxth	r3, r3
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	b29a      	uxth	r2, r3
 8011644:	4b2c      	ldr	r3, [pc, #176]	@ (80116f8 <ip4_input+0x274>)
 8011646:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011648:	897b      	ldrh	r3, [r7, #10]
 801164a:	425b      	negs	r3, r3
 801164c:	b29b      	uxth	r3, r3
 801164e:	b21b      	sxth	r3, r3
 8011650:	4619      	mov	r1, r3
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7f9 fb8c 	bl	800ad70 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	7a5b      	ldrb	r3, [r3, #9]
 801165c:	2b11      	cmp	r3, #17
 801165e:	d006      	beq.n	801166e <ip4_input+0x1ea>
 8011660:	2b11      	cmp	r3, #17
 8011662:	dc13      	bgt.n	801168c <ip4_input+0x208>
 8011664:	2b01      	cmp	r3, #1
 8011666:	d00c      	beq.n	8011682 <ip4_input+0x1fe>
 8011668:	2b06      	cmp	r3, #6
 801166a:	d005      	beq.n	8011678 <ip4_input+0x1f4>
 801166c:	e00e      	b.n	801168c <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7fe fb33 	bl	800fcdc <udp_input>
      break;
 8011676:	e028      	b.n	80116ca <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7fa ffea 	bl	800c654 <tcp_input>
      break;
 8011680:	e023      	b.n	80116ca <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f7ff fd05 	bl	8011094 <icmp_input>
      break;
 801168a:	e01e      	b.n	80116ca <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801168c:	4b1a      	ldr	r3, [pc, #104]	@ (80116f8 <ip4_input+0x274>)
 801168e:	695b      	ldr	r3, [r3, #20]
 8011690:	6939      	ldr	r1, [r7, #16]
 8011692:	4618      	mov	r0, r3
 8011694:	f000 f906 	bl	80118a4 <ip4_addr_isbroadcast_u32>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d112      	bne.n	80116c4 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801169e:	4b16      	ldr	r3, [pc, #88]	@ (80116f8 <ip4_input+0x274>)
 80116a0:	695b      	ldr	r3, [r3, #20]
 80116a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80116a6:	2be0      	cmp	r3, #224	@ 0xe0
 80116a8:	d00c      	beq.n	80116c4 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80116aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80116ae:	4619      	mov	r1, r3
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7f9 fb6f 	bl	800ad94 <pbuf_header_force>
        p->payload = iphdr;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80116bc:	2102      	movs	r1, #2
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff fdee 	bl	80112a0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80116c4:	6878      	ldr	r0, [r7, #4]
 80116c6:	f7f9 fb77 	bl	800adb8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80116ca:	4b0b      	ldr	r3, [pc, #44]	@ (80116f8 <ip4_input+0x274>)
 80116cc:	2200      	movs	r2, #0
 80116ce:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80116d0:	4b09      	ldr	r3, [pc, #36]	@ (80116f8 <ip4_input+0x274>)
 80116d2:	2200      	movs	r2, #0
 80116d4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80116d6:	4b08      	ldr	r3, [pc, #32]	@ (80116f8 <ip4_input+0x274>)
 80116d8:	2200      	movs	r2, #0
 80116da:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80116dc:	4b06      	ldr	r3, [pc, #24]	@ (80116f8 <ip4_input+0x274>)
 80116de:	2200      	movs	r2, #0
 80116e0:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80116e2:	4b05      	ldr	r3, [pc, #20]	@ (80116f8 <ip4_input+0x274>)
 80116e4:	2200      	movs	r2, #0
 80116e6:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80116e8:	4b03      	ldr	r3, [pc, #12]	@ (80116f8 <ip4_input+0x274>)
 80116ea:	2200      	movs	r2, #0
 80116ec:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80116ee:	2300      	movs	r3, #0
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3718      	adds	r7, #24
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	20004b50 	.word	0x20004b50
 80116fc:	200080a0 	.word	0x200080a0

08011700 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b08a      	sub	sp, #40	@ 0x28
 8011704:	af04      	add	r7, sp, #16
 8011706:	60f8      	str	r0, [r7, #12]
 8011708:	60b9      	str	r1, [r7, #8]
 801170a:	607a      	str	r2, [r7, #4]
 801170c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d009      	beq.n	801172c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d003      	beq.n	8011726 <ip4_output_if+0x26>
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d102      	bne.n	801172c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011728:	3304      	adds	r3, #4
 801172a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801172c:	78fa      	ldrb	r2, [r7, #3]
 801172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011730:	9302      	str	r3, [sp, #8]
 8011732:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011736:	9301      	str	r3, [sp, #4]
 8011738:	f897 3020 	ldrb.w	r3, [r7, #32]
 801173c:	9300      	str	r3, [sp, #0]
 801173e:	4613      	mov	r3, r2
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6979      	ldr	r1, [r7, #20]
 8011744:	68f8      	ldr	r0, [r7, #12]
 8011746:	f000 f805 	bl	8011754 <ip4_output_if_src>
 801174a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801174c:	4618      	mov	r0, r3
 801174e:	3718      	adds	r7, #24
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b088      	sub	sp, #32
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
 8011760:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	89db      	ldrh	r3, [r3, #14]
 8011766:	2b01      	cmp	r3, #1
 8011768:	d006      	beq.n	8011778 <ip4_output_if_src+0x24>
 801176a:	4b48      	ldr	r3, [pc, #288]	@ (801188c <ip4_output_if_src+0x138>)
 801176c:	f240 3233 	movw	r2, #819	@ 0x333
 8011770:	4947      	ldr	r1, [pc, #284]	@ (8011890 <ip4_output_if_src+0x13c>)
 8011772:	4848      	ldr	r0, [pc, #288]	@ (8011894 <ip4_output_if_src+0x140>)
 8011774:	f001 fd08 	bl	8013188 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d060      	beq.n	8011840 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801177e:	2314      	movs	r3, #20
 8011780:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011782:	2114      	movs	r1, #20
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f7f9 faf3 	bl	800ad70 <pbuf_header>
 801178a:	4603      	mov	r3, r0
 801178c:	2b00      	cmp	r3, #0
 801178e:	d002      	beq.n	8011796 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011790:	f06f 0301 	mvn.w	r3, #1
 8011794:	e075      	b.n	8011882 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	895b      	ldrh	r3, [r3, #10]
 80117a0:	2b13      	cmp	r3, #19
 80117a2:	d806      	bhi.n	80117b2 <ip4_output_if_src+0x5e>
 80117a4:	4b39      	ldr	r3, [pc, #228]	@ (801188c <ip4_output_if_src+0x138>)
 80117a6:	f44f 7258 	mov.w	r2, #864	@ 0x360
 80117aa:	493b      	ldr	r1, [pc, #236]	@ (8011898 <ip4_output_if_src+0x144>)
 80117ac:	4839      	ldr	r0, [pc, #228]	@ (8011894 <ip4_output_if_src+0x140>)
 80117ae:	f001 fceb 	bl	8013188 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	78fa      	ldrb	r2, [r7, #3]
 80117b6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80117be:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681a      	ldr	r2, [r3, #0]
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80117c8:	8b7b      	ldrh	r3, [r7, #26]
 80117ca:	089b      	lsrs	r3, r3, #2
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	b2db      	uxtb	r3, r3
 80117d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80117d4:	b2da      	uxtb	r2, r3
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80117da:	69fb      	ldr	r3, [r7, #28]
 80117dc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80117e0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	891b      	ldrh	r3, [r3, #8]
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7f8 f9d6 	bl	8009b98 <lwip_htons>
 80117ec:	4603      	mov	r3, r0
 80117ee:	461a      	mov	r2, r3
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2200      	movs	r2, #0
 80117f8:	719a      	strb	r2, [r3, #6]
 80117fa:	2200      	movs	r2, #0
 80117fc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80117fe:	4b27      	ldr	r3, [pc, #156]	@ (801189c <ip4_output_if_src+0x148>)
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	4618      	mov	r0, r3
 8011804:	f7f8 f9c8 	bl	8009b98 <lwip_htons>
 8011808:	4603      	mov	r3, r0
 801180a:	461a      	mov	r2, r3
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011810:	4b22      	ldr	r3, [pc, #136]	@ (801189c <ip4_output_if_src+0x148>)
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	3301      	adds	r3, #1
 8011816:	b29a      	uxth	r2, r3
 8011818:	4b20      	ldr	r3, [pc, #128]	@ (801189c <ip4_output_if_src+0x148>)
 801181a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d104      	bne.n	801182c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011822:	4b1f      	ldr	r3, [pc, #124]	@ (80118a0 <ip4_output_if_src+0x14c>)
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	69fb      	ldr	r3, [r7, #28]
 8011828:	60da      	str	r2, [r3, #12]
 801182a:	e003      	b.n	8011834 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	2200      	movs	r2, #0
 8011838:	729a      	strb	r2, [r3, #10]
 801183a:	2200      	movs	r2, #0
 801183c:	72da      	strb	r2, [r3, #11]
 801183e:	e008      	b.n	8011852 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011846:	69fb      	ldr	r3, [r7, #28]
 8011848:	691b      	ldr	r3, [r3, #16]
 801184a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801184c:	f107 0314 	add.w	r3, r7, #20
 8011850:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011856:	2b00      	cmp	r3, #0
 8011858:	d00c      	beq.n	8011874 <ip4_output_if_src+0x120>
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	891a      	ldrh	r2, [r3, #8]
 801185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011860:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8011862:	429a      	cmp	r2, r3
 8011864:	d906      	bls.n	8011874 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801186a:	68f8      	ldr	r0, [r7, #12]
 801186c:	f000 fd08 	bl	8012280 <ip4_frag>
 8011870:	4603      	mov	r3, r0
 8011872:	e006      	b.n	8011882 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	687a      	ldr	r2, [r7, #4]
 801187a:	68f9      	ldr	r1, [r7, #12]
 801187c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801187e:	4798      	blx	r3
 8011880:	4603      	mov	r3, r0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	08015f6c 	.word	0x08015f6c
 8011890:	08015fa0 	.word	0x08015fa0
 8011894:	08015fac 	.word	0x08015fac
 8011898:	08015fd4 	.word	0x08015fd4
 801189c:	200081fe 	.word	0x200081fe
 80118a0:	080163d8 	.word	0x080163d8

080118a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118b8:	d002      	beq.n	80118c0 <ip4_addr_isbroadcast_u32+0x1c>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d101      	bne.n	80118c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80118c0:	2301      	movs	r3, #1
 80118c2:	e02a      	b.n	801191a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80118ca:	f003 0302 	and.w	r3, r3, #2
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	e021      	b.n	801191a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	3304      	adds	r3, #4
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d101      	bne.n	80118e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80118e2:	2300      	movs	r3, #0
 80118e4:	e019      	b.n	801191a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80118e6:	68fa      	ldr	r2, [r7, #12]
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	3304      	adds	r3, #4
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	405a      	eors	r2, r3
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	3308      	adds	r3, #8
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4013      	ands	r3, r2
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10d      	bne.n	8011918 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	3308      	adds	r3, #8
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	43da      	mvns	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	3308      	adds	r3, #8
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011910:	429a      	cmp	r2, r3
 8011912:	d101      	bne.n	8011918 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011914:	2301      	movs	r3, #1
 8011916:	e000      	b.n	801191a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011918:	2300      	movs	r3, #0
  }
}
 801191a:	4618      	mov	r0, r3
 801191c:	3714      	adds	r7, #20
 801191e:	46bd      	mov	sp, r7
 8011920:	bc80      	pop	{r7}
 8011922:	4770      	bx	lr

08011924 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801192a:	2300      	movs	r3, #0
 801192c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801192e:	4b12      	ldr	r3, [pc, #72]	@ (8011978 <ip_reass_tmr+0x54>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011934:	e018      	b.n	8011968 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	7fdb      	ldrb	r3, [r3, #31]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d00b      	beq.n	8011956 <ip_reass_tmr+0x32>
      r->timer--;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	7fdb      	ldrb	r3, [r3, #31]
 8011942:	3b01      	subs	r3, #1
 8011944:	b2da      	uxtb	r2, r3
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	60fb      	str	r3, [r7, #12]
 8011954:	e008      	b.n	8011968 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011960:	68b9      	ldr	r1, [r7, #8]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f000 f80a 	bl	801197c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1e3      	bne.n	8011936 <ip_reass_tmr+0x12>
     }
   }
}
 801196e:	bf00      	nop
 8011970:	bf00      	nop
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}
 8011978:	20008200 	.word	0x20008200

0801197c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801198a:	683a      	ldr	r2, [r7, #0]
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	429a      	cmp	r2, r3
 8011990:	d105      	bne.n	801199e <ip_reass_free_complete_datagram+0x22>
 8011992:	4b45      	ldr	r3, [pc, #276]	@ (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011994:	22ab      	movs	r2, #171	@ 0xab
 8011996:	4945      	ldr	r1, [pc, #276]	@ (8011aac <ip_reass_free_complete_datagram+0x130>)
 8011998:	4845      	ldr	r0, [pc, #276]	@ (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 801199a:	f001 fbf5 	bl	8013188 <iprintf>
  if (prev != NULL) {
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00a      	beq.n	80119ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d005      	beq.n	80119ba <ip_reass_free_complete_datagram+0x3e>
 80119ae:	4b3e      	ldr	r3, [pc, #248]	@ (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 80119b0:	22ad      	movs	r2, #173	@ 0xad
 80119b2:	4940      	ldr	r1, [pc, #256]	@ (8011ab4 <ip_reass_free_complete_datagram+0x138>)
 80119b4:	483e      	ldr	r0, [pc, #248]	@ (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 80119b6:	f001 fbe7 	bl	8013188 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	889b      	ldrh	r3, [r3, #4]
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d12a      	bne.n	8011a22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80119d2:	697b      	ldr	r3, [r7, #20]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	6858      	ldr	r0, [r3, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3308      	adds	r3, #8
 80119e2:	2214      	movs	r2, #20
 80119e4:	4619      	mov	r1, r3
 80119e6:	f001 fdd0 	bl	801358a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80119ea:	2101      	movs	r1, #1
 80119ec:	69b8      	ldr	r0, [r7, #24]
 80119ee:	f7ff fc67 	bl	80112c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80119f2:	69b8      	ldr	r0, [r7, #24]
 80119f4:	f7f9 fa74 	bl	800aee0 <pbuf_clen>
 80119f8:	4603      	mov	r3, r0
 80119fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80119fc:	8bfa      	ldrh	r2, [r7, #30]
 80119fe:	8a7b      	ldrh	r3, [r7, #18]
 8011a00:	4413      	add	r3, r2
 8011a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a06:	db05      	blt.n	8011a14 <ip_reass_free_complete_datagram+0x98>
 8011a08:	4b27      	ldr	r3, [pc, #156]	@ (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a0a:	22bc      	movs	r2, #188	@ 0xbc
 8011a0c:	492a      	ldr	r1, [pc, #168]	@ (8011ab8 <ip_reass_free_complete_datagram+0x13c>)
 8011a0e:	4828      	ldr	r0, [pc, #160]	@ (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a10:	f001 fbba 	bl	8013188 <iprintf>
    pbufs_freed += clen;
 8011a14:	8bfa      	ldrh	r2, [r7, #30]
 8011a16:	8a7b      	ldrh	r3, [r7, #18]
 8011a18:	4413      	add	r3, r2
 8011a1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011a1c:	69b8      	ldr	r0, [r7, #24]
 8011a1e:	f7f9 f9cb 	bl	800adb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011a28:	e01f      	b.n	8011a6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011a3a:	68f8      	ldr	r0, [r7, #12]
 8011a3c:	f7f9 fa50 	bl	800aee0 <pbuf_clen>
 8011a40:	4603      	mov	r3, r0
 8011a42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a44:	8bfa      	ldrh	r2, [r7, #30]
 8011a46:	8a7b      	ldrh	r3, [r7, #18]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011a4e:	db05      	blt.n	8011a5c <ip_reass_free_complete_datagram+0xe0>
 8011a50:	4b15      	ldr	r3, [pc, #84]	@ (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a52:	22cc      	movs	r2, #204	@ 0xcc
 8011a54:	4918      	ldr	r1, [pc, #96]	@ (8011ab8 <ip_reass_free_complete_datagram+0x13c>)
 8011a56:	4816      	ldr	r0, [pc, #88]	@ (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a58:	f001 fb96 	bl	8013188 <iprintf>
    pbufs_freed += clen;
 8011a5c:	8bfa      	ldrh	r2, [r7, #30]
 8011a5e:	8a7b      	ldrh	r3, [r7, #18]
 8011a60:	4413      	add	r3, r2
 8011a62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f7f9 f9a7 	bl	800adb8 <pbuf_free>
  while (p != NULL) {
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1dc      	bne.n	8011a2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011a70:	6839      	ldr	r1, [r7, #0]
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f000 f8c2 	bl	8011bfc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8011a78:	4b10      	ldr	r3, [pc, #64]	@ (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a7a:	881b      	ldrh	r3, [r3, #0]
 8011a7c:	8bfa      	ldrh	r2, [r7, #30]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d905      	bls.n	8011a8e <ip_reass_free_complete_datagram+0x112>
 8011a82:	4b09      	ldr	r3, [pc, #36]	@ (8011aa8 <ip_reass_free_complete_datagram+0x12c>)
 8011a84:	22d2      	movs	r2, #210	@ 0xd2
 8011a86:	490e      	ldr	r1, [pc, #56]	@ (8011ac0 <ip_reass_free_complete_datagram+0x144>)
 8011a88:	4809      	ldr	r0, [pc, #36]	@ (8011ab0 <ip_reass_free_complete_datagram+0x134>)
 8011a8a:	f001 fb7d 	bl	8013188 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8011a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a90:	881a      	ldrh	r2, [r3, #0]
 8011a92:	8bfb      	ldrh	r3, [r7, #30]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	4b08      	ldr	r3, [pc, #32]	@ (8011abc <ip_reass_free_complete_datagram+0x140>)
 8011a9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011a9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3720      	adds	r7, #32
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	08016004 	.word	0x08016004
 8011aac:	08016040 	.word	0x08016040
 8011ab0:	0801604c 	.word	0x0801604c
 8011ab4:	08016074 	.word	0x08016074
 8011ab8:	08016088 	.word	0x08016088
 8011abc:	20008204 	.word	0x20008204
 8011ac0:	080160a8 	.word	0x080160a8

08011ac4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b08a      	sub	sp, #40	@ 0x28
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011ada:	2300      	movs	r3, #0
 8011adc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011ae2:	4b28      	ldr	r3, [pc, #160]	@ (8011b84 <ip_reass_remove_oldest_datagram+0xc0>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011ae8:	e030      	b.n	8011b4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aec:	695a      	ldr	r2, [r3, #20]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d10c      	bne.n	8011b10 <ip_reass_remove_oldest_datagram+0x4c>
 8011af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af8:	699a      	ldr	r2, [r3, #24]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	691b      	ldr	r3, [r3, #16]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d106      	bne.n	8011b10 <ip_reass_remove_oldest_datagram+0x4c>
 8011b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b04:	899a      	ldrh	r2, [r3, #12]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	889b      	ldrh	r3, [r3, #4]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d014      	beq.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	3301      	adds	r3, #1
 8011b14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011b16:	6a3b      	ldr	r3, [r7, #32]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d104      	bne.n	8011b26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	61bb      	str	r3, [r7, #24]
 8011b24:	e009      	b.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b28:	7fda      	ldrb	r2, [r3, #31]
 8011b2a:	6a3b      	ldr	r3, [r7, #32]
 8011b2c:	7fdb      	ldrb	r3, [r3, #31]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d803      	bhi.n	8011b3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1cb      	bne.n	8011aea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011b52:	6a3b      	ldr	r3, [r7, #32]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d008      	beq.n	8011b6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011b58:	69b9      	ldr	r1, [r7, #24]
 8011b5a:	6a38      	ldr	r0, [r7, #32]
 8011b5c:	f7ff ff0e 	bl	801197c <ip_reass_free_complete_datagram>
 8011b60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	4413      	add	r3, r2
 8011b68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011b6a:	697a      	ldr	r2, [r7, #20]
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	da02      	bge.n	8011b78 <ip_reass_remove_oldest_datagram+0xb4>
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	dcac      	bgt.n	8011ad2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011b78:	697b      	ldr	r3, [r7, #20]
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3728      	adds	r7, #40	@ 0x28
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20008200 	.word	0x20008200

08011b88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b084      	sub	sp, #16
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011b92:	2004      	movs	r0, #4
 8011b94:	f7f8 fba8 	bl	800a2e8 <memp_malloc>
 8011b98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d110      	bne.n	8011bc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011ba0:	6839      	ldr	r1, [r7, #0]
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f7ff ff8e 	bl	8011ac4 <ip_reass_remove_oldest_datagram>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	4293      	cmp	r3, r2
 8011bae:	dc03      	bgt.n	8011bb8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011bb0:	2004      	movs	r0, #4
 8011bb2:	f7f8 fb99 	bl	800a2e8 <memp_malloc>
 8011bb6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d101      	bne.n	8011bc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e016      	b.n	8011bf0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011bc2:	2220      	movs	r2, #32
 8011bc4:	2100      	movs	r1, #0
 8011bc6:	68f8      	ldr	r0, [r7, #12]
 8011bc8:	f001 fc56 	bl	8013478 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2203      	movs	r2, #3
 8011bd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011bd2:	4b09      	ldr	r3, [pc, #36]	@ (8011bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011bda:	4a07      	ldr	r2, [pc, #28]	@ (8011bf8 <ip_reass_enqueue_new_datagram+0x70>)
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	3308      	adds	r3, #8
 8011be4:	2214      	movs	r2, #20
 8011be6:	6879      	ldr	r1, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f001 fcce 	bl	801358a <memcpy>
  return ipr;
 8011bee:	68fb      	ldr	r3, [r7, #12]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	20008200 	.word	0x20008200

08011bfc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
 8011c04:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011c06:	4b10      	ldr	r3, [pc, #64]	@ (8011c48 <ip_reass_dequeue_datagram+0x4c>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d104      	bne.n	8011c1a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a0c      	ldr	r2, [pc, #48]	@ (8011c48 <ip_reass_dequeue_datagram+0x4c>)
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	e00d      	b.n	8011c36 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <ip_reass_dequeue_datagram+0x32>
 8011c20:	4b0a      	ldr	r3, [pc, #40]	@ (8011c4c <ip_reass_dequeue_datagram+0x50>)
 8011c22:	f240 1245 	movw	r2, #325	@ 0x145
 8011c26:	490a      	ldr	r1, [pc, #40]	@ (8011c50 <ip_reass_dequeue_datagram+0x54>)
 8011c28:	480a      	ldr	r0, [pc, #40]	@ (8011c54 <ip_reass_dequeue_datagram+0x58>)
 8011c2a:	f001 faad 	bl	8013188 <iprintf>
    prev->next = ipr->next;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011c36:	6879      	ldr	r1, [r7, #4]
 8011c38:	2004      	movs	r0, #4
 8011c3a:	f7f8 fba1 	bl	800a380 <memp_free>
}
 8011c3e:	bf00      	nop
 8011c40:	3708      	adds	r7, #8
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20008200 	.word	0x20008200
 8011c4c:	08016004 	.word	0x08016004
 8011c50:	080160c4 	.word	0x080160c4
 8011c54:	0801604c 	.word	0x0801604c

08011c58 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08c      	sub	sp, #48	@ 0x30
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8011c64:	2300      	movs	r3, #0
 8011c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	885b      	ldrh	r3, [r3, #2]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7f7 ff8d 	bl	8009b98 <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	461a      	mov	r2, r3
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	f003 030f 	and.w	r3, r3, #15
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	b29b      	uxth	r3, r3
 8011c90:	1ad3      	subs	r3, r2, r3
 8011c92:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	88db      	ldrh	r3, [r3, #6]
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7f7 ff7c 	bl	8009b98 <lwip_htons>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	00db      	lsls	r3, r3, #3
 8011caa:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	701a      	strb	r2, [r3, #0]
 8011cb8:	2200      	movs	r2, #0
 8011cba:	705a      	strb	r2, [r3, #1]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	709a      	strb	r2, [r3, #2]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc6:	8b3a      	ldrh	r2, [r7, #24]
 8011cc8:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8011cca:	8b3a      	ldrh	r2, [r7, #24]
 8011ccc:	8b7b      	ldrh	r3, [r7, #26]
 8011cce:	4413      	add	r3, r2
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd4:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8011cdc:	e061      	b.n	8011da2 <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8011cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8011ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce6:	889b      	ldrh	r3, [r3, #4]
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	889b      	ldrh	r3, [r3, #4]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d232      	bcs.n	8011d5a <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cf8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d01f      	beq.n	8011d40 <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d02:	889b      	ldrh	r3, [r3, #4]
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d08:	88db      	ldrh	r3, [r3, #6]
 8011d0a:	b29b      	uxth	r3, r3
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	f0c0 80e3 	bcc.w	8011ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 8011d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d14:	88db      	ldrh	r3, [r3, #6]
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	889b      	ldrh	r3, [r3, #4]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	f200 80da 	bhi.w	8011ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d26:	68ba      	ldr	r2, [r7, #8]
 8011d28:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d2c:	88db      	ldrh	r3, [r3, #6]
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d32:	889b      	ldrh	r3, [r3, #4]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d037      	beq.n	8011daa <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011d3e:	e034      	b.n	8011daa <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 8011d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d42:	88db      	ldrh	r3, [r3, #6]
 8011d44:	b29a      	uxth	r2, r3
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	889b      	ldrh	r3, [r3, #4]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	f200 80c5 	bhi.w	8011edc <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	68ba      	ldr	r2, [r7, #8]
 8011d56:	605a      	str	r2, [r3, #4]
      break;
 8011d58:	e027      	b.n	8011daa <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 8011d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d5c:	889b      	ldrh	r3, [r3, #4]
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	889b      	ldrh	r3, [r3, #4]
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	429a      	cmp	r2, r3
 8011d68:	f000 80ba 	beq.w	8011ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d6e:	889b      	ldrh	r3, [r3, #4]
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	88db      	ldrh	r3, [r3, #6]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	f0c0 80b3 	bcc.w	8011ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d009      	beq.n	8011d98 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 8011d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d86:	88db      	ldrh	r3, [r3, #6]
 8011d88:	b29a      	uxth	r2, r3
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	889b      	ldrh	r3, [r3, #4]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d001      	beq.n	8011d98 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011d94:	2300      	movs	r3, #0
 8011d96:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d19a      	bne.n	8011cde <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 8011da8:	e000      	b.n	8011dac <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 8011daa:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d12d      	bne.n	8011e0e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 8011db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d01c      	beq.n	8011df2 <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dba:	88db      	ldrh	r3, [r3, #6]
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc0:	889b      	ldrh	r3, [r3, #4]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d906      	bls.n	8011dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 8011dc8:	4b51      	ldr	r3, [pc, #324]	@ (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dca:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8011dce:	4951      	ldr	r1, [pc, #324]	@ (8011f14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011dd0:	4851      	ldr	r0, [pc, #324]	@ (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011dd2:	f001 f9d9 	bl	8013188 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd8:	68ba      	ldr	r2, [r7, #8]
 8011dda:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dde:	88db      	ldrh	r3, [r3, #6]
 8011de0:	b29a      	uxth	r2, r3
 8011de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011de4:	889b      	ldrh	r3, [r3, #4]
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d010      	beq.n	8011e0e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 8011dec:	2300      	movs	r3, #0
 8011dee:	623b      	str	r3, [r7, #32]
 8011df0:	e00d      	b.n	8011e0e <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	685b      	ldr	r3, [r3, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d006      	beq.n	8011e08 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 8011dfa:	4b45      	ldr	r3, [pc, #276]	@ (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011dfc:	f240 12b3 	movw	r2, #435	@ 0x1b3
 8011e00:	4946      	ldr	r1, [pc, #280]	@ (8011f1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011e02:	4845      	ldr	r0, [pc, #276]	@ (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e04:	f001 f9c0 	bl	8013188 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	68ba      	ldr	r2, [r7, #8]
 8011e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d105      	bne.n	8011e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	7f9b      	ldrb	r3, [r3, #30]
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d059      	beq.n	8011ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 8011e20:	6a3b      	ldr	r3, [r7, #32]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d04f      	beq.n	8011ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d006      	beq.n	8011e3c <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	685b      	ldr	r3, [r3, #4]
 8011e34:	889b      	ldrh	r3, [r3, #4]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d002      	beq.n	8011e42 <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	623b      	str	r3, [r7, #32]
 8011e40:	e041      	b.n	8011ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e44:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011e4c:	e012      	b.n	8011e74 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 8011e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e56:	88db      	ldrh	r3, [r3, #6]
 8011e58:	b29a      	uxth	r2, r3
 8011e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e5c:	889b      	ldrh	r3, [r3, #4]
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d002      	beq.n	8011e6a <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	623b      	str	r3, [r7, #32]
            break;
 8011e68:	e007      	b.n	8011e7a <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 8011e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d1e9      	bne.n	8011e4e <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011e7a:	6a3b      	ldr	r3, [r7, #32]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d022      	beq.n	8011ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 8011e88:	4b21      	ldr	r3, [pc, #132]	@ (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011e8a:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 8011e8e:	4924      	ldr	r1, [pc, #144]	@ (8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011e90:	4821      	ldr	r0, [pc, #132]	@ (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011e92:	f001 f979 	bl	8013188 <iprintf>
          LWIP_ASSERT("sanity check",
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	685b      	ldr	r3, [r3, #4]
 8011e9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d106      	bne.n	8011eb0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 8011ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011ea4:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8011ea8:	491d      	ldr	r1, [pc, #116]	@ (8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011eaa:	481b      	ldr	r0, [pc, #108]	@ (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011eac:	f001 f96c 	bl	8013188 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d006      	beq.n	8011ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 8011eb8:	4b15      	ldr	r3, [pc, #84]	@ (8011f10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8011eba:	f240 12d7 	movw	r2, #471	@ 0x1d7
 8011ebe:	4919      	ldr	r1, [pc, #100]	@ (8011f24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011ec0:	4815      	ldr	r0, [pc, #84]	@ (8011f18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011ec2:	f001 f961 	bl	8013188 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011ec6:	6a3b      	ldr	r3, [r7, #32]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	bf14      	ite	ne
 8011ecc:	2301      	movne	r3, #1
 8011ece:	2300      	moveq	r3, #0
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	e018      	b.n	8011f06 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	e016      	b.n	8011f06 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 8011ed8:	bf00      	nop
 8011eda:	e004      	b.n	8011ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 8011edc:	bf00      	nop
 8011ede:	e002      	b.n	8011ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8011ee0:	bf00      	nop
 8011ee2:	e000      	b.n	8011ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 8011ee4:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8011ee6:	68b8      	ldr	r0, [r7, #8]
 8011ee8:	f7f8 fffa 	bl	800aee0 <pbuf_clen>
 8011eec:	4603      	mov	r3, r0
 8011eee:	461a      	mov	r2, r3
 8011ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8011f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011ef2:	881b      	ldrh	r3, [r3, #0]
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	b29a      	uxth	r2, r3
 8011ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8011f28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011efa:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8011efc:	68b8      	ldr	r0, [r7, #8]
 8011efe:	f7f8 ff5b 	bl	800adb8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011f02:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8011f06:	4618      	mov	r0, r3
 8011f08:	3730      	adds	r7, #48	@ 0x30
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	08016004 	.word	0x08016004
 8011f14:	080160e0 	.word	0x080160e0
 8011f18:	0801604c 	.word	0x0801604c
 8011f1c:	08016100 	.word	0x08016100
 8011f20:	08016138 	.word	0x08016138
 8011f24:	08016148 	.word	0x08016148
 8011f28:	20008204 	.word	0x20008204

08011f2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b08e      	sub	sp, #56	@ 0x38
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8011f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	f003 030f 	and.w	r3, r3, #15
 8011f42:	2b05      	cmp	r3, #5
 8011f44:	f040 8130 	bne.w	80121a8 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8011f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4a:	88db      	ldrh	r3, [r3, #6]
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7f7 fe22 	bl	8009b98 <lwip_htons>
 8011f54:	4603      	mov	r3, r0
 8011f56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011f5a:	b29b      	uxth	r3, r3
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8011f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f62:	885b      	ldrh	r3, [r3, #2]
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7f7 fe16 	bl	8009b98 <lwip_htons>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	461a      	mov	r2, r3
 8011f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	f003 030f 	and.w	r3, r3, #15
 8011f78:	b29b      	uxth	r3, r3
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7f8 ffac 	bl	800aee0 <pbuf_clen>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011f8c:	4b8e      	ldr	r3, [pc, #568]	@ (80121c8 <ip4_reass+0x29c>)
 8011f8e:	881b      	ldrh	r3, [r3, #0]
 8011f90:	461a      	mov	r2, r3
 8011f92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f94:	4413      	add	r3, r2
 8011f96:	2b0a      	cmp	r3, #10
 8011f98:	dd10      	ble.n	8011fbc <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011f9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fa0:	f7ff fd90 	bl	8011ac4 <ip_reass_remove_oldest_datagram>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	f000 8100 	beq.w	80121ac <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011fac:	4b86      	ldr	r3, [pc, #536]	@ (80121c8 <ip4_reass+0x29c>)
 8011fae:	881b      	ldrh	r3, [r3, #0]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011fb4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011fb6:	2b0a      	cmp	r3, #10
 8011fb8:	f300 80f8 	bgt.w	80121ac <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fbc:	4b83      	ldr	r3, [pc, #524]	@ (80121cc <ip4_reass+0x2a0>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8011fc2:	e015      	b.n	8011ff0 <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fc6:	695a      	ldr	r2, [r3, #20]
 8011fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fca:	68db      	ldr	r3, [r3, #12]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d10c      	bne.n	8011fea <ip4_reass+0xbe>
 8011fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fd2:	699a      	ldr	r2, [r3, #24]
 8011fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd6:	691b      	ldr	r3, [r3, #16]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d106      	bne.n	8011fea <ip4_reass+0xbe>
 8011fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fde:	899a      	ldrh	r2, [r3, #12]
 8011fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe2:	889b      	ldrh	r3, [r3, #4]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	429a      	cmp	r2, r3
 8011fe8:	d006      	beq.n	8011ff8 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1e6      	bne.n	8011fc4 <ip4_reass+0x98>
 8011ff6:	e000      	b.n	8011ffa <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011ff8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d109      	bne.n	8012014 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012000:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012002:	4619      	mov	r1, r3
 8012004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012006:	f7ff fdbf 	bl	8011b88 <ip_reass_enqueue_new_datagram>
 801200a:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801200c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801200e:	2b00      	cmp	r3, #0
 8012010:	d11c      	bne.n	801204c <ip4_reass+0x120>
      goto nullreturn;
 8012012:	e0d0      	b.n	80121b6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012016:	88db      	ldrh	r3, [r3, #6]
 8012018:	b29b      	uxth	r3, r3
 801201a:	4618      	mov	r0, r3
 801201c:	f7f7 fdbc 	bl	8009b98 <lwip_htons>
 8012020:	4603      	mov	r3, r0
 8012022:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012026:	2b00      	cmp	r3, #0
 8012028:	d110      	bne.n	801204c <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801202a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801202c:	89db      	ldrh	r3, [r3, #14]
 801202e:	4618      	mov	r0, r3
 8012030:	f7f7 fdb2 	bl	8009b98 <lwip_htons>
 8012034:	4603      	mov	r3, r0
 8012036:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801203a:	2b00      	cmp	r3, #0
 801203c:	d006      	beq.n	801204c <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801203e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012040:	3308      	adds	r3, #8
 8012042:	2214      	movs	r2, #20
 8012044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012046:	4618      	mov	r0, r3
 8012048:	f001 fa9f 	bl	801358a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801204c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801204e:	88db      	ldrh	r3, [r3, #6]
 8012050:	b29b      	uxth	r3, r3
 8012052:	f003 0320 	and.w	r3, r3, #32
 8012056:	2b00      	cmp	r3, #0
 8012058:	bf0c      	ite	eq
 801205a:	2301      	moveq	r3, #1
 801205c:	2300      	movne	r3, #0
 801205e:	b2db      	uxtb	r3, r3
 8012060:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012062:	69fb      	ldr	r3, [r7, #28]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d00e      	beq.n	8012086 <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 8012068:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801206a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801206c:	4413      	add	r3, r2
 801206e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012070:	8b7a      	ldrh	r2, [r7, #26]
 8012072:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012074:	429a      	cmp	r2, r3
 8012076:	f0c0 809b 	bcc.w	80121b0 <ip4_reass+0x284>
 801207a:	8b7b      	ldrh	r3, [r7, #26]
 801207c:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8012080:	4293      	cmp	r3, r2
 8012082:	f200 8095 	bhi.w	80121b0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012086:	69fa      	ldr	r2, [r7, #28]
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801208c:	f7ff fde4 	bl	8011c58 <ip_reass_chain_frag_into_datagram_and_validate>
 8012090:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012098:	f000 808c 	beq.w	80121b4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801209c:	4b4a      	ldr	r3, [pc, #296]	@ (80121c8 <ip4_reass+0x29c>)
 801209e:	881a      	ldrh	r2, [r3, #0]
 80120a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120a2:	4413      	add	r3, r2
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	4b48      	ldr	r3, [pc, #288]	@ (80121c8 <ip4_reass+0x29c>)
 80120a8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00d      	beq.n	80120cc <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 80120b0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80120b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80120b4:	4413      	add	r3, r2
 80120b6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80120b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ba:	8a7a      	ldrh	r2, [r7, #18]
 80120bc:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80120be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c0:	7f9b      	ldrb	r3, [r3, #30]
 80120c2:	f043 0301 	orr.w	r3, r3, #1
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ca:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	2b01      	cmp	r3, #1
 80120d0:	d168      	bne.n	80121a4 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80120d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120d4:	8b9b      	ldrh	r3, [r3, #28]
 80120d6:	3314      	adds	r3, #20
 80120d8:	b29a      	uxth	r2, r3
 80120da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120dc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80120de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80120e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80120f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120f2:	3308      	adds	r3, #8
 80120f4:	2214      	movs	r2, #20
 80120f6:	4619      	mov	r1, r3
 80120f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120fa:	f001 fa46 	bl	801358a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80120fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012100:	8b9b      	ldrh	r3, [r3, #28]
 8012102:	4618      	mov	r0, r3
 8012104:	f7f7 fd48 	bl	8009b98 <lwip_htons>
 8012108:	4603      	mov	r3, r0
 801210a:	461a      	mov	r2, r3
 801210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012112:	2200      	movs	r2, #0
 8012114:	719a      	strb	r2, [r3, #6]
 8012116:	2200      	movs	r2, #0
 8012118:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211c:	2200      	movs	r2, #0
 801211e:	729a      	strb	r2, [r3, #10]
 8012120:	2200      	movs	r2, #0
 8012122:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801212a:	e00e      	b.n	801214a <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 801212c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8012132:	f06f 0113 	mvn.w	r1, #19
 8012136:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012138:	f7f8 fe1a 	bl	800ad70 <pbuf_header>
      pbuf_cat(p, r);
 801213c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7f8 ff06 	bl	800af50 <pbuf_cat>
      r = iprh->next_pbuf;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801214a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801214c:	2b00      	cmp	r3, #0
 801214e:	d1ed      	bne.n	801212c <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012150:	4b1e      	ldr	r3, [pc, #120]	@ (80121cc <ip4_reass+0x2a0>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012156:	429a      	cmp	r2, r3
 8012158:	d102      	bne.n	8012160 <ip4_reass+0x234>
      ipr_prev = NULL;
 801215a:	2300      	movs	r3, #0
 801215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801215e:	e010      	b.n	8012182 <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012160:	4b1a      	ldr	r3, [pc, #104]	@ (80121cc <ip4_reass+0x2a0>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012166:	e007      	b.n	8012178 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 8012168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801216e:	429a      	cmp	r2, r3
 8012170:	d006      	beq.n	8012180 <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801217a:	2b00      	cmp	r3, #0
 801217c:	d1f4      	bne.n	8012168 <ip4_reass+0x23c>
 801217e:	e000      	b.n	8012182 <ip4_reass+0x256>
          break;
 8012180:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012184:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012186:	f7ff fd39 	bl	8011bfc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f7f8 fea8 	bl	800aee0 <pbuf_clen>
 8012190:	4603      	mov	r3, r0
 8012192:	461a      	mov	r2, r3
 8012194:	4b0c      	ldr	r3, [pc, #48]	@ (80121c8 <ip4_reass+0x29c>)
 8012196:	881b      	ldrh	r3, [r3, #0]
 8012198:	1a9b      	subs	r3, r3, r2
 801219a:	b29a      	uxth	r2, r3
 801219c:	4b0a      	ldr	r3, [pc, #40]	@ (80121c8 <ip4_reass+0x29c>)
 801219e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	e00c      	b.n	80121be <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80121a4:	2300      	movs	r3, #0
 80121a6:	e00a      	b.n	80121be <ip4_reass+0x292>
    goto nullreturn;
 80121a8:	bf00      	nop
 80121aa:	e004      	b.n	80121b6 <ip4_reass+0x28a>
      goto nullreturn;
 80121ac:	bf00      	nop
 80121ae:	e002      	b.n	80121b6 <ip4_reass+0x28a>
      goto nullreturn;
 80121b0:	bf00      	nop
 80121b2:	e000      	b.n	80121b6 <ip4_reass+0x28a>
    goto nullreturn;
 80121b4:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7f8 fdfe 	bl	800adb8 <pbuf_free>
  return NULL;
 80121bc:	2300      	movs	r3, #0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3738      	adds	r7, #56	@ 0x38
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	20008204 	.word	0x20008204
 80121cc:	20008200 	.word	0x20008200

080121d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80121d4:	2005      	movs	r0, #5
 80121d6:	f7f8 f887 	bl	800a2e8 <memp_malloc>
 80121da:	4603      	mov	r3, r0
}
 80121dc:	4618      	mov	r0, r3
 80121de:	bd80      	pop	{r7, pc}

080121e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <ip_frag_free_pbuf_custom_ref+0x1c>
 80121ee:	4b07      	ldr	r3, [pc, #28]	@ (801220c <ip_frag_free_pbuf_custom_ref+0x2c>)
 80121f0:	f240 22ae 	movw	r2, #686	@ 0x2ae
 80121f4:	4906      	ldr	r1, [pc, #24]	@ (8012210 <ip_frag_free_pbuf_custom_ref+0x30>)
 80121f6:	4807      	ldr	r0, [pc, #28]	@ (8012214 <ip_frag_free_pbuf_custom_ref+0x34>)
 80121f8:	f000 ffc6 	bl	8013188 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80121fc:	6879      	ldr	r1, [r7, #4]
 80121fe:	2005      	movs	r0, #5
 8012200:	f7f8 f8be 	bl	800a380 <memp_free>
}
 8012204:	bf00      	nop
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}
 801220c:	08016004 	.word	0x08016004
 8012210:	0801616c 	.word	0x0801616c
 8012214:	0801604c 	.word	0x0801604c

08012218 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d106      	bne.n	8012238 <ipfrag_free_pbuf_custom+0x20>
 801222a:	4b11      	ldr	r3, [pc, #68]	@ (8012270 <ipfrag_free_pbuf_custom+0x58>)
 801222c:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8012230:	4910      	ldr	r1, [pc, #64]	@ (8012274 <ipfrag_free_pbuf_custom+0x5c>)
 8012232:	4811      	ldr	r0, [pc, #68]	@ (8012278 <ipfrag_free_pbuf_custom+0x60>)
 8012234:	f000 ffa8 	bl	8013188 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8012238:	68fa      	ldr	r2, [r7, #12]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	429a      	cmp	r2, r3
 801223e:	d006      	beq.n	801224e <ipfrag_free_pbuf_custom+0x36>
 8012240:	4b0b      	ldr	r3, [pc, #44]	@ (8012270 <ipfrag_free_pbuf_custom+0x58>)
 8012242:	f240 22b9 	movw	r2, #697	@ 0x2b9
 8012246:	490d      	ldr	r1, [pc, #52]	@ (801227c <ipfrag_free_pbuf_custom+0x64>)
 8012248:	480b      	ldr	r0, [pc, #44]	@ (8012278 <ipfrag_free_pbuf_custom+0x60>)
 801224a:	f000 ff9d 	bl	8013188 <iprintf>
  if (pcr->original != NULL) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	695b      	ldr	r3, [r3, #20]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d004      	beq.n	8012260 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	695b      	ldr	r3, [r3, #20]
 801225a:	4618      	mov	r0, r3
 801225c:	f7f8 fdac 	bl	800adb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f7ff ffbd 	bl	80121e0 <ip_frag_free_pbuf_custom_ref>
}
 8012266:	bf00      	nop
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	08016004 	.word	0x08016004
 8012274:	08016178 	.word	0x08016178
 8012278:	0801604c 	.word	0x0801604c
 801227c:	08016184 	.word	0x08016184

08012280 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b092      	sub	sp, #72	@ 0x48
 8012284:	af02      	add	r7, sp, #8
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801228c:	2300      	movs	r3, #0
 801228e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012294:	3b14      	subs	r3, #20
 8012296:	2b00      	cmp	r3, #0
 8012298:	da00      	bge.n	801229c <ip4_frag+0x1c>
 801229a:	3307      	adds	r3, #7
 801229c:	10db      	asrs	r3, r3, #3
 801229e:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80122a0:	2314      	movs	r3, #20
 80122a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	685b      	ldr	r3, [r3, #4]
 80122a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 80122aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80122ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	f003 030f 	and.w	r3, r3, #15
 80122b6:	2b05      	cmp	r3, #5
 80122b8:	d009      	beq.n	80122ce <ip4_frag+0x4e>
 80122ba:	4b7a      	ldr	r3, [pc, #488]	@ (80124a4 <ip4_frag+0x224>)
 80122bc:	f240 22e1 	movw	r2, #737	@ 0x2e1
 80122c0:	4979      	ldr	r1, [pc, #484]	@ (80124a8 <ip4_frag+0x228>)
 80122c2:	487a      	ldr	r0, [pc, #488]	@ (80124ac <ip4_frag+0x22c>)
 80122c4:	f000 ff60 	bl	8013188 <iprintf>
 80122c8:	f06f 0305 	mvn.w	r3, #5
 80122cc:	e0e6      	b.n	801249c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80122ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d0:	88db      	ldrh	r3, [r3, #6]
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7f7 fc5f 	bl	8009b98 <lwip_htons>
 80122da:	4603      	mov	r3, r0
 80122dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 80122de:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80122e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80122e4:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80122e6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80122e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <ip4_frag+0x84>
 80122f0:	4b6c      	ldr	r3, [pc, #432]	@ (80124a4 <ip4_frag+0x224>)
 80122f2:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80122f6:	496e      	ldr	r1, [pc, #440]	@ (80124b0 <ip4_frag+0x230>)
 80122f8:	486c      	ldr	r0, [pc, #432]	@ (80124ac <ip4_frag+0x22c>)
 80122fa:	f000 ff45 	bl	8013188 <iprintf>
 80122fe:	f06f 0305 	mvn.w	r3, #5
 8012302:	e0cb      	b.n	801249c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	891b      	ldrh	r3, [r3, #8]
 8012308:	3b14      	subs	r3, #20
 801230a:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 801230c:	e0bd      	b.n	801248a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801230e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012310:	00da      	lsls	r2, r3, #3
 8012312:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012314:	4293      	cmp	r3, r2
 8012316:	bfa8      	it	ge
 8012318:	4613      	movge	r3, r2
 801231a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801231c:	2200      	movs	r2, #0
 801231e:	2114      	movs	r1, #20
 8012320:	2002      	movs	r0, #2
 8012322:	f7f8 f9d1 	bl	800a6c8 <pbuf_alloc>
 8012326:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	2b00      	cmp	r3, #0
 801232c:	f000 80b3 	beq.w	8012496 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	895b      	ldrh	r3, [r3, #10]
 8012334:	2b13      	cmp	r3, #19
 8012336:	d806      	bhi.n	8012346 <ip4_frag+0xc6>
 8012338:	4b5a      	ldr	r3, [pc, #360]	@ (80124a4 <ip4_frag+0x224>)
 801233a:	f44f 7242 	mov.w	r2, #776	@ 0x308
 801233e:	495d      	ldr	r1, [pc, #372]	@ (80124b4 <ip4_frag+0x234>)
 8012340:	485a      	ldr	r0, [pc, #360]	@ (80124ac <ip4_frag+0x22c>)
 8012342:	f000 ff21 	bl	8013188 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012346:	6a3b      	ldr	r3, [r7, #32]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	2214      	movs	r2, #20
 801234c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801234e:	4618      	mov	r0, r3
 8012350:	f001 f91b 	bl	801358a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012354:	6a3b      	ldr	r3, [r7, #32]
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 801235a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801235c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 801235e:	e04f      	b.n	8012400 <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	895a      	ldrh	r2, [r3, #10]
 8012364:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801236a:	8b7a      	ldrh	r2, [r7, #26]
 801236c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801236e:	4293      	cmp	r3, r2
 8012370:	bf28      	it	cs
 8012372:	4613      	movcs	r3, r2
 8012374:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012376:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012378:	2b00      	cmp	r3, #0
 801237a:	d105      	bne.n	8012388 <ip4_frag+0x108>
        poff = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	60fb      	str	r3, [r7, #12]
        continue;
 8012386:	e03b      	b.n	8012400 <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012388:	f7ff ff22 	bl	80121d0 <ip_frag_alloc_pbuf_custom_ref>
 801238c:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d103      	bne.n	801239c <ip4_frag+0x11c>
        pbuf_free(rambuf);
 8012394:	6a38      	ldr	r0, [r7, #32]
 8012396:	f7f8 fd0f 	bl	800adb8 <pbuf_free>
        goto memerr;
 801239a:	e07d      	b.n	8012498 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801239c:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80123a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80123a4:	4413      	add	r3, r2
 80123a6:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80123a8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80123aa:	9201      	str	r2, [sp, #4]
 80123ac:	9300      	str	r3, [sp, #0]
 80123ae:	4603      	mov	r3, r0
 80123b0:	2202      	movs	r2, #2
 80123b2:	2004      	movs	r0, #4
 80123b4:	f7f8 fb22 	bl	800a9fc <pbuf_alloced_custom>
 80123b8:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d106      	bne.n	80123ce <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 80123c0:	6978      	ldr	r0, [r7, #20]
 80123c2:	f7ff ff0d 	bl	80121e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80123c6:	6a38      	ldr	r0, [r7, #32]
 80123c8:	f7f8 fcf6 	bl	800adb8 <pbuf_free>
        goto memerr;
 80123cc:	e064      	b.n	8012498 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f7f8 fd9c 	bl	800af0c <pbuf_ref>
      pcr->original = p;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	4a36      	ldr	r2, [pc, #216]	@ (80124b8 <ip4_frag+0x238>)
 80123de:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80123e0:	6939      	ldr	r1, [r7, #16]
 80123e2:	6a38      	ldr	r0, [r7, #32]
 80123e4:	f7f8 fdb4 	bl	800af50 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80123e8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80123ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80123ec:	1ad3      	subs	r3, r2, r3
 80123ee:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 80123f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d004      	beq.n	8012400 <ip4_frag+0x180>
        poff = 0;
 80123f6:	2300      	movs	r3, #0
 80123f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012400:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012402:	2b00      	cmp	r3, #0
 8012404:	d1ac      	bne.n	8012360 <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 8012406:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012408:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801240a:	4413      	add	r3, r2
 801240c:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8012412:	f1a3 0213 	sub.w	r2, r3, #19
 8012416:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012418:	429a      	cmp	r2, r3
 801241a:	bfcc      	ite	gt
 801241c:	2301      	movgt	r3, #1
 801241e:	2300      	movle	r3, #0
 8012420:	b2db      	uxtb	r3, r3
 8012422:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012424:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801242a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 801242c:	69fb      	ldr	r3, [r7, #28]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d103      	bne.n	801243a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012432:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012434:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012438:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801243a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801243c:	4618      	mov	r0, r3
 801243e:	f7f7 fbab 	bl	8009b98 <lwip_htons>
 8012442:	4603      	mov	r3, r0
 8012444:	461a      	mov	r2, r3
 8012446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012448:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801244a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801244c:	3314      	adds	r3, #20
 801244e:	b29b      	uxth	r3, r3
 8012450:	4618      	mov	r0, r3
 8012452:	f7f7 fba1 	bl	8009b98 <lwip_htons>
 8012456:	4603      	mov	r3, r0
 8012458:	461a      	mov	r2, r3
 801245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801245c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801245e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012460:	2200      	movs	r2, #0
 8012462:	729a      	strb	r2, [r3, #10]
 8012464:	2200      	movs	r2, #0
 8012466:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	695b      	ldr	r3, [r3, #20]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	6a39      	ldr	r1, [r7, #32]
 8012470:	68b8      	ldr	r0, [r7, #8]
 8012472:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012474:	6a38      	ldr	r0, [r7, #32]
 8012476:	f7f8 fc9f 	bl	800adb8 <pbuf_free>
    left -= fragsize;
 801247a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801247c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 8012482:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8012484:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012486:	4413      	add	r3, r2
 8012488:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 801248a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801248c:	2b00      	cmp	r3, #0
 801248e:	f47f af3e 	bne.w	801230e <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	e002      	b.n	801249c <ip4_frag+0x21c>
      goto memerr;
 8012496:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012498:	f04f 33ff 	mov.w	r3, #4294967295
}
 801249c:	4618      	mov	r0, r3
 801249e:	3740      	adds	r7, #64	@ 0x40
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	08016004 	.word	0x08016004
 80124a8:	08016190 	.word	0x08016190
 80124ac:	0801604c 	.word	0x0801604c
 80124b0:	080161b8 	.word	0x080161b8
 80124b4:	080161d4 	.word	0x080161d4
 80124b8:	08012219 	.word	0x08012219

080124bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80124c6:	230e      	movs	r3, #14
 80124c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	895b      	ldrh	r3, [r3, #10]
 80124ce:	2b0e      	cmp	r3, #14
 80124d0:	d977      	bls.n	80125c2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	685b      	ldr	r3, [r3, #4]
 80124d6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	7b1a      	ldrb	r2, [r3, #12]
 80124dc:	7b5b      	ldrb	r3, [r3, #13]
 80124de:	021b      	lsls	r3, r3, #8
 80124e0:	4313      	orrs	r3, r2
 80124e2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80124e4:	693b      	ldr	r3, [r7, #16]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	f003 0301 	and.w	r3, r3, #1
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d023      	beq.n	8012538 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b01      	cmp	r3, #1
 80124f6:	d10f      	bne.n	8012518 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	785b      	ldrb	r3, [r3, #1]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d11b      	bne.n	8012538 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012504:	2b5e      	cmp	r3, #94	@ 0x5e
 8012506:	d117      	bne.n	8012538 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	7b5b      	ldrb	r3, [r3, #13]
 801250c:	f043 0310 	orr.w	r3, r3, #16
 8012510:	b2da      	uxtb	r2, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	735a      	strb	r2, [r3, #13]
 8012516:	e00f      	b.n	8012538 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	2206      	movs	r2, #6
 801251c:	4931      	ldr	r1, [pc, #196]	@ (80125e4 <ethernet_input+0x128>)
 801251e:	4618      	mov	r0, r3
 8012520:	f000 ff9a 	bl	8013458 <memcmp>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d106      	bne.n	8012538 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	7b5b      	ldrb	r3, [r3, #13]
 801252e:	f043 0308 	orr.w	r3, r3, #8
 8012532:	b2da      	uxtb	r2, r3
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012538:	89fb      	ldrh	r3, [r7, #14]
 801253a:	2b08      	cmp	r3, #8
 801253c:	d003      	beq.n	8012546 <ethernet_input+0x8a>
 801253e:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012542:	d01e      	beq.n	8012582 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012544:	e046      	b.n	80125d4 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801254c:	f003 0308 	and.w	r3, r3, #8
 8012550:	2b00      	cmp	r3, #0
 8012552:	d038      	beq.n	80125c6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	895b      	ldrh	r3, [r3, #10]
 8012558:	461a      	mov	r2, r3
 801255a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801255e:	429a      	cmp	r2, r3
 8012560:	db33      	blt.n	80125ca <ethernet_input+0x10e>
 8012562:	8afb      	ldrh	r3, [r7, #22]
 8012564:	425b      	negs	r3, r3
 8012566:	b29b      	uxth	r3, r3
 8012568:	b21b      	sxth	r3, r3
 801256a:	4619      	mov	r1, r3
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7f8 fbff 	bl	800ad70 <pbuf_header>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d128      	bne.n	80125ca <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f7fe ff82 	bl	8011484 <ip4_input>
      break;
 8012580:	e01d      	b.n	80125be <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012588:	f003 0308 	and.w	r3, r3, #8
 801258c:	2b00      	cmp	r3, #0
 801258e:	d01e      	beq.n	80125ce <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	895b      	ldrh	r3, [r3, #10]
 8012594:	461a      	mov	r2, r3
 8012596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801259a:	429a      	cmp	r2, r3
 801259c:	db19      	blt.n	80125d2 <ethernet_input+0x116>
 801259e:	8afb      	ldrh	r3, [r7, #22]
 80125a0:	425b      	negs	r3, r3
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	b21b      	sxth	r3, r3
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7f8 fbe1 	bl	800ad70 <pbuf_header>
 80125ae:	4603      	mov	r3, r0
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10e      	bne.n	80125d2 <ethernet_input+0x116>
        etharp_input(p, netif);
 80125b4:	6839      	ldr	r1, [r7, #0]
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f7fe f952 	bl	8010860 <etharp_input>
      break;
 80125bc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	e00c      	b.n	80125dc <ethernet_input+0x120>
    goto free_and_return;
 80125c2:	bf00      	nop
 80125c4:	e006      	b.n	80125d4 <ethernet_input+0x118>
        goto free_and_return;
 80125c6:	bf00      	nop
 80125c8:	e004      	b.n	80125d4 <ethernet_input+0x118>
        goto free_and_return;
 80125ca:	bf00      	nop
 80125cc:	e002      	b.n	80125d4 <ethernet_input+0x118>
        goto free_and_return;
 80125ce:	bf00      	nop
 80125d0:	e000      	b.n	80125d4 <ethernet_input+0x118>
        goto free_and_return;
 80125d2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7f8 fbef 	bl	800adb8 <pbuf_free>
  return ERR_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	080163dc 	.word	0x080163dc

080125e8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b086      	sub	sp, #24
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	60f8      	str	r0, [r7, #12]
 80125f0:	60b9      	str	r1, [r7, #8]
 80125f2:	607a      	str	r2, [r7, #4]
 80125f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80125f6:	8c3b      	ldrh	r3, [r7, #32]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f7 facd 	bl	8009b98 <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012602:	210e      	movs	r1, #14
 8012604:	68b8      	ldr	r0, [r7, #8]
 8012606:	f7f8 fbb3 	bl	800ad70 <pbuf_header>
 801260a:	4603      	mov	r3, r0
 801260c:	2b00      	cmp	r3, #0
 801260e:	d125      	bne.n	801265c <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	8afa      	ldrh	r2, [r7, #22]
 801261a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	2206      	movs	r2, #6
 8012620:	6839      	ldr	r1, [r7, #0]
 8012622:	4618      	mov	r0, r3
 8012624:	f000 ffb1 	bl	801358a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	3306      	adds	r3, #6
 801262c:	2206      	movs	r2, #6
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	4618      	mov	r0, r3
 8012632:	f000 ffaa 	bl	801358a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801263c:	2b06      	cmp	r3, #6
 801263e:	d006      	beq.n	801264e <ethernet_output+0x66>
 8012640:	4b0a      	ldr	r3, [pc, #40]	@ (801266c <ethernet_output+0x84>)
 8012642:	f240 122b 	movw	r2, #299	@ 0x12b
 8012646:	490a      	ldr	r1, [pc, #40]	@ (8012670 <ethernet_output+0x88>)
 8012648:	480a      	ldr	r0, [pc, #40]	@ (8012674 <ethernet_output+0x8c>)
 801264a:	f000 fd9d 	bl	8013188 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	699b      	ldr	r3, [r3, #24]
 8012652:	68b9      	ldr	r1, [r7, #8]
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	4798      	blx	r3
 8012658:	4603      	mov	r3, r0
 801265a:	e002      	b.n	8012662 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801265c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801265e:	f06f 0301 	mvn.w	r3, #1
}
 8012662:	4618      	mov	r0, r3
 8012664:	3718      	adds	r7, #24
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	080161f4 	.word	0x080161f4
 8012670:	0801622c 	.word	0x0801622c
 8012674:	08016260 	.word	0x08016260

08012678 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801267c:	2200      	movs	r2, #0
 801267e:	4912      	ldr	r1, [pc, #72]	@ (80126c8 <MX_USB_DEVICE_Init+0x50>)
 8012680:	4812      	ldr	r0, [pc, #72]	@ (80126cc <MX_USB_DEVICE_Init+0x54>)
 8012682:	f7f6 f9ba 	bl	80089fa <USBD_Init>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801268c:	f7ee fc00 	bl	8000e90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012690:	490f      	ldr	r1, [pc, #60]	@ (80126d0 <MX_USB_DEVICE_Init+0x58>)
 8012692:	480e      	ldr	r0, [pc, #56]	@ (80126cc <MX_USB_DEVICE_Init+0x54>)
 8012694:	f7f6 f9dc 	bl	8008a50 <USBD_RegisterClass>
 8012698:	4603      	mov	r3, r0
 801269a:	2b00      	cmp	r3, #0
 801269c:	d001      	beq.n	80126a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801269e:	f7ee fbf7 	bl	8000e90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80126a2:	490c      	ldr	r1, [pc, #48]	@ (80126d4 <MX_USB_DEVICE_Init+0x5c>)
 80126a4:	4809      	ldr	r0, [pc, #36]	@ (80126cc <MX_USB_DEVICE_Init+0x54>)
 80126a6:	f7f6 f90d 	bl	80088c4 <USBD_CDC_RegisterInterface>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d001      	beq.n	80126b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80126b0:	f7ee fbee 	bl	8000e90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80126b4:	4805      	ldr	r0, [pc, #20]	@ (80126cc <MX_USB_DEVICE_Init+0x54>)
 80126b6:	f7f6 f9e4 	bl	8008a82 <USBD_Start>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80126c0:	f7ee fbe6 	bl	8000e90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80126c4:	bf00      	nop
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	20000134 	.word	0x20000134
 80126cc:	20008208 	.word	0x20008208
 80126d0:	20000018 	.word	0x20000018
 80126d4:	20000124 	.word	0x20000124

080126d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80126dc:	2200      	movs	r2, #0
 80126de:	4905      	ldr	r1, [pc, #20]	@ (80126f4 <CDC_Init_FS+0x1c>)
 80126e0:	4805      	ldr	r0, [pc, #20]	@ (80126f8 <CDC_Init_FS+0x20>)
 80126e2:	f7f6 f905 	bl	80088f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80126e6:	4905      	ldr	r1, [pc, #20]	@ (80126fc <CDC_Init_FS+0x24>)
 80126e8:	4803      	ldr	r0, [pc, #12]	@ (80126f8 <CDC_Init_FS+0x20>)
 80126ea:	f7f6 f91a 	bl	8008922 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80126ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80126f0:	4618      	mov	r0, r3
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	200088cc 	.word	0x200088cc
 80126f8:	20008208 	.word	0x20008208
 80126fc:	200084cc 	.word	0x200084cc

08012700 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012700:	b480      	push	{r7}
 8012702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012704:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012706:	4618      	mov	r0, r3
 8012708:	46bd      	mov	sp, r7
 801270a:	bc80      	pop	{r7}
 801270c:	4770      	bx	lr
	...

08012710 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	6039      	str	r1, [r7, #0]
 801271a:	71fb      	strb	r3, [r7, #7]
 801271c:	4613      	mov	r3, r2
 801271e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012720:	79fb      	ldrb	r3, [r7, #7]
 8012722:	2b23      	cmp	r3, #35	@ 0x23
 8012724:	d84a      	bhi.n	80127bc <CDC_Control_FS+0xac>
 8012726:	a201      	add	r2, pc, #4	@ (adr r2, 801272c <CDC_Control_FS+0x1c>)
 8012728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801272c:	080127bd 	.word	0x080127bd
 8012730:	080127bd 	.word	0x080127bd
 8012734:	080127bd 	.word	0x080127bd
 8012738:	080127bd 	.word	0x080127bd
 801273c:	080127bd 	.word	0x080127bd
 8012740:	080127bd 	.word	0x080127bd
 8012744:	080127bd 	.word	0x080127bd
 8012748:	080127bd 	.word	0x080127bd
 801274c:	080127bd 	.word	0x080127bd
 8012750:	080127bd 	.word	0x080127bd
 8012754:	080127bd 	.word	0x080127bd
 8012758:	080127bd 	.word	0x080127bd
 801275c:	080127bd 	.word	0x080127bd
 8012760:	080127bd 	.word	0x080127bd
 8012764:	080127bd 	.word	0x080127bd
 8012768:	080127bd 	.word	0x080127bd
 801276c:	080127bd 	.word	0x080127bd
 8012770:	080127bd 	.word	0x080127bd
 8012774:	080127bd 	.word	0x080127bd
 8012778:	080127bd 	.word	0x080127bd
 801277c:	080127bd 	.word	0x080127bd
 8012780:	080127bd 	.word	0x080127bd
 8012784:	080127bd 	.word	0x080127bd
 8012788:	080127bd 	.word	0x080127bd
 801278c:	080127bd 	.word	0x080127bd
 8012790:	080127bd 	.word	0x080127bd
 8012794:	080127bd 	.word	0x080127bd
 8012798:	080127bd 	.word	0x080127bd
 801279c:	080127bd 	.word	0x080127bd
 80127a0:	080127bd 	.word	0x080127bd
 80127a4:	080127bd 	.word	0x080127bd
 80127a8:	080127bd 	.word	0x080127bd
 80127ac:	080127bd 	.word	0x080127bd
 80127b0:	080127bd 	.word	0x080127bd
 80127b4:	080127bd 	.word	0x080127bd
 80127b8:	080127bd 	.word	0x080127bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80127bc:	bf00      	nop
  }

  return (USBD_OK);
 80127be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	370c      	adds	r7, #12
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bc80      	pop	{r7}
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop

080127cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80127d6:	6879      	ldr	r1, [r7, #4]
 80127d8:	4805      	ldr	r0, [pc, #20]	@ (80127f0 <CDC_Receive_FS+0x24>)
 80127da:	f7f6 f8a2 	bl	8008922 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80127de:	4804      	ldr	r0, [pc, #16]	@ (80127f0 <CDC_Receive_FS+0x24>)
 80127e0:	f7f6 f8e1 	bl	80089a6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80127e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3708      	adds	r7, #8
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
 80127ee:	bf00      	nop
 80127f0:	20008208 	.word	0x20008208

080127f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	460b      	mov	r3, r1
 80127fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012800:	2300      	movs	r3, #0
 8012802:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8012804:	4b0d      	ldr	r3, [pc, #52]	@ (801283c <CDC_Transmit_FS+0x48>)
 8012806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801280a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012812:	2b00      	cmp	r3, #0
 8012814:	d001      	beq.n	801281a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8012816:	2301      	movs	r3, #1
 8012818:	e00b      	b.n	8012832 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801281a:	887b      	ldrh	r3, [r7, #2]
 801281c:	461a      	mov	r2, r3
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	4806      	ldr	r0, [pc, #24]	@ (801283c <CDC_Transmit_FS+0x48>)
 8012822:	f7f6 f865 	bl	80088f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8012826:	4805      	ldr	r0, [pc, #20]	@ (801283c <CDC_Transmit_FS+0x48>)
 8012828:	f7f6 f88e 	bl	8008948 <USBD_CDC_TransmitPacket>
 801282c:	4603      	mov	r3, r0
 801282e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8012830:	7bfb      	ldrb	r3, [r7, #15]
}
 8012832:	4618      	mov	r0, r3
 8012834:	3710      	adds	r7, #16
 8012836:	46bd      	mov	sp, r7
 8012838:	bd80      	pop	{r7, pc}
 801283a:	bf00      	nop
 801283c:	20008208 	.word	0x20008208

08012840 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012840:	b480      	push	{r7}
 8012842:	b083      	sub	sp, #12
 8012844:	af00      	add	r7, sp, #0
 8012846:	4603      	mov	r3, r0
 8012848:	6039      	str	r1, [r7, #0]
 801284a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	2212      	movs	r2, #18
 8012850:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012852:	4b03      	ldr	r3, [pc, #12]	@ (8012860 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012854:	4618      	mov	r0, r3
 8012856:	370c      	adds	r7, #12
 8012858:	46bd      	mov	sp, r7
 801285a:	bc80      	pop	{r7}
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop
 8012860:	20000150 	.word	0x20000150

08012864 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012864:	b480      	push	{r7}
 8012866:	b083      	sub	sp, #12
 8012868:	af00      	add	r7, sp, #0
 801286a:	4603      	mov	r3, r0
 801286c:	6039      	str	r1, [r7, #0]
 801286e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	2204      	movs	r2, #4
 8012874:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012876:	4b03      	ldr	r3, [pc, #12]	@ (8012884 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012878:	4618      	mov	r0, r3
 801287a:	370c      	adds	r7, #12
 801287c:	46bd      	mov	sp, r7
 801287e:	bc80      	pop	{r7}
 8012880:	4770      	bx	lr
 8012882:	bf00      	nop
 8012884:	20000164 	.word	0x20000164

08012888 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	4603      	mov	r3, r0
 8012890:	6039      	str	r1, [r7, #0]
 8012892:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012894:	79fb      	ldrb	r3, [r7, #7]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d105      	bne.n	80128a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801289a:	683a      	ldr	r2, [r7, #0]
 801289c:	4907      	ldr	r1, [pc, #28]	@ (80128bc <USBD_FS_ProductStrDescriptor+0x34>)
 801289e:	4808      	ldr	r0, [pc, #32]	@ (80128c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80128a0:	f7f7 f89d 	bl	80099de <USBD_GetString>
 80128a4:	e004      	b.n	80128b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80128a6:	683a      	ldr	r2, [r7, #0]
 80128a8:	4904      	ldr	r1, [pc, #16]	@ (80128bc <USBD_FS_ProductStrDescriptor+0x34>)
 80128aa:	4805      	ldr	r0, [pc, #20]	@ (80128c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80128ac:	f7f7 f897 	bl	80099de <USBD_GetString>
  }
  return USBD_StrDesc;
 80128b0:	4b02      	ldr	r3, [pc, #8]	@ (80128bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3708      	adds	r7, #8
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	20008ccc 	.word	0x20008ccc
 80128c0:	08016288 	.word	0x08016288

080128c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b082      	sub	sp, #8
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	4603      	mov	r3, r0
 80128cc:	6039      	str	r1, [r7, #0]
 80128ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80128d0:	683a      	ldr	r2, [r7, #0]
 80128d2:	4904      	ldr	r1, [pc, #16]	@ (80128e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80128d4:	4804      	ldr	r0, [pc, #16]	@ (80128e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80128d6:	f7f7 f882 	bl	80099de <USBD_GetString>
  return USBD_StrDesc;
 80128da:	4b02      	ldr	r3, [pc, #8]	@ (80128e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3708      	adds	r7, #8
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	20008ccc 	.word	0x20008ccc
 80128e8:	080162a0 	.word	0x080162a0

080128ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	4603      	mov	r3, r0
 80128f4:	6039      	str	r1, [r7, #0]
 80128f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	221a      	movs	r2, #26
 80128fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80128fe:	f000 f843 	bl	8012988 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012902:	4b02      	ldr	r3, [pc, #8]	@ (801290c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012904:	4618      	mov	r0, r3
 8012906:	3708      	adds	r7, #8
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	20000168 	.word	0x20000168

08012910 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
 8012916:	4603      	mov	r3, r0
 8012918:	6039      	str	r1, [r7, #0]
 801291a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	2b00      	cmp	r3, #0
 8012920:	d105      	bne.n	801292e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	4907      	ldr	r1, [pc, #28]	@ (8012944 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012926:	4808      	ldr	r0, [pc, #32]	@ (8012948 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012928:	f7f7 f859 	bl	80099de <USBD_GetString>
 801292c:	e004      	b.n	8012938 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	4904      	ldr	r1, [pc, #16]	@ (8012944 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012932:	4805      	ldr	r0, [pc, #20]	@ (8012948 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012934:	f7f7 f853 	bl	80099de <USBD_GetString>
  }
  return USBD_StrDesc;
 8012938:	4b02      	ldr	r3, [pc, #8]	@ (8012944 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801293a:	4618      	mov	r0, r3
 801293c:	3708      	adds	r7, #8
 801293e:	46bd      	mov	sp, r7
 8012940:	bd80      	pop	{r7, pc}
 8012942:	bf00      	nop
 8012944:	20008ccc 	.word	0x20008ccc
 8012948:	080162b4 	.word	0x080162b4

0801294c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	4603      	mov	r3, r0
 8012954:	6039      	str	r1, [r7, #0]
 8012956:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012958:	79fb      	ldrb	r3, [r7, #7]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d105      	bne.n	801296a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801295e:	683a      	ldr	r2, [r7, #0]
 8012960:	4907      	ldr	r1, [pc, #28]	@ (8012980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012962:	4808      	ldr	r0, [pc, #32]	@ (8012984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012964:	f7f7 f83b 	bl	80099de <USBD_GetString>
 8012968:	e004      	b.n	8012974 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801296a:	683a      	ldr	r2, [r7, #0]
 801296c:	4904      	ldr	r1, [pc, #16]	@ (8012980 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801296e:	4805      	ldr	r0, [pc, #20]	@ (8012984 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012970:	f7f7 f835 	bl	80099de <USBD_GetString>
  }
  return USBD_StrDesc;
 8012974:	4b02      	ldr	r3, [pc, #8]	@ (8012980 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012976:	4618      	mov	r0, r3
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	20008ccc 	.word	0x20008ccc
 8012984:	080162c0 	.word	0x080162c0

08012988 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801298e:	4b0f      	ldr	r3, [pc, #60]	@ (80129cc <Get_SerialNum+0x44>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012994:	4b0e      	ldr	r3, [pc, #56]	@ (80129d0 <Get_SerialNum+0x48>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801299a:	4b0e      	ldr	r3, [pc, #56]	@ (80129d4 <Get_SerialNum+0x4c>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80129a0:	68fa      	ldr	r2, [r7, #12]
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	4413      	add	r3, r2
 80129a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d009      	beq.n	80129c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80129ae:	2208      	movs	r2, #8
 80129b0:	4909      	ldr	r1, [pc, #36]	@ (80129d8 <Get_SerialNum+0x50>)
 80129b2:	68f8      	ldr	r0, [r7, #12]
 80129b4:	f000 f814 	bl	80129e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80129b8:	2204      	movs	r2, #4
 80129ba:	4908      	ldr	r1, [pc, #32]	@ (80129dc <Get_SerialNum+0x54>)
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f000 f80f 	bl	80129e0 <IntToUnicode>
  }
}
 80129c2:	bf00      	nop
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	1ffff7e8 	.word	0x1ffff7e8
 80129d0:	1ffff7ec 	.word	0x1ffff7ec
 80129d4:	1ffff7f0 	.word	0x1ffff7f0
 80129d8:	2000016a 	.word	0x2000016a
 80129dc:	2000017a 	.word	0x2000017a

080129e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80129e0:	b480      	push	{r7}
 80129e2:	b087      	sub	sp, #28
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	4613      	mov	r3, r2
 80129ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80129f2:	2300      	movs	r3, #0
 80129f4:	75fb      	strb	r3, [r7, #23]
 80129f6:	e027      	b.n	8012a48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	0f1b      	lsrs	r3, r3, #28
 80129fc:	2b09      	cmp	r3, #9
 80129fe:	d80b      	bhi.n	8012a18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	0f1b      	lsrs	r3, r3, #28
 8012a04:	b2da      	uxtb	r2, r3
 8012a06:	7dfb      	ldrb	r3, [r7, #23]
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	4619      	mov	r1, r3
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	440b      	add	r3, r1
 8012a10:	3230      	adds	r2, #48	@ 0x30
 8012a12:	b2d2      	uxtb	r2, r2
 8012a14:	701a      	strb	r2, [r3, #0]
 8012a16:	e00a      	b.n	8012a2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	0f1b      	lsrs	r3, r3, #28
 8012a1c:	b2da      	uxtb	r2, r3
 8012a1e:	7dfb      	ldrb	r3, [r7, #23]
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	4619      	mov	r1, r3
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	440b      	add	r3, r1
 8012a28:	3237      	adds	r2, #55	@ 0x37
 8012a2a:	b2d2      	uxtb	r2, r2
 8012a2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012a34:	7dfb      	ldrb	r3, [r7, #23]
 8012a36:	005b      	lsls	r3, r3, #1
 8012a38:	3301      	adds	r3, #1
 8012a3a:	68ba      	ldr	r2, [r7, #8]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	2200      	movs	r2, #0
 8012a40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012a42:	7dfb      	ldrb	r3, [r7, #23]
 8012a44:	3301      	adds	r3, #1
 8012a46:	75fb      	strb	r3, [r7, #23]
 8012a48:	7dfa      	ldrb	r2, [r7, #23]
 8012a4a:	79fb      	ldrb	r3, [r7, #7]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d3d3      	bcc.n	80129f8 <IntToUnicode+0x18>
  }
}
 8012a50:	bf00      	nop
 8012a52:	bf00      	nop
 8012a54:	371c      	adds	r7, #28
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bc80      	pop	{r7}
 8012a5a:	4770      	bx	lr

08012a5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b084      	sub	sp, #16
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a6c:	d113      	bne.n	8012a96 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8012aa0 <HAL_PCD_MspInit+0x44>)
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	4a0b      	ldr	r2, [pc, #44]	@ (8012aa0 <HAL_PCD_MspInit+0x44>)
 8012a74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012a78:	6153      	str	r3, [r2, #20]
 8012a7a:	4b09      	ldr	r3, [pc, #36]	@ (8012aa0 <HAL_PCD_MspInit+0x44>)
 8012a7c:	695b      	ldr	r3, [r3, #20]
 8012a7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8012a82:	60fb      	str	r3, [r7, #12]
 8012a84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012a86:	2200      	movs	r2, #0
 8012a88:	2100      	movs	r1, #0
 8012a8a:	2043      	movs	r0, #67	@ 0x43
 8012a8c:	f7ef f827 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012a90:	2043      	movs	r0, #67	@ 0x43
 8012a92:	f7ef f840 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012a96:	bf00      	nop
 8012a98:	3710      	adds	r7, #16
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	40021000 	.word	0x40021000

08012aa4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4610      	mov	r0, r2
 8012abc:	f7f6 f829 	bl	8008b12 <USBD_LL_SetupStage>
}
 8012ac0:	bf00      	nop
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8012ada:	78fa      	ldrb	r2, [r7, #3]
 8012adc:	6879      	ldr	r1, [r7, #4]
 8012ade:	4613      	mov	r3, r2
 8012ae0:	00db      	lsls	r3, r3, #3
 8012ae2:	4413      	add	r3, r2
 8012ae4:	009b      	lsls	r3, r3, #2
 8012ae6:	440b      	add	r3, r1
 8012ae8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8012aec:	681a      	ldr	r2, [r3, #0]
 8012aee:	78fb      	ldrb	r3, [r7, #3]
 8012af0:	4619      	mov	r1, r3
 8012af2:	f7f6 f85b 	bl	8008bac <USBD_LL_DataOutStage>
}
 8012af6:	bf00      	nop
 8012af8:	3708      	adds	r7, #8
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}

08012afe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012afe:	b580      	push	{r7, lr}
 8012b00:	b082      	sub	sp, #8
 8012b02:	af00      	add	r7, sp, #0
 8012b04:	6078      	str	r0, [r7, #4]
 8012b06:	460b      	mov	r3, r1
 8012b08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8012b10:	78fa      	ldrb	r2, [r7, #3]
 8012b12:	6879      	ldr	r1, [r7, #4]
 8012b14:	4613      	mov	r3, r2
 8012b16:	00db      	lsls	r3, r3, #3
 8012b18:	4413      	add	r3, r2
 8012b1a:	009b      	lsls	r3, r3, #2
 8012b1c:	440b      	add	r3, r1
 8012b1e:	3348      	adds	r3, #72	@ 0x48
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	78fb      	ldrb	r3, [r7, #3]
 8012b24:	4619      	mov	r1, r3
 8012b26:	f7f6 f8b2 	bl	8008c8e <USBD_LL_DataInStage>
}
 8012b2a:	bf00      	nop
 8012b2c:	3708      	adds	r7, #8
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}

08012b32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b32:	b580      	push	{r7, lr}
 8012b34:	b082      	sub	sp, #8
 8012b36:	af00      	add	r7, sp, #0
 8012b38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7f6 f9c2 	bl	8008eca <USBD_LL_SOF>
}
 8012b46:	bf00      	nop
 8012b48:	3708      	adds	r7, #8
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}

08012b4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b4e:	b580      	push	{r7, lr}
 8012b50:	b084      	sub	sp, #16
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012b56:	2301      	movs	r3, #1
 8012b58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	2b02      	cmp	r3, #2
 8012b60:	d001      	beq.n	8012b66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012b62:	f7ee f995 	bl	8000e90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012b6c:	7bfa      	ldrb	r2, [r7, #15]
 8012b6e:	4611      	mov	r1, r2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7f6 f972 	bl	8008e5a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f6 f92b 	bl	8008dd8 <USBD_LL_Reset>
}
 8012b82:	bf00      	nop
 8012b84:	3710      	adds	r7, #16
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
	...

08012b8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b082      	sub	sp, #8
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7f6 f96c 	bl	8008e78 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	687a      	ldr	r2, [r7, #4]
 8012bac:	6812      	ldr	r2, [r2, #0]
 8012bae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012bb2:	f043 0301 	orr.w	r3, r3, #1
 8012bb6:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6a1b      	ldr	r3, [r3, #32]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d005      	beq.n	8012bcc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012bc0:	4b04      	ldr	r3, [pc, #16]	@ (8012bd4 <HAL_PCD_SuspendCallback+0x48>)
 8012bc2:	691b      	ldr	r3, [r3, #16]
 8012bc4:	4a03      	ldr	r2, [pc, #12]	@ (8012bd4 <HAL_PCD_SuspendCallback+0x48>)
 8012bc6:	f043 0306 	orr.w	r3, r3, #6
 8012bca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012bcc:	bf00      	nop
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	e000ed00 	.word	0xe000ed00

08012bd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7f6 f95a 	bl	8008ea0 <USBD_LL_Resume>
}
 8012bec:	bf00      	nop
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012c06:	78fa      	ldrb	r2, [r7, #3]
 8012c08:	4611      	mov	r1, r2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f7f6 f983 	bl	8008f16 <USBD_LL_IsoOUTIncomplete>
}
 8012c10:	bf00      	nop
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	460b      	mov	r3, r1
 8012c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012c2a:	78fa      	ldrb	r2, [r7, #3]
 8012c2c:	4611      	mov	r1, r2
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7f6 f965 	bl	8008efe <USBD_LL_IsoINIncomplete>
}
 8012c34:	bf00      	nop
 8012c36:	3708      	adds	r7, #8
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}

08012c3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7f6 f96f 	bl	8008f2e <USBD_LL_DevConnected>
}
 8012c50:	bf00      	nop
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7f6 f96b 	bl	8008f42 <USBD_LL_DevDisconnected>
}
 8012c6c:	bf00      	nop
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}

08012c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d133      	bne.n	8012cec <USBD_LL_Init+0x78>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012c84:	4a1c      	ldr	r2, [pc, #112]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012c90:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012c94:	4b18      	ldr	r3, [pc, #96]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012c96:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012c9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012c9c:	4b16      	ldr	r3, [pc, #88]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012c9e:	2204      	movs	r2, #4
 8012ca0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012ca2:	4b15      	ldr	r3, [pc, #84]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012ca4:	2202      	movs	r2, #2
 8012ca6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012ca8:	4b13      	ldr	r3, [pc, #76]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012caa:	2202      	movs	r2, #2
 8012cac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012cae:	4b12      	ldr	r3, [pc, #72]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012cb4:	4b10      	ldr	r3, [pc, #64]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012cba:	4b0f      	ldr	r3, [pc, #60]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012cc0:	480d      	ldr	r0, [pc, #52]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cc2:	f7f0 fd8e 	bl	80037e2 <HAL_PCD_Init>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d001      	beq.n	8012cd0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012ccc:	f7ee f8e0 	bl	8000e90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012cd0:	2180      	movs	r1, #128	@ 0x80
 8012cd2:	4809      	ldr	r0, [pc, #36]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cd4:	f7f1 fea6 	bl	8004a24 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012cd8:	2240      	movs	r2, #64	@ 0x40
 8012cda:	2100      	movs	r1, #0
 8012cdc:	4806      	ldr	r0, [pc, #24]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012cde:	f7f1 fe5b 	bl	8004998 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012ce2:	2280      	movs	r2, #128	@ 0x80
 8012ce4:	2101      	movs	r1, #1
 8012ce6:	4804      	ldr	r0, [pc, #16]	@ (8012cf8 <USBD_LL_Init+0x84>)
 8012ce8:	f7f1 fe56 	bl	8004998 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3708      	adds	r7, #8
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	20008ecc 	.word	0x20008ecc

08012cfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d04:	2300      	movs	r3, #0
 8012d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d08:	2300      	movs	r3, #0
 8012d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f0 fe82 	bl	8003a1c <HAL_PCD_Start>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d1c:	7bfb      	ldrb	r3, [r7, #15]
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f000 f944 	bl	8012fac <USBD_Get_USB_Status>
 8012d24:	4603      	mov	r3, r0
 8012d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}

08012d32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012d32:	b580      	push	{r7, lr}
 8012d34:	b084      	sub	sp, #16
 8012d36:	af00      	add	r7, sp, #0
 8012d38:	6078      	str	r0, [r7, #4]
 8012d3a:	4608      	mov	r0, r1
 8012d3c:	4611      	mov	r1, r2
 8012d3e:	461a      	mov	r2, r3
 8012d40:	4603      	mov	r3, r0
 8012d42:	70fb      	strb	r3, [r7, #3]
 8012d44:	460b      	mov	r3, r1
 8012d46:	70bb      	strb	r3, [r7, #2]
 8012d48:	4613      	mov	r3, r2
 8012d4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d50:	2300      	movs	r3, #0
 8012d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8012d5a:	78bb      	ldrb	r3, [r7, #2]
 8012d5c:	883a      	ldrh	r2, [r7, #0]
 8012d5e:	78f9      	ldrb	r1, [r7, #3]
 8012d60:	f7f1 fafb 	bl	800435a <HAL_PCD_EP_Open>
 8012d64:	4603      	mov	r3, r0
 8012d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d68:	7bfb      	ldrb	r3, [r7, #15]
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f000 f91e 	bl	8012fac <USBD_Get_USB_Status>
 8012d70:	4603      	mov	r3, r0
 8012d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3710      	adds	r7, #16
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}

08012d7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d7e:	b580      	push	{r7, lr}
 8012d80:	b084      	sub	sp, #16
 8012d82:	af00      	add	r7, sp, #0
 8012d84:	6078      	str	r0, [r7, #4]
 8012d86:	460b      	mov	r3, r1
 8012d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012d98:	78fa      	ldrb	r2, [r7, #3]
 8012d9a:	4611      	mov	r1, r2
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f1 fb44 	bl	800442a <HAL_PCD_EP_Close>
 8012da2:	4603      	mov	r3, r0
 8012da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012da6:	7bfb      	ldrb	r3, [r7, #15]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f000 f8ff 	bl	8012fac <USBD_Get_USB_Status>
 8012dae:	4603      	mov	r3, r0
 8012db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012dd6:	78fa      	ldrb	r2, [r7, #3]
 8012dd8:	4611      	mov	r1, r2
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7f1 fbe9 	bl	80045b2 <HAL_PCD_EP_SetStall>
 8012de0:	4603      	mov	r3, r0
 8012de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012de4:	7bfb      	ldrb	r3, [r7, #15]
 8012de6:	4618      	mov	r0, r3
 8012de8:	f000 f8e0 	bl	8012fac <USBD_Get_USB_Status>
 8012dec:	4603      	mov	r3, r0
 8012dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3710      	adds	r7, #16
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}

08012dfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012dfa:	b580      	push	{r7, lr}
 8012dfc:	b084      	sub	sp, #16
 8012dfe:	af00      	add	r7, sp, #0
 8012e00:	6078      	str	r0, [r7, #4]
 8012e02:	460b      	mov	r3, r1
 8012e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e06:	2300      	movs	r3, #0
 8012e08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012e14:	78fa      	ldrb	r2, [r7, #3]
 8012e16:	4611      	mov	r1, r2
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7f1 fc2c 	bl	8004676 <HAL_PCD_EP_ClrStall>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e22:	7bfb      	ldrb	r3, [r7, #15]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f000 f8c1 	bl	8012fac <USBD_Get_USB_Status>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3710      	adds	r7, #16
 8012e34:	46bd      	mov	sp, r7
 8012e36:	bd80      	pop	{r7, pc}

08012e38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	460b      	mov	r3, r1
 8012e42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012e4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	da0b      	bge.n	8012e6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012e54:	78fb      	ldrb	r3, [r7, #3]
 8012e56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012e5a:	68f9      	ldr	r1, [r7, #12]
 8012e5c:	4613      	mov	r3, r2
 8012e5e:	00db      	lsls	r3, r3, #3
 8012e60:	4413      	add	r3, r2
 8012e62:	009b      	lsls	r3, r3, #2
 8012e64:	440b      	add	r3, r1
 8012e66:	333e      	adds	r3, #62	@ 0x3e
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	e00b      	b.n	8012e84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012e6c:	78fb      	ldrb	r3, [r7, #3]
 8012e6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012e72:	68f9      	ldr	r1, [r7, #12]
 8012e74:	4613      	mov	r3, r2
 8012e76:	00db      	lsls	r3, r3, #3
 8012e78:	4413      	add	r3, r2
 8012e7a:	009b      	lsls	r3, r3, #2
 8012e7c:	440b      	add	r3, r1
 8012e7e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8012e82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3714      	adds	r7, #20
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bc80      	pop	{r7}
 8012e8c:	4770      	bx	lr

08012e8e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012e8e:	b580      	push	{r7, lr}
 8012e90:	b084      	sub	sp, #16
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	460b      	mov	r3, r1
 8012e98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012ea8:	78fa      	ldrb	r2, [r7, #3]
 8012eaa:	4611      	mov	r1, r2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7f1 fa2f 	bl	8004310 <HAL_PCD_SetAddress>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012eb6:	7bfb      	ldrb	r3, [r7, #15]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 f877 	bl	8012fac <USBD_Get_USB_Status>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b086      	sub	sp, #24
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	607a      	str	r2, [r7, #4]
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	460b      	mov	r3, r1
 8012eda:	72fb      	strb	r3, [r7, #11]
 8012edc:	4613      	mov	r3, r2
 8012ede:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8012eee:	893b      	ldrh	r3, [r7, #8]
 8012ef0:	7af9      	ldrb	r1, [r7, #11]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	f7f1 fb2c 	bl	8004550 <HAL_PCD_EP_Transmit>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012efc:	7dfb      	ldrb	r3, [r7, #23]
 8012efe:	4618      	mov	r0, r3
 8012f00:	f000 f854 	bl	8012fac <USBD_Get_USB_Status>
 8012f04:	4603      	mov	r3, r0
 8012f06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012f08:	7dbb      	ldrb	r3, [r7, #22]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3718      	adds	r7, #24
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8012f12:	b580      	push	{r7, lr}
 8012f14:	b086      	sub	sp, #24
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	60f8      	str	r0, [r7, #12]
 8012f1a:	607a      	str	r2, [r7, #4]
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	460b      	mov	r3, r1
 8012f20:	72fb      	strb	r3, [r7, #11]
 8012f22:	4613      	mov	r3, r2
 8012f24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f26:	2300      	movs	r3, #0
 8012f28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8012f34:	893b      	ldrh	r3, [r7, #8]
 8012f36:	7af9      	ldrb	r1, [r7, #11]
 8012f38:	687a      	ldr	r2, [r7, #4]
 8012f3a:	f7f1 fac0 	bl	80044be <HAL_PCD_EP_Receive>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f42:	7dfb      	ldrb	r3, [r7, #23]
 8012f44:	4618      	mov	r0, r3
 8012f46:	f000 f831 	bl	8012fac <USBD_Get_USB_Status>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012f4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012f50:	4618      	mov	r0, r3
 8012f52:	3718      	adds	r7, #24
 8012f54:	46bd      	mov	sp, r7
 8012f56:	bd80      	pop	{r7, pc}

08012f58 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	460b      	mov	r3, r1
 8012f62:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012f6a:	78fa      	ldrb	r2, [r7, #3]
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7f1 fad7 	bl	8004522 <HAL_PCD_EP_GetRxCount>
 8012f74:	4603      	mov	r3, r0
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3708      	adds	r7, #8
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}
	...

08012f80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012f88:	4b02      	ldr	r3, [pc, #8]	@ (8012f94 <USBD_static_malloc+0x14>)
}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	370c      	adds	r7, #12
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bc80      	pop	{r7}
 8012f92:	4770      	bx	lr
 8012f94:	200093d0 	.word	0x200093d0

08012f98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]

}
 8012fa0:	bf00      	nop
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bc80      	pop	{r7}
 8012fa8:	4770      	bx	lr
	...

08012fac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012fac:	b480      	push	{r7}
 8012fae:	b085      	sub	sp, #20
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	2b03      	cmp	r3, #3
 8012fbe:	d817      	bhi.n	8012ff0 <USBD_Get_USB_Status+0x44>
 8012fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8012fc8 <USBD_Get_USB_Status+0x1c>)
 8012fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fc6:	bf00      	nop
 8012fc8:	08012fd9 	.word	0x08012fd9
 8012fcc:	08012fdf 	.word	0x08012fdf
 8012fd0:	08012fe5 	.word	0x08012fe5
 8012fd4:	08012feb 	.word	0x08012feb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	73fb      	strb	r3, [r7, #15]
    break;
 8012fdc:	e00b      	b.n	8012ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012fde:	2302      	movs	r3, #2
 8012fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8012fe2:	e008      	b.n	8012ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8012fe8:	e005      	b.n	8012ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012fea:	2302      	movs	r3, #2
 8012fec:	73fb      	strb	r3, [r7, #15]
    break;
 8012fee:	e002      	b.n	8012ff6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012ff0:	2302      	movs	r3, #2
 8012ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8012ff4:	bf00      	nop
  }
  return usb_status;
 8012ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3714      	adds	r7, #20
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bc80      	pop	{r7}
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop

08013004 <std>:
 8013004:	2300      	movs	r3, #0
 8013006:	b510      	push	{r4, lr}
 8013008:	4604      	mov	r4, r0
 801300a:	e9c0 3300 	strd	r3, r3, [r0]
 801300e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013012:	6083      	str	r3, [r0, #8]
 8013014:	8181      	strh	r1, [r0, #12]
 8013016:	6643      	str	r3, [r0, #100]	@ 0x64
 8013018:	81c2      	strh	r2, [r0, #14]
 801301a:	6183      	str	r3, [r0, #24]
 801301c:	4619      	mov	r1, r3
 801301e:	2208      	movs	r2, #8
 8013020:	305c      	adds	r0, #92	@ 0x5c
 8013022:	f000 fa29 	bl	8013478 <memset>
 8013026:	4b0d      	ldr	r3, [pc, #52]	@ (801305c <std+0x58>)
 8013028:	6224      	str	r4, [r4, #32]
 801302a:	6263      	str	r3, [r4, #36]	@ 0x24
 801302c:	4b0c      	ldr	r3, [pc, #48]	@ (8013060 <std+0x5c>)
 801302e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013030:	4b0c      	ldr	r3, [pc, #48]	@ (8013064 <std+0x60>)
 8013032:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013034:	4b0c      	ldr	r3, [pc, #48]	@ (8013068 <std+0x64>)
 8013036:	6323      	str	r3, [r4, #48]	@ 0x30
 8013038:	4b0c      	ldr	r3, [pc, #48]	@ (801306c <std+0x68>)
 801303a:	429c      	cmp	r4, r3
 801303c:	d006      	beq.n	801304c <std+0x48>
 801303e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013042:	4294      	cmp	r4, r2
 8013044:	d002      	beq.n	801304c <std+0x48>
 8013046:	33d0      	adds	r3, #208	@ 0xd0
 8013048:	429c      	cmp	r4, r3
 801304a:	d105      	bne.n	8013058 <std+0x54>
 801304c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013054:	f000 ba96 	b.w	8013584 <__retarget_lock_init_recursive>
 8013058:	bd10      	pop	{r4, pc}
 801305a:	bf00      	nop
 801305c:	080132a9 	.word	0x080132a9
 8013060:	080132cb 	.word	0x080132cb
 8013064:	08013303 	.word	0x08013303
 8013068:	08013327 	.word	0x08013327
 801306c:	200095f0 	.word	0x200095f0

08013070 <stdio_exit_handler>:
 8013070:	4a02      	ldr	r2, [pc, #8]	@ (801307c <stdio_exit_handler+0xc>)
 8013072:	4903      	ldr	r1, [pc, #12]	@ (8013080 <stdio_exit_handler+0x10>)
 8013074:	4803      	ldr	r0, [pc, #12]	@ (8013084 <stdio_exit_handler+0x14>)
 8013076:	f000 b869 	b.w	801314c <_fwalk_sglue>
 801307a:	bf00      	nop
 801307c:	20000184 	.word	0x20000184
 8013080:	080140e9 	.word	0x080140e9
 8013084:	20000194 	.word	0x20000194

08013088 <cleanup_stdio>:
 8013088:	6841      	ldr	r1, [r0, #4]
 801308a:	4b0c      	ldr	r3, [pc, #48]	@ (80130bc <cleanup_stdio+0x34>)
 801308c:	b510      	push	{r4, lr}
 801308e:	4299      	cmp	r1, r3
 8013090:	4604      	mov	r4, r0
 8013092:	d001      	beq.n	8013098 <cleanup_stdio+0x10>
 8013094:	f001 f828 	bl	80140e8 <_fflush_r>
 8013098:	68a1      	ldr	r1, [r4, #8]
 801309a:	4b09      	ldr	r3, [pc, #36]	@ (80130c0 <cleanup_stdio+0x38>)
 801309c:	4299      	cmp	r1, r3
 801309e:	d002      	beq.n	80130a6 <cleanup_stdio+0x1e>
 80130a0:	4620      	mov	r0, r4
 80130a2:	f001 f821 	bl	80140e8 <_fflush_r>
 80130a6:	68e1      	ldr	r1, [r4, #12]
 80130a8:	4b06      	ldr	r3, [pc, #24]	@ (80130c4 <cleanup_stdio+0x3c>)
 80130aa:	4299      	cmp	r1, r3
 80130ac:	d004      	beq.n	80130b8 <cleanup_stdio+0x30>
 80130ae:	4620      	mov	r0, r4
 80130b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130b4:	f001 b818 	b.w	80140e8 <_fflush_r>
 80130b8:	bd10      	pop	{r4, pc}
 80130ba:	bf00      	nop
 80130bc:	200095f0 	.word	0x200095f0
 80130c0:	20009658 	.word	0x20009658
 80130c4:	200096c0 	.word	0x200096c0

080130c8 <global_stdio_init.part.0>:
 80130c8:	b510      	push	{r4, lr}
 80130ca:	4b0b      	ldr	r3, [pc, #44]	@ (80130f8 <global_stdio_init.part.0+0x30>)
 80130cc:	4c0b      	ldr	r4, [pc, #44]	@ (80130fc <global_stdio_init.part.0+0x34>)
 80130ce:	4a0c      	ldr	r2, [pc, #48]	@ (8013100 <global_stdio_init.part.0+0x38>)
 80130d0:	4620      	mov	r0, r4
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	2104      	movs	r1, #4
 80130d6:	2200      	movs	r2, #0
 80130d8:	f7ff ff94 	bl	8013004 <std>
 80130dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80130e0:	2201      	movs	r2, #1
 80130e2:	2109      	movs	r1, #9
 80130e4:	f7ff ff8e 	bl	8013004 <std>
 80130e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80130ec:	2202      	movs	r2, #2
 80130ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130f2:	2112      	movs	r1, #18
 80130f4:	f7ff bf86 	b.w	8013004 <std>
 80130f8:	20009728 	.word	0x20009728
 80130fc:	200095f0 	.word	0x200095f0
 8013100:	08013071 	.word	0x08013071

08013104 <__sfp_lock_acquire>:
 8013104:	4801      	ldr	r0, [pc, #4]	@ (801310c <__sfp_lock_acquire+0x8>)
 8013106:	f000 ba3e 	b.w	8013586 <__retarget_lock_acquire_recursive>
 801310a:	bf00      	nop
 801310c:	20009731 	.word	0x20009731

08013110 <__sfp_lock_release>:
 8013110:	4801      	ldr	r0, [pc, #4]	@ (8013118 <__sfp_lock_release+0x8>)
 8013112:	f000 ba39 	b.w	8013588 <__retarget_lock_release_recursive>
 8013116:	bf00      	nop
 8013118:	20009731 	.word	0x20009731

0801311c <__sinit>:
 801311c:	b510      	push	{r4, lr}
 801311e:	4604      	mov	r4, r0
 8013120:	f7ff fff0 	bl	8013104 <__sfp_lock_acquire>
 8013124:	6a23      	ldr	r3, [r4, #32]
 8013126:	b11b      	cbz	r3, 8013130 <__sinit+0x14>
 8013128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801312c:	f7ff bff0 	b.w	8013110 <__sfp_lock_release>
 8013130:	4b04      	ldr	r3, [pc, #16]	@ (8013144 <__sinit+0x28>)
 8013132:	6223      	str	r3, [r4, #32]
 8013134:	4b04      	ldr	r3, [pc, #16]	@ (8013148 <__sinit+0x2c>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1f5      	bne.n	8013128 <__sinit+0xc>
 801313c:	f7ff ffc4 	bl	80130c8 <global_stdio_init.part.0>
 8013140:	e7f2      	b.n	8013128 <__sinit+0xc>
 8013142:	bf00      	nop
 8013144:	08013089 	.word	0x08013089
 8013148:	20009728 	.word	0x20009728

0801314c <_fwalk_sglue>:
 801314c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013150:	4607      	mov	r7, r0
 8013152:	4688      	mov	r8, r1
 8013154:	4614      	mov	r4, r2
 8013156:	2600      	movs	r6, #0
 8013158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801315c:	f1b9 0901 	subs.w	r9, r9, #1
 8013160:	d505      	bpl.n	801316e <_fwalk_sglue+0x22>
 8013162:	6824      	ldr	r4, [r4, #0]
 8013164:	2c00      	cmp	r4, #0
 8013166:	d1f7      	bne.n	8013158 <_fwalk_sglue+0xc>
 8013168:	4630      	mov	r0, r6
 801316a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801316e:	89ab      	ldrh	r3, [r5, #12]
 8013170:	2b01      	cmp	r3, #1
 8013172:	d907      	bls.n	8013184 <_fwalk_sglue+0x38>
 8013174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013178:	3301      	adds	r3, #1
 801317a:	d003      	beq.n	8013184 <_fwalk_sglue+0x38>
 801317c:	4629      	mov	r1, r5
 801317e:	4638      	mov	r0, r7
 8013180:	47c0      	blx	r8
 8013182:	4306      	orrs	r6, r0
 8013184:	3568      	adds	r5, #104	@ 0x68
 8013186:	e7e9      	b.n	801315c <_fwalk_sglue+0x10>

08013188 <iprintf>:
 8013188:	b40f      	push	{r0, r1, r2, r3}
 801318a:	b507      	push	{r0, r1, r2, lr}
 801318c:	4906      	ldr	r1, [pc, #24]	@ (80131a8 <iprintf+0x20>)
 801318e:	ab04      	add	r3, sp, #16
 8013190:	6808      	ldr	r0, [r1, #0]
 8013192:	f853 2b04 	ldr.w	r2, [r3], #4
 8013196:	6881      	ldr	r1, [r0, #8]
 8013198:	9301      	str	r3, [sp, #4]
 801319a:	f000 fc7b 	bl	8013a94 <_vfiprintf_r>
 801319e:	b003      	add	sp, #12
 80131a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80131a4:	b004      	add	sp, #16
 80131a6:	4770      	bx	lr
 80131a8:	20000190 	.word	0x20000190

080131ac <_puts_r>:
 80131ac:	6a03      	ldr	r3, [r0, #32]
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	4605      	mov	r5, r0
 80131b2:	460e      	mov	r6, r1
 80131b4:	6884      	ldr	r4, [r0, #8]
 80131b6:	b90b      	cbnz	r3, 80131bc <_puts_r+0x10>
 80131b8:	f7ff ffb0 	bl	801311c <__sinit>
 80131bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131be:	07db      	lsls	r3, r3, #31
 80131c0:	d405      	bmi.n	80131ce <_puts_r+0x22>
 80131c2:	89a3      	ldrh	r3, [r4, #12]
 80131c4:	0598      	lsls	r0, r3, #22
 80131c6:	d402      	bmi.n	80131ce <_puts_r+0x22>
 80131c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131ca:	f000 f9dc 	bl	8013586 <__retarget_lock_acquire_recursive>
 80131ce:	89a3      	ldrh	r3, [r4, #12]
 80131d0:	0719      	lsls	r1, r3, #28
 80131d2:	d502      	bpl.n	80131da <_puts_r+0x2e>
 80131d4:	6923      	ldr	r3, [r4, #16]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d135      	bne.n	8013246 <_puts_r+0x9a>
 80131da:	4621      	mov	r1, r4
 80131dc:	4628      	mov	r0, r5
 80131de:	f000 f8e5 	bl	80133ac <__swsetup_r>
 80131e2:	b380      	cbz	r0, 8013246 <_puts_r+0x9a>
 80131e4:	f04f 35ff 	mov.w	r5, #4294967295
 80131e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131ea:	07da      	lsls	r2, r3, #31
 80131ec:	d405      	bmi.n	80131fa <_puts_r+0x4e>
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	059b      	lsls	r3, r3, #22
 80131f2:	d402      	bmi.n	80131fa <_puts_r+0x4e>
 80131f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131f6:	f000 f9c7 	bl	8013588 <__retarget_lock_release_recursive>
 80131fa:	4628      	mov	r0, r5
 80131fc:	bd70      	pop	{r4, r5, r6, pc}
 80131fe:	2b00      	cmp	r3, #0
 8013200:	da04      	bge.n	801320c <_puts_r+0x60>
 8013202:	69a2      	ldr	r2, [r4, #24]
 8013204:	429a      	cmp	r2, r3
 8013206:	dc17      	bgt.n	8013238 <_puts_r+0x8c>
 8013208:	290a      	cmp	r1, #10
 801320a:	d015      	beq.n	8013238 <_puts_r+0x8c>
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	1c5a      	adds	r2, r3, #1
 8013210:	6022      	str	r2, [r4, #0]
 8013212:	7019      	strb	r1, [r3, #0]
 8013214:	68a3      	ldr	r3, [r4, #8]
 8013216:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801321a:	3b01      	subs	r3, #1
 801321c:	60a3      	str	r3, [r4, #8]
 801321e:	2900      	cmp	r1, #0
 8013220:	d1ed      	bne.n	80131fe <_puts_r+0x52>
 8013222:	2b00      	cmp	r3, #0
 8013224:	da11      	bge.n	801324a <_puts_r+0x9e>
 8013226:	4622      	mov	r2, r4
 8013228:	210a      	movs	r1, #10
 801322a:	4628      	mov	r0, r5
 801322c:	f000 f87f 	bl	801332e <__swbuf_r>
 8013230:	3001      	adds	r0, #1
 8013232:	d0d7      	beq.n	80131e4 <_puts_r+0x38>
 8013234:	250a      	movs	r5, #10
 8013236:	e7d7      	b.n	80131e8 <_puts_r+0x3c>
 8013238:	4622      	mov	r2, r4
 801323a:	4628      	mov	r0, r5
 801323c:	f000 f877 	bl	801332e <__swbuf_r>
 8013240:	3001      	adds	r0, #1
 8013242:	d1e7      	bne.n	8013214 <_puts_r+0x68>
 8013244:	e7ce      	b.n	80131e4 <_puts_r+0x38>
 8013246:	3e01      	subs	r6, #1
 8013248:	e7e4      	b.n	8013214 <_puts_r+0x68>
 801324a:	6823      	ldr	r3, [r4, #0]
 801324c:	1c5a      	adds	r2, r3, #1
 801324e:	6022      	str	r2, [r4, #0]
 8013250:	220a      	movs	r2, #10
 8013252:	701a      	strb	r2, [r3, #0]
 8013254:	e7ee      	b.n	8013234 <_puts_r+0x88>
	...

08013258 <puts>:
 8013258:	4b02      	ldr	r3, [pc, #8]	@ (8013264 <puts+0xc>)
 801325a:	4601      	mov	r1, r0
 801325c:	6818      	ldr	r0, [r3, #0]
 801325e:	f7ff bfa5 	b.w	80131ac <_puts_r>
 8013262:	bf00      	nop
 8013264:	20000190 	.word	0x20000190

08013268 <siprintf>:
 8013268:	b40e      	push	{r1, r2, r3}
 801326a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801326e:	b500      	push	{lr}
 8013270:	b09c      	sub	sp, #112	@ 0x70
 8013272:	ab1d      	add	r3, sp, #116	@ 0x74
 8013274:	9002      	str	r0, [sp, #8]
 8013276:	9006      	str	r0, [sp, #24]
 8013278:	9107      	str	r1, [sp, #28]
 801327a:	9104      	str	r1, [sp, #16]
 801327c:	4808      	ldr	r0, [pc, #32]	@ (80132a0 <siprintf+0x38>)
 801327e:	4909      	ldr	r1, [pc, #36]	@ (80132a4 <siprintf+0x3c>)
 8013280:	f853 2b04 	ldr.w	r2, [r3], #4
 8013284:	9105      	str	r1, [sp, #20]
 8013286:	6800      	ldr	r0, [r0, #0]
 8013288:	a902      	add	r1, sp, #8
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	f000 fade 	bl	801384c <_svfiprintf_r>
 8013290:	2200      	movs	r2, #0
 8013292:	9b02      	ldr	r3, [sp, #8]
 8013294:	701a      	strb	r2, [r3, #0]
 8013296:	b01c      	add	sp, #112	@ 0x70
 8013298:	f85d eb04 	ldr.w	lr, [sp], #4
 801329c:	b003      	add	sp, #12
 801329e:	4770      	bx	lr
 80132a0:	20000190 	.word	0x20000190
 80132a4:	ffff0208 	.word	0xffff0208

080132a8 <__sread>:
 80132a8:	b510      	push	{r4, lr}
 80132aa:	460c      	mov	r4, r1
 80132ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132b0:	f000 f920 	bl	80134f4 <_read_r>
 80132b4:	2800      	cmp	r0, #0
 80132b6:	bfab      	itete	ge
 80132b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80132ba:	89a3      	ldrhlt	r3, [r4, #12]
 80132bc:	181b      	addge	r3, r3, r0
 80132be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80132c2:	bfac      	ite	ge
 80132c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80132c6:	81a3      	strhlt	r3, [r4, #12]
 80132c8:	bd10      	pop	{r4, pc}

080132ca <__swrite>:
 80132ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132ce:	461f      	mov	r7, r3
 80132d0:	898b      	ldrh	r3, [r1, #12]
 80132d2:	4605      	mov	r5, r0
 80132d4:	05db      	lsls	r3, r3, #23
 80132d6:	460c      	mov	r4, r1
 80132d8:	4616      	mov	r6, r2
 80132da:	d505      	bpl.n	80132e8 <__swrite+0x1e>
 80132dc:	2302      	movs	r3, #2
 80132de:	2200      	movs	r2, #0
 80132e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132e4:	f000 f8f4 	bl	80134d0 <_lseek_r>
 80132e8:	89a3      	ldrh	r3, [r4, #12]
 80132ea:	4632      	mov	r2, r6
 80132ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80132f0:	81a3      	strh	r3, [r4, #12]
 80132f2:	4628      	mov	r0, r5
 80132f4:	463b      	mov	r3, r7
 80132f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132fe:	f000 b90b 	b.w	8013518 <_write_r>

08013302 <__sseek>:
 8013302:	b510      	push	{r4, lr}
 8013304:	460c      	mov	r4, r1
 8013306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801330a:	f000 f8e1 	bl	80134d0 <_lseek_r>
 801330e:	1c43      	adds	r3, r0, #1
 8013310:	89a3      	ldrh	r3, [r4, #12]
 8013312:	bf15      	itete	ne
 8013314:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013316:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801331a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801331e:	81a3      	strheq	r3, [r4, #12]
 8013320:	bf18      	it	ne
 8013322:	81a3      	strhne	r3, [r4, #12]
 8013324:	bd10      	pop	{r4, pc}

08013326 <__sclose>:
 8013326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801332a:	f000 b8c1 	b.w	80134b0 <_close_r>

0801332e <__swbuf_r>:
 801332e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013330:	460e      	mov	r6, r1
 8013332:	4614      	mov	r4, r2
 8013334:	4605      	mov	r5, r0
 8013336:	b118      	cbz	r0, 8013340 <__swbuf_r+0x12>
 8013338:	6a03      	ldr	r3, [r0, #32]
 801333a:	b90b      	cbnz	r3, 8013340 <__swbuf_r+0x12>
 801333c:	f7ff feee 	bl	801311c <__sinit>
 8013340:	69a3      	ldr	r3, [r4, #24]
 8013342:	60a3      	str	r3, [r4, #8]
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	071a      	lsls	r2, r3, #28
 8013348:	d501      	bpl.n	801334e <__swbuf_r+0x20>
 801334a:	6923      	ldr	r3, [r4, #16]
 801334c:	b943      	cbnz	r3, 8013360 <__swbuf_r+0x32>
 801334e:	4621      	mov	r1, r4
 8013350:	4628      	mov	r0, r5
 8013352:	f000 f82b 	bl	80133ac <__swsetup_r>
 8013356:	b118      	cbz	r0, 8013360 <__swbuf_r+0x32>
 8013358:	f04f 37ff 	mov.w	r7, #4294967295
 801335c:	4638      	mov	r0, r7
 801335e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013360:	6823      	ldr	r3, [r4, #0]
 8013362:	6922      	ldr	r2, [r4, #16]
 8013364:	b2f6      	uxtb	r6, r6
 8013366:	1a98      	subs	r0, r3, r2
 8013368:	6963      	ldr	r3, [r4, #20]
 801336a:	4637      	mov	r7, r6
 801336c:	4283      	cmp	r3, r0
 801336e:	dc05      	bgt.n	801337c <__swbuf_r+0x4e>
 8013370:	4621      	mov	r1, r4
 8013372:	4628      	mov	r0, r5
 8013374:	f000 feb8 	bl	80140e8 <_fflush_r>
 8013378:	2800      	cmp	r0, #0
 801337a:	d1ed      	bne.n	8013358 <__swbuf_r+0x2a>
 801337c:	68a3      	ldr	r3, [r4, #8]
 801337e:	3b01      	subs	r3, #1
 8013380:	60a3      	str	r3, [r4, #8]
 8013382:	6823      	ldr	r3, [r4, #0]
 8013384:	1c5a      	adds	r2, r3, #1
 8013386:	6022      	str	r2, [r4, #0]
 8013388:	701e      	strb	r6, [r3, #0]
 801338a:	6962      	ldr	r2, [r4, #20]
 801338c:	1c43      	adds	r3, r0, #1
 801338e:	429a      	cmp	r2, r3
 8013390:	d004      	beq.n	801339c <__swbuf_r+0x6e>
 8013392:	89a3      	ldrh	r3, [r4, #12]
 8013394:	07db      	lsls	r3, r3, #31
 8013396:	d5e1      	bpl.n	801335c <__swbuf_r+0x2e>
 8013398:	2e0a      	cmp	r6, #10
 801339a:	d1df      	bne.n	801335c <__swbuf_r+0x2e>
 801339c:	4621      	mov	r1, r4
 801339e:	4628      	mov	r0, r5
 80133a0:	f000 fea2 	bl	80140e8 <_fflush_r>
 80133a4:	2800      	cmp	r0, #0
 80133a6:	d0d9      	beq.n	801335c <__swbuf_r+0x2e>
 80133a8:	e7d6      	b.n	8013358 <__swbuf_r+0x2a>
	...

080133ac <__swsetup_r>:
 80133ac:	b538      	push	{r3, r4, r5, lr}
 80133ae:	4b29      	ldr	r3, [pc, #164]	@ (8013454 <__swsetup_r+0xa8>)
 80133b0:	4605      	mov	r5, r0
 80133b2:	6818      	ldr	r0, [r3, #0]
 80133b4:	460c      	mov	r4, r1
 80133b6:	b118      	cbz	r0, 80133c0 <__swsetup_r+0x14>
 80133b8:	6a03      	ldr	r3, [r0, #32]
 80133ba:	b90b      	cbnz	r3, 80133c0 <__swsetup_r+0x14>
 80133bc:	f7ff feae 	bl	801311c <__sinit>
 80133c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133c4:	0719      	lsls	r1, r3, #28
 80133c6:	d422      	bmi.n	801340e <__swsetup_r+0x62>
 80133c8:	06da      	lsls	r2, r3, #27
 80133ca:	d407      	bmi.n	80133dc <__swsetup_r+0x30>
 80133cc:	2209      	movs	r2, #9
 80133ce:	602a      	str	r2, [r5, #0]
 80133d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80133d4:	f04f 30ff 	mov.w	r0, #4294967295
 80133d8:	81a3      	strh	r3, [r4, #12]
 80133da:	e033      	b.n	8013444 <__swsetup_r+0x98>
 80133dc:	0758      	lsls	r0, r3, #29
 80133de:	d512      	bpl.n	8013406 <__swsetup_r+0x5a>
 80133e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80133e2:	b141      	cbz	r1, 80133f6 <__swsetup_r+0x4a>
 80133e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80133e8:	4299      	cmp	r1, r3
 80133ea:	d002      	beq.n	80133f2 <__swsetup_r+0x46>
 80133ec:	4628      	mov	r0, r5
 80133ee:	f000 f8db 	bl	80135a8 <_free_r>
 80133f2:	2300      	movs	r3, #0
 80133f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80133f6:	89a3      	ldrh	r3, [r4, #12]
 80133f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80133fc:	81a3      	strh	r3, [r4, #12]
 80133fe:	2300      	movs	r3, #0
 8013400:	6063      	str	r3, [r4, #4]
 8013402:	6923      	ldr	r3, [r4, #16]
 8013404:	6023      	str	r3, [r4, #0]
 8013406:	89a3      	ldrh	r3, [r4, #12]
 8013408:	f043 0308 	orr.w	r3, r3, #8
 801340c:	81a3      	strh	r3, [r4, #12]
 801340e:	6923      	ldr	r3, [r4, #16]
 8013410:	b94b      	cbnz	r3, 8013426 <__swsetup_r+0x7a>
 8013412:	89a3      	ldrh	r3, [r4, #12]
 8013414:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801341c:	d003      	beq.n	8013426 <__swsetup_r+0x7a>
 801341e:	4621      	mov	r1, r4
 8013420:	4628      	mov	r0, r5
 8013422:	f000 feae 	bl	8014182 <__smakebuf_r>
 8013426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801342a:	f013 0201 	ands.w	r2, r3, #1
 801342e:	d00a      	beq.n	8013446 <__swsetup_r+0x9a>
 8013430:	2200      	movs	r2, #0
 8013432:	60a2      	str	r2, [r4, #8]
 8013434:	6962      	ldr	r2, [r4, #20]
 8013436:	4252      	negs	r2, r2
 8013438:	61a2      	str	r2, [r4, #24]
 801343a:	6922      	ldr	r2, [r4, #16]
 801343c:	b942      	cbnz	r2, 8013450 <__swsetup_r+0xa4>
 801343e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013442:	d1c5      	bne.n	80133d0 <__swsetup_r+0x24>
 8013444:	bd38      	pop	{r3, r4, r5, pc}
 8013446:	0799      	lsls	r1, r3, #30
 8013448:	bf58      	it	pl
 801344a:	6962      	ldrpl	r2, [r4, #20]
 801344c:	60a2      	str	r2, [r4, #8]
 801344e:	e7f4      	b.n	801343a <__swsetup_r+0x8e>
 8013450:	2000      	movs	r0, #0
 8013452:	e7f7      	b.n	8013444 <__swsetup_r+0x98>
 8013454:	20000190 	.word	0x20000190

08013458 <memcmp>:
 8013458:	b510      	push	{r4, lr}
 801345a:	3901      	subs	r1, #1
 801345c:	4402      	add	r2, r0
 801345e:	4290      	cmp	r0, r2
 8013460:	d101      	bne.n	8013466 <memcmp+0xe>
 8013462:	2000      	movs	r0, #0
 8013464:	e005      	b.n	8013472 <memcmp+0x1a>
 8013466:	7803      	ldrb	r3, [r0, #0]
 8013468:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801346c:	42a3      	cmp	r3, r4
 801346e:	d001      	beq.n	8013474 <memcmp+0x1c>
 8013470:	1b18      	subs	r0, r3, r4
 8013472:	bd10      	pop	{r4, pc}
 8013474:	3001      	adds	r0, #1
 8013476:	e7f2      	b.n	801345e <memcmp+0x6>

08013478 <memset>:
 8013478:	4603      	mov	r3, r0
 801347a:	4402      	add	r2, r0
 801347c:	4293      	cmp	r3, r2
 801347e:	d100      	bne.n	8013482 <memset+0xa>
 8013480:	4770      	bx	lr
 8013482:	f803 1b01 	strb.w	r1, [r3], #1
 8013486:	e7f9      	b.n	801347c <memset+0x4>

08013488 <strncpy>:
 8013488:	4603      	mov	r3, r0
 801348a:	b510      	push	{r4, lr}
 801348c:	3901      	subs	r1, #1
 801348e:	b132      	cbz	r2, 801349e <strncpy+0x16>
 8013490:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013494:	3a01      	subs	r2, #1
 8013496:	f803 4b01 	strb.w	r4, [r3], #1
 801349a:	2c00      	cmp	r4, #0
 801349c:	d1f7      	bne.n	801348e <strncpy+0x6>
 801349e:	2100      	movs	r1, #0
 80134a0:	441a      	add	r2, r3
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d100      	bne.n	80134a8 <strncpy+0x20>
 80134a6:	bd10      	pop	{r4, pc}
 80134a8:	f803 1b01 	strb.w	r1, [r3], #1
 80134ac:	e7f9      	b.n	80134a2 <strncpy+0x1a>
	...

080134b0 <_close_r>:
 80134b0:	b538      	push	{r3, r4, r5, lr}
 80134b2:	2300      	movs	r3, #0
 80134b4:	4d05      	ldr	r5, [pc, #20]	@ (80134cc <_close_r+0x1c>)
 80134b6:	4604      	mov	r4, r0
 80134b8:	4608      	mov	r0, r1
 80134ba:	602b      	str	r3, [r5, #0]
 80134bc:	f7ed fe0f 	bl	80010de <_close>
 80134c0:	1c43      	adds	r3, r0, #1
 80134c2:	d102      	bne.n	80134ca <_close_r+0x1a>
 80134c4:	682b      	ldr	r3, [r5, #0]
 80134c6:	b103      	cbz	r3, 80134ca <_close_r+0x1a>
 80134c8:	6023      	str	r3, [r4, #0]
 80134ca:	bd38      	pop	{r3, r4, r5, pc}
 80134cc:	2000972c 	.word	0x2000972c

080134d0 <_lseek_r>:
 80134d0:	b538      	push	{r3, r4, r5, lr}
 80134d2:	4604      	mov	r4, r0
 80134d4:	4608      	mov	r0, r1
 80134d6:	4611      	mov	r1, r2
 80134d8:	2200      	movs	r2, #0
 80134da:	4d05      	ldr	r5, [pc, #20]	@ (80134f0 <_lseek_r+0x20>)
 80134dc:	602a      	str	r2, [r5, #0]
 80134de:	461a      	mov	r2, r3
 80134e0:	f7ed fe21 	bl	8001126 <_lseek>
 80134e4:	1c43      	adds	r3, r0, #1
 80134e6:	d102      	bne.n	80134ee <_lseek_r+0x1e>
 80134e8:	682b      	ldr	r3, [r5, #0]
 80134ea:	b103      	cbz	r3, 80134ee <_lseek_r+0x1e>
 80134ec:	6023      	str	r3, [r4, #0]
 80134ee:	bd38      	pop	{r3, r4, r5, pc}
 80134f0:	2000972c 	.word	0x2000972c

080134f4 <_read_r>:
 80134f4:	b538      	push	{r3, r4, r5, lr}
 80134f6:	4604      	mov	r4, r0
 80134f8:	4608      	mov	r0, r1
 80134fa:	4611      	mov	r1, r2
 80134fc:	2200      	movs	r2, #0
 80134fe:	4d05      	ldr	r5, [pc, #20]	@ (8013514 <_read_r+0x20>)
 8013500:	602a      	str	r2, [r5, #0]
 8013502:	461a      	mov	r2, r3
 8013504:	f7ed fdb2 	bl	800106c <_read>
 8013508:	1c43      	adds	r3, r0, #1
 801350a:	d102      	bne.n	8013512 <_read_r+0x1e>
 801350c:	682b      	ldr	r3, [r5, #0]
 801350e:	b103      	cbz	r3, 8013512 <_read_r+0x1e>
 8013510:	6023      	str	r3, [r4, #0]
 8013512:	bd38      	pop	{r3, r4, r5, pc}
 8013514:	2000972c 	.word	0x2000972c

08013518 <_write_r>:
 8013518:	b538      	push	{r3, r4, r5, lr}
 801351a:	4604      	mov	r4, r0
 801351c:	4608      	mov	r0, r1
 801351e:	4611      	mov	r1, r2
 8013520:	2200      	movs	r2, #0
 8013522:	4d05      	ldr	r5, [pc, #20]	@ (8013538 <_write_r+0x20>)
 8013524:	602a      	str	r2, [r5, #0]
 8013526:	461a      	mov	r2, r3
 8013528:	f7ed fdbd 	bl	80010a6 <_write>
 801352c:	1c43      	adds	r3, r0, #1
 801352e:	d102      	bne.n	8013536 <_write_r+0x1e>
 8013530:	682b      	ldr	r3, [r5, #0]
 8013532:	b103      	cbz	r3, 8013536 <_write_r+0x1e>
 8013534:	6023      	str	r3, [r4, #0]
 8013536:	bd38      	pop	{r3, r4, r5, pc}
 8013538:	2000972c 	.word	0x2000972c

0801353c <__libc_init_array>:
 801353c:	b570      	push	{r4, r5, r6, lr}
 801353e:	2600      	movs	r6, #0
 8013540:	4d0c      	ldr	r5, [pc, #48]	@ (8013574 <__libc_init_array+0x38>)
 8013542:	4c0d      	ldr	r4, [pc, #52]	@ (8013578 <__libc_init_array+0x3c>)
 8013544:	1b64      	subs	r4, r4, r5
 8013546:	10a4      	asrs	r4, r4, #2
 8013548:	42a6      	cmp	r6, r4
 801354a:	d109      	bne.n	8013560 <__libc_init_array+0x24>
 801354c:	f000 fee6 	bl	801431c <_init>
 8013550:	2600      	movs	r6, #0
 8013552:	4d0a      	ldr	r5, [pc, #40]	@ (801357c <__libc_init_array+0x40>)
 8013554:	4c0a      	ldr	r4, [pc, #40]	@ (8013580 <__libc_init_array+0x44>)
 8013556:	1b64      	subs	r4, r4, r5
 8013558:	10a4      	asrs	r4, r4, #2
 801355a:	42a6      	cmp	r6, r4
 801355c:	d105      	bne.n	801356a <__libc_init_array+0x2e>
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	f855 3b04 	ldr.w	r3, [r5], #4
 8013564:	4798      	blx	r3
 8013566:	3601      	adds	r6, #1
 8013568:	e7ee      	b.n	8013548 <__libc_init_array+0xc>
 801356a:	f855 3b04 	ldr.w	r3, [r5], #4
 801356e:	4798      	blx	r3
 8013570:	3601      	adds	r6, #1
 8013572:	e7f2      	b.n	801355a <__libc_init_array+0x1e>
 8013574:	08016428 	.word	0x08016428
 8013578:	08016428 	.word	0x08016428
 801357c:	08016428 	.word	0x08016428
 8013580:	0801642c 	.word	0x0801642c

08013584 <__retarget_lock_init_recursive>:
 8013584:	4770      	bx	lr

08013586 <__retarget_lock_acquire_recursive>:
 8013586:	4770      	bx	lr

08013588 <__retarget_lock_release_recursive>:
 8013588:	4770      	bx	lr

0801358a <memcpy>:
 801358a:	440a      	add	r2, r1
 801358c:	4291      	cmp	r1, r2
 801358e:	f100 33ff 	add.w	r3, r0, #4294967295
 8013592:	d100      	bne.n	8013596 <memcpy+0xc>
 8013594:	4770      	bx	lr
 8013596:	b510      	push	{r4, lr}
 8013598:	f811 4b01 	ldrb.w	r4, [r1], #1
 801359c:	4291      	cmp	r1, r2
 801359e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135a2:	d1f9      	bne.n	8013598 <memcpy+0xe>
 80135a4:	bd10      	pop	{r4, pc}
	...

080135a8 <_free_r>:
 80135a8:	b538      	push	{r3, r4, r5, lr}
 80135aa:	4605      	mov	r5, r0
 80135ac:	2900      	cmp	r1, #0
 80135ae:	d040      	beq.n	8013632 <_free_r+0x8a>
 80135b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135b4:	1f0c      	subs	r4, r1, #4
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	bfb8      	it	lt
 80135ba:	18e4      	addlt	r4, r4, r3
 80135bc:	f000 f8de 	bl	801377c <__malloc_lock>
 80135c0:	4a1c      	ldr	r2, [pc, #112]	@ (8013634 <_free_r+0x8c>)
 80135c2:	6813      	ldr	r3, [r2, #0]
 80135c4:	b933      	cbnz	r3, 80135d4 <_free_r+0x2c>
 80135c6:	6063      	str	r3, [r4, #4]
 80135c8:	6014      	str	r4, [r2, #0]
 80135ca:	4628      	mov	r0, r5
 80135cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135d0:	f000 b8da 	b.w	8013788 <__malloc_unlock>
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	d908      	bls.n	80135ea <_free_r+0x42>
 80135d8:	6820      	ldr	r0, [r4, #0]
 80135da:	1821      	adds	r1, r4, r0
 80135dc:	428b      	cmp	r3, r1
 80135de:	bf01      	itttt	eq
 80135e0:	6819      	ldreq	r1, [r3, #0]
 80135e2:	685b      	ldreq	r3, [r3, #4]
 80135e4:	1809      	addeq	r1, r1, r0
 80135e6:	6021      	streq	r1, [r4, #0]
 80135e8:	e7ed      	b.n	80135c6 <_free_r+0x1e>
 80135ea:	461a      	mov	r2, r3
 80135ec:	685b      	ldr	r3, [r3, #4]
 80135ee:	b10b      	cbz	r3, 80135f4 <_free_r+0x4c>
 80135f0:	42a3      	cmp	r3, r4
 80135f2:	d9fa      	bls.n	80135ea <_free_r+0x42>
 80135f4:	6811      	ldr	r1, [r2, #0]
 80135f6:	1850      	adds	r0, r2, r1
 80135f8:	42a0      	cmp	r0, r4
 80135fa:	d10b      	bne.n	8013614 <_free_r+0x6c>
 80135fc:	6820      	ldr	r0, [r4, #0]
 80135fe:	4401      	add	r1, r0
 8013600:	1850      	adds	r0, r2, r1
 8013602:	4283      	cmp	r3, r0
 8013604:	6011      	str	r1, [r2, #0]
 8013606:	d1e0      	bne.n	80135ca <_free_r+0x22>
 8013608:	6818      	ldr	r0, [r3, #0]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	4408      	add	r0, r1
 801360e:	6010      	str	r0, [r2, #0]
 8013610:	6053      	str	r3, [r2, #4]
 8013612:	e7da      	b.n	80135ca <_free_r+0x22>
 8013614:	d902      	bls.n	801361c <_free_r+0x74>
 8013616:	230c      	movs	r3, #12
 8013618:	602b      	str	r3, [r5, #0]
 801361a:	e7d6      	b.n	80135ca <_free_r+0x22>
 801361c:	6820      	ldr	r0, [r4, #0]
 801361e:	1821      	adds	r1, r4, r0
 8013620:	428b      	cmp	r3, r1
 8013622:	bf01      	itttt	eq
 8013624:	6819      	ldreq	r1, [r3, #0]
 8013626:	685b      	ldreq	r3, [r3, #4]
 8013628:	1809      	addeq	r1, r1, r0
 801362a:	6021      	streq	r1, [r4, #0]
 801362c:	6063      	str	r3, [r4, #4]
 801362e:	6054      	str	r4, [r2, #4]
 8013630:	e7cb      	b.n	80135ca <_free_r+0x22>
 8013632:	bd38      	pop	{r3, r4, r5, pc}
 8013634:	20009738 	.word	0x20009738

08013638 <sbrk_aligned>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	4e0f      	ldr	r6, [pc, #60]	@ (8013678 <sbrk_aligned+0x40>)
 801363c:	460c      	mov	r4, r1
 801363e:	6831      	ldr	r1, [r6, #0]
 8013640:	4605      	mov	r5, r0
 8013642:	b911      	cbnz	r1, 801364a <sbrk_aligned+0x12>
 8013644:	f000 fe16 	bl	8014274 <_sbrk_r>
 8013648:	6030      	str	r0, [r6, #0]
 801364a:	4621      	mov	r1, r4
 801364c:	4628      	mov	r0, r5
 801364e:	f000 fe11 	bl	8014274 <_sbrk_r>
 8013652:	1c43      	adds	r3, r0, #1
 8013654:	d103      	bne.n	801365e <sbrk_aligned+0x26>
 8013656:	f04f 34ff 	mov.w	r4, #4294967295
 801365a:	4620      	mov	r0, r4
 801365c:	bd70      	pop	{r4, r5, r6, pc}
 801365e:	1cc4      	adds	r4, r0, #3
 8013660:	f024 0403 	bic.w	r4, r4, #3
 8013664:	42a0      	cmp	r0, r4
 8013666:	d0f8      	beq.n	801365a <sbrk_aligned+0x22>
 8013668:	1a21      	subs	r1, r4, r0
 801366a:	4628      	mov	r0, r5
 801366c:	f000 fe02 	bl	8014274 <_sbrk_r>
 8013670:	3001      	adds	r0, #1
 8013672:	d1f2      	bne.n	801365a <sbrk_aligned+0x22>
 8013674:	e7ef      	b.n	8013656 <sbrk_aligned+0x1e>
 8013676:	bf00      	nop
 8013678:	20009734 	.word	0x20009734

0801367c <_malloc_r>:
 801367c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013680:	1ccd      	adds	r5, r1, #3
 8013682:	f025 0503 	bic.w	r5, r5, #3
 8013686:	3508      	adds	r5, #8
 8013688:	2d0c      	cmp	r5, #12
 801368a:	bf38      	it	cc
 801368c:	250c      	movcc	r5, #12
 801368e:	2d00      	cmp	r5, #0
 8013690:	4606      	mov	r6, r0
 8013692:	db01      	blt.n	8013698 <_malloc_r+0x1c>
 8013694:	42a9      	cmp	r1, r5
 8013696:	d904      	bls.n	80136a2 <_malloc_r+0x26>
 8013698:	230c      	movs	r3, #12
 801369a:	6033      	str	r3, [r6, #0]
 801369c:	2000      	movs	r0, #0
 801369e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013778 <_malloc_r+0xfc>
 80136a6:	f000 f869 	bl	801377c <__malloc_lock>
 80136aa:	f8d8 3000 	ldr.w	r3, [r8]
 80136ae:	461c      	mov	r4, r3
 80136b0:	bb44      	cbnz	r4, 8013704 <_malloc_r+0x88>
 80136b2:	4629      	mov	r1, r5
 80136b4:	4630      	mov	r0, r6
 80136b6:	f7ff ffbf 	bl	8013638 <sbrk_aligned>
 80136ba:	1c43      	adds	r3, r0, #1
 80136bc:	4604      	mov	r4, r0
 80136be:	d158      	bne.n	8013772 <_malloc_r+0xf6>
 80136c0:	f8d8 4000 	ldr.w	r4, [r8]
 80136c4:	4627      	mov	r7, r4
 80136c6:	2f00      	cmp	r7, #0
 80136c8:	d143      	bne.n	8013752 <_malloc_r+0xd6>
 80136ca:	2c00      	cmp	r4, #0
 80136cc:	d04b      	beq.n	8013766 <_malloc_r+0xea>
 80136ce:	6823      	ldr	r3, [r4, #0]
 80136d0:	4639      	mov	r1, r7
 80136d2:	4630      	mov	r0, r6
 80136d4:	eb04 0903 	add.w	r9, r4, r3
 80136d8:	f000 fdcc 	bl	8014274 <_sbrk_r>
 80136dc:	4581      	cmp	r9, r0
 80136de:	d142      	bne.n	8013766 <_malloc_r+0xea>
 80136e0:	6821      	ldr	r1, [r4, #0]
 80136e2:	4630      	mov	r0, r6
 80136e4:	1a6d      	subs	r5, r5, r1
 80136e6:	4629      	mov	r1, r5
 80136e8:	f7ff ffa6 	bl	8013638 <sbrk_aligned>
 80136ec:	3001      	adds	r0, #1
 80136ee:	d03a      	beq.n	8013766 <_malloc_r+0xea>
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	442b      	add	r3, r5
 80136f4:	6023      	str	r3, [r4, #0]
 80136f6:	f8d8 3000 	ldr.w	r3, [r8]
 80136fa:	685a      	ldr	r2, [r3, #4]
 80136fc:	bb62      	cbnz	r2, 8013758 <_malloc_r+0xdc>
 80136fe:	f8c8 7000 	str.w	r7, [r8]
 8013702:	e00f      	b.n	8013724 <_malloc_r+0xa8>
 8013704:	6822      	ldr	r2, [r4, #0]
 8013706:	1b52      	subs	r2, r2, r5
 8013708:	d420      	bmi.n	801374c <_malloc_r+0xd0>
 801370a:	2a0b      	cmp	r2, #11
 801370c:	d917      	bls.n	801373e <_malloc_r+0xc2>
 801370e:	1961      	adds	r1, r4, r5
 8013710:	42a3      	cmp	r3, r4
 8013712:	6025      	str	r5, [r4, #0]
 8013714:	bf18      	it	ne
 8013716:	6059      	strne	r1, [r3, #4]
 8013718:	6863      	ldr	r3, [r4, #4]
 801371a:	bf08      	it	eq
 801371c:	f8c8 1000 	streq.w	r1, [r8]
 8013720:	5162      	str	r2, [r4, r5]
 8013722:	604b      	str	r3, [r1, #4]
 8013724:	4630      	mov	r0, r6
 8013726:	f000 f82f 	bl	8013788 <__malloc_unlock>
 801372a:	f104 000b 	add.w	r0, r4, #11
 801372e:	1d23      	adds	r3, r4, #4
 8013730:	f020 0007 	bic.w	r0, r0, #7
 8013734:	1ac2      	subs	r2, r0, r3
 8013736:	bf1c      	itt	ne
 8013738:	1a1b      	subne	r3, r3, r0
 801373a:	50a3      	strne	r3, [r4, r2]
 801373c:	e7af      	b.n	801369e <_malloc_r+0x22>
 801373e:	6862      	ldr	r2, [r4, #4]
 8013740:	42a3      	cmp	r3, r4
 8013742:	bf0c      	ite	eq
 8013744:	f8c8 2000 	streq.w	r2, [r8]
 8013748:	605a      	strne	r2, [r3, #4]
 801374a:	e7eb      	b.n	8013724 <_malloc_r+0xa8>
 801374c:	4623      	mov	r3, r4
 801374e:	6864      	ldr	r4, [r4, #4]
 8013750:	e7ae      	b.n	80136b0 <_malloc_r+0x34>
 8013752:	463c      	mov	r4, r7
 8013754:	687f      	ldr	r7, [r7, #4]
 8013756:	e7b6      	b.n	80136c6 <_malloc_r+0x4a>
 8013758:	461a      	mov	r2, r3
 801375a:	685b      	ldr	r3, [r3, #4]
 801375c:	42a3      	cmp	r3, r4
 801375e:	d1fb      	bne.n	8013758 <_malloc_r+0xdc>
 8013760:	2300      	movs	r3, #0
 8013762:	6053      	str	r3, [r2, #4]
 8013764:	e7de      	b.n	8013724 <_malloc_r+0xa8>
 8013766:	230c      	movs	r3, #12
 8013768:	4630      	mov	r0, r6
 801376a:	6033      	str	r3, [r6, #0]
 801376c:	f000 f80c 	bl	8013788 <__malloc_unlock>
 8013770:	e794      	b.n	801369c <_malloc_r+0x20>
 8013772:	6005      	str	r5, [r0, #0]
 8013774:	e7d6      	b.n	8013724 <_malloc_r+0xa8>
 8013776:	bf00      	nop
 8013778:	20009738 	.word	0x20009738

0801377c <__malloc_lock>:
 801377c:	4801      	ldr	r0, [pc, #4]	@ (8013784 <__malloc_lock+0x8>)
 801377e:	f7ff bf02 	b.w	8013586 <__retarget_lock_acquire_recursive>
 8013782:	bf00      	nop
 8013784:	20009730 	.word	0x20009730

08013788 <__malloc_unlock>:
 8013788:	4801      	ldr	r0, [pc, #4]	@ (8013790 <__malloc_unlock+0x8>)
 801378a:	f7ff befd 	b.w	8013588 <__retarget_lock_release_recursive>
 801378e:	bf00      	nop
 8013790:	20009730 	.word	0x20009730

08013794 <__ssputs_r>:
 8013794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013798:	461f      	mov	r7, r3
 801379a:	688e      	ldr	r6, [r1, #8]
 801379c:	4682      	mov	sl, r0
 801379e:	42be      	cmp	r6, r7
 80137a0:	460c      	mov	r4, r1
 80137a2:	4690      	mov	r8, r2
 80137a4:	680b      	ldr	r3, [r1, #0]
 80137a6:	d82d      	bhi.n	8013804 <__ssputs_r+0x70>
 80137a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80137ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80137b0:	d026      	beq.n	8013800 <__ssputs_r+0x6c>
 80137b2:	6965      	ldr	r5, [r4, #20]
 80137b4:	6909      	ldr	r1, [r1, #16]
 80137b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80137ba:	eba3 0901 	sub.w	r9, r3, r1
 80137be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80137c2:	1c7b      	adds	r3, r7, #1
 80137c4:	444b      	add	r3, r9
 80137c6:	106d      	asrs	r5, r5, #1
 80137c8:	429d      	cmp	r5, r3
 80137ca:	bf38      	it	cc
 80137cc:	461d      	movcc	r5, r3
 80137ce:	0553      	lsls	r3, r2, #21
 80137d0:	d527      	bpl.n	8013822 <__ssputs_r+0x8e>
 80137d2:	4629      	mov	r1, r5
 80137d4:	f7ff ff52 	bl	801367c <_malloc_r>
 80137d8:	4606      	mov	r6, r0
 80137da:	b360      	cbz	r0, 8013836 <__ssputs_r+0xa2>
 80137dc:	464a      	mov	r2, r9
 80137de:	6921      	ldr	r1, [r4, #16]
 80137e0:	f7ff fed3 	bl	801358a <memcpy>
 80137e4:	89a3      	ldrh	r3, [r4, #12]
 80137e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80137ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137ee:	81a3      	strh	r3, [r4, #12]
 80137f0:	6126      	str	r6, [r4, #16]
 80137f2:	444e      	add	r6, r9
 80137f4:	6026      	str	r6, [r4, #0]
 80137f6:	463e      	mov	r6, r7
 80137f8:	6165      	str	r5, [r4, #20]
 80137fa:	eba5 0509 	sub.w	r5, r5, r9
 80137fe:	60a5      	str	r5, [r4, #8]
 8013800:	42be      	cmp	r6, r7
 8013802:	d900      	bls.n	8013806 <__ssputs_r+0x72>
 8013804:	463e      	mov	r6, r7
 8013806:	4632      	mov	r2, r6
 8013808:	4641      	mov	r1, r8
 801380a:	6820      	ldr	r0, [r4, #0]
 801380c:	f000 fcf5 	bl	80141fa <memmove>
 8013810:	2000      	movs	r0, #0
 8013812:	68a3      	ldr	r3, [r4, #8]
 8013814:	1b9b      	subs	r3, r3, r6
 8013816:	60a3      	str	r3, [r4, #8]
 8013818:	6823      	ldr	r3, [r4, #0]
 801381a:	4433      	add	r3, r6
 801381c:	6023      	str	r3, [r4, #0]
 801381e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013822:	462a      	mov	r2, r5
 8013824:	f000 fd44 	bl	80142b0 <_realloc_r>
 8013828:	4606      	mov	r6, r0
 801382a:	2800      	cmp	r0, #0
 801382c:	d1e0      	bne.n	80137f0 <__ssputs_r+0x5c>
 801382e:	4650      	mov	r0, sl
 8013830:	6921      	ldr	r1, [r4, #16]
 8013832:	f7ff feb9 	bl	80135a8 <_free_r>
 8013836:	230c      	movs	r3, #12
 8013838:	f8ca 3000 	str.w	r3, [sl]
 801383c:	89a3      	ldrh	r3, [r4, #12]
 801383e:	f04f 30ff 	mov.w	r0, #4294967295
 8013842:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013846:	81a3      	strh	r3, [r4, #12]
 8013848:	e7e9      	b.n	801381e <__ssputs_r+0x8a>
	...

0801384c <_svfiprintf_r>:
 801384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013850:	4698      	mov	r8, r3
 8013852:	898b      	ldrh	r3, [r1, #12]
 8013854:	4607      	mov	r7, r0
 8013856:	061b      	lsls	r3, r3, #24
 8013858:	460d      	mov	r5, r1
 801385a:	4614      	mov	r4, r2
 801385c:	b09d      	sub	sp, #116	@ 0x74
 801385e:	d510      	bpl.n	8013882 <_svfiprintf_r+0x36>
 8013860:	690b      	ldr	r3, [r1, #16]
 8013862:	b973      	cbnz	r3, 8013882 <_svfiprintf_r+0x36>
 8013864:	2140      	movs	r1, #64	@ 0x40
 8013866:	f7ff ff09 	bl	801367c <_malloc_r>
 801386a:	6028      	str	r0, [r5, #0]
 801386c:	6128      	str	r0, [r5, #16]
 801386e:	b930      	cbnz	r0, 801387e <_svfiprintf_r+0x32>
 8013870:	230c      	movs	r3, #12
 8013872:	603b      	str	r3, [r7, #0]
 8013874:	f04f 30ff 	mov.w	r0, #4294967295
 8013878:	b01d      	add	sp, #116	@ 0x74
 801387a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387e:	2340      	movs	r3, #64	@ 0x40
 8013880:	616b      	str	r3, [r5, #20]
 8013882:	2300      	movs	r3, #0
 8013884:	9309      	str	r3, [sp, #36]	@ 0x24
 8013886:	2320      	movs	r3, #32
 8013888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801388c:	2330      	movs	r3, #48	@ 0x30
 801388e:	f04f 0901 	mov.w	r9, #1
 8013892:	f8cd 800c 	str.w	r8, [sp, #12]
 8013896:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8013a30 <_svfiprintf_r+0x1e4>
 801389a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801389e:	4623      	mov	r3, r4
 80138a0:	469a      	mov	sl, r3
 80138a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138a6:	b10a      	cbz	r2, 80138ac <_svfiprintf_r+0x60>
 80138a8:	2a25      	cmp	r2, #37	@ 0x25
 80138aa:	d1f9      	bne.n	80138a0 <_svfiprintf_r+0x54>
 80138ac:	ebba 0b04 	subs.w	fp, sl, r4
 80138b0:	d00b      	beq.n	80138ca <_svfiprintf_r+0x7e>
 80138b2:	465b      	mov	r3, fp
 80138b4:	4622      	mov	r2, r4
 80138b6:	4629      	mov	r1, r5
 80138b8:	4638      	mov	r0, r7
 80138ba:	f7ff ff6b 	bl	8013794 <__ssputs_r>
 80138be:	3001      	adds	r0, #1
 80138c0:	f000 80a7 	beq.w	8013a12 <_svfiprintf_r+0x1c6>
 80138c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138c6:	445a      	add	r2, fp
 80138c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80138ca:	f89a 3000 	ldrb.w	r3, [sl]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	f000 809f 	beq.w	8013a12 <_svfiprintf_r+0x1c6>
 80138d4:	2300      	movs	r3, #0
 80138d6:	f04f 32ff 	mov.w	r2, #4294967295
 80138da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138de:	f10a 0a01 	add.w	sl, sl, #1
 80138e2:	9304      	str	r3, [sp, #16]
 80138e4:	9307      	str	r3, [sp, #28]
 80138e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80138ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80138ec:	4654      	mov	r4, sl
 80138ee:	2205      	movs	r2, #5
 80138f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138f4:	484e      	ldr	r0, [pc, #312]	@ (8013a30 <_svfiprintf_r+0x1e4>)
 80138f6:	f000 fccd 	bl	8014294 <memchr>
 80138fa:	9a04      	ldr	r2, [sp, #16]
 80138fc:	b9d8      	cbnz	r0, 8013936 <_svfiprintf_r+0xea>
 80138fe:	06d0      	lsls	r0, r2, #27
 8013900:	bf44      	itt	mi
 8013902:	2320      	movmi	r3, #32
 8013904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013908:	0711      	lsls	r1, r2, #28
 801390a:	bf44      	itt	mi
 801390c:	232b      	movmi	r3, #43	@ 0x2b
 801390e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013912:	f89a 3000 	ldrb.w	r3, [sl]
 8013916:	2b2a      	cmp	r3, #42	@ 0x2a
 8013918:	d015      	beq.n	8013946 <_svfiprintf_r+0xfa>
 801391a:	4654      	mov	r4, sl
 801391c:	2000      	movs	r0, #0
 801391e:	f04f 0c0a 	mov.w	ip, #10
 8013922:	9a07      	ldr	r2, [sp, #28]
 8013924:	4621      	mov	r1, r4
 8013926:	f811 3b01 	ldrb.w	r3, [r1], #1
 801392a:	3b30      	subs	r3, #48	@ 0x30
 801392c:	2b09      	cmp	r3, #9
 801392e:	d94b      	bls.n	80139c8 <_svfiprintf_r+0x17c>
 8013930:	b1b0      	cbz	r0, 8013960 <_svfiprintf_r+0x114>
 8013932:	9207      	str	r2, [sp, #28]
 8013934:	e014      	b.n	8013960 <_svfiprintf_r+0x114>
 8013936:	eba0 0308 	sub.w	r3, r0, r8
 801393a:	fa09 f303 	lsl.w	r3, r9, r3
 801393e:	4313      	orrs	r3, r2
 8013940:	46a2      	mov	sl, r4
 8013942:	9304      	str	r3, [sp, #16]
 8013944:	e7d2      	b.n	80138ec <_svfiprintf_r+0xa0>
 8013946:	9b03      	ldr	r3, [sp, #12]
 8013948:	1d19      	adds	r1, r3, #4
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	9103      	str	r1, [sp, #12]
 801394e:	2b00      	cmp	r3, #0
 8013950:	bfbb      	ittet	lt
 8013952:	425b      	neglt	r3, r3
 8013954:	f042 0202 	orrlt.w	r2, r2, #2
 8013958:	9307      	strge	r3, [sp, #28]
 801395a:	9307      	strlt	r3, [sp, #28]
 801395c:	bfb8      	it	lt
 801395e:	9204      	strlt	r2, [sp, #16]
 8013960:	7823      	ldrb	r3, [r4, #0]
 8013962:	2b2e      	cmp	r3, #46	@ 0x2e
 8013964:	d10a      	bne.n	801397c <_svfiprintf_r+0x130>
 8013966:	7863      	ldrb	r3, [r4, #1]
 8013968:	2b2a      	cmp	r3, #42	@ 0x2a
 801396a:	d132      	bne.n	80139d2 <_svfiprintf_r+0x186>
 801396c:	9b03      	ldr	r3, [sp, #12]
 801396e:	3402      	adds	r4, #2
 8013970:	1d1a      	adds	r2, r3, #4
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	9203      	str	r2, [sp, #12]
 8013976:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801397a:	9305      	str	r3, [sp, #20]
 801397c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8013a34 <_svfiprintf_r+0x1e8>
 8013980:	2203      	movs	r2, #3
 8013982:	4650      	mov	r0, sl
 8013984:	7821      	ldrb	r1, [r4, #0]
 8013986:	f000 fc85 	bl	8014294 <memchr>
 801398a:	b138      	cbz	r0, 801399c <_svfiprintf_r+0x150>
 801398c:	2240      	movs	r2, #64	@ 0x40
 801398e:	9b04      	ldr	r3, [sp, #16]
 8013990:	eba0 000a 	sub.w	r0, r0, sl
 8013994:	4082      	lsls	r2, r0
 8013996:	4313      	orrs	r3, r2
 8013998:	3401      	adds	r4, #1
 801399a:	9304      	str	r3, [sp, #16]
 801399c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139a0:	2206      	movs	r2, #6
 80139a2:	4825      	ldr	r0, [pc, #148]	@ (8013a38 <_svfiprintf_r+0x1ec>)
 80139a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80139a8:	f000 fc74 	bl	8014294 <memchr>
 80139ac:	2800      	cmp	r0, #0
 80139ae:	d036      	beq.n	8013a1e <_svfiprintf_r+0x1d2>
 80139b0:	4b22      	ldr	r3, [pc, #136]	@ (8013a3c <_svfiprintf_r+0x1f0>)
 80139b2:	bb1b      	cbnz	r3, 80139fc <_svfiprintf_r+0x1b0>
 80139b4:	9b03      	ldr	r3, [sp, #12]
 80139b6:	3307      	adds	r3, #7
 80139b8:	f023 0307 	bic.w	r3, r3, #7
 80139bc:	3308      	adds	r3, #8
 80139be:	9303      	str	r3, [sp, #12]
 80139c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139c2:	4433      	add	r3, r6
 80139c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80139c6:	e76a      	b.n	801389e <_svfiprintf_r+0x52>
 80139c8:	460c      	mov	r4, r1
 80139ca:	2001      	movs	r0, #1
 80139cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80139d0:	e7a8      	b.n	8013924 <_svfiprintf_r+0xd8>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f04f 0c0a 	mov.w	ip, #10
 80139d8:	4619      	mov	r1, r3
 80139da:	3401      	adds	r4, #1
 80139dc:	9305      	str	r3, [sp, #20]
 80139de:	4620      	mov	r0, r4
 80139e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139e4:	3a30      	subs	r2, #48	@ 0x30
 80139e6:	2a09      	cmp	r2, #9
 80139e8:	d903      	bls.n	80139f2 <_svfiprintf_r+0x1a6>
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d0c6      	beq.n	801397c <_svfiprintf_r+0x130>
 80139ee:	9105      	str	r1, [sp, #20]
 80139f0:	e7c4      	b.n	801397c <_svfiprintf_r+0x130>
 80139f2:	4604      	mov	r4, r0
 80139f4:	2301      	movs	r3, #1
 80139f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80139fa:	e7f0      	b.n	80139de <_svfiprintf_r+0x192>
 80139fc:	ab03      	add	r3, sp, #12
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	462a      	mov	r2, r5
 8013a02:	4638      	mov	r0, r7
 8013a04:	4b0e      	ldr	r3, [pc, #56]	@ (8013a40 <_svfiprintf_r+0x1f4>)
 8013a06:	a904      	add	r1, sp, #16
 8013a08:	f3af 8000 	nop.w
 8013a0c:	1c42      	adds	r2, r0, #1
 8013a0e:	4606      	mov	r6, r0
 8013a10:	d1d6      	bne.n	80139c0 <_svfiprintf_r+0x174>
 8013a12:	89ab      	ldrh	r3, [r5, #12]
 8013a14:	065b      	lsls	r3, r3, #25
 8013a16:	f53f af2d 	bmi.w	8013874 <_svfiprintf_r+0x28>
 8013a1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a1c:	e72c      	b.n	8013878 <_svfiprintf_r+0x2c>
 8013a1e:	ab03      	add	r3, sp, #12
 8013a20:	9300      	str	r3, [sp, #0]
 8013a22:	462a      	mov	r2, r5
 8013a24:	4638      	mov	r0, r7
 8013a26:	4b06      	ldr	r3, [pc, #24]	@ (8013a40 <_svfiprintf_r+0x1f4>)
 8013a28:	a904      	add	r1, sp, #16
 8013a2a:	f000 f9bd 	bl	8013da8 <_printf_i>
 8013a2e:	e7ed      	b.n	8013a0c <_svfiprintf_r+0x1c0>
 8013a30:	080163ea 	.word	0x080163ea
 8013a34:	080163f0 	.word	0x080163f0
 8013a38:	080163f4 	.word	0x080163f4
 8013a3c:	00000000 	.word	0x00000000
 8013a40:	08013795 	.word	0x08013795

08013a44 <__sfputc_r>:
 8013a44:	6893      	ldr	r3, [r2, #8]
 8013a46:	b410      	push	{r4}
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	6093      	str	r3, [r2, #8]
 8013a4e:	da07      	bge.n	8013a60 <__sfputc_r+0x1c>
 8013a50:	6994      	ldr	r4, [r2, #24]
 8013a52:	42a3      	cmp	r3, r4
 8013a54:	db01      	blt.n	8013a5a <__sfputc_r+0x16>
 8013a56:	290a      	cmp	r1, #10
 8013a58:	d102      	bne.n	8013a60 <__sfputc_r+0x1c>
 8013a5a:	bc10      	pop	{r4}
 8013a5c:	f7ff bc67 	b.w	801332e <__swbuf_r>
 8013a60:	6813      	ldr	r3, [r2, #0]
 8013a62:	1c58      	adds	r0, r3, #1
 8013a64:	6010      	str	r0, [r2, #0]
 8013a66:	7019      	strb	r1, [r3, #0]
 8013a68:	4608      	mov	r0, r1
 8013a6a:	bc10      	pop	{r4}
 8013a6c:	4770      	bx	lr

08013a6e <__sfputs_r>:
 8013a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a70:	4606      	mov	r6, r0
 8013a72:	460f      	mov	r7, r1
 8013a74:	4614      	mov	r4, r2
 8013a76:	18d5      	adds	r5, r2, r3
 8013a78:	42ac      	cmp	r4, r5
 8013a7a:	d101      	bne.n	8013a80 <__sfputs_r+0x12>
 8013a7c:	2000      	movs	r0, #0
 8013a7e:	e007      	b.n	8013a90 <__sfputs_r+0x22>
 8013a80:	463a      	mov	r2, r7
 8013a82:	4630      	mov	r0, r6
 8013a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a88:	f7ff ffdc 	bl	8013a44 <__sfputc_r>
 8013a8c:	1c43      	adds	r3, r0, #1
 8013a8e:	d1f3      	bne.n	8013a78 <__sfputs_r+0xa>
 8013a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013a94 <_vfiprintf_r>:
 8013a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a98:	460d      	mov	r5, r1
 8013a9a:	4614      	mov	r4, r2
 8013a9c:	4698      	mov	r8, r3
 8013a9e:	4606      	mov	r6, r0
 8013aa0:	b09d      	sub	sp, #116	@ 0x74
 8013aa2:	b118      	cbz	r0, 8013aac <_vfiprintf_r+0x18>
 8013aa4:	6a03      	ldr	r3, [r0, #32]
 8013aa6:	b90b      	cbnz	r3, 8013aac <_vfiprintf_r+0x18>
 8013aa8:	f7ff fb38 	bl	801311c <__sinit>
 8013aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013aae:	07d9      	lsls	r1, r3, #31
 8013ab0:	d405      	bmi.n	8013abe <_vfiprintf_r+0x2a>
 8013ab2:	89ab      	ldrh	r3, [r5, #12]
 8013ab4:	059a      	lsls	r2, r3, #22
 8013ab6:	d402      	bmi.n	8013abe <_vfiprintf_r+0x2a>
 8013ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aba:	f7ff fd64 	bl	8013586 <__retarget_lock_acquire_recursive>
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	071b      	lsls	r3, r3, #28
 8013ac2:	d501      	bpl.n	8013ac8 <_vfiprintf_r+0x34>
 8013ac4:	692b      	ldr	r3, [r5, #16]
 8013ac6:	b99b      	cbnz	r3, 8013af0 <_vfiprintf_r+0x5c>
 8013ac8:	4629      	mov	r1, r5
 8013aca:	4630      	mov	r0, r6
 8013acc:	f7ff fc6e 	bl	80133ac <__swsetup_r>
 8013ad0:	b170      	cbz	r0, 8013af0 <_vfiprintf_r+0x5c>
 8013ad2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013ad4:	07dc      	lsls	r4, r3, #31
 8013ad6:	d504      	bpl.n	8013ae2 <_vfiprintf_r+0x4e>
 8013ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8013adc:	b01d      	add	sp, #116	@ 0x74
 8013ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae2:	89ab      	ldrh	r3, [r5, #12]
 8013ae4:	0598      	lsls	r0, r3, #22
 8013ae6:	d4f7      	bmi.n	8013ad8 <_vfiprintf_r+0x44>
 8013ae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aea:	f7ff fd4d 	bl	8013588 <__retarget_lock_release_recursive>
 8013aee:	e7f3      	b.n	8013ad8 <_vfiprintf_r+0x44>
 8013af0:	2300      	movs	r3, #0
 8013af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8013af4:	2320      	movs	r3, #32
 8013af6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013afa:	2330      	movs	r3, #48	@ 0x30
 8013afc:	f04f 0901 	mov.w	r9, #1
 8013b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b04:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8013cb0 <_vfiprintf_r+0x21c>
 8013b08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b0c:	4623      	mov	r3, r4
 8013b0e:	469a      	mov	sl, r3
 8013b10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b14:	b10a      	cbz	r2, 8013b1a <_vfiprintf_r+0x86>
 8013b16:	2a25      	cmp	r2, #37	@ 0x25
 8013b18:	d1f9      	bne.n	8013b0e <_vfiprintf_r+0x7a>
 8013b1a:	ebba 0b04 	subs.w	fp, sl, r4
 8013b1e:	d00b      	beq.n	8013b38 <_vfiprintf_r+0xa4>
 8013b20:	465b      	mov	r3, fp
 8013b22:	4622      	mov	r2, r4
 8013b24:	4629      	mov	r1, r5
 8013b26:	4630      	mov	r0, r6
 8013b28:	f7ff ffa1 	bl	8013a6e <__sfputs_r>
 8013b2c:	3001      	adds	r0, #1
 8013b2e:	f000 80a7 	beq.w	8013c80 <_vfiprintf_r+0x1ec>
 8013b32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b34:	445a      	add	r2, fp
 8013b36:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b38:	f89a 3000 	ldrb.w	r3, [sl]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	f000 809f 	beq.w	8013c80 <_vfiprintf_r+0x1ec>
 8013b42:	2300      	movs	r3, #0
 8013b44:	f04f 32ff 	mov.w	r2, #4294967295
 8013b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b4c:	f10a 0a01 	add.w	sl, sl, #1
 8013b50:	9304      	str	r3, [sp, #16]
 8013b52:	9307      	str	r3, [sp, #28]
 8013b54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013b58:	931a      	str	r3, [sp, #104]	@ 0x68
 8013b5a:	4654      	mov	r4, sl
 8013b5c:	2205      	movs	r2, #5
 8013b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b62:	4853      	ldr	r0, [pc, #332]	@ (8013cb0 <_vfiprintf_r+0x21c>)
 8013b64:	f000 fb96 	bl	8014294 <memchr>
 8013b68:	9a04      	ldr	r2, [sp, #16]
 8013b6a:	b9d8      	cbnz	r0, 8013ba4 <_vfiprintf_r+0x110>
 8013b6c:	06d1      	lsls	r1, r2, #27
 8013b6e:	bf44      	itt	mi
 8013b70:	2320      	movmi	r3, #32
 8013b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b76:	0713      	lsls	r3, r2, #28
 8013b78:	bf44      	itt	mi
 8013b7a:	232b      	movmi	r3, #43	@ 0x2b
 8013b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013b80:	f89a 3000 	ldrb.w	r3, [sl]
 8013b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b86:	d015      	beq.n	8013bb4 <_vfiprintf_r+0x120>
 8013b88:	4654      	mov	r4, sl
 8013b8a:	2000      	movs	r0, #0
 8013b8c:	f04f 0c0a 	mov.w	ip, #10
 8013b90:	9a07      	ldr	r2, [sp, #28]
 8013b92:	4621      	mov	r1, r4
 8013b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b98:	3b30      	subs	r3, #48	@ 0x30
 8013b9a:	2b09      	cmp	r3, #9
 8013b9c:	d94b      	bls.n	8013c36 <_vfiprintf_r+0x1a2>
 8013b9e:	b1b0      	cbz	r0, 8013bce <_vfiprintf_r+0x13a>
 8013ba0:	9207      	str	r2, [sp, #28]
 8013ba2:	e014      	b.n	8013bce <_vfiprintf_r+0x13a>
 8013ba4:	eba0 0308 	sub.w	r3, r0, r8
 8013ba8:	fa09 f303 	lsl.w	r3, r9, r3
 8013bac:	4313      	orrs	r3, r2
 8013bae:	46a2      	mov	sl, r4
 8013bb0:	9304      	str	r3, [sp, #16]
 8013bb2:	e7d2      	b.n	8013b5a <_vfiprintf_r+0xc6>
 8013bb4:	9b03      	ldr	r3, [sp, #12]
 8013bb6:	1d19      	adds	r1, r3, #4
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	9103      	str	r1, [sp, #12]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	bfbb      	ittet	lt
 8013bc0:	425b      	neglt	r3, r3
 8013bc2:	f042 0202 	orrlt.w	r2, r2, #2
 8013bc6:	9307      	strge	r3, [sp, #28]
 8013bc8:	9307      	strlt	r3, [sp, #28]
 8013bca:	bfb8      	it	lt
 8013bcc:	9204      	strlt	r2, [sp, #16]
 8013bce:	7823      	ldrb	r3, [r4, #0]
 8013bd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8013bd2:	d10a      	bne.n	8013bea <_vfiprintf_r+0x156>
 8013bd4:	7863      	ldrb	r3, [r4, #1]
 8013bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bd8:	d132      	bne.n	8013c40 <_vfiprintf_r+0x1ac>
 8013bda:	9b03      	ldr	r3, [sp, #12]
 8013bdc:	3402      	adds	r4, #2
 8013bde:	1d1a      	adds	r2, r3, #4
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	9203      	str	r2, [sp, #12]
 8013be4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013be8:	9305      	str	r3, [sp, #20]
 8013bea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8013cb4 <_vfiprintf_r+0x220>
 8013bee:	2203      	movs	r2, #3
 8013bf0:	4650      	mov	r0, sl
 8013bf2:	7821      	ldrb	r1, [r4, #0]
 8013bf4:	f000 fb4e 	bl	8014294 <memchr>
 8013bf8:	b138      	cbz	r0, 8013c0a <_vfiprintf_r+0x176>
 8013bfa:	2240      	movs	r2, #64	@ 0x40
 8013bfc:	9b04      	ldr	r3, [sp, #16]
 8013bfe:	eba0 000a 	sub.w	r0, r0, sl
 8013c02:	4082      	lsls	r2, r0
 8013c04:	4313      	orrs	r3, r2
 8013c06:	3401      	adds	r4, #1
 8013c08:	9304      	str	r3, [sp, #16]
 8013c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c0e:	2206      	movs	r2, #6
 8013c10:	4829      	ldr	r0, [pc, #164]	@ (8013cb8 <_vfiprintf_r+0x224>)
 8013c12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c16:	f000 fb3d 	bl	8014294 <memchr>
 8013c1a:	2800      	cmp	r0, #0
 8013c1c:	d03f      	beq.n	8013c9e <_vfiprintf_r+0x20a>
 8013c1e:	4b27      	ldr	r3, [pc, #156]	@ (8013cbc <_vfiprintf_r+0x228>)
 8013c20:	bb1b      	cbnz	r3, 8013c6a <_vfiprintf_r+0x1d6>
 8013c22:	9b03      	ldr	r3, [sp, #12]
 8013c24:	3307      	adds	r3, #7
 8013c26:	f023 0307 	bic.w	r3, r3, #7
 8013c2a:	3308      	adds	r3, #8
 8013c2c:	9303      	str	r3, [sp, #12]
 8013c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c30:	443b      	add	r3, r7
 8013c32:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c34:	e76a      	b.n	8013b0c <_vfiprintf_r+0x78>
 8013c36:	460c      	mov	r4, r1
 8013c38:	2001      	movs	r0, #1
 8013c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c3e:	e7a8      	b.n	8013b92 <_vfiprintf_r+0xfe>
 8013c40:	2300      	movs	r3, #0
 8013c42:	f04f 0c0a 	mov.w	ip, #10
 8013c46:	4619      	mov	r1, r3
 8013c48:	3401      	adds	r4, #1
 8013c4a:	9305      	str	r3, [sp, #20]
 8013c4c:	4620      	mov	r0, r4
 8013c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c52:	3a30      	subs	r2, #48	@ 0x30
 8013c54:	2a09      	cmp	r2, #9
 8013c56:	d903      	bls.n	8013c60 <_vfiprintf_r+0x1cc>
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d0c6      	beq.n	8013bea <_vfiprintf_r+0x156>
 8013c5c:	9105      	str	r1, [sp, #20]
 8013c5e:	e7c4      	b.n	8013bea <_vfiprintf_r+0x156>
 8013c60:	4604      	mov	r4, r0
 8013c62:	2301      	movs	r3, #1
 8013c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8013c68:	e7f0      	b.n	8013c4c <_vfiprintf_r+0x1b8>
 8013c6a:	ab03      	add	r3, sp, #12
 8013c6c:	9300      	str	r3, [sp, #0]
 8013c6e:	462a      	mov	r2, r5
 8013c70:	4630      	mov	r0, r6
 8013c72:	4b13      	ldr	r3, [pc, #76]	@ (8013cc0 <_vfiprintf_r+0x22c>)
 8013c74:	a904      	add	r1, sp, #16
 8013c76:	f3af 8000 	nop.w
 8013c7a:	4607      	mov	r7, r0
 8013c7c:	1c78      	adds	r0, r7, #1
 8013c7e:	d1d6      	bne.n	8013c2e <_vfiprintf_r+0x19a>
 8013c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c82:	07d9      	lsls	r1, r3, #31
 8013c84:	d405      	bmi.n	8013c92 <_vfiprintf_r+0x1fe>
 8013c86:	89ab      	ldrh	r3, [r5, #12]
 8013c88:	059a      	lsls	r2, r3, #22
 8013c8a:	d402      	bmi.n	8013c92 <_vfiprintf_r+0x1fe>
 8013c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c8e:	f7ff fc7b 	bl	8013588 <__retarget_lock_release_recursive>
 8013c92:	89ab      	ldrh	r3, [r5, #12]
 8013c94:	065b      	lsls	r3, r3, #25
 8013c96:	f53f af1f 	bmi.w	8013ad8 <_vfiprintf_r+0x44>
 8013c9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013c9c:	e71e      	b.n	8013adc <_vfiprintf_r+0x48>
 8013c9e:	ab03      	add	r3, sp, #12
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	462a      	mov	r2, r5
 8013ca4:	4630      	mov	r0, r6
 8013ca6:	4b06      	ldr	r3, [pc, #24]	@ (8013cc0 <_vfiprintf_r+0x22c>)
 8013ca8:	a904      	add	r1, sp, #16
 8013caa:	f000 f87d 	bl	8013da8 <_printf_i>
 8013cae:	e7e4      	b.n	8013c7a <_vfiprintf_r+0x1e6>
 8013cb0:	080163ea 	.word	0x080163ea
 8013cb4:	080163f0 	.word	0x080163f0
 8013cb8:	080163f4 	.word	0x080163f4
 8013cbc:	00000000 	.word	0x00000000
 8013cc0:	08013a6f 	.word	0x08013a6f

08013cc4 <_printf_common>:
 8013cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cc8:	4616      	mov	r6, r2
 8013cca:	4698      	mov	r8, r3
 8013ccc:	688a      	ldr	r2, [r1, #8]
 8013cce:	690b      	ldr	r3, [r1, #16]
 8013cd0:	4607      	mov	r7, r0
 8013cd2:	4293      	cmp	r3, r2
 8013cd4:	bfb8      	it	lt
 8013cd6:	4613      	movlt	r3, r2
 8013cd8:	6033      	str	r3, [r6, #0]
 8013cda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013cde:	460c      	mov	r4, r1
 8013ce0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013ce4:	b10a      	cbz	r2, 8013cea <_printf_common+0x26>
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	6033      	str	r3, [r6, #0]
 8013cea:	6823      	ldr	r3, [r4, #0]
 8013cec:	0699      	lsls	r1, r3, #26
 8013cee:	bf42      	ittt	mi
 8013cf0:	6833      	ldrmi	r3, [r6, #0]
 8013cf2:	3302      	addmi	r3, #2
 8013cf4:	6033      	strmi	r3, [r6, #0]
 8013cf6:	6825      	ldr	r5, [r4, #0]
 8013cf8:	f015 0506 	ands.w	r5, r5, #6
 8013cfc:	d106      	bne.n	8013d0c <_printf_common+0x48>
 8013cfe:	f104 0a19 	add.w	sl, r4, #25
 8013d02:	68e3      	ldr	r3, [r4, #12]
 8013d04:	6832      	ldr	r2, [r6, #0]
 8013d06:	1a9b      	subs	r3, r3, r2
 8013d08:	42ab      	cmp	r3, r5
 8013d0a:	dc2b      	bgt.n	8013d64 <_printf_common+0xa0>
 8013d0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013d10:	6822      	ldr	r2, [r4, #0]
 8013d12:	3b00      	subs	r3, #0
 8013d14:	bf18      	it	ne
 8013d16:	2301      	movne	r3, #1
 8013d18:	0692      	lsls	r2, r2, #26
 8013d1a:	d430      	bmi.n	8013d7e <_printf_common+0xba>
 8013d1c:	4641      	mov	r1, r8
 8013d1e:	4638      	mov	r0, r7
 8013d20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d24:	47c8      	blx	r9
 8013d26:	3001      	adds	r0, #1
 8013d28:	d023      	beq.n	8013d72 <_printf_common+0xae>
 8013d2a:	6823      	ldr	r3, [r4, #0]
 8013d2c:	6922      	ldr	r2, [r4, #16]
 8013d2e:	f003 0306 	and.w	r3, r3, #6
 8013d32:	2b04      	cmp	r3, #4
 8013d34:	bf14      	ite	ne
 8013d36:	2500      	movne	r5, #0
 8013d38:	6833      	ldreq	r3, [r6, #0]
 8013d3a:	f04f 0600 	mov.w	r6, #0
 8013d3e:	bf08      	it	eq
 8013d40:	68e5      	ldreq	r5, [r4, #12]
 8013d42:	f104 041a 	add.w	r4, r4, #26
 8013d46:	bf08      	it	eq
 8013d48:	1aed      	subeq	r5, r5, r3
 8013d4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8013d4e:	bf08      	it	eq
 8013d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d54:	4293      	cmp	r3, r2
 8013d56:	bfc4      	itt	gt
 8013d58:	1a9b      	subgt	r3, r3, r2
 8013d5a:	18ed      	addgt	r5, r5, r3
 8013d5c:	42b5      	cmp	r5, r6
 8013d5e:	d11a      	bne.n	8013d96 <_printf_common+0xd2>
 8013d60:	2000      	movs	r0, #0
 8013d62:	e008      	b.n	8013d76 <_printf_common+0xb2>
 8013d64:	2301      	movs	r3, #1
 8013d66:	4652      	mov	r2, sl
 8013d68:	4641      	mov	r1, r8
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	47c8      	blx	r9
 8013d6e:	3001      	adds	r0, #1
 8013d70:	d103      	bne.n	8013d7a <_printf_common+0xb6>
 8013d72:	f04f 30ff 	mov.w	r0, #4294967295
 8013d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d7a:	3501      	adds	r5, #1
 8013d7c:	e7c1      	b.n	8013d02 <_printf_common+0x3e>
 8013d7e:	2030      	movs	r0, #48	@ 0x30
 8013d80:	18e1      	adds	r1, r4, r3
 8013d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013d86:	1c5a      	adds	r2, r3, #1
 8013d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013d8c:	4422      	add	r2, r4
 8013d8e:	3302      	adds	r3, #2
 8013d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013d94:	e7c2      	b.n	8013d1c <_printf_common+0x58>
 8013d96:	2301      	movs	r3, #1
 8013d98:	4622      	mov	r2, r4
 8013d9a:	4641      	mov	r1, r8
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	47c8      	blx	r9
 8013da0:	3001      	adds	r0, #1
 8013da2:	d0e6      	beq.n	8013d72 <_printf_common+0xae>
 8013da4:	3601      	adds	r6, #1
 8013da6:	e7d9      	b.n	8013d5c <_printf_common+0x98>

08013da8 <_printf_i>:
 8013da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013dac:	7e0f      	ldrb	r7, [r1, #24]
 8013dae:	4691      	mov	r9, r2
 8013db0:	2f78      	cmp	r7, #120	@ 0x78
 8013db2:	4680      	mov	r8, r0
 8013db4:	460c      	mov	r4, r1
 8013db6:	469a      	mov	sl, r3
 8013db8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013dbe:	d807      	bhi.n	8013dd0 <_printf_i+0x28>
 8013dc0:	2f62      	cmp	r7, #98	@ 0x62
 8013dc2:	d80a      	bhi.n	8013dda <_printf_i+0x32>
 8013dc4:	2f00      	cmp	r7, #0
 8013dc6:	f000 80d3 	beq.w	8013f70 <_printf_i+0x1c8>
 8013dca:	2f58      	cmp	r7, #88	@ 0x58
 8013dcc:	f000 80ba 	beq.w	8013f44 <_printf_i+0x19c>
 8013dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013dd8:	e03a      	b.n	8013e50 <_printf_i+0xa8>
 8013dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013dde:	2b15      	cmp	r3, #21
 8013de0:	d8f6      	bhi.n	8013dd0 <_printf_i+0x28>
 8013de2:	a101      	add	r1, pc, #4	@ (adr r1, 8013de8 <_printf_i+0x40>)
 8013de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013de8:	08013e41 	.word	0x08013e41
 8013dec:	08013e55 	.word	0x08013e55
 8013df0:	08013dd1 	.word	0x08013dd1
 8013df4:	08013dd1 	.word	0x08013dd1
 8013df8:	08013dd1 	.word	0x08013dd1
 8013dfc:	08013dd1 	.word	0x08013dd1
 8013e00:	08013e55 	.word	0x08013e55
 8013e04:	08013dd1 	.word	0x08013dd1
 8013e08:	08013dd1 	.word	0x08013dd1
 8013e0c:	08013dd1 	.word	0x08013dd1
 8013e10:	08013dd1 	.word	0x08013dd1
 8013e14:	08013f57 	.word	0x08013f57
 8013e18:	08013e7f 	.word	0x08013e7f
 8013e1c:	08013f11 	.word	0x08013f11
 8013e20:	08013dd1 	.word	0x08013dd1
 8013e24:	08013dd1 	.word	0x08013dd1
 8013e28:	08013f79 	.word	0x08013f79
 8013e2c:	08013dd1 	.word	0x08013dd1
 8013e30:	08013e7f 	.word	0x08013e7f
 8013e34:	08013dd1 	.word	0x08013dd1
 8013e38:	08013dd1 	.word	0x08013dd1
 8013e3c:	08013f19 	.word	0x08013f19
 8013e40:	6833      	ldr	r3, [r6, #0]
 8013e42:	1d1a      	adds	r2, r3, #4
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	6032      	str	r2, [r6, #0]
 8013e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013e50:	2301      	movs	r3, #1
 8013e52:	e09e      	b.n	8013f92 <_printf_i+0x1ea>
 8013e54:	6833      	ldr	r3, [r6, #0]
 8013e56:	6820      	ldr	r0, [r4, #0]
 8013e58:	1d19      	adds	r1, r3, #4
 8013e5a:	6031      	str	r1, [r6, #0]
 8013e5c:	0606      	lsls	r6, r0, #24
 8013e5e:	d501      	bpl.n	8013e64 <_printf_i+0xbc>
 8013e60:	681d      	ldr	r5, [r3, #0]
 8013e62:	e003      	b.n	8013e6c <_printf_i+0xc4>
 8013e64:	0645      	lsls	r5, r0, #25
 8013e66:	d5fb      	bpl.n	8013e60 <_printf_i+0xb8>
 8013e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013e6c:	2d00      	cmp	r5, #0
 8013e6e:	da03      	bge.n	8013e78 <_printf_i+0xd0>
 8013e70:	232d      	movs	r3, #45	@ 0x2d
 8013e72:	426d      	negs	r5, r5
 8013e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013e78:	230a      	movs	r3, #10
 8013e7a:	4859      	ldr	r0, [pc, #356]	@ (8013fe0 <_printf_i+0x238>)
 8013e7c:	e011      	b.n	8013ea2 <_printf_i+0xfa>
 8013e7e:	6821      	ldr	r1, [r4, #0]
 8013e80:	6833      	ldr	r3, [r6, #0]
 8013e82:	0608      	lsls	r0, r1, #24
 8013e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8013e88:	d402      	bmi.n	8013e90 <_printf_i+0xe8>
 8013e8a:	0649      	lsls	r1, r1, #25
 8013e8c:	bf48      	it	mi
 8013e8e:	b2ad      	uxthmi	r5, r5
 8013e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8013e92:	6033      	str	r3, [r6, #0]
 8013e94:	bf14      	ite	ne
 8013e96:	230a      	movne	r3, #10
 8013e98:	2308      	moveq	r3, #8
 8013e9a:	4851      	ldr	r0, [pc, #324]	@ (8013fe0 <_printf_i+0x238>)
 8013e9c:	2100      	movs	r1, #0
 8013e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ea2:	6866      	ldr	r6, [r4, #4]
 8013ea4:	2e00      	cmp	r6, #0
 8013ea6:	bfa8      	it	ge
 8013ea8:	6821      	ldrge	r1, [r4, #0]
 8013eaa:	60a6      	str	r6, [r4, #8]
 8013eac:	bfa4      	itt	ge
 8013eae:	f021 0104 	bicge.w	r1, r1, #4
 8013eb2:	6021      	strge	r1, [r4, #0]
 8013eb4:	b90d      	cbnz	r5, 8013eba <_printf_i+0x112>
 8013eb6:	2e00      	cmp	r6, #0
 8013eb8:	d04b      	beq.n	8013f52 <_printf_i+0x1aa>
 8013eba:	4616      	mov	r6, r2
 8013ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8013ec4:	5dc7      	ldrb	r7, [r0, r7]
 8013ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013eca:	462f      	mov	r7, r5
 8013ecc:	42bb      	cmp	r3, r7
 8013ece:	460d      	mov	r5, r1
 8013ed0:	d9f4      	bls.n	8013ebc <_printf_i+0x114>
 8013ed2:	2b08      	cmp	r3, #8
 8013ed4:	d10b      	bne.n	8013eee <_printf_i+0x146>
 8013ed6:	6823      	ldr	r3, [r4, #0]
 8013ed8:	07df      	lsls	r7, r3, #31
 8013eda:	d508      	bpl.n	8013eee <_printf_i+0x146>
 8013edc:	6923      	ldr	r3, [r4, #16]
 8013ede:	6861      	ldr	r1, [r4, #4]
 8013ee0:	4299      	cmp	r1, r3
 8013ee2:	bfde      	ittt	le
 8013ee4:	2330      	movle	r3, #48	@ 0x30
 8013ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013eea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013eee:	1b92      	subs	r2, r2, r6
 8013ef0:	6122      	str	r2, [r4, #16]
 8013ef2:	464b      	mov	r3, r9
 8013ef4:	4621      	mov	r1, r4
 8013ef6:	4640      	mov	r0, r8
 8013ef8:	f8cd a000 	str.w	sl, [sp]
 8013efc:	aa03      	add	r2, sp, #12
 8013efe:	f7ff fee1 	bl	8013cc4 <_printf_common>
 8013f02:	3001      	adds	r0, #1
 8013f04:	d14a      	bne.n	8013f9c <_printf_i+0x1f4>
 8013f06:	f04f 30ff 	mov.w	r0, #4294967295
 8013f0a:	b004      	add	sp, #16
 8013f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f10:	6823      	ldr	r3, [r4, #0]
 8013f12:	f043 0320 	orr.w	r3, r3, #32
 8013f16:	6023      	str	r3, [r4, #0]
 8013f18:	2778      	movs	r7, #120	@ 0x78
 8013f1a:	4832      	ldr	r0, [pc, #200]	@ (8013fe4 <_printf_i+0x23c>)
 8013f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013f20:	6823      	ldr	r3, [r4, #0]
 8013f22:	6831      	ldr	r1, [r6, #0]
 8013f24:	061f      	lsls	r7, r3, #24
 8013f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8013f2a:	d402      	bmi.n	8013f32 <_printf_i+0x18a>
 8013f2c:	065f      	lsls	r7, r3, #25
 8013f2e:	bf48      	it	mi
 8013f30:	b2ad      	uxthmi	r5, r5
 8013f32:	6031      	str	r1, [r6, #0]
 8013f34:	07d9      	lsls	r1, r3, #31
 8013f36:	bf44      	itt	mi
 8013f38:	f043 0320 	orrmi.w	r3, r3, #32
 8013f3c:	6023      	strmi	r3, [r4, #0]
 8013f3e:	b11d      	cbz	r5, 8013f48 <_printf_i+0x1a0>
 8013f40:	2310      	movs	r3, #16
 8013f42:	e7ab      	b.n	8013e9c <_printf_i+0xf4>
 8013f44:	4826      	ldr	r0, [pc, #152]	@ (8013fe0 <_printf_i+0x238>)
 8013f46:	e7e9      	b.n	8013f1c <_printf_i+0x174>
 8013f48:	6823      	ldr	r3, [r4, #0]
 8013f4a:	f023 0320 	bic.w	r3, r3, #32
 8013f4e:	6023      	str	r3, [r4, #0]
 8013f50:	e7f6      	b.n	8013f40 <_printf_i+0x198>
 8013f52:	4616      	mov	r6, r2
 8013f54:	e7bd      	b.n	8013ed2 <_printf_i+0x12a>
 8013f56:	6833      	ldr	r3, [r6, #0]
 8013f58:	6825      	ldr	r5, [r4, #0]
 8013f5a:	1d18      	adds	r0, r3, #4
 8013f5c:	6961      	ldr	r1, [r4, #20]
 8013f5e:	6030      	str	r0, [r6, #0]
 8013f60:	062e      	lsls	r6, r5, #24
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	d501      	bpl.n	8013f6a <_printf_i+0x1c2>
 8013f66:	6019      	str	r1, [r3, #0]
 8013f68:	e002      	b.n	8013f70 <_printf_i+0x1c8>
 8013f6a:	0668      	lsls	r0, r5, #25
 8013f6c:	d5fb      	bpl.n	8013f66 <_printf_i+0x1be>
 8013f6e:	8019      	strh	r1, [r3, #0]
 8013f70:	2300      	movs	r3, #0
 8013f72:	4616      	mov	r6, r2
 8013f74:	6123      	str	r3, [r4, #16]
 8013f76:	e7bc      	b.n	8013ef2 <_printf_i+0x14a>
 8013f78:	6833      	ldr	r3, [r6, #0]
 8013f7a:	2100      	movs	r1, #0
 8013f7c:	1d1a      	adds	r2, r3, #4
 8013f7e:	6032      	str	r2, [r6, #0]
 8013f80:	681e      	ldr	r6, [r3, #0]
 8013f82:	6862      	ldr	r2, [r4, #4]
 8013f84:	4630      	mov	r0, r6
 8013f86:	f000 f985 	bl	8014294 <memchr>
 8013f8a:	b108      	cbz	r0, 8013f90 <_printf_i+0x1e8>
 8013f8c:	1b80      	subs	r0, r0, r6
 8013f8e:	6060      	str	r0, [r4, #4]
 8013f90:	6863      	ldr	r3, [r4, #4]
 8013f92:	6123      	str	r3, [r4, #16]
 8013f94:	2300      	movs	r3, #0
 8013f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013f9a:	e7aa      	b.n	8013ef2 <_printf_i+0x14a>
 8013f9c:	4632      	mov	r2, r6
 8013f9e:	4649      	mov	r1, r9
 8013fa0:	4640      	mov	r0, r8
 8013fa2:	6923      	ldr	r3, [r4, #16]
 8013fa4:	47d0      	blx	sl
 8013fa6:	3001      	adds	r0, #1
 8013fa8:	d0ad      	beq.n	8013f06 <_printf_i+0x15e>
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	079b      	lsls	r3, r3, #30
 8013fae:	d413      	bmi.n	8013fd8 <_printf_i+0x230>
 8013fb0:	68e0      	ldr	r0, [r4, #12]
 8013fb2:	9b03      	ldr	r3, [sp, #12]
 8013fb4:	4298      	cmp	r0, r3
 8013fb6:	bfb8      	it	lt
 8013fb8:	4618      	movlt	r0, r3
 8013fba:	e7a6      	b.n	8013f0a <_printf_i+0x162>
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	4632      	mov	r2, r6
 8013fc0:	4649      	mov	r1, r9
 8013fc2:	4640      	mov	r0, r8
 8013fc4:	47d0      	blx	sl
 8013fc6:	3001      	adds	r0, #1
 8013fc8:	d09d      	beq.n	8013f06 <_printf_i+0x15e>
 8013fca:	3501      	adds	r5, #1
 8013fcc:	68e3      	ldr	r3, [r4, #12]
 8013fce:	9903      	ldr	r1, [sp, #12]
 8013fd0:	1a5b      	subs	r3, r3, r1
 8013fd2:	42ab      	cmp	r3, r5
 8013fd4:	dcf2      	bgt.n	8013fbc <_printf_i+0x214>
 8013fd6:	e7eb      	b.n	8013fb0 <_printf_i+0x208>
 8013fd8:	2500      	movs	r5, #0
 8013fda:	f104 0619 	add.w	r6, r4, #25
 8013fde:	e7f5      	b.n	8013fcc <_printf_i+0x224>
 8013fe0:	080163fb 	.word	0x080163fb
 8013fe4:	0801640c 	.word	0x0801640c

08013fe8 <__sflush_r>:
 8013fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fee:	0716      	lsls	r6, r2, #28
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	460c      	mov	r4, r1
 8013ff4:	d454      	bmi.n	80140a0 <__sflush_r+0xb8>
 8013ff6:	684b      	ldr	r3, [r1, #4]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	dc02      	bgt.n	8014002 <__sflush_r+0x1a>
 8013ffc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	dd48      	ble.n	8014094 <__sflush_r+0xac>
 8014002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014004:	2e00      	cmp	r6, #0
 8014006:	d045      	beq.n	8014094 <__sflush_r+0xac>
 8014008:	2300      	movs	r3, #0
 801400a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801400e:	682f      	ldr	r7, [r5, #0]
 8014010:	6a21      	ldr	r1, [r4, #32]
 8014012:	602b      	str	r3, [r5, #0]
 8014014:	d030      	beq.n	8014078 <__sflush_r+0x90>
 8014016:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014018:	89a3      	ldrh	r3, [r4, #12]
 801401a:	0759      	lsls	r1, r3, #29
 801401c:	d505      	bpl.n	801402a <__sflush_r+0x42>
 801401e:	6863      	ldr	r3, [r4, #4]
 8014020:	1ad2      	subs	r2, r2, r3
 8014022:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014024:	b10b      	cbz	r3, 801402a <__sflush_r+0x42>
 8014026:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014028:	1ad2      	subs	r2, r2, r3
 801402a:	2300      	movs	r3, #0
 801402c:	4628      	mov	r0, r5
 801402e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014030:	6a21      	ldr	r1, [r4, #32]
 8014032:	47b0      	blx	r6
 8014034:	1c43      	adds	r3, r0, #1
 8014036:	89a3      	ldrh	r3, [r4, #12]
 8014038:	d106      	bne.n	8014048 <__sflush_r+0x60>
 801403a:	6829      	ldr	r1, [r5, #0]
 801403c:	291d      	cmp	r1, #29
 801403e:	d82b      	bhi.n	8014098 <__sflush_r+0xb0>
 8014040:	4a28      	ldr	r2, [pc, #160]	@ (80140e4 <__sflush_r+0xfc>)
 8014042:	410a      	asrs	r2, r1
 8014044:	07d6      	lsls	r6, r2, #31
 8014046:	d427      	bmi.n	8014098 <__sflush_r+0xb0>
 8014048:	2200      	movs	r2, #0
 801404a:	6062      	str	r2, [r4, #4]
 801404c:	6922      	ldr	r2, [r4, #16]
 801404e:	04d9      	lsls	r1, r3, #19
 8014050:	6022      	str	r2, [r4, #0]
 8014052:	d504      	bpl.n	801405e <__sflush_r+0x76>
 8014054:	1c42      	adds	r2, r0, #1
 8014056:	d101      	bne.n	801405c <__sflush_r+0x74>
 8014058:	682b      	ldr	r3, [r5, #0]
 801405a:	b903      	cbnz	r3, 801405e <__sflush_r+0x76>
 801405c:	6560      	str	r0, [r4, #84]	@ 0x54
 801405e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014060:	602f      	str	r7, [r5, #0]
 8014062:	b1b9      	cbz	r1, 8014094 <__sflush_r+0xac>
 8014064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014068:	4299      	cmp	r1, r3
 801406a:	d002      	beq.n	8014072 <__sflush_r+0x8a>
 801406c:	4628      	mov	r0, r5
 801406e:	f7ff fa9b 	bl	80135a8 <_free_r>
 8014072:	2300      	movs	r3, #0
 8014074:	6363      	str	r3, [r4, #52]	@ 0x34
 8014076:	e00d      	b.n	8014094 <__sflush_r+0xac>
 8014078:	2301      	movs	r3, #1
 801407a:	4628      	mov	r0, r5
 801407c:	47b0      	blx	r6
 801407e:	4602      	mov	r2, r0
 8014080:	1c50      	adds	r0, r2, #1
 8014082:	d1c9      	bne.n	8014018 <__sflush_r+0x30>
 8014084:	682b      	ldr	r3, [r5, #0]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0c6      	beq.n	8014018 <__sflush_r+0x30>
 801408a:	2b1d      	cmp	r3, #29
 801408c:	d001      	beq.n	8014092 <__sflush_r+0xaa>
 801408e:	2b16      	cmp	r3, #22
 8014090:	d11d      	bne.n	80140ce <__sflush_r+0xe6>
 8014092:	602f      	str	r7, [r5, #0]
 8014094:	2000      	movs	r0, #0
 8014096:	e021      	b.n	80140dc <__sflush_r+0xf4>
 8014098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801409c:	b21b      	sxth	r3, r3
 801409e:	e01a      	b.n	80140d6 <__sflush_r+0xee>
 80140a0:	690f      	ldr	r7, [r1, #16]
 80140a2:	2f00      	cmp	r7, #0
 80140a4:	d0f6      	beq.n	8014094 <__sflush_r+0xac>
 80140a6:	0793      	lsls	r3, r2, #30
 80140a8:	bf18      	it	ne
 80140aa:	2300      	movne	r3, #0
 80140ac:	680e      	ldr	r6, [r1, #0]
 80140ae:	bf08      	it	eq
 80140b0:	694b      	ldreq	r3, [r1, #20]
 80140b2:	1bf6      	subs	r6, r6, r7
 80140b4:	600f      	str	r7, [r1, #0]
 80140b6:	608b      	str	r3, [r1, #8]
 80140b8:	2e00      	cmp	r6, #0
 80140ba:	ddeb      	ble.n	8014094 <__sflush_r+0xac>
 80140bc:	4633      	mov	r3, r6
 80140be:	463a      	mov	r2, r7
 80140c0:	4628      	mov	r0, r5
 80140c2:	6a21      	ldr	r1, [r4, #32]
 80140c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80140c8:	47e0      	blx	ip
 80140ca:	2800      	cmp	r0, #0
 80140cc:	dc07      	bgt.n	80140de <__sflush_r+0xf6>
 80140ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140d6:	f04f 30ff 	mov.w	r0, #4294967295
 80140da:	81a3      	strh	r3, [r4, #12]
 80140dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140de:	4407      	add	r7, r0
 80140e0:	1a36      	subs	r6, r6, r0
 80140e2:	e7e9      	b.n	80140b8 <__sflush_r+0xd0>
 80140e4:	dfbffffe 	.word	0xdfbffffe

080140e8 <_fflush_r>:
 80140e8:	b538      	push	{r3, r4, r5, lr}
 80140ea:	690b      	ldr	r3, [r1, #16]
 80140ec:	4605      	mov	r5, r0
 80140ee:	460c      	mov	r4, r1
 80140f0:	b913      	cbnz	r3, 80140f8 <_fflush_r+0x10>
 80140f2:	2500      	movs	r5, #0
 80140f4:	4628      	mov	r0, r5
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	b118      	cbz	r0, 8014102 <_fflush_r+0x1a>
 80140fa:	6a03      	ldr	r3, [r0, #32]
 80140fc:	b90b      	cbnz	r3, 8014102 <_fflush_r+0x1a>
 80140fe:	f7ff f80d 	bl	801311c <__sinit>
 8014102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d0f3      	beq.n	80140f2 <_fflush_r+0xa>
 801410a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801410c:	07d0      	lsls	r0, r2, #31
 801410e:	d404      	bmi.n	801411a <_fflush_r+0x32>
 8014110:	0599      	lsls	r1, r3, #22
 8014112:	d402      	bmi.n	801411a <_fflush_r+0x32>
 8014114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014116:	f7ff fa36 	bl	8013586 <__retarget_lock_acquire_recursive>
 801411a:	4628      	mov	r0, r5
 801411c:	4621      	mov	r1, r4
 801411e:	f7ff ff63 	bl	8013fe8 <__sflush_r>
 8014122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014124:	4605      	mov	r5, r0
 8014126:	07da      	lsls	r2, r3, #31
 8014128:	d4e4      	bmi.n	80140f4 <_fflush_r+0xc>
 801412a:	89a3      	ldrh	r3, [r4, #12]
 801412c:	059b      	lsls	r3, r3, #22
 801412e:	d4e1      	bmi.n	80140f4 <_fflush_r+0xc>
 8014130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014132:	f7ff fa29 	bl	8013588 <__retarget_lock_release_recursive>
 8014136:	e7dd      	b.n	80140f4 <_fflush_r+0xc>

08014138 <__swhatbuf_r>:
 8014138:	b570      	push	{r4, r5, r6, lr}
 801413a:	460c      	mov	r4, r1
 801413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014140:	4615      	mov	r5, r2
 8014142:	2900      	cmp	r1, #0
 8014144:	461e      	mov	r6, r3
 8014146:	b096      	sub	sp, #88	@ 0x58
 8014148:	da0c      	bge.n	8014164 <__swhatbuf_r+0x2c>
 801414a:	89a3      	ldrh	r3, [r4, #12]
 801414c:	2100      	movs	r1, #0
 801414e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014152:	bf14      	ite	ne
 8014154:	2340      	movne	r3, #64	@ 0x40
 8014156:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801415a:	2000      	movs	r0, #0
 801415c:	6031      	str	r1, [r6, #0]
 801415e:	602b      	str	r3, [r5, #0]
 8014160:	b016      	add	sp, #88	@ 0x58
 8014162:	bd70      	pop	{r4, r5, r6, pc}
 8014164:	466a      	mov	r2, sp
 8014166:	f000 f863 	bl	8014230 <_fstat_r>
 801416a:	2800      	cmp	r0, #0
 801416c:	dbed      	blt.n	801414a <__swhatbuf_r+0x12>
 801416e:	9901      	ldr	r1, [sp, #4]
 8014170:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014174:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014178:	4259      	negs	r1, r3
 801417a:	4159      	adcs	r1, r3
 801417c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014180:	e7eb      	b.n	801415a <__swhatbuf_r+0x22>

08014182 <__smakebuf_r>:
 8014182:	898b      	ldrh	r3, [r1, #12]
 8014184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014186:	079d      	lsls	r5, r3, #30
 8014188:	4606      	mov	r6, r0
 801418a:	460c      	mov	r4, r1
 801418c:	d507      	bpl.n	801419e <__smakebuf_r+0x1c>
 801418e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014192:	6023      	str	r3, [r4, #0]
 8014194:	6123      	str	r3, [r4, #16]
 8014196:	2301      	movs	r3, #1
 8014198:	6163      	str	r3, [r4, #20]
 801419a:	b003      	add	sp, #12
 801419c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801419e:	466a      	mov	r2, sp
 80141a0:	ab01      	add	r3, sp, #4
 80141a2:	f7ff ffc9 	bl	8014138 <__swhatbuf_r>
 80141a6:	9f00      	ldr	r7, [sp, #0]
 80141a8:	4605      	mov	r5, r0
 80141aa:	4639      	mov	r1, r7
 80141ac:	4630      	mov	r0, r6
 80141ae:	f7ff fa65 	bl	801367c <_malloc_r>
 80141b2:	b948      	cbnz	r0, 80141c8 <__smakebuf_r+0x46>
 80141b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141b8:	059a      	lsls	r2, r3, #22
 80141ba:	d4ee      	bmi.n	801419a <__smakebuf_r+0x18>
 80141bc:	f023 0303 	bic.w	r3, r3, #3
 80141c0:	f043 0302 	orr.w	r3, r3, #2
 80141c4:	81a3      	strh	r3, [r4, #12]
 80141c6:	e7e2      	b.n	801418e <__smakebuf_r+0xc>
 80141c8:	89a3      	ldrh	r3, [r4, #12]
 80141ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80141ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80141d2:	81a3      	strh	r3, [r4, #12]
 80141d4:	9b01      	ldr	r3, [sp, #4]
 80141d6:	6020      	str	r0, [r4, #0]
 80141d8:	b15b      	cbz	r3, 80141f2 <__smakebuf_r+0x70>
 80141da:	4630      	mov	r0, r6
 80141dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141e0:	f000 f838 	bl	8014254 <_isatty_r>
 80141e4:	b128      	cbz	r0, 80141f2 <__smakebuf_r+0x70>
 80141e6:	89a3      	ldrh	r3, [r4, #12]
 80141e8:	f023 0303 	bic.w	r3, r3, #3
 80141ec:	f043 0301 	orr.w	r3, r3, #1
 80141f0:	81a3      	strh	r3, [r4, #12]
 80141f2:	89a3      	ldrh	r3, [r4, #12]
 80141f4:	431d      	orrs	r5, r3
 80141f6:	81a5      	strh	r5, [r4, #12]
 80141f8:	e7cf      	b.n	801419a <__smakebuf_r+0x18>

080141fa <memmove>:
 80141fa:	4288      	cmp	r0, r1
 80141fc:	b510      	push	{r4, lr}
 80141fe:	eb01 0402 	add.w	r4, r1, r2
 8014202:	d902      	bls.n	801420a <memmove+0x10>
 8014204:	4284      	cmp	r4, r0
 8014206:	4623      	mov	r3, r4
 8014208:	d807      	bhi.n	801421a <memmove+0x20>
 801420a:	1e43      	subs	r3, r0, #1
 801420c:	42a1      	cmp	r1, r4
 801420e:	d008      	beq.n	8014222 <memmove+0x28>
 8014210:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014214:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014218:	e7f8      	b.n	801420c <memmove+0x12>
 801421a:	4601      	mov	r1, r0
 801421c:	4402      	add	r2, r0
 801421e:	428a      	cmp	r2, r1
 8014220:	d100      	bne.n	8014224 <memmove+0x2a>
 8014222:	bd10      	pop	{r4, pc}
 8014224:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014228:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801422c:	e7f7      	b.n	801421e <memmove+0x24>
	...

08014230 <_fstat_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	2300      	movs	r3, #0
 8014234:	4d06      	ldr	r5, [pc, #24]	@ (8014250 <_fstat_r+0x20>)
 8014236:	4604      	mov	r4, r0
 8014238:	4608      	mov	r0, r1
 801423a:	4611      	mov	r1, r2
 801423c:	602b      	str	r3, [r5, #0]
 801423e:	f7ec ff59 	bl	80010f4 <_fstat>
 8014242:	1c43      	adds	r3, r0, #1
 8014244:	d102      	bne.n	801424c <_fstat_r+0x1c>
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	b103      	cbz	r3, 801424c <_fstat_r+0x1c>
 801424a:	6023      	str	r3, [r4, #0]
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	bf00      	nop
 8014250:	2000972c 	.word	0x2000972c

08014254 <_isatty_r>:
 8014254:	b538      	push	{r3, r4, r5, lr}
 8014256:	2300      	movs	r3, #0
 8014258:	4d05      	ldr	r5, [pc, #20]	@ (8014270 <_isatty_r+0x1c>)
 801425a:	4604      	mov	r4, r0
 801425c:	4608      	mov	r0, r1
 801425e:	602b      	str	r3, [r5, #0]
 8014260:	f7ec ff57 	bl	8001112 <_isatty>
 8014264:	1c43      	adds	r3, r0, #1
 8014266:	d102      	bne.n	801426e <_isatty_r+0x1a>
 8014268:	682b      	ldr	r3, [r5, #0]
 801426a:	b103      	cbz	r3, 801426e <_isatty_r+0x1a>
 801426c:	6023      	str	r3, [r4, #0]
 801426e:	bd38      	pop	{r3, r4, r5, pc}
 8014270:	2000972c 	.word	0x2000972c

08014274 <_sbrk_r>:
 8014274:	b538      	push	{r3, r4, r5, lr}
 8014276:	2300      	movs	r3, #0
 8014278:	4d05      	ldr	r5, [pc, #20]	@ (8014290 <_sbrk_r+0x1c>)
 801427a:	4604      	mov	r4, r0
 801427c:	4608      	mov	r0, r1
 801427e:	602b      	str	r3, [r5, #0]
 8014280:	f7ec ff5e 	bl	8001140 <_sbrk>
 8014284:	1c43      	adds	r3, r0, #1
 8014286:	d102      	bne.n	801428e <_sbrk_r+0x1a>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	b103      	cbz	r3, 801428e <_sbrk_r+0x1a>
 801428c:	6023      	str	r3, [r4, #0]
 801428e:	bd38      	pop	{r3, r4, r5, pc}
 8014290:	2000972c 	.word	0x2000972c

08014294 <memchr>:
 8014294:	4603      	mov	r3, r0
 8014296:	b510      	push	{r4, lr}
 8014298:	b2c9      	uxtb	r1, r1
 801429a:	4402      	add	r2, r0
 801429c:	4293      	cmp	r3, r2
 801429e:	4618      	mov	r0, r3
 80142a0:	d101      	bne.n	80142a6 <memchr+0x12>
 80142a2:	2000      	movs	r0, #0
 80142a4:	e003      	b.n	80142ae <memchr+0x1a>
 80142a6:	7804      	ldrb	r4, [r0, #0]
 80142a8:	3301      	adds	r3, #1
 80142aa:	428c      	cmp	r4, r1
 80142ac:	d1f6      	bne.n	801429c <memchr+0x8>
 80142ae:	bd10      	pop	{r4, pc}

080142b0 <_realloc_r>:
 80142b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b4:	4680      	mov	r8, r0
 80142b6:	4615      	mov	r5, r2
 80142b8:	460c      	mov	r4, r1
 80142ba:	b921      	cbnz	r1, 80142c6 <_realloc_r+0x16>
 80142bc:	4611      	mov	r1, r2
 80142be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c2:	f7ff b9db 	b.w	801367c <_malloc_r>
 80142c6:	b92a      	cbnz	r2, 80142d4 <_realloc_r+0x24>
 80142c8:	f7ff f96e 	bl	80135a8 <_free_r>
 80142cc:	2400      	movs	r4, #0
 80142ce:	4620      	mov	r0, r4
 80142d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d4:	f000 f81a 	bl	801430c <_malloc_usable_size_r>
 80142d8:	4285      	cmp	r5, r0
 80142da:	4606      	mov	r6, r0
 80142dc:	d802      	bhi.n	80142e4 <_realloc_r+0x34>
 80142de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80142e2:	d8f4      	bhi.n	80142ce <_realloc_r+0x1e>
 80142e4:	4629      	mov	r1, r5
 80142e6:	4640      	mov	r0, r8
 80142e8:	f7ff f9c8 	bl	801367c <_malloc_r>
 80142ec:	4607      	mov	r7, r0
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d0ec      	beq.n	80142cc <_realloc_r+0x1c>
 80142f2:	42b5      	cmp	r5, r6
 80142f4:	462a      	mov	r2, r5
 80142f6:	4621      	mov	r1, r4
 80142f8:	bf28      	it	cs
 80142fa:	4632      	movcs	r2, r6
 80142fc:	f7ff f945 	bl	801358a <memcpy>
 8014300:	4621      	mov	r1, r4
 8014302:	4640      	mov	r0, r8
 8014304:	f7ff f950 	bl	80135a8 <_free_r>
 8014308:	463c      	mov	r4, r7
 801430a:	e7e0      	b.n	80142ce <_realloc_r+0x1e>

0801430c <_malloc_usable_size_r>:
 801430c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014310:	1f18      	subs	r0, r3, #4
 8014312:	2b00      	cmp	r3, #0
 8014314:	bfbc      	itt	lt
 8014316:	580b      	ldrlt	r3, [r1, r0]
 8014318:	18c0      	addlt	r0, r0, r3
 801431a:	4770      	bx	lr

0801431c <_init>:
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431e:	bf00      	nop
 8014320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014322:	bc08      	pop	{r3}
 8014324:	469e      	mov	lr, r3
 8014326:	4770      	bx	lr

08014328 <_fini>:
 8014328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801432a:	bf00      	nop
 801432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801432e:	bc08      	pop	{r3}
 8014330:	469e      	mov	lr, r3
 8014332:	4770      	bx	lr
