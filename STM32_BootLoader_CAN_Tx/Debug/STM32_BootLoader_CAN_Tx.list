
STM32_BootLoader_CAN_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002360  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002544  08002544  00003544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002574  08002574  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002574  08002574  00003574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800257c  0800257c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800257c  0800257c  0000357c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002580  08002580  00003580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002584  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000000c  08002590  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  08002590  00004058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f31  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001352  00000000  00000000  00008f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  0000a2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003df  00000000  00000000  0000a808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eade  00000000  00000000  0000abe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006088  00000000  00000000  000296c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b208d  00000000  00000000  0002f74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e17da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001494  00000000  00000000  000e1820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e2cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800252c 	.word	0x0800252c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800252c 	.word	0x0800252c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <Read_Flash_Block>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to read a block of data from flash memory
void Read_Flash_Block(uint32_t address, uint8_t* buffer, uint32_t length)
{
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	for (uint32_t i = 0; i < length; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e00b      	b.n	800053a <Read_Flash_Block+0x2a>
	{
		buffer[i] = *(uint8_t*)(address + i);
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	4413      	add	r3, r2
 8000528:	4619      	mov	r1, r3
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	4413      	add	r3, r2
 8000530:	780a      	ldrb	r2, [r1, #0]
 8000532:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < length; i++)
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697a      	ldr	r2, [r7, #20]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3ef      	bcc.n	8000522 <Read_Flash_Block+0x12>
	}
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	371c      	adds	r7, #28
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
	...

08000550 <Transmit_Data_CAN1_Block>:

// Function to transmit data block over CAN1
void Transmit_Data_CAN1_Block(uint8_t* data, uint32_t length)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08e      	sub	sp, #56	@ 0x38
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    TxHeader.DLC = 8;
 800055a:	2308      	movs	r3, #8
 800055c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.IDE = CAN_ID_STD;
 800055e:	2300      	movs	r3, #0
 8000560:	623b      	str	r3, [r7, #32]
    TxHeader.StdId = 0x321; // Standard CAN ID
 8000562:	f240 3321 	movw	r3, #801	@ 0x321
 8000566:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;  // Disable timestamp
 800056c:	2300      	movs	r3, #0
 800056e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    for (uint32_t i = 0; i < length; i += 8)
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	@ 0x34
 8000576:	e02f      	b.n	80005d8 <Transmit_Data_CAN1_Block+0x88>
    {
        uint8_t frame[8];
        uint32_t frame_size = (length - i) > 8 ? 8 : (length - i);
 8000578:	683a      	ldr	r2, [r7, #0]
 800057a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	2b08      	cmp	r3, #8
 8000580:	bf28      	it	cs
 8000582:	2308      	movcs	r3, #8
 8000584:	633b      	str	r3, [r7, #48]	@ 0x30
        memcpy(frame, &data[i], frame_size);
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800058a:	18d1      	adds	r1, r2, r3
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000592:	4618      	mov	r0, r3
 8000594:	f001 ffbc 	bl	8002510 <memcpy>
        if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, frame, &TxMailbox) != HAL_OK)
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	f107 020c 	add.w	r2, r7, #12
 80005a0:	f107 0118 	add.w	r1, r7, #24
 80005a4:	4813      	ldr	r0, [pc, #76]	@ (80005f4 <Transmit_Data_CAN1_Block+0xa4>)
 80005a6:	f000 fc94 	bl	8000ed2 <HAL_CAN_AddTxMessage>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <Transmit_Data_CAN1_Block+0x64>
        {
        	Error_Handler(); // Handle CAN transmission error
 80005b0:	f000 f9c4 	bl	800093c <Error_Handler>
        }
        while (HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox))
 80005b4:	bf00      	nop
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	4619      	mov	r1, r3
 80005ba:	480e      	ldr	r0, [pc, #56]	@ (80005f4 <Transmit_Data_CAN1_Block+0xa4>)
 80005bc:	f000 fd58 	bl	8001070 <HAL_CAN_IsTxMessagePending>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d1f7      	bne.n	80005b6 <Transmit_Data_CAN1_Block+0x66>
        {
        	// Wait until transmission is complete
        }
       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <Transmit_Data_CAN1_Block+0xa8>)
 80005ce:	f001 fa31 	bl	8001a34 <HAL_GPIO_WritePin>
    for (uint32_t i = 0; i < length; i += 8)
 80005d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005d4:	3308      	adds	r3, #8
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80005d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	429a      	cmp	r2, r3
 80005de:	d3cb      	bcc.n	8000578 <Transmit_Data_CAN1_Block+0x28>
    }
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e6:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <Transmit_Data_CAN1_Block+0xa8>)
 80005e8:	f001 fa24 	bl	8001a34 <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3738      	adds	r7, #56	@ 0x38
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000028 	.word	0x20000028
 80005f8:	40011000 	.word	0x40011000

080005fc <Transmit_Flash_Image>:

// Main function to read from flash and transmit via CAN1
void Transmit_Flash_Image(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000602:	af00      	add	r7, sp, #0
    uint8_t buffer[MAX_BLOCK_SIZE] = {0};
 8000604:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000608:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	3304      	adds	r3, #4
 8000612:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f001 ff4d 	bl	80024b8 <memset>
    uint32_t address = FLASH_START_ADDRESS;
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <Transmit_Flash_Image+0x98>)
 8000620:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
    uint32_t remaining = IMAGE_SIZE;
 8000624:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000628:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408

    while (remaining > 0)
 800062c:	e028      	b.n	8000680 <Transmit_Flash_Image+0x84>
    {
    	uint32_t block_size = (remaining > MAX_BLOCK_SIZE) ? MAX_BLOCK_SIZE : remaining;
 800062e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000636:	bf28      	it	cs
 8000638:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800063c:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
    	Read_Flash_Block(address, buffer, block_size);
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 8000646:	4619      	mov	r1, r3
 8000648:	f8d7 040c 	ldr.w	r0, [r7, #1036]	@ 0x40c
 800064c:	f7ff ff60 	bl	8000510 <Read_Flash_Block>
    	Transmit_Data_CAN1_Block(buffer, block_size);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	f8d7 1404 	ldr.w	r1, [r7, #1028]	@ 0x404
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff7a 	bl	8000550 <Transmit_Data_CAN1_Block>
    	address += block_size;
 800065c:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8000660:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000664:	4413      	add	r3, r2
 8000666:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
    	remaining -= block_size;
 800066a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 800066e:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    	HAL_Delay(500);
 8000678:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800067c:	f000 fac6 	bl	8000c0c <HAL_Delay>
    while (remaining > 0)
 8000680:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1d2      	bne.n	800062e <Transmit_Flash_Image+0x32>
    }
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	08020000 	.word	0x08020000

08000698 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == SW1_Pin)
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80006a8:	d102      	bne.n	80006b0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		f_transmit = 1;
 80006aa:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <HAL_GPIO_EXTI_Callback+0x24>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
	}
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000050 	.word	0x20000050

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fa40 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f816 	bl	80006f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f8b6 	bl	800083c <MX_GPIO_Init>
  MX_CAN1_Init();
 80006d0:	f000 f87e 	bl	80007d0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80006d4:	4806      	ldr	r0, [pc, #24]	@ (80006f0 <main+0x30>)
 80006d6:	f000 fbb8 	bl	8000e4a <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(f_transmit == 1)
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <main+0x34>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d1fb      	bne.n	80006da <main+0x1a>
	  {
		  Transmit_Flash_Image();
 80006e2:	f7ff ff8b 	bl	80005fc <Transmit_Flash_Image>
		  f_transmit =0;
 80006e6:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <main+0x34>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
	  if(f_transmit == 1)
 80006ec:	e7f5      	b.n	80006da <main+0x1a>
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	20000050 	.word	0x20000050

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 0318 	add.w	r3, r7, #24
 8000702:	2238      	movs	r2, #56	@ 0x38
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fed6 	bl	80024b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800071e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000724:	2304      	movs	r3, #4
 8000726:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800072c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000730:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000746:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800074a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 800074c:	2340      	movs	r3, #64	@ 0x40
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 0318 	add.w	r3, r7, #24
 8000754:	4618      	mov	r0, r3
 8000756:	f001 f99d 	bl	8001a94 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000760:	f000 f8ec 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000764:	230f      	movs	r3, #15
 8000766:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000770:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fc9e 	bl	80020c0 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800078a:	f000 f8d7 	bl	800093c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 800078e:	2200      	movs	r2, #0
 8000790:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 8000794:	2000      	movs	r0, #0
 8000796:	f001 fd7d 	bl	8002294 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <SystemClock_Config+0xd0>)
 800079c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80007a2:	4a09      	ldr	r2, [pc, #36]	@ (80007c8 <SystemClock_Config+0xd0>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <SystemClock_Config+0xd0>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <SystemClock_Config+0xd0>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <SystemClock_Config+0xd4>)
 80007bc:	2201      	movs	r2, #1
 80007be:	601a      	str	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	42420070 	.word	0x42420070

080007d0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <MX_CAN1_Init+0x68>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 36;
 80007da:	4b16      	ldr	r3, [pc, #88]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007dc:	2224      	movs	r2, #36	@ 0x24
 80007de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007e6:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007ee:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80007f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_CAN1_Init+0x64>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_CAN1_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_CAN1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_CAN1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_CAN1_Init+0x64>)
 8000820:	f000 fa18 	bl	8000c54 <HAL_CAN_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800082a:	f000 f887 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000028 	.word	0x20000028
 8000838:	40006400 	.word	0x40006400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000850:	4b35      	ldr	r3, [pc, #212]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a34      	ldr	r2, [pc, #208]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b32      	ldr	r3, [pc, #200]	@ (8000928 <MX_GPIO_Init+0xec>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000868:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <MX_GPIO_Init+0xec>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a2e      	ldr	r2, [pc, #184]	@ (8000928 <MX_GPIO_Init+0xec>)
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b2c      	ldr	r3, [pc, #176]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0320 	and.w	r3, r3, #32
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0xec>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_GPIO_Init+0xec>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a22      	ldr	r2, [pc, #136]	@ (8000928 <MX_GPIO_Init+0xec>)
 800089e:	f043 0308 	orr.w	r3, r3, #8
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <MX_GPIO_Init+0xec>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0308 	and.w	r3, r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b6:	481d      	ldr	r0, [pc, #116]	@ (800092c <MX_GPIO_Init+0xf0>)
 80008b8:	f001 f8bc 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4619      	mov	r1, r3
 80008d4:	4815      	ldr	r0, [pc, #84]	@ (800092c <MX_GPIO_Init+0xf0>)
 80008d6:	f000 ff29 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80008da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_GPIO_Init+0xf4>)
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <MX_GPIO_Init+0xf8>)
 80008f0:	f000 ff1c 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 0310 	add.w	r3, r7, #16
 8000906:	4619      	mov	r1, r3
 8000908:	480b      	ldr	r0, [pc, #44]	@ (8000938 <MX_GPIO_Init+0xfc>)
 800090a:	f000 ff0f 	bl	800172c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2028      	movs	r0, #40	@ 0x28
 8000914:	f000 fed3 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000918:	2028      	movs	r0, #40	@ 0x28
 800091a:	f000 feec 	bl	80016f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	40011000 	.word	0x40011000
 8000930:	10110000 	.word	0x10110000
 8000934:	40011400 	.word	0x40011400
 8000938:	40010800 	.word	0x40010800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <HAL_MspInit+0x54>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <HAL_MspInit+0x54>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <HAL_MspInit+0x54>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <HAL_MspInit+0x54>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <HAL_MspInit+0x54>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	61d3      	str	r3, [r2, #28]
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_MspInit+0x54>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_MspInit+0x58>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_MspInit+0x58>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a29      	ldr	r2, [pc, #164]	@ (8000a64 <HAL_CAN_MspInit+0xc0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d14b      	bne.n	8000a5c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4a27      	ldr	r2, [pc, #156]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	61d3      	str	r3, [r2, #28]
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009e2:	f043 0308 	orr.w	r3, r3, #8
 80009e6:	6193      	str	r3, [r2, #24]
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <HAL_CAN_MspInit+0xc4>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4818      	ldr	r0, [pc, #96]	@ (8000a6c <HAL_CAN_MspInit+0xc8>)
 8000a0a:	f000 fe8f 	bl	800172c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <HAL_CAN_MspInit+0xc8>)
 8000a24:	f000 fe82 	bl	800172c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_CAN_MspInit+0xcc>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a30:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_CAN_MspInit+0xcc>)
 8000a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2014      	movs	r0, #20
 8000a52:	f000 fe34 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a56:	2014      	movs	r0, #20
 8000a58:	f000 fe4d 	bl	80016f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	@ 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40006400 	.word	0x40006400
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010c00 	.word	0x40010c00
 8000a70:	40010000 	.word	0x40010000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac4:	f000 f886 	bl	8000bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}

08000acc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ad0:	4802      	ldr	r0, [pc, #8]	@ (8000adc <CAN1_RX0_IRQHandler+0x10>)
 8000ad2:	f000 faf0 	bl	80010b6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000028 	.word	0x20000028

08000ae0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8000ae4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ae8:	f000 ffbc 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff fff8 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b02:	490c      	ldr	r1, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b04:	4a0c      	ldr	r2, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b18:	4c09      	ldr	r4, [pc, #36]	@ (8000b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fccf 	bl	80024c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b2a:	f7ff fdc9 	bl	80006c0 <main>
  bx lr
 8000b2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b38:	08002584 	.word	0x08002584
  ldr r2, =_sbss
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b40:	20000058 	.word	0x20000058

08000b44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC1_2_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <HAL_Init+0x28>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <HAL_Init+0x28>)
 8000b52:	f043 0310 	orr.w	r3, r3, #16
 8000b56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 fda5 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5e:	200f      	movs	r0, #15
 8000b60:	f000 f808 	bl	8000b74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b64:	f7ff fef0 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000

08000b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <HAL_InitTick+0x54>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_InitTick+0x58>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fdbd 	bl	8001712 <HAL_SYSTICK_Config>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00e      	b.n	8000bc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d80a      	bhi.n	8000bbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f000 fd85 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb4:	4a06      	ldr	r2, [pc, #24]	@ (8000bd0 <HAL_InitTick+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000004 	.word	0x20000004

08000bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd8:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <HAL_IncTick+0x1c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a03      	ldr	r2, [pc, #12]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000054 	.word	0x20000054

08000bf8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b02      	ldr	r3, [pc, #8]	@ (8000c08 <HAL_GetTick+0x10>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	20000054 	.word	0x20000054

08000c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff fff0 	bl	8000bf8 <HAL_GetTick>
 8000c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c24:	d005      	beq.n	8000c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <HAL_Delay+0x44>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4413      	add	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c32:	bf00      	nop
 8000c34:	f7ff ffe0 	bl	8000bf8 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d8f7      	bhi.n	8000c34 <HAL_Delay+0x28>
  {
  }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e0ed      	b.n	8000e42 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fe96 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c88:	f7ff ffb6 	bl	8000bf8 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8e:	e012      	b.n	8000cb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c90:	f7ff ffb2 	bl	8000bf8 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d90b      	bls.n	8000cb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2205      	movs	r2, #5
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0c5      	b.n	8000e42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e5      	beq.n	8000c90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0202 	bic.w	r2, r2, #2
 8000cd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd4:	f7ff ff90 	bl	8000bf8 <HAL_GetTick>
 8000cd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cda:	e012      	b.n	8000d02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cdc:	f7ff ff8c 	bl	8000bf8 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d90b      	bls.n	8000d02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2205      	movs	r2, #5
 8000cfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e09f      	b.n	8000e42 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e5      	bne.n	8000cdc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7e1b      	ldrb	r3, [r3, #24]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d108      	bne.n	8000d2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e007      	b.n	8000d3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7e5b      	ldrb	r3, [r3, #25]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d108      	bne.n	8000d54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e007      	b.n	8000d64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7e9b      	ldrb	r3, [r3, #26]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d108      	bne.n	8000d7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0220 	orr.w	r2, r2, #32
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e007      	b.n	8000d8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0220 	bic.w	r2, r2, #32
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7edb      	ldrb	r3, [r3, #27]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d108      	bne.n	8000da8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0210 	bic.w	r2, r2, #16
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	e007      	b.n	8000db8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0210 	orr.w	r2, r2, #16
 8000db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7f1b      	ldrb	r3, [r3, #28]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d108      	bne.n	8000dd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0208 	orr.w	r2, r2, #8
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	e007      	b.n	8000de2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f022 0208 	bic.w	r2, r2, #8
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7f5b      	ldrb	r3, [r3, #29]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d108      	bne.n	8000dfc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f042 0204 	orr.w	r2, r2, #4
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e007      	b.n	8000e0c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0204 	bic.w	r2, r2, #4
 8000e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	431a      	orrs	r2, r3
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	691b      	ldr	r3, [r3, #16]
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	ea42 0103 	orr.w	r1, r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	1e5a      	subs	r2, r3, #1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12e      	bne.n	8000ebc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2202      	movs	r2, #2
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e76:	f7ff febf 	bl	8000bf8 <HAL_GetTick>
 8000e7a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e7c:	e012      	b.n	8000ea4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e7e:	f7ff febb 	bl	8000bf8 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b0a      	cmp	r3, #10
 8000e8a:	d90b      	bls.n	8000ea4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e012      	b.n	8000eca <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d1e5      	bne.n	8000e7e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	e006      	b.n	8000eca <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
  }
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b089      	sub	sp, #36	@ 0x24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d003      	beq.n	8000efe <HAL_CAN_AddTxMessage+0x2c>
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	f040 80ad 	bne.w	8001058 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10a      	bne.n	8000f1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 8095 	beq.w	8001048 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	0e1b      	lsrs	r3, r3, #24
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	6809      	ldr	r1, [r1, #0]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3318      	adds	r3, #24
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	440b      	add	r3, r1
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e00f      	b.n	8000f76 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f60:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f66:	68f9      	ldr	r1, [r7, #12]
 8000f68:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f6a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3318      	adds	r3, #24
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	440b      	add	r3, r1
 8000f74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3318      	adds	r3, #24
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	440b      	add	r3, r1
 8000f86:	3304      	adds	r3, #4
 8000f88:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	7d1b      	ldrb	r3, [r3, #20]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d111      	bne.n	8000fb6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3318      	adds	r3, #24
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	6811      	ldr	r1, [r2, #0]
 8000fa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3318      	adds	r3, #24
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3307      	adds	r3, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	061a      	lsls	r2, r3, #24
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3306      	adds	r3, #6
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	041b      	lsls	r3, r3, #16
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3305      	adds	r3, #5
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	3204      	adds	r2, #4
 8000fd6:	7812      	ldrb	r2, [r2, #0]
 8000fd8:	4610      	mov	r0, r2
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	6811      	ldr	r1, [r2, #0]
 8000fde:	ea43 0200 	orr.w	r2, r3, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	440b      	add	r3, r1
 8000fe8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000fec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3303      	adds	r3, #3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	061a      	lsls	r2, r3, #24
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	4313      	orrs	r3, r2
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	7812      	ldrb	r2, [r2, #0]
 800100e:	4610      	mov	r0, r2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	6811      	ldr	r1, [r2, #0]
 8001014:	ea43 0200 	orr.w	r2, r3, r0
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	440b      	add	r3, r1
 800101e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001022:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3318      	adds	r3, #24
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	4413      	add	r3, r2
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	f043 0201 	orr.w	r2, r3, #1
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3318      	adds	r3, #24
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	440b      	add	r3, r1
 8001042:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	e00e      	b.n	8001066 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e006      	b.n	8001066 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001084:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001086:	7afb      	ldrb	r3, [r7, #11]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d002      	beq.n	8001092 <HAL_CAN_IsTxMessagePending+0x22>
 800108c:	7afb      	ldrb	r3, [r7, #11]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d10b      	bne.n	80010aa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	069b      	lsls	r3, r3, #26
 800109c:	401a      	ands	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	069b      	lsls	r3, r3, #26
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d001      	beq.n	80010aa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80010a6:	2301      	movs	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80010aa:	68fb      	ldr	r3, [r7, #12]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr

080010b6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b08a      	sub	sp, #40	@ 0x28
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d07c      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	2b00      	cmp	r3, #0
 8001104:	d023      	beq.n	800114e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2201      	movs	r2, #1
 800110c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f983 	bl	8001424 <HAL_CAN_TxMailbox0CompleteCallback>
 800111e:	e016      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800112a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
 8001132:	e00c      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d004      	beq.n	8001148 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
 8001146:	e002      	b.n	800114e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f986 	bl	800145a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001154:	2b00      	cmp	r3, #0
 8001156:	d024      	beq.n	80011a2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001160:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f962 	bl	8001436 <HAL_CAN_TxMailbox1CompleteCallback>
 8001172:	e016      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800117e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001180:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
 8001186:	e00c      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001194:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
 800119a:	e002      	b.n	80011a2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f965 	bl	800146c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d024      	beq.n	80011f6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f941 	bl	8001448 <HAL_CAN_TxMailbox2CompleteCallback>
 80011c6:	e016      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d004      	beq.n	80011dc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011da:	e00c      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ee:	e002      	b.n	80011f6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f944 	bl	800147e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00c      	beq.n	800121a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2210      	movs	r2, #16
 8001218:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2208      	movs	r2, #8
 8001234:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f933 	bl	80014a2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f91b 	bl	8001490 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00c      	beq.n	800127e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2210      	movs	r2, #16
 800127c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	f003 0320 	and.w	r3, r3, #32
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2208      	movs	r2, #8
 8001298:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f913 	bl	80014c6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	f003 0310 	and.w	r3, r3, #16
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f8fb 	bl	80014b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2210      	movs	r2, #16
 80012d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f8fc 	bl	80014d8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012e0:	6a3b      	ldr	r3, [r7, #32]
 80012e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d006      	beq.n	8001302 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2208      	movs	r2, #8
 80012fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f8f4 	bl	80014ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d07b      	beq.n	8001404 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d072      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001338:	2b00      	cmp	r3, #0
 800133a:	d008      	beq.n	800134e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001370:	2b00      	cmp	r3, #0
 8001372:	d043      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800137a:	2b00      	cmp	r3, #0
 800137c:	d03e      	beq.n	80013fc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001384:	2b60      	cmp	r3, #96	@ 0x60
 8001386:	d02b      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x32a>
 8001388:	2b60      	cmp	r3, #96	@ 0x60
 800138a:	d82e      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 800138c:	2b50      	cmp	r3, #80	@ 0x50
 800138e:	d022      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x320>
 8001390:	2b50      	cmp	r3, #80	@ 0x50
 8001392:	d82a      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 8001394:	2b40      	cmp	r3, #64	@ 0x40
 8001396:	d019      	beq.n	80013cc <HAL_CAN_IRQHandler+0x316>
 8001398:	2b40      	cmp	r3, #64	@ 0x40
 800139a:	d826      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 800139c:	2b30      	cmp	r3, #48	@ 0x30
 800139e:	d010      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x30c>
 80013a0:	2b30      	cmp	r3, #48	@ 0x30
 80013a2:	d822      	bhi.n	80013ea <HAL_CAN_IRQHandler+0x334>
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d002      	beq.n	80013ae <HAL_CAN_IRQHandler+0x2f8>
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	d005      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013ac:	e01d      	b.n	80013ea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013b6:	e019      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013c0:	e014      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013ca:	e00f      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013d4:	e00a      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013de:	e005      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013e8:	e000      	b.n	80013ec <HAL_CAN_IRQHandler+0x336>
            break;
 80013ea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	699a      	ldr	r2, [r3, #24]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013fa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2204      	movs	r2, #4
 8001402:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	2b00      	cmp	r3, #0
 8001408:	d008      	beq.n	800141c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f870 	bl	80014fc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	@ 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr

080014ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
	...

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	@ (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4906      	ldr	r1, [pc, #24]	@ (80015a8 <__NVIC_EnableIRQ+0x34>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	@ (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	@ 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff90 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff2d 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff42 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff90 	bl	8001600 <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5f 	bl	80015ac <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff35 	bl	8001574 <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	@ 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e169      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8158 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4a9a      	ldr	r2, [pc, #616]	@ (80019cc <HAL_GPIO_Init+0x2a0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d05e      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001768:	4a98      	ldr	r2, [pc, #608]	@ (80019cc <HAL_GPIO_Init+0x2a0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d875      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800176e:	4a98      	ldr	r2, [pc, #608]	@ (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d058      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001774:	4a96      	ldr	r2, [pc, #600]	@ (80019d0 <HAL_GPIO_Init+0x2a4>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d86f      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800177a:	4a96      	ldr	r2, [pc, #600]	@ (80019d4 <HAL_GPIO_Init+0x2a8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d052      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001780:	4a94      	ldr	r2, [pc, #592]	@ (80019d4 <HAL_GPIO_Init+0x2a8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d869      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001786:	4a94      	ldr	r2, [pc, #592]	@ (80019d8 <HAL_GPIO_Init+0x2ac>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d04c      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 800178c:	4a92      	ldr	r2, [pc, #584]	@ (80019d8 <HAL_GPIO_Init+0x2ac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d863      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 8001792:	4a92      	ldr	r2, [pc, #584]	@ (80019dc <HAL_GPIO_Init+0x2b0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d046      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
 8001798:	4a90      	ldr	r2, [pc, #576]	@ (80019dc <HAL_GPIO_Init+0x2b0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d85d      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 800179e:	2b12      	cmp	r3, #18
 80017a0:	d82a      	bhi.n	80017f8 <HAL_GPIO_Init+0xcc>
 80017a2:	2b12      	cmp	r3, #18
 80017a4:	d859      	bhi.n	800185a <HAL_GPIO_Init+0x12e>
 80017a6:	a201      	add	r2, pc, #4	@ (adr r2, 80017ac <HAL_GPIO_Init+0x80>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	08001827 	.word	0x08001827
 80017b0:	08001801 	.word	0x08001801
 80017b4:	08001813 	.word	0x08001813
 80017b8:	08001855 	.word	0x08001855
 80017bc:	0800185b 	.word	0x0800185b
 80017c0:	0800185b 	.word	0x0800185b
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	0800185b 	.word	0x0800185b
 80017cc:	0800185b 	.word	0x0800185b
 80017d0:	0800185b 	.word	0x0800185b
 80017d4:	0800185b 	.word	0x0800185b
 80017d8:	0800185b 	.word	0x0800185b
 80017dc:	0800185b 	.word	0x0800185b
 80017e0:	0800185b 	.word	0x0800185b
 80017e4:	0800185b 	.word	0x0800185b
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800185b 	.word	0x0800185b
 80017f0:	08001809 	.word	0x08001809
 80017f4:	0800181d 	.word	0x0800181d
 80017f8:	4a79      	ldr	r2, [pc, #484]	@ (80019e0 <HAL_GPIO_Init+0x2b4>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017fe:	e02c      	b.n	800185a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	623b      	str	r3, [r7, #32]
          break;
 8001806:	e029      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	3304      	adds	r3, #4
 800180e:	623b      	str	r3, [r7, #32]
          break;
 8001810:	e024      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	3308      	adds	r3, #8
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e01f      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	330c      	adds	r3, #12
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e01a      	b.n	800185c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182e:	2304      	movs	r3, #4
 8001830:	623b      	str	r3, [r7, #32]
          break;
 8001832:	e013      	b.n	800185c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800183c:	2308      	movs	r3, #8
 800183e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	611a      	str	r2, [r3, #16]
          break;
 8001846:	e009      	b.n	800185c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001848:	2308      	movs	r3, #8
 800184a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	615a      	str	r2, [r3, #20]
          break;
 8001852:	e003      	b.n	800185c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
          break;
 8001858:	e000      	b.n	800185c <HAL_GPIO_Init+0x130>
          break;
 800185a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2bff      	cmp	r3, #255	@ 0xff
 8001860:	d801      	bhi.n	8001866 <HAL_GPIO_Init+0x13a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e001      	b.n	800186a <HAL_GPIO_Init+0x13e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3304      	adds	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2bff      	cmp	r3, #255	@ 0xff
 8001870:	d802      	bhi.n	8001878 <HAL_GPIO_Init+0x14c>
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x152>
 8001878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187a:	3b08      	subs	r3, #8
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	210f      	movs	r1, #15
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	fa01 f303 	lsl.w	r3, r1, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	6a39      	ldr	r1, [r7, #32]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80b1 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ac:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a4c      	ldr	r2, [pc, #304]	@ (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b4a      	ldr	r3, [pc, #296]	@ (80019e4 <HAL_GPIO_Init+0x2b8>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018c4:	4a48      	ldr	r2, [pc, #288]	@ (80019e8 <HAL_GPIO_Init+0x2bc>)
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a40      	ldr	r2, [pc, #256]	@ (80019ec <HAL_GPIO_Init+0x2c0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_GPIO_Init+0x1ec>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a3f      	ldr	r2, [pc, #252]	@ (80019f0 <HAL_GPIO_Init+0x2c4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00d      	beq.n	8001914 <HAL_GPIO_Init+0x1e8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a3e      	ldr	r2, [pc, #248]	@ (80019f4 <HAL_GPIO_Init+0x2c8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x1e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a3d      	ldr	r2, [pc, #244]	@ (80019f8 <HAL_GPIO_Init+0x2cc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_GPIO_Init+0x1e0>
 8001908:	2303      	movs	r3, #3
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 800190c:	2304      	movs	r3, #4
 800190e:	e004      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001910:	2302      	movs	r3, #2
 8001912:	e002      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <HAL_GPIO_Init+0x1ee>
 8001918:	2300      	movs	r3, #0
 800191a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800192a:	492f      	ldr	r1, [pc, #188]	@ (80019e8 <HAL_GPIO_Init+0x2bc>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d006      	beq.n	8001952 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001944:	4b2d      	ldr	r3, [pc, #180]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	492c      	ldr	r1, [pc, #176]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	608b      	str	r3, [r1, #8]
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	43db      	mvns	r3, r3
 800195a:	4928      	ldr	r1, [pc, #160]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 800195c:	4013      	ands	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196c:	4b23      	ldr	r3, [pc, #140]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4922      	ldr	r1, [pc, #136]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	60cb      	str	r3, [r1, #12]
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	43db      	mvns	r3, r3
 8001982:	491e      	ldr	r1, [pc, #120]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 8001984:	4013      	ands	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4918      	ldr	r1, [pc, #96]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e006      	b.n	80019b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4914      	ldr	r1, [pc, #80]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	490e      	ldr	r1, [pc, #56]	@ (80019fc <HAL_GPIO_Init+0x2d0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e021      	b.n	8001a0e <HAL_GPIO_Init+0x2e2>
 80019ca:	bf00      	nop
 80019cc:	10320000 	.word	0x10320000
 80019d0:	10310000 	.word	0x10310000
 80019d4:	10220000 	.word	0x10220000
 80019d8:	10210000 	.word	0x10210000
 80019dc:	10120000 	.word	0x10120000
 80019e0:	10110000 	.word	0x10110000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	40010c00 	.word	0x40010c00
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40011400 	.word	0x40011400
 80019fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_GPIO_Init+0x304>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	4909      	ldr	r1, [pc, #36]	@ (8001a30 <HAL_GPIO_Init+0x304>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae8e 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	372c      	adds	r7, #44	@ 0x2c
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40010400 	.word	0x40010400

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	@ (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fe08 	bl	8000698 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e304      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8087 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ab4:	4b92      	ldr	r3, [pc, #584]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d00c      	beq.n	8001ada <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d112      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
 8001acc:	4b8c      	ldr	r3, [pc, #560]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d10b      	bne.n	8001af2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	4b89      	ldr	r3, [pc, #548]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06c      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d168      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e2de      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x76>
 8001afc:	4b80      	ldr	r3, [pc, #512]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a7f      	ldr	r2, [pc, #508]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x98>
 8001b12:	4b7b      	ldr	r3, [pc, #492]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7a      	ldr	r2, [pc, #488]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b78      	ldr	r3, [pc, #480]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a77      	ldr	r2, [pc, #476]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e01d      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0xbc>
 8001b36:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a71      	ldr	r2, [pc, #452]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0xd4>
 8001b50:	4b6b      	ldr	r3, [pc, #428]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6a      	ldr	r2, [pc, #424]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b68      	ldr	r3, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a67      	ldr	r2, [pc, #412]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d013      	beq.n	8001b98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b70:	f7ff f842 	bl	8000bf8 <HAL_GetTick>
 8001b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b78:	f7ff f83e 	bl	8000bf8 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b64      	cmp	r3, #100	@ 0x64
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e292      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCC_OscConfig+0xe4>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff f82e 	bl	8000bf8 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f82a 	bl	8000bf8 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b64      	cmp	r3, #100	@ 0x64
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e27e      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x10c>
 8001bbe:	e000      	b.n	8001bc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bce:	4b4c      	ldr	r3, [pc, #304]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bda:	4b49      	ldr	r3, [pc, #292]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d11c      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
 8001be6:	4b46      	ldr	r3, [pc, #280]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d116      	bne.n	8001c20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	4b43      	ldr	r3, [pc, #268]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e252      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4939      	ldr	r1, [pc, #228]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	e03a      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2e:	f7fe ffe3 	bl	8000bf8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7fe ffdf 	bl	8000bf8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e233      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c48:	4b2d      	ldr	r3, [pc, #180]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4927      	ldr	r1, [pc, #156]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
 8001c68:	e015      	b.n	8001c96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c6a:	4b26      	ldr	r3, [pc, #152]	@ (8001d04 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7fe ffc2 	bl	8000bf8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7fe ffbe 	bl	8000bf8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e212      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03a      	beq.n	8001d18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb0:	f7fe ffa2 	bl	8000bf8 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb8:	f7fe ff9e 	bl	8000bf8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e1f2      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4b0d      	ldr	r3, [pc, #52]	@ (8001d00 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0f0      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	f000 fbd0 	bl	800247c <RCC_Delay>
 8001cdc:	e01c      	b.n	8001d18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce4:	f7fe ff88 	bl	8000bf8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cea:	e00f      	b.n	8001d0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7fe ff84 	bl	8000bf8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d908      	bls.n	8001d0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1d8      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	42420000 	.word	0x42420000
 8001d08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b9b      	ldr	r3, [pc, #620]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e9      	bne.n	8001cec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80a6 	beq.w	8001e72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b94      	ldr	r3, [pc, #592]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	4b91      	ldr	r3, [pc, #580]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a90      	ldr	r2, [pc, #576]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]
 8001d42:	4b8e      	ldr	r3, [pc, #568]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b8b      	ldr	r3, [pc, #556]	@ (8001f80 <HAL_RCC_OscConfig+0x4ec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d118      	bne.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b88      	ldr	r3, [pc, #544]	@ (8001f80 <HAL_RCC_OscConfig+0x4ec>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a87      	ldr	r2, [pc, #540]	@ (8001f80 <HAL_RCC_OscConfig+0x4ec>)
 8001d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe ff45 	bl	8000bf8 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d72:	f7fe ff41 	bl	8000bf8 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	@ 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e195      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b7e      	ldr	r3, [pc, #504]	@ (8001f80 <HAL_RCC_OscConfig+0x4ec>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x312>
 8001d98:	4b78      	ldr	r3, [pc, #480]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	4a77      	ldr	r2, [pc, #476]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6213      	str	r3, [r2, #32]
 8001da4:	e02d      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x334>
 8001dae:	4b73      	ldr	r3, [pc, #460]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a72      	ldr	r2, [pc, #456]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b70      	ldr	r3, [pc, #448]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a6f      	ldr	r2, [pc, #444]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	e01c      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b05      	cmp	r3, #5
 8001dce:	d10c      	bne.n	8001dea <HAL_RCC_OscConfig+0x356>
 8001dd0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a69      	ldr	r2, [pc, #420]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
 8001ddc:	4b67      	ldr	r3, [pc, #412]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a66      	ldr	r2, [pc, #408]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e00b      	b.n	8001e02 <HAL_RCC_OscConfig+0x36e>
 8001dea:	4b64      	ldr	r3, [pc, #400]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	4a63      	ldr	r2, [pc, #396]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	6213      	str	r3, [r2, #32]
 8001df6:	4b61      	ldr	r3, [pc, #388]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4a60      	ldr	r2, [pc, #384]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d015      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fef5 	bl	8000bf8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7fe fef1 	bl	8000bf8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e143      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	4b54      	ldr	r3, [pc, #336]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0ee      	beq.n	8001e12 <HAL_RCC_OscConfig+0x37e>
 8001e34:	e014      	b.n	8001e60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fedf 	bl	8000bf8 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe fedb 	bl	8000bf8 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e12d      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	4b49      	ldr	r3, [pc, #292]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1ee      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e60:	7dfb      	ldrb	r3, [r7, #23]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e66:	4b45      	ldr	r3, [pc, #276]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	4a44      	ldr	r2, [pc, #272]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 808c 	beq.w	8001f94 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e88:	d10e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001e8a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001e96:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e103      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d14e      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001eb0:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ebc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0ef      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f84 <HAL_RCC_OscConfig+0x4f0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed6:	f7fe fe8f 	bl	8000bf8 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ede:	f7fe fe8b 	bl	8000bf8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b64      	cmp	r3, #100	@ 0x64
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0df      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001ef0:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001efc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f08:	491c      	ldr	r1, [pc, #112]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4918      	ldr	r1, [pc, #96]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_RCC_OscConfig+0x4f0>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe67 	bl	8000bf8 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f2e:	f7fe fe63 	bl	8000bf8 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b64      	cmp	r3, #100	@ 0x64
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0b7      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x49a>
 8001f4c:	e022      	b.n	8001f94 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_RCC_OscConfig+0x4f0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe fe4a 	bl	8000bf8 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001f66:	e00f      	b.n	8001f88 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f68:	f7fe fe46 	bl	8000bf8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	@ 0x64
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e09a      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40007000 	.word	0x40007000
 8001f84:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001f88:	4b4b      	ldr	r3, [pc, #300]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e9      	bne.n	8001f68 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 8088 	beq.w	80020ae <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9e:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d068      	beq.n	800207c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d14d      	bne.n	800204e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b42      	ldr	r3, [pc, #264]	@ (80020bc <HAL_RCC_OscConfig+0x628>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe1e 	bl	8000bf8 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fe1a 	bl	8000bf8 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e06e      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fe6:	d10f      	bne.n	8002008 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001fe8:	4b33      	ldr	r3, [pc, #204]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4931      	ldr	r1, [pc, #196]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	f023 020f 	bic.w	r2, r3, #15
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	492d      	ldr	r1, [pc, #180]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8002004:	4313      	orrs	r3, r2
 8002006:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b2b      	ldr	r3, [pc, #172]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	430b      	orrs	r3, r1
 800201a:	4927      	ldr	r1, [pc, #156]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 800201c:	4313      	orrs	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <HAL_RCC_OscConfig+0x628>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fde7 	bl	8000bf8 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7fe fde3 	bl	8000bf8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e037      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x59a>
 800204c:	e02f      	b.n	80020ae <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x628>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fdd0 	bl	8000bf8 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fdcc 	bl	8000bf8 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e020      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x5c8>
 800207a:	e018      	b.n	80020ae <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e013      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002088:	4b0b      	ldr	r3, [pc, #44]	@ (80020b8 <HAL_RCC_OscConfig+0x624>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	429a      	cmp	r2, r3
 800209a:	d106      	bne.n	80020aa <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420060 	.word	0x42420060

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d0      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4965      	ldr	r1, [pc, #404]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800213e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e073      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4936      	ldr	r1, [pc, #216]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7fe fd22 	bl	8000bf8 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7fe fd1e 	bl	8000bf8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e053      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d210      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4922      	ldr	r1, [pc, #136]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f859 	bl	8002304 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	@ (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fc80 	bl	8000b74 <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	08002544 	.word	0x08002544
 800228c:	20000000 	.word	0x20000000
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 80022a0:	f107 0318 	add.w	r3, r7, #24
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80022ae:	2302      	movs	r3, #2
 80022b0:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80022ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022be:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_RCC_MCOConfig+0x68>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_RCC_MCOConfig+0x68>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_RCC_MCOConfig+0x68>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80022d8:	f107 0318 	add.w	r3, r7, #24
 80022dc:	4619      	mov	r1, r3
 80022de:	4808      	ldr	r0, [pc, #32]	@ (8002300 <HAL_RCC_MCOConfig+0x6c>)
 80022e0:	f7ff fa24 	bl	800172c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_MCOConfig+0x68>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80022ec:	4903      	ldr	r1, [pc, #12]	@ (80022fc <HAL_RCC_MCOConfig+0x68>)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	@ 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	40010800 	.word	0x40010800

08002304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b08e      	sub	sp, #56	@ 0x38
 800230a:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002310:	2300      	movs	r3, #0
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002314:	2300      	movs	r3, #0
 8002316:	637b      	str	r3, [r7, #52]	@ 0x34
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002328:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	2b04      	cmp	r3, #4
 8002336:	d002      	beq.n	800233e <HAL_RCC_GetSysClockFreq+0x3a>
 8002338:	2b08      	cmp	r3, #8
 800233a:	d003      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0x40>
 800233c:	e089      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800233e:	4b4a      	ldr	r3, [pc, #296]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x164>)
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002342:	e089      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_RCC_GetSysClockFreq+0x168>)
 800234e:	5c9b      	ldrb	r3, [r3, r2]
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d072      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800235c:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	4b42      	ldr	r3, [pc, #264]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 800236c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d053      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	091b      	lsrs	r3, r3, #4
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	3301      	adds	r3, #1
 8002382:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002384:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x160>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3302      	adds	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2200      	movs	r2, #0
 8002396:	469a      	mov	sl, r3
 8002398:	4693      	mov	fp, r2
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	2200      	movs	r2, #0
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	617a      	str	r2, [r7, #20]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fb03 f20b 	mul.w	r2, r3, fp
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fb0a f303 	mul.w	r3, sl, r3
 80023ae:	4413      	add	r3, r2
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	fbaa 0102 	umull	r0, r1, sl, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	4619      	mov	r1, r3
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x164>)
 80023bc:	fb03 f201 	mul.w	r2, r3, r1
 80023c0:	2300      	movs	r3, #0
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x164>)
 80023ca:	fba0 4502 	umull	r4, r5, r0, r2
 80023ce:	442b      	add	r3, r5
 80023d0:	461d      	mov	r5, r3
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	2200      	movs	r2, #0
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	60fa      	str	r2, [r7, #12]
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	2200      	movs	r2, #0
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e6:	460b      	mov	r3, r1
 80023e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023ec:	4652      	mov	r2, sl
 80023ee:	fb02 f203 	mul.w	r2, r2, r3
 80023f2:	465b      	mov	r3, fp
 80023f4:	4684      	mov	ip, r0
 80023f6:	fb0c f303 	mul.w	r3, ip, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	4602      	mov	r2, r0
 80023fe:	4651      	mov	r1, sl
 8002400:	fba2 8901 	umull	r8, r9, r2, r1
 8002404:	444b      	add	r3, r9
 8002406:	4699      	mov	r9, r3
 8002408:	4642      	mov	r2, r8
 800240a:	464b      	mov	r3, r9
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff08 	bl	8000224 <__aeabi_uldivmod>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4613      	mov	r3, r2
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
 800241c:	e007      	b.n	800242e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	4a11      	ldr	r2, [pc, #68]	@ (8002468 <HAL_RCC_GetSysClockFreq+0x164>)
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <HAL_RCC_GetSysClockFreq+0x168>)
 8002430:	7b5b      	ldrb	r3, [r3, #13]
 8002432:	461a      	mov	r2, r3
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800243a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002440:	e004      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x170>)
 8002446:	fb02 f303 	mul.w	r3, r2, r3
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 800244c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002450:	e002      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x174>)
 8002454:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002456:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800245a:	4618      	mov	r0, r3
 800245c:	3738      	adds	r7, #56	@ 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	017d7840 	.word	0x017d7840
 800246c:	08002554 	.word	0x08002554
 8002470:	08002564 	.word	0x08002564
 8002474:	003d0900 	.word	0x003d0900
 8002478:	007a1200 	.word	0x007a1200

0800247c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <RCC_Delay+0x34>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0a      	ldr	r2, [pc, #40]	@ (80024b4 <RCC_Delay+0x38>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a5b      	lsrs	r3, r3, #9
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002498:	bf00      	nop
  }
  while (Delay --);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	60fa      	str	r2, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f9      	bne.n	8002498 <RCC_Delay+0x1c>
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000000 	.word	0x20000000
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <memset>:
 80024b8:	4603      	mov	r3, r0
 80024ba:	4402      	add	r2, r0
 80024bc:	4293      	cmp	r3, r2
 80024be:	d100      	bne.n	80024c2 <memset+0xa>
 80024c0:	4770      	bx	lr
 80024c2:	f803 1b01 	strb.w	r1, [r3], #1
 80024c6:	e7f9      	b.n	80024bc <memset+0x4>

080024c8 <__libc_init_array>:
 80024c8:	b570      	push	{r4, r5, r6, lr}
 80024ca:	2600      	movs	r6, #0
 80024cc:	4d0c      	ldr	r5, [pc, #48]	@ (8002500 <__libc_init_array+0x38>)
 80024ce:	4c0d      	ldr	r4, [pc, #52]	@ (8002504 <__libc_init_array+0x3c>)
 80024d0:	1b64      	subs	r4, r4, r5
 80024d2:	10a4      	asrs	r4, r4, #2
 80024d4:	42a6      	cmp	r6, r4
 80024d6:	d109      	bne.n	80024ec <__libc_init_array+0x24>
 80024d8:	f000 f828 	bl	800252c <_init>
 80024dc:	2600      	movs	r6, #0
 80024de:	4d0a      	ldr	r5, [pc, #40]	@ (8002508 <__libc_init_array+0x40>)
 80024e0:	4c0a      	ldr	r4, [pc, #40]	@ (800250c <__libc_init_array+0x44>)
 80024e2:	1b64      	subs	r4, r4, r5
 80024e4:	10a4      	asrs	r4, r4, #2
 80024e6:	42a6      	cmp	r6, r4
 80024e8:	d105      	bne.n	80024f6 <__libc_init_array+0x2e>
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f0:	4798      	blx	r3
 80024f2:	3601      	adds	r6, #1
 80024f4:	e7ee      	b.n	80024d4 <__libc_init_array+0xc>
 80024f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fa:	4798      	blx	r3
 80024fc:	3601      	adds	r6, #1
 80024fe:	e7f2      	b.n	80024e6 <__libc_init_array+0x1e>
 8002500:	0800257c 	.word	0x0800257c
 8002504:	0800257c 	.word	0x0800257c
 8002508:	0800257c 	.word	0x0800257c
 800250c:	08002580 	.word	0x08002580

08002510 <memcpy>:
 8002510:	440a      	add	r2, r1
 8002512:	4291      	cmp	r1, r2
 8002514:	f100 33ff 	add.w	r3, r0, #4294967295
 8002518:	d100      	bne.n	800251c <memcpy+0xc>
 800251a:	4770      	bx	lr
 800251c:	b510      	push	{r4, lr}
 800251e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002522:	4291      	cmp	r1, r2
 8002524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002528:	d1f9      	bne.n	800251e <memcpy+0xe>
 800252a:	bd10      	pop	{r4, pc}

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
