
STM32_Bootloader_Receive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000315c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003340  08003340  00004340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003378  08003378  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003378  08003378  00004378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003380  08003380  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003380  08003380  00004380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003384  08003384  00004384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003388  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d8  20000010  08003394  00005010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08003394  000054e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008699  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a97  00000000  00000000  0000d6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ec  00000000  00000000  0000f928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edf6  00000000  00000000  0000ff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0d0  00000000  00000000  0002ed0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b252b  00000000  00000000  00038dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000eb348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ed1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000010 	.word	0x20000010
 8000200:	00000000 	.word	0x00000000
 8000204:	08003328 	.word	0x08003328

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000014 	.word	0x20000014
 8000220:	08003328 	.word	0x08003328

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_UART_RxCpltCallback>:
uint16_t application_size = 8192;
uint16_t application_write_idx = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8000516:	af00      	add	r7, sp, #0
 8000518:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800051c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000520:	6018      	str	r0, [r3, #0]
	HAL_UART_Receive_IT(&huart2, RxData2, MAX_BLOCK_SIZE);
 8000522:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000526:	4933      	ldr	r1, [pc, #204]	@ (80005f4 <HAL_UART_RxCpltCallback+0xe4>)
 8000528:	4833      	ldr	r0, [pc, #204]	@ (80005f8 <HAL_UART_RxCpltCallback+0xe8>)
 800052a:	f002 f92c 	bl	8002786 <HAL_UART_Receive_IT>
	uint8_t block[MAX_BLOCK_SIZE] = { 0 };
 800052e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000532:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	3304      	adds	r3, #4
 800053c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f002 fec4 	bl	80032d0 <memset>
	for(int i =0;i<1024;i++)
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800054e:	e012      	b.n	8000576 <HAL_UART_RxCpltCallback+0x66>
	{
		block[i] = RxData2[i];
 8000550:	4a28      	ldr	r2, [pc, #160]	@ (80005f4 <HAL_UART_RxCpltCallback+0xe4>)
 8000552:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000556:	4413      	add	r3, r2
 8000558:	7819      	ldrb	r1, [r3, #0]
 800055a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800055e:	f2a3 4204 	subw	r2, r3, #1028	@ 0x404
 8000562:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000566:	4413      	add	r3, r2
 8000568:	460a      	mov	r2, r1
 800056a:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<1024;i++)
 800056c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8000570:	3301      	adds	r3, #1
 8000572:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8000576:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 800057a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800057e:	dbe7      	blt.n	8000550 <HAL_UART_RxCpltCallback+0x40>
	}
	if (huart->Instance == USART2) // Check if the interrupt is for UART2
 8000580:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000584:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <HAL_UART_RxCpltCallback+0xec>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d12a      	bne.n	80005e8 <HAL_UART_RxCpltCallback+0xd8>
    {
		current_app_size = current_app_size + 1;
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <HAL_UART_RxCpltCallback+0xf0>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <HAL_UART_RxCpltCallback+0xf0>)
 800059c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, block, sizeof(block), HAL_MAX_DELAY);
 800059e:	f107 010c 	add.w	r1, r7, #12
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005aa:	4816      	ldr	r0, [pc, #88]	@ (8000604 <HAL_UART_RxCpltCallback+0xf4>)
 80005ac:	f002 f868 	bl	8002680 <HAL_UART_Transmit>
		write_data_to_flash_app(block,sizeof(block), (current_app_size <= 1) );
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <HAL_UART_RxCpltCallback+0xf0>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	bf94      	ite	ls
 80005b8:	2301      	movls	r3, #1
 80005ba:	2300      	movhi	r3, #0
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f98c 	bl	80008e4 <write_data_to_flash_app>
		memset(RxData2, 0, sizeof(RxData2));
 80005cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005d0:	2100      	movs	r1, #0
 80005d2:	4808      	ldr	r0, [pc, #32]	@ (80005f4 <HAL_UART_RxCpltCallback+0xe4>)
 80005d4:	f002 fe7c 	bl	80032d0 <memset>
		memset(block, 0, sizeof(block));
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fe74 	bl	80032d0 <memset>
	}
}
 80005e8:	bf00      	nop
 80005ea:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000bc 	.word	0x200000bc
 80005f8:	20000074 	.word	0x20000074
 80005fc:	40004400 	.word	0x40004400
 8000600:	200004bc 	.word	0x200004bc
 8000604:	2000002c 	.word	0x2000002c

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb62 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f82a 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f8e8 	bl	80007e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f892 	bl	8000740 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800061c:	f000 f8ba 	bl	8000794 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000626:	480b      	ldr	r0, [pc, #44]	@ (8000654 <main+0x4c>)
 8000628:	f001 f9ae 	bl	8001988 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, RxData2, MAX_BLOCK_SIZE);
 800062c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000630:	4909      	ldr	r1, [pc, #36]	@ (8000658 <main+0x50>)
 8000632:	480a      	ldr	r0, [pc, #40]	@ (800065c <main+0x54>)
 8000634:	f002 f8a7 	bl	8002786 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(UART_EN_GPIO_Port, UART_EN_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <main+0x58>)
 8000640:	f001 f9a2 	bl	8001988 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if( current_app_size > 6)
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <main+0x5c>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	2b06      	cmp	r3, #6
 800064a:	d9fb      	bls.n	8000644 <main+0x3c>
	{
		goto_application();
 800064c:	f000 f9b6 	bl	80009bc <goto_application>
	if( current_app_size > 6)
 8000650:	e7f8      	b.n	8000644 <main+0x3c>
 8000652:	bf00      	nop
 8000654:	40011000 	.word	0x40011000
 8000658:	200000bc 	.word	0x200000bc
 800065c:	20000074 	.word	0x20000074
 8000660:	40010c00 	.word	0x40010c00
 8000664:	200004bc 	.word	0x200004bc

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2238      	movs	r2, #56	@ 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fe2a 	bl	80032d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000694:	2304      	movs	r3, #4
 8000696:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800069c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006ac:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80006ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006bc:	2340      	movs	r3, #64	@ 0x40
 80006be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fa47 	bl	8001b58 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80006d0:	f000 f9a2 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fd48 	bl	8002184 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 f98d 	bl	8000a18 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 80006fe:	2200      	movs	r2, #0
 8000700:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 8000704:	2000      	movs	r0, #0
 8000706:	f001 fe27 	bl	8002358 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <SystemClock_Config+0xd0>)
 800070c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <SystemClock_Config+0xd0>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000718:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 800071a:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <SystemClock_Config+0xd0>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000722:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <SystemClock_Config+0xd0>)
 8000724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000728:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800072a:	4b04      	ldr	r3, [pc, #16]	@ (800073c <SystemClock_Config+0xd4>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	@ 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	42420070 	.word	0x42420070

08000740 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000746:	4a12      	ldr	r2, [pc, #72]	@ (8000790 <MX_USART1_UART_Init+0x50>)
 8000748:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_USART1_UART_Init+0x4c>)
 8000778:	f001 ff32 	bl	80025e0 <HAL_UART_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000782:	f000 f949 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000002c 	.word	0x2000002c
 8000790:	40013800 	.word	0x40013800

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 ff08 	bl	80025e0 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f91f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000074 	.word	0x20000074
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0310 	add.w	r3, r7, #16
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fc:	4b35      	ldr	r3, [pc, #212]	@ (80008d4 <MX_GPIO_Init+0xec>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4a34      	ldr	r2, [pc, #208]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b32      	ldr	r3, [pc, #200]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000814:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800081a:	f043 0308 	orr.w	r3, r3, #8
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a28      	ldr	r2, [pc, #160]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0304 	and.w	r3, r3, #4
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a22      	ldr	r2, [pc, #136]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800084a:	f043 0320 	orr.w	r3, r3, #32
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b20      	ldr	r3, [pc, #128]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000862:	481d      	ldr	r0, [pc, #116]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000864:	f001 f890 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_EN_GPIO_Port, UART_EN_Pin, GPIO_PIN_RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086e:	481b      	ldr	r0, [pc, #108]	@ (80008dc <MX_GPIO_Init+0xf4>)
 8000870:	f001 f88a 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2302      	movs	r3, #2
 8000884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	4619      	mov	r1, r3
 800088c:	4812      	ldr	r0, [pc, #72]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 800088e:	f000 fef7 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART_EN_Pin */
  GPIO_InitStruct.Pin = UART_EN_Pin;
 8000892:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UART_EN_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	@ (80008dc <MX_GPIO_Init+0xf4>)
 80008ac:	f000 fee8 	bl	8001680 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_GPIO_Init+0xf8>)
 80008c6:	f000 fedb 	bl	8001680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40011000 	.word	0x40011000
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	40010800 	.word	0x40010800

080008e4 <write_data_to_flash_app>:
  * @is_first_block true - if this is first block, false - not first block
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef write_data_to_flash_app( uint8_t *data,
                                        uint16_t data_len, bool is_first_block )
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
 80008f0:	4613      	mov	r3, r2
 80008f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret;
  do
  {
    HAL_FLASH_Unlock();
 80008f4:	f000 fd34 	bl	8001360 <HAL_FLASH_Unlock>
    if( is_first_block )
 80008f8:	787b      	ldrb	r3, [r7, #1]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d010      	beq.n	8000920 <write_data_to_flash_app+0x3c>
    {
      FLASH_EraseInitTypeDef EraseInitStruct;
      uint32_t SectorError;
      EraseInitStruct.TypeErase     = FLASH_TYPEERASE_PAGES;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
      EraseInitStruct.PageAddress   = ETX_APP_START_ADDRESS;
 8000902:	4b2c      	ldr	r3, [pc, #176]	@ (80009b4 <write_data_to_flash_app+0xd0>)
 8000904:	617b      	str	r3, [r7, #20]
      EraseInitStruct.NbPages       = 64;					// 64 Page x 2KB Page Size = 128 KB
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	61bb      	str	r3, [r7, #24]
      HAL_FLASHEx_Erase( &EraseInitStruct, &SectorError );	//Erase Remaining Flash before Programming
 800090a:	f107 0208 	add.w	r2, r7, #8
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f000 fe0b 	bl	8001530 <HAL_FLASHEx_Erase>
      application_write_idx = 0;
 800091a:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <write_data_to_flash_app+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	801a      	strh	r2, [r3, #0]
    }

    for(int i = 0; i < data_len/2; i++)
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
 8000924:	e031      	b.n	800098a <write_data_to_flash_app+0xa6>
    {
      uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b21a      	sxth	r2, r3
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	3301      	adds	r3, #1
 800093a:	6879      	ldr	r1, [r7, #4]
 800093c:	440b      	add	r3, r1
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	b21b      	sxth	r3, r3
 8000944:	4313      	orrs	r3, r2
 8000946:	b21b      	sxth	r3, r3
 8000948:	83fb      	strh	r3, [r7, #30]
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
                               (ETX_APP_START_ADDRESS + application_write_idx ),
 800094a:	4b1b      	ldr	r3, [pc, #108]	@ (80009b8 <write_data_to_flash_app+0xd4>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000952:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
      ret = HAL_FLASH_Program( FLASH_TYPEPROGRAM_HALFWORD,
 8000956:	4619      	mov	r1, r3
 8000958:	8bfb      	ldrh	r3, [r7, #30]
 800095a:	2200      	movs	r2, #0
 800095c:	461c      	mov	r4, r3
 800095e:	4615      	mov	r5, r2
 8000960:	4622      	mov	r2, r4
 8000962:	462b      	mov	r3, r5
 8000964:	2001      	movs	r0, #1
 8000966:	f000 fc8b 	bl	8001280 <HAL_FLASH_Program>
 800096a:	4603      	mov	r3, r0
 800096c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                               halfword_data
                             );
      if( ret == HAL_OK )
 8000970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <write_data_to_flash_app+0xa0>
      {
        application_write_idx += 2;
 8000978:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <write_data_to_flash_app+0xd4>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	3302      	adds	r3, #2
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <write_data_to_flash_app+0xd4>)
 8000982:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < data_len/2; i++)
 8000984:	6a3b      	ldr	r3, [r7, #32]
 8000986:	3301      	adds	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	b29b      	uxth	r3, r3
 8000990:	461a      	mov	r2, r3
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	4293      	cmp	r3, r2
 8000996:	dbc6      	blt.n	8000926 <write_data_to_flash_app+0x42>
      }
    }
    if( ret != HAL_OK )
 8000998:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800099c:	2b00      	cmp	r3, #0
 800099e:	d102      	bne.n	80009a6 <write_data_to_flash_app+0xc2>
    {
      break;
    }
    HAL_FLASH_Lock();
 80009a0:	f000 fd04 	bl	80013ac <HAL_FLASH_Lock>
 80009a4:	e000      	b.n	80009a8 <write_data_to_flash_app+0xc4>
      break;
 80009a6:	bf00      	nop
  }while( false );
  return ret;
 80009a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bdb0      	pop	{r4, r5, r7, pc}
 80009b4:	08020000 	.word	0x08020000
 80009b8:	200004be 	.word	0x200004be

080009bc <goto_application>:

static void goto_application(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (ETX_APP_START_ADDRESS + 4U)));
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <goto_application+0x4c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ce:	480f      	ldr	r0, [pc, #60]	@ (8000a0c <goto_application+0x50>)
 80009d0:	f000 ffda 	bl	8001988 <HAL_GPIO_WritePin>

	/* Reset the Clock */
	HAL_RCC_DeInit();
 80009d4:	f000 fff0 	bl	80019b8 <HAL_RCC_DeInit>
	HAL_DeInit();
 80009d8:	f000 f992 	bl	8000d00 <HAL_DeInit>
	__set_MSP(*(volatile uint32_t*) ETX_APP_START_ADDRESS);
 80009dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <goto_application+0x54>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	f383 8808 	msr	MSP, r3
}
 80009e8:	bf00      	nop
	SysTick->CTRL = 0;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <goto_application+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <goto_application+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <goto_application+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]

	/* Jump to application */
	app_reset_handler();    //call the app reset handler
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4798      	blx	r3
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	08020004 	.word	0x08020004
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	08020000 	.word	0x08020000
 8000a14:	e000e010 	.word	0xe000e010

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a0e      	ldr	r2, [pc, #56]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_MspInit+0x60>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_MspInit+0x60>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010000 	.word	0x40010000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	@ 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd4 <HAL_UART_MspInit+0x14c>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d146      	bne.n	8000b36 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000aae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a44      	ldr	r2, [pc, #272]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000ac6:	f043 0308 	orr.w	r3, r3, #8
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b42      	ldr	r3, [pc, #264]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0308 	and.w	r3, r3, #8
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad8:	2340      	movs	r3, #64	@ 0x40
 8000ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	483c      	ldr	r0, [pc, #240]	@ (8000bdc <HAL_UART_MspInit+0x154>)
 8000aec:	f000 fdc8 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4619      	mov	r1, r3
 8000b02:	4836      	ldr	r0, [pc, #216]	@ (8000bdc <HAL_UART_MspInit+0x154>)
 8000b04:	f000 fdbc 	bl	8001680 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000b08:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <HAL_UART_MspInit+0x158>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b10:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b1e:	4a30      	ldr	r2, [pc, #192]	@ (8000be0 <HAL_UART_MspInit+0x158>)
 8000b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b22:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2025      	movs	r0, #37	@ 0x25
 8000b2a:	f000 fa30 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b2e:	2025      	movs	r0, #37	@ 0x25
 8000b30:	f000 fa49 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b34:	e04a      	b.n	8000bcc <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000be4 <HAL_UART_MspInit+0x15c>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d145      	bne.n	8000bcc <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b40:	4b25      	ldr	r3, [pc, #148]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4a:	61d3      	str	r3, [r2, #28]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b4e:	69db      	ldr	r3, [r3, #28]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b5e:	f043 0320 	orr.w	r3, r3, #32
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd8 <HAL_UART_MspInit+0x150>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b70:	2320      	movs	r3, #32
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4619      	mov	r1, r3
 8000b82:	4819      	ldr	r0, [pc, #100]	@ (8000be8 <HAL_UART_MspInit+0x160>)
 8000b84:	f000 fd7c 	bl	8001680 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b88:	2340      	movs	r3, #64	@ 0x40
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4813      	ldr	r0, [pc, #76]	@ (8000be8 <HAL_UART_MspInit+0x160>)
 8000b9c:	f000 fd70 	bl	8001680 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8000be0 <HAL_UART_MspInit+0x158>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <HAL_UART_MspInit+0x158>)
 8000bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bba:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2026      	movs	r0, #38	@ 0x26
 8000bc2:	f000 f9e4 	bl	8000f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc6:	2026      	movs	r0, #38	@ 0x26
 8000bc8:	f000 f9fd 	bl	8000fc6 <HAL_NVIC_EnableIRQ>
}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	@ 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40013800 	.word	0x40013800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40004400 	.word	0x40004400
 8000be8:	40011400 	.word	0x40011400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8b4 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USART1_IRQHandler+0x10>)
 8000c4a:	f001 fdc1 	bl	80027d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000002c 	.word	0x2000002c

08000c58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <USART2_IRQHandler+0x10>)
 8000c5e:	f001 fdb7 	bl	80027d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000074 	.word	0x20000074

08000c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <SystemInit+0x14>)
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <SystemInit+0x18>)
 8000c74:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	08020000 	.word	0x08020000

08000c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c88:	f7ff fff0 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480b      	ldr	r0, [pc, #44]	@ (8000cbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c8e:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ca4:	4c09      	ldr	r4, [pc, #36]	@ (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f002 fb15 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb6:	f7ff fca7 	bl	8000608 <main>
  bx lr
 8000cba:	4770      	bx	lr
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cc4:	08003388 	.word	0x08003388
  ldr r2, =_sbss
 8000cc8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ccc:	200004e8 	.word	0x200004e8

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_Init+0x28>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <HAL_Init+0x28>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f947 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f000 f82c 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe98 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40022000 	.word	0x40022000

08000d00 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000d04:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d06:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295
 8000d18:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]

#if defined(STM32F105xC) || defined(STM32F107xC)
  __HAL_RCC_AHB_FORCE_RESET();
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d22:	f04f 32ff 	mov.w	r2, #4294967295
 8000d26:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000d28:	4b03      	ldr	r3, [pc, #12]	@ (8000d38 <HAL_DeInit+0x38>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d2e:	f000 f805 	bl	8000d3c <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f93b 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f903 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a03      	ldr	r2, [pc, #12]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	200004c0 	.word	0x200004c0

08000dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	@ (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	200004c0 	.word	0x200004c0

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4906      	ldr	r1, [pc, #24]	@ (8000e78 <__NVIC_EnableIRQ+0x34>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	@ 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff90 	bl	8000e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff2d 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa0:	f7ff ff42 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	68b9      	ldr	r1, [r7, #8]
 8000faa:	6978      	ldr	r0, [r7, #20]
 8000fac:	f7ff ff90 	bl	8000ed0 <NVIC_EncodePriority>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff5f 	bl	8000e7c <__NVIC_SetPriority>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff35 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffa2 	bl	8000f34 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d008      	beq.n	8001024 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2204      	movs	r2, #4
 8001016:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e020      	b.n	8001066 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 020e 	bic.w	r2, r2, #14
 8001032:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001064:	7bfb      	ldrb	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d005      	beq.n	8001094 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2204      	movs	r2, #4
 800108c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e0d6      	b.n	8001242 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 020e 	bic.w	r2, r2, #14
 80010a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0201 	bic.w	r2, r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b64      	ldr	r3, [pc, #400]	@ (800124c <HAL_DMA_Abort_IT+0x1dc>)
 80010bc:	429a      	cmp	r2, r3
 80010be:	d958      	bls.n	8001172 <HAL_DMA_Abort_IT+0x102>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a62      	ldr	r2, [pc, #392]	@ (8001250 <HAL_DMA_Abort_IT+0x1e0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d04f      	beq.n	800116a <HAL_DMA_Abort_IT+0xfa>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a61      	ldr	r2, [pc, #388]	@ (8001254 <HAL_DMA_Abort_IT+0x1e4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d048      	beq.n	8001166 <HAL_DMA_Abort_IT+0xf6>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a5f      	ldr	r2, [pc, #380]	@ (8001258 <HAL_DMA_Abort_IT+0x1e8>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d040      	beq.n	8001160 <HAL_DMA_Abort_IT+0xf0>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a5e      	ldr	r2, [pc, #376]	@ (800125c <HAL_DMA_Abort_IT+0x1ec>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d038      	beq.n	800115a <HAL_DMA_Abort_IT+0xea>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001260 <HAL_DMA_Abort_IT+0x1f0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d030      	beq.n	8001154 <HAL_DMA_Abort_IT+0xe4>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001264 <HAL_DMA_Abort_IT+0x1f4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d028      	beq.n	800114e <HAL_DMA_Abort_IT+0xde>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a52      	ldr	r2, [pc, #328]	@ (800124c <HAL_DMA_Abort_IT+0x1dc>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d020      	beq.n	8001148 <HAL_DMA_Abort_IT+0xd8>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a57      	ldr	r2, [pc, #348]	@ (8001268 <HAL_DMA_Abort_IT+0x1f8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d019      	beq.n	8001144 <HAL_DMA_Abort_IT+0xd4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a55      	ldr	r2, [pc, #340]	@ (800126c <HAL_DMA_Abort_IT+0x1fc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d012      	beq.n	8001140 <HAL_DMA_Abort_IT+0xd0>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a54      	ldr	r2, [pc, #336]	@ (8001270 <HAL_DMA_Abort_IT+0x200>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d00a      	beq.n	800113a <HAL_DMA_Abort_IT+0xca>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <HAL_DMA_Abort_IT+0x204>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d102      	bne.n	8001134 <HAL_DMA_Abort_IT+0xc4>
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	e01b      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001134:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001138:	e018      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 800113a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800113e:	e015      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001140:	2310      	movs	r3, #16
 8001142:	e013      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001144:	2301      	movs	r3, #1
 8001146:	e011      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800114c:	e00e      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 800114e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001152:	e00b      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001154:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001158:	e008      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	e005      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001164:	e002      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 8001166:	2310      	movs	r3, #16
 8001168:	e000      	b.n	800116c <HAL_DMA_Abort_IT+0xfc>
 800116a:	2301      	movs	r3, #1
 800116c:	4a42      	ldr	r2, [pc, #264]	@ (8001278 <HAL_DMA_Abort_IT+0x208>)
 800116e:	6053      	str	r3, [r2, #4]
 8001170:	e057      	b.n	8001222 <HAL_DMA_Abort_IT+0x1b2>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a36      	ldr	r2, [pc, #216]	@ (8001250 <HAL_DMA_Abort_IT+0x1e0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d04f      	beq.n	800121c <HAL_DMA_Abort_IT+0x1ac>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a34      	ldr	r2, [pc, #208]	@ (8001254 <HAL_DMA_Abort_IT+0x1e4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d048      	beq.n	8001218 <HAL_DMA_Abort_IT+0x1a8>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a33      	ldr	r2, [pc, #204]	@ (8001258 <HAL_DMA_Abort_IT+0x1e8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d040      	beq.n	8001212 <HAL_DMA_Abort_IT+0x1a2>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a31      	ldr	r2, [pc, #196]	@ (800125c <HAL_DMA_Abort_IT+0x1ec>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d038      	beq.n	800120c <HAL_DMA_Abort_IT+0x19c>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a30      	ldr	r2, [pc, #192]	@ (8001260 <HAL_DMA_Abort_IT+0x1f0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d030      	beq.n	8001206 <HAL_DMA_Abort_IT+0x196>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <HAL_DMA_Abort_IT+0x1f4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d028      	beq.n	8001200 <HAL_DMA_Abort_IT+0x190>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a26      	ldr	r2, [pc, #152]	@ (800124c <HAL_DMA_Abort_IT+0x1dc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d020      	beq.n	80011fa <HAL_DMA_Abort_IT+0x18a>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001268 <HAL_DMA_Abort_IT+0x1f8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d019      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x186>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a29      	ldr	r2, [pc, #164]	@ (800126c <HAL_DMA_Abort_IT+0x1fc>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d012      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x182>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <HAL_DMA_Abort_IT+0x200>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00a      	beq.n	80011ec <HAL_DMA_Abort_IT+0x17c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a26      	ldr	r2, [pc, #152]	@ (8001274 <HAL_DMA_Abort_IT+0x204>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d102      	bne.n	80011e6 <HAL_DMA_Abort_IT+0x176>
 80011e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e4:	e01b      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 80011e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ea:	e018      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 80011ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f0:	e015      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 80011f2:	2310      	movs	r3, #16
 80011f4:	e013      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e011      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 80011fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011fe:	e00e      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 8001200:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001204:	e00b      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 8001206:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120a:	e008      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 800120c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001210:	e005      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	e002      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 8001218:	2310      	movs	r3, #16
 800121a:	e000      	b.n	800121e <HAL_DMA_Abort_IT+0x1ae>
 800121c:	2301      	movs	r3, #1
 800121e:	4a17      	ldr	r2, [pc, #92]	@ (800127c <HAL_DMA_Abort_IT+0x20c>)
 8001220:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	4798      	blx	r3
    } 
  }
  return status;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020080 	.word	0x40020080
 8001250:	40020008 	.word	0x40020008
 8001254:	4002001c 	.word	0x4002001c
 8001258:	40020030 	.word	0x40020030
 800125c:	40020044 	.word	0x40020044
 8001260:	40020058 	.word	0x40020058
 8001264:	4002006c 	.word	0x4002006c
 8001268:	40020408 	.word	0x40020408
 800126c:	4002041c 	.word	0x4002041c
 8001270:	40020430 	.word	0x40020430
 8001274:	40020444 	.word	0x40020444
 8001278:	40020400 	.word	0x40020400
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800129a:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <HAL_FLASH_Program+0xd8>)
 800129c:	7e1b      	ldrb	r3, [r3, #24]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_FLASH_Program+0x26>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e054      	b.n	8001350 <HAL_FLASH_Program+0xd0>
 80012a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <HAL_FLASH_Program+0xd8>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012b0:	f000 f8a8 	bl	8001404 <FLASH_WaitForLastOperation>
 80012b4:	4603      	mov	r3, r0
 80012b6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d144      	bne.n	8001348 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d102      	bne.n	80012ca <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80012c4:	2301      	movs	r3, #1
 80012c6:	757b      	strb	r3, [r7, #21]
 80012c8:	e007      	b.n	80012da <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d102      	bne.n	80012d6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80012d0:	2302      	movs	r3, #2
 80012d2:	757b      	strb	r3, [r7, #21]
 80012d4:	e001      	b.n	80012da <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80012d6:	2304      	movs	r3, #4
 80012d8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80012da:	2300      	movs	r3, #0
 80012dc:	75bb      	strb	r3, [r7, #22]
 80012de:	e02d      	b.n	800133c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80012e0:	7dbb      	ldrb	r3, [r7, #22]
 80012e2:	005a      	lsls	r2, r3, #1
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	eb02 0c03 	add.w	ip, r2, r3
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	0119      	lsls	r1, r3, #4
 80012ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012f2:	f1c1 0620 	rsb	r6, r1, #32
 80012f6:	f1a1 0020 	sub.w	r0, r1, #32
 80012fa:	fa22 f401 	lsr.w	r4, r2, r1
 80012fe:	fa03 f606 	lsl.w	r6, r3, r6
 8001302:	4334      	orrs	r4, r6
 8001304:	fa23 f000 	lsr.w	r0, r3, r0
 8001308:	4304      	orrs	r4, r0
 800130a:	fa23 f501 	lsr.w	r5, r3, r1
 800130e:	b2a3      	uxth	r3, r4
 8001310:	4619      	mov	r1, r3
 8001312:	4660      	mov	r0, ip
 8001314:	f000 f85a 	bl	80013cc <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001318:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800131c:	f000 f872 	bl	8001404 <FLASH_WaitForLastOperation>
 8001320:	4603      	mov	r3, r0
 8001322:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <HAL_FLASH_Program+0xdc>)
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <HAL_FLASH_Program+0xdc>)
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d107      	bne.n	8001346 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001336:	7dbb      	ldrb	r3, [r7, #22]
 8001338:	3301      	adds	r3, #1
 800133a:	75bb      	strb	r3, [r7, #22]
 800133c:	7dba      	ldrb	r2, [r7, #22]
 800133e:	7d7b      	ldrb	r3, [r7, #21]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3cd      	bcc.n	80012e0 <HAL_FLASH_Program+0x60>
 8001344:	e000      	b.n	8001348 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001346:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <HAL_FLASH_Program+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]

  return status;
 800134e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001350:	4618      	mov	r0, r3
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001358:	200004c8 	.word	0x200004c8
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <HAL_FLASH_Unlock+0x40>)
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00d      	beq.n	8001392 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_FLASH_Unlock+0x40>)
 8001378:	4a0a      	ldr	r2, [pc, #40]	@ (80013a4 <HAL_FLASH_Unlock+0x44>)
 800137a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_FLASH_Unlock+0x40>)
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <HAL_FLASH_Unlock+0x48>)
 8001380:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <HAL_FLASH_Unlock+0x40>)
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001392:	79fb      	ldrb	r3, [r7, #7]
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40022000 	.word	0x40022000
 80013a4:	45670123 	.word	0x45670123
 80013a8:	cdef89ab 	.word	0xcdef89ab

080013ac <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_FLASH_Lock+0x1c>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a04      	ldr	r2, [pc, #16]	@ (80013c8 <HAL_FLASH_Lock+0x1c>)
 80013b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ba:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40022000 	.word	0x40022000

080013cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <FLASH_Program_HalfWord+0x30>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <FLASH_Program_HalfWord+0x34>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <FLASH_Program_HalfWord+0x34>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	801a      	strh	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200004c8 	.word	0x200004c8
 8001400:	40022000 	.word	0x40022000

08001404 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fcde 	bl	8000dcc <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001412:	e010      	b.n	8001436 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141a:	d00c      	beq.n	8001436 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <FLASH_WaitForLastOperation+0x2e>
 8001422:	f7ff fcd3 	bl	8000dcc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	429a      	cmp	r2, r3
 8001430:	d201      	bcs.n	8001436 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e025      	b.n	8001482 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1e8      	bne.n	8001414 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 8001450:	2220      	movs	r2, #32
 8001452:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001454:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10b      	bne.n	8001478 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <FLASH_WaitForLastOperation+0x88>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001478:	f000 f80a 	bl	8001490 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40022000 	.word	0x40022000

08001490 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800149a:	4b23      	ldr	r3, [pc, #140]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014a6:	4b21      	ldr	r3, [pc, #132]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f043 0310 	orr.w	r3, r3, #16
 80014b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80014ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d009      	beq.n	80014da <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80014c6:	4b19      	ldr	r3, [pc, #100]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00b      	beq.n	80014fe <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	4a0f      	ldr	r2, [pc, #60]	@ (800152c <FLASH_SetErrorCode+0x9c>)
 80014f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f240 1201 	movw	r2, #257	@ 0x101
 8001504:	4293      	cmp	r3, r2
 8001506:	d106      	bne.n	8001516 <FLASH_SetErrorCode+0x86>
 8001508:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	61d3      	str	r3, [r2, #28]
}  
 8001514:	e002      	b.n	800151c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <FLASH_SetErrorCode+0x98>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	60d3      	str	r3, [r2, #12]
}  
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000
 800152c:	200004c8 	.word	0x200004c8

08001530 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001542:	4b2f      	ldr	r3, [pc, #188]	@ (8001600 <HAL_FLASHEx_Erase+0xd0>)
 8001544:	7e1b      	ldrb	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d101      	bne.n	800154e <HAL_FLASHEx_Erase+0x1e>
 800154a:	2302      	movs	r3, #2
 800154c:	e053      	b.n	80015f6 <HAL_FLASHEx_Erase+0xc6>
 800154e:	4b2c      	ldr	r3, [pc, #176]	@ (8001600 <HAL_FLASHEx_Erase+0xd0>)
 8001550:	2201      	movs	r2, #1
 8001552:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d116      	bne.n	800158a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800155c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001560:	f7ff ff50 	bl	8001404 <FLASH_WaitForLastOperation>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d141      	bne.n	80015ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800156a:	2001      	movs	r0, #1
 800156c:	f000 f84c 	bl	8001608 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001570:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001574:	f7ff ff46 	bl	8001404 <FLASH_WaitForLastOperation>
 8001578:	4603      	mov	r3, r0
 800157a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800157c:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_FLASHEx_Erase+0xd4>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <HAL_FLASHEx_Erase+0xd4>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6113      	str	r3, [r2, #16]
 8001588:	e031      	b.n	80015ee <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800158a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800158e:	f7ff ff39 	bl	8001404 <FLASH_WaitForLastOperation>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d12a      	bne.n	80015ee <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	f04f 32ff 	mov.w	r2, #4294967295
 800159e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	e019      	b.n	80015dc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f000 f849 	bl	8001640 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015b2:	f7ff ff27 	bl	8001404 <FLASH_WaitForLastOperation>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_FLASHEx_Erase+0xd4>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_FLASHEx_Erase+0xd4>)
 80015c0:	f023 0302 	bic.w	r3, r3, #2
 80015c4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	601a      	str	r2, [r3, #0]
            break;
 80015d2:	e00c      	b.n	80015ee <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015da:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	02da      	lsls	r2, r3, #11
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3dc      	bcc.n	80015a8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <HAL_FLASHEx_Erase+0xd0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	761a      	strb	r2, [r3, #24]

  return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200004c8 	.word	0x200004c8
 8001604:	40022000 	.word	0x40022000

08001608 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <FLASH_MassErase+0x30>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <FLASH_MassErase+0x34>)
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	4a08      	ldr	r2, [pc, #32]	@ (800163c <FLASH_MassErase+0x34>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <FLASH_MassErase+0x34>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <FLASH_MassErase+0x34>)
 8001628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800162c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	200004c8 	.word	0x200004c8
 800163c:	40022000 	.word	0x40022000

08001640 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <FLASH_PageErase+0x38>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <FLASH_PageErase+0x3c>)
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <FLASH_PageErase+0x3c>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <FLASH_PageErase+0x3c>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <FLASH_PageErase+0x3c>)
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	4a05      	ldr	r2, [pc, #20]	@ (800167c <FLASH_PageErase+0x3c>)
 8001666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800166a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	200004c8 	.word	0x200004c8
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b08b      	sub	sp, #44	@ 0x2c
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001692:	e169      	b.n	8001968 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001694:	2201      	movs	r2, #1
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8158 	bne.w	8001962 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001920 <HAL_GPIO_Init+0x2a0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d05e      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016bc:	4a98      	ldr	r2, [pc, #608]	@ (8001920 <HAL_GPIO_Init+0x2a0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d875      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016c2:	4a98      	ldr	r2, [pc, #608]	@ (8001924 <HAL_GPIO_Init+0x2a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d058      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016c8:	4a96      	ldr	r2, [pc, #600]	@ (8001924 <HAL_GPIO_Init+0x2a4>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d86f      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016ce:	4a96      	ldr	r2, [pc, #600]	@ (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d052      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016d4:	4a94      	ldr	r2, [pc, #592]	@ (8001928 <HAL_GPIO_Init+0x2a8>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d869      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016da:	4a94      	ldr	r2, [pc, #592]	@ (800192c <HAL_GPIO_Init+0x2ac>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d04c      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016e0:	4a92      	ldr	r2, [pc, #584]	@ (800192c <HAL_GPIO_Init+0x2ac>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d863      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016e6:	4a92      	ldr	r2, [pc, #584]	@ (8001930 <HAL_GPIO_Init+0x2b0>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d046      	beq.n	800177a <HAL_GPIO_Init+0xfa>
 80016ec:	4a90      	ldr	r2, [pc, #576]	@ (8001930 <HAL_GPIO_Init+0x2b0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d85d      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016f2:	2b12      	cmp	r3, #18
 80016f4:	d82a      	bhi.n	800174c <HAL_GPIO_Init+0xcc>
 80016f6:	2b12      	cmp	r3, #18
 80016f8:	d859      	bhi.n	80017ae <HAL_GPIO_Init+0x12e>
 80016fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <HAL_GPIO_Init+0x80>)
 80016fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001700:	0800177b 	.word	0x0800177b
 8001704:	08001755 	.word	0x08001755
 8001708:	08001767 	.word	0x08001767
 800170c:	080017a9 	.word	0x080017a9
 8001710:	080017af 	.word	0x080017af
 8001714:	080017af 	.word	0x080017af
 8001718:	080017af 	.word	0x080017af
 800171c:	080017af 	.word	0x080017af
 8001720:	080017af 	.word	0x080017af
 8001724:	080017af 	.word	0x080017af
 8001728:	080017af 	.word	0x080017af
 800172c:	080017af 	.word	0x080017af
 8001730:	080017af 	.word	0x080017af
 8001734:	080017af 	.word	0x080017af
 8001738:	080017af 	.word	0x080017af
 800173c:	080017af 	.word	0x080017af
 8001740:	080017af 	.word	0x080017af
 8001744:	0800175d 	.word	0x0800175d
 8001748:	08001771 	.word	0x08001771
 800174c:	4a79      	ldr	r2, [pc, #484]	@ (8001934 <HAL_GPIO_Init+0x2b4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001752:	e02c      	b.n	80017ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e029      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	3304      	adds	r3, #4
 8001762:	623b      	str	r3, [r7, #32]
          break;
 8001764:	e024      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	3308      	adds	r3, #8
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e01f      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	330c      	adds	r3, #12
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e01a      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d102      	bne.n	8001788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001782:	2304      	movs	r3, #4
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e013      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	611a      	str	r2, [r3, #16]
          break;
 800179a:	e009      	b.n	80017b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800179c:	2308      	movs	r3, #8
 800179e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	615a      	str	r2, [r3, #20]
          break;
 80017a6:	e003      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a8:	2300      	movs	r3, #0
 80017aa:	623b      	str	r3, [r7, #32]
          break;
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x130>
          break;
 80017ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2bff      	cmp	r3, #255	@ 0xff
 80017b4:	d801      	bhi.n	80017ba <HAL_GPIO_Init+0x13a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	e001      	b.n	80017be <HAL_GPIO_Init+0x13e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	@ 0xff
 80017c4:	d802      	bhi.n	80017cc <HAL_GPIO_Init+0x14c>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	e002      	b.n	80017d2 <HAL_GPIO_Init+0x152>
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	3b08      	subs	r3, #8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	210f      	movs	r1, #15
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	6a39      	ldr	r1, [r7, #32]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80b1 	beq.w	8001962 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001800:	4b4d      	ldr	r3, [pc, #308]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a4c      	ldr	r2, [pc, #304]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b4a      	ldr	r3, [pc, #296]	@ (8001938 <HAL_GPIO_Init+0x2b8>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001818:	4a48      	ldr	r2, [pc, #288]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	089b      	lsrs	r3, r3, #2
 800181e:	3302      	adds	r3, #2
 8001820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a40      	ldr	r2, [pc, #256]	@ (8001940 <HAL_GPIO_Init+0x2c0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d013      	beq.n	800186c <HAL_GPIO_Init+0x1ec>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3f      	ldr	r2, [pc, #252]	@ (8001944 <HAL_GPIO_Init+0x2c4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d00d      	beq.n	8001868 <HAL_GPIO_Init+0x1e8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3e      	ldr	r2, [pc, #248]	@ (8001948 <HAL_GPIO_Init+0x2c8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0x1e4>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3d      	ldr	r2, [pc, #244]	@ (800194c <HAL_GPIO_Init+0x2cc>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_GPIO_Init+0x1e0>
 800185c:	2303      	movs	r3, #3
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001860:	2304      	movs	r3, #4
 8001862:	e004      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001864:	2302      	movs	r3, #2
 8001866:	e002      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_GPIO_Init+0x1ee>
 800186c:	2300      	movs	r3, #0
 800186e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001870:	f002 0203 	and.w	r2, r2, #3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4093      	lsls	r3, r2
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800187e:	492f      	ldr	r1, [pc, #188]	@ (800193c <HAL_GPIO_Init+0x2bc>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	492c      	ldr	r1, [pc, #176]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	4928      	ldr	r1, [pc, #160]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d006      	beq.n	80018ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018c0:	4b23      	ldr	r3, [pc, #140]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4922      	ldr	r1, [pc, #136]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	60cb      	str	r3, [r1, #12]
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	491e      	ldr	r1, [pc, #120]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018d8:	4013      	ands	r3, r2
 80018da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d006      	beq.n	80018f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	4918      	ldr	r1, [pc, #96]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
 80018f4:	e006      	b.n	8001904 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	4914      	ldr	r1, [pc, #80]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001900:	4013      	ands	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d021      	beq.n	8001954 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	490e      	ldr	r1, [pc, #56]	@ (8001950 <HAL_GPIO_Init+0x2d0>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e021      	b.n	8001962 <HAL_GPIO_Init+0x2e2>
 800191e:	bf00      	nop
 8001920:	10320000 	.word	0x10320000
 8001924:	10310000 	.word	0x10310000
 8001928:	10220000 	.word	0x10220000
 800192c:	10210000 	.word	0x10210000
 8001930:	10120000 	.word	0x10120000
 8001934:	10110000 	.word	0x10110000
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	40010800 	.word	0x40010800
 8001944:	40010c00 	.word	0x40010c00
 8001948:	40011000 	.word	0x40011000
 800194c:	40011400 	.word	0x40011400
 8001950:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_GPIO_Init+0x304>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	4909      	ldr	r1, [pc, #36]	@ (8001984 <HAL_GPIO_Init+0x304>)
 800195e:	4013      	ands	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	fa22 f303 	lsr.w	r3, r2, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	f47f ae8e 	bne.w	8001694 <HAL_GPIO_Init+0x14>
  }
}
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	372c      	adds	r7, #44	@ 0x2c
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80019be:	f7ff fa05 	bl	8000dcc <HAL_GetTick>
 80019c2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019c4:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a5f      	ldr	r2, [pc, #380]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f9fb 	bl	8000dcc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0ac      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80019e4:	4b58      	ldr	r3, [pc, #352]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80019f0:	4b55      	ldr	r3, [pc, #340]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80019f8:	4a53      	ldr	r2, [pc, #332]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 80019fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff f9e4 	bl	8000dcc <HAL_GetTick>
 8001a04:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001a06:	4b50      	ldr	r3, [pc, #320]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0e:	f7ff f9dd 	bl	8000dcc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e08c      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001a24:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ee      	bne.n	8001a0e <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001a30:	4b46      	ldr	r3, [pc, #280]	@ (8001b4c <HAL_RCC_DeInit+0x194>)
 8001a32:	4a47      	ldr	r2, [pc, #284]	@ (8001b50 <HAL_RCC_DeInit+0x198>)
 8001a34:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_DeInit+0x19c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f984 	bl	8000d48 <HAL_InitTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e079      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a4a:	f7ff f9bf 	bl	8000dcc <HAL_GetTick>
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a50:	4b3d      	ldr	r3, [pc, #244]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a3c      	ldr	r2, [pc, #240]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5e:	f7ff f9b5 	bl	8000dcc <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e066      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001a70:	4b35      	ldr	r3, [pc, #212]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1f0      	bne.n	8001a5e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001a7c:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001a82:	f7ff f9a3 	bl	8000dcc <HAL_GetTick>
 8001a86:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001a8e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001a92:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a96:	f7ff f999 	bl	8000dcc <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b64      	cmp	r3, #100	@ 0x64
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e04a      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001ab4:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001abe:	6013      	str	r3, [r2, #0]

#if defined(RCC_PLL2_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ac0:	f7ff f984 	bl	8000dcc <HAL_GetTick>
 8001ac4:	6078      	str	r0, [r7, #4]

  /* Clear PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001ac6:	4b20      	ldr	r3, [pc, #128]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1f      	ldr	r2, [pc, #124]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001acc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_DeInit+0x12e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ad4:	f7ff f97a 	bl	8000dcc <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_DeInit+0x12e>
    {
      return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02b      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_DeInit+0x11c>
  }
#endif /* RCC_PLL2_SUPPORT */

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001af2:	f7ff f96b 	bl	8000dcc <HAL_GetTick>
 8001af6:	6078      	str	r0, [r7, #4]

  /* Clear PLL3ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_DeInit+0x160>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b06:	f7ff f961 	bl	8000dcc <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b64      	cmp	r3, #100	@ 0x64
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_DeInit+0x160>
    {
      return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e012      	b.n	8001b3e <HAL_RCC_DeInit+0x186>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f0      	bne.n	8001b06 <HAL_RCC_DeInit+0x14e>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_CFGR2_PREDIV1)
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8001b24:	4b08      	ldr	r3, [pc, #32]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b34:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001b36:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <HAL_RCC_DeInit+0x190>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	007a1200 	.word	0x007a1200
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e304      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f000 8087 	beq.w	8001c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b78:	4b92      	ldr	r3, [pc, #584]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d00c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b84:	4b8f      	ldr	r3, [pc, #572]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d112      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
 8001b90:	4b8c      	ldr	r3, [pc, #560]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b9c:	d10b      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9e:	4b89      	ldr	r3, [pc, #548]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d06c      	beq.n	8001c84 <HAL_RCC_OscConfig+0x12c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d168      	bne.n	8001c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e2de      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bbe:	d106      	bne.n	8001bce <HAL_RCC_OscConfig+0x76>
 8001bc0:	4b80      	ldr	r3, [pc, #512]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a7f      	ldr	r2, [pc, #508]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e02e      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x98>
 8001bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7a      	ldr	r2, [pc, #488]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b78      	ldr	r3, [pc, #480]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a77      	ldr	r2, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e01d      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0xbc>
 8001bfa:	4b72      	ldr	r3, [pc, #456]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a71      	ldr	r2, [pc, #452]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b6f      	ldr	r3, [pc, #444]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e00b      	b.n	8001c2c <HAL_RCC_OscConfig+0xd4>
 8001c14:	4b6b      	ldr	r3, [pc, #428]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a67      	ldr	r2, [pc, #412]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c34:	f7ff f8ca 	bl	8000dcc <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f8c6 	bl	8000dcc <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e292      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe4>
 8001c5a:	e014      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f8b6 	bl	8000dcc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f8b2 	bl	8000dcc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	@ 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e27e      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x10c>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d063      	beq.n	8001d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c92:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c9e:	4b49      	ldr	r3, [pc, #292]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d11c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
 8001caa:	4b46      	ldr	r3, [pc, #280]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d116      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	4b43      	ldr	r3, [pc, #268]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e252      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4939      	ldr	r1, [pc, #228]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	e03a      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d020      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cec:	4b36      	ldr	r3, [pc, #216]	@ (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f86b 	bl	8000dcc <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f867 	bl	8000dcc <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e233      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d18:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4927      	ldr	r1, [pc, #156]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]
 8001d2c:	e015      	b.n	8001d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff f84a 	bl	8000dcc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff f846 	bl	8000dcc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e212      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03a      	beq.n	8001ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d019      	beq.n	8001da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d74:	f7ff f82a 	bl	8000dcc <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff f826 	bl	8000dcc <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1f2      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f000 fc02 	bl	80025a4 <RCC_Delay>
 8001da0:	e01c      	b.n	8001ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_RCC_OscConfig+0x274>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff f810 	bl	8000dcc <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dae:	e00f      	b.n	8001dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff f80c 	bl	8000dcc <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d908      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1d8      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	42420000 	.word	0x42420000
 8001dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1e9      	bne.n	8001db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80a6 	beq.w	8001f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dee:	4b94      	ldr	r3, [pc, #592]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10d      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	4b91      	ldr	r3, [pc, #580]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4a90      	ldr	r2, [pc, #576]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	61d3      	str	r3, [r2, #28]
 8001e06:	4b8e      	ldr	r3, [pc, #568]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e12:	2301      	movs	r3, #1
 8001e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e16:	4b8b      	ldr	r3, [pc, #556]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d118      	bne.n	8001e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e22:	4b88      	ldr	r3, [pc, #544]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a87      	ldr	r2, [pc, #540]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ffcd 	bl	8000dcc <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e36:	f7fe ffc9 	bl	8000dcc <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b64      	cmp	r3, #100	@ 0x64
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e195      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	4b7e      	ldr	r3, [pc, #504]	@ (8002044 <HAL_RCC_OscConfig+0x4ec>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f0      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d106      	bne.n	8001e6a <HAL_RCC_OscConfig+0x312>
 8001e5c:	4b78      	ldr	r3, [pc, #480]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a77      	ldr	r2, [pc, #476]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	e02d      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0x334>
 8001e72:	4b73      	ldr	r3, [pc, #460]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a72      	ldr	r2, [pc, #456]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e78:	f023 0301 	bic.w	r3, r3, #1
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	4b70      	ldr	r3, [pc, #448]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a6f      	ldr	r2, [pc, #444]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	f023 0304 	bic.w	r3, r3, #4
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	e01c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10c      	bne.n	8001eae <HAL_RCC_OscConfig+0x356>
 8001e94:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a69      	ldr	r2, [pc, #420]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	4b67      	ldr	r3, [pc, #412]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a66      	ldr	r2, [pc, #408]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e00b      	b.n	8001ec6 <HAL_RCC_OscConfig+0x36e>
 8001eae:	4b64      	ldr	r3, [pc, #400]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a63      	ldr	r2, [pc, #396]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6213      	str	r3, [r2, #32]
 8001eba:	4b61      	ldr	r3, [pc, #388]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a60      	ldr	r2, [pc, #384]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7fe ff7d 	bl	8000dcc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe ff79 	bl	8000dcc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e143      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b54      	ldr	r3, [pc, #336]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x37e>
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7fe ff67 	bl	8000dcc <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7fe ff63 	bl	8000dcc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e12d      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f18:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2a:	4b45      	ldr	r3, [pc, #276]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4a44      	ldr	r2, [pc, #272]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 808c 	beq.w	8002058 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001f40:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4c:	d10e      	bne.n	8001f6c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001f5a:	4b39      	ldr	r3, [pc, #228]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e103      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d14e      	bne.n	8002012 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d009      	beq.n	8001f94 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001f80:	4b2f      	ldr	r3, [pc, #188]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ef      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001f94:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <HAL_RCC_OscConfig+0x4f0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7fe ff17 	bl	8000dcc <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001fa2:	f7fe ff13 	bl	8000dcc <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b64      	cmp	r3, #100	@ 0x64
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0df      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001fb4:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f0      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	491c      	ldr	r1, [pc, #112]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4918      	ldr	r1, [pc, #96]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_RCC_OscConfig+0x4f0>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe feef 	bl	8000dcc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001ff2:	f7fe feeb 	bl	8000dcc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	@ 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0b7      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x49a>
 8002010:	e022      	b.n	8002058 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_RCC_OscConfig+0x4e8>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_RCC_OscConfig+0x4f0>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fed2 	bl	8000dcc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800202c:	f7fe fece 	bl	8000dcc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e09a      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
 8002048:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800204c:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8088 	beq.w	8002172 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002062:	4b46      	ldr	r3, [pc, #280]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d068      	beq.n	8002140 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d14d      	bne.n	8002112 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b42      	ldr	r3, [pc, #264]	@ (8002180 <HAL_RCC_OscConfig+0x628>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fea6 	bl	8000dcc <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fea2 	bl	8000dcc <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e06e      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020aa:	d10f      	bne.n	80020cc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80020ac:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4931      	ldr	r1, [pc, #196]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020ba:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020be:	f023 020f 	bic.w	r2, r3, #15
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	492d      	ldr	r1, [pc, #180]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020cc:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020dc:	430b      	orrs	r3, r1
 80020de:	4927      	ldr	r1, [pc, #156]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b26      	ldr	r3, [pc, #152]	@ (8002180 <HAL_RCC_OscConfig+0x628>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fe6f 	bl	8000dcc <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7fe fe6b 	bl	8000dcc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e037      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x59a>
 8002110:	e02f      	b.n	8002172 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_RCC_OscConfig+0x628>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7fe fe58 	bl	8000dcc <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7fe fe54 	bl	8000dcc <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e020      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c8>
 800213e:	e018      	b.n	8002172 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_OscConfig+0x624>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	42420060 	.word	0x42420060

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7fe fdaa 	bl	8000dcc <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fda6 	bl	8000dcc <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f859 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	@ (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe fd08 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	08003340 	.word	0x08003340
 8002350:	20000000 	.word	0x20000000
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08a      	sub	sp, #40	@ 0x28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800237e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002382:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002384:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_RCC_MCOConfig+0x68>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <HAL_RCC_MCOConfig+0x68>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6193      	str	r3, [r2, #24]
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_MCOConfig+0x68>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	4619      	mov	r1, r3
 80023a2:	4808      	ldr	r0, [pc, #32]	@ (80023c4 <HAL_RCC_MCOConfig+0x6c>)
 80023a4:	f7ff f96c 	bl	8001680 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_MCOConfig+0x68>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80023b0:	4903      	ldr	r1, [pc, #12]	@ (80023c0 <HAL_RCC_MCOConfig+0x68>)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	@ 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40010800 	.word	0x40010800

080023c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023cc:	b08e      	sub	sp, #56	@ 0x38
 80023ce:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023d4:	2300      	movs	r3, #0
 80023d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023d8:	2300      	movs	r3, #0
 80023da:	637b      	str	r3, [r7, #52]	@ 0x34
 80023dc:	2300      	movs	r3, #0
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023ec:	4b4e      	ldr	r3, [pc, #312]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d002      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d003      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x40>
 8002400:	e089      	b.n	8002516 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_GetSysClockFreq+0x164>)
 8002404:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002406:	e089      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	f003 020f 	and.w	r2, r3, #15
 8002410:	4b47      	ldr	r3, [pc, #284]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x168>)
 8002412:	5c9b      	ldrb	r3, [r3, r2]
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d072      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f003 020f 	and.w	r2, r3, #15
 8002428:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x16c>)
 800242a:	5c9b      	ldrb	r3, [r3, r2]
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800242e:	4b3e      	ldr	r3, [pc, #248]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d053      	beq.n	80024e2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800243a:	4b3b      	ldr	r3, [pc, #236]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	3301      	adds	r3, #1
 8002446:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002448:	4b37      	ldr	r3, [pc, #220]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x160>)
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3302      	adds	r3, #2
 8002454:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2200      	movs	r2, #0
 800245a:	469a      	mov	sl, r3
 800245c:	4693      	mov	fp, r2
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	2200      	movs	r2, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	617a      	str	r2, [r7, #20]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fb03 f20b 	mul.w	r2, r3, fp
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fb0a f303 	mul.w	r3, sl, r3
 8002472:	4413      	add	r3, r2
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	fbaa 0102 	umull	r0, r1, sl, r2
 800247a:	440b      	add	r3, r1
 800247c:	4619      	mov	r1, r3
 800247e:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_GetSysClockFreq+0x164>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a27      	ldr	r2, [pc, #156]	@ (800252c <HAL_RCC_GetSysClockFreq+0x164>)
 800248e:	fba0 4502 	umull	r4, r5, r0, r2
 8002492:	442b      	add	r3, r5
 8002494:	461d      	mov	r5, r3
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	2200      	movs	r2, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	60fa      	str	r2, [r7, #12]
 800249e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a0:	2200      	movs	r2, #0
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024b0:	4652      	mov	r2, sl
 80024b2:	fb02 f203 	mul.w	r2, r2, r3
 80024b6:	465b      	mov	r3, fp
 80024b8:	4684      	mov	ip, r0
 80024ba:	fb0c f303 	mul.w	r3, ip, r3
 80024be:	4413      	add	r3, r2
 80024c0:	4602      	mov	r2, r0
 80024c2:	4651      	mov	r1, sl
 80024c4:	fba2 8901 	umull	r8, r9, r2, r1
 80024c8:	444b      	add	r3, r9
 80024ca:	4699      	mov	r9, r3
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd fea6 	bl	8000224 <__aeabi_uldivmod>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4613      	mov	r3, r2
 80024de:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e0:	e007      	b.n	80024f2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	4a11      	ldr	r2, [pc, #68]	@ (800252c <HAL_RCC_GetSysClockFreq+0x164>)
 80024e6:	fb03 f202 	mul.w	r2, r3, r2
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80024f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x168>)
 80024f4:	7b5b      	ldrb	r3, [r3, #13]
 80024f6:	461a      	mov	r2, r3
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80024fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
 8002504:	e004      	b.n	8002510 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	4a0b      	ldr	r2, [pc, #44]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x170>)
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8002510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002512:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002514:	e002      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_RCC_GetSysClockFreq+0x174>)
 8002518:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800251a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800251e:	4618      	mov	r0, r3
 8002520:	3738      	adds	r7, #56	@ 0x38
 8002522:	46bd      	mov	sp, r7
 8002524:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	017d7840 	.word	0x017d7840
 8002530:	08003358 	.word	0x08003358
 8002534:	08003368 	.word	0x08003368
 8002538:	003d0900 	.word	0x003d0900
 800253c:	007a1200 	.word	0x007a1200

08002540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002544:	4b02      	ldr	r3, [pc, #8]	@ (8002550 <HAL_RCC_GetHCLKFreq+0x10>)
 8002546:	681b      	ldr	r3, [r3, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	20000000 	.word	0x20000000

08002554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002558:	f7ff fff2 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	0a1b      	lsrs	r3, r3, #8
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	4903      	ldr	r1, [pc, #12]	@ (8002578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40021000 	.word	0x40021000
 8002578:	08003350 	.word	0x08003350

0800257c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002580:	f7ff ffde 	bl	8002540 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0adb      	lsrs	r3, r3, #11
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	@ (80025a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08003350 	.word	0x08003350

080025a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ac:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <RCC_Delay+0x34>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <RCC_Delay+0x38>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a5b      	lsrs	r3, r3, #9
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c0:	bf00      	nop
  }
  while (Delay --);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	1e5a      	subs	r2, r3, #1
 80025c6:	60fa      	str	r2, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <RCC_Delay+0x1c>
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000000 	.word	0x20000000
 80025dc:	10624dd3 	.word	0x10624dd3

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e042      	b.n	8002678 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa3e 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fdc5 	bl	80031b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	d16d      	bne.n	800277c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Transmit+0x2c>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e066      	b.n	800277e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2221      	movs	r2, #33	@ 0x21
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026be:	f7fe fb85 	bl	8000dcc <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d8:	d108      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f4:	e02a      	b.n	800274c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 fb14 	bl	8002d2e <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e036      	b.n	800277e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e007      	b.n	800273e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1cf      	bne.n	80026f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	@ 0x40
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fae4 	bl	8002d2e <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e006      	b.n	800277e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	4613      	mov	r3, r2
 8002792:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b20      	cmp	r3, #32
 800279e:	d112      	bne.n	80027c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_UART_Receive_IT+0x26>
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e00b      	b.n	80027c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	461a      	mov	r2, r3
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fb24 	bl	8002e0a <UART_Start_Receive_IT>
 80027c2:	4603      	mov	r3, r0
 80027c4:	e000      	b.n	80027c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80027c6:	2302      	movs	r3, #2
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0ba      	sub	sp, #232	@ 0xe8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800280e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_UART_IRQHandler+0x66>
 8002822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc01 	bl	8003036 <UART_Receive_IT>
      return;
 8002834:	e25b      	b.n	8002cee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80de 	beq.w	80029fc <HAL_UART_IRQHandler+0x22c>
 8002840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d106      	bne.n	800285a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002850:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80d1 	beq.w	80029fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_UART_IRQHandler+0xae>
 8002866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800286a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800287e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_UART_IRQHandler+0xd2>
 800288a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d005      	beq.n	80028a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f043 0202 	orr.w	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_UART_IRQHandler+0xf6>
 80028ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80028c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d011      	beq.n	80028f6 <HAL_UART_IRQHandler+0x126>
 80028d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d6:	f003 0320 	and.w	r3, r3, #32
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80028de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f043 0208 	orr.w	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 81f2 	beq.w	8002ce4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_UART_IRQHandler+0x14e>
 800290c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fb8c 	bl	8003036 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <HAL_UART_IRQHandler+0x17a>
 8002942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d04f      	beq.n	80029ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fa96 	bl	8002e7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d041      	beq.n	80029e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3314      	adds	r3, #20
 8002964:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800297c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800298a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800298e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800299a:	e841 2300 	strex	r3, r2, [r1]
 800299e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80029a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1d9      	bne.n	800295e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d013      	beq.n	80029da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb0 <HAL_UART_IRQHandler+0x3e0>)
 80029b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fb56 	bl	8001070 <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e00e      	b.n	80029f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f993 	bl	8002d06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	e00a      	b.n	80029f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f98f 	bl	8002d06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e8:	e006      	b.n	80029f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f98b 	bl	8002d06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80029f6:	e175      	b.n	8002ce4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f8:	bf00      	nop
    return;
 80029fa:	e173      	b.n	8002ce4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f040 814f 	bne.w	8002ca4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8148 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8141 	beq.w	8002ca4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80b6 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8145 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a66:	429a      	cmp	r2, r3
 8002a68:	f080 813e 	bcs.w	8002ce8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002a72:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	f000 8088 	beq.w	8002b90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	330c      	adds	r3, #12
 8002a86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a8e:	e853 3f00 	ldrex	r3, [r3]
 8002a92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002a96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	330c      	adds	r3, #12
 8002aa8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002aac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ab0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002ab8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002abc:	e841 2300 	strex	r3, r2, [r1]
 8002ac0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ac4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1d9      	bne.n	8002a80 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3314      	adds	r3, #20
 8002ad2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ad6:	e853 3f00 	ldrex	r3, [r3]
 8002ada:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002adc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	3314      	adds	r3, #20
 8002aec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002af0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002af4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002af8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002afc:	e841 2300 	strex	r3, r2, [r1]
 8002b00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e1      	bne.n	8002acc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3314      	adds	r3, #20
 8002b0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3314      	adds	r3, #20
 8002b28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002b2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002b32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e3      	bne.n	8002b08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b60:	f023 0310 	bic.w	r3, r3, #16
 8002b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	330c      	adds	r3, #12
 8002b6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002b72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002b78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002b80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1e3      	bne.n	8002b4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe fa35 	bl	8000ffa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8b6 	bl	8002d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bac:	e09c      	b.n	8002ce8 <HAL_UART_IRQHandler+0x518>
 8002bae:	bf00      	nop
 8002bb0:	08002f41 	.word	0x08002f41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 808e 	beq.w	8002cec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8089 	beq.w	8002cec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002bf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002bfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c06:	e841 2300 	strex	r3, r2, [r1]
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1e3      	bne.n	8002bda <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	623b      	str	r3, [r7, #32]
   return(result);
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002c36:	633a      	str	r2, [r7, #48]	@ 0x30
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c3e:	e841 2300 	strex	r3, r2, [r1]
 8002c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1e3      	bne.n	8002c12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	330c      	adds	r3, #12
 8002c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	e853 3f00 	ldrex	r3, [r3]
 8002c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002c7c:	61fa      	str	r2, [r7, #28]
 8002c7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	617b      	str	r3, [r7, #20]
   return(result);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e3      	bne.n	8002c58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f83b 	bl	8002d18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ca2:	e023      	b.n	8002cec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x4f4>
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f953 	bl	8002f68 <UART_Transmit_IT>
    return;
 8002cc2:	e014      	b.n	8002cee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00e      	beq.n	8002cee <HAL_UART_IRQHandler+0x51e>
 8002cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f992 	bl	8003006 <UART_EndTransmit_IT>
    return;
 8002ce2:	e004      	b.n	8002cee <HAL_UART_IRQHandler+0x51e>
    return;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <HAL_UART_IRQHandler+0x51e>
      return;
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_UART_IRQHandler+0x51e>
      return;
 8002cec:	bf00      	nop
  }
}
 8002cee:	37e8      	adds	r7, #232	@ 0xe8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b090      	sub	sp, #64	@ 0x40
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3e:	e050      	b.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d46:	d04c      	beq.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x30>
 8002d4e:	f7fe f83d 	bl	8000dcc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d241      	bcs.n	8002de2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d7e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	e853 3f00 	ldrex	r3, [r3]
 8002da0:	613b      	str	r3, [r7, #16]
   return(result);
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002db2:	623a      	str	r2, [r7, #32]
 8002db4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db6:	69f9      	ldr	r1, [r7, #28]
 8002db8:	6a3a      	ldr	r2, [r7, #32]
 8002dba:	e841 2300 	strex	r3, r2, [r1]
 8002dbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1e5      	bne.n	8002d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e00f      	b.n	8002e02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d09f      	beq.n	8002d40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3740      	adds	r7, #64	@ 0x40
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b085      	sub	sp, #20
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	4613      	mov	r3, r2
 8002e16:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2222      	movs	r2, #34	@ 0x22
 8002e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e4e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0220 	orr.w	r2, r2, #32
 8002e6e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b095      	sub	sp, #84	@ 0x54
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ea4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3314      	adds	r3, #20
 8002ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee0:	e841 2300 	strex	r3, r2, [r1]
 8002ee4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1e5      	bne.n	8002eb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d119      	bne.n	8002f28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f023 0310 	bic.w	r3, r3, #16
 8002f0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	330c      	adds	r3, #12
 8002f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f14:	61ba      	str	r2, [r7, #24]
 8002f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	6979      	ldr	r1, [r7, #20]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e5      	bne.n	8002ef4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f36:	bf00      	nop
 8002f38:	3754      	adds	r7, #84	@ 0x54
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fed3 	bl	8002d06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b21      	cmp	r3, #33	@ 0x21
 8002f7a:	d13e      	bne.n	8002ffa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f84:	d114      	bne.n	8002fb0 <UART_Transmit_IT+0x48>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d110      	bne.n	8002fb0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	1c9a      	adds	r2, r3, #2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	621a      	str	r2, [r3, #32]
 8002fae:	e008      	b.n	8002fc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	1c59      	adds	r1, r3, #1
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6211      	str	r1, [r2, #32]
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fe4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ff4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800301c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff fe64 	bl	8002cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b08c      	sub	sp, #48	@ 0x30
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b22      	cmp	r3, #34	@ 0x22
 8003048:	f040 80ae 	bne.w	80031a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003054:	d117      	bne.n	8003086 <UART_Receive_IT+0x50>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d113      	bne.n	8003086 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	b29b      	uxth	r3, r3
 8003070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003074:	b29a      	uxth	r2, r3
 8003076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003078:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	1c9a      	adds	r2, r3, #2
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	@ 0x28
 8003084:	e026      	b.n	80030d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003098:	d007      	beq.n	80030aa <UART_Receive_IT+0x74>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <UART_Receive_IT+0x82>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e008      	b.n	80030ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b01      	subs	r3, #1
 80030dc:	b29b      	uxth	r3, r3
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4619      	mov	r1, r3
 80030e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d15d      	bne.n	80031a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0220 	bic.w	r2, r2, #32
 80030f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003106:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695a      	ldr	r2, [r3, #20]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	2b01      	cmp	r3, #1
 800312c:	d135      	bne.n	800319a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	330c      	adds	r3, #12
 800313a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	e853 3f00 	ldrex	r3, [r3]
 8003142:	613b      	str	r3, [r7, #16]
   return(result);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f023 0310 	bic.w	r3, r3, #16
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003154:	623a      	str	r2, [r7, #32]
 8003156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003158:	69f9      	ldr	r1, [r7, #28]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	e841 2300 	strex	r3, r2, [r1]
 8003160:	61bb      	str	r3, [r7, #24]
   return(result);
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e5      	bne.n	8003134 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b10      	cmp	r3, #16
 8003174:	d10a      	bne.n	800318c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003190:	4619      	mov	r1, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff fdc0 	bl	8002d18 <HAL_UARTEx_RxEventCallback>
 8003198:	e002      	b.n	80031a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd f9b8 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e002      	b.n	80031aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3730      	adds	r7, #48	@ 0x30
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031ee:	f023 030c 	bic.w	r3, r3, #12
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <UART_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800321c:	f7ff f9ae 	bl	800257c <HAL_RCC_GetPCLK2Freq>
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	e002      	b.n	800322a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7ff f996 	bl	8002554 <HAL_RCC_GetPCLK1Freq>
 8003228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	441a      	add	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a22      	ldr	r2, [pc, #136]	@ (80032cc <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	0119      	lsls	r1, r3, #4
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003260:	4b1a      	ldr	r3, [pc, #104]	@ (80032cc <UART_SetConfig+0x118>)
 8003262:	fba3 0302 	umull	r0, r3, r3, r2
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2064      	movs	r0, #100	@ 0x64
 800326a:	fb00 f303 	mul.w	r3, r0, r3
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	3332      	adds	r3, #50	@ 0x32
 8003274:	4a15      	ldr	r2, [pc, #84]	@ (80032cc <UART_SetConfig+0x118>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003280:	4419      	add	r1, r3
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	009a      	lsls	r2, r3, #2
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	fbb2 f2f3 	udiv	r2, r2, r3
 8003298:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <UART_SetConfig+0x118>)
 800329a:	fba3 0302 	umull	r0, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2064      	movs	r0, #100	@ 0x64
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	3332      	adds	r3, #50	@ 0x32
 80032ac:	4a07      	ldr	r2, [pc, #28]	@ (80032cc <UART_SetConfig+0x118>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	f003 020f 	and.w	r2, r3, #15
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	440a      	add	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40013800 	.word	0x40013800
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <memset>:
 80032d0:	4603      	mov	r3, r0
 80032d2:	4402      	add	r2, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	2600      	movs	r6, #0
 80032e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003318 <__libc_init_array+0x38>)
 80032e6:	4c0d      	ldr	r4, [pc, #52]	@ (800331c <__libc_init_array+0x3c>)
 80032e8:	1b64      	subs	r4, r4, r5
 80032ea:	10a4      	asrs	r4, r4, #2
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	f000 f81a 	bl	8003328 <_init>
 80032f4:	2600      	movs	r6, #0
 80032f6:	4d0a      	ldr	r5, [pc, #40]	@ (8003320 <__libc_init_array+0x40>)
 80032f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003324 <__libc_init_array+0x44>)
 80032fa:	1b64      	subs	r4, r4, r5
 80032fc:	10a4      	asrs	r4, r4, #2
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003380 	.word	0x08003380
 800331c:	08003380 	.word	0x08003380
 8003320:	08003380 	.word	0x08003380
 8003324:	08003384 	.word	0x08003384

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
