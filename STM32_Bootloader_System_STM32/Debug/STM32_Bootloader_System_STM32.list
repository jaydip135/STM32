
STM32_Bootloader_System_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d48  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00006364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0000636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005370  08005370  00006370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005374  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  080053dc  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080053dc  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d02  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af5  00000000  00000000  0000fd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00011888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f3  00000000  00000000  00012060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001feaf  00000000  00000000  00012653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7e6  00000000  00000000  00032502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4581  00000000  00000000  0003cce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1269  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002710  00000000  00000000  000f12ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000f39bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08004f14 	.word	0x08004f14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08004f14 	.word	0x08004f14

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b968 	b.w	800050c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	460c      	mov	r4, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14e      	bne.n	80002fe <__udivmoddi4+0xaa>
 8000260:	4694      	mov	ip, r2
 8000262:	458c      	cmp	ip, r1
 8000264:	4686      	mov	lr, r0
 8000266:	fab2 f282 	clz	r2, r2
 800026a:	d962      	bls.n	8000332 <__udivmoddi4+0xde>
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0320 	rsb	r3, r2, #32
 8000272:	4091      	lsls	r1, r2
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	fa0c fc02 	lsl.w	ip, ip, r2
 800027c:	4319      	orrs	r1, r3
 800027e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000282:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	fa1f f68c 	uxth.w	r6, ip
 8000292:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb04 f106 	mul.w	r1, r4, r6
 800029e:	4299      	cmp	r1, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x64>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002aa:	f080 8110 	bcs.w	80004ce <__udivmoddi4+0x27a>
 80002ae:	4299      	cmp	r1, r3
 80002b0:	f240 810d 	bls.w	80004ce <__udivmoddi4+0x27a>
 80002b4:	3c02      	subs	r4, #2
 80002b6:	4463      	add	r3, ip
 80002b8:	1a59      	subs	r1, r3, r1
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ce:	429e      	cmp	r6, r3
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x94>
 80002d2:	eb1c 0303 	adds.w	r3, ip, r3
 80002d6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002da:	f080 80fa 	bcs.w	80004d2 <__udivmoddi4+0x27e>
 80002de:	429e      	cmp	r6, r3
 80002e0:	f240 80f7 	bls.w	80004d2 <__udivmoddi4+0x27e>
 80002e4:	4463      	add	r3, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	2100      	movs	r1, #0
 80002ea:	1b9b      	subs	r3, r3, r6
 80002ec:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa6>
 80002f2:	40d3      	lsrs	r3, r2
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xba>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb4>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa6>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x150>
 8000316:	42a3      	cmp	r3, r4
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xcc>
 800031a:	4290      	cmp	r0, r2
 800031c:	f0c0 80ee 	bcc.w	80004fc <__udivmoddi4+0x2a8>
 8000320:	1a86      	subs	r6, r0, r2
 8000322:	eb64 0303 	sbc.w	r3, r4, r3
 8000326:	2001      	movs	r0, #1
 8000328:	2d00      	cmp	r5, #0
 800032a:	d0e6      	beq.n	80002fa <__udivmoddi4+0xa6>
 800032c:	e9c5 6300 	strd	r6, r3, [r5]
 8000330:	e7e3      	b.n	80002fa <__udivmoddi4+0xa6>
 8000332:	2a00      	cmp	r2, #0
 8000334:	f040 808f 	bne.w	8000456 <__udivmoddi4+0x202>
 8000338:	eba1 040c 	sub.w	r4, r1, ip
 800033c:	2101      	movs	r1, #1
 800033e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fbb4 f6f8 	udiv	r6, r4, r8
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	4298      	cmp	r0, r3
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x11c>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 34ff 	add.w	r4, r6, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x11a>
 8000368:	4298      	cmp	r0, r3
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2b0>
 800036e:	4626      	mov	r6, r4
 8000370:	1a1c      	subs	r4, r3, r0
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000386:	429f      	cmp	r7, r3
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x148>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x146>
 8000394:	429f      	cmp	r7, r3
 8000396:	f200 80ae 	bhi.w	80004f6 <__udivmoddi4+0x2a2>
 800039a:	4620      	mov	r0, r4
 800039c:	1bdb      	subs	r3, r3, r7
 800039e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x9c>
 80003a4:	f1c1 0720 	rsb	r7, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa24 f607 	lsr.w	r6, r4, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fbb6 f8f9 	udiv	r8, r6, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 6618 	mls	r6, r9, r8, r6
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	408c      	lsls	r4, r1
 80003cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	431c      	orrs	r4, r3
 80003d6:	0c23      	lsrs	r3, r4, #16
 80003d8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003dc:	4298      	cmp	r0, r3
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d90a      	bls.n	80003fa <__udivmoddi4+0x1a6>
 80003e4:	eb1c 0303 	adds.w	r3, ip, r3
 80003e8:	f108 36ff 	add.w	r6, r8, #4294967295
 80003ec:	f080 8081 	bcs.w	80004f2 <__udivmoddi4+0x29e>
 80003f0:	4298      	cmp	r0, r3
 80003f2:	d97e      	bls.n	80004f2 <__udivmoddi4+0x29e>
 80003f4:	f1a8 0802 	sub.w	r8, r8, #2
 80003f8:	4463      	add	r3, ip
 80003fa:	1a1e      	subs	r6, r3, r0
 80003fc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000400:	fb09 6613 	mls	r6, r9, r3, r6
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	b2a4      	uxth	r4, r4
 800040a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800040e:	45a6      	cmp	lr, r4
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x1d0>
 8000412:	eb1c 0404 	adds.w	r4, ip, r4
 8000416:	f103 30ff 	add.w	r0, r3, #4294967295
 800041a:	d266      	bcs.n	80004ea <__udivmoddi4+0x296>
 800041c:	45a6      	cmp	lr, r4
 800041e:	d964      	bls.n	80004ea <__udivmoddi4+0x296>
 8000420:	3b02      	subs	r3, #2
 8000422:	4464      	add	r4, ip
 8000424:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000428:	fba0 8302 	umull	r8, r3, r0, r2
 800042c:	eba4 040e 	sub.w	r4, r4, lr
 8000430:	429c      	cmp	r4, r3
 8000432:	46c6      	mov	lr, r8
 8000434:	461e      	mov	r6, r3
 8000436:	d350      	bcc.n	80004da <__udivmoddi4+0x286>
 8000438:	d04d      	beq.n	80004d6 <__udivmoddi4+0x282>
 800043a:	b155      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043c:	ebba 030e 	subs.w	r3, sl, lr
 8000440:	eb64 0406 	sbc.w	r4, r4, r6
 8000444:	fa04 f707 	lsl.w	r7, r4, r7
 8000448:	40cb      	lsrs	r3, r1
 800044a:	431f      	orrs	r7, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 7400 	strd	r7, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e751      	b.n	80002fa <__udivmoddi4+0xa6>
 8000456:	fa0c fc02 	lsl.w	ip, ip, r2
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d9      	lsrs	r1, r3
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa20 f303 	lsr.w	r3, r0, r3
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000470:	fb08 1110 	mls	r1, r8, r0, r1
 8000474:	4094      	lsls	r4, r2
 8000476:	431c      	orrs	r4, r3
 8000478:	fa1f f78c 	uxth.w	r7, ip
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x248>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29a>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29a>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a2:	fb08 3311 	mls	r3, r8, r1, r3
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x272>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x292>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x292>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f2      	b.n	80002b8 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e708      	b.n	80002e8 <__udivmoddi4+0x94>
 80004d6:	45c2      	cmp	sl, r8
 80004d8:	d2af      	bcs.n	800043a <__udivmoddi4+0x1e6>
 80004da:	ebb8 0e02 	subs.w	lr, r8, r2
 80004de:	eb63 060c 	sbc.w	r6, r3, ip
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a9      	b.n	800043a <__udivmoddi4+0x1e6>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x272>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e79a      	b.n	8000424 <__udivmoddi4+0x1d0>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x248>
 80004f2:	46b0      	mov	r8, r6
 80004f4:	e781      	b.n	80003fa <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74f      	b.n	800039c <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e711      	b.n	8000328 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <stm32_enter_boot_mode>:
 * 	   			using the selected serial interface as the interface.
 * @param huart UART handle.
 * @retval 		stm32_err_t
 */
stm32_err_t stm32_enter_boot_mode(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 8000518:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <stm32_enter_boot_mode+0x50>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6013      	str	r3, [r2, #0]

	/* Print debug message */
	printf("Enter in Boot mode: begin\r\n");
 800051e:	4811      	ldr	r0, [pc, #68]	@ (8000564 <stm32_enter_boot_mode+0x54>)
 8000520:	f003 ff04 	bl	800432c <puts>

	/* Set the MCU in Boot Mode */

	/* Set NRST Control pin LOW to Reset Target */
	stm32_nrst_low();
 8000524:	2200      	movs	r2, #0
 8000526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052a:	480f      	ldr	r0, [pc, #60]	@ (8000568 <stm32_enter_boot_mode+0x58>)
 800052c:	f001 fff9 	bl	8002522 <HAL_GPIO_WritePin>

	/* Set BOOT Control Pin High to initialize Target in BOOT Mode */
	stm32_boot_high();
 8000530:	f000 ff7a 	bl	8001428 <stm32_boot_high>

	/* 20ms Delay */
	stm32_delay(20);
 8000534:	2014      	movs	r0, #20
 8000536:	f001 fbd9 	bl	8001cec <HAL_Delay>

	/* Set NRST Control pin HIGH to wake up Target */
	stm32_nrst_high();
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000540:	4809      	ldr	r0, [pc, #36]	@ (8000568 <stm32_enter_boot_mode+0x58>)
 8000542:	f001 ffee 	bl	8002522 <HAL_GPIO_WritePin>

	/* 100ms Delay */
	stm32_delay(100);
 8000546:	2064      	movs	r0, #100	@ 0x64
 8000548:	f001 fbd0 	bl	8001cec <HAL_Delay>

	/* Send Bootloader entry code sequence 0x7F */
	/* Returns Status returned from stm32_send_init_seq Function */
	return stm32_send_init_seq(huart_handle);
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <stm32_enter_boot_mode+0x50>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fd51 	bl	8000ff8 <stm32_send_init_seq>
 8000556:	4603      	mov	r3, r0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000084 	.word	0x20000084
 8000564:	08004f2c 	.word	0x08004f2c
 8000568:	40011000 	.word	0x40011000

0800056c <stm32_init>:
 * @param huart  UART handle.
 * @param stm    stm32_cmd.
 * @retval 	     stm32_err_t
 */
stm32_err_t stm32_init(UART_HandleTypeDef *huart,stm32_cmd *stm)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b0c6      	sub	sp, #280	@ 0x118
 8000570:	af00      	add	r7, sp, #0
 8000572:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000576:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800057a:	6018      	str	r0, [r3, #0]
 800057c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000580:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000584:	6019      	str	r1, [r3, #0]
	/* Local Variables */
	uint8_t len, val, buf[257];
	int i, new_cmds;

	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 8000586:	4ad6      	ldr	r2, [pc, #856]	@ (80008e0 <stm32_init+0x374>)
 8000588:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800058c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6013      	str	r3, [r2, #0]

	/* Initialize the STM32 Target in boot mode */
	stm32_enter_boot_mode(huart_handle);
 8000594:	4bd2      	ldr	r3, [pc, #840]	@ (80008e0 <stm32_init+0x374>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffb9 	bl	8000510 <stm32_enter_boot_mode>

	/* Number of bytes in the reply */
	len = STM32_CMD_GET_LENGTH;
 800059e:	2311      	movs	r3, #17
 80005a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

	/* Get Command Function to get the Target Bootloader Version and its Supported Commands   */
	/* Check returned Status: In case of Status different than "OK", returns Status "Unknown" */
	if (stm32_guess_len_cmd(huart_handle, GET_CMD_COMMAND, buf, len) != STM32_ERR_OK)
 80005a4:	4bce      	ldr	r3, [pc, #824]	@ (80008e0 <stm32_init+0x374>)
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80005ac:	f107 020c 	add.w	r2, r7, #12
 80005b0:	2100      	movs	r1, #0
 80005b2:	f000 fa89 	bl	8000ac8 <stm32_guess_len_cmd>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <stm32_init+0x54>
		return STM32_ERR_UNKNOWN;
 80005bc:	2301      	movs	r3, #1
 80005be:	e271      	b.n	8000aa4 <stm32_init+0x538>

	/* Registers Byte 2: Number of bytes received + 1 */
	len = buf[0] + 1;
 80005c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
	/* Registers Byte 3: Bootloader Version received */
	stm->bl_version = buf[1];
 80005d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80005d8:	785a      	ldrb	r2, [r3, #1]
 80005da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005de:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	745a      	strb	r2, [r3, #17]

	/* Local variable */
	new_cmds = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	/* Loop through the data received starting from buf[2] */
	for (i = 1; i < len; i++) {
 80005ec:	2301      	movs	r3, #1
 80005ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80005f2:	e15b      	b.n	80008ac <stm32_init+0x340>

		val = buf[i + 1];
 80005f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80005f8:	3301      	adds	r3, #1
 80005fa:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80005fe:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000602:	5cd3      	ldrb	r3, [r2, r3]
 8000604:	f887 310e 	strb.w	r3, [r7, #270]	@ 0x10e

		switch (val) {
 8000608:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800060c:	2ba1      	cmp	r3, #161	@ 0xa1
 800060e:	f000 812b 	beq.w	8000868 <stm32_init+0x2fc>
 8000612:	2ba1      	cmp	r3, #161	@ 0xa1
 8000614:	f300 8131 	bgt.w	800087a <stm32_init+0x30e>
 8000618:	2b92      	cmp	r3, #146	@ 0x92
 800061a:	f000 811c 	beq.w	8000856 <stm32_init+0x2ea>
 800061e:	2b92      	cmp	r3, #146	@ 0x92
 8000620:	f300 812b 	bgt.w	800087a <stm32_init+0x30e>
 8000624:	2b82      	cmp	r3, #130	@ 0x82
 8000626:	f000 810d 	beq.w	8000844 <stm32_init+0x2d8>
 800062a:	2b82      	cmp	r3, #130	@ 0x82
 800062c:	f300 8125 	bgt.w	800087a <stm32_init+0x30e>
 8000630:	2b73      	cmp	r3, #115	@ 0x73
 8000632:	f000 80fe 	beq.w	8000832 <stm32_init+0x2c6>
 8000636:	2b73      	cmp	r3, #115	@ 0x73
 8000638:	f300 811f 	bgt.w	800087a <stm32_init+0x30e>
 800063c:	2b63      	cmp	r3, #99	@ 0x63
 800063e:	f300 811c 	bgt.w	800087a <stm32_init+0x30e>
 8000642:	2b43      	cmp	r3, #67	@ 0x43
 8000644:	da05      	bge.n	8000652 <stm32_init+0xe6>
 8000646:	2b21      	cmp	r3, #33	@ 0x21
 8000648:	f300 8096 	bgt.w	8000778 <stm32_init+0x20c>
 800064c:	2b00      	cmp	r3, #0
 800064e:	da49      	bge.n	80006e4 <stm32_init+0x178>
 8000650:	e113      	b.n	800087a <stm32_init+0x30e>
 8000652:	3b43      	subs	r3, #67	@ 0x43
 8000654:	2b20      	cmp	r3, #32
 8000656:	f200 8110 	bhi.w	800087a <stm32_init+0x30e>
 800065a:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <stm32_init+0xf4>)
 800065c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000660:	080007eb 	.word	0x080007eb
 8000664:	080007eb 	.word	0x080007eb
 8000668:	0800087b 	.word	0x0800087b
 800066c:	0800087b 	.word	0x0800087b
 8000670:	0800087b 	.word	0x0800087b
 8000674:	0800087b 	.word	0x0800087b
 8000678:	0800087b 	.word	0x0800087b
 800067c:	0800087b 	.word	0x0800087b
 8000680:	0800087b 	.word	0x0800087b
 8000684:	0800087b 	.word	0x0800087b
 8000688:	0800087b 	.word	0x0800087b
 800068c:	0800087b 	.word	0x0800087b
 8000690:	0800087b 	.word	0x0800087b
 8000694:	080007fd 	.word	0x080007fd
 8000698:	0800080f 	.word	0x0800080f
 800069c:	0800087b 	.word	0x0800087b
 80006a0:	0800087b 	.word	0x0800087b
 80006a4:	0800087b 	.word	0x0800087b
 80006a8:	0800087b 	.word	0x0800087b
 80006ac:	0800087b 	.word	0x0800087b
 80006b0:	0800087b 	.word	0x0800087b
 80006b4:	0800087b 	.word	0x0800087b
 80006b8:	0800087b 	.word	0x0800087b
 80006bc:	0800087b 	.word	0x0800087b
 80006c0:	0800087b 	.word	0x0800087b
 80006c4:	0800087b 	.word	0x0800087b
 80006c8:	0800087b 	.word	0x0800087b
 80006cc:	0800087b 	.word	0x0800087b
 80006d0:	0800087b 	.word	0x0800087b
 80006d4:	0800087b 	.word	0x0800087b
 80006d8:	0800087b 	.word	0x0800087b
 80006dc:	0800087b 	.word	0x0800087b
 80006e0:	08000821 	.word	0x08000821
 80006e4:	2b21      	cmp	r3, #33	@ 0x21
 80006e6:	f200 80c8 	bhi.w	800087a <stm32_init+0x30e>
 80006ea:	a201      	add	r2, pc, #4	@ (adr r2, 80006f0 <stm32_init+0x184>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	0800077f 	.word	0x0800077f
 80006f4:	08000791 	.word	0x08000791
 80006f8:	080007a3 	.word	0x080007a3
 80006fc:	0800087b 	.word	0x0800087b
 8000700:	0800087b 	.word	0x0800087b
 8000704:	0800087b 	.word	0x0800087b
 8000708:	0800087b 	.word	0x0800087b
 800070c:	0800087b 	.word	0x0800087b
 8000710:	0800087b 	.word	0x0800087b
 8000714:	0800087b 	.word	0x0800087b
 8000718:	0800087b 	.word	0x0800087b
 800071c:	0800087b 	.word	0x0800087b
 8000720:	0800087b 	.word	0x0800087b
 8000724:	0800087b 	.word	0x0800087b
 8000728:	0800087b 	.word	0x0800087b
 800072c:	0800087b 	.word	0x0800087b
 8000730:	0800087b 	.word	0x0800087b
 8000734:	080007b5 	.word	0x080007b5
 8000738:	0800087b 	.word	0x0800087b
 800073c:	0800087b 	.word	0x0800087b
 8000740:	0800087b 	.word	0x0800087b
 8000744:	0800087b 	.word	0x0800087b
 8000748:	0800087b 	.word	0x0800087b
 800074c:	0800087b 	.word	0x0800087b
 8000750:	0800087b 	.word	0x0800087b
 8000754:	0800087b 	.word	0x0800087b
 8000758:	0800087b 	.word	0x0800087b
 800075c:	0800087b 	.word	0x0800087b
 8000760:	0800087b 	.word	0x0800087b
 8000764:	0800087b 	.word	0x0800087b
 8000768:	0800087b 	.word	0x0800087b
 800076c:	0800087b 	.word	0x0800087b
 8000770:	0800087b 	.word	0x0800087b
 8000774:	080007c7 	.word	0x080007c7
 8000778:	2b31      	cmp	r3, #49	@ 0x31
 800077a:	d02d      	beq.n	80007d8 <stm32_init+0x26c>
 800077c:	e07d      	b.n	800087a <stm32_init+0x30e>
		case GET_CMD_COMMAND:
			stm->get = val; break;
 800077e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000782:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e088      	b.n	80008a2 <stm32_init+0x336>

		case GET_VER_COMMAND:
			stm->gvr = val; break;
 8000790:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000794:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800079e:	705a      	strb	r2, [r3, #1]
 80007a0:	e07f      	b.n	80008a2 <stm32_init+0x336>

		case GET_ID_COMMAND:
			stm->gid = val; break;
 80007a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80007b0:	709a      	strb	r2, [r3, #2]
 80007b2:	e076      	b.n	80008a2 <stm32_init+0x336>

		case RMEM_COMMAND:
			stm->rm = val; break;
 80007b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80007c2:	70da      	strb	r2, [r3, #3]
 80007c4:	e06d      	b.n	80008a2 <stm32_init+0x336>

		case GO_COMMAND:
			stm->go = val; break;
 80007c6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80007d4:	711a      	strb	r2, [r3, #4]
 80007d6:	e064      	b.n	80008a2 <stm32_init+0x336>

		case WMEM_COMMAND:
			stm->wm = val;	break;
 80007d8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007dc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80007e6:	715a      	strb	r2, [r3, #5]
 80007e8:	e05b      	b.n	80008a2 <stm32_init+0x336>

		case EMEM_COMMAND:
		case EX_EMEM_COMMAND:
			stm->er = val; break;
 80007ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80007ee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 80007f8:	719a      	strb	r2, [r3, #6]
 80007fa:	e052      	b.n	80008a2 <stm32_init+0x336>

		case SPECIAL_CMD_COMMAND:
			stm->sp = val; break;
 80007fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000800:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800080a:	71da      	strb	r2, [r3, #7]
 800080c:	e049      	b.n	80008a2 <stm32_init+0x336>

		case EX_SPECIAL_CMD_COMMAND:
			stm->xsp = val; break;
 800080e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000812:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800081c:	721a      	strb	r2, [r3, #8]
 800081e:	e040      	b.n	80008a2 <stm32_init+0x336>

		case WP_COMMAND:
			stm->wp = val; break;
 8000820:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000824:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 800082e:	725a      	strb	r2, [r3, #9]
 8000830:	e037      	b.n	80008a2 <stm32_init+0x336>

		case WU_COMMAND:
			stm->uw = val;	break;
 8000832:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000836:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000840:	729a      	strb	r2, [r3, #10]
 8000842:	e02e      	b.n	80008a2 <stm32_init+0x336>

		case RP_COMMAND:
			stm->rp = val;	break;
 8000844:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000848:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000852:	72da      	strb	r2, [r3, #11]
 8000854:	e025      	b.n	80008a2 <stm32_init+0x336>

		case RU_COMMAND:
			stm->ur = val;	break;
 8000856:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800085a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000864:	731a      	strb	r2, [r3, #12]
 8000866:	e01c      	b.n	80008a2 <stm32_init+0x336>
		case GET_CKSUM_COMMAND:
			stm->crc = val; break;
 8000868:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800086c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f897 210e 	ldrb.w	r2, [r7, #270]	@ 0x10e
 8000876:	735a      	strb	r2, [r3, #13]
 8000878:	e013      	b.n	80008a2 <stm32_init+0x336>

		default:
			/* In case of a different command other than the mapped ones */
			/* Check if this is the first time the if statement is being executed by incrementing new_cmds and comparing it to 0 */
			if (new_cmds++ == 0)
 800087a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8000884:	2b00      	cmp	r3, #0
 8000886:	d106      	bne.n	8000896 <stm32_init+0x32a>
				/* Print debug message with the first unknown command */
				printf("GET returns unknown commands (0x%2x", val);
 8000888:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800088c:	4619      	mov	r1, r3
 800088e:	4815      	ldr	r0, [pc, #84]	@ (80008e4 <stm32_init+0x378>)
 8000890:	f003 fcdc 	bl	800424c <iprintf>
 8000894:	e005      	b.n	80008a2 <stm32_init+0x336>
			else
				/* If this is not the first time the if statement is being executed, continues to print the following unknown commands */
				printf(", 0x%2x", val);
 8000896:	f897 310e 	ldrb.w	r3, [r7, #270]	@ 0x10e
 800089a:	4619      	mov	r1, r3
 800089c:	4812      	ldr	r0, [pc, #72]	@ (80008e8 <stm32_init+0x37c>)
 800089e:	f003 fcd5 	bl	800424c <iprintf>
	for (i = 1; i < len; i++) {
 80008a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80008ac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80008b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80008b4:	429a      	cmp	r2, r3
 80008b6:	f6ff ae9d 	blt.w	80005f4 <stm32_init+0x88>
		}
	}

	/* If new_cmds variable is different than 0 */
		if (new_cmds)
 80008ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <stm32_init+0x35c>
			/* Print debug message to close the parenthesis of the unknown commands printed */
			printf(")\n");
 80008c2:	480a      	ldr	r0, [pc, #40]	@ (80008ec <stm32_init+0x380>)
 80008c4:	f003 fd32 	bl	800432c <puts>

		/* Receive ACK/NACK byte within a given time */
		/* Check returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <stm32_init+0x374>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2164      	movs	r1, #100	@ 0x64
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f93c 	bl	8000b4c <stm32_get_ack_timeout>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00a      	beq.n	80008f0 <stm32_init+0x384>
			return STM32_ERR_UNKNOWN;
 80008da:	2301      	movs	r3, #1
 80008dc:	e0e2      	b.n	8000aa4 <stm32_init+0x538>
 80008de:	bf00      	nop
 80008e0:	20000084 	.word	0x20000084
 80008e4:	08004f48 	.word	0x08004f48
 80008e8:	08004f6c 	.word	0x08004f6c
 80008ec:	08004f74 	.word	0x08004f74
		}

		/* If GET, GET Version or GET ID command values received from Target are not a valid command */
		if (stm->get == NOT_VALID_COMMAND
 80008f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80008f4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2bff      	cmp	r3, #255	@ 0xff
 80008fe:	d00f      	beq.n	8000920 <stm32_init+0x3b4>
				|| stm->gvr == NOT_VALID_COMMAND
 8000900:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000904:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	2bff      	cmp	r3, #255	@ 0xff
 800090e:	d007      	beq.n	8000920 <stm32_init+0x3b4>
				|| stm->gid == NOT_VALID_COMMAND) {
 8000910:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000914:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	789b      	ldrb	r3, [r3, #2]
 800091c:	2bff      	cmp	r3, #255	@ 0xff
 800091e:	d104      	bne.n	800092a <stm32_init+0x3be>
			/* Print debug message */
			printf("Error: bootloader did not return correct information from GET command\n");
 8000920:	4863      	ldr	r0, [pc, #396]	@ (8000ab0 <stm32_init+0x544>)
 8000922:	f003 fd03 	bl	800432c <puts>
			/* Returns Status "Unknown" */
			return STM32_ERR_UNKNOWN;
 8000926:	2301      	movs	r3, #1
 8000928:	e0bc      	b.n	8000aa4 <stm32_init+0x538>
		 * Bytes 3-4: PID - byte 3 = 0x04, byte 4 = 0xXX
		 * Byte 5	: ACK
		 *
		 * This function will send the GET ID command and check the returned Status
		 * */
		if (stm32_guess_len_cmd(huart_handle, stm->gid, buf, 1) != STM32_ERR_OK) {
 800092a:	4b62      	ldr	r3, [pc, #392]	@ (8000ab4 <stm32_init+0x548>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000932:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	7899      	ldrb	r1, [r3, #2]
 800093a:	f107 020c 	add.w	r2, r7, #12
 800093e:	2301      	movs	r3, #1
 8000940:	f000 f8c2 	bl	8000ac8 <stm32_guess_len_cmd>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <stm32_init+0x3e2>
			return STM32_ERR_UNKNOWN;
 800094a:	2301      	movs	r3, #1
 800094c:	e0aa      	b.n	8000aa4 <stm32_init+0x538>
		}

		/* Register the number of bytes received (+1) */
		len = buf[0] + 1;
 800094e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000952:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f


		/* len MUST be 2 for STM32 devices */
		if (len < 2) {
 800095e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000962:	2b01      	cmp	r3, #1
 8000964:	d807      	bhi.n	8000976 <stm32_init+0x40a>
			/* Print debug message if len < 2 */
			printf("Only %d bytes sent in the PID, unknown/unsupported device\n", len);
 8000966:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800096a:	4619      	mov	r1, r3
 800096c:	4852      	ldr	r0, [pc, #328]	@ (8000ab8 <stm32_init+0x54c>)
 800096e:	f003 fc6d 	bl	800424c <iprintf>
			/* Returns Status "Unknown" */
			return STM32_ERR_UNKNOWN;
 8000972:	2301      	movs	r3, #1
 8000974:	e096      	b.n	8000aa4 <stm32_init+0x538>
		}

		/* As Product ID comes in 2 bytes, this line combines buf[1] and buf[2] values, both 8 bits, into a single 16 bits value */
		/* The PID value is registered */
		stm->pid = (buf[1] << 8) | buf[2];
 8000976:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800097a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800097e:	785b      	ldrb	r3, [r3, #1]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21a      	sxth	r2, r3
 8000984:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800098c:	789b      	ldrb	r3, [r3, #2]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21b      	sxth	r3, r3
 8000994:	b29a      	uxth	r2, r3
 8000996:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800099a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	825a      	strh	r2, [r3, #18]

		/* If len > 2, extra bytes are identified */
		if (len > 2) {
 80009a2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d923      	bls.n	80009f2 <stm32_init+0x486>
			/* Print debug message */
			printf("This bootloader returns %d extra bytes in PID:", len);
 80009aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80009ae:	4619      	mov	r1, r3
 80009b0:	4842      	ldr	r0, [pc, #264]	@ (8000abc <stm32_init+0x550>)
 80009b2:	f003 fc4b 	bl	800424c <iprintf>
			/* For loop to print the values received */
			for (i = 2; i <= len ; i++)
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80009bc:	e010      	b.n	80009e0 <stm32_init+0x474>
				printf(" %02x", buf[i]);
 80009be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80009c2:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80009c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80009ca:	4413      	add	r3, r2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <stm32_init+0x554>)
 80009d2:	f003 fc3b 	bl	800424c <iprintf>
			for (i = 2; i <= len ; i++)
 80009d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80009da:	3301      	adds	r3, #1
 80009dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80009e0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80009e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dde8      	ble.n	80009be <stm32_init+0x452>
			printf("\n");
 80009ec:	200a      	movs	r0, #10
 80009ee:	f003 fc3f 	bl	8004270 <putchar>
		}
		/* Receives ACK/NACK byte within a given time */
		/* Check returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 80009f2:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <stm32_init+0x548>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2164      	movs	r1, #100	@ 0x64
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8a7 	bl	8000b4c <stm32_get_ack_timeout>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <stm32_init+0x49c>
			return STM32_ERR_UNKNOWN;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e04d      	b.n	8000aa4 <stm32_init+0x538>
		 * version, the read protection and number of times it has been enabled and disabled to the
		 * host
		 *
		 * This function sends GET Version Command and checks the returned Status
		 * */
		if (stm32_send_command_timeout(huart_handle, GET_VER_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000a08:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab4 <stm32_init+0x548>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2264      	movs	r2, #100	@ 0x64
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f8cf 	bl	8000bb4 <stm32_send_command_timeout>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d004      	beq.n	8000a26 <stm32_init+0x4ba>
			printf("Error to get version and read protection status\r\n");
 8000a1c:	4829      	ldr	r0, [pc, #164]	@ (8000ac4 <stm32_init+0x558>)
 8000a1e:	f003 fc85 	bl	800432c <puts>
			return STM32_ERR_UNKNOWN;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e03e      	b.n	8000aa4 <stm32_init+0x538>
		 * Byte 2: Bootloader version (0 < version <= 255), example: 0x10 = version 1.0
		 * Byte 3: Option byte 1: 0x00 to keep the compatibility with generic bootloader protocol
		 * Byte 4: Option byte 2: 0x00 to keep the compatibility with generic bootloader protocol
		 * Byte 5: ACK
		 * */
		len = 3;
 8000a26:	2303      	movs	r3, #3
 8000a28:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
		/* Reads the bytes received over UART and checks the returned Status */
		if( stm32_port_serial_read(huart_handle, buf, len, DEFAULT_TIMEOUT) != HAL_OK)
 8000a2c:	4b21      	ldr	r3, [pc, #132]	@ (8000ab4 <stm32_init+0x548>)
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	f107 010c 	add.w	r1, r7, #12
 8000a3a:	2364      	movs	r3, #100	@ 0x64
 8000a3c:	f002 fbb9 	bl	80031b2 <HAL_UART_Receive>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <stm32_init+0x4de>
			return STM32_ERR_UNKNOWN;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e02c      	b.n	8000aa4 <stm32_init+0x538>

		/* Registers Bootloader version */
		stm->version = buf[0];
 8000a4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	739a      	strb	r2, [r3, #14]

		/* Registers Read Protection Status (Option Byte 1 and 2): for legacy compatibility, both bytes are 0 */
		stm->option1 = buf[1];
 8000a60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a68:	785a      	ldrb	r2, [r3, #1]
 8000a6a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a6e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	73da      	strb	r2, [r3, #15]
		stm->option2 = buf[2];
 8000a76:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a7a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000a7e:	789a      	ldrb	r2, [r3, #2]
 8000a80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000a84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	741a      	strb	r2, [r3, #16]

		/* Receives ACK/NACK byte within a given time and checks the returned Status */
		if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <stm32_init+0x548>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2164      	movs	r1, #100	@ 0x64
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f85a 	bl	8000b4c <stm32_get_ack_timeout>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <stm32_init+0x536>
			return STM32_ERR_UNKNOWN;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <stm32_init+0x538>

		/* Verifies if Product ID returned from Target matches the specified PID */
		if (stm->pid != TARGET_PID);

		/* Returns Status OK */
		return STM32_ERR_OK;
 8000aa2:	2300      	movs	r3, #0
	}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	08004f78 	.word	0x08004f78
 8000ab4:	20000084 	.word	0x20000084
 8000ab8:	08004fc0 	.word	0x08004fc0
 8000abc:	08004ffc 	.word	0x08004ffc
 8000ac0:	0800502c 	.word	0x0800502c
 8000ac4:	08005034 	.word	0x08005034

08000ac8 <stm32_guess_len_cmd>:
 * @param len	 Number of bytes in the reply.
 * @retval 	 	 stm32_err_t
 */
stm32_err_t stm32_guess_len_cmd(UART_HandleTypeDef *huart, uint8_t cmd,
		uint8_t *data, unsigned int len)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	72fb      	strb	r3, [r7, #11]
	huart_handle = huart;
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b48 <stm32_guess_len_cmd+0x80>)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef  p_err;

	/* Send cmd command with a given timeout */
	/* Check returned status */
	if (stm32_send_command_timeout(huart_handle, cmd, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <stm32_guess_len_cmd+0x80>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	7af9      	ldrb	r1, [r7, #11]
 8000ae4:	2264      	movs	r2, #100	@ 0x64
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f864 	bl	8000bb4 <stm32_send_command_timeout>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <stm32_guess_len_cmd+0x2e>
		return STM32_ERR_UNKNOWN;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e023      	b.n	8000b3e <stm32_guess_len_cmd+0x76>

	/* Reads the Number of Bytes to be received and its ACK/NACK byte */
	p_err = stm32_port_serial_read(huart_handle, data, 1, DEFAULT_TIMEOUT);
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <stm32_guess_len_cmd+0x80>)
 8000af8:	6818      	ldr	r0, [r3, #0]
 8000afa:	2364      	movs	r3, #100	@ 0x64
 8000afc:	2201      	movs	r2, #1
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	f002 fb57 	bl	80031b2 <HAL_UART_Receive>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75fb      	strb	r3, [r7, #23]

	/* In case of NACK, returns Status "Unknown" */
	if (p_err != HAL_OK)
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <stm32_guess_len_cmd+0x4a>
		return STM32_ERR_UNKNOWN;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e015      	b.n	8000b3e <stm32_guess_len_cmd+0x76>

	/* Registers the Number of Bytes to be received */
	len = data[0];
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	603b      	str	r3, [r7, #0]

	/* Receives Commands Values to follow */
	/* Receives ACK/NACK byte */
	p_err = stm32_port_serial_read(huart_handle, data + 1, len + 1, DEFAULT_TIMEOUT);
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <stm32_guess_len_cmd+0x80>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	1c59      	adds	r1, r3, #1
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3301      	adds	r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	@ 0x64
 8000b2a:	f002 fb42 	bl	80031b2 <HAL_UART_Receive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	75fb      	strb	r3, [r7, #23]

	/* In case of NACK, returns Status "Unknown" */
	if (p_err != HAL_OK)
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <stm32_guess_len_cmd+0x74>
		return STM32_ERR_UNKNOWN;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <stm32_guess_len_cmd+0x76>

	/* In case of ACK, returns Status "OK" */
	return STM32_ERR_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000084 	.word	0x20000084

08000b4c <stm32_get_ack_timeout>:
 * @param huart		UART Handle.
 * @param timeout	Timeout value.
 * @retval			stm32_err_t
 */
stm32_err_t stm32_get_ack_timeout(UART_HandleTypeDef *huart, uint16_t timeout)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
	/* Local Variables */
	uint8_t byte;
	/* Register UART Handler in huart_handle variable */
	huart_handle = huart;
 8000b58:	4a13      	ldr	r2, [pc, #76]	@ (8000ba8 <stm32_get_ack_timeout+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]

	/* Loop until receives an ACK or encounter an error */
	do {
		/* Receives ACK/NACK Byte with a defined Timeout */
		if( stm32_port_serial_read(huart_handle, (uint8_t*)&byte, 1, timeout) == HAL_TIMEOUT)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <stm32_get_ack_timeout+0x5c>)
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	887b      	ldrh	r3, [r7, #2]
 8000b64:	f107 010f 	add.w	r1, r7, #15
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f002 fb22 	bl	80031b2 <HAL_UART_Receive>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	d104      	bne.n	8000b7e <stm32_get_ack_timeout+0x32>
		{
			/* Print a debug message in case of fail to read ACK byte */
			printf( "Failed to read ACK byte\r\n");
 8000b74:	480d      	ldr	r0, [pc, #52]	@ (8000bac <stm32_get_ack_timeout+0x60>)
 8000b76:	f003 fbd9 	bl	800432c <puts>
			return STM32_ERR_UNKNOWN;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <stm32_get_ack_timeout+0x52>
		}

		if (byte == BL_ACK)
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b79      	cmp	r3, #121	@ 0x79
 8000b82:	d101      	bne.n	8000b88 <stm32_get_ack_timeout+0x3c>
			return STM32_ERR_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	e00a      	b.n	8000b9e <stm32_get_ack_timeout+0x52>

		else if (byte == BL_NAK)
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b1f      	cmp	r3, #31
 8000b8c:	d101      	bne.n	8000b92 <stm32_get_ack_timeout+0x46>
			return STM32_ERR_NACK;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	e005      	b.n	8000b9e <stm32_get_ack_timeout+0x52>

		/* In case of different byte received, returns Status "Unknown" */
		else {
			/* Prints a debug message of the received byte */
			printf("Got byte 0x%02x instead of ACK\r\n", byte);
 8000b92:	7bfb      	ldrb	r3, [r7, #15]
 8000b94:	4619      	mov	r1, r3
 8000b96:	4806      	ldr	r0, [pc, #24]	@ (8000bb0 <stm32_get_ack_timeout+0x64>)
 8000b98:	f003 fb58 	bl	800424c <iprintf>
			return STM32_ERR_UNKNOWN;
 8000b9c:	2301      	movs	r3, #1
		}
	} while (1);
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	08005068 	.word	0x08005068
 8000bb0:	08005084 	.word	0x08005084

08000bb4 <stm32_send_command_timeout>:
 * @retval 			stm32_err_t
 */
stm32_err_t stm32_send_command_timeout(UART_HandleTypeDef *huart,
		const uint8_t cmd,
		uint16_t timeout)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	803b      	strh	r3, [r7, #0]
	/* Local Variables */
	huart_handle = huart;
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <stm32_send_command_timeout+0x80>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	uint8_t cmd_frame[2];

	/* Sends cmd command */
	cmd_frame[0] = cmd;
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	733b      	strb	r3, [r7, #12]

	/* Sends bitwise XOR of cmd and 0xFF - Simple error-checking mechanism */
	cmd_frame[1] = cmd ^ 0xFF;
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	737b      	strb	r3, [r7, #13]

	/* Flush Anything Previously in the UART */
	stm32_port_serial_flush(huart_handle);
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <stm32_send_command_timeout+0x80>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fb7b 	bl	80032d6 <HAL_UART_Abort>

	/* Sends cmd frame over UART */
	stm32_port_serial_write(huart_handle, cmd_frame, 2U, 1000U);
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <stm32_send_command_timeout+0x80>)
 8000be2:	6818      	ldr	r0, [r3, #0]
 8000be4:	f107 010c 	add.w	r1, r7, #12
 8000be8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bec:	2202      	movs	r2, #2
 8000bee:	f002 fa5d 	bl	80030ac <HAL_UART_Transmit>

	/* Receives ACK/NACK byte within a given time and registers it */
	s_err = stm32_get_ack_timeout(huart_handle, timeout);
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <stm32_send_command_timeout+0x80>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	883a      	ldrh	r2, [r7, #0]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffa6 	bl	8000b4c <stm32_get_ack_timeout>
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]

	/* In case of ACK, returns Status OK */
	if (s_err == STM32_ERR_OK)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <stm32_send_command_timeout+0x5a>
		return STM32_ERR_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e00e      	b.n	8000c2c <stm32_send_command_timeout+0x78>

	/* Prints debug messages in case of Status different than OK */
	if (s_err == STM32_ERR_NACK)
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d105      	bne.n	8000c20 <stm32_send_command_timeout+0x6c>
	{
		printf("Got NACK from device on command 0x%02x\r\n", cmd);
 8000c14:	78fb      	ldrb	r3, [r7, #3]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	@ (8000c38 <stm32_send_command_timeout+0x84>)
 8000c1a:	f003 fb17 	bl	800424c <iprintf>
 8000c1e:	e004      	b.n	8000c2a <stm32_send_command_timeout+0x76>
	}
	else
	{
		printf("Unexpected reply from device on command 0x%02x\r\n", cmd);
 8000c20:	78fb      	ldrb	r3, [r7, #3]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <stm32_send_command_timeout+0x88>)
 8000c26:	f003 fb11 	bl	800424c <iprintf>
	}
	return STM32_ERR_UNKNOWN;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000084 	.word	0x20000084
 8000c38:	080050a8 	.word	0x080050a8
 8000c3c:	080050d4 	.word	0x080050d4

08000c40 <stm32_read_memory>:
 * @param length	Memory length to be read.
 * @retval 			stm32_err_t.
 */
stm32_err_t stm32_read_memory(UART_HandleTypeDef *huart, uint32_t address,
		uint8_t data[], unsigned int len)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
	/* Local Variables */
	huart_handle = huart;
 8000c4e:	4a38      	ldr	r2, [pc, #224]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6013      	str	r3, [r2, #0]
	uint8_t buf[5];

	/* If len equals to 0, returns Status OK and ends function execution */
	if (!len)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <stm32_read_memory+0x1e>
		return STM32_ERR_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e063      	b.n	8000d26 <stm32_read_memory+0xe6>

	/* If len > 256, prints debug message with the length limit and returns Status Unknown */
	if (len > 256) {
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c64:	d904      	bls.n	8000c70 <stm32_read_memory+0x30>
		printf("Error: READ length limit at 256 bytes\r\n");
 8000c66:	4833      	ldr	r0, [pc, #204]	@ (8000d34 <stm32_read_memory+0xf4>)
 8000c68:	f003 fb60 	bl	800432c <puts>
		return STM32_ERR_UNKNOWN;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e05a      	b.n	8000d26 <stm32_read_memory+0xe6>
	}

	if (stm32_send_command_timeout(huart_handle, RMEM_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2264      	movs	r2, #100	@ 0x64
 8000c76:	2111      	movs	r1, #17
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ff9b 	bl	8000bb4 <stm32_send_command_timeout>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <stm32_read_memory+0x48>
		return STM32_ERR_UNKNOWN;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e04e      	b.n	8000d26 <stm32_read_memory+0xe6>

	/* Sends the address to be read */

	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	0e1b      	lsrs	r3, r3, #24
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	743b      	strb	r3, [r7, #16]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	0c1b      	lsrs	r3, r3, #16
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	747b      	strb	r3, [r7, #17]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	74bb      	strb	r3, [r7, #18]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	74fb      	strb	r3, [r7, #19]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8000ca6:	7c3a      	ldrb	r2, [r7, #16]
 8000ca8:	7c7b      	ldrb	r3, [r7, #17]
 8000caa:	4053      	eors	r3, r2
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	7cbb      	ldrb	r3, [r7, #18]
 8000cb0:	4053      	eors	r3, r2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	7cfb      	ldrb	r3, [r7, #19]
 8000cb6:	4053      	eors	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	753b      	strb	r3, [r7, #20]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5, DEFAULT_TIMEOUT) != HAL_OK)
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f107 0110 	add.w	r1, r7, #16
 8000cc4:	2364      	movs	r3, #100	@ 0x64
 8000cc6:	2205      	movs	r2, #5
 8000cc8:	f002 f9f0 	bl	80030ac <HAL_UART_Transmit>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <stm32_read_memory+0x96>
		return STM32_ERR_UNKNOWN;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e027      	b.n	8000d26 <stm32_read_memory+0xe6>

	/* Receives ACK/NACK byte within a given time and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2164      	movs	r1, #100	@ 0x64
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff35 	bl	8000b4c <stm32_get_ack_timeout>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <stm32_read_memory+0xac>
		return STM32_ERR_UNKNOWN;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e01c      	b.n	8000d26 <stm32_read_memory+0xe6>

	/* Sends the number of bytes to be read - 1 and checks the returned Status */
	if (stm32_send_command_timeout(huart_handle, len - 1,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000cec:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2264      	movs	r2, #100	@ 0x64
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f7ff ff5a 	bl	8000bb4 <stm32_send_command_timeout>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <stm32_read_memory+0xca>
		return STM32_ERR_UNKNOWN;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00d      	b.n	8000d26 <stm32_read_memory+0xe6>

	/* Receives the data over UART and checks the returned Status */
	if( stm32_port_serial_read(huart_handle, data, len, DEFAULT_TIMEOUT) != HAL_OK)
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <stm32_read_memory+0xf0>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	2364      	movs	r3, #100	@ 0x64
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	f002 fa4c 	bl	80031b2 <HAL_UART_Receive>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <stm32_read_memory+0xe4>
		return STM32_ERR_UNKNOWN;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e000      	b.n	8000d26 <stm32_read_memory+0xe6>

	return STM32_ERR_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000084 	.word	0x20000084
 8000d34:	08005108 	.word	0x08005108

08000d38 <stm32_write_memory>:
 * @param length	Memory length to be read.
 * @retval 			stm32_err_t.
 */
stm32_err_t stm32_write_memory(UART_HandleTypeDef *huart, uint32_t address,
		const uint8_t data[], unsigned int len)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b0c9      	sub	sp, #292	@ 0x124
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 8000d42:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 8000d46:	6020      	str	r0, [r4, #0]
 8000d48:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8000d4c:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 8000d50:	6001      	str	r1, [r0, #0]
 8000d52:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8000d56:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8000d5a:	600a      	str	r2, [r1, #0]
 8000d5c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000d60:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8000d64:	6013      	str	r3, [r2, #0]
	/* Local Variables */
	huart_handle = huart;
 8000d66:	4aa1      	ldr	r2, [pc, #644]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000d68:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	6013      	str	r3, [r2, #0]
	uint8_t cs, buf[256 + 2];
	unsigned int i, aligned_len;
	stm32_err_t s_err;

	/* If len equals to 0, returns Status OK and ends function execution */
	if (!len)
 8000d74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <stm32_write_memory+0x4e>
		return STM32_ERR_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e12c      	b.n	8000fe0 <stm32_write_memory+0x2a8>

	/* If len > 256, prints debug message with the length limit and returns Status Unknown */
	if (len > 256) {
 8000d86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000d8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d94:	d904      	bls.n	8000da0 <stm32_write_memory+0x68>
		printf("Error: WRITE length limit at 256 bytes\r\n");
 8000d96:	4896      	ldr	r0, [pc, #600]	@ (8000ff0 <stm32_write_memory+0x2b8>)
 8000d98:	f003 fac8 	bl	800432c <puts>
		return STM32_ERR_UNKNOWN;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e11f      	b.n	8000fe0 <stm32_write_memory+0x2a8>
	}

	/* All write operations must be Word-aligned (32bit aligned) */
	/* Checks if address or len are correctly aligned */
	if ((address & 0x3) || (len & 0x3)) {
 8000da0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000da4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d108      	bne.n	8000dc4 <stm32_write_memory+0x8c>
 8000db2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000db6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d004      	beq.n	8000dce <stm32_write_memory+0x96>
		printf("Error: WRITE address and length must be 4 byte aligned\r\n");
 8000dc4:	488b      	ldr	r0, [pc, #556]	@ (8000ff4 <stm32_write_memory+0x2bc>)
 8000dc6:	f003 fab1 	bl	800432c <puts>
		return STM32_ERR_UNKNOWN;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e108      	b.n	8000fe0 <stm32_write_memory+0x2a8>
	}

	if (stm32_send_command_timeout(huart_handle, WMEM_COMMAND,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000dce:	4b87      	ldr	r3, [pc, #540]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2264      	movs	r2, #100	@ 0x64
 8000dd4:	2131      	movs	r1, #49	@ 0x31
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff feec 	bl	8000bb4 <stm32_send_command_timeout>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <stm32_write_memory+0xae>
		return STM32_ERR_UNKNOWN;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e0fc      	b.n	8000fe0 <stm32_write_memory+0x2a8>

	/* Sends the address to be written */
	/* The & 0xFF operation masks the address value with 0xFF - Taking only the least significant 8 bits */

	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8000de6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000dea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	0e1b      	lsrs	r3, r3, #24
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000df8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000dfc:	701a      	strb	r2, [r3, #0]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8000dfe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e02:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e10:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e14:	705a      	strb	r2, [r3, #1]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8000e16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e1a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e28:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e2c:	709a      	strb	r2, [r3, #2]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8000e2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e32:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e42:	70da      	strb	r2, [r3, #3]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8000e44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e52:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e56:	785b      	ldrb	r3, [r3, #1]
 8000e58:	4053      	eors	r3, r2
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e60:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	4053      	eors	r3, r2
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e6e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e72:	78db      	ldrb	r3, [r3, #3]
 8000e74:	4053      	eors	r3, r2
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000e7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000e80:	711a      	strb	r2, [r3, #4]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5, DEFAULT_TIMEOUT) != HAL_OK)
 8000e82:	4b5a      	ldr	r3, [pc, #360]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000e84:	6818      	ldr	r0, [r3, #0]
 8000e86:	f107 0110 	add.w	r1, r7, #16
 8000e8a:	2364      	movs	r3, #100	@ 0x64
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	f002 f90d 	bl	80030ac <HAL_UART_Transmit>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <stm32_write_memory+0x164>
		return STM32_ERR_UNKNOWN;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0a1      	b.n	8000fe0 <stm32_write_memory+0x2a8>

	/* Receives ACK/NACK byte within a given time and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle,DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2164      	movs	r1, #100	@ 0x64
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fe52 	bl	8000b4c <stm32_get_ack_timeout>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <stm32_write_memory+0x17a>
		return STM32_ERR_UNKNOWN;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e096      	b.n	8000fe0 <stm32_write_memory+0x2a8>

	/* Calculates the aligned length of the data to write */
	aligned_len = (len + 3) & ~3;
 8000eb2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000eb6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	3303      	adds	r3, #3
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	/* Calculates checksum value */
	cs = aligned_len - 1;
 8000ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

	/* Sets the first byte of the buf array to the checksum value calculated previously */
	buf[0] = aligned_len - 1;
 8000ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ee0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ee4:	701a      	strb	r2, [r3, #0]

	/* Loop that iterates over the lenght len  */
	for (i = 0; i < len; i++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000eec:	e023      	b.n	8000f36 <stm32_write_memory+0x1fe>

		/* Calculates the checksum for the current data by performing a bitwise XOR operation between the current byte of data and the current value of the checksum */
		cs ^= data[i];
 8000eee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000ef2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000efc:	4413      	add	r3, r2
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000f04:	4053      	eors	r3, r2
 8000f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		buf[i + 1] = data[i];
 8000f0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f18:	441a      	add	r2, r3
 8000f1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f1e:	3301      	adds	r3, #1
 8000f20:	7811      	ldrb	r1, [r2, #0]
 8000f22:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f26:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f2a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len; i++) {
 8000f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f30:	3301      	adds	r3, #1
 8000f32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f3a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3d2      	bcc.n	8000eee <stm32_write_memory+0x1b6>
	}

	/* Padding data - It iterates over the remaining bytes of data */
	for (i = len; i < aligned_len; i++) {
 8000f48:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000f4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f56:	e012      	b.n	8000f7e <stm32_write_memory+0x246>
		cs ^= 0xFF;
 8000f58:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		buf[i + 1] = 0xFF;
 8000f62:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f66:	3301      	adds	r3, #1
 8000f68:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f6c:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f70:	21ff      	movs	r1, #255	@ 0xff
 8000f72:	54d1      	strb	r1, [r2, r3]
	for (i = len; i < aligned_len; i++) {
 8000f74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8000f78:	3301      	adds	r3, #1
 8000f7a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8000f7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8000f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3e6      	bcc.n	8000f58 <stm32_write_memory+0x220>
	}

	/* Registers checksum value */
	buf[aligned_len + 1] = cs;
 8000f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000f8e:	3301      	adds	r3, #1
 8000f90:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8000f94:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f98:	f897 111f 	ldrb.w	r1, [r7, #287]	@ 0x11f
 8000f9c:	54d1      	strb	r1, [r2, r3]

	/* Sends the number of aligned bytes to be written and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, aligned_len + 2,DEFAULT_TIMEOUT) != HAL_OK)
 8000f9e:	4b13      	ldr	r3, [pc, #76]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	3302      	adds	r3, #2
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f107 0110 	add.w	r1, r7, #16
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	f002 f87b 	bl	80030ac <HAL_UART_Transmit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <stm32_write_memory+0x288>
		return STM32_ERR_UNKNOWN;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e00f      	b.n	8000fe0 <stm32_write_memory+0x2a8>

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <stm32_write_memory+0x2b4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2164      	movs	r1, #100	@ 0x64
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fdc0 	bl	8000b4c <stm32_get_ack_timeout>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113

	/* In case of Status different than OK, it returns Status "Unknown" */
	if (s_err != STM32_ERR_OK) {
 8000fd2:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <stm32_write_memory+0x2a6>
		return STM32_ERR_UNKNOWN;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <stm32_write_memory+0x2a8>
	}

	/* Returns Status OK */
	return STM32_ERR_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000084 	.word	0x20000084
 8000ff0:	08005130 	.word	0x08005130
 8000ff4:	08005158 	.word	0x08005158

08000ff8 <stm32_send_init_seq>:
 * @brief 			Send the bootloader entry code sequence 0x7F using the chosen USART
 * @param huart 	UART handle
 * @retval stm32_	err_t
 */
stm32_err_t stm32_send_init_seq(UART_HandleTypeDef *huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	/* Local Variables */
	huart_handle = huart;
 8001000:	4a17      	ldr	r2, [pc, #92]	@ (8001060 <stm32_send_init_seq+0x68>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	uint8_t cmd = BL_UART_SOF;
 8001006:	237f      	movs	r3, #127	@ 0x7f
 8001008:	73bb      	strb	r3, [r7, #14]

	/* Flush Anything Previously in the UART */
	stm32_port_serial_flush(huart_handle);
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <stm32_send_init_seq+0x68>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f961 	bl	80032d6 <HAL_UART_Abort>

	/* Send BL_UART_SOF Command */
	/* Check Returned Status */
	if (stm32_port_serial_write(huart_handle, &cmd, 1,DEFAULT_TIMEOUT) != HAL_OK)
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <stm32_send_init_seq+0x68>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	f107 010e 	add.w	r1, r7, #14
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	2201      	movs	r2, #1
 8001020:	f002 f844 	bl	80030ac <HAL_UART_Transmit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d004      	beq.n	8001034 <stm32_send_init_seq+0x3c>
	{
		/* In case of Status different than "OK", print a debug message */
		printf("Failed to send init the device\r\n");
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <stm32_send_init_seq+0x6c>)
 800102c:	f003 f97e 	bl	800432c <puts>
		return STM32_ERR_UNKNOWN;
 8001030:	2301      	movs	r3, #1
 8001032:	e010      	b.n	8001056 <stm32_send_init_seq+0x5e>
	}

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <stm32_send_init_seq+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2164      	movs	r1, #100	@ 0x64
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fd86 	bl	8000b4c <stm32_get_ack_timeout>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]

	/* Check Returned Status */
	if (s_err != STM32_ERR_OK) {
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <stm32_send_init_seq+0x56>
		return STM32_ERR_UNKNOWN;
 800104a:	2301      	movs	r3, #1
 800104c:	e003      	b.n	8001056 <stm32_send_init_seq+0x5e>
	}

	printf("Success in init the device\r\n");
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <stm32_send_init_seq+0x70>)
 8001050:	f003 f96c 	bl	800432c <puts>

	/* Returns Status "OK" */
	return STM32_ERR_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000084 	.word	0x20000084
 8001064:	08005190 	.word	0x08005190
 8001068:	080051b0 	.word	0x080051b0

0800106c <stm32_erase_memory>:
 * @param spage		Page size.
 * @param pages		Number of pages.
 * @retval 			stm32_err_t
 */
stm32_err_t stm32_erase_memory(UART_HandleTypeDef *huart, uint8_t cmd, uint8_t spage, uint8_t pages)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	4608      	mov	r0, r1
 8001076:	4611      	mov	r1, r2
 8001078:	461a      	mov	r2, r3
 800107a:	4603      	mov	r3, r0
 800107c:	70fb      	strb	r3, [r7, #3]
 800107e:	460b      	mov	r3, r1
 8001080:	70bb      	strb	r3, [r7, #2]
 8001082:	4613      	mov	r3, r2
 8001084:	707b      	strb	r3, [r7, #1]
	/* Local Variables */
	huart_handle = huart;
 8001086:	4aab      	ldr	r2, [pc, #684]	@ (8001334 <stm32_erase_memory+0x2c8>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6013      	str	r3, [r2, #0]
	stm32_err_t s_err;
	HAL_StatusTypeDef  p_err;

	/* If pages equals to 0, returns Status OK and ends function execution */
	if (!pages)
 800108c:	787b      	ldrb	r3, [r7, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <stm32_erase_memory+0x2a>
		return STM32_ERR_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e14a      	b.n	800132c <stm32_erase_memory+0x2c0>

	/* This function sends the Erase Memory Command with a given timeout and checks Status returned */
	if (stm32_send_command_timeout(huart_handle, EMEM_COMMAND,DEFAULT_TIMEOUT) != STM32_ERR_OK) {
 8001096:	4ba7      	ldr	r3, [pc, #668]	@ (8001334 <stm32_erase_memory+0x2c8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2264      	movs	r2, #100	@ 0x64
 800109c:	2143      	movs	r1, #67	@ 0x43
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fd88 	bl	8000bb4 <stm32_send_command_timeout>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <stm32_erase_memory+0x48>
		printf( "Can't initiate chip erase!\r\n");
 80010aa:	48a3      	ldr	r0, [pc, #652]	@ (8001338 <stm32_erase_memory+0x2cc>)
 80010ac:	f003 f93e 	bl	800432c <puts>
		return STM32_ERR_UNKNOWN;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e13b      	b.n	800132c <stm32_erase_memory+0x2c0>
	}

	/* Executes this statement in case of cmd = 0x44 */
	if (cmd == EX_EMEM_COMMAND) {
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b44      	cmp	r3, #68	@ 0x44
 80010b8:	f040 80bf 	bne.w	800123a <stm32_erase_memory+0x1ce>
		if (pages == 0xFF) {
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2bff      	cmp	r3, #255	@ 0xff
 80010c0:	d127      	bne.n	8001112 <stm32_erase_memory+0xa6>
			uint8_t buf[3];

			/* 0xFFFF - To use Global Mass Erase */
			buf[0] = 0xFF;
 80010c2:	23ff      	movs	r3, #255	@ 0xff
 80010c4:	723b      	strb	r3, [r7, #8]
			buf[1] = 0xFF;
 80010c6:	23ff      	movs	r3, #255	@ 0xff
 80010c8:	727b      	strb	r3, [r7, #9]
			/* Checksum byte */
			buf[2] = 0x00;
 80010ca:	2300      	movs	r3, #0
 80010cc:	72bb      	strb	r3, [r7, #10]

			/* Sends the above bytes over UART and checks the returned Status */
			if (stm32_port_serial_write(huart_handle, buf, 3, DEFAULT_TIMEOUT) != HAL_OK) {
 80010ce:	4b99      	ldr	r3, [pc, #612]	@ (8001334 <stm32_erase_memory+0x2c8>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 0108 	add.w	r1, r7, #8
 80010d6:	2364      	movs	r3, #100	@ 0x64
 80010d8:	2203      	movs	r2, #3
 80010da:	f001 ffe7 	bl	80030ac <HAL_UART_Transmit>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <stm32_erase_memory+0x82>
				printf( "Mass erase error.\r\n");
 80010e4:	4895      	ldr	r0, [pc, #596]	@ (800133c <stm32_erase_memory+0x2d0>)
 80010e6:	f003 f921 	bl	800432c <puts>
				return STM32_ERR_UNKNOWN;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e11e      	b.n	800132c <stm32_erase_memory+0x2c0>
			}

			/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
			s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 80010ee:	4b91      	ldr	r3, [pc, #580]	@ (8001334 <stm32_erase_memory+0x2c8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2164      	movs	r1, #100	@ 0x64
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd29 	bl	8000b4c <stm32_get_ack_timeout>
 80010fa:	4603      	mov	r3, r0
 80010fc:	74bb      	strb	r3, [r7, #18]

			/* Prints debug message in case of Status different than OK received and returns Status Unknown */
			if (s_err != STM32_ERR_OK) {
 80010fe:	7cbb      	ldrb	r3, [r7, #18]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <stm32_erase_memory+0xa2>
				printf( "Mass erase failed. Try specifying the number of pages to be erased.\r\n");
 8001104:	488e      	ldr	r0, [pc, #568]	@ (8001340 <stm32_erase_memory+0x2d4>)
 8001106:	f003 f911 	bl	800432c <puts>
				return STM32_ERR_UNKNOWN;
 800110a:	2301      	movs	r3, #1
 800110c:	e10e      	b.n	800132c <stm32_erase_memory+0x2c0>
			}

			return STM32_ERR_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e10c      	b.n	800132c <stm32_erase_memory+0x2c0>
		}

		/* Local Variables */
		uint16_t pg_num;
		uint8_t pg_byte;
		uint8_t cs = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		uint8_t *buf;
		int i = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]

		buf = malloc(2 + 2 * pages + 1);
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	3301      	adds	r3, #1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	3301      	adds	r3, #1
 8001124:	4618      	mov	r0, r3
 8001126:	f002 ff11 	bl	8003f4c <malloc>
 800112a:	4603      	mov	r3, r0
 800112c:	60fb      	str	r3, [r7, #12]
		if (!buf)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <stm32_erase_memory+0xcc>
			return STM32_ERR_UNKNOWN;
 8001134:	2301      	movs	r3, #1
 8001136:	e0f9      	b.n	800132c <stm32_erase_memory+0x2c0>

		/* Number of pages to be erased - 1, on two bytes, with MSB first */
		pg_byte = (pages - 1) >> 8;
 8001138:	787b      	ldrb	r3, [r7, #1]
 800113a:	3b01      	subs	r3, #1
 800113c:	121b      	asrs	r3, r3, #8
 800113e:	72fb      	strb	r3, [r7, #11]
		buf[i++] = pg_byte;
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	623a      	str	r2, [r7, #32]
 8001146:	461a      	mov	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4413      	add	r3, r2
 800114c:	7afa      	ldrb	r2, [r7, #11]
 800114e:	701a      	strb	r2, [r3, #0]
		cs ^= pg_byte;
 8001150:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001154:	7afb      	ldrb	r3, [r7, #11]
 8001156:	4053      	eors	r3, r2
 8001158:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		pg_byte = (pages - 1) & 0xFF;
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	3b01      	subs	r3, #1
 8001160:	72fb      	strb	r3, [r7, #11]
		buf[i++] = pg_byte;
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	623a      	str	r2, [r7, #32]
 8001168:	461a      	mov	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	701a      	strb	r2, [r3, #0]
		cs ^= pg_byte;
 8001172:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	4053      	eors	r3, r2
 800117a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		for (pg_num = spage; pg_num < spage + pages; pg_num++) {
 800117e:	78bb      	ldrb	r3, [r7, #2]
 8001180:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001182:	e024      	b.n	80011ce <stm32_erase_memory+0x162>
			pg_byte = pg_num >> 8;
 8001184:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29b      	uxth	r3, r3
 800118a:	72fb      	strb	r3, [r7, #11]
			cs ^= pg_byte;
 800118c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8001190:	7afb      	ldrb	r3, [r7, #11]
 8001192:	4053      	eors	r3, r2
 8001194:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			buf[i++] = pg_byte;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	623a      	str	r2, [r7, #32]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	7afa      	ldrb	r2, [r7, #11]
 80011a6:	701a      	strb	r2, [r3, #0]
			pg_byte = pg_num & 0xFF;
 80011a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011aa:	72fb      	strb	r3, [r7, #11]
			cs ^= pg_byte;
 80011ac:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	4053      	eors	r3, r2
 80011b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			buf[i++] = pg_byte;
 80011b8:	6a3b      	ldr	r3, [r7, #32]
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	623a      	str	r2, [r7, #32]
 80011be:	461a      	mov	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4413      	add	r3, r2
 80011c4:	7afa      	ldrb	r2, [r7, #11]
 80011c6:	701a      	strb	r2, [r3, #0]
		for (pg_num = spage; pg_num < spage + pages; pg_num++) {
 80011c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ca:	3301      	adds	r3, #1
 80011cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80011ce:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011d0:	78b9      	ldrb	r1, [r7, #2]
 80011d2:	787b      	ldrb	r3, [r7, #1]
 80011d4:	440b      	add	r3, r1
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbd4      	blt.n	8001184 <stm32_erase_memory+0x118>
		}
		buf[i++] = cs;
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	623a      	str	r2, [r7, #32]
 80011e0:	461a      	mov	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4413      	add	r3, r2
 80011e6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80011ea:	701a      	strb	r2, [r3, #0]

		/* Sends the buffer buf over UART and checks the returned Status */
		p_err = stm32_port_serial_write(huart_handle, buf, i, DEFAULT_TIMEOUT);
 80011ec:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <stm32_erase_memory+0x2c8>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	2364      	movs	r3, #100	@ 0x64
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	f001 ff58 	bl	80030ac <HAL_UART_Transmit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	74fb      	strb	r3, [r7, #19]
		free(buf);
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f002 feab 	bl	8003f5c <free>

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (p_err != HAL_OK) {
 8001206:	7cfb      	ldrb	r3, [r7, #19]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <stm32_erase_memory+0x1aa>
			printf( "Page-by-page erase error.\r\n");
 800120c:	484d      	ldr	r0, [pc, #308]	@ (8001344 <stm32_erase_memory+0x2d8>)
 800120e:	f003 f88d 	bl	800432c <puts>
			return STM32_ERR_UNKNOWN;
 8001212:	2301      	movs	r3, #1
 8001214:	e08a      	b.n	800132c <stm32_erase_memory+0x2c0>
		}

		/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
		s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <stm32_erase_memory+0x2c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2164      	movs	r1, #100	@ 0x64
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fc95 	bl	8000b4c <stm32_get_ack_timeout>
 8001222:	4603      	mov	r3, r0
 8001224:	74bb      	strb	r3, [r7, #18]

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (s_err != STM32_ERR_OK) {
 8001226:	7cbb      	ldrb	r3, [r7, #18]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <stm32_erase_memory+0x1ca>
			printf( "Page-by-page erase failed. Check the maximum pages your device supports.\r\n");
 800122c:	4846      	ldr	r0, [pc, #280]	@ (8001348 <stm32_erase_memory+0x2dc>)
 800122e:	f003 f87d 	bl	800432c <puts>
			return STM32_ERR_UNKNOWN;
 8001232:	2301      	movs	r3, #1
 8001234:	e07a      	b.n	800132c <stm32_erase_memory+0x2c0>
		}

		return STM32_ERR_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	e078      	b.n	800132c <stm32_erase_memory+0x2c0>
	}

	/* Regular Erase (0x43 command) */

	if (pages == 0xFF) {
 800123a:	787b      	ldrb	r3, [r7, #1]
 800123c:	2bff      	cmp	r3, #255	@ 0xff
 800123e:	d10f      	bne.n	8001260 <stm32_erase_memory+0x1f4>
		s_err = stm32_send_command_timeout(huart_handle, 0xFF, DEFAULT_TIMEOUT);
 8001240:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <stm32_erase_memory+0x2c8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2264      	movs	r2, #100	@ 0x64
 8001246:	21ff      	movs	r1, #255	@ 0xff
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcb3 	bl	8000bb4 <stm32_send_command_timeout>
 800124e:	4603      	mov	r3, r0
 8001250:	74bb      	strb	r3, [r7, #18]
		if (s_err != STM32_ERR_OK) {
 8001252:	7cbb      	ldrb	r3, [r7, #18]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <stm32_erase_memory+0x1f0>
			return STM32_ERR_UNKNOWN;
 8001258:	2301      	movs	r3, #1
 800125a:	e067      	b.n	800132c <stm32_erase_memory+0x2c0>
		}
		return STM32_ERR_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	e065      	b.n	800132c <stm32_erase_memory+0x2c0>
	} else {
		uint8_t cs = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	77fb      	strb	r3, [r7, #31]
		uint8_t pg_num;
		uint8_t *buf;
		int i = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]

		buf = malloc(1 + pages + 1);
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	3302      	adds	r3, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe6d 	bl	8003f4c <malloc>
 8001272:	4603      	mov	r3, r0
 8001274:	617b      	str	r3, [r7, #20]
		if (!buf)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <stm32_erase_memory+0x214>
			return STM32_ERR_UNKNOWN;
 800127c:	2301      	movs	r3, #1
 800127e:	e055      	b.n	800132c <stm32_erase_memory+0x2c0>

		buf[i++] = pages - 1;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	61ba      	str	r2, [r7, #24]
 8001286:	461a      	mov	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	4413      	add	r3, r2
 800128c:	787a      	ldrb	r2, [r7, #1]
 800128e:	3a01      	subs	r2, #1
 8001290:	b2d2      	uxtb	r2, r2
 8001292:	701a      	strb	r2, [r3, #0]
		cs ^= (pages-1);
 8001294:	787b      	ldrb	r3, [r7, #1]
 8001296:	3b01      	subs	r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	b25a      	sxtb	r2, r3
 800129c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012a0:	4053      	eors	r3, r2
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	77fb      	strb	r3, [r7, #31]
		for (pg_num = spage; pg_num < (pages + spage); pg_num++) {
 80012a6:	78bb      	ldrb	r3, [r7, #2]
 80012a8:	77bb      	strb	r3, [r7, #30]
 80012aa:	e00e      	b.n	80012ca <stm32_erase_memory+0x25e>
			buf[i++] = pg_num;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	61ba      	str	r2, [r7, #24]
 80012b2:	461a      	mov	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	4413      	add	r3, r2
 80012b8:	7fba      	ldrb	r2, [r7, #30]
 80012ba:	701a      	strb	r2, [r3, #0]
			cs ^= pg_num;
 80012bc:	7ffa      	ldrb	r2, [r7, #31]
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	4053      	eors	r3, r2
 80012c2:	77fb      	strb	r3, [r7, #31]
		for (pg_num = spage; pg_num < (pages + spage); pg_num++) {
 80012c4:	7fbb      	ldrb	r3, [r7, #30]
 80012c6:	3301      	adds	r3, #1
 80012c8:	77bb      	strb	r3, [r7, #30]
 80012ca:	7fba      	ldrb	r2, [r7, #30]
 80012cc:	7879      	ldrb	r1, [r7, #1]
 80012ce:	78bb      	ldrb	r3, [r7, #2]
 80012d0:	440b      	add	r3, r1
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbea      	blt.n	80012ac <stm32_erase_memory+0x240>
		}
		buf[i++] = cs;
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	61ba      	str	r2, [r7, #24]
 80012dc:	461a      	mov	r2, r3
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	4413      	add	r3, r2
 80012e2:	7ffa      	ldrb	r2, [r7, #31]
 80012e4:	701a      	strb	r2, [r3, #0]

		/* Sends the buffer buf over UART and checks the returned Status */
		p_err = stm32_port_serial_write(huart_handle, buf, i, DEFAULT_TIMEOUT);
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <stm32_erase_memory+0x2c8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	2364      	movs	r3, #100	@ 0x64
 80012f0:	6979      	ldr	r1, [r7, #20]
 80012f2:	f001 fedb 	bl	80030ac <HAL_UART_Transmit>
 80012f6:	4603      	mov	r3, r0
 80012f8:	74fb      	strb	r3, [r7, #19]

		free(buf);
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f002 fe2e 	bl	8003f5c <free>

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (p_err != HAL_OK) {
 8001300:	7cfb      	ldrb	r3, [r7, #19]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <stm32_erase_memory+0x2a4>
			printf( "Erase failed.\r\n");
 8001306:	4811      	ldr	r0, [pc, #68]	@ (800134c <stm32_erase_memory+0x2e0>)
 8001308:	f003 f810 	bl	800432c <puts>
			return STM32_ERR_UNKNOWN;
 800130c:	2301      	movs	r3, #1
 800130e:	e00d      	b.n	800132c <stm32_erase_memory+0x2c0>
		}

		/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
		s_err = stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT);
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <stm32_erase_memory+0x2c8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2164      	movs	r1, #100	@ 0x64
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fc18 	bl	8000b4c <stm32_get_ack_timeout>
 800131c:	4603      	mov	r3, r0
 800131e:	74bb      	strb	r3, [r7, #18]

		/* Prints debug message in case of Status different than OK received and returns Status Unknown */
		if (s_err != STM32_ERR_OK) {
 8001320:	7cbb      	ldrb	r3, [r7, #18]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <stm32_erase_memory+0x2be>
			return STM32_ERR_UNKNOWN;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <stm32_erase_memory+0x2c0>
		}

		return STM32_ERR_OK;
 800132a:	2300      	movs	r3, #0
	}
}
 800132c:	4618      	mov	r0, r3
 800132e:	3728      	adds	r7, #40	@ 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000084 	.word	0x20000084
 8001338:	080051cc 	.word	0x080051cc
 800133c:	080051e8 	.word	0x080051e8
 8001340:	080051fc 	.word	0x080051fc
 8001344:	08005244 	.word	0x08005244
 8001348:	08005260 	.word	0x08005260
 800134c:	080052ac 	.word	0x080052ac

08001350 <stm32_go>:
 * @param address	Address to start.
 * 			CAUTION: there is not check if the address is correct.
 * @retval 		stm32_err_t
 */
stm32_err_t stm32_go(UART_HandleTypeDef *huart, uint32_t address)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	/* Local Variable */
	huart_handle = huart;
 800135a:	4a27      	ldr	r2, [pc, #156]	@ (80013f8 <stm32_go+0xa8>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6013      	str	r3, [r2, #0]
	uint8_t buf[5];

	if (stm32_send_command_timeout(huart_handle, GO_COMMAND, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 8001360:	4b25      	ldr	r3, [pc, #148]	@ (80013f8 <stm32_go+0xa8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2264      	movs	r2, #100	@ 0x64
 8001366:	2121      	movs	r1, #33	@ 0x21
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fc23 	bl	8000bb4 <stm32_send_command_timeout>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <stm32_go+0x28>
		return STM32_ERR_UNKNOWN;
 8001374:	2301      	movs	r3, #1
 8001376:	e03a      	b.n	80013ee <stm32_go+0x9e>
	/* Byte 3: MSB */
	buf[0] = address >> 24;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	0e1b      	lsrs	r3, r3, #24
 800137c:	b2db      	uxtb	r3, r3
 800137e:	723b      	strb	r3, [r7, #8]
	/* Byte 4 */
	buf[1] = (address >> 16) & 0xFF;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	0c1b      	lsrs	r3, r3, #16
 8001384:	b2db      	uxtb	r3, r3
 8001386:	727b      	strb	r3, [r7, #9]
	/* Byte 5 */
	buf[2] = (address >> 8) & 0xFF;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	0a1b      	lsrs	r3, r3, #8
 800138c:	b2db      	uxtb	r3, r3
 800138e:	72bb      	strb	r3, [r7, #10]
	/* Byte 6: LSB */
	buf[3] = address & 0xFF;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	72fb      	strb	r3, [r7, #11]

	/* Performs checksum by performing a bitwise XOR between bytes 3 - 6*/
	buf[4] = buf[0] ^ buf[1] ^ buf[2] ^ buf[3];
 8001396:	7a3a      	ldrb	r2, [r7, #8]
 8001398:	7a7b      	ldrb	r3, [r7, #9]
 800139a:	4053      	eors	r3, r2
 800139c:	b2da      	uxtb	r2, r3
 800139e:	7abb      	ldrb	r3, [r7, #10]
 80013a0:	4053      	eors	r3, r2
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	7afb      	ldrb	r3, [r7, #11]
 80013a6:	4053      	eors	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	733b      	strb	r3, [r7, #12]

	/* Sends the above address over UART and checks the returned Status */
	if (stm32_port_serial_write(huart_handle, buf, 5,DEFAULT_TIMEOUT) != HAL_OK)
 80013ac:	4b12      	ldr	r3, [pc, #72]	@ (80013f8 <stm32_go+0xa8>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	f107 0108 	add.w	r1, r7, #8
 80013b4:	2364      	movs	r3, #100	@ 0x64
 80013b6:	2205      	movs	r2, #5
 80013b8:	f001 fe78 	bl	80030ac <HAL_UART_Transmit>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <stm32_go+0x76>
		return STM32_ERR_UNKNOWN;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e013      	b.n	80013ee <stm32_go+0x9e>

	/* Receives ACK/NACK byte within a given timeout and checks the returned Status */
	if (stm32_get_ack_timeout(huart_handle, DEFAULT_TIMEOUT) != STM32_ERR_OK)
 80013c6:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <stm32_go+0xa8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2164      	movs	r1, #100	@ 0x64
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fbbd 	bl	8000b4c <stm32_get_ack_timeout>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <stm32_go+0x8c>
		return STM32_ERR_UNKNOWN;
 80013d8:	2301      	movs	r3, #1
 80013da:	e008      	b.n	80013ee <stm32_go+0x9e>

	/* Set BOOT Control Pin LOW to exit Target from BOOT Mode */
	stm32_boot_low();
 80013dc:	2200      	movs	r2, #0
 80013de:	2102      	movs	r1, #2
 80013e0:	4806      	ldr	r0, [pc, #24]	@ (80013fc <stm32_go+0xac>)
 80013e2:	f001 f89e 	bl	8002522 <HAL_GPIO_WritePin>

	printf("\r\nTarget Successfully Programmed!\r\n");
 80013e6:	4806      	ldr	r0, [pc, #24]	@ (8001400 <stm32_go+0xb0>)
 80013e8:	f002 ffa0 	bl	800432c <puts>

	/* Returns Status OK */
	return STM32_ERR_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000084 	.word	0x20000084
 80013fc:	40011400 	.word	0x40011400
 8001400:	080052bc 	.word	0x080052bc

08001404 <__io_putchar>:
void Boot_Process_Init (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
       HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 800140c:	1d39      	adds	r1, r7, #4
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	2201      	movs	r2, #1
 8001412:	4804      	ldr	r0, [pc, #16]	@ (8001424 <__io_putchar+0x20>)
 8001414:	f001 fe4a 	bl	80030ac <HAL_UART_Transmit>
       return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200000d0 	.word	0x200000d0

08001428 <stm32_boot_high>:

void stm32_boot_high(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <stm32_boot_high+0x20>)
 8001434:	f001 f875 	bl	8002522 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Boot_Pin_Control_GPIO_Port, Boot_Pin_Control_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4803      	ldr	r0, [pc, #12]	@ (800144c <stm32_boot_high+0x24>)
 800143e:	f001 f870 	bl	8002522 <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40011800 	.word	0x40011800
 800144c:	40011400 	.word	0x40011400

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fbe8 	bl	8001c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f82a 	bl	80014b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 f8ea 	bl	8001634 <MX_GPIO_Init>
  MX_UART4_Init();
 8001460:	f000 f892 	bl	8001588 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001464:	f000 f8bc 	bl	80015e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET)
 8001468:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800146c:	480e      	ldr	r0, [pc, #56]	@ (80014a8 <main+0x58>)
 800146e:	f001 f841 	bl	80024f4 <HAL_GPIO_ReadPin>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <main+0x38>
    	{
  	  HAL_GPIO_WritePin(Uart_Enable_GPIO_Port, Uart_Enable_Pin,0);
 8001478:	2200      	movs	r2, #0
 800147a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800147e:	480b      	ldr	r0, [pc, #44]	@ (80014ac <main+0x5c>)
 8001480:	f001 f84f 	bl	8002522 <HAL_GPIO_WritePin>
  	  Boot_Process_Init();
 8001484:	f000 f982 	bl	800178c <Boot_Process_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_WritePin(Uart_Enable_GPIO_Port, Uart_Enable_Pin,1);
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <main+0x5c>)
 8001490:	f001 f847 	bl	8002522 <HAL_GPIO_WritePin>
		HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8001494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <main+0x5c>)
 800149a:	f001 f85a 	bl	8002552 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800149e:	20c8      	movs	r0, #200	@ 0xc8
 80014a0:	f000 fc24 	bl	8001cec <HAL_Delay>
		HAL_GPIO_WritePin(Uart_Enable_GPIO_Port, Uart_Enable_Pin,1);
 80014a4:	bf00      	nop
 80014a6:	e7ef      	b.n	8001488 <main+0x38>
 80014a8:	40011400 	.word	0x40011400
 80014ac:	40011000 	.word	0x40011000

080014b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b094      	sub	sp, #80	@ 0x50
 80014b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b6:	f107 0318 	add.w	r3, r7, #24
 80014ba:	2238      	movs	r2, #56	@ 0x38
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 f814 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80014dc:	2304      	movs	r3, #4
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80014e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014f4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80014fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001502:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001504:	2340      	movs	r3, #64	@ 0x40
 8001506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	4618      	mov	r0, r3
 800150e:	f001 f839 	bl	8002584 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001518:	f000 f99c 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fb3a 	bl	8002bb0 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001542:	f000 f987 	bl	8001854 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLL3CLK, RCC_MCODIV_1);
 8001546:	2200      	movs	r2, #0
 8001548:	f04f 6130 	mov.w	r1, #184549376	@ 0xb000000
 800154c:	2000      	movs	r0, #0
 800154e:	f001 fc19 	bl	8002d84 <HAL_RCC_MCOConfig>

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_HSE_PREDIV2_DIV5);
 8001552:	4b0b      	ldr	r3, [pc, #44]	@ (8001580 <SystemClock_Config+0xd0>)
 8001554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800155a:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <SystemClock_Config+0xd0>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001560:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_CONFIG(RCC_PLLI2S_MUL10);
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <SystemClock_Config+0xd0>)
 8001564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001566:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemClock_Config+0xd0>)
 800156c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001570:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SystemClock_Config+0xd4>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
}
 8001578:	bf00      	nop
 800157a:	3750      	adds	r7, #80	@ 0x50
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40021000 	.word	0x40021000
 8001584:	42420070 	.word	0x42420070

08001588 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_UART4_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <MX_UART4_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_UART4_Init+0x50>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_UART4_Init+0x50>)
 800159c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015a0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015a2:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 80015a8:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_UART4_Init+0x50>)
 80015c4:	f001 fd22 	bl	800300c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_UART4_Init+0x4a>
  {
    Error_Handler();
 80015ce:	f000 f941 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000088 	.word	0x20000088
 80015dc:	40004c00 	.word	0x40004c00

080015e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_USART1_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART1_UART_Init+0x4c>)
 8001618:	f001 fcf8 	bl	800300c <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 f917 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200000d0 	.word	0x200000d0
 8001630:	40013800 	.word	0x40013800

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <MX_GPIO_Init+0x144>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a4a      	ldr	r2, [pc, #296]	@ (8001778 <MX_GPIO_Init+0x144>)
 800164e:	f043 0310 	orr.w	r3, r3, #16
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0310 	and.w	r3, r3, #16
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001660:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a44      	ldr	r2, [pc, #272]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b42      	ldr	r3, [pc, #264]	@ (8001778 <MX_GPIO_Init+0x144>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	4b3f      	ldr	r3, [pc, #252]	@ (8001778 <MX_GPIO_Init+0x144>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a3e      	ldr	r2, [pc, #248]	@ (8001778 <MX_GPIO_Init+0x144>)
 800167e:	f043 0320 	orr.w	r3, r3, #32
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b3c      	ldr	r3, [pc, #240]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0320 	and.w	r3, r3, #32
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b39      	ldr	r3, [pc, #228]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a38      	ldr	r2, [pc, #224]	@ (8001778 <MX_GPIO_Init+0x144>)
 8001696:	f043 0304 	orr.w	r3, r3, #4
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <MX_GPIO_Init+0x144>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a8:	4b33      	ldr	r3, [pc, #204]	@ (8001778 <MX_GPIO_Init+0x144>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a32      	ldr	r2, [pc, #200]	@ (8001778 <MX_GPIO_Init+0x144>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b30      	ldr	r3, [pc, #192]	@ (8001778 <MX_GPIO_Init+0x144>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0308 	and.w	r3, r3, #8
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|Uart_Enable_Pin, GPIO_PIN_RESET);
 80016c0:	2200      	movs	r2, #0
 80016c2:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 80016c6:	482d      	ldr	r0, [pc, #180]	@ (800177c <MX_GPIO_Init+0x148>)
 80016c8:	f000 ff2b 	bl	8002522 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016d2:	482b      	ldr	r0, [pc, #172]	@ (8001780 <MX_GPIO_Init+0x14c>)
 80016d4:	f000 ff25 	bl	8002522 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boot_Pin_Control_GPIO_Port, Boot_Pin_Control_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2102      	movs	r1, #2
 80016dc:	4829      	ldr	r0, [pc, #164]	@ (8001784 <MX_GPIO_Init+0x150>)
 80016de:	f000 ff20 	bl	8002522 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin Uart_Enable_Pin */
  GPIO_InitStruct.Pin = LED_Pin|Uart_Enable_Pin;
 80016e2:	f44f 5304 	mov.w	r3, #8448	@ 0x2100
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2302      	movs	r3, #2
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4820      	ldr	r0, [pc, #128]	@ (800177c <MX_GPIO_Init+0x148>)
 80016fc:	f000 fd76 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_A_Pin */
  GPIO_InitStruct.Pin = MUX_A_Pin;
 8001700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0318 	add.w	r3, r7, #24
 8001716:	4619      	mov	r1, r3
 8001718:	4819      	ldr	r0, [pc, #100]	@ (8001780 <MX_GPIO_Init+0x14c>)
 800171a:	f000 fd67 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800171e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	4619      	mov	r1, r3
 8001732:	4814      	ldr	r0, [pc, #80]	@ (8001784 <MX_GPIO_Init+0x150>)
 8001734:	f000 fd5a 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001738:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001742:	2301      	movs	r3, #1
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4619      	mov	r1, r3
 800174c:	480e      	ldr	r0, [pc, #56]	@ (8001788 <MX_GPIO_Init+0x154>)
 800174e:	f000 fd4d 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : Boot_Pin_Control_Pin */
  GPIO_InitStruct.Pin = Boot_Pin_Control_Pin;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Boot_Pin_Control_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4619      	mov	r1, r3
 8001768:	4806      	ldr	r0, [pc, #24]	@ (8001784 <MX_GPIO_Init+0x150>)
 800176a:	f000 fd3f 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	@ 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	40011000 	.word	0x40011000
 8001780:	40011800 	.word	0x40011800
 8001784:	40011400 	.word	0x40011400
 8001788:	40010800 	.word	0x40010800

0800178c <Boot_Process_Init>:

/* USER CODE BEGIN 4 */

/* Application Function */
void Boot_Process_Init (void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
	uint32_t scan = 0xFFFFFFFF, counter = 0;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
	uint32_t SIZE=0;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
	//uint16_t flash_size_kb = *(const uint16_t*)FLASHSIZE_BASE;

	printf("***System Boot demo***\r\n");
 80017a0:	4827      	ldr	r0, [pc, #156]	@ (8001840 <Boot_Process_Init+0xb4>)
 80017a2:	f002 fdc3 	bl	800432c <puts>

	/* Synchronize with target bootloader ###################################### */
	stm32_init(&huart4,&BootDataCmd);
 80017a6:	4927      	ldr	r1, [pc, #156]	@ (8001844 <Boot_Process_Init+0xb8>)
 80017a8:	4827      	ldr	r0, [pc, #156]	@ (8001848 <Boot_Process_Init+0xbc>)
 80017aa:	f7fe fedf 	bl	800056c <stm32_init>
	stm32_read_memory(&huart4, TARGET_OPB_START_ADDRESS, RxBuffer, 32);
 80017ae:	2320      	movs	r3, #32
 80017b0:	4a26      	ldr	r2, [pc, #152]	@ (800184c <Boot_Process_Init+0xc0>)
 80017b2:	4927      	ldr	r1, [pc, #156]	@ (8001850 <Boot_Process_Init+0xc4>)
 80017b4:	4824      	ldr	r0, [pc, #144]	@ (8001848 <Boot_Process_Init+0xbc>)
 80017b6:	f7ff fa43 	bl	8000c40 <stm32_read_memory>
	stm32_erase_memory(&huart4,EMEM_COMMAND,1,0xFF);
 80017ba:	23ff      	movs	r3, #255	@ 0xff
 80017bc:	2201      	movs	r2, #1
 80017be:	2143      	movs	r1, #67	@ 0x43
 80017c0:	4821      	ldr	r0, [pc, #132]	@ (8001848 <Boot_Process_Init+0xbc>)
 80017c2:	f7ff fc53 	bl	800106c <stm32_erase_memory>

	/* Verifies when scan variable achieved last data of the Image to be programmed */
	while (scan == 0xFFFFFFFF)
 80017c6:	e008      	b.n	80017da <Boot_Process_Init+0x4e>
	{
		counter++;
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3301      	adds	r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
		scan = *(uint32_t*)(FLASH_SIZE - (4*counter));
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f5c3 3380 	rsb	r3, r3, #65536	@ 0x10000
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
	while (scan == 0xFFFFFFFF)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d0f2      	beq.n	80017c8 <Boot_Process_Init+0x3c>
	 * FLASH_SIZE: Host total flash size
	 * IMAGE_ADDRESS: Start address of the image to be Programmed
	 * FLASH_BASE:Host Flash start address
	 * (4*(Counter-1)): Represents the amount of FLASH to achieve the final data of the Image to be programmed
	 */
	SIZE = (FLASH_SIZE - (IMAGE_ADDRESS - FLASH_BASE) - ((counter)*4));
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	603b      	str	r3, [r7, #0]

	/* Writes up to 256Bytes of memory, it can be from FLASH or RAM */
	for(uint16_t i = 0; i < SIZE; i+=256)
 80017ec:	2300      	movs	r3, #0
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	e011      	b.n	8001816 <Boot_Process_Init+0x8a>
	{
		stm32_write_memory(&huart4, (TARGET_FLASH_START_ADDRESS+i), ((uint8_t*)IMAGE_ADDRESS+i), 256);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80017f8:	4619      	mov	r1, r3
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	f103 6200 	add.w	r2, r3, #134217728	@ 0x8000000
 8001800:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
 8001804:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001808:	480f      	ldr	r0, [pc, #60]	@ (8001848 <Boot_Process_Init+0xbc>)
 800180a:	f7ff fa95 	bl	8000d38 <stm32_write_memory>
	for(uint16_t i = 0; i < SIZE; i+=256)
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d8e9      	bhi.n	80017f2 <Boot_Process_Init+0x66>
	}

	/* Reads up to 256Bytes of memory, it can be from FLASH or RAM */
	stm32_read_memory(&huart4, TARGET_FLASH_START_ADDRESS, RxBuffer, 32);
 800181e:	2320      	movs	r3, #32
 8001820:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <Boot_Process_Init+0xc0>)
 8001822:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001826:	4808      	ldr	r0, [pc, #32]	@ (8001848 <Boot_Process_Init+0xbc>)
 8001828:	f7ff fa0a 	bl	8000c40 <stm32_read_memory>

	stm32_go(&huart4, TARGET_FLASH_START_ADDRESS);
 800182c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001830:	4805      	ldr	r0, [pc, #20]	@ (8001848 <Boot_Process_Init+0xbc>)
 8001832:	f7ff fd8d 	bl	8001350 <stm32_go>

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	080052e0 	.word	0x080052e0
 8001844:	20000138 	.word	0x20000138
 8001848:	20000088 	.word	0x20000088
 800184c:	20000118 	.word	0x20000118
 8001850:	1ffff800 	.word	0x1ffff800

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <Error_Handler+0x8>

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_MspInit+0x5c>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <HAL_MspInit+0x5c>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <HAL_MspInit+0x5c>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b0f      	ldr	r3, [pc, #60]	@ (80018bc <HAL_MspInit+0x5c>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_MspInit+0x5c>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <HAL_MspInit+0x5c>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_MspInit+0x60>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_MspInit+0x60>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000

080018c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	@ 0x30
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a46      	ldr	r2, [pc, #280]	@ (80019f8 <HAL_UART_MspInit+0x134>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d13a      	bne.n	800195a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80018e4:	4b45      	ldr	r3, [pc, #276]	@ (80019fc <HAL_UART_MspInit+0x138>)
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	4a44      	ldr	r2, [pc, #272]	@ (80019fc <HAL_UART_MspInit+0x138>)
 80018ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018ee:	61d3      	str	r3, [r2, #28]
 80018f0:	4b42      	ldr	r3, [pc, #264]	@ (80019fc <HAL_UART_MspInit+0x138>)
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fc:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <HAL_UART_MspInit+0x138>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a3e      	ldr	r2, [pc, #248]	@ (80019fc <HAL_UART_MspInit+0x138>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b3c      	ldr	r3, [pc, #240]	@ (80019fc <HAL_UART_MspInit+0x138>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001914:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800191e:	2303      	movs	r3, #3
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 031c 	add.w	r3, r7, #28
 8001926:	4619      	mov	r1, r3
 8001928:	4835      	ldr	r0, [pc, #212]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 800192a:	f000 fc5f 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800192e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	482f      	ldr	r0, [pc, #188]	@ (8001a00 <HAL_UART_MspInit+0x13c>)
 8001944:	f000 fc52 	bl	80021ec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	2034      	movs	r0, #52	@ 0x34
 800194e:	f000 fac8 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001952:	2034      	movs	r0, #52	@ 0x34
 8001954:	f000 fae1 	bl	8001f1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001958:	e04a      	b.n	80019f0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a29      	ldr	r2, [pc, #164]	@ (8001a04 <HAL_UART_MspInit+0x140>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d145      	bne.n	80019f0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_UART_MspInit+0x138>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a24      	ldr	r2, [pc, #144]	@ (80019fc <HAL_UART_MspInit+0x138>)
 800196a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <HAL_UART_MspInit+0x138>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197c:	4b1f      	ldr	r3, [pc, #124]	@ (80019fc <HAL_UART_MspInit+0x138>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a1e      	ldr	r2, [pc, #120]	@ (80019fc <HAL_UART_MspInit+0x138>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b1c      	ldr	r3, [pc, #112]	@ (80019fc <HAL_UART_MspInit+0x138>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4818      	ldr	r0, [pc, #96]	@ (8001a08 <HAL_UART_MspInit+0x144>)
 80019a8:	f000 fc20 	bl	80021ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4812      	ldr	r0, [pc, #72]	@ (8001a08 <HAL_UART_MspInit+0x144>)
 80019c0:	f000 fc14 	bl	80021ec <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_UART_MspInit+0x148>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019cc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019da:	4a0c      	ldr	r2, [pc, #48]	@ (8001a0c <HAL_UART_MspInit+0x148>)
 80019dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019de:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	2025      	movs	r0, #37	@ 0x25
 80019e6:	f000 fa7c 	bl	8001ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019ea:	2025      	movs	r0, #37	@ 0x25
 80019ec:	f000 fa95 	bl	8001f1a <HAL_NVIC_EnableIRQ>
}
 80019f0:	bf00      	nop
 80019f2:	3730      	adds	r7, #48	@ 0x30
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40004c00 	.word	0x40004c00
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40011000 	.word	0x40011000
 8001a04:	40013800 	.word	0x40013800
 8001a08:	40010c00 	.word	0x40010c00
 8001a0c:	40010000 	.word	0x40010000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a60:	f000 f928 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	@ (8001a78 <USART1_IRQHandler+0x10>)
 8001a6e:	f001 fd1d 	bl	80034ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200000d0 	.word	0x200000d0

08001a7c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a80:	4802      	ldr	r0, [pc, #8]	@ (8001a8c <UART4_IRQHandler+0x10>)
 8001a82:	f001 fd13 	bl	80034ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000088 	.word	0x20000088

08001a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e00a      	b.n	8001ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	60ba      	str	r2, [r7, #8]
 8001aae:	b2ca      	uxtb	r2, r1
 8001ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf0      	blt.n	8001aa2 <_read+0x12>
  }

  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	e009      	b.n	8001af0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	60ba      	str	r2, [r7, #8]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fc8d 	bl	8001404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbf1      	blt.n	8001adc <_write+0x12>
  }
  return len;
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <_close>:

int _close(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b28:	605a      	str	r2, [r3, #4]
  return 0;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <_isatty>:

int _isatty(int file)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
	...

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f002 fd08 	bl	80045a8 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20010000 	.word	0x20010000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	2000014c 	.word	0x2000014c
 8001bcc:	200002a0 	.word	0x200002a0

08001bd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff fff8 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480b      	ldr	r0, [pc, #44]	@ (8001c10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001be2:	490c      	ldr	r1, [pc, #48]	@ (8001c14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001be4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a09      	ldr	r2, [pc, #36]	@ (8001c1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bf8:	4c09      	ldr	r4, [pc, #36]	@ (8001c20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001c06:	f002 fcd5 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c0a:	f7ff fc21 	bl	8001450 <main>
  bx lr
 8001c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c18:	08005374 	.word	0x08005374
  ldr r2, =_sbss
 8001c1c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c20:	200002a0 	.word	0x200002a0

08001c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_2_IRQHandler>
	...

08001c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <HAL_Init+0x28>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a07      	ldr	r2, [pc, #28]	@ (8001c50 <HAL_Init+0x28>)
 8001c32:	f043 0310 	orr.w	r3, r3, #16
 8001c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f000 f947 	bl	8001ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c3e:	200f      	movs	r0, #15
 8001c40:	f000 f808 	bl	8001c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c44:	f7ff fe0c 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40022000 	.word	0x40022000

08001c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_InitTick+0x54>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <HAL_InitTick+0x58>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f95f 	bl	8001f36 <HAL_SYSTICK_Config>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00e      	b.n	8001ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b0f      	cmp	r3, #15
 8001c86:	d80a      	bhi.n	8001c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f000 f927 	bl	8001ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c94:	4a06      	ldr	r2, [pc, #24]	@ (8001cb0 <HAL_InitTick+0x5c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <HAL_IncTick+0x1c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b05      	ldr	r3, [pc, #20]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a03      	ldr	r2, [pc, #12]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000150 	.word	0x20000150

08001cd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return uwTick;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	@ (8001ce8 <HAL_GetTick+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	20000150 	.word	0x20000150

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff fff0 	bl	8001cd8 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffe0 	bl	8001cd8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4906      	ldr	r1, [pc, #24]	@ (8001dcc <__NVIC_EnableIRQ+0x34>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	e000e100 	.word	0xe000e100

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	@ (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	@ (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3b01      	subs	r3, #1
 8001e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e98:	d301      	bcc.n	8001e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00f      	b.n	8001ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec8 <SysTick_Config+0x40>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f7ff ff90 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb6:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <SysTick_Config+0x40>)
 8001eb8:	2207      	movs	r2, #7
 8001eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	e000e010 	.word	0xe000e010

08001ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff ff2d 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff42 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff35 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffa2 	bl	8001e88 <SysTick_Config>
 8001f44:	4603      	mov	r3, r0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b085      	sub	sp, #20
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d008      	beq.n	8001f78 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e020      	b.n	8001fba <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020e 	bic.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d005      	beq.n	8001fe8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e0d6      	b.n	8002196 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 020e 	bic.w	r2, r2, #14
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b64      	ldr	r3, [pc, #400]	@ (80021a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002010:	429a      	cmp	r2, r3
 8002012:	d958      	bls.n	80020c6 <HAL_DMA_Abort_IT+0x102>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a62      	ldr	r2, [pc, #392]	@ (80021a4 <HAL_DMA_Abort_IT+0x1e0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04f      	beq.n	80020be <HAL_DMA_Abort_IT+0xfa>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a61      	ldr	r2, [pc, #388]	@ (80021a8 <HAL_DMA_Abort_IT+0x1e4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d048      	beq.n	80020ba <HAL_DMA_Abort_IT+0xf6>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a5f      	ldr	r2, [pc, #380]	@ (80021ac <HAL_DMA_Abort_IT+0x1e8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_DMA_Abort_IT+0xf0>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_DMA_Abort_IT+0x1ec>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d038      	beq.n	80020ae <HAL_DMA_Abort_IT+0xea>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5c      	ldr	r2, [pc, #368]	@ (80021b4 <HAL_DMA_Abort_IT+0x1f0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d030      	beq.n	80020a8 <HAL_DMA_Abort_IT+0xe4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a5b      	ldr	r2, [pc, #364]	@ (80021b8 <HAL_DMA_Abort_IT+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d028      	beq.n	80020a2 <HAL_DMA_Abort_IT+0xde>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a52      	ldr	r2, [pc, #328]	@ (80021a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d020      	beq.n	800209c <HAL_DMA_Abort_IT+0xd8>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a57      	ldr	r2, [pc, #348]	@ (80021bc <HAL_DMA_Abort_IT+0x1f8>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d019      	beq.n	8002098 <HAL_DMA_Abort_IT+0xd4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a55      	ldr	r2, [pc, #340]	@ (80021c0 <HAL_DMA_Abort_IT+0x1fc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d012      	beq.n	8002094 <HAL_DMA_Abort_IT+0xd0>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a54      	ldr	r2, [pc, #336]	@ (80021c4 <HAL_DMA_Abort_IT+0x200>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d00a      	beq.n	800208e <HAL_DMA_Abort_IT+0xca>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a52      	ldr	r2, [pc, #328]	@ (80021c8 <HAL_DMA_Abort_IT+0x204>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d102      	bne.n	8002088 <HAL_DMA_Abort_IT+0xc4>
 8002082:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002086:	e01b      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 8002088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800208c:	e018      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 800208e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002092:	e015      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 8002094:	2310      	movs	r3, #16
 8002096:	e013      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 8002098:	2301      	movs	r3, #1
 800209a:	e011      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 800209c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020a0:	e00e      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020a6:	e00b      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ac:	e008      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020b2:	e005      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020b8:	e002      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020ba:	2310      	movs	r3, #16
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_Abort_IT+0xfc>
 80020be:	2301      	movs	r3, #1
 80020c0:	4a42      	ldr	r2, [pc, #264]	@ (80021cc <HAL_DMA_Abort_IT+0x208>)
 80020c2:	6053      	str	r3, [r2, #4]
 80020c4:	e057      	b.n	8002176 <HAL_DMA_Abort_IT+0x1b2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <HAL_DMA_Abort_IT+0x1e0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04f      	beq.n	8002170 <HAL_DMA_Abort_IT+0x1ac>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a34      	ldr	r2, [pc, #208]	@ (80021a8 <HAL_DMA_Abort_IT+0x1e4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d048      	beq.n	800216c <HAL_DMA_Abort_IT+0x1a8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	@ (80021ac <HAL_DMA_Abort_IT+0x1e8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Abort_IT+0x1a2>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a31      	ldr	r2, [pc, #196]	@ (80021b0 <HAL_DMA_Abort_IT+0x1ec>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d038      	beq.n	8002160 <HAL_DMA_Abort_IT+0x19c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <HAL_DMA_Abort_IT+0x1f0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d030      	beq.n	800215a <HAL_DMA_Abort_IT+0x196>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2e      	ldr	r2, [pc, #184]	@ (80021b8 <HAL_DMA_Abort_IT+0x1f4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d028      	beq.n	8002154 <HAL_DMA_Abort_IT+0x190>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d020      	beq.n	800214e <HAL_DMA_Abort_IT+0x18a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2a      	ldr	r2, [pc, #168]	@ (80021bc <HAL_DMA_Abort_IT+0x1f8>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_DMA_Abort_IT+0x186>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a29      	ldr	r2, [pc, #164]	@ (80021c0 <HAL_DMA_Abort_IT+0x1fc>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d012      	beq.n	8002146 <HAL_DMA_Abort_IT+0x182>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a27      	ldr	r2, [pc, #156]	@ (80021c4 <HAL_DMA_Abort_IT+0x200>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00a      	beq.n	8002140 <HAL_DMA_Abort_IT+0x17c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a26      	ldr	r2, [pc, #152]	@ (80021c8 <HAL_DMA_Abort_IT+0x204>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d102      	bne.n	800213a <HAL_DMA_Abort_IT+0x176>
 8002134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002138:	e01b      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 800213a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800213e:	e018      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002140:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002144:	e015      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002146:	2310      	movs	r3, #16
 8002148:	e013      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 800214a:	2301      	movs	r3, #1
 800214c:	e011      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 800214e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002152:	e00e      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002154:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002158:	e00b      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 800215a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800215e:	e008      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002164:	e005      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800216a:	e002      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 800216c:	2310      	movs	r3, #16
 800216e:	e000      	b.n	8002172 <HAL_DMA_Abort_IT+0x1ae>
 8002170:	2301      	movs	r3, #1
 8002172:	4a17      	ldr	r2, [pc, #92]	@ (80021d0 <HAL_DMA_Abort_IT+0x20c>)
 8002174:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
    } 
  }
  return status;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40020080 	.word	0x40020080
 80021a4:	40020008 	.word	0x40020008
 80021a8:	4002001c 	.word	0x4002001c
 80021ac:	40020030 	.word	0x40020030
 80021b0:	40020044 	.word	0x40020044
 80021b4:	40020058 	.word	0x40020058
 80021b8:	4002006c 	.word	0x4002006c
 80021bc:	40020408 	.word	0x40020408
 80021c0:	4002041c 	.word	0x4002041c
 80021c4:	40020430 	.word	0x40020430
 80021c8:	40020444 	.word	0x40020444
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b08b      	sub	sp, #44	@ 0x2c
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021fa:	2300      	movs	r3, #0
 80021fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fe:	e169      	b.n	80024d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002200:	2201      	movs	r2, #1
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8158 	bne.w	80024ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4a9a      	ldr	r2, [pc, #616]	@ (800248c <HAL_GPIO_Init+0x2a0>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d05e      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
 8002228:	4a98      	ldr	r2, [pc, #608]	@ (800248c <HAL_GPIO_Init+0x2a0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d875      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 800222e:	4a98      	ldr	r2, [pc, #608]	@ (8002490 <HAL_GPIO_Init+0x2a4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d058      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
 8002234:	4a96      	ldr	r2, [pc, #600]	@ (8002490 <HAL_GPIO_Init+0x2a4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d86f      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 800223a:	4a96      	ldr	r2, [pc, #600]	@ (8002494 <HAL_GPIO_Init+0x2a8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d052      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
 8002240:	4a94      	ldr	r2, [pc, #592]	@ (8002494 <HAL_GPIO_Init+0x2a8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d869      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 8002246:	4a94      	ldr	r2, [pc, #592]	@ (8002498 <HAL_GPIO_Init+0x2ac>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d04c      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
 800224c:	4a92      	ldr	r2, [pc, #584]	@ (8002498 <HAL_GPIO_Init+0x2ac>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d863      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 8002252:	4a92      	ldr	r2, [pc, #584]	@ (800249c <HAL_GPIO_Init+0x2b0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d046      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
 8002258:	4a90      	ldr	r2, [pc, #576]	@ (800249c <HAL_GPIO_Init+0x2b0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d85d      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 800225e:	2b12      	cmp	r3, #18
 8002260:	d82a      	bhi.n	80022b8 <HAL_GPIO_Init+0xcc>
 8002262:	2b12      	cmp	r3, #18
 8002264:	d859      	bhi.n	800231a <HAL_GPIO_Init+0x12e>
 8002266:	a201      	add	r2, pc, #4	@ (adr r2, 800226c <HAL_GPIO_Init+0x80>)
 8002268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226c:	080022e7 	.word	0x080022e7
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080022d3 	.word	0x080022d3
 8002278:	08002315 	.word	0x08002315
 800227c:	0800231b 	.word	0x0800231b
 8002280:	0800231b 	.word	0x0800231b
 8002284:	0800231b 	.word	0x0800231b
 8002288:	0800231b 	.word	0x0800231b
 800228c:	0800231b 	.word	0x0800231b
 8002290:	0800231b 	.word	0x0800231b
 8002294:	0800231b 	.word	0x0800231b
 8002298:	0800231b 	.word	0x0800231b
 800229c:	0800231b 	.word	0x0800231b
 80022a0:	0800231b 	.word	0x0800231b
 80022a4:	0800231b 	.word	0x0800231b
 80022a8:	0800231b 	.word	0x0800231b
 80022ac:	0800231b 	.word	0x0800231b
 80022b0:	080022c9 	.word	0x080022c9
 80022b4:	080022dd 	.word	0x080022dd
 80022b8:	4a79      	ldr	r2, [pc, #484]	@ (80024a0 <HAL_GPIO_Init+0x2b4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022be:	e02c      	b.n	800231a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e029      	b.n	800231c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	3304      	adds	r3, #4
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e024      	b.n	800231c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	3308      	adds	r3, #8
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e01f      	b.n	800231c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	330c      	adds	r3, #12
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	e01a      	b.n	800231c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ee:	2304      	movs	r3, #4
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e013      	b.n	800231c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	611a      	str	r2, [r3, #16]
          break;
 8002306:	e009      	b.n	800231c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	615a      	str	r2, [r3, #20]
          break;
 8002312:	e003      	b.n	800231c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	e000      	b.n	800231c <HAL_GPIO_Init+0x130>
          break;
 800231a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2bff      	cmp	r3, #255	@ 0xff
 8002320:	d801      	bhi.n	8002326 <HAL_GPIO_Init+0x13a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	e001      	b.n	800232a <HAL_GPIO_Init+0x13e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2bff      	cmp	r3, #255	@ 0xff
 8002330:	d802      	bhi.n	8002338 <HAL_GPIO_Init+0x14c>
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	e002      	b.n	800233e <HAL_GPIO_Init+0x152>
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	3b08      	subs	r3, #8
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	210f      	movs	r1, #15
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	6a39      	ldr	r1, [r7, #32]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 80b1 	beq.w	80024ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800236c:	4b4d      	ldr	r3, [pc, #308]	@ (80024a4 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	4a4c      	ldr	r2, [pc, #304]	@ (80024a4 <HAL_GPIO_Init+0x2b8>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6193      	str	r3, [r2, #24]
 8002378:	4b4a      	ldr	r3, [pc, #296]	@ (80024a4 <HAL_GPIO_Init+0x2b8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002384:	4a48      	ldr	r2, [pc, #288]	@ (80024a8 <HAL_GPIO_Init+0x2bc>)
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a40      	ldr	r2, [pc, #256]	@ (80024ac <HAL_GPIO_Init+0x2c0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d013      	beq.n	80023d8 <HAL_GPIO_Init+0x1ec>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3f      	ldr	r2, [pc, #252]	@ (80024b0 <HAL_GPIO_Init+0x2c4>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00d      	beq.n	80023d4 <HAL_GPIO_Init+0x1e8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a3e      	ldr	r2, [pc, #248]	@ (80024b4 <HAL_GPIO_Init+0x2c8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d007      	beq.n	80023d0 <HAL_GPIO_Init+0x1e4>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a3d      	ldr	r2, [pc, #244]	@ (80024b8 <HAL_GPIO_Init+0x2cc>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_GPIO_Init+0x1e0>
 80023c8:	2303      	movs	r3, #3
 80023ca:	e006      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023cc:	2304      	movs	r3, #4
 80023ce:	e004      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e002      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_GPIO_Init+0x1ee>
 80023d8:	2300      	movs	r3, #0
 80023da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023dc:	f002 0203 	and.w	r2, r2, #3
 80023e0:	0092      	lsls	r2, r2, #2
 80023e2:	4093      	lsls	r3, r2
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023ea:	492f      	ldr	r1, [pc, #188]	@ (80024a8 <HAL_GPIO_Init+0x2bc>)
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002404:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	492c      	ldr	r1, [pc, #176]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	4313      	orrs	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002412:	4b2a      	ldr	r3, [pc, #168]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	43db      	mvns	r3, r3
 800241a:	4928      	ldr	r1, [pc, #160]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800241c:	4013      	ands	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d006      	beq.n	800243a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800242c:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	4922      	ldr	r1, [pc, #136]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4313      	orrs	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	43db      	mvns	r3, r3
 8002442:	491e      	ldr	r1, [pc, #120]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002444:	4013      	ands	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4918      	ldr	r1, [pc, #96]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4914      	ldr	r1, [pc, #80]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d021      	beq.n	80024c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800247c:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	490e      	ldr	r1, [pc, #56]	@ (80024bc <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]
 8002488:	e021      	b.n	80024ce <HAL_GPIO_Init+0x2e2>
 800248a:	bf00      	nop
 800248c:	10320000 	.word	0x10320000
 8002490:	10310000 	.word	0x10310000
 8002494:	10220000 	.word	0x10220000
 8002498:	10210000 	.word	0x10210000
 800249c:	10120000 	.word	0x10120000
 80024a0:	10110000 	.word	0x10110000
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40010800 	.word	0x40010800
 80024b0:	40010c00 	.word	0x40010c00
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40011400 	.word	0x40011400
 80024bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_GPIO_Init+0x304>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	4909      	ldr	r1, [pc, #36]	@ (80024f0 <HAL_GPIO_Init+0x304>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	3301      	adds	r3, #1
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f47f ae8e 	bne.w	8002200 <HAL_GPIO_Init+0x14>
  }
}
 80024e4:	bf00      	nop
 80024e6:	bf00      	nop
 80024e8:	372c      	adds	r7, #44	@ 0x2c
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	40010400 	.word	0x40010400

080024f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	887b      	ldrh	r3, [r7, #2]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e001      	b.n	8002516 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002532:	787b      	ldrb	r3, [r7, #1]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002538:	887a      	ldrh	r2, [r7, #2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800253e:	e003      	b.n	8002548 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002540:	887b      	ldrh	r3, [r7, #2]
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	611a      	str	r2, [r3, #16]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43d9      	mvns	r1, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e304      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a4:	4b92      	ldr	r3, [pc, #584]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00c      	beq.n	80025ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b0:	4b8f      	ldr	r3, [pc, #572]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d112      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
 80025bc:	4b8c      	ldr	r3, [pc, #560]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025c8:	d10b      	bne.n	80025e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ca:	4b89      	ldr	r3, [pc, #548]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d06c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x12c>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d168      	bne.n	80026b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e2de      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d106      	bne.n	80025fa <HAL_RCC_OscConfig+0x76>
 80025ec:	4b80      	ldr	r3, [pc, #512]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a7f      	ldr	r2, [pc, #508]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	e02e      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x98>
 8002602:	4b7b      	ldr	r3, [pc, #492]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a7a      	ldr	r2, [pc, #488]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b78      	ldr	r3, [pc, #480]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a77      	ldr	r2, [pc, #476]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e01d      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0xbc>
 8002626:	4b72      	ldr	r3, [pc, #456]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a71      	ldr	r2, [pc, #452]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e00b      	b.n	8002658 <HAL_RCC_OscConfig+0xd4>
 8002640:	4b6b      	ldr	r3, [pc, #428]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a6a      	ldr	r2, [pc, #424]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b68      	ldr	r3, [pc, #416]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a67      	ldr	r2, [pc, #412]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7ff fb3a 	bl	8001cd8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002668:	f7ff fb36 	bl	8001cd8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	@ 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e292      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267a:	4b5d      	ldr	r3, [pc, #372]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0xe4>
 8002686:	e014      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fb26 	bl	8001cd8 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7ff fb22 	bl	8001cd8 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	@ 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e27e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x10c>
 80026ae:	e000      	b.n	80026b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d063      	beq.n	8002786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026be:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d11c      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
 80026d6:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d116      	bne.n	8002710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d001      	beq.n	80026fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e252      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b3d      	ldr	r3, [pc, #244]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4939      	ldr	r1, [pc, #228]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800270e:	e03a      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7ff fadb 	bl	8001cd8 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002726:	f7ff fad7 	bl	8001cd8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e233      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002738:	4b2d      	ldr	r3, [pc, #180]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002744:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4927      	ldr	r1, [pc, #156]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e015      	b.n	8002786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275a:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_RCC_OscConfig+0x270>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff faba 	bl	8001cd8 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002768:	f7ff fab6 	bl	8001cd8 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e212      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277a:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03a      	beq.n	8002808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d019      	beq.n	80027ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a0:	f7ff fa9a 	bl	8001cd8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff fa96 	bl	8001cd8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e1f2      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ba:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f000 fc02 	bl	8002fd0 <RCC_Delay>
 80027cc:	e01c      	b.n	8002808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_OscConfig+0x274>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff fa80 	bl	8001cd8 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027da:	e00f      	b.n	80027fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff fa7c 	bl	8001cd8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d908      	bls.n	80027fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e1d8      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000
 80027f4:	42420000 	.word	0x42420000
 80027f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b9b      	ldr	r3, [pc, #620]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1e9      	bne.n	80027dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a6 	beq.w	8002962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b94      	ldr	r3, [pc, #592]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10d      	bne.n	8002842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	4b91      	ldr	r3, [pc, #580]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	4a90      	ldr	r2, [pc, #576]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800282c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002830:	61d3      	str	r3, [r2, #28]
 8002832:	4b8e      	ldr	r3, [pc, #568]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800283e:	2301      	movs	r3, #1
 8002840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b8b      	ldr	r3, [pc, #556]	@ (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d118      	bne.n	8002880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a87      	ldr	r2, [pc, #540]	@ (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285a:	f7ff fa3d 	bl	8001cd8 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002862:	f7ff fa39 	bl	8001cd8 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b64      	cmp	r3, #100	@ 0x64
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e195      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002874:	4b7e      	ldr	r3, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d106      	bne.n	8002896 <HAL_RCC_OscConfig+0x312>
 8002888:	4b78      	ldr	r3, [pc, #480]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4a77      	ldr	r2, [pc, #476]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	e02d      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x334>
 800289e:	4b73      	ldr	r3, [pc, #460]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a72      	ldr	r2, [pc, #456]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b70      	ldr	r3, [pc, #448]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a6f      	ldr	r2, [pc, #444]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
 80028b6:	e01c      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10c      	bne.n	80028da <HAL_RCC_OscConfig+0x356>
 80028c0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a69      	ldr	r2, [pc, #420]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6213      	str	r3, [r2, #32]
 80028cc:	4b67      	ldr	r3, [pc, #412]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4a66      	ldr	r2, [pc, #408]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6213      	str	r3, [r2, #32]
 80028d8:	e00b      	b.n	80028f2 <HAL_RCC_OscConfig+0x36e>
 80028da:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a63      	ldr	r2, [pc, #396]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a60      	ldr	r2, [pc, #384]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d015      	beq.n	8002926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff f9ed 	bl	8001cd8 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7ff f9e9 	bl	8001cd8 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e143      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ee      	beq.n	8002902 <HAL_RCC_OscConfig+0x37e>
 8002924:	e014      	b.n	8002950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7ff f9d7 	bl	8001cd8 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292c:	e00a      	b.n	8002944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7ff f9d3 	bl	8001cd8 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293c:	4293      	cmp	r3, r2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e12d      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	4b49      	ldr	r3, [pc, #292]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ee      	bne.n	800292e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b45      	ldr	r3, [pc, #276]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a44      	ldr	r2, [pc, #272]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 808c 	beq.w	8002a84 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800296c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d10e      	bne.n	8002998 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800297a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002982:	2b08      	cmp	r3, #8
 8002984:	d108      	bne.n	8002998 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002992:	d101      	bne.n	8002998 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e103      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	2b02      	cmp	r3, #2
 800299e:	d14e      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80029ac:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0ef      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <HAL_RCC_OscConfig+0x4f0>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7ff f987 	bl	8001cd8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80029ce:	f7ff f983 	bl	8001cd8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b64      	cmp	r3, #100	@ 0x64
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0df      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80029e0:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80029ec:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f8:	491c      	ldr	r1, [pc, #112]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4918      	ldr	r1, [pc, #96]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002a10:	4b18      	ldr	r3, [pc, #96]	@ (8002a74 <HAL_RCC_OscConfig+0x4f0>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7ff f95f 	bl	8001cd8 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a1e:	f7ff f95b 	bl	8001cd8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	@ 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0b7      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002a30:	4b0e      	ldr	r3, [pc, #56]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x49a>
 8002a3c:	e022      	b.n	8002a84 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_RCC_OscConfig+0x4e8>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_RCC_OscConfig+0x4f0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff f942 	bl	8001cd8 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a58:	f7ff f93e 	bl	8001cd8 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e09a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002a78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e9      	bne.n	8002a58 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8088 	beq.w	8002b9e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8e:	4b46      	ldr	r3, [pc, #280]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d068      	beq.n	8002b6c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d14d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b42      	ldr	r3, [pc, #264]	@ (8002bac <HAL_RCC_OscConfig+0x628>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f916 	bl	8001cd8 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7ff f912 	bl	8001cd8 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e06e      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ad6:	d10f      	bne.n	8002af8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002ad8:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4931      	ldr	r1, [pc, #196]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ae6:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aea:	f023 020f 	bic.w	r2, r3, #15
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	492d      	ldr	r1, [pc, #180]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	4927      	ldr	r1, [pc, #156]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <HAL_RCC_OscConfig+0x628>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b16:	f7ff f8df 	bl	8001cd8 <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7ff f8db 	bl	8001cd8 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e037      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x59a>
 8002b3c:	e02f      	b.n	8002b9e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x628>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b44:	f7ff f8c8 	bl	8001cd8 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7ff f8c4 	bl	8001cd8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e020      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5e:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x5c8>
 8002b6a:	e018      	b.n	8002b9e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e013      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_OscConfig+0x624>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d106      	bne.n	8002b9a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d001      	beq.n	8002b9e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	42420060 	.word	0x42420060

08002bb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0d0      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d910      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd2:	4b67      	ldr	r3, [pc, #412]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f023 0207 	bic.w	r2, r3, #7
 8002bda:	4965      	ldr	r1, [pc, #404]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	4b63      	ldr	r3, [pc, #396]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0b8      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d020      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c0c:	4b59      	ldr	r3, [pc, #356]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a58      	ldr	r2, [pc, #352]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c24:	4b53      	ldr	r3, [pc, #332]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	4a52      	ldr	r2, [pc, #328]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c30:	4b50      	ldr	r3, [pc, #320]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	494d      	ldr	r1, [pc, #308]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d040      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c56:	4b47      	ldr	r3, [pc, #284]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d115      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e073      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e06b      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4936      	ldr	r1, [pc, #216]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca0:	f7ff f81a 	bl	8001cd8 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7ff f816 	bl	8001cd8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e053      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b27      	ldr	r3, [pc, #156]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d210      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0207 	bic.w	r2, r3, #7
 8002ce6:	4922      	ldr	r1, [pc, #136]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e032      	b.n	8002d66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d0c:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4916      	ldr	r1, [pc, #88]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d2a:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	490e      	ldr	r1, [pc, #56]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 f859 	bl	8002df4 <HAL_RCC_GetSysClockFreq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	490a      	ldr	r1, [pc, #40]	@ (8002d78 <HAL_RCC_ClockConfig+0x1c8>)
 8002d50:	5ccb      	ldrb	r3, [r1, r3]
 8002d52:	fa22 f303 	lsr.w	r3, r2, r3
 8002d56:	4a09      	ldr	r2, [pc, #36]	@ (8002d7c <HAL_RCC_ClockConfig+0x1cc>)
 8002d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <HAL_RCC_ClockConfig+0x1d0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe ff78 	bl	8001c54 <HAL_InitTick>

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40022000 	.word	0x40022000
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080052f8 	.word	0x080052f8
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	20000004 	.word	0x20000004

08002d84 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002d90:	f107 0318 	add.w	r3, r7, #24
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002daa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dae:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_RCC_MCOConfig+0x68>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <HAL_RCC_MCOConfig+0x68>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6193      	str	r3, [r2, #24]
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_MCOConfig+0x68>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002dc8:	f107 0318 	add.w	r3, r7, #24
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4808      	ldr	r0, [pc, #32]	@ (8002df0 <HAL_RCC_MCOConfig+0x6c>)
 8002dd0:	f7ff fa0c 	bl	80021ec <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <HAL_RCC_MCOConfig+0x68>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002ddc:	4903      	ldr	r1, [pc, #12]	@ (8002dec <HAL_RCC_MCOConfig+0x68>)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	604b      	str	r3, [r1, #4]
}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	@ 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010800 	.word	0x40010800

08002df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b08e      	sub	sp, #56	@ 0x38
 8002dfa:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e04:	2300      	movs	r3, #0
 8002e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e18:	4b4e      	ldr	r3, [pc, #312]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d002      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d003      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x40>
 8002e2c:	e089      	b.n	8002f42 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002e30:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e32:	e089      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4b47      	ldr	r3, [pc, #284]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d072      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002e4c:	4b41      	ldr	r3, [pc, #260]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4b42      	ldr	r3, [pc, #264]	@ (8002f60 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002e5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d053      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002e66:	4b3b      	ldr	r3, [pc, #236]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	3301      	adds	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002e74:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3302      	adds	r3, #2
 8002e80:	61fb      	str	r3, [r7, #28]
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2200      	movs	r2, #0
 8002e86:	469a      	mov	sl, r3
 8002e88:	4693      	mov	fp, r2
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	617a      	str	r2, [r7, #20]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	fb03 f20b 	mul.w	r2, r3, fp
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fb0a f303 	mul.w	r3, sl, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	fbaa 0102 	umull	r0, r1, sl, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002eac:	fb03 f201 	mul.w	r2, r3, r1
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	4a27      	ldr	r2, [pc, #156]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002eba:	fba0 4502 	umull	r4, r5, r0, r2
 8002ebe:	442b      	add	r3, r5
 8002ec0:	461d      	mov	r5, r3
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	60fa      	str	r2, [r7, #12]
 8002eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ecc:	2200      	movs	r2, #0
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002edc:	4652      	mov	r2, sl
 8002ede:	fb02 f203 	mul.w	r2, r2, r3
 8002ee2:	465b      	mov	r3, fp
 8002ee4:	4684      	mov	ip, r0
 8002ee6:	fb0c f303 	mul.w	r3, ip, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	4602      	mov	r2, r0
 8002eee:	4651      	mov	r1, sl
 8002ef0:	fba2 8901 	umull	r8, r9, r2, r1
 8002ef4:	444b      	add	r3, r9
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	4642      	mov	r2, r8
 8002efa:	464b      	mov	r3, r9
 8002efc:	4620      	mov	r0, r4
 8002efe:	4629      	mov	r1, r5
 8002f00:	f7fd f990 	bl	8000224 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0c:	e007      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	4a11      	ldr	r2, [pc, #68]	@ (8002f58 <HAL_RCC_GetSysClockFreq+0x164>)
 8002f12:	fb03 f202 	mul.w	r2, r3, r2
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_RCC_GetSysClockFreq+0x168>)
 8002f20:	7b5b      	ldrb	r3, [r3, #13]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d108      	bne.n	8002f3c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2c:	085b      	lsrs	r3, r3, #1
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f30:	e004      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f34:	4a0b      	ldr	r2, [pc, #44]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x170>)
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllclk;
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f40:	e002      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f42:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x174>)
 8002f44:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002f46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3738      	adds	r7, #56	@ 0x38
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	017d7840 	.word	0x017d7840
 8002f5c:	08005310 	.word	0x08005310
 8002f60:	08005320 	.word	0x08005320
 8002f64:	003d0900 	.word	0x003d0900
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b02      	ldr	r3, [pc, #8]	@ (8002f7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000000 	.word	0x20000000

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff2 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0a1b      	lsrs	r3, r3, #8
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08005308 	.word	0x08005308

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fac:	f7ff ffde 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	0adb      	lsrs	r3, r3, #11
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	@ (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	08005308 	.word	0x08005308

08002fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <RCC_Delay+0x34>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <RCC_Delay+0x38>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	0a5b      	lsrs	r3, r3, #9
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fec:	bf00      	nop
  }
  while (Delay --);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	60fa      	str	r2, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <RCC_Delay+0x1c>
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	20000000 	.word	0x20000000
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e042      	b.n	80030a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fe fc46 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800304e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 feed 	bl	8003e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d16d      	bne.n	80031a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Transmit+0x2c>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e066      	b.n	80031aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	@ 0x21
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ea:	f7fe fdf5 	bl	8001cd8 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x6c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003120:	e02a      	b.n	8003178 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fc75 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e036      	b.n	80031aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003150:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3302      	adds	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e007      	b.n	800316a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3301      	adds	r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1cf      	bne.n	8003122 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	@ 0x40
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fc45 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e006      	b.n	80031aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b08a      	sub	sp, #40	@ 0x28
 80031b6:	af02      	add	r7, sp, #8
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d17c      	bne.n	80032cc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_UART_Receive+0x2c>
 80031d8:	88fb      	ldrh	r3, [r7, #6]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e075      	b.n	80032ce <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2222      	movs	r2, #34	@ 0x22
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fd6f 	bl	8001cd8 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	88fa      	ldrh	r2, [r7, #6]
 8003206:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d108      	bne.n	8003224 <HAL_UART_Receive+0x72>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	e003      	b.n	800322c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800322c:	e043      	b.n	80032b6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2200      	movs	r2, #0
 8003236:	2120      	movs	r1, #32
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fbef 	bl	8003a1c <UART_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e042      	b.n	80032ce <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	b29b      	uxth	r3, r3
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	b29a      	uxth	r2, r3
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	3302      	adds	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e01f      	b.n	80032a8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003270:	d007      	beq.n	8003282 <HAL_UART_Receive+0xd0>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_UART_Receive+0xde>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e008      	b.n	80032a2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800329c:	b2da      	uxtb	r2, r3
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1b6      	bne.n	800322e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b0a0      	sub	sp, #128	@ 0x80
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80032ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80032f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	330c      	adds	r3, #12
 80032fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80032fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003300:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003304:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800330c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3314      	adds	r3, #20
 8003318:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003324:	f023 0301 	bic.w	r3, r3, #1
 8003328:	67bb      	str	r3, [r7, #120]	@ 0x78
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3314      	adds	r3, #20
 8003330:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003332:	657a      	str	r2, [r7, #84]	@ 0x54
 8003334:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003338:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e5      	bne.n	8003312 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	2b01      	cmp	r3, #1
 800334c:	d119      	bne.n	8003382 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	f023 0310 	bic.w	r3, r3, #16
 8003364:	677b      	str	r3, [r7, #116]	@ 0x74
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800336e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003374:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800337c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	d036      	beq.n	80033fe <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3314      	adds	r3, #20
 8003396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	e853 3f00 	ldrex	r3, [r3]
 800339e:	61fb      	str	r3, [r7, #28]
   return(result);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80033b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e5      	bne.n	8003390 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d018      	beq.n	80033fe <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	2200      	movs	r2, #0
 80033d2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fdb8 	bl	8001f4e <HAL_DMA_Abort>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00c      	beq.n	80033fe <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fef3 	bl	80021d4 <HAL_DMA_GetError>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d104      	bne.n	80033fe <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2210      	movs	r2, #16
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e052      	b.n	80034a4 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003408:	2b00      	cmp	r3, #0
 800340a:	d036      	beq.n	800347a <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	e853 3f00 	ldrex	r3, [r3]
 800341a:	60bb      	str	r3, [r7, #8]
   return(result);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003422:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3314      	adds	r3, #20
 800342a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800342c:	61ba      	str	r2, [r7, #24]
 800342e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6979      	ldr	r1, [r7, #20]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	e841 2300 	strex	r3, r2, [r1]
 8003438:	613b      	str	r3, [r7, #16]
   return(result);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e5      	bne.n	800340c <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d018      	beq.n	800347a <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	2200      	movs	r2, #0
 800344e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fd7a 	bl	8001f4e <HAL_DMA_Abort>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe feb5 	bl	80021d4 <HAL_DMA_GetError>
 800346a:	4603      	mov	r3, r0
 800346c:	2b20      	cmp	r3, #32
 800346e:	d104      	bne.n	800347a <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2210      	movs	r2, #16
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e014      	b.n	80034a4 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3780      	adds	r7, #128	@ 0x80
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b0ba      	sub	sp, #232	@ 0xe8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80034d8:	2300      	movs	r3, #0
 80034da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80034ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10f      	bne.n	8003512 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d009      	beq.n	8003512 <HAL_UART_IRQHandler+0x66>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fbd1 	bl	8003cb2 <UART_Receive_IT>
      return;
 8003510:	e25b      	b.n	80039ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80de 	beq.w	80036d8 <HAL_UART_IRQHandler+0x22c>
 800351c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800352c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80d1 	beq.w	80036d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_UART_IRQHandler+0xae>
 8003542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f043 0201 	orr.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00b      	beq.n	800357e <HAL_UART_IRQHandler+0xd2>
 8003566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f043 0202 	orr.w	r2, r3, #2
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00b      	beq.n	80035a2 <HAL_UART_IRQHandler+0xf6>
 800358a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	f043 0204 	orr.w	r2, r3, #4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d011      	beq.n	80035d2 <HAL_UART_IRQHandler+0x126>
 80035ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d105      	bne.n	80035c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 81f2 	beq.w	80039c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_UART_IRQHandler+0x14e>
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fb5c 	bl	8003cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_UART_IRQHandler+0x17a>
 800361e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d04f      	beq.n	80036c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa66 	bl	8003af8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d041      	beq.n	80036be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800366a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003676:	e841 2300 	strex	r3, r2, [r1]
 800367a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800367e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1d9      	bne.n	800363a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d013      	beq.n	80036b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	4a7e      	ldr	r2, [pc, #504]	@ (800388c <HAL_UART_IRQHandler+0x3e0>)
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369a:	4618      	mov	r0, r3
 800369c:	f7fe fc92 	bl	8001fc4 <HAL_DMA_Abort_IT>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036b0:	4610      	mov	r0, r2
 80036b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b4:	e00e      	b.n	80036d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f99c 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036bc:	e00a      	b.n	80036d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f998 	bl	80039f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036c4:	e006      	b.n	80036d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f994 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80036d2:	e175      	b.n	80039c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d4:	bf00      	nop
    return;
 80036d6:	e173      	b.n	80039c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036dc:	2b01      	cmp	r3, #1
 80036de:	f040 814f 	bne.w	8003980 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8148 	beq.w	8003980 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f000 8141 	beq.w	8003980 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80b6 	beq.w	8003890 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8145 	beq.w	80039c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800373e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003742:	429a      	cmp	r2, r3
 8003744:	f080 813e 	bcs.w	80039c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800374e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b20      	cmp	r3, #32
 8003758:	f000 8088 	beq.w	800386c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	330c      	adds	r3, #12
 8003762:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003766:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003772:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003776:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800377a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003788:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800378c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003790:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003794:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80037a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1d9      	bne.n	800375c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80037b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80037d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80037d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80037de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e1      	bne.n	80037a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3314      	adds	r3, #20
 80037ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3314      	adds	r3, #20
 8003804:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003808:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800380a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800380e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003810:	e841 2300 	strex	r3, r2, [r1]
 8003814:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e3      	bne.n	80037e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800383a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800383c:	f023 0310 	bic.w	r3, r3, #16
 8003840:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800384e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003850:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003852:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003854:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003856:	e841 2300 	strex	r3, r2, [r1]
 800385a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800385c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1e3      	bne.n	800382a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fb71 	bl	8001f4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800387a:	b29b      	uxth	r3, r3
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	b29b      	uxth	r3, r3
 8003880:	4619      	mov	r1, r3
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f8bf 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003888:	e09c      	b.n	80039c4 <HAL_UART_IRQHandler+0x518>
 800388a:	bf00      	nop
 800388c:	08003bbd 	.word	0x08003bbd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 808e 	beq.w	80039c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80038ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8089 	beq.w	80039c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038c0:	e853 3f00 	ldrex	r3, [r3]
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038da:	647a      	str	r2, [r7, #68]	@ 0x44
 80038dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e3      	bne.n	80038b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3314      	adds	r3, #20
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	e853 3f00 	ldrex	r3, [r3]
 80038fc:	623b      	str	r3, [r7, #32]
   return(result);
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3314      	adds	r3, #20
 800390e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003912:	633a      	str	r2, [r7, #48]	@ 0x30
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e3      	bne.n	80038ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	e853 3f00 	ldrex	r3, [r3]
 8003942:	60fb      	str	r3, [r7, #12]
   return(result);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0310 	bic.w	r3, r3, #16
 800394a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	330c      	adds	r3, #12
 8003954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003958:	61fa      	str	r2, [r7, #28]
 800395a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	69b9      	ldr	r1, [r7, #24]
 800395e:	69fa      	ldr	r2, [r7, #28]
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	617b      	str	r3, [r7, #20]
   return(result);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e3      	bne.n	8003934 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003976:	4619      	mov	r1, r3
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f844 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800397e:	e023      	b.n	80039c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d009      	beq.n	80039a0 <HAL_UART_IRQHandler+0x4f4>
 800398c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f923 	bl	8003be4 <UART_Transmit_IT>
    return;
 800399e:	e014      	b.n	80039ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <HAL_UART_IRQHandler+0x51e>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f962 	bl	8003c82 <UART_EndTransmit_IT>
    return;
 80039be:	e004      	b.n	80039ca <HAL_UART_IRQHandler+0x51e>
    return;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_UART_IRQHandler+0x51e>
      return;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_UART_IRQHandler+0x51e>
      return;
 80039c8:	bf00      	nop
  }
}
 80039ca:	37e8      	adds	r7, #232	@ 0xe8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	@ 0x40
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2c:	e050      	b.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d04c      	beq.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d007      	beq.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3c:	f7fe f94c 	bl	8001cd8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d241      	bcs.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	330c      	adds	r3, #12
 8003a52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	e853 3f00 	ldrex	r3, [r3]
 8003a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	330c      	adds	r3, #12
 8003a6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a6c:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a6e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a70:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a74:	e841 2300 	strex	r3, r2, [r1]
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1e5      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f023 0301 	bic.w	r3, r3, #1
 8003a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003aa0:	623a      	str	r2, [r7, #32]
 8003aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	6a3a      	ldr	r2, [r7, #32]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e00f      	b.n	8003af0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	bf0c      	ite	eq
 8003ae0:	2301      	moveq	r3, #1
 8003ae2:	2300      	movne	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d09f      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3740      	adds	r7, #64	@ 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b095      	sub	sp, #84	@ 0x54
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b20:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e5      	bne.n	8003b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e5      	bne.n	8003b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d119      	bne.n	8003ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	e853 3f00 	ldrex	r3, [r3]
 8003b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f023 0310 	bic.w	r3, r3, #16
 8003b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b90:	61ba      	str	r2, [r7, #24]
 8003b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6979      	ldr	r1, [r7, #20]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e5      	bne.n	8003b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bb2:	bf00      	nop
 8003bb4:	3754      	adds	r7, #84	@ 0x54
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ff0c 	bl	80039f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b21      	cmp	r3, #33	@ 0x21
 8003bf6:	d13e      	bne.n	8003c76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c00:	d114      	bne.n	8003c2c <UART_Transmit_IT+0x48>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d110      	bne.n	8003c2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	e008      	b.n	8003c3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6211      	str	r1, [r2, #32]
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr

08003c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff fe94 	bl	80039d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b08c      	sub	sp, #48	@ 0x30
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b22      	cmp	r3, #34	@ 0x22
 8003cc4:	f040 80ae 	bne.w	8003e24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd0:	d117      	bne.n	8003d02 <UART_Receive_IT+0x50>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d113      	bne.n	8003d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d00:	e026      	b.n	8003d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d14:	d007      	beq.n	8003d26 <UART_Receive_IT+0x74>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10a      	bne.n	8003d34 <UART_Receive_IT+0x82>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e008      	b.n	8003d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d15d      	bne.n	8003e20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0220 	bic.w	r2, r2, #32
 8003d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d135      	bne.n	8003e16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	330c      	adds	r3, #12
 8003db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	e853 3f00 	ldrex	r3, [r3]
 8003dbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f023 0310 	bic.w	r3, r3, #16
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	623a      	str	r2, [r7, #32]
 8003dd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	69f9      	ldr	r1, [r7, #28]
 8003dd6:	6a3a      	ldr	r2, [r7, #32]
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e5      	bne.n	8003db0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d10a      	bne.n	8003e08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fdf9 	bl	8003a06 <HAL_UARTEx_RxEventCallback>
 8003e14:	e002      	b.n	8003e1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff fde3 	bl	80039e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e002      	b.n	8003e26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	@ 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003e6a:	f023 030c 	bic.w	r3, r3, #12
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	430b      	orrs	r3, r1
 8003e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <UART_SetConfig+0x114>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d103      	bne.n	8003ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e98:	f7ff f886 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	e002      	b.n	8003ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7ff f86e 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009a      	lsls	r2, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	4a22      	ldr	r2, [pc, #136]	@ (8003f48 <UART_SetConfig+0x118>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	0119      	lsls	r1, r3, #4
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	009a      	lsls	r2, r3, #2
 8003ed0:	441a      	add	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003edc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f48 <UART_SetConfig+0x118>)
 8003ede:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2064      	movs	r0, #100	@ 0x64
 8003ee6:	fb00 f303 	mul.w	r3, r0, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	3332      	adds	r3, #50	@ 0x32
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <UART_SetConfig+0x118>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	4419      	add	r1, r3
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009a      	lsls	r2, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f14:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <UART_SetConfig+0x118>)
 8003f16:	fba3 0302 	umull	r0, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2064      	movs	r0, #100	@ 0x64
 8003f1e:	fb00 f303 	mul.w	r3, r0, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	3332      	adds	r3, #50	@ 0x32
 8003f28:	4a07      	ldr	r2, [pc, #28]	@ (8003f48 <UART_SetConfig+0x118>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	440a      	add	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40013800 	.word	0x40013800
 8003f48:	51eb851f 	.word	0x51eb851f

08003f4c <malloc>:
 8003f4c:	4b02      	ldr	r3, [pc, #8]	@ (8003f58 <malloc+0xc>)
 8003f4e:	4601      	mov	r1, r0
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	f000 b82d 	b.w	8003fb0 <_malloc_r>
 8003f56:	bf00      	nop
 8003f58:	20000018 	.word	0x20000018

08003f5c <free>:
 8003f5c:	4b02      	ldr	r3, [pc, #8]	@ (8003f68 <free+0xc>)
 8003f5e:	4601      	mov	r1, r0
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	f000 bb4f 	b.w	8004604 <_free_r>
 8003f66:	bf00      	nop
 8003f68:	20000018 	.word	0x20000018

08003f6c <sbrk_aligned>:
 8003f6c:	b570      	push	{r4, r5, r6, lr}
 8003f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8003fac <sbrk_aligned+0x40>)
 8003f70:	460c      	mov	r4, r1
 8003f72:	6831      	ldr	r1, [r6, #0]
 8003f74:	4605      	mov	r5, r0
 8003f76:	b911      	cbnz	r1, 8003f7e <sbrk_aligned+0x12>
 8003f78:	f000 faf4 	bl	8004564 <_sbrk_r>
 8003f7c:	6030      	str	r0, [r6, #0]
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	f000 faef 	bl	8004564 <_sbrk_r>
 8003f86:	1c43      	adds	r3, r0, #1
 8003f88:	d103      	bne.n	8003f92 <sbrk_aligned+0x26>
 8003f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8e:	4620      	mov	r0, r4
 8003f90:	bd70      	pop	{r4, r5, r6, pc}
 8003f92:	1cc4      	adds	r4, r0, #3
 8003f94:	f024 0403 	bic.w	r4, r4, #3
 8003f98:	42a0      	cmp	r0, r4
 8003f9a:	d0f8      	beq.n	8003f8e <sbrk_aligned+0x22>
 8003f9c:	1a21      	subs	r1, r4, r0
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 fae0 	bl	8004564 <_sbrk_r>
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d1f2      	bne.n	8003f8e <sbrk_aligned+0x22>
 8003fa8:	e7ef      	b.n	8003f8a <sbrk_aligned+0x1e>
 8003faa:	bf00      	nop
 8003fac:	20000154 	.word	0x20000154

08003fb0 <_malloc_r>:
 8003fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fb4:	1ccd      	adds	r5, r1, #3
 8003fb6:	f025 0503 	bic.w	r5, r5, #3
 8003fba:	3508      	adds	r5, #8
 8003fbc:	2d0c      	cmp	r5, #12
 8003fbe:	bf38      	it	cc
 8003fc0:	250c      	movcc	r5, #12
 8003fc2:	2d00      	cmp	r5, #0
 8003fc4:	4606      	mov	r6, r0
 8003fc6:	db01      	blt.n	8003fcc <_malloc_r+0x1c>
 8003fc8:	42a9      	cmp	r1, r5
 8003fca:	d904      	bls.n	8003fd6 <_malloc_r+0x26>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80040ac <_malloc_r+0xfc>
 8003fda:	f000 f869 	bl	80040b0 <__malloc_lock>
 8003fde:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe2:	461c      	mov	r4, r3
 8003fe4:	bb44      	cbnz	r4, 8004038 <_malloc_r+0x88>
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f7ff ffbf 	bl	8003f6c <sbrk_aligned>
 8003fee:	1c43      	adds	r3, r0, #1
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	d158      	bne.n	80040a6 <_malloc_r+0xf6>
 8003ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ff8:	4627      	mov	r7, r4
 8003ffa:	2f00      	cmp	r7, #0
 8003ffc:	d143      	bne.n	8004086 <_malloc_r+0xd6>
 8003ffe:	2c00      	cmp	r4, #0
 8004000:	d04b      	beq.n	800409a <_malloc_r+0xea>
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4639      	mov	r1, r7
 8004006:	4630      	mov	r0, r6
 8004008:	eb04 0903 	add.w	r9, r4, r3
 800400c:	f000 faaa 	bl	8004564 <_sbrk_r>
 8004010:	4581      	cmp	r9, r0
 8004012:	d142      	bne.n	800409a <_malloc_r+0xea>
 8004014:	6821      	ldr	r1, [r4, #0]
 8004016:	4630      	mov	r0, r6
 8004018:	1a6d      	subs	r5, r5, r1
 800401a:	4629      	mov	r1, r5
 800401c:	f7ff ffa6 	bl	8003f6c <sbrk_aligned>
 8004020:	3001      	adds	r0, #1
 8004022:	d03a      	beq.n	800409a <_malloc_r+0xea>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	442b      	add	r3, r5
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	f8d8 3000 	ldr.w	r3, [r8]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	bb62      	cbnz	r2, 800408c <_malloc_r+0xdc>
 8004032:	f8c8 7000 	str.w	r7, [r8]
 8004036:	e00f      	b.n	8004058 <_malloc_r+0xa8>
 8004038:	6822      	ldr	r2, [r4, #0]
 800403a:	1b52      	subs	r2, r2, r5
 800403c:	d420      	bmi.n	8004080 <_malloc_r+0xd0>
 800403e:	2a0b      	cmp	r2, #11
 8004040:	d917      	bls.n	8004072 <_malloc_r+0xc2>
 8004042:	1961      	adds	r1, r4, r5
 8004044:	42a3      	cmp	r3, r4
 8004046:	6025      	str	r5, [r4, #0]
 8004048:	bf18      	it	ne
 800404a:	6059      	strne	r1, [r3, #4]
 800404c:	6863      	ldr	r3, [r4, #4]
 800404e:	bf08      	it	eq
 8004050:	f8c8 1000 	streq.w	r1, [r8]
 8004054:	5162      	str	r2, [r4, r5]
 8004056:	604b      	str	r3, [r1, #4]
 8004058:	4630      	mov	r0, r6
 800405a:	f000 f82f 	bl	80040bc <__malloc_unlock>
 800405e:	f104 000b 	add.w	r0, r4, #11
 8004062:	1d23      	adds	r3, r4, #4
 8004064:	f020 0007 	bic.w	r0, r0, #7
 8004068:	1ac2      	subs	r2, r0, r3
 800406a:	bf1c      	itt	ne
 800406c:	1a1b      	subne	r3, r3, r0
 800406e:	50a3      	strne	r3, [r4, r2]
 8004070:	e7af      	b.n	8003fd2 <_malloc_r+0x22>
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	42a3      	cmp	r3, r4
 8004076:	bf0c      	ite	eq
 8004078:	f8c8 2000 	streq.w	r2, [r8]
 800407c:	605a      	strne	r2, [r3, #4]
 800407e:	e7eb      	b.n	8004058 <_malloc_r+0xa8>
 8004080:	4623      	mov	r3, r4
 8004082:	6864      	ldr	r4, [r4, #4]
 8004084:	e7ae      	b.n	8003fe4 <_malloc_r+0x34>
 8004086:	463c      	mov	r4, r7
 8004088:	687f      	ldr	r7, [r7, #4]
 800408a:	e7b6      	b.n	8003ffa <_malloc_r+0x4a>
 800408c:	461a      	mov	r2, r3
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	42a3      	cmp	r3, r4
 8004092:	d1fb      	bne.n	800408c <_malloc_r+0xdc>
 8004094:	2300      	movs	r3, #0
 8004096:	6053      	str	r3, [r2, #4]
 8004098:	e7de      	b.n	8004058 <_malloc_r+0xa8>
 800409a:	230c      	movs	r3, #12
 800409c:	4630      	mov	r0, r6
 800409e:	6033      	str	r3, [r6, #0]
 80040a0:	f000 f80c 	bl	80040bc <__malloc_unlock>
 80040a4:	e794      	b.n	8003fd0 <_malloc_r+0x20>
 80040a6:	6005      	str	r5, [r0, #0]
 80040a8:	e7d6      	b.n	8004058 <_malloc_r+0xa8>
 80040aa:	bf00      	nop
 80040ac:	20000158 	.word	0x20000158

080040b0 <__malloc_lock>:
 80040b0:	4801      	ldr	r0, [pc, #4]	@ (80040b8 <__malloc_lock+0x8>)
 80040b2:	f000 baa4 	b.w	80045fe <__retarget_lock_acquire_recursive>
 80040b6:	bf00      	nop
 80040b8:	2000029c 	.word	0x2000029c

080040bc <__malloc_unlock>:
 80040bc:	4801      	ldr	r0, [pc, #4]	@ (80040c4 <__malloc_unlock+0x8>)
 80040be:	f000 ba9f 	b.w	8004600 <__retarget_lock_release_recursive>
 80040c2:	bf00      	nop
 80040c4:	2000029c 	.word	0x2000029c

080040c8 <std>:
 80040c8:	2300      	movs	r3, #0
 80040ca:	b510      	push	{r4, lr}
 80040cc:	4604      	mov	r4, r0
 80040ce:	e9c0 3300 	strd	r3, r3, [r0]
 80040d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040d6:	6083      	str	r3, [r0, #8]
 80040d8:	8181      	strh	r1, [r0, #12]
 80040da:	6643      	str	r3, [r0, #100]	@ 0x64
 80040dc:	81c2      	strh	r2, [r0, #14]
 80040de:	6183      	str	r3, [r0, #24]
 80040e0:	4619      	mov	r1, r3
 80040e2:	2208      	movs	r2, #8
 80040e4:	305c      	adds	r0, #92	@ 0x5c
 80040e6:	f000 fa01 	bl	80044ec <memset>
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <std+0x58>)
 80040ec:	6224      	str	r4, [r4, #32]
 80040ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <std+0x5c>)
 80040f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <std+0x60>)
 80040f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040f8:	4b0c      	ldr	r3, [pc, #48]	@ (800412c <std+0x64>)
 80040fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80040fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004130 <std+0x68>)
 80040fe:	429c      	cmp	r4, r3
 8004100:	d006      	beq.n	8004110 <std+0x48>
 8004102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004106:	4294      	cmp	r4, r2
 8004108:	d002      	beq.n	8004110 <std+0x48>
 800410a:	33d0      	adds	r3, #208	@ 0xd0
 800410c:	429c      	cmp	r4, r3
 800410e:	d105      	bne.n	800411c <std+0x54>
 8004110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004118:	f000 ba70 	b.w	80045fc <__retarget_lock_init_recursive>
 800411c:	bd10      	pop	{r4, pc}
 800411e:	bf00      	nop
 8004120:	0800433d 	.word	0x0800433d
 8004124:	0800435f 	.word	0x0800435f
 8004128:	08004397 	.word	0x08004397
 800412c:	080043bb 	.word	0x080043bb
 8004130:	2000015c 	.word	0x2000015c

08004134 <stdio_exit_handler>:
 8004134:	4a02      	ldr	r2, [pc, #8]	@ (8004140 <stdio_exit_handler+0xc>)
 8004136:	4903      	ldr	r1, [pc, #12]	@ (8004144 <stdio_exit_handler+0x10>)
 8004138:	4803      	ldr	r0, [pc, #12]	@ (8004148 <stdio_exit_handler+0x14>)
 800413a:	f000 b869 	b.w	8004210 <_fwalk_sglue>
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c
 8004144:	08004d39 	.word	0x08004d39
 8004148:	2000001c 	.word	0x2000001c

0800414c <cleanup_stdio>:
 800414c:	6841      	ldr	r1, [r0, #4]
 800414e:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <cleanup_stdio+0x34>)
 8004150:	b510      	push	{r4, lr}
 8004152:	4299      	cmp	r1, r3
 8004154:	4604      	mov	r4, r0
 8004156:	d001      	beq.n	800415c <cleanup_stdio+0x10>
 8004158:	f000 fdee 	bl	8004d38 <_fflush_r>
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	4b09      	ldr	r3, [pc, #36]	@ (8004184 <cleanup_stdio+0x38>)
 8004160:	4299      	cmp	r1, r3
 8004162:	d002      	beq.n	800416a <cleanup_stdio+0x1e>
 8004164:	4620      	mov	r0, r4
 8004166:	f000 fde7 	bl	8004d38 <_fflush_r>
 800416a:	68e1      	ldr	r1, [r4, #12]
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <cleanup_stdio+0x3c>)
 800416e:	4299      	cmp	r1, r3
 8004170:	d004      	beq.n	800417c <cleanup_stdio+0x30>
 8004172:	4620      	mov	r0, r4
 8004174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004178:	f000 bdde 	b.w	8004d38 <_fflush_r>
 800417c:	bd10      	pop	{r4, pc}
 800417e:	bf00      	nop
 8004180:	2000015c 	.word	0x2000015c
 8004184:	200001c4 	.word	0x200001c4
 8004188:	2000022c 	.word	0x2000022c

0800418c <global_stdio_init.part.0>:
 800418c:	b510      	push	{r4, lr}
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <global_stdio_init.part.0+0x30>)
 8004190:	4c0b      	ldr	r4, [pc, #44]	@ (80041c0 <global_stdio_init.part.0+0x34>)
 8004192:	4a0c      	ldr	r2, [pc, #48]	@ (80041c4 <global_stdio_init.part.0+0x38>)
 8004194:	4620      	mov	r0, r4
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	2104      	movs	r1, #4
 800419a:	2200      	movs	r2, #0
 800419c:	f7ff ff94 	bl	80040c8 <std>
 80041a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041a4:	2201      	movs	r2, #1
 80041a6:	2109      	movs	r1, #9
 80041a8:	f7ff ff8e 	bl	80040c8 <std>
 80041ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041b0:	2202      	movs	r2, #2
 80041b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041b6:	2112      	movs	r1, #18
 80041b8:	f7ff bf86 	b.w	80040c8 <std>
 80041bc:	20000294 	.word	0x20000294
 80041c0:	2000015c 	.word	0x2000015c
 80041c4:	08004135 	.word	0x08004135

080041c8 <__sfp_lock_acquire>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__sfp_lock_acquire+0x8>)
 80041ca:	f000 ba18 	b.w	80045fe <__retarget_lock_acquire_recursive>
 80041ce:	bf00      	nop
 80041d0:	2000029d 	.word	0x2000029d

080041d4 <__sfp_lock_release>:
 80041d4:	4801      	ldr	r0, [pc, #4]	@ (80041dc <__sfp_lock_release+0x8>)
 80041d6:	f000 ba13 	b.w	8004600 <__retarget_lock_release_recursive>
 80041da:	bf00      	nop
 80041dc:	2000029d 	.word	0x2000029d

080041e0 <__sinit>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4604      	mov	r4, r0
 80041e4:	f7ff fff0 	bl	80041c8 <__sfp_lock_acquire>
 80041e8:	6a23      	ldr	r3, [r4, #32]
 80041ea:	b11b      	cbz	r3, 80041f4 <__sinit+0x14>
 80041ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f0:	f7ff bff0 	b.w	80041d4 <__sfp_lock_release>
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <__sinit+0x28>)
 80041f6:	6223      	str	r3, [r4, #32]
 80041f8:	4b04      	ldr	r3, [pc, #16]	@ (800420c <__sinit+0x2c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f5      	bne.n	80041ec <__sinit+0xc>
 8004200:	f7ff ffc4 	bl	800418c <global_stdio_init.part.0>
 8004204:	e7f2      	b.n	80041ec <__sinit+0xc>
 8004206:	bf00      	nop
 8004208:	0800414d 	.word	0x0800414d
 800420c:	20000294 	.word	0x20000294

08004210 <_fwalk_sglue>:
 8004210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004214:	4607      	mov	r7, r0
 8004216:	4688      	mov	r8, r1
 8004218:	4614      	mov	r4, r2
 800421a:	2600      	movs	r6, #0
 800421c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004220:	f1b9 0901 	subs.w	r9, r9, #1
 8004224:	d505      	bpl.n	8004232 <_fwalk_sglue+0x22>
 8004226:	6824      	ldr	r4, [r4, #0]
 8004228:	2c00      	cmp	r4, #0
 800422a:	d1f7      	bne.n	800421c <_fwalk_sglue+0xc>
 800422c:	4630      	mov	r0, r6
 800422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004232:	89ab      	ldrh	r3, [r5, #12]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d907      	bls.n	8004248 <_fwalk_sglue+0x38>
 8004238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800423c:	3301      	adds	r3, #1
 800423e:	d003      	beq.n	8004248 <_fwalk_sglue+0x38>
 8004240:	4629      	mov	r1, r5
 8004242:	4638      	mov	r0, r7
 8004244:	47c0      	blx	r8
 8004246:	4306      	orrs	r6, r0
 8004248:	3568      	adds	r5, #104	@ 0x68
 800424a:	e7e9      	b.n	8004220 <_fwalk_sglue+0x10>

0800424c <iprintf>:
 800424c:	b40f      	push	{r0, r1, r2, r3}
 800424e:	b507      	push	{r0, r1, r2, lr}
 8004250:	4906      	ldr	r1, [pc, #24]	@ (800426c <iprintf+0x20>)
 8004252:	ab04      	add	r3, sp, #16
 8004254:	6808      	ldr	r0, [r1, #0]
 8004256:	f853 2b04 	ldr.w	r2, [r3], #4
 800425a:	6881      	ldr	r1, [r0, #8]
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	f000 fa41 	bl	80046e4 <_vfiprintf_r>
 8004262:	b003      	add	sp, #12
 8004264:	f85d eb04 	ldr.w	lr, [sp], #4
 8004268:	b004      	add	sp, #16
 800426a:	4770      	bx	lr
 800426c:	20000018 	.word	0x20000018

08004270 <putchar>:
 8004270:	4b02      	ldr	r3, [pc, #8]	@ (800427c <putchar+0xc>)
 8004272:	4601      	mov	r1, r0
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	6882      	ldr	r2, [r0, #8]
 8004278:	f000 bde7 	b.w	8004e4a <_putc_r>
 800427c:	20000018 	.word	0x20000018

08004280 <_puts_r>:
 8004280:	6a03      	ldr	r3, [r0, #32]
 8004282:	b570      	push	{r4, r5, r6, lr}
 8004284:	4605      	mov	r5, r0
 8004286:	460e      	mov	r6, r1
 8004288:	6884      	ldr	r4, [r0, #8]
 800428a:	b90b      	cbnz	r3, 8004290 <_puts_r+0x10>
 800428c:	f7ff ffa8 	bl	80041e0 <__sinit>
 8004290:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004292:	07db      	lsls	r3, r3, #31
 8004294:	d405      	bmi.n	80042a2 <_puts_r+0x22>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	0598      	lsls	r0, r3, #22
 800429a:	d402      	bmi.n	80042a2 <_puts_r+0x22>
 800429c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800429e:	f000 f9ae 	bl	80045fe <__retarget_lock_acquire_recursive>
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	0719      	lsls	r1, r3, #28
 80042a6:	d502      	bpl.n	80042ae <_puts_r+0x2e>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d135      	bne.n	800431a <_puts_r+0x9a>
 80042ae:	4621      	mov	r1, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f8c5 	bl	8004440 <__swsetup_r>
 80042b6:	b380      	cbz	r0, 800431a <_puts_r+0x9a>
 80042b8:	f04f 35ff 	mov.w	r5, #4294967295
 80042bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042be:	07da      	lsls	r2, r3, #31
 80042c0:	d405      	bmi.n	80042ce <_puts_r+0x4e>
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	059b      	lsls	r3, r3, #22
 80042c6:	d402      	bmi.n	80042ce <_puts_r+0x4e>
 80042c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042ca:	f000 f999 	bl	8004600 <__retarget_lock_release_recursive>
 80042ce:	4628      	mov	r0, r5
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	da04      	bge.n	80042e0 <_puts_r+0x60>
 80042d6:	69a2      	ldr	r2, [r4, #24]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dc17      	bgt.n	800430c <_puts_r+0x8c>
 80042dc:	290a      	cmp	r1, #10
 80042de:	d015      	beq.n	800430c <_puts_r+0x8c>
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	7019      	strb	r1, [r3, #0]
 80042e8:	68a3      	ldr	r3, [r4, #8]
 80042ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042ee:	3b01      	subs	r3, #1
 80042f0:	60a3      	str	r3, [r4, #8]
 80042f2:	2900      	cmp	r1, #0
 80042f4:	d1ed      	bne.n	80042d2 <_puts_r+0x52>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	da11      	bge.n	800431e <_puts_r+0x9e>
 80042fa:	4622      	mov	r2, r4
 80042fc:	210a      	movs	r1, #10
 80042fe:	4628      	mov	r0, r5
 8004300:	f000 f85f 	bl	80043c2 <__swbuf_r>
 8004304:	3001      	adds	r0, #1
 8004306:	d0d7      	beq.n	80042b8 <_puts_r+0x38>
 8004308:	250a      	movs	r5, #10
 800430a:	e7d7      	b.n	80042bc <_puts_r+0x3c>
 800430c:	4622      	mov	r2, r4
 800430e:	4628      	mov	r0, r5
 8004310:	f000 f857 	bl	80043c2 <__swbuf_r>
 8004314:	3001      	adds	r0, #1
 8004316:	d1e7      	bne.n	80042e8 <_puts_r+0x68>
 8004318:	e7ce      	b.n	80042b8 <_puts_r+0x38>
 800431a:	3e01      	subs	r6, #1
 800431c:	e7e4      	b.n	80042e8 <_puts_r+0x68>
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	6022      	str	r2, [r4, #0]
 8004324:	220a      	movs	r2, #10
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e7ee      	b.n	8004308 <_puts_r+0x88>
	...

0800432c <puts>:
 800432c:	4b02      	ldr	r3, [pc, #8]	@ (8004338 <puts+0xc>)
 800432e:	4601      	mov	r1, r0
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	f7ff bfa5 	b.w	8004280 <_puts_r>
 8004336:	bf00      	nop
 8004338:	20000018 	.word	0x20000018

0800433c <__sread>:
 800433c:	b510      	push	{r4, lr}
 800433e:	460c      	mov	r4, r1
 8004340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004344:	f000 f8fc 	bl	8004540 <_read_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	bfab      	itete	ge
 800434c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800434e:	89a3      	ldrhlt	r3, [r4, #12]
 8004350:	181b      	addge	r3, r3, r0
 8004352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004356:	bfac      	ite	ge
 8004358:	6563      	strge	r3, [r4, #84]	@ 0x54
 800435a:	81a3      	strhlt	r3, [r4, #12]
 800435c:	bd10      	pop	{r4, pc}

0800435e <__swrite>:
 800435e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004362:	461f      	mov	r7, r3
 8004364:	898b      	ldrh	r3, [r1, #12]
 8004366:	4605      	mov	r5, r0
 8004368:	05db      	lsls	r3, r3, #23
 800436a:	460c      	mov	r4, r1
 800436c:	4616      	mov	r6, r2
 800436e:	d505      	bpl.n	800437c <__swrite+0x1e>
 8004370:	2302      	movs	r3, #2
 8004372:	2200      	movs	r2, #0
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	f000 f8d0 	bl	800451c <_lseek_r>
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	4632      	mov	r2, r6
 8004380:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	4628      	mov	r0, r5
 8004388:	463b      	mov	r3, r7
 800438a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800438e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	f000 b8f7 	b.w	8004584 <_write_r>

08004396 <__sseek>:
 8004396:	b510      	push	{r4, lr}
 8004398:	460c      	mov	r4, r1
 800439a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800439e:	f000 f8bd 	bl	800451c <_lseek_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	bf15      	itete	ne
 80043a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043b2:	81a3      	strheq	r3, [r4, #12]
 80043b4:	bf18      	it	ne
 80043b6:	81a3      	strhne	r3, [r4, #12]
 80043b8:	bd10      	pop	{r4, pc}

080043ba <__sclose>:
 80043ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043be:	f000 b89d 	b.w	80044fc <_close_r>

080043c2 <__swbuf_r>:
 80043c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c4:	460e      	mov	r6, r1
 80043c6:	4614      	mov	r4, r2
 80043c8:	4605      	mov	r5, r0
 80043ca:	b118      	cbz	r0, 80043d4 <__swbuf_r+0x12>
 80043cc:	6a03      	ldr	r3, [r0, #32]
 80043ce:	b90b      	cbnz	r3, 80043d4 <__swbuf_r+0x12>
 80043d0:	f7ff ff06 	bl	80041e0 <__sinit>
 80043d4:	69a3      	ldr	r3, [r4, #24]
 80043d6:	60a3      	str	r3, [r4, #8]
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	071a      	lsls	r2, r3, #28
 80043dc:	d501      	bpl.n	80043e2 <__swbuf_r+0x20>
 80043de:	6923      	ldr	r3, [r4, #16]
 80043e0:	b943      	cbnz	r3, 80043f4 <__swbuf_r+0x32>
 80043e2:	4621      	mov	r1, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 f82b 	bl	8004440 <__swsetup_r>
 80043ea:	b118      	cbz	r0, 80043f4 <__swbuf_r+0x32>
 80043ec:	f04f 37ff 	mov.w	r7, #4294967295
 80043f0:	4638      	mov	r0, r7
 80043f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	6922      	ldr	r2, [r4, #16]
 80043f8:	b2f6      	uxtb	r6, r6
 80043fa:	1a98      	subs	r0, r3, r2
 80043fc:	6963      	ldr	r3, [r4, #20]
 80043fe:	4637      	mov	r7, r6
 8004400:	4283      	cmp	r3, r0
 8004402:	dc05      	bgt.n	8004410 <__swbuf_r+0x4e>
 8004404:	4621      	mov	r1, r4
 8004406:	4628      	mov	r0, r5
 8004408:	f000 fc96 	bl	8004d38 <_fflush_r>
 800440c:	2800      	cmp	r0, #0
 800440e:	d1ed      	bne.n	80043ec <__swbuf_r+0x2a>
 8004410:	68a3      	ldr	r3, [r4, #8]
 8004412:	3b01      	subs	r3, #1
 8004414:	60a3      	str	r3, [r4, #8]
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	6022      	str	r2, [r4, #0]
 800441c:	701e      	strb	r6, [r3, #0]
 800441e:	6962      	ldr	r2, [r4, #20]
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	429a      	cmp	r2, r3
 8004424:	d004      	beq.n	8004430 <__swbuf_r+0x6e>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	07db      	lsls	r3, r3, #31
 800442a:	d5e1      	bpl.n	80043f0 <__swbuf_r+0x2e>
 800442c:	2e0a      	cmp	r6, #10
 800442e:	d1df      	bne.n	80043f0 <__swbuf_r+0x2e>
 8004430:	4621      	mov	r1, r4
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fc80 	bl	8004d38 <_fflush_r>
 8004438:	2800      	cmp	r0, #0
 800443a:	d0d9      	beq.n	80043f0 <__swbuf_r+0x2e>
 800443c:	e7d6      	b.n	80043ec <__swbuf_r+0x2a>
	...

08004440 <__swsetup_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4b29      	ldr	r3, [pc, #164]	@ (80044e8 <__swsetup_r+0xa8>)
 8004444:	4605      	mov	r5, r0
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	460c      	mov	r4, r1
 800444a:	b118      	cbz	r0, 8004454 <__swsetup_r+0x14>
 800444c:	6a03      	ldr	r3, [r0, #32]
 800444e:	b90b      	cbnz	r3, 8004454 <__swsetup_r+0x14>
 8004450:	f7ff fec6 	bl	80041e0 <__sinit>
 8004454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004458:	0719      	lsls	r1, r3, #28
 800445a:	d422      	bmi.n	80044a2 <__swsetup_r+0x62>
 800445c:	06da      	lsls	r2, r3, #27
 800445e:	d407      	bmi.n	8004470 <__swsetup_r+0x30>
 8004460:	2209      	movs	r2, #9
 8004462:	602a      	str	r2, [r5, #0]
 8004464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	e033      	b.n	80044d8 <__swsetup_r+0x98>
 8004470:	0758      	lsls	r0, r3, #29
 8004472:	d512      	bpl.n	800449a <__swsetup_r+0x5a>
 8004474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004476:	b141      	cbz	r1, 800448a <__swsetup_r+0x4a>
 8004478:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800447c:	4299      	cmp	r1, r3
 800447e:	d002      	beq.n	8004486 <__swsetup_r+0x46>
 8004480:	4628      	mov	r0, r5
 8004482:	f000 f8bf 	bl	8004604 <_free_r>
 8004486:	2300      	movs	r3, #0
 8004488:	6363      	str	r3, [r4, #52]	@ 0x34
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004490:	81a3      	strh	r3, [r4, #12]
 8004492:	2300      	movs	r3, #0
 8004494:	6063      	str	r3, [r4, #4]
 8004496:	6923      	ldr	r3, [r4, #16]
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	89a3      	ldrh	r3, [r4, #12]
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	6923      	ldr	r3, [r4, #16]
 80044a4:	b94b      	cbnz	r3, 80044ba <__swsetup_r+0x7a>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044b0:	d003      	beq.n	80044ba <__swsetup_r+0x7a>
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 fc8c 	bl	8004dd2 <__smakebuf_r>
 80044ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044be:	f013 0201 	ands.w	r2, r3, #1
 80044c2:	d00a      	beq.n	80044da <__swsetup_r+0x9a>
 80044c4:	2200      	movs	r2, #0
 80044c6:	60a2      	str	r2, [r4, #8]
 80044c8:	6962      	ldr	r2, [r4, #20]
 80044ca:	4252      	negs	r2, r2
 80044cc:	61a2      	str	r2, [r4, #24]
 80044ce:	6922      	ldr	r2, [r4, #16]
 80044d0:	b942      	cbnz	r2, 80044e4 <__swsetup_r+0xa4>
 80044d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80044d6:	d1c5      	bne.n	8004464 <__swsetup_r+0x24>
 80044d8:	bd38      	pop	{r3, r4, r5, pc}
 80044da:	0799      	lsls	r1, r3, #30
 80044dc:	bf58      	it	pl
 80044de:	6962      	ldrpl	r2, [r4, #20]
 80044e0:	60a2      	str	r2, [r4, #8]
 80044e2:	e7f4      	b.n	80044ce <__swsetup_r+0x8e>
 80044e4:	2000      	movs	r0, #0
 80044e6:	e7f7      	b.n	80044d8 <__swsetup_r+0x98>
 80044e8:	20000018 	.word	0x20000018

080044ec <memset>:
 80044ec:	4603      	mov	r3, r0
 80044ee:	4402      	add	r2, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	f803 1b01 	strb.w	r1, [r3], #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <_close_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	2300      	movs	r3, #0
 8004500:	4d05      	ldr	r5, [pc, #20]	@ (8004518 <_close_r+0x1c>)
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fd fafb 	bl	8001b02 <_close>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_close_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_close_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	20000298 	.word	0x20000298

0800451c <_lseek_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	2200      	movs	r2, #0
 8004526:	4d05      	ldr	r5, [pc, #20]	@ (800453c <_lseek_r+0x20>)
 8004528:	602a      	str	r2, [r5, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	f7fd fb0d 	bl	8001b4a <_lseek>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_lseek_r+0x1e>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_lseek_r+0x1e>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	20000298 	.word	0x20000298

08004540 <_read_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	2200      	movs	r2, #0
 800454a:	4d05      	ldr	r5, [pc, #20]	@ (8004560 <_read_r+0x20>)
 800454c:	602a      	str	r2, [r5, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f7fd fa9e 	bl	8001a90 <_read>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_read_r+0x1e>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_read_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	20000298 	.word	0x20000298

08004564 <_sbrk_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	2300      	movs	r3, #0
 8004568:	4d05      	ldr	r5, [pc, #20]	@ (8004580 <_sbrk_r+0x1c>)
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fd faf8 	bl	8001b64 <_sbrk>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_sbrk_r+0x1a>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_sbrk_r+0x1a>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	20000298 	.word	0x20000298

08004584 <_write_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	4611      	mov	r1, r2
 800458c:	2200      	movs	r2, #0
 800458e:	4d05      	ldr	r5, [pc, #20]	@ (80045a4 <_write_r+0x20>)
 8004590:	602a      	str	r2, [r5, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f7fd fa99 	bl	8001aca <_write>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_write_r+0x1e>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_write_r+0x1e>
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	20000298 	.word	0x20000298

080045a8 <__errno>:
 80045a8:	4b01      	ldr	r3, [pc, #4]	@ (80045b0 <__errno+0x8>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000018 	.word	0x20000018

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	2600      	movs	r6, #0
 80045b8:	4d0c      	ldr	r5, [pc, #48]	@ (80045ec <__libc_init_array+0x38>)
 80045ba:	4c0d      	ldr	r4, [pc, #52]	@ (80045f0 <__libc_init_array+0x3c>)
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	f000 fca6 	bl	8004f14 <_init>
 80045c8:	2600      	movs	r6, #0
 80045ca:	4d0a      	ldr	r5, [pc, #40]	@ (80045f4 <__libc_init_array+0x40>)
 80045cc:	4c0a      	ldr	r4, [pc, #40]	@ (80045f8 <__libc_init_array+0x44>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	0800536c 	.word	0x0800536c
 80045f0:	0800536c 	.word	0x0800536c
 80045f4:	0800536c 	.word	0x0800536c
 80045f8:	08005370 	.word	0x08005370

080045fc <__retarget_lock_init_recursive>:
 80045fc:	4770      	bx	lr

080045fe <__retarget_lock_acquire_recursive>:
 80045fe:	4770      	bx	lr

08004600 <__retarget_lock_release_recursive>:
 8004600:	4770      	bx	lr
	...

08004604 <_free_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4605      	mov	r5, r0
 8004608:	2900      	cmp	r1, #0
 800460a:	d040      	beq.n	800468e <_free_r+0x8a>
 800460c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004610:	1f0c      	subs	r4, r1, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	bfb8      	it	lt
 8004616:	18e4      	addlt	r4, r4, r3
 8004618:	f7ff fd4a 	bl	80040b0 <__malloc_lock>
 800461c:	4a1c      	ldr	r2, [pc, #112]	@ (8004690 <_free_r+0x8c>)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	b933      	cbnz	r3, 8004630 <_free_r+0x2c>
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6014      	str	r4, [r2, #0]
 8004626:	4628      	mov	r0, r5
 8004628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800462c:	f7ff bd46 	b.w	80040bc <__malloc_unlock>
 8004630:	42a3      	cmp	r3, r4
 8004632:	d908      	bls.n	8004646 <_free_r+0x42>
 8004634:	6820      	ldr	r0, [r4, #0]
 8004636:	1821      	adds	r1, r4, r0
 8004638:	428b      	cmp	r3, r1
 800463a:	bf01      	itttt	eq
 800463c:	6819      	ldreq	r1, [r3, #0]
 800463e:	685b      	ldreq	r3, [r3, #4]
 8004640:	1809      	addeq	r1, r1, r0
 8004642:	6021      	streq	r1, [r4, #0]
 8004644:	e7ed      	b.n	8004622 <_free_r+0x1e>
 8004646:	461a      	mov	r2, r3
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	b10b      	cbz	r3, 8004650 <_free_r+0x4c>
 800464c:	42a3      	cmp	r3, r4
 800464e:	d9fa      	bls.n	8004646 <_free_r+0x42>
 8004650:	6811      	ldr	r1, [r2, #0]
 8004652:	1850      	adds	r0, r2, r1
 8004654:	42a0      	cmp	r0, r4
 8004656:	d10b      	bne.n	8004670 <_free_r+0x6c>
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	4401      	add	r1, r0
 800465c:	1850      	adds	r0, r2, r1
 800465e:	4283      	cmp	r3, r0
 8004660:	6011      	str	r1, [r2, #0]
 8004662:	d1e0      	bne.n	8004626 <_free_r+0x22>
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4408      	add	r0, r1
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	6053      	str	r3, [r2, #4]
 800466e:	e7da      	b.n	8004626 <_free_r+0x22>
 8004670:	d902      	bls.n	8004678 <_free_r+0x74>
 8004672:	230c      	movs	r3, #12
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	e7d6      	b.n	8004626 <_free_r+0x22>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1809      	addeq	r1, r1, r0
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6054      	str	r4, [r2, #4]
 800468c:	e7cb      	b.n	8004626 <_free_r+0x22>
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	20000158 	.word	0x20000158

08004694 <__sfputc_r>:
 8004694:	6893      	ldr	r3, [r2, #8]
 8004696:	b410      	push	{r4}
 8004698:	3b01      	subs	r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	6093      	str	r3, [r2, #8]
 800469e:	da07      	bge.n	80046b0 <__sfputc_r+0x1c>
 80046a0:	6994      	ldr	r4, [r2, #24]
 80046a2:	42a3      	cmp	r3, r4
 80046a4:	db01      	blt.n	80046aa <__sfputc_r+0x16>
 80046a6:	290a      	cmp	r1, #10
 80046a8:	d102      	bne.n	80046b0 <__sfputc_r+0x1c>
 80046aa:	bc10      	pop	{r4}
 80046ac:	f7ff be89 	b.w	80043c2 <__swbuf_r>
 80046b0:	6813      	ldr	r3, [r2, #0]
 80046b2:	1c58      	adds	r0, r3, #1
 80046b4:	6010      	str	r0, [r2, #0]
 80046b6:	7019      	strb	r1, [r3, #0]
 80046b8:	4608      	mov	r0, r1
 80046ba:	bc10      	pop	{r4}
 80046bc:	4770      	bx	lr

080046be <__sfputs_r>:
 80046be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c0:	4606      	mov	r6, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	4614      	mov	r4, r2
 80046c6:	18d5      	adds	r5, r2, r3
 80046c8:	42ac      	cmp	r4, r5
 80046ca:	d101      	bne.n	80046d0 <__sfputs_r+0x12>
 80046cc:	2000      	movs	r0, #0
 80046ce:	e007      	b.n	80046e0 <__sfputs_r+0x22>
 80046d0:	463a      	mov	r2, r7
 80046d2:	4630      	mov	r0, r6
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	f7ff ffdc 	bl	8004694 <__sfputc_r>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	d1f3      	bne.n	80046c8 <__sfputs_r+0xa>
 80046e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046e4 <_vfiprintf_r>:
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	460d      	mov	r5, r1
 80046ea:	4614      	mov	r4, r2
 80046ec:	4698      	mov	r8, r3
 80046ee:	4606      	mov	r6, r0
 80046f0:	b09d      	sub	sp, #116	@ 0x74
 80046f2:	b118      	cbz	r0, 80046fc <_vfiprintf_r+0x18>
 80046f4:	6a03      	ldr	r3, [r0, #32]
 80046f6:	b90b      	cbnz	r3, 80046fc <_vfiprintf_r+0x18>
 80046f8:	f7ff fd72 	bl	80041e0 <__sinit>
 80046fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046fe:	07d9      	lsls	r1, r3, #31
 8004700:	d405      	bmi.n	800470e <_vfiprintf_r+0x2a>
 8004702:	89ab      	ldrh	r3, [r5, #12]
 8004704:	059a      	lsls	r2, r3, #22
 8004706:	d402      	bmi.n	800470e <_vfiprintf_r+0x2a>
 8004708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800470a:	f7ff ff78 	bl	80045fe <__retarget_lock_acquire_recursive>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	071b      	lsls	r3, r3, #28
 8004712:	d501      	bpl.n	8004718 <_vfiprintf_r+0x34>
 8004714:	692b      	ldr	r3, [r5, #16]
 8004716:	b99b      	cbnz	r3, 8004740 <_vfiprintf_r+0x5c>
 8004718:	4629      	mov	r1, r5
 800471a:	4630      	mov	r0, r6
 800471c:	f7ff fe90 	bl	8004440 <__swsetup_r>
 8004720:	b170      	cbz	r0, 8004740 <_vfiprintf_r+0x5c>
 8004722:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004724:	07dc      	lsls	r4, r3, #31
 8004726:	d504      	bpl.n	8004732 <_vfiprintf_r+0x4e>
 8004728:	f04f 30ff 	mov.w	r0, #4294967295
 800472c:	b01d      	add	sp, #116	@ 0x74
 800472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004732:	89ab      	ldrh	r3, [r5, #12]
 8004734:	0598      	lsls	r0, r3, #22
 8004736:	d4f7      	bmi.n	8004728 <_vfiprintf_r+0x44>
 8004738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800473a:	f7ff ff61 	bl	8004600 <__retarget_lock_release_recursive>
 800473e:	e7f3      	b.n	8004728 <_vfiprintf_r+0x44>
 8004740:	2300      	movs	r3, #0
 8004742:	9309      	str	r3, [sp, #36]	@ 0x24
 8004744:	2320      	movs	r3, #32
 8004746:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800474a:	2330      	movs	r3, #48	@ 0x30
 800474c:	f04f 0901 	mov.w	r9, #1
 8004750:	f8cd 800c 	str.w	r8, [sp, #12]
 8004754:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004900 <_vfiprintf_r+0x21c>
 8004758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800475c:	4623      	mov	r3, r4
 800475e:	469a      	mov	sl, r3
 8004760:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004764:	b10a      	cbz	r2, 800476a <_vfiprintf_r+0x86>
 8004766:	2a25      	cmp	r2, #37	@ 0x25
 8004768:	d1f9      	bne.n	800475e <_vfiprintf_r+0x7a>
 800476a:	ebba 0b04 	subs.w	fp, sl, r4
 800476e:	d00b      	beq.n	8004788 <_vfiprintf_r+0xa4>
 8004770:	465b      	mov	r3, fp
 8004772:	4622      	mov	r2, r4
 8004774:	4629      	mov	r1, r5
 8004776:	4630      	mov	r0, r6
 8004778:	f7ff ffa1 	bl	80046be <__sfputs_r>
 800477c:	3001      	adds	r0, #1
 800477e:	f000 80a7 	beq.w	80048d0 <_vfiprintf_r+0x1ec>
 8004782:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004784:	445a      	add	r2, fp
 8004786:	9209      	str	r2, [sp, #36]	@ 0x24
 8004788:	f89a 3000 	ldrb.w	r3, [sl]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 809f 	beq.w	80048d0 <_vfiprintf_r+0x1ec>
 8004792:	2300      	movs	r3, #0
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479c:	f10a 0a01 	add.w	sl, sl, #1
 80047a0:	9304      	str	r3, [sp, #16]
 80047a2:	9307      	str	r3, [sp, #28]
 80047a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80047a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80047aa:	4654      	mov	r4, sl
 80047ac:	2205      	movs	r2, #5
 80047ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b2:	4853      	ldr	r0, [pc, #332]	@ (8004900 <_vfiprintf_r+0x21c>)
 80047b4:	f000 fba0 	bl	8004ef8 <memchr>
 80047b8:	9a04      	ldr	r2, [sp, #16]
 80047ba:	b9d8      	cbnz	r0, 80047f4 <_vfiprintf_r+0x110>
 80047bc:	06d1      	lsls	r1, r2, #27
 80047be:	bf44      	itt	mi
 80047c0:	2320      	movmi	r3, #32
 80047c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047c6:	0713      	lsls	r3, r2, #28
 80047c8:	bf44      	itt	mi
 80047ca:	232b      	movmi	r3, #43	@ 0x2b
 80047cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80047d0:	f89a 3000 	ldrb.w	r3, [sl]
 80047d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d6:	d015      	beq.n	8004804 <_vfiprintf_r+0x120>
 80047d8:	4654      	mov	r4, sl
 80047da:	2000      	movs	r0, #0
 80047dc:	f04f 0c0a 	mov.w	ip, #10
 80047e0:	9a07      	ldr	r2, [sp, #28]
 80047e2:	4621      	mov	r1, r4
 80047e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e8:	3b30      	subs	r3, #48	@ 0x30
 80047ea:	2b09      	cmp	r3, #9
 80047ec:	d94b      	bls.n	8004886 <_vfiprintf_r+0x1a2>
 80047ee:	b1b0      	cbz	r0, 800481e <_vfiprintf_r+0x13a>
 80047f0:	9207      	str	r2, [sp, #28]
 80047f2:	e014      	b.n	800481e <_vfiprintf_r+0x13a>
 80047f4:	eba0 0308 	sub.w	r3, r0, r8
 80047f8:	fa09 f303 	lsl.w	r3, r9, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	46a2      	mov	sl, r4
 8004800:	9304      	str	r3, [sp, #16]
 8004802:	e7d2      	b.n	80047aa <_vfiprintf_r+0xc6>
 8004804:	9b03      	ldr	r3, [sp, #12]
 8004806:	1d19      	adds	r1, r3, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	9103      	str	r1, [sp, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	bfbb      	ittet	lt
 8004810:	425b      	neglt	r3, r3
 8004812:	f042 0202 	orrlt.w	r2, r2, #2
 8004816:	9307      	strge	r3, [sp, #28]
 8004818:	9307      	strlt	r3, [sp, #28]
 800481a:	bfb8      	it	lt
 800481c:	9204      	strlt	r2, [sp, #16]
 800481e:	7823      	ldrb	r3, [r4, #0]
 8004820:	2b2e      	cmp	r3, #46	@ 0x2e
 8004822:	d10a      	bne.n	800483a <_vfiprintf_r+0x156>
 8004824:	7863      	ldrb	r3, [r4, #1]
 8004826:	2b2a      	cmp	r3, #42	@ 0x2a
 8004828:	d132      	bne.n	8004890 <_vfiprintf_r+0x1ac>
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	3402      	adds	r4, #2
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	9203      	str	r2, [sp, #12]
 8004834:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004904 <_vfiprintf_r+0x220>
 800483e:	2203      	movs	r2, #3
 8004840:	4650      	mov	r0, sl
 8004842:	7821      	ldrb	r1, [r4, #0]
 8004844:	f000 fb58 	bl	8004ef8 <memchr>
 8004848:	b138      	cbz	r0, 800485a <_vfiprintf_r+0x176>
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	9b04      	ldr	r3, [sp, #16]
 800484e:	eba0 000a 	sub.w	r0, r0, sl
 8004852:	4082      	lsls	r2, r0
 8004854:	4313      	orrs	r3, r2
 8004856:	3401      	adds	r4, #1
 8004858:	9304      	str	r3, [sp, #16]
 800485a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800485e:	2206      	movs	r2, #6
 8004860:	4829      	ldr	r0, [pc, #164]	@ (8004908 <_vfiprintf_r+0x224>)
 8004862:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004866:	f000 fb47 	bl	8004ef8 <memchr>
 800486a:	2800      	cmp	r0, #0
 800486c:	d03f      	beq.n	80048ee <_vfiprintf_r+0x20a>
 800486e:	4b27      	ldr	r3, [pc, #156]	@ (800490c <_vfiprintf_r+0x228>)
 8004870:	bb1b      	cbnz	r3, 80048ba <_vfiprintf_r+0x1d6>
 8004872:	9b03      	ldr	r3, [sp, #12]
 8004874:	3307      	adds	r3, #7
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	3308      	adds	r3, #8
 800487c:	9303      	str	r3, [sp, #12]
 800487e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004880:	443b      	add	r3, r7
 8004882:	9309      	str	r3, [sp, #36]	@ 0x24
 8004884:	e76a      	b.n	800475c <_vfiprintf_r+0x78>
 8004886:	460c      	mov	r4, r1
 8004888:	2001      	movs	r0, #1
 800488a:	fb0c 3202 	mla	r2, ip, r2, r3
 800488e:	e7a8      	b.n	80047e2 <_vfiprintf_r+0xfe>
 8004890:	2300      	movs	r3, #0
 8004892:	f04f 0c0a 	mov.w	ip, #10
 8004896:	4619      	mov	r1, r3
 8004898:	3401      	adds	r4, #1
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	4620      	mov	r0, r4
 800489e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a2:	3a30      	subs	r2, #48	@ 0x30
 80048a4:	2a09      	cmp	r2, #9
 80048a6:	d903      	bls.n	80048b0 <_vfiprintf_r+0x1cc>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0c6      	beq.n	800483a <_vfiprintf_r+0x156>
 80048ac:	9105      	str	r1, [sp, #20]
 80048ae:	e7c4      	b.n	800483a <_vfiprintf_r+0x156>
 80048b0:	4604      	mov	r4, r0
 80048b2:	2301      	movs	r3, #1
 80048b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048b8:	e7f0      	b.n	800489c <_vfiprintf_r+0x1b8>
 80048ba:	ab03      	add	r3, sp, #12
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	462a      	mov	r2, r5
 80048c0:	4630      	mov	r0, r6
 80048c2:	4b13      	ldr	r3, [pc, #76]	@ (8004910 <_vfiprintf_r+0x22c>)
 80048c4:	a904      	add	r1, sp, #16
 80048c6:	f3af 8000 	nop.w
 80048ca:	4607      	mov	r7, r0
 80048cc:	1c78      	adds	r0, r7, #1
 80048ce:	d1d6      	bne.n	800487e <_vfiprintf_r+0x19a>
 80048d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048d2:	07d9      	lsls	r1, r3, #31
 80048d4:	d405      	bmi.n	80048e2 <_vfiprintf_r+0x1fe>
 80048d6:	89ab      	ldrh	r3, [r5, #12]
 80048d8:	059a      	lsls	r2, r3, #22
 80048da:	d402      	bmi.n	80048e2 <_vfiprintf_r+0x1fe>
 80048dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048de:	f7ff fe8f 	bl	8004600 <__retarget_lock_release_recursive>
 80048e2:	89ab      	ldrh	r3, [r5, #12]
 80048e4:	065b      	lsls	r3, r3, #25
 80048e6:	f53f af1f 	bmi.w	8004728 <_vfiprintf_r+0x44>
 80048ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048ec:	e71e      	b.n	800472c <_vfiprintf_r+0x48>
 80048ee:	ab03      	add	r3, sp, #12
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	462a      	mov	r2, r5
 80048f4:	4630      	mov	r0, r6
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <_vfiprintf_r+0x22c>)
 80048f8:	a904      	add	r1, sp, #16
 80048fa:	f000 f87d 	bl	80049f8 <_printf_i>
 80048fe:	e7e4      	b.n	80048ca <_vfiprintf_r+0x1e6>
 8004900:	08005330 	.word	0x08005330
 8004904:	08005336 	.word	0x08005336
 8004908:	0800533a 	.word	0x0800533a
 800490c:	00000000 	.word	0x00000000
 8004910:	080046bf 	.word	0x080046bf

08004914 <_printf_common>:
 8004914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004918:	4616      	mov	r6, r2
 800491a:	4698      	mov	r8, r3
 800491c:	688a      	ldr	r2, [r1, #8]
 800491e:	690b      	ldr	r3, [r1, #16]
 8004920:	4607      	mov	r7, r0
 8004922:	4293      	cmp	r3, r2
 8004924:	bfb8      	it	lt
 8004926:	4613      	movlt	r3, r2
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800492e:	460c      	mov	r4, r1
 8004930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004934:	b10a      	cbz	r2, 800493a <_printf_common+0x26>
 8004936:	3301      	adds	r3, #1
 8004938:	6033      	str	r3, [r6, #0]
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	0699      	lsls	r1, r3, #26
 800493e:	bf42      	ittt	mi
 8004940:	6833      	ldrmi	r3, [r6, #0]
 8004942:	3302      	addmi	r3, #2
 8004944:	6033      	strmi	r3, [r6, #0]
 8004946:	6825      	ldr	r5, [r4, #0]
 8004948:	f015 0506 	ands.w	r5, r5, #6
 800494c:	d106      	bne.n	800495c <_printf_common+0x48>
 800494e:	f104 0a19 	add.w	sl, r4, #25
 8004952:	68e3      	ldr	r3, [r4, #12]
 8004954:	6832      	ldr	r2, [r6, #0]
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	42ab      	cmp	r3, r5
 800495a:	dc2b      	bgt.n	80049b4 <_printf_common+0xa0>
 800495c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004960:	6822      	ldr	r2, [r4, #0]
 8004962:	3b00      	subs	r3, #0
 8004964:	bf18      	it	ne
 8004966:	2301      	movne	r3, #1
 8004968:	0692      	lsls	r2, r2, #26
 800496a:	d430      	bmi.n	80049ce <_printf_common+0xba>
 800496c:	4641      	mov	r1, r8
 800496e:	4638      	mov	r0, r7
 8004970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004974:	47c8      	blx	r9
 8004976:	3001      	adds	r0, #1
 8004978:	d023      	beq.n	80049c2 <_printf_common+0xae>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	6922      	ldr	r2, [r4, #16]
 800497e:	f003 0306 	and.w	r3, r3, #6
 8004982:	2b04      	cmp	r3, #4
 8004984:	bf14      	ite	ne
 8004986:	2500      	movne	r5, #0
 8004988:	6833      	ldreq	r3, [r6, #0]
 800498a:	f04f 0600 	mov.w	r6, #0
 800498e:	bf08      	it	eq
 8004990:	68e5      	ldreq	r5, [r4, #12]
 8004992:	f104 041a 	add.w	r4, r4, #26
 8004996:	bf08      	it	eq
 8004998:	1aed      	subeq	r5, r5, r3
 800499a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800499e:	bf08      	it	eq
 80049a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049a4:	4293      	cmp	r3, r2
 80049a6:	bfc4      	itt	gt
 80049a8:	1a9b      	subgt	r3, r3, r2
 80049aa:	18ed      	addgt	r5, r5, r3
 80049ac:	42b5      	cmp	r5, r6
 80049ae:	d11a      	bne.n	80049e6 <_printf_common+0xd2>
 80049b0:	2000      	movs	r0, #0
 80049b2:	e008      	b.n	80049c6 <_printf_common+0xb2>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4652      	mov	r2, sl
 80049b8:	4641      	mov	r1, r8
 80049ba:	4638      	mov	r0, r7
 80049bc:	47c8      	blx	r9
 80049be:	3001      	adds	r0, #1
 80049c0:	d103      	bne.n	80049ca <_printf_common+0xb6>
 80049c2:	f04f 30ff 	mov.w	r0, #4294967295
 80049c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ca:	3501      	adds	r5, #1
 80049cc:	e7c1      	b.n	8004952 <_printf_common+0x3e>
 80049ce:	2030      	movs	r0, #48	@ 0x30
 80049d0:	18e1      	adds	r1, r4, r3
 80049d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80049dc:	4422      	add	r2, r4
 80049de:	3302      	adds	r3, #2
 80049e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80049e4:	e7c2      	b.n	800496c <_printf_common+0x58>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4622      	mov	r2, r4
 80049ea:	4641      	mov	r1, r8
 80049ec:	4638      	mov	r0, r7
 80049ee:	47c8      	blx	r9
 80049f0:	3001      	adds	r0, #1
 80049f2:	d0e6      	beq.n	80049c2 <_printf_common+0xae>
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7d9      	b.n	80049ac <_printf_common+0x98>

080049f8 <_printf_i>:
 80049f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049fc:	7e0f      	ldrb	r7, [r1, #24]
 80049fe:	4691      	mov	r9, r2
 8004a00:	2f78      	cmp	r7, #120	@ 0x78
 8004a02:	4680      	mov	r8, r0
 8004a04:	460c      	mov	r4, r1
 8004a06:	469a      	mov	sl, r3
 8004a08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a0e:	d807      	bhi.n	8004a20 <_printf_i+0x28>
 8004a10:	2f62      	cmp	r7, #98	@ 0x62
 8004a12:	d80a      	bhi.n	8004a2a <_printf_i+0x32>
 8004a14:	2f00      	cmp	r7, #0
 8004a16:	f000 80d3 	beq.w	8004bc0 <_printf_i+0x1c8>
 8004a1a:	2f58      	cmp	r7, #88	@ 0x58
 8004a1c:	f000 80ba 	beq.w	8004b94 <_printf_i+0x19c>
 8004a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a28:	e03a      	b.n	8004aa0 <_printf_i+0xa8>
 8004a2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a2e:	2b15      	cmp	r3, #21
 8004a30:	d8f6      	bhi.n	8004a20 <_printf_i+0x28>
 8004a32:	a101      	add	r1, pc, #4	@ (adr r1, 8004a38 <_printf_i+0x40>)
 8004a34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004aa5 	.word	0x08004aa5
 8004a40:	08004a21 	.word	0x08004a21
 8004a44:	08004a21 	.word	0x08004a21
 8004a48:	08004a21 	.word	0x08004a21
 8004a4c:	08004a21 	.word	0x08004a21
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004a21 	.word	0x08004a21
 8004a58:	08004a21 	.word	0x08004a21
 8004a5c:	08004a21 	.word	0x08004a21
 8004a60:	08004a21 	.word	0x08004a21
 8004a64:	08004ba7 	.word	0x08004ba7
 8004a68:	08004acf 	.word	0x08004acf
 8004a6c:	08004b61 	.word	0x08004b61
 8004a70:	08004a21 	.word	0x08004a21
 8004a74:	08004a21 	.word	0x08004a21
 8004a78:	08004bc9 	.word	0x08004bc9
 8004a7c:	08004a21 	.word	0x08004a21
 8004a80:	08004acf 	.word	0x08004acf
 8004a84:	08004a21 	.word	0x08004a21
 8004a88:	08004a21 	.word	0x08004a21
 8004a8c:	08004b69 	.word	0x08004b69
 8004a90:	6833      	ldr	r3, [r6, #0]
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6032      	str	r2, [r6, #0]
 8004a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e09e      	b.n	8004be2 <_printf_i+0x1ea>
 8004aa4:	6833      	ldr	r3, [r6, #0]
 8004aa6:	6820      	ldr	r0, [r4, #0]
 8004aa8:	1d19      	adds	r1, r3, #4
 8004aaa:	6031      	str	r1, [r6, #0]
 8004aac:	0606      	lsls	r6, r0, #24
 8004aae:	d501      	bpl.n	8004ab4 <_printf_i+0xbc>
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	e003      	b.n	8004abc <_printf_i+0xc4>
 8004ab4:	0645      	lsls	r5, r0, #25
 8004ab6:	d5fb      	bpl.n	8004ab0 <_printf_i+0xb8>
 8004ab8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	da03      	bge.n	8004ac8 <_printf_i+0xd0>
 8004ac0:	232d      	movs	r3, #45	@ 0x2d
 8004ac2:	426d      	negs	r5, r5
 8004ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ac8:	230a      	movs	r3, #10
 8004aca:	4859      	ldr	r0, [pc, #356]	@ (8004c30 <_printf_i+0x238>)
 8004acc:	e011      	b.n	8004af2 <_printf_i+0xfa>
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	6833      	ldr	r3, [r6, #0]
 8004ad2:	0608      	lsls	r0, r1, #24
 8004ad4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ad8:	d402      	bmi.n	8004ae0 <_printf_i+0xe8>
 8004ada:	0649      	lsls	r1, r1, #25
 8004adc:	bf48      	it	mi
 8004ade:	b2ad      	uxthmi	r5, r5
 8004ae0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004ae2:	6033      	str	r3, [r6, #0]
 8004ae4:	bf14      	ite	ne
 8004ae6:	230a      	movne	r3, #10
 8004ae8:	2308      	moveq	r3, #8
 8004aea:	4851      	ldr	r0, [pc, #324]	@ (8004c30 <_printf_i+0x238>)
 8004aec:	2100      	movs	r1, #0
 8004aee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004af2:	6866      	ldr	r6, [r4, #4]
 8004af4:	2e00      	cmp	r6, #0
 8004af6:	bfa8      	it	ge
 8004af8:	6821      	ldrge	r1, [r4, #0]
 8004afa:	60a6      	str	r6, [r4, #8]
 8004afc:	bfa4      	itt	ge
 8004afe:	f021 0104 	bicge.w	r1, r1, #4
 8004b02:	6021      	strge	r1, [r4, #0]
 8004b04:	b90d      	cbnz	r5, 8004b0a <_printf_i+0x112>
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d04b      	beq.n	8004ba2 <_printf_i+0x1aa>
 8004b0a:	4616      	mov	r6, r2
 8004b0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b10:	fb03 5711 	mls	r7, r3, r1, r5
 8004b14:	5dc7      	ldrb	r7, [r0, r7]
 8004b16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b1a:	462f      	mov	r7, r5
 8004b1c:	42bb      	cmp	r3, r7
 8004b1e:	460d      	mov	r5, r1
 8004b20:	d9f4      	bls.n	8004b0c <_printf_i+0x114>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d10b      	bne.n	8004b3e <_printf_i+0x146>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	07df      	lsls	r7, r3, #31
 8004b2a:	d508      	bpl.n	8004b3e <_printf_i+0x146>
 8004b2c:	6923      	ldr	r3, [r4, #16]
 8004b2e:	6861      	ldr	r1, [r4, #4]
 8004b30:	4299      	cmp	r1, r3
 8004b32:	bfde      	ittt	le
 8004b34:	2330      	movle	r3, #48	@ 0x30
 8004b36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b3e:	1b92      	subs	r2, r2, r6
 8004b40:	6122      	str	r2, [r4, #16]
 8004b42:	464b      	mov	r3, r9
 8004b44:	4621      	mov	r1, r4
 8004b46:	4640      	mov	r0, r8
 8004b48:	f8cd a000 	str.w	sl, [sp]
 8004b4c:	aa03      	add	r2, sp, #12
 8004b4e:	f7ff fee1 	bl	8004914 <_printf_common>
 8004b52:	3001      	adds	r0, #1
 8004b54:	d14a      	bne.n	8004bec <_printf_i+0x1f4>
 8004b56:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5a:	b004      	add	sp, #16
 8004b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	f043 0320 	orr.w	r3, r3, #32
 8004b66:	6023      	str	r3, [r4, #0]
 8004b68:	2778      	movs	r7, #120	@ 0x78
 8004b6a:	4832      	ldr	r0, [pc, #200]	@ (8004c34 <_printf_i+0x23c>)
 8004b6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	6831      	ldr	r1, [r6, #0]
 8004b74:	061f      	lsls	r7, r3, #24
 8004b76:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b7a:	d402      	bmi.n	8004b82 <_printf_i+0x18a>
 8004b7c:	065f      	lsls	r7, r3, #25
 8004b7e:	bf48      	it	mi
 8004b80:	b2ad      	uxthmi	r5, r5
 8004b82:	6031      	str	r1, [r6, #0]
 8004b84:	07d9      	lsls	r1, r3, #31
 8004b86:	bf44      	itt	mi
 8004b88:	f043 0320 	orrmi.w	r3, r3, #32
 8004b8c:	6023      	strmi	r3, [r4, #0]
 8004b8e:	b11d      	cbz	r5, 8004b98 <_printf_i+0x1a0>
 8004b90:	2310      	movs	r3, #16
 8004b92:	e7ab      	b.n	8004aec <_printf_i+0xf4>
 8004b94:	4826      	ldr	r0, [pc, #152]	@ (8004c30 <_printf_i+0x238>)
 8004b96:	e7e9      	b.n	8004b6c <_printf_i+0x174>
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f023 0320 	bic.w	r3, r3, #32
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	e7f6      	b.n	8004b90 <_printf_i+0x198>
 8004ba2:	4616      	mov	r6, r2
 8004ba4:	e7bd      	b.n	8004b22 <_printf_i+0x12a>
 8004ba6:	6833      	ldr	r3, [r6, #0]
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	1d18      	adds	r0, r3, #4
 8004bac:	6961      	ldr	r1, [r4, #20]
 8004bae:	6030      	str	r0, [r6, #0]
 8004bb0:	062e      	lsls	r6, r5, #24
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	d501      	bpl.n	8004bba <_printf_i+0x1c2>
 8004bb6:	6019      	str	r1, [r3, #0]
 8004bb8:	e002      	b.n	8004bc0 <_printf_i+0x1c8>
 8004bba:	0668      	lsls	r0, r5, #25
 8004bbc:	d5fb      	bpl.n	8004bb6 <_printf_i+0x1be>
 8004bbe:	8019      	strh	r1, [r3, #0]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4616      	mov	r6, r2
 8004bc4:	6123      	str	r3, [r4, #16]
 8004bc6:	e7bc      	b.n	8004b42 <_printf_i+0x14a>
 8004bc8:	6833      	ldr	r3, [r6, #0]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	1d1a      	adds	r2, r3, #4
 8004bce:	6032      	str	r2, [r6, #0]
 8004bd0:	681e      	ldr	r6, [r3, #0]
 8004bd2:	6862      	ldr	r2, [r4, #4]
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f000 f98f 	bl	8004ef8 <memchr>
 8004bda:	b108      	cbz	r0, 8004be0 <_printf_i+0x1e8>
 8004bdc:	1b80      	subs	r0, r0, r6
 8004bde:	6060      	str	r0, [r4, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	2300      	movs	r3, #0
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bea:	e7aa      	b.n	8004b42 <_printf_i+0x14a>
 8004bec:	4632      	mov	r2, r6
 8004bee:	4649      	mov	r1, r9
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	6923      	ldr	r3, [r4, #16]
 8004bf4:	47d0      	blx	sl
 8004bf6:	3001      	adds	r0, #1
 8004bf8:	d0ad      	beq.n	8004b56 <_printf_i+0x15e>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	079b      	lsls	r3, r3, #30
 8004bfe:	d413      	bmi.n	8004c28 <_printf_i+0x230>
 8004c00:	68e0      	ldr	r0, [r4, #12]
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	4298      	cmp	r0, r3
 8004c06:	bfb8      	it	lt
 8004c08:	4618      	movlt	r0, r3
 8004c0a:	e7a6      	b.n	8004b5a <_printf_i+0x162>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	4632      	mov	r2, r6
 8004c10:	4649      	mov	r1, r9
 8004c12:	4640      	mov	r0, r8
 8004c14:	47d0      	blx	sl
 8004c16:	3001      	adds	r0, #1
 8004c18:	d09d      	beq.n	8004b56 <_printf_i+0x15e>
 8004c1a:	3501      	adds	r5, #1
 8004c1c:	68e3      	ldr	r3, [r4, #12]
 8004c1e:	9903      	ldr	r1, [sp, #12]
 8004c20:	1a5b      	subs	r3, r3, r1
 8004c22:	42ab      	cmp	r3, r5
 8004c24:	dcf2      	bgt.n	8004c0c <_printf_i+0x214>
 8004c26:	e7eb      	b.n	8004c00 <_printf_i+0x208>
 8004c28:	2500      	movs	r5, #0
 8004c2a:	f104 0619 	add.w	r6, r4, #25
 8004c2e:	e7f5      	b.n	8004c1c <_printf_i+0x224>
 8004c30:	08005341 	.word	0x08005341
 8004c34:	08005352 	.word	0x08005352

08004c38 <__sflush_r>:
 8004c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	0716      	lsls	r6, r2, #28
 8004c40:	4605      	mov	r5, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	d454      	bmi.n	8004cf0 <__sflush_r+0xb8>
 8004c46:	684b      	ldr	r3, [r1, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dc02      	bgt.n	8004c52 <__sflush_r+0x1a>
 8004c4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	dd48      	ble.n	8004ce4 <__sflush_r+0xac>
 8004c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d045      	beq.n	8004ce4 <__sflush_r+0xac>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c5e:	682f      	ldr	r7, [r5, #0]
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	d030      	beq.n	8004cc8 <__sflush_r+0x90>
 8004c66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	0759      	lsls	r1, r3, #29
 8004c6c:	d505      	bpl.n	8004c7a <__sflush_r+0x42>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c74:	b10b      	cbz	r3, 8004c7a <__sflush_r+0x42>
 8004c76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c78:	1ad2      	subs	r2, r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	47b0      	blx	r6
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	d106      	bne.n	8004c98 <__sflush_r+0x60>
 8004c8a:	6829      	ldr	r1, [r5, #0]
 8004c8c:	291d      	cmp	r1, #29
 8004c8e:	d82b      	bhi.n	8004ce8 <__sflush_r+0xb0>
 8004c90:	4a28      	ldr	r2, [pc, #160]	@ (8004d34 <__sflush_r+0xfc>)
 8004c92:	410a      	asrs	r2, r1
 8004c94:	07d6      	lsls	r6, r2, #31
 8004c96:	d427      	bmi.n	8004ce8 <__sflush_r+0xb0>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	6062      	str	r2, [r4, #4]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	d504      	bpl.n	8004cae <__sflush_r+0x76>
 8004ca4:	1c42      	adds	r2, r0, #1
 8004ca6:	d101      	bne.n	8004cac <__sflush_r+0x74>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b903      	cbnz	r3, 8004cae <__sflush_r+0x76>
 8004cac:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cb0:	602f      	str	r7, [r5, #0]
 8004cb2:	b1b9      	cbz	r1, 8004ce4 <__sflush_r+0xac>
 8004cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	d002      	beq.n	8004cc2 <__sflush_r+0x8a>
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f7ff fca1 	bl	8004604 <_free_r>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cc6:	e00d      	b.n	8004ce4 <__sflush_r+0xac>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b0      	blx	r6
 8004cce:	4602      	mov	r2, r0
 8004cd0:	1c50      	adds	r0, r2, #1
 8004cd2:	d1c9      	bne.n	8004c68 <__sflush_r+0x30>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0c6      	beq.n	8004c68 <__sflush_r+0x30>
 8004cda:	2b1d      	cmp	r3, #29
 8004cdc:	d001      	beq.n	8004ce2 <__sflush_r+0xaa>
 8004cde:	2b16      	cmp	r3, #22
 8004ce0:	d11d      	bne.n	8004d1e <__sflush_r+0xe6>
 8004ce2:	602f      	str	r7, [r5, #0]
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e021      	b.n	8004d2c <__sflush_r+0xf4>
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	e01a      	b.n	8004d26 <__sflush_r+0xee>
 8004cf0:	690f      	ldr	r7, [r1, #16]
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d0f6      	beq.n	8004ce4 <__sflush_r+0xac>
 8004cf6:	0793      	lsls	r3, r2, #30
 8004cf8:	bf18      	it	ne
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	bf08      	it	eq
 8004d00:	694b      	ldreq	r3, [r1, #20]
 8004d02:	1bf6      	subs	r6, r6, r7
 8004d04:	600f      	str	r7, [r1, #0]
 8004d06:	608b      	str	r3, [r1, #8]
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	ddeb      	ble.n	8004ce4 <__sflush_r+0xac>
 8004d0c:	4633      	mov	r3, r6
 8004d0e:	463a      	mov	r2, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	6a21      	ldr	r1, [r4, #32]
 8004d14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004d18:	47e0      	blx	ip
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	dc07      	bgt.n	8004d2e <__sflush_r+0xf6>
 8004d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2e:	4407      	add	r7, r0
 8004d30:	1a36      	subs	r6, r6, r0
 8004d32:	e7e9      	b.n	8004d08 <__sflush_r+0xd0>
 8004d34:	dfbffffe 	.word	0xdfbffffe

08004d38 <_fflush_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	690b      	ldr	r3, [r1, #16]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	b913      	cbnz	r3, 8004d48 <_fflush_r+0x10>
 8004d42:	2500      	movs	r5, #0
 8004d44:	4628      	mov	r0, r5
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	b118      	cbz	r0, 8004d52 <_fflush_r+0x1a>
 8004d4a:	6a03      	ldr	r3, [r0, #32]
 8004d4c:	b90b      	cbnz	r3, 8004d52 <_fflush_r+0x1a>
 8004d4e:	f7ff fa47 	bl	80041e0 <__sinit>
 8004d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f3      	beq.n	8004d42 <_fflush_r+0xa>
 8004d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d5c:	07d0      	lsls	r0, r2, #31
 8004d5e:	d404      	bmi.n	8004d6a <_fflush_r+0x32>
 8004d60:	0599      	lsls	r1, r3, #22
 8004d62:	d402      	bmi.n	8004d6a <_fflush_r+0x32>
 8004d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d66:	f7ff fc4a 	bl	80045fe <__retarget_lock_acquire_recursive>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	f7ff ff63 	bl	8004c38 <__sflush_r>
 8004d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d74:	4605      	mov	r5, r0
 8004d76:	07da      	lsls	r2, r3, #31
 8004d78:	d4e4      	bmi.n	8004d44 <_fflush_r+0xc>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	d4e1      	bmi.n	8004d44 <_fflush_r+0xc>
 8004d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d82:	f7ff fc3d 	bl	8004600 <__retarget_lock_release_recursive>
 8004d86:	e7dd      	b.n	8004d44 <_fflush_r+0xc>

08004d88 <__swhatbuf_r>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	4615      	mov	r5, r2
 8004d92:	2900      	cmp	r1, #0
 8004d94:	461e      	mov	r6, r3
 8004d96:	b096      	sub	sp, #88	@ 0x58
 8004d98:	da0c      	bge.n	8004db4 <__swhatbuf_r+0x2c>
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004da2:	bf14      	ite	ne
 8004da4:	2340      	movne	r3, #64	@ 0x40
 8004da6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004daa:	2000      	movs	r0, #0
 8004dac:	6031      	str	r1, [r6, #0]
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	b016      	add	sp, #88	@ 0x58
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	466a      	mov	r2, sp
 8004db6:	f000 f87d 	bl	8004eb4 <_fstat_r>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	dbed      	blt.n	8004d9a <__swhatbuf_r+0x12>
 8004dbe:	9901      	ldr	r1, [sp, #4]
 8004dc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004dc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004dc8:	4259      	negs	r1, r3
 8004dca:	4159      	adcs	r1, r3
 8004dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dd0:	e7eb      	b.n	8004daa <__swhatbuf_r+0x22>

08004dd2 <__smakebuf_r>:
 8004dd2:	898b      	ldrh	r3, [r1, #12]
 8004dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd6:	079d      	lsls	r5, r3, #30
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	d507      	bpl.n	8004dee <__smakebuf_r+0x1c>
 8004dde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	2301      	movs	r3, #1
 8004de8:	6163      	str	r3, [r4, #20]
 8004dea:	b003      	add	sp, #12
 8004dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dee:	466a      	mov	r2, sp
 8004df0:	ab01      	add	r3, sp, #4
 8004df2:	f7ff ffc9 	bl	8004d88 <__swhatbuf_r>
 8004df6:	9f00      	ldr	r7, [sp, #0]
 8004df8:	4605      	mov	r5, r0
 8004dfa:	4639      	mov	r1, r7
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	f7ff f8d7 	bl	8003fb0 <_malloc_r>
 8004e02:	b948      	cbnz	r0, 8004e18 <__smakebuf_r+0x46>
 8004e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e08:	059a      	lsls	r2, r3, #22
 8004e0a:	d4ee      	bmi.n	8004dea <__smakebuf_r+0x18>
 8004e0c:	f023 0303 	bic.w	r3, r3, #3
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	e7e2      	b.n	8004dde <__smakebuf_r+0xc>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e22:	81a3      	strh	r3, [r4, #12]
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	6020      	str	r0, [r4, #0]
 8004e28:	b15b      	cbz	r3, 8004e42 <__smakebuf_r+0x70>
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e30:	f000 f852 	bl	8004ed8 <_isatty_r>
 8004e34:	b128      	cbz	r0, 8004e42 <__smakebuf_r+0x70>
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	f023 0303 	bic.w	r3, r3, #3
 8004e3c:	f043 0301 	orr.w	r3, r3, #1
 8004e40:	81a3      	strh	r3, [r4, #12]
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	431d      	orrs	r5, r3
 8004e46:	81a5      	strh	r5, [r4, #12]
 8004e48:	e7cf      	b.n	8004dea <__smakebuf_r+0x18>

08004e4a <_putc_r>:
 8004e4a:	b570      	push	{r4, r5, r6, lr}
 8004e4c:	460d      	mov	r5, r1
 8004e4e:	4614      	mov	r4, r2
 8004e50:	4606      	mov	r6, r0
 8004e52:	b118      	cbz	r0, 8004e5c <_putc_r+0x12>
 8004e54:	6a03      	ldr	r3, [r0, #32]
 8004e56:	b90b      	cbnz	r3, 8004e5c <_putc_r+0x12>
 8004e58:	f7ff f9c2 	bl	80041e0 <__sinit>
 8004e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e5e:	07d8      	lsls	r0, r3, #31
 8004e60:	d405      	bmi.n	8004e6e <_putc_r+0x24>
 8004e62:	89a3      	ldrh	r3, [r4, #12]
 8004e64:	0599      	lsls	r1, r3, #22
 8004e66:	d402      	bmi.n	8004e6e <_putc_r+0x24>
 8004e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e6a:	f7ff fbc8 	bl	80045fe <__retarget_lock_acquire_recursive>
 8004e6e:	68a3      	ldr	r3, [r4, #8]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	60a3      	str	r3, [r4, #8]
 8004e76:	da05      	bge.n	8004e84 <_putc_r+0x3a>
 8004e78:	69a2      	ldr	r2, [r4, #24]
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	db12      	blt.n	8004ea4 <_putc_r+0x5a>
 8004e7e:	b2eb      	uxtb	r3, r5
 8004e80:	2b0a      	cmp	r3, #10
 8004e82:	d00f      	beq.n	8004ea4 <_putc_r+0x5a>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	6022      	str	r2, [r4, #0]
 8004e8a:	701d      	strb	r5, [r3, #0]
 8004e8c:	b2ed      	uxtb	r5, r5
 8004e8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e90:	07da      	lsls	r2, r3, #31
 8004e92:	d405      	bmi.n	8004ea0 <_putc_r+0x56>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	059b      	lsls	r3, r3, #22
 8004e98:	d402      	bmi.n	8004ea0 <_putc_r+0x56>
 8004e9a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e9c:	f7ff fbb0 	bl	8004600 <__retarget_lock_release_recursive>
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f7ff fa8a 	bl	80043c2 <__swbuf_r>
 8004eae:	4605      	mov	r5, r0
 8004eb0:	e7ed      	b.n	8004e8e <_putc_r+0x44>
	...

08004eb4 <_fstat_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4d06      	ldr	r5, [pc, #24]	@ (8004ed4 <_fstat_r+0x20>)
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	602b      	str	r3, [r5, #0]
 8004ec2:	f7fc fe29 	bl	8001b18 <_fstat>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	d102      	bne.n	8004ed0 <_fstat_r+0x1c>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	b103      	cbz	r3, 8004ed0 <_fstat_r+0x1c>
 8004ece:	6023      	str	r3, [r4, #0]
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000298 	.word	0x20000298

08004ed8 <_isatty_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	2300      	movs	r3, #0
 8004edc:	4d05      	ldr	r5, [pc, #20]	@ (8004ef4 <_isatty_r+0x1c>)
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fc fe27 	bl	8001b36 <_isatty>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_isatty_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_isatty_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000298 	.word	0x20000298

08004ef8 <memchr>:
 8004ef8:	4603      	mov	r3, r0
 8004efa:	b510      	push	{r4, lr}
 8004efc:	b2c9      	uxtb	r1, r1
 8004efe:	4402      	add	r2, r0
 8004f00:	4293      	cmp	r3, r2
 8004f02:	4618      	mov	r0, r3
 8004f04:	d101      	bne.n	8004f0a <memchr+0x12>
 8004f06:	2000      	movs	r0, #0
 8004f08:	e003      	b.n	8004f12 <memchr+0x1a>
 8004f0a:	7804      	ldrb	r4, [r0, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	428c      	cmp	r4, r1
 8004f10:	d1f6      	bne.n	8004f00 <memchr+0x8>
 8004f12:	bd10      	pop	{r4, pc}

08004f14 <_init>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr

08004f20 <_fini>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr
